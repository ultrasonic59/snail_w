   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_rtc.c"
  23              	.Ltext0:
  24              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c"
 23383              		.align	2
 23384              		.global	RTC_DeInit
 23385              		.thumb
 23386              		.thumb_func
 23388              	RTC_DeInit:
 23389              	.LFB29:
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @file    stm32f2xx_rtc.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Initialization
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Daylight Saving configuration
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Output pin Configuration
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Coarse Calibration configuration
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - TimeStamp configuration
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Tampers configuration
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Backup Data Registers configuration
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Interrupts and flags management
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *  @verbatim
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                               Backup Domain Operating Condition
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          VDD supply is powered off.
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          source.
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            1 - The RTC
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            2 - The LSE oscillator
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          to VDD), the following functions are available:
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                    Backup Domain Reset
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          occurs:
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                RCC_BackupResetCmd().
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                powered off.
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                   Backup Domain Access
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          write accesses. 
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                   RTC Driver: how to use it
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Time and Date configuration
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===========================
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              and RTC_SetDate() functions.
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              functions.
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              hour to the RTC Calendar.    
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Alarm configuration
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          RTC Wakeup configuration
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ========================
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function  
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Outputs configuration
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          =====================
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The RTC has 2 different outputs:
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              and WaKeUp signals.          
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC_OutputConfig() function.                
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFO_CALIB: this output is used to manage the RTC Clock divided 
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              by 64 (512Hz) signal.
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Coarse Calibration configuration
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          =================================
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function  
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          TimeStamp configuration
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          =======================
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function to select the corresponding pin.     
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Tamper configuration
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ====================
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC Tamper trigger using the RTC_TamperConfig() 
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function to select the corresponding pin.   
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Backup Data Registers configuration
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.  
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * 
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                  RTC and low power modes
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           function.
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           and Standby lowpower modes.
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           or the RTC wakeup events.
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           clock source is LSE or LSI.
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFO_ALARM output
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFO_CALIB output
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFI_TAMPER
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFI_TIMESTAMP
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFI_TAMPER
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFI_TIMESTAMP
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * 
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *  @endverbatim
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ******************************************************************************
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @attention
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ******************************************************************************
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */ 
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #include "stm32f2xx_rtc.h"
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #include "stm32f2xx_rcc.h"
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC 
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief RTC driver modules
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Masks Definition */
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00008000)
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Private_Functions
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */ 
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                  Initialization and Configuration functions
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   synchronization check and reference clock detection enable.
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****        prescaler to a high value to minimize consumption.
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      counting after 4 RTCCLK cycles.
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      (RSF clear and RSF check).
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         registers.       
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 23390              		.loc 1 347 0
 23391              		.cfi_startproc
 23392              		@ args = 0, pretend = 0, frame = 16
 23393              		@ frame_needed = 1, uses_anonymous_args = 0
 23394 0000 80B5     		push	{r7, lr}
 23395              	.LCFI0:
 23396              		.cfi_def_cfa_offset 8
 23397 0002 84B0     		sub	sp, sp, #16
 23398              	.LCFI1:
 23399              		.cfi_def_cfa_offset 24
 23400 0004 00AF     		add	r7, sp, #0
 23401              		.cfi_offset 14, -4
 23402              		.cfi_offset 7, -8
 23403              	.LCFI2:
 23404              		.cfi_def_cfa_register 7
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 23405              		.loc 1 348 0
 23406 0006 4FF00003 		mov	r3, #0
 23407 000a 7B60     		str	r3, [r7, #4]
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 23408              		.loc 1 349 0
 23409 000c 4FF00003 		mov	r3, #0
 23410 0010 BB60     		str	r3, [r7, #8]
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 23411              		.loc 1 350 0
 23412 0012 4FF00003 		mov	r3, #0
 23413 0016 FB73     		strb	r3, [r7, #15]
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 23414              		.loc 1 353 0
 23415 0018 4FF42053 		mov	r3, #10240
 23416 001c C4F20003 		movt	r3, 16384
 23417 0020 4FF0CA02 		mov	r2, #202
 23418 0024 5A62     		str	r2, [r3, #36]
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 23419              		.loc 1 354 0
 23420 0026 4FF42053 		mov	r3, #10240
 23421 002a C4F20003 		movt	r3, 16384
 23422 002e 4FF05302 		mov	r2, #83
 23423 0032 5A62     		str	r2, [r3, #36]
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 23424              		.loc 1 357 0
 23425 0034 FFF7FEFF 		bl	RTC_EnterInitMode
 23426 0038 0346     		mov	r3, r0
 23427 003a 002B     		cmp	r3, #0
 23428 003c 03D1     		bne	.L2
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 23429              		.loc 1 359 0
 23430 003e 4FF00003 		mov	r3, #0
 23431 0042 FB73     		strb	r3, [r7, #15]
 23432 0044 84E0     		b	.L3
 23433              	.L2:
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Reset TR, DR and CR registers */
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 23434              		.loc 1 364 0
 23435 0046 4FF42053 		mov	r3, #10240
 23436 004a C4F20003 		movt	r3, 16384
 23437 004e 4FF00002 		mov	r2, #0
 23438 0052 1A60     		str	r2, [r3, #0]
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 23439              		.loc 1 365 0
 23440 0054 4FF42053 		mov	r3, #10240
 23441 0058 C4F20003 		movt	r3, 16384
 23442 005c 42F20112 		movw	r2, #8449
 23443 0060 5A60     		str	r2, [r3, #4]
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 23444              		.loc 1 367 0
 23445 0062 4FF42053 		mov	r3, #10240
 23446 0066 C4F20003 		movt	r3, 16384
 23447 006a 4FF42052 		mov	r2, #10240
 23448 006e C4F20002 		movt	r2, 16384
 23449 0072 9268     		ldr	r2, [r2, #8]
 23450 0074 02F00702 		and	r2, r2, #7
 23451 0078 9A60     		str	r2, [r3, #8]
 23452              	.L5:
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     do
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 23453              		.loc 1 372 0 discriminator 1
 23454 007a 4FF42053 		mov	r3, #10240
 23455 007e C4F20003 		movt	r3, 16384
 23456 0082 DB68     		ldr	r3, [r3, #12]
 23457 0084 03F00403 		and	r3, r3, #4
 23458 0088 BB60     		str	r3, [r7, #8]
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       wutcounter++;  
 23459              		.loc 1 373 0 discriminator 1
 23460 008a 7B68     		ldr	r3, [r7, #4]
 23461 008c 03F10103 		add	r3, r3, #1
 23462 0090 7B60     		str	r3, [r7, #4]
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 23463              		.loc 1 374 0 discriminator 1
 23464 0092 7B68     		ldr	r3, [r7, #4]
 23465 0094 B3F5803F 		cmp	r3, #65536
 23466 0098 02D0     		beq	.L4
 23467 009a BB68     		ldr	r3, [r7, #8]
 23468 009c 002B     		cmp	r3, #0
 23469 009e ECD0     		beq	.L5
 23470              	.L4:
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 23471              		.loc 1 376 0
 23472 00a0 4FF42053 		mov	r3, #10240
 23473 00a4 C4F20003 		movt	r3, 16384
 23474 00a8 DB68     		ldr	r3, [r3, #12]
 23475 00aa 03F00403 		and	r3, r3, #4
 23476 00ae 002B     		cmp	r3, #0
 23477 00b0 03D1     		bne	.L6
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 23478              		.loc 1 378 0
 23479 00b2 4FF00003 		mov	r3, #0
 23480 00b6 FB73     		strb	r3, [r7, #15]
 23481 00b8 4AE0     		b	.L3
 23482              	.L6:
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Reset all RTC CR register bits */
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 23483              		.loc 1 383 0
 23484 00ba 4FF42053 		mov	r3, #10240
 23485 00be C4F20003 		movt	r3, 16384
 23486 00c2 9B68     		ldr	r3, [r3, #8]
 23487 00c4 4FF42053 		mov	r3, #10240
 23488 00c8 C4F20003 		movt	r3, 16384
 23489 00cc 4FF00002 		mov	r2, #0
 23490 00d0 9A60     		str	r2, [r3, #8]
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 23491              		.loc 1 384 0
 23492 00d2 4FF42053 		mov	r3, #10240
 23493 00d6 C4F20003 		movt	r3, 16384
 23494 00da 4FF6FF72 		movw	r2, #65535
 23495 00de 5A61     		str	r2, [r3, #20]
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 23496              		.loc 1 385 0
 23497 00e0 4FF42053 		mov	r3, #10240
 23498 00e4 C4F20003 		movt	r3, 16384
 23499 00e8 4FF0FF02 		mov	r2, #255
 23500 00ec C0F27F02 		movt	r2, 127
 23501 00f0 1A61     		str	r2, [r3, #16]
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 23502              		.loc 1 386 0
 23503 00f2 4FF42053 		mov	r3, #10240
 23504 00f6 C4F20003 		movt	r3, 16384
 23505 00fa 4FF00002 		mov	r2, #0
 23506 00fe 9A61     		str	r2, [r3, #24]
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 23507              		.loc 1 387 0
 23508 0100 4FF42053 		mov	r3, #10240
 23509 0104 C4F20003 		movt	r3, 16384
 23510 0108 4FF00002 		mov	r2, #0
 23511 010c DA61     		str	r2, [r3, #28]
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 23512              		.loc 1 388 0
 23513 010e 4FF42053 		mov	r3, #10240
 23514 0112 C4F20003 		movt	r3, 16384
 23515 0116 4FF00002 		mov	r2, #0
 23516 011a 1A62     		str	r2, [r3, #32]
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 23517              		.loc 1 391 0
 23518 011c 4FF42053 		mov	r3, #10240
 23519 0120 C4F20003 		movt	r3, 16384
 23520 0124 4FF00002 		mov	r2, #0
 23521 0128 DA60     		str	r2, [r3, #12]
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 23522              		.loc 1 394 0
 23523 012a 4FF42053 		mov	r3, #10240
 23524 012e C4F20003 		movt	r3, 16384
 23525 0132 4FF00002 		mov	r2, #0
 23526 0136 1A64     		str	r2, [r3, #64]
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 23527              		.loc 1 396 0
 23528 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 23529 013c 0346     		mov	r3, r0
 23530 013e 002B     		cmp	r3, #0
 23531 0140 03D1     		bne	.L7
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       {
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****         status = ERROR;
 23532              		.loc 1 398 0
 23533 0142 4FF00003 		mov	r3, #0
 23534 0146 FB73     		strb	r3, [r7, #15]
 23535 0148 02E0     		b	.L3
 23536              	.L7:
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       }
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       else
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       {
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****         status = SUCCESS;      
 23537              		.loc 1 402 0
 23538 014a 4FF00103 		mov	r3, #1
 23539 014e FB73     		strb	r3, [r7, #15]
 23540              	.L3:
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       }
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF;  
 23541              		.loc 1 408 0
 23542 0150 4FF42053 		mov	r3, #10240
 23543 0154 C4F20003 		movt	r3, 16384
 23544 0158 4FF0FF02 		mov	r2, #255
 23545 015c 5A62     		str	r2, [r3, #36]
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 23546              		.loc 1 410 0
 23547 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 23548              		.loc 1 411 0
 23549 0160 1846     		mov	r0, r3
 23550 0162 07F11007 		add	r7, r7, #16
 23551 0166 BD46     		mov	sp, r7
 23552 0168 80BD     		pop	{r7, pc}
 23553              		.cfi_endproc
 23554              	.LFE29:
 23556 016a 00BF     		.align	2
 23557              		.global	RTC_Init
 23558              		.thumb
 23559              		.thumb_func
 23561              	RTC_Init:
 23562              	.LFB30:
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         in RTC_InitStruct.
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialization mode only.  
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 23563              		.loc 1 425 0
 23564              		.cfi_startproc
 23565              		@ args = 0, pretend = 0, frame = 16
 23566              		@ frame_needed = 1, uses_anonymous_args = 0
 23567 016c 80B5     		push	{r7, lr}
 23568              	.LCFI3:
 23569              		.cfi_def_cfa_offset 8
 23570 016e 84B0     		sub	sp, sp, #16
 23571              	.LCFI4:
 23572              		.cfi_def_cfa_offset 24
 23573 0170 00AF     		add	r7, sp, #0
 23574              		.cfi_offset 14, -4
 23575              		.cfi_offset 7, -8
 23576              	.LCFI5:
 23577              		.cfi_def_cfa_register 7
 23578 0172 7860     		str	r0, [r7, #4]
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 23579              		.loc 1 426 0
 23580 0174 4FF00003 		mov	r3, #0
 23581 0178 FB73     		strb	r3, [r7, #15]
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 23582              		.loc 1 434 0
 23583 017a 4FF42053 		mov	r3, #10240
 23584 017e C4F20003 		movt	r3, 16384
 23585 0182 4FF0CA02 		mov	r2, #202
 23586 0186 5A62     		str	r2, [r3, #36]
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 23587              		.loc 1 435 0
 23588 0188 4FF42053 		mov	r3, #10240
 23589 018c C4F20003 		movt	r3, 16384
 23590 0190 4FF05302 		mov	r2, #83
 23591 0194 5A62     		str	r2, [r3, #36]
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 23592              		.loc 1 438 0
 23593 0196 FFF7FEFF 		bl	RTC_EnterInitMode
 23594 019a 0346     		mov	r3, r0
 23595 019c 002B     		cmp	r3, #0
 23596 019e 03D1     		bne	.L9
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 23597              		.loc 1 440 0
 23598 01a0 4FF00003 		mov	r3, #0
 23599 01a4 FB73     		strb	r3, [r7, #15]
 23600 01a6 35E0     		b	.L10
 23601              	.L9:
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 23602              		.loc 1 445 0
 23603 01a8 4FF42053 		mov	r3, #10240
 23604 01ac C4F20003 		movt	r3, 16384
 23605 01b0 4FF42052 		mov	r2, #10240
 23606 01b4 C4F20002 		movt	r2, 16384
 23607 01b8 9268     		ldr	r2, [r2, #8]
 23608 01ba 22F04002 		bic	r2, r2, #64
 23609 01be 9A60     		str	r2, [r3, #8]
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set RTC_CR register */
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 23610              		.loc 1 447 0
 23611 01c0 4FF42053 		mov	r3, #10240
 23612 01c4 C4F20003 		movt	r3, 16384
 23613 01c8 4FF42052 		mov	r2, #10240
 23614 01cc C4F20002 		movt	r2, 16384
 23615 01d0 9168     		ldr	r1, [r2, #8]
 23616 01d2 7A68     		ldr	r2, [r7, #4]
 23617 01d4 1268     		ldr	r2, [r2, #0]
 23618 01d6 41EA0202 		orr	r2, r1, r2
 23619 01da 9A60     		str	r2, [r3, #8]
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the RTC PRER */
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 23620              		.loc 1 450 0
 23621 01dc 4FF42053 		mov	r3, #10240
 23622 01e0 C4F20003 		movt	r3, 16384
 23623 01e4 7A68     		ldr	r2, [r7, #4]
 23624 01e6 9268     		ldr	r2, [r2, #8]
 23625 01e8 1A61     		str	r2, [r3, #16]
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 23626              		.loc 1 451 0
 23627 01ea 4FF42053 		mov	r3, #10240
 23628 01ee C4F20003 		movt	r3, 16384
 23629 01f2 4FF42052 		mov	r2, #10240
 23630 01f6 C4F20002 		movt	r2, 16384
 23631 01fa 1169     		ldr	r1, [r2, #16]
 23632 01fc 7A68     		ldr	r2, [r7, #4]
 23633 01fe 5268     		ldr	r2, [r2, #4]
 23634 0200 4FEA0242 		lsl	r2, r2, #16
 23635 0204 41EA0202 		orr	r2, r1, r2
 23636 0208 1A61     		str	r2, [r3, #16]
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode();
 23637              		.loc 1 454 0
 23638 020a FFF7FEFF 		bl	RTC_ExitInitMode
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;    
 23639              		.loc 1 456 0
 23640 020e 4FF00103 		mov	r3, #1
 23641 0212 FB73     		strb	r3, [r7, #15]
 23642              	.L10:
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 23643              		.loc 1 459 0
 23644 0214 4FF42053 		mov	r3, #10240
 23645 0218 C4F20003 		movt	r3, 16384
 23646 021c 4FF0FF02 		mov	r2, #255
 23647 0220 5A62     		str	r2, [r3, #36]
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 23648              		.loc 1 461 0
 23649 0222 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 23650              		.loc 1 462 0
 23651 0224 1846     		mov	r0, r3
 23652 0226 07F11007 		add	r7, r7, #16
 23653 022a BD46     		mov	sp, r7
 23654 022c 80BD     		pop	{r7, pc}
 23655              		.cfi_endproc
 23656              	.LFE30:
 23658 022e 00BF     		.align	2
 23659              		.global	RTC_StructInit
 23660              		.thumb
 23661              		.thumb_func
 23663              	RTC_StructInit:
 23664              	.LFB31:
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialized.
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 23665              		.loc 1 471 0
 23666              		.cfi_startproc
 23667              		@ args = 0, pretend = 0, frame = 8
 23668              		@ frame_needed = 1, uses_anonymous_args = 0
 23669              		@ link register save eliminated.
 23670 0230 80B4     		push	{r7}
 23671              	.LCFI6:
 23672              		.cfi_def_cfa_offset 4
 23673 0232 83B0     		sub	sp, sp, #12
 23674              	.LCFI7:
 23675              		.cfi_def_cfa_offset 16
 23676 0234 00AF     		add	r7, sp, #0
 23677              		.cfi_offset 7, -4
 23678              	.LCFI8:
 23679              		.cfi_def_cfa_register 7
 23680 0236 7860     		str	r0, [r7, #4]
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 23681              		.loc 1 473 0
 23682 0238 7B68     		ldr	r3, [r7, #4]
 23683 023a 4FF00002 		mov	r2, #0
 23684 023e 1A60     		str	r2, [r3, #0]
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 23685              		.loc 1 476 0
 23686 0240 7B68     		ldr	r3, [r7, #4]
 23687 0242 4FF07F02 		mov	r2, #127
 23688 0246 5A60     		str	r2, [r3, #4]
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 23689              		.loc 1 479 0
 23690 0248 7B68     		ldr	r3, [r7, #4]
 23691 024a 4FF0FF02 		mov	r2, #255
 23692 024e 9A60     		str	r2, [r3, #8]
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 23693              		.loc 1 480 0
 23694 0250 07F10C07 		add	r7, r7, #12
 23695 0254 BD46     		mov	sp, r7
 23696 0256 80BC     		pop	{r7}
 23697 0258 7047     		bx	lr
 23698              		.cfi_endproc
 23699              	.LFE31:
 23701 025a 00BF     		.align	2
 23702              		.global	RTC_WriteProtectionCmd
 23703              		.thumb
 23704              		.thumb_func
 23706              	RTC_WriteProtectionCmd:
 23707              	.LFB32:
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the write protection.
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 23708              		.loc 1 493 0
 23709              		.cfi_startproc
 23710              		@ args = 0, pretend = 0, frame = 8
 23711              		@ frame_needed = 1, uses_anonymous_args = 0
 23712              		@ link register save eliminated.
 23713 025c 80B4     		push	{r7}
 23714              	.LCFI9:
 23715              		.cfi_def_cfa_offset 4
 23716 025e 83B0     		sub	sp, sp, #12
 23717              	.LCFI10:
 23718              		.cfi_def_cfa_offset 16
 23719 0260 00AF     		add	r7, sp, #0
 23720              		.cfi_offset 7, -4
 23721              	.LCFI11:
 23722              		.cfi_def_cfa_register 7
 23723 0262 0346     		mov	r3, r0
 23724 0264 FB71     		strb	r3, [r7, #7]
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 23725              		.loc 1 497 0
 23726 0266 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23727 0268 002B     		cmp	r3, #0
 23728 026a 07D0     		beq	.L13
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Enable the write protection for RTC registers */
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->WPR = 0xFF;   
 23729              		.loc 1 500 0
 23730 026c 4FF42053 		mov	r3, #10240
 23731 0270 C4F20003 		movt	r3, 16384
 23732 0274 4FF0FF02 		mov	r2, #255
 23733 0278 5A62     		str	r2, [r3, #36]
 23734 027a 0DE0     		b	.L12
 23735              	.L13:
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the write protection for RTC registers */
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->WPR = 0xCA;
 23736              		.loc 1 505 0
 23737 027c 4FF42053 		mov	r3, #10240
 23738 0280 C4F20003 		movt	r3, 16384
 23739 0284 4FF0CA02 		mov	r2, #202
 23740 0288 5A62     		str	r2, [r3, #36]
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->WPR = 0x53;    
 23741              		.loc 1 506 0
 23742 028a 4FF42053 		mov	r3, #10240
 23743 028e C4F20003 		movt	r3, 16384
 23744 0292 4FF05302 		mov	r2, #83
 23745 0296 5A62     		str	r2, [r3, #36]
 23746              	.L12:
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 23747              		.loc 1 508 0
 23748 0298 07F10C07 		add	r7, r7, #12
 23749 029c BD46     		mov	sp, r7
 23750 029e 80BC     		pop	{r7}
 23751 02a0 7047     		bx	lr
 23752              		.cfi_endproc
 23753              	.LFE32:
 23755 02a2 00BF     		.align	2
 23756              		.global	RTC_EnterInitMode
 23757              		.thumb
 23758              		.thumb_func
 23760              	RTC_EnterInitMode:
 23761              	.LFB33:
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 23762              		.loc 1 520 0
 23763              		.cfi_startproc
 23764              		@ args = 0, pretend = 0, frame = 16
 23765              		@ frame_needed = 1, uses_anonymous_args = 0
 23766              		@ link register save eliminated.
 23767 02a4 80B4     		push	{r7}
 23768              	.LCFI12:
 23769              		.cfi_def_cfa_offset 4
 23770 02a6 85B0     		sub	sp, sp, #20
 23771              	.LCFI13:
 23772              		.cfi_def_cfa_offset 24
 23773 02a8 00AF     		add	r7, sp, #0
 23774              		.cfi_offset 7, -4
 23775              	.LCFI14:
 23776              		.cfi_def_cfa_register 7
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 23777              		.loc 1 521 0
 23778 02aa 4FF00003 		mov	r3, #0
 23779 02ae 7B60     		str	r3, [r7, #4]
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 23780              		.loc 1 522 0
 23781 02b0 4FF00003 		mov	r3, #0
 23782 02b4 FB73     		strb	r3, [r7, #15]
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t initstatus = 0x00;
 23783              		.loc 1 523 0
 23784 02b6 4FF00003 		mov	r3, #0
 23785 02ba BB60     		str	r3, [r7, #8]
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check if the Initialization mode is set */
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 23786              		.loc 1 526 0
 23787 02bc 4FF42053 		mov	r3, #10240
 23788 02c0 C4F20003 		movt	r3, 16384
 23789 02c4 DB68     		ldr	r3, [r3, #12]
 23790 02c6 03F04003 		and	r3, r3, #64
 23791 02ca 002B     		cmp	r3, #0
 23792 02cc 2AD1     		bne	.L16
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set the Initialization mode */
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 23793              		.loc 1 529 0
 23794 02ce 4FF42053 		mov	r3, #10240
 23795 02d2 C4F20003 		movt	r3, 16384
 23796 02d6 4FF0FF32 		mov	r2, #-1
 23797 02da DA60     		str	r2, [r3, #12]
 23798              	.L18:
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     do
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 23799              		.loc 1 534 0 discriminator 1
 23800 02dc 4FF42053 		mov	r3, #10240
 23801 02e0 C4F20003 		movt	r3, 16384
 23802 02e4 DB68     		ldr	r3, [r3, #12]
 23803 02e6 03F04003 		and	r3, r3, #64
 23804 02ea BB60     		str	r3, [r7, #8]
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       initcounter++;  
 23805              		.loc 1 535 0 discriminator 1
 23806 02ec 7B68     		ldr	r3, [r7, #4]
 23807 02ee 03F10103 		add	r3, r3, #1
 23808 02f2 7B60     		str	r3, [r7, #4]
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 23809              		.loc 1 536 0 discriminator 1
 23810 02f4 7B68     		ldr	r3, [r7, #4]
 23811 02f6 B3F5803F 		cmp	r3, #65536
 23812 02fa 02D0     		beq	.L17
 23813 02fc BB68     		ldr	r3, [r7, #8]
 23814 02fe 002B     		cmp	r3, #0
 23815 0300 ECD0     		beq	.L18
 23816              	.L17:
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 23817              		.loc 1 538 0
 23818 0302 4FF42053 		mov	r3, #10240
 23819 0306 C4F20003 		movt	r3, 16384
 23820 030a DB68     		ldr	r3, [r3, #12]
 23821 030c 03F04003 		and	r3, r3, #64
 23822 0310 002B     		cmp	r3, #0
 23823 0312 03D0     		beq	.L19
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 23824              		.loc 1 540 0
 23825 0314 4FF00103 		mov	r3, #1
 23826 0318 FB73     		strb	r3, [r7, #15]
 23827 031a 06E0     		b	.L20
 23828              	.L19:
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 23829              		.loc 1 544 0
 23830 031c 4FF00003 		mov	r3, #0
 23831 0320 FB73     		strb	r3, [r7, #15]
 23832 0322 02E0     		b	.L20
 23833              	.L16:
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }        
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;  
 23834              		.loc 1 549 0
 23835 0324 4FF00103 		mov	r3, #1
 23836 0328 FB73     		strb	r3, [r7, #15]
 23837              	.L20:
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (status);  
 23838              		.loc 1 552 0
 23839 032a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 23840              		.loc 1 553 0
 23841 032c 1846     		mov	r0, r3
 23842 032e 07F11407 		add	r7, r7, #20
 23843 0332 BD46     		mov	sp, r7
 23844 0334 80BC     		pop	{r7}
 23845 0336 7047     		bx	lr
 23846              		.cfi_endproc
 23847              	.LFE33:
 23849              		.align	2
 23850              		.global	RTC_ExitInitMode
 23851              		.thumb
 23852              		.thumb_func
 23854              	RTC_ExitInitMode:
 23855              	.LFB34:
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_ExitInitMode(void)
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** { 
 23856              		.loc 1 565 0
 23857              		.cfi_startproc
 23858              		@ args = 0, pretend = 0, frame = 0
 23859              		@ frame_needed = 1, uses_anonymous_args = 0
 23860              		@ link register save eliminated.
 23861 0338 80B4     		push	{r7}
 23862              	.LCFI15:
 23863              		.cfi_def_cfa_offset 4
 23864 033a 00AF     		add	r7, sp, #0
 23865              		.cfi_offset 7, -4
 23866              	.LCFI16:
 23867              		.cfi_def_cfa_register 7
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Exit Initialization mode */
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 23868              		.loc 1 567 0
 23869 033c 4FF42053 		mov	r3, #10240
 23870 0340 C4F20003 		movt	r3, 16384
 23871 0344 4FF42052 		mov	r2, #10240
 23872 0348 C4F20002 		movt	r2, 16384
 23873 034c D268     		ldr	r2, [r2, #12]
 23874 034e 22F08002 		bic	r2, r2, #128
 23875 0352 DA60     		str	r2, [r3, #12]
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 23876              		.loc 1 568 0
 23877 0354 BD46     		mov	sp, r7
 23878 0356 80BC     		pop	{r7}
 23879 0358 7047     		bx	lr
 23880              		.cfi_endproc
 23881              	.LFE34:
 23883 035a 00BF     		.align	2
 23884              		.global	RTC_WaitForSynchro
 23885              		.thumb
 23886              		.thumb_func
 23888              	RTC_WaitForSynchro:
 23889              	.LFB35:
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         synchronized with RTC APB clock.
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         the software must first clear the RSF flag. 
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 23890              		.loc 1 587 0
 23891              		.cfi_startproc
 23892              		@ args = 0, pretend = 0, frame = 16
 23893              		@ frame_needed = 1, uses_anonymous_args = 0
 23894              		@ link register save eliminated.
 23895 035c 80B4     		push	{r7}
 23896              	.LCFI17:
 23897              		.cfi_def_cfa_offset 4
 23898 035e 85B0     		sub	sp, sp, #20
 23899              	.LCFI18:
 23900              		.cfi_def_cfa_offset 24
 23901 0360 00AF     		add	r7, sp, #0
 23902              		.cfi_offset 7, -4
 23903              	.LCFI19:
 23904              		.cfi_def_cfa_register 7
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 23905              		.loc 1 588 0
 23906 0362 4FF00003 		mov	r3, #0
 23907 0366 7B60     		str	r3, [r7, #4]
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 23908              		.loc 1 589 0
 23909 0368 4FF00003 		mov	r3, #0
 23910 036c FB73     		strb	r3, [r7, #15]
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 23911              		.loc 1 590 0
 23912 036e 4FF00003 		mov	r3, #0
 23913 0372 BB60     		str	r3, [r7, #8]
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 23914              		.loc 1 593 0
 23915 0374 4FF42053 		mov	r3, #10240
 23916 0378 C4F20003 		movt	r3, 16384
 23917 037c 4FF0CA02 		mov	r2, #202
 23918 0380 5A62     		str	r2, [r3, #36]
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 23919              		.loc 1 594 0
 23920 0382 4FF42053 		mov	r3, #10240
 23921 0386 C4F20003 		movt	r3, 16384
 23922 038a 4FF05302 		mov	r2, #83
 23923 038e 5A62     		str	r2, [r3, #36]
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear RSF flag */
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 23924              		.loc 1 597 0
 23925 0390 4FF42053 		mov	r3, #10240
 23926 0394 C4F20003 		movt	r3, 16384
 23927 0398 4FF42052 		mov	r2, #10240
 23928 039c C4F20002 		movt	r2, 16384
 23929 03a0 D268     		ldr	r2, [r2, #12]
 23930 03a2 22F0A002 		bic	r2, r2, #160
 23931 03a6 DA60     		str	r2, [r3, #12]
 23932              	.L24:
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Wait the registers to be synchronised */
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   do
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 23933              		.loc 1 602 0 discriminator 1
 23934 03a8 4FF42053 		mov	r3, #10240
 23935 03ac C4F20003 		movt	r3, 16384
 23936 03b0 DB68     		ldr	r3, [r3, #12]
 23937 03b2 03F02003 		and	r3, r3, #32
 23938 03b6 BB60     		str	r3, [r7, #8]
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     synchrocounter++;  
 23939              		.loc 1 603 0 discriminator 1
 23940 03b8 7B68     		ldr	r3, [r7, #4]
 23941 03ba 03F10103 		add	r3, r3, #1
 23942 03be 7B60     		str	r3, [r7, #4]
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 23943              		.loc 1 604 0 discriminator 1
 23944 03c0 7B68     		ldr	r3, [r7, #4]
 23945 03c2 B3F5004F 		cmp	r3, #32768
 23946 03c6 02D0     		beq	.L23
 23947 03c8 BB68     		ldr	r3, [r7, #8]
 23948 03ca 002B     		cmp	r3, #0
 23949 03cc ECD0     		beq	.L24
 23950              	.L23:
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 23951              		.loc 1 606 0
 23952 03ce 4FF42053 		mov	r3, #10240
 23953 03d2 C4F20003 		movt	r3, 16384
 23954 03d6 DB68     		ldr	r3, [r3, #12]
 23955 03d8 03F02003 		and	r3, r3, #32
 23956 03dc 002B     		cmp	r3, #0
 23957 03de 03D0     		beq	.L25
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;
 23958              		.loc 1 608 0
 23959 03e0 4FF00103 		mov	r3, #1
 23960 03e4 FB73     		strb	r3, [r7, #15]
 23961 03e6 02E0     		b	.L26
 23962              	.L25:
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 23963              		.loc 1 612 0
 23964 03e8 4FF00003 		mov	r3, #0
 23965 03ec FB73     		strb	r3, [r7, #15]
 23966              	.L26:
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }        
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 23967              		.loc 1 616 0
 23968 03ee 4FF42053 		mov	r3, #10240
 23969 03f2 C4F20003 		movt	r3, 16384
 23970 03f6 4FF0FF02 		mov	r2, #255
 23971 03fa 5A62     		str	r2, [r3, #36]
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (status); 
 23972              		.loc 1 618 0
 23973 03fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 23974              		.loc 1 619 0
 23975 03fe 1846     		mov	r0, r3
 23976 0400 07F11407 		add	r7, r7, #20
 23977 0404 BD46     		mov	sp, r7
 23978 0406 80BC     		pop	{r7}
 23979 0408 7047     		bx	lr
 23980              		.cfi_endproc
 23981              	.LFE35:
 23983 040a 00BF     		.align	2
 23984              		.global	RTC_RefClockCmd
 23985              		.thumb
 23986              		.thumb_func
 23988              	RTC_RefClockCmd:
 23989              	.LFB36:
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** { 
 23990              		.loc 1 630 0
 23991              		.cfi_startproc
 23992              		@ args = 0, pretend = 0, frame = 16
 23993              		@ frame_needed = 1, uses_anonymous_args = 0
 23994 040c 80B5     		push	{r7, lr}
 23995              	.LCFI20:
 23996              		.cfi_def_cfa_offset 8
 23997 040e 84B0     		sub	sp, sp, #16
 23998              	.LCFI21:
 23999              		.cfi_def_cfa_offset 24
 24000 0410 00AF     		add	r7, sp, #0
 24001              		.cfi_offset 14, -4
 24002              		.cfi_offset 7, -8
 24003              	.LCFI22:
 24004              		.cfi_def_cfa_register 7
 24005 0412 0346     		mov	r3, r0
 24006 0414 FB71     		strb	r3, [r7, #7]
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 24007              		.loc 1 631 0
 24008 0416 4FF00003 		mov	r3, #0
 24009 041a FB73     		strb	r3, [r7, #15]
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 24010              		.loc 1 637 0
 24011 041c 4FF42053 		mov	r3, #10240
 24012 0420 C4F20003 		movt	r3, 16384
 24013 0424 4FF0CA02 		mov	r2, #202
 24014 0428 5A62     		str	r2, [r3, #36]
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 24015              		.loc 1 638 0
 24016 042a 4FF42053 		mov	r3, #10240
 24017 042e C4F20003 		movt	r3, 16384
 24018 0432 4FF05302 		mov	r2, #83
 24019 0436 5A62     		str	r2, [r3, #36]
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 24020              		.loc 1 641 0
 24021 0438 FFF7FEFF 		bl	RTC_EnterInitMode
 24022 043c 0346     		mov	r3, r0
 24023 043e 002B     		cmp	r3, #0
 24024 0440 03D1     		bne	.L28
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 24025              		.loc 1 643 0
 24026 0442 4FF00003 		mov	r3, #0
 24027 0446 FB73     		strb	r3, [r7, #15]
 24028 0448 20E0     		b	.L29
 24029              	.L28:
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {  
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if (NewState != DISABLE)
 24030              		.loc 1 647 0
 24031 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24032 044c 002B     		cmp	r3, #0
 24033 044e 0CD0     		beq	.L30
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Enable the RTC reference clock detection */
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 24034              		.loc 1 650 0
 24035 0450 4FF42053 		mov	r3, #10240
 24036 0454 C4F20003 		movt	r3, 16384
 24037 0458 4FF42052 		mov	r2, #10240
 24038 045c C4F20002 		movt	r2, 16384
 24039 0460 9268     		ldr	r2, [r2, #8]
 24040 0462 42F01002 		orr	r2, r2, #16
 24041 0466 9A60     		str	r2, [r3, #8]
 24042 0468 0BE0     		b	.L31
 24043              	.L30:
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Disable the RTC reference clock detection */
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 24044              		.loc 1 655 0
 24045 046a 4FF42053 		mov	r3, #10240
 24046 046e C4F20003 		movt	r3, 16384
 24047 0472 4FF42052 		mov	r2, #10240
 24048 0476 C4F20002 		movt	r2, 16384
 24049 047a 9268     		ldr	r2, [r2, #8]
 24050 047c 22F01002 		bic	r2, r2, #16
 24051 0480 9A60     		str	r2, [r3, #8]
 24052              	.L31:
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode();
 24053              		.loc 1 658 0
 24054 0482 FFF7FEFF 		bl	RTC_ExitInitMode
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;
 24055              		.loc 1 660 0
 24056 0486 4FF00103 		mov	r3, #1
 24057 048a FB73     		strb	r3, [r7, #15]
 24058              	.L29:
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF;  
 24059              		.loc 1 664 0
 24060 048c 4FF42053 		mov	r3, #10240
 24061 0490 C4F20003 		movt	r3, 16384
 24062 0494 4FF0FF02 		mov	r2, #255
 24063 0498 5A62     		str	r2, [r3, #36]
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status; 
 24064              		.loc 1 666 0
 24065 049a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 24066              		.loc 1 667 0
 24067 049c 1846     		mov	r0, r3
 24068 049e 07F11007 		add	r7, r7, #16
 24069 04a2 BD46     		mov	sp, r7
 24070 04a4 80BD     		pop	{r7, pc}
 24071              		.cfi_endproc
 24072              	.LFE36:
 24074 04a6 00BF     		.align	2
 24075              		.global	RTC_SetTime
 24076              		.thumb
 24077              		.thumb_func
 24079              	RTC_SetTime:
 24080              	.LFB37:
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    Time and Date configuration functions
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   (Time and Date).
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Set the RTC current time.
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be  one of the following values:
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                        the time configuration information for the RTC.     
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 24081              		.loc 1 701 0
 24082              		.cfi_startproc
 24083              		@ args = 0, pretend = 0, frame = 16
 24084              		@ frame_needed = 1, uses_anonymous_args = 0
 24085 04a8 90B5     		push	{r4, r7, lr}
 24086              	.LCFI23:
 24087              		.cfi_def_cfa_offset 12
 24088 04aa 85B0     		sub	sp, sp, #20
 24089              	.LCFI24:
 24090              		.cfi_def_cfa_offset 32
 24091 04ac 00AF     		add	r7, sp, #0
 24092              		.cfi_offset 14, -4
 24093              		.cfi_offset 7, -8
 24094              		.cfi_offset 4, -12
 24095              	.LCFI25:
 24096              		.cfi_def_cfa_register 7
 24097 04ae 7860     		str	r0, [r7, #4]
 24098 04b0 3960     		str	r1, [r7, #0]
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 24099              		.loc 1 702 0
 24100 04b2 4FF00003 		mov	r3, #0
 24101 04b6 FB60     		str	r3, [r7, #12]
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 24102              		.loc 1 703 0
 24103 04b8 4FF00003 		mov	r3, #0
 24104 04bc FB72     		strb	r3, [r7, #11]
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 24105              		.loc 1 708 0
 24106 04be 7B68     		ldr	r3, [r7, #4]
 24107 04c0 002B     		cmp	r3, #0
 24108 04c2 0DD1     		bne	.L33
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 24109              		.loc 1 710 0
 24110 04c4 4FF42053 		mov	r3, #10240
 24111 04c8 C4F20003 		movt	r3, 16384
 24112 04cc 9B68     		ldr	r3, [r3, #8]
 24113 04ce 03F04003 		and	r3, r3, #64
 24114 04d2 002B     		cmp	r3, #0
 24115 04d4 19D1     		bne	.L34
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 24116              		.loc 1 717 0
 24117 04d6 3B68     		ldr	r3, [r7, #0]
 24118 04d8 4FF00002 		mov	r2, #0
 24119 04dc DA70     		strb	r2, [r3, #3]
 24120 04de 14E0     		b	.L34
 24121              	.L33:
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 24122              		.loc 1 725 0
 24123 04e0 4FF42053 		mov	r3, #10240
 24124 04e4 C4F20003 		movt	r3, 16384
 24125 04e8 9B68     		ldr	r3, [r3, #8]
 24126 04ea 03F04003 		and	r3, r3, #64
 24127 04ee 002B     		cmp	r3, #0
 24128 04f0 07D0     		beq	.L35
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 24129              		.loc 1 727 0
 24130 04f2 3B68     		ldr	r3, [r7, #0]
 24131 04f4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24132 04f6 1846     		mov	r0, r3
 24133 04f8 01F018F9 		bl	RTC_Bcd2ToByte
 24134 04fc 0346     		mov	r3, r0
 24135 04fe FB60     		str	r3, [r7, #12]
 24136 0500 03E0     		b	.L34
 24137              	.L35:
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 24138              		.loc 1 733 0
 24139 0502 3B68     		ldr	r3, [r7, #0]
 24140 0504 4FF00002 		mov	r2, #0
 24141 0508 DA70     		strb	r2, [r3, #3]
 24142              	.L34:
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 24143              		.loc 1 741 0
 24144 050a 7B68     		ldr	r3, [r7, #4]
 24145 050c 002B     		cmp	r3, #0
 24146 050e 15D0     		beq	.L36
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 24147              		.loc 1 743 0
 24148 0510 3B68     		ldr	r3, [r7, #0]
 24149 0512 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24150 0514 4FEA0342 		lsl	r2, r3, #16
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 24151              		.loc 1 744 0
 24152 0518 3B68     		ldr	r3, [r7, #0]
 24153 051a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24154 051c 4FEA0323 		lsl	r3, r3, #8
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 24155              		.loc 1 743 0
 24156 0520 42EA0302 		orr	r2, r2, r3
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 24157              		.loc 1 745 0
 24158 0524 3B68     		ldr	r3, [r7, #0]
 24159 0526 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 24160              		.loc 1 744 0
 24161 0528 42EA0302 		orr	r2, r2, r3
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 24162              		.loc 1 746 0
 24163 052c 3B68     		ldr	r3, [r7, #0]
 24164 052e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 24165 0530 4FEA0343 		lsl	r3, r3, #16
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 24166              		.loc 1 743 0
 24167 0534 42EA0303 		orr	r3, r2, r3
 24168 0538 FB60     		str	r3, [r7, #12]
 24169 053a 20E0     		b	.L37
 24170              	.L36:
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 24171              		.loc 1 750 0
 24172 053c 3B68     		ldr	r3, [r7, #0]
 24173 053e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24174 0540 1846     		mov	r0, r3
 24175 0542 01F0D1F8 		bl	RTC_ByteToBcd2
 24176 0546 0346     		mov	r3, r0
 24177 0548 4FEA0344 		lsl	r4, r3, #16
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 24178              		.loc 1 751 0
 24179 054c 3B68     		ldr	r3, [r7, #0]
 24180 054e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24181 0550 1846     		mov	r0, r3
 24182 0552 01F0C9F8 		bl	RTC_ByteToBcd2
 24183 0556 0346     		mov	r3, r0
 24184 0558 4FEA0323 		lsl	r3, r3, #8
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 24185              		.loc 1 750 0
 24186 055c 44EA0304 		orr	r4, r4, r3
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 24187              		.loc 1 752 0
 24188 0560 3B68     		ldr	r3, [r7, #0]
 24189 0562 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 24190 0564 1846     		mov	r0, r3
 24191 0566 01F0BFF8 		bl	RTC_ByteToBcd2
 24192 056a 0346     		mov	r3, r0
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 24193              		.loc 1 751 0
 24194 056c 44EA0302 		orr	r2, r4, r3
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 24195              		.loc 1 753 0
 24196 0570 3B68     		ldr	r3, [r7, #0]
 24197 0572 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 24198 0574 4FEA0343 		lsl	r3, r3, #16
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 24199              		.loc 1 750 0
 24200 0578 42EA0303 		orr	r3, r2, r3
 24201 057c FB60     		str	r3, [r7, #12]
 24202              	.L37:
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 24203              		.loc 1 757 0
 24204 057e 4FF42053 		mov	r3, #10240
 24205 0582 C4F20003 		movt	r3, 16384
 24206 0586 4FF0CA02 		mov	r2, #202
 24207 058a 5A62     		str	r2, [r3, #36]
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 24208              		.loc 1 758 0
 24209 058c 4FF42053 		mov	r3, #10240
 24210 0590 C4F20003 		movt	r3, 16384
 24211 0594 4FF05302 		mov	r2, #83
 24212 0598 5A62     		str	r2, [r3, #36]
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 24213              		.loc 1 761 0
 24214 059a FFF7FEFF 		bl	RTC_EnterInitMode
 24215 059e 0346     		mov	r3, r0
 24216 05a0 002B     		cmp	r3, #0
 24217 05a2 03D1     		bne	.L38
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 24218              		.loc 1 763 0
 24219 05a4 4FF00003 		mov	r3, #0
 24220 05a8 FB72     		strb	r3, [r7, #11]
 24221 05aa 19E0     		b	.L39
 24222              	.L38:
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set the RTC_TR register */
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 24223              		.loc 1 768 0
 24224 05ac 4FF42052 		mov	r2, #10240
 24225 05b0 C4F20002 		movt	r2, 16384
 24226 05b4 F968     		ldr	r1, [r7, #12]
 24227 05b6 47F67F73 		movw	r3, #32639
 24228 05ba C0F27F03 		movt	r3, 127
 24229 05be 01EA0303 		and	r3, r1, r3
 24230 05c2 1360     		str	r3, [r2, #0]
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode(); 
 24231              		.loc 1 771 0
 24232 05c4 FFF7FEFF 		bl	RTC_ExitInitMode
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 24233              		.loc 1 773 0
 24234 05c8 FFF7FEFF 		bl	RTC_WaitForSynchro
 24235 05cc 0346     		mov	r3, r0
 24236 05ce 002B     		cmp	r3, #0
 24237 05d0 03D1     		bne	.L40
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 24238              		.loc 1 775 0
 24239 05d2 4FF00003 		mov	r3, #0
 24240 05d6 FB72     		strb	r3, [r7, #11]
 24241 05d8 02E0     		b	.L39
 24242              	.L40:
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 24243              		.loc 1 779 0
 24244 05da 4FF00103 		mov	r3, #1
 24245 05de FB72     		strb	r3, [r7, #11]
 24246              	.L39:
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 24247              		.loc 1 784 0
 24248 05e0 4FF42053 		mov	r3, #10240
 24249 05e4 C4F20003 		movt	r3, 16384
 24250 05e8 4FF0FF02 		mov	r2, #255
 24251 05ec 5A62     		str	r2, [r3, #36]
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 24252              		.loc 1 786 0
 24253 05ee FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 24254              		.loc 1 787 0
 24255 05f0 1846     		mov	r0, r3
 24256 05f2 07F11407 		add	r7, r7, #20
 24257 05f6 BD46     		mov	sp, r7
 24258 05f8 90BD     		pop	{r4, r7, pc}
 24259              		.cfi_endproc
 24260              	.LFE37:
 24262 05fa 00BF     		.align	2
 24263              		.global	RTC_TimeStructInit
 24264              		.thumb
 24265              		.thumb_func
 24267              	RTC_TimeStructInit:
 24268              	.LFB38:
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialized.
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 24269              		.loc 1 797 0
 24270              		.cfi_startproc
 24271              		@ args = 0, pretend = 0, frame = 8
 24272              		@ frame_needed = 1, uses_anonymous_args = 0
 24273              		@ link register save eliminated.
 24274 05fc 80B4     		push	{r7}
 24275              	.LCFI26:
 24276              		.cfi_def_cfa_offset 4
 24277 05fe 83B0     		sub	sp, sp, #12
 24278              	.LCFI27:
 24279              		.cfi_def_cfa_offset 16
 24280 0600 00AF     		add	r7, sp, #0
 24281              		.cfi_offset 7, -4
 24282              	.LCFI28:
 24283              		.cfi_def_cfa_register 7
 24284 0602 7860     		str	r0, [r7, #4]
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Time = 00h:00min:00sec */
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 24285              		.loc 1 799 0
 24286 0604 7B68     		ldr	r3, [r7, #4]
 24287 0606 4FF00002 		mov	r2, #0
 24288 060a DA70     		strb	r2, [r3, #3]
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 24289              		.loc 1 800 0
 24290 060c 7B68     		ldr	r3, [r7, #4]
 24291 060e 4FF00002 		mov	r2, #0
 24292 0612 1A70     		strb	r2, [r3, #0]
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 24293              		.loc 1 801 0
 24294 0614 7B68     		ldr	r3, [r7, #4]
 24295 0616 4FF00002 		mov	r2, #0
 24296 061a 5A70     		strb	r2, [r3, #1]
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 24297              		.loc 1 802 0
 24298 061c 7B68     		ldr	r3, [r7, #4]
 24299 061e 4FF00002 		mov	r2, #0
 24300 0622 9A70     		strb	r2, [r3, #2]
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 24301              		.loc 1 803 0
 24302 0624 07F10C07 		add	r7, r7, #12
 24303 0628 BD46     		mov	sp, r7
 24304 062a 80BC     		pop	{r7}
 24305 062c 7047     		bx	lr
 24306              		.cfi_endproc
 24307              	.LFE38:
 24309 062e 00BF     		.align	2
 24310              		.global	RTC_GetTime
 24311              		.thumb
 24312              		.thumb_func
 24314              	RTC_GetTime:
 24315              	.LFB39:
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Get the RTC current Time.
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be  one of the following values:
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                        contain the returned current time configuration.     
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 24316              		.loc 1 816 0
 24317              		.cfi_startproc
 24318              		@ args = 0, pretend = 0, frame = 16
 24319              		@ frame_needed = 1, uses_anonymous_args = 0
 24320 0630 80B5     		push	{r7, lr}
 24321              	.LCFI29:
 24322              		.cfi_def_cfa_offset 8
 24323 0632 84B0     		sub	sp, sp, #16
 24324              	.LCFI30:
 24325              		.cfi_def_cfa_offset 24
 24326 0634 00AF     		add	r7, sp, #0
 24327              		.cfi_offset 14, -4
 24328              		.cfi_offset 7, -8
 24329              	.LCFI31:
 24330              		.cfi_def_cfa_register 7
 24331 0636 7860     		str	r0, [r7, #4]
 24332 0638 3960     		str	r1, [r7, #0]
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 24333              		.loc 1 817 0
 24334 063a 4FF00003 		mov	r3, #0
 24335 063e FB60     		str	r3, [r7, #12]
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_TR register */
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 24336              		.loc 1 823 0
 24337 0640 4FF42053 		mov	r3, #10240
 24338 0644 C4F20003 		movt	r3, 16384
 24339 0648 1A68     		ldr	r2, [r3, #0]
 24340 064a 47F67F73 		movw	r3, #32639
 24341 064e C0F27F03 		movt	r3, 127
 24342 0652 02EA0303 		and	r3, r2, r3
 24343 0656 FB60     		str	r3, [r7, #12]
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 24344              		.loc 1 826 0
 24345 0658 FB68     		ldr	r3, [r7, #12]
 24346 065a 03F47C13 		and	r3, r3, #4128768
 24347 065e 4FEA1343 		lsr	r3, r3, #16
 24348 0662 DAB2     		uxtb	r2, r3
 24349 0664 3B68     		ldr	r3, [r7, #0]
 24350 0666 1A70     		strb	r2, [r3, #0]
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 24351              		.loc 1 827 0
 24352 0668 FB68     		ldr	r3, [r7, #12]
 24353 066a 03F4FE43 		and	r3, r3, #32512
 24354 066e 4FEA1323 		lsr	r3, r3, #8
 24355 0672 DAB2     		uxtb	r2, r3
 24356 0674 3B68     		ldr	r3, [r7, #0]
 24357 0676 5A70     		strb	r2, [r3, #1]
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 24358              		.loc 1 828 0
 24359 0678 FB68     		ldr	r3, [r7, #12]
 24360 067a DBB2     		uxtb	r3, r3
 24361 067c 03F07F03 		and	r3, r3, #127
 24362 0680 DAB2     		uxtb	r2, r3
 24363 0682 3B68     		ldr	r3, [r7, #0]
 24364 0684 9A70     		strb	r2, [r3, #2]
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 24365              		.loc 1 829 0
 24366 0686 FB68     		ldr	r3, [r7, #12]
 24367 0688 03F48003 		and	r3, r3, #4194304
 24368 068c 4FEA1343 		lsr	r3, r3, #16
 24369 0690 DAB2     		uxtb	r2, r3
 24370 0692 3B68     		ldr	r3, [r7, #0]
 24371 0694 DA70     		strb	r2, [r3, #3]
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 24372              		.loc 1 832 0
 24373 0696 7B68     		ldr	r3, [r7, #4]
 24374 0698 002B     		cmp	r3, #0
 24375 069a 1AD1     		bne	.L42
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 24376              		.loc 1 835 0
 24377 069c 3B68     		ldr	r3, [r7, #0]
 24378 069e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24379 06a0 1846     		mov	r0, r3
 24380 06a2 01F043F8 		bl	RTC_Bcd2ToByte
 24381 06a6 0346     		mov	r3, r0
 24382 06a8 1A46     		mov	r2, r3
 24383 06aa 3B68     		ldr	r3, [r7, #0]
 24384 06ac 1A70     		strb	r2, [r3, #0]
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 24385              		.loc 1 836 0
 24386 06ae 3B68     		ldr	r3, [r7, #0]
 24387 06b0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24388 06b2 1846     		mov	r0, r3
 24389 06b4 01F03AF8 		bl	RTC_Bcd2ToByte
 24390 06b8 0346     		mov	r3, r0
 24391 06ba 1A46     		mov	r2, r3
 24392 06bc 3B68     		ldr	r3, [r7, #0]
 24393 06be 5A70     		strb	r2, [r3, #1]
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 24394              		.loc 1 837 0
 24395 06c0 3B68     		ldr	r3, [r7, #0]
 24396 06c2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 24397 06c4 1846     		mov	r0, r3
 24398 06c6 01F031F8 		bl	RTC_Bcd2ToByte
 24399 06ca 0346     		mov	r3, r0
 24400 06cc 1A46     		mov	r2, r3
 24401 06ce 3B68     		ldr	r3, [r7, #0]
 24402 06d0 9A70     		strb	r2, [r3, #2]
 24403              	.L42:
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 24404              		.loc 1 839 0
 24405 06d2 07F11007 		add	r7, r7, #16
 24406 06d6 BD46     		mov	sp, r7
 24407 06d8 80BD     		pop	{r7, pc}
 24408              		.cfi_endproc
 24409              	.LFE39:
 24411 06da 00BF     		.align	2
 24412              		.global	RTC_SetDate
 24413              		.thumb
 24414              		.thumb_func
 24416              	RTC_SetDate:
 24417              	.LFB40:
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Set the RTC current date.
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be  one of the following values:
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                         the date configuration information for the RTC.
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 24418              		.loc 1 854 0
 24419              		.cfi_startproc
 24420              		@ args = 0, pretend = 0, frame = 16
 24421              		@ frame_needed = 1, uses_anonymous_args = 0
 24422 06dc 90B5     		push	{r4, r7, lr}
 24423              	.LCFI32:
 24424              		.cfi_def_cfa_offset 12
 24425 06de 85B0     		sub	sp, sp, #20
 24426              	.LCFI33:
 24427              		.cfi_def_cfa_offset 32
 24428 06e0 00AF     		add	r7, sp, #0
 24429              		.cfi_offset 14, -4
 24430              		.cfi_offset 7, -8
 24431              		.cfi_offset 4, -12
 24432              	.LCFI34:
 24433              		.cfi_def_cfa_register 7
 24434 06e2 7860     		str	r0, [r7, #4]
 24435 06e4 3960     		str	r1, [r7, #0]
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 24436              		.loc 1 855 0
 24437 06e6 4FF00003 		mov	r3, #0
 24438 06ea FB60     		str	r3, [r7, #12]
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 24439              		.loc 1 856 0
 24440 06ec 4FF00003 		mov	r3, #0
 24441 06f0 FB72     		strb	r3, [r7, #11]
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 24442              		.loc 1 861 0
 24443 06f2 7B68     		ldr	r3, [r7, #4]
 24444 06f4 002B     		cmp	r3, #0
 24445 06f6 0FD1     		bne	.L45
 24446              		.loc 1 861 0 is_stmt 0 discriminator 1
 24447 06f8 3B68     		ldr	r3, [r7, #0]
 24448 06fa 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24449 06fc 03F01003 		and	r3, r3, #16
 24450 0700 002B     		cmp	r3, #0
 24451 0702 09D0     		beq	.L45
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 24452              		.loc 1 863 0 is_stmt 1
 24453 0704 3B68     		ldr	r3, [r7, #0]
 24454 0706 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24455 0708 23F01003 		bic	r3, r3, #16
 24456 070c DBB2     		uxtb	r3, r3
 24457 070e 03F10A03 		add	r3, r3, #10
 24458 0712 DAB2     		uxtb	r2, r3
 24459 0714 3B68     		ldr	r3, [r7, #0]
 24460 0716 5A70     		strb	r2, [r3, #1]
 24461              	.L45:
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 24462              		.loc 1 865 0
 24463 0718 7B68     		ldr	r3, [r7, #4]
 24464 071a 002B     		cmp	r3, #0
 24465 071c 0DD0     		beq	.L46
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 24466              		.loc 1 874 0
 24467 071e 3B68     		ldr	r3, [r7, #0]
 24468 0720 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24469 0722 1846     		mov	r0, r3
 24470 0724 01F002F8 		bl	RTC_Bcd2ToByte
 24471 0728 0346     		mov	r3, r0
 24472 072a FB60     		str	r3, [r7, #12]
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 24473              		.loc 1 876 0
 24474 072c 3B68     		ldr	r3, [r7, #0]
 24475 072e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 24476 0730 1846     		mov	r0, r3
 24477 0732 00F0FBFF 		bl	RTC_Bcd2ToByte
 24478 0736 0346     		mov	r3, r0
 24479 0738 FB60     		str	r3, [r7, #12]
 24480              	.L46:
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 24481              		.loc 1 882 0
 24482 073a 7B68     		ldr	r3, [r7, #4]
 24483 073c 002B     		cmp	r3, #0
 24484 073e 15D0     		beq	.L47
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 24485              		.loc 1 884 0
 24486 0740 3B68     		ldr	r3, [r7, #0]
 24487 0742 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 24488 0744 4FEA0342 		lsl	r2, r3, #16
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 24489              		.loc 1 885 0
 24490 0748 3B68     		ldr	r3, [r7, #0]
 24491 074a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24492 074c 4FEA0323 		lsl	r3, r3, #8
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 24493              		.loc 1 884 0
 24494 0750 42EA0302 		orr	r2, r2, r3
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 24495              		.loc 1 886 0
 24496 0754 3B68     		ldr	r3, [r7, #0]
 24497 0756 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 24498              		.loc 1 885 0
 24499 0758 42EA0302 		orr	r2, r2, r3
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 24500              		.loc 1 887 0
 24501 075c 3B68     		ldr	r3, [r7, #0]
 24502 075e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24503 0760 4FEA4333 		lsl	r3, r3, #13
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 24504              		.loc 1 884 0
 24505 0764 42EA0303 		orr	r3, r2, r3
 24506 0768 FB60     		str	r3, [r7, #12]
 24507 076a 20E0     		b	.L48
 24508              	.L47:
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 24509              		.loc 1 891 0
 24510 076c 3B68     		ldr	r3, [r7, #0]
 24511 076e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 24512 0770 1846     		mov	r0, r3
 24513 0772 00F0B9FF 		bl	RTC_ByteToBcd2
 24514 0776 0346     		mov	r3, r0
 24515 0778 4FEA0344 		lsl	r4, r3, #16
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 24516              		.loc 1 892 0
 24517 077c 3B68     		ldr	r3, [r7, #0]
 24518 077e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24519 0780 1846     		mov	r0, r3
 24520 0782 00F0B1FF 		bl	RTC_ByteToBcd2
 24521 0786 0346     		mov	r3, r0
 24522 0788 4FEA0323 		lsl	r3, r3, #8
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 24523              		.loc 1 891 0
 24524 078c 44EA0304 		orr	r4, r4, r3
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 24525              		.loc 1 893 0
 24526 0790 3B68     		ldr	r3, [r7, #0]
 24527 0792 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 24528 0794 1846     		mov	r0, r3
 24529 0796 00F0A7FF 		bl	RTC_ByteToBcd2
 24530 079a 0346     		mov	r3, r0
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 24531              		.loc 1 892 0
 24532 079c 44EA0302 		orr	r2, r4, r3
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 24533              		.loc 1 894 0
 24534 07a0 3B68     		ldr	r3, [r7, #0]
 24535 07a2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24536 07a4 4FEA4333 		lsl	r3, r3, #13
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 24537              		.loc 1 891 0
 24538 07a8 42EA0303 		orr	r3, r2, r3
 24539 07ac FB60     		str	r3, [r7, #12]
 24540              	.L48:
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 24541              		.loc 1 898 0
 24542 07ae 4FF42053 		mov	r3, #10240
 24543 07b2 C4F20003 		movt	r3, 16384
 24544 07b6 4FF0CA02 		mov	r2, #202
 24545 07ba 5A62     		str	r2, [r3, #36]
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 24546              		.loc 1 899 0
 24547 07bc 4FF42053 		mov	r3, #10240
 24548 07c0 C4F20003 		movt	r3, 16384
 24549 07c4 4FF05302 		mov	r2, #83
 24550 07c8 5A62     		str	r2, [r3, #36]
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 24551              		.loc 1 902 0
 24552 07ca FFF7FEFF 		bl	RTC_EnterInitMode
 24553 07ce 0346     		mov	r3, r0
 24554 07d0 002B     		cmp	r3, #0
 24555 07d2 03D1     		bne	.L49
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 24556              		.loc 1 904 0
 24557 07d4 4FF00003 		mov	r3, #0
 24558 07d8 FB72     		strb	r3, [r7, #11]
 24559 07da 17E0     		b	.L50
 24560              	.L49:
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set the RTC_DR register */
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 24561              		.loc 1 909 0
 24562 07dc 4FF42053 		mov	r3, #10240
 24563 07e0 C4F20003 		movt	r3, 16384
 24564 07e4 FA68     		ldr	r2, [r7, #12]
 24565 07e6 22F07F42 		bic	r2, r2, #-16777216
 24566 07ea 22F0C002 		bic	r2, r2, #192
 24567 07ee 5A60     		str	r2, [r3, #4]
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode(); 
 24568              		.loc 1 912 0
 24569 07f0 FFF7FEFF 		bl	RTC_ExitInitMode
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 24570              		.loc 1 914 0
 24571 07f4 FFF7FEFF 		bl	RTC_WaitForSynchro
 24572 07f8 0346     		mov	r3, r0
 24573 07fa 002B     		cmp	r3, #0
 24574 07fc 03D1     		bne	.L51
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 24575              		.loc 1 916 0
 24576 07fe 4FF00003 		mov	r3, #0
 24577 0802 FB72     		strb	r3, [r7, #11]
 24578 0804 02E0     		b	.L50
 24579              	.L51:
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 24580              		.loc 1 920 0
 24581 0806 4FF00103 		mov	r3, #1
 24582 080a FB72     		strb	r3, [r7, #11]
 24583              	.L50:
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF;   
 24584              		.loc 1 924 0
 24585 080c 4FF42053 		mov	r3, #10240
 24586 0810 C4F20003 		movt	r3, 16384
 24587 0814 4FF0FF02 		mov	r2, #255
 24588 0818 5A62     		str	r2, [r3, #36]
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 24589              		.loc 1 926 0
 24590 081a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 24591              		.loc 1 927 0
 24592 081c 1846     		mov	r0, r3
 24593 081e 07F11407 		add	r7, r7, #20
 24594 0822 BD46     		mov	sp, r7
 24595 0824 90BD     		pop	{r4, r7, pc}
 24596              		.cfi_endproc
 24597              	.LFE40:
 24599 0826 00BF     		.align	2
 24600              		.global	RTC_DateStructInit
 24601              		.thumb
 24602              		.thumb_func
 24604              	RTC_DateStructInit:
 24605              	.LFB41:
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         (Monday, January 01 xx00).
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialized.
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 24606              		.loc 1 937 0
 24607              		.cfi_startproc
 24608              		@ args = 0, pretend = 0, frame = 8
 24609              		@ frame_needed = 1, uses_anonymous_args = 0
 24610              		@ link register save eliminated.
 24611 0828 80B4     		push	{r7}
 24612              	.LCFI35:
 24613              		.cfi_def_cfa_offset 4
 24614 082a 83B0     		sub	sp, sp, #12
 24615              	.LCFI36:
 24616              		.cfi_def_cfa_offset 16
 24617 082c 00AF     		add	r7, sp, #0
 24618              		.cfi_offset 7, -4
 24619              	.LCFI37:
 24620              		.cfi_def_cfa_register 7
 24621 082e 7860     		str	r0, [r7, #4]
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Monday, January 01 xx00 */
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 24622              		.loc 1 939 0
 24623 0830 7B68     		ldr	r3, [r7, #4]
 24624 0832 4FF00102 		mov	r2, #1
 24625 0836 1A70     		strb	r2, [r3, #0]
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 24626              		.loc 1 940 0
 24627 0838 7B68     		ldr	r3, [r7, #4]
 24628 083a 4FF00102 		mov	r2, #1
 24629 083e 9A70     		strb	r2, [r3, #2]
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 24630              		.loc 1 941 0
 24631 0840 7B68     		ldr	r3, [r7, #4]
 24632 0842 4FF00102 		mov	r2, #1
 24633 0846 5A70     		strb	r2, [r3, #1]
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 24634              		.loc 1 942 0
 24635 0848 7B68     		ldr	r3, [r7, #4]
 24636 084a 4FF00002 		mov	r2, #0
 24637 084e DA70     		strb	r2, [r3, #3]
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 24638              		.loc 1 943 0
 24639 0850 07F10C07 		add	r7, r7, #12
 24640 0854 BD46     		mov	sp, r7
 24641 0856 80BC     		pop	{r7}
 24642 0858 7047     		bx	lr
 24643              		.cfi_endproc
 24644              	.LFE41:
 24646 085a 00BF     		.align	2
 24647              		.global	RTC_GetDate
 24648              		.thumb
 24649              		.thumb_func
 24651              	RTC_GetDate:
 24652              	.LFB42:
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Get the RTC current date. 
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                        contain the returned current date configuration.     
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 24653              		.loc 1 956 0
 24654              		.cfi_startproc
 24655              		@ args = 0, pretend = 0, frame = 16
 24656              		@ frame_needed = 1, uses_anonymous_args = 0
 24657 085c 80B5     		push	{r7, lr}
 24658              	.LCFI38:
 24659              		.cfi_def_cfa_offset 8
 24660 085e 84B0     		sub	sp, sp, #16
 24661              	.LCFI39:
 24662              		.cfi_def_cfa_offset 24
 24663 0860 00AF     		add	r7, sp, #0
 24664              		.cfi_offset 14, -4
 24665              		.cfi_offset 7, -8
 24666              	.LCFI40:
 24667              		.cfi_def_cfa_register 7
 24668 0862 7860     		str	r0, [r7, #4]
 24669 0864 3960     		str	r1, [r7, #0]
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 24670              		.loc 1 957 0
 24671 0866 4FF00003 		mov	r3, #0
 24672 086a FB60     		str	r3, [r7, #12]
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_TR register */
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 24673              		.loc 1 963 0
 24674 086c 4FF42053 		mov	r3, #10240
 24675 0870 C4F20003 		movt	r3, 16384
 24676 0874 5B68     		ldr	r3, [r3, #4]
 24677 0876 23F07F43 		bic	r3, r3, #-16777216
 24678 087a 23F0C003 		bic	r3, r3, #192
 24679 087e FB60     		str	r3, [r7, #12]
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 24680              		.loc 1 966 0
 24681 0880 FB68     		ldr	r3, [r7, #12]
 24682 0882 03F47F03 		and	r3, r3, #16711680
 24683 0886 4FEA1343 		lsr	r3, r3, #16
 24684 088a DAB2     		uxtb	r2, r3
 24685 088c 3B68     		ldr	r3, [r7, #0]
 24686 088e DA70     		strb	r2, [r3, #3]
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 24687              		.loc 1 967 0
 24688 0890 FB68     		ldr	r3, [r7, #12]
 24689 0892 03F4F853 		and	r3, r3, #7936
 24690 0896 4FEA1323 		lsr	r3, r3, #8
 24691 089a DAB2     		uxtb	r2, r3
 24692 089c 3B68     		ldr	r3, [r7, #0]
 24693 089e 5A70     		strb	r2, [r3, #1]
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 24694              		.loc 1 968 0
 24695 08a0 FB68     		ldr	r3, [r7, #12]
 24696 08a2 DBB2     		uxtb	r3, r3
 24697 08a4 03F03F03 		and	r3, r3, #63
 24698 08a8 DAB2     		uxtb	r2, r3
 24699 08aa 3B68     		ldr	r3, [r7, #0]
 24700 08ac 9A70     		strb	r2, [r3, #2]
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 24701              		.loc 1 969 0
 24702 08ae FB68     		ldr	r3, [r7, #12]
 24703 08b0 03F46043 		and	r3, r3, #57344
 24704 08b4 4FEA5333 		lsr	r3, r3, #13
 24705 08b8 DAB2     		uxtb	r2, r3
 24706 08ba 3B68     		ldr	r3, [r7, #0]
 24707 08bc 1A70     		strb	r2, [r3, #0]
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 24708              		.loc 1 972 0
 24709 08be 7B68     		ldr	r3, [r7, #4]
 24710 08c0 002B     		cmp	r3, #0
 24711 08c2 1ED1     		bne	.L53
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 24712              		.loc 1 975 0
 24713 08c4 3B68     		ldr	r3, [r7, #0]
 24714 08c6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 24715 08c8 1846     		mov	r0, r3
 24716 08ca 00F02FFF 		bl	RTC_Bcd2ToByte
 24717 08ce 0346     		mov	r3, r0
 24718 08d0 1A46     		mov	r2, r3
 24719 08d2 3B68     		ldr	r3, [r7, #0]
 24720 08d4 DA70     		strb	r2, [r3, #3]
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 24721              		.loc 1 976 0
 24722 08d6 3B68     		ldr	r3, [r7, #0]
 24723 08d8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24724 08da 1846     		mov	r0, r3
 24725 08dc 00F026FF 		bl	RTC_Bcd2ToByte
 24726 08e0 0346     		mov	r3, r0
 24727 08e2 1A46     		mov	r2, r3
 24728 08e4 3B68     		ldr	r3, [r7, #0]
 24729 08e6 5A70     		strb	r2, [r3, #1]
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 24730              		.loc 1 977 0
 24731 08e8 3B68     		ldr	r3, [r7, #0]
 24732 08ea 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 24733 08ec 1846     		mov	r0, r3
 24734 08ee 00F01DFF 		bl	RTC_Bcd2ToByte
 24735 08f2 0346     		mov	r3, r0
 24736 08f4 1A46     		mov	r2, r3
 24737 08f6 3B68     		ldr	r3, [r7, #0]
 24738 08f8 9A70     		strb	r2, [r3, #2]
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 24739              		.loc 1 978 0
 24740 08fa 3B68     		ldr	r3, [r7, #0]
 24741 08fc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 24742 08fe 3B68     		ldr	r3, [r7, #0]
 24743 0900 1A70     		strb	r2, [r3, #0]
 24744              	.L53:
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 24745              		.loc 1 980 0
 24746 0902 07F11007 		add	r7, r7, #16
 24747 0906 BD46     		mov	sp, r7
 24748 0908 80BD     		pop	{r7, pc}
 24749              		.cfi_endproc
 24750              	.LFE42:
 24752 090a 00BF     		.align	2
 24753              		.global	RTC_SetAlarm
 24754              		.thumb
 24755              		.thumb_func
 24757              	RTC_SetAlarm:
 24758              	.LFB43:
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 24759              		.loc 1 1017 0
 24760              		.cfi_startproc
 24761              		@ args = 0, pretend = 0, frame = 24
 24762              		@ frame_needed = 1, uses_anonymous_args = 0
 24763 090c 90B5     		push	{r4, r7, lr}
 24764              	.LCFI41:
 24765              		.cfi_def_cfa_offset 12
 24766 090e 87B0     		sub	sp, sp, #28
 24767              	.LCFI42:
 24768              		.cfi_def_cfa_offset 40
 24769 0910 00AF     		add	r7, sp, #0
 24770              		.cfi_offset 14, -4
 24771              		.cfi_offset 7, -8
 24772              		.cfi_offset 4, -12
 24773              	.LCFI43:
 24774              		.cfi_def_cfa_register 7
 24775 0912 F860     		str	r0, [r7, #12]
 24776 0914 B960     		str	r1, [r7, #8]
 24777 0916 7A60     		str	r2, [r7, #4]
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 24778              		.loc 1 1018 0
 24779 0918 4FF00003 		mov	r3, #0
 24780 091c 7B61     		str	r3, [r7, #20]
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 24781              		.loc 1 1026 0
 24782 091e FB68     		ldr	r3, [r7, #12]
 24783 0920 002B     		cmp	r3, #0
 24784 0922 0DD1     		bne	.L56
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 24785              		.loc 1 1028 0
 24786 0924 4FF42053 		mov	r3, #10240
 24787 0928 C4F20003 		movt	r3, 16384
 24788 092c 9B68     		ldr	r3, [r3, #8]
 24789 092e 03F04003 		and	r3, r3, #64
 24790 0932 002B     		cmp	r3, #0
 24791 0934 2CD1     		bne	.L58
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 24792              		.loc 1 1035 0
 24793 0936 7B68     		ldr	r3, [r7, #4]
 24794 0938 4FF00002 		mov	r2, #0
 24795 093c DA70     		strb	r2, [r3, #3]
 24796 093e 27E0     		b	.L58
 24797              	.L56:
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 24798              		.loc 1 1052 0
 24799 0940 4FF42053 		mov	r3, #10240
 24800 0944 C4F20003 		movt	r3, 16384
 24801 0948 9B68     		ldr	r3, [r3, #8]
 24802 094a 03F04003 		and	r3, r3, #64
 24803 094e 002B     		cmp	r3, #0
 24804 0950 07D0     		beq	.L59
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 24805              		.loc 1 1054 0
 24806 0952 7B68     		ldr	r3, [r7, #4]
 24807 0954 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24808 0956 1846     		mov	r0, r3
 24809 0958 00F0E8FE 		bl	RTC_Bcd2ToByte
 24810 095c 0346     		mov	r3, r0
 24811 095e 7B61     		str	r3, [r7, #20]
 24812 0960 03E0     		b	.L60
 24813              	.L59:
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 24814              		.loc 1 1060 0
 24815 0962 7B68     		ldr	r3, [r7, #4]
 24816 0964 4FF00002 		mov	r2, #0
 24817 0968 DA70     		strb	r2, [r3, #3]
 24818              	.L60:
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 24819              		.loc 1 1067 0
 24820 096a 7B68     		ldr	r3, [r7, #4]
 24821 096c 9B68     		ldr	r3, [r3, #8]
 24822 096e 002B     		cmp	r3, #0
 24823 0970 07D1     		bne	.L61
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 24824              		.loc 1 1069 0
 24825 0972 7B68     		ldr	r3, [r7, #4]
 24826 0974 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 24827 0976 1846     		mov	r0, r3
 24828 0978 00F0D8FE 		bl	RTC_Bcd2ToByte
 24829 097c 0346     		mov	r3, r0
 24830 097e 7B61     		str	r3, [r7, #20]
 24831 0980 06E0     		b	.L58
 24832              	.L61:
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 24833              		.loc 1 1074 0
 24834 0982 7B68     		ldr	r3, [r7, #4]
 24835 0984 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 24836 0986 1846     		mov	r0, r3
 24837 0988 00F0D0FE 		bl	RTC_Bcd2ToByte
 24838 098c 0346     		mov	r3, r0
 24839 098e 7B61     		str	r3, [r7, #20]
 24840              	.L58:
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }    
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 24841              		.loc 1 1080 0
 24842 0990 FB68     		ldr	r3, [r7, #12]
 24843 0992 002B     		cmp	r3, #0
 24844 0994 23D0     		beq	.L62
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 24845              		.loc 1 1082 0
 24846 0996 7B68     		ldr	r3, [r7, #4]
 24847 0998 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24848 099a 4FEA0342 		lsl	r2, r3, #16
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 24849              		.loc 1 1083 0
 24850 099e 7B68     		ldr	r3, [r7, #4]
 24851 09a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24852 09a2 4FEA0323 		lsl	r3, r3, #8
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 24853              		.loc 1 1082 0
 24854 09a6 42EA0302 		orr	r2, r2, r3
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 24855              		.loc 1 1084 0
 24856 09aa 7B68     		ldr	r3, [r7, #4]
 24857 09ac 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 24858              		.loc 1 1083 0
 24859 09ae 42EA0302 		orr	r2, r2, r3
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 24860              		.loc 1 1085 0
 24861 09b2 7B68     		ldr	r3, [r7, #4]
 24862 09b4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 24863 09b6 4FEA0343 		lsl	r3, r3, #16
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 24864              		.loc 1 1084 0
 24865 09ba 42EA0302 		orr	r2, r2, r3
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 24866              		.loc 1 1086 0
 24867 09be 7B68     		ldr	r3, [r7, #4]
 24868 09c0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 24869 09c2 4FEA0363 		lsl	r3, r3, #24
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 24870              		.loc 1 1085 0
 24871 09c6 42EA0302 		orr	r2, r2, r3
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 24872              		.loc 1 1087 0
 24873 09ca 7B68     		ldr	r3, [r7, #4]
 24874 09cc 9B68     		ldr	r3, [r3, #8]
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 24875              		.loc 1 1086 0
 24876 09ce 42EA0302 		orr	r2, r2, r3
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 24877              		.loc 1 1088 0
 24878 09d2 7B68     		ldr	r3, [r7, #4]
 24879 09d4 5B68     		ldr	r3, [r3, #4]
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 24880              		.loc 1 1082 0
 24881 09d6 42EA0303 		orr	r3, r2, r3
 24882 09da 7B61     		str	r3, [r7, #20]
 24883 09dc 32E0     		b	.L63
 24884              	.L62:
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 24885              		.loc 1 1092 0
 24886 09de 7B68     		ldr	r3, [r7, #4]
 24887 09e0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 24888 09e2 1846     		mov	r0, r3
 24889 09e4 00F080FE 		bl	RTC_ByteToBcd2
 24890 09e8 0346     		mov	r3, r0
 24891 09ea 4FEA0344 		lsl	r4, r3, #16
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 24892              		.loc 1 1093 0
 24893 09ee 7B68     		ldr	r3, [r7, #4]
 24894 09f0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 24895 09f2 1846     		mov	r0, r3
 24896 09f4 00F078FE 		bl	RTC_ByteToBcd2
 24897 09f8 0346     		mov	r3, r0
 24898 09fa 4FEA0323 		lsl	r3, r3, #8
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 24899              		.loc 1 1092 0
 24900 09fe 44EA0304 		orr	r4, r4, r3
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 24901              		.loc 1 1094 0
 24902 0a02 7B68     		ldr	r3, [r7, #4]
 24903 0a04 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 24904 0a06 1846     		mov	r0, r3
 24905 0a08 00F06EFE 		bl	RTC_ByteToBcd2
 24906 0a0c 0346     		mov	r3, r0
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 24907              		.loc 1 1093 0
 24908 0a0e 44EA0302 		orr	r2, r4, r3
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 24909              		.loc 1 1095 0
 24910 0a12 7B68     		ldr	r3, [r7, #4]
 24911 0a14 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 24912 0a16 4FEA0343 		lsl	r3, r3, #16
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 24913              		.loc 1 1094 0
 24914 0a1a 42EA0304 		orr	r4, r2, r3
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 24915              		.loc 1 1096 0
 24916 0a1e 7B68     		ldr	r3, [r7, #4]
 24917 0a20 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 24918 0a22 1846     		mov	r0, r3
 24919 0a24 00F060FE 		bl	RTC_ByteToBcd2
 24920 0a28 0346     		mov	r3, r0
 24921 0a2a 4FEA0363 		lsl	r3, r3, #24
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 24922              		.loc 1 1095 0
 24923 0a2e 44EA0302 		orr	r2, r4, r3
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 24924              		.loc 1 1097 0
 24925 0a32 7B68     		ldr	r3, [r7, #4]
 24926 0a34 9B68     		ldr	r3, [r3, #8]
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 24927              		.loc 1 1096 0
 24928 0a36 42EA0302 		orr	r2, r2, r3
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 24929              		.loc 1 1098 0
 24930 0a3a 7B68     		ldr	r3, [r7, #4]
 24931 0a3c 5B68     		ldr	r3, [r3, #4]
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 24932              		.loc 1 1092 0
 24933 0a3e 42EA0303 		orr	r3, r2, r3
 24934 0a42 7B61     		str	r3, [r7, #20]
 24935              	.L63:
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 24936              		.loc 1 1102 0
 24937 0a44 4FF42053 		mov	r3, #10240
 24938 0a48 C4F20003 		movt	r3, 16384
 24939 0a4c 4FF0CA02 		mov	r2, #202
 24940 0a50 5A62     		str	r2, [r3, #36]
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 24941              		.loc 1 1103 0
 24942 0a52 4FF42053 		mov	r3, #10240
 24943 0a56 C4F20003 		movt	r3, 16384
 24944 0a5a 4FF05302 		mov	r2, #83
 24945 0a5e 5A62     		str	r2, [r3, #36]
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the Alarm register */
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 24946              		.loc 1 1106 0
 24947 0a60 BB68     		ldr	r3, [r7, #8]
 24948 0a62 B3F5807F 		cmp	r3, #256
 24949 0a66 06D1     		bne	.L64
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 24950              		.loc 1 1108 0
 24951 0a68 4FF42053 		mov	r3, #10240
 24952 0a6c C4F20003 		movt	r3, 16384
 24953 0a70 7A69     		ldr	r2, [r7, #20]
 24954 0a72 DA61     		str	r2, [r3, #28]
 24955 0a74 05E0     		b	.L65
 24956              	.L64:
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 24957              		.loc 1 1112 0
 24958 0a76 4FF42053 		mov	r3, #10240
 24959 0a7a C4F20003 		movt	r3, 16384
 24960 0a7e 7A69     		ldr	r2, [r7, #20]
 24961 0a80 1A62     		str	r2, [r3, #32]
 24962              	.L65:
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF;   
 24963              		.loc 1 1116 0
 24964 0a82 4FF42053 		mov	r3, #10240
 24965 0a86 C4F20003 		movt	r3, 16384
 24966 0a8a 4FF0FF02 		mov	r2, #255
 24967 0a8e 5A62     		str	r2, [r3, #36]
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 24968              		.loc 1 1117 0
 24969 0a90 07F11C07 		add	r7, r7, #28
 24970 0a94 BD46     		mov	sp, r7
 24971 0a96 90BD     		pop	{r4, r7, pc}
 24972              		.cfi_endproc
 24973              	.LFE43:
 24975              		.align	2
 24976              		.global	RTC_AlarmStructInit
 24977              		.thumb
 24978              		.thumb_func
 24980              	RTC_AlarmStructInit:
 24981              	.LFB44:
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         all fields are masked).
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         will be initialized.
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 24982              		.loc 1 1128 0
 24983              		.cfi_startproc
 24984              		@ args = 0, pretend = 0, frame = 8
 24985              		@ frame_needed = 1, uses_anonymous_args = 0
 24986              		@ link register save eliminated.
 24987 0a98 80B4     		push	{r7}
 24988              	.LCFI44:
 24989              		.cfi_def_cfa_offset 4
 24990 0a9a 83B0     		sub	sp, sp, #12
 24991              	.LCFI45:
 24992              		.cfi_def_cfa_offset 16
 24993 0a9c 00AF     		add	r7, sp, #0
 24994              		.cfi_offset 7, -4
 24995              	.LCFI46:
 24996              		.cfi_def_cfa_register 7
 24997 0a9e 7860     		str	r0, [r7, #4]
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 24998              		.loc 1 1130 0
 24999 0aa0 7B68     		ldr	r3, [r7, #4]
 25000 0aa2 4FF00002 		mov	r2, #0
 25001 0aa6 DA70     		strb	r2, [r3, #3]
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 25002              		.loc 1 1131 0
 25003 0aa8 7B68     		ldr	r3, [r7, #4]
 25004 0aaa 4FF00002 		mov	r2, #0
 25005 0aae 1A70     		strb	r2, [r3, #0]
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 25006              		.loc 1 1132 0
 25007 0ab0 7B68     		ldr	r3, [r7, #4]
 25008 0ab2 4FF00002 		mov	r2, #0
 25009 0ab6 5A70     		strb	r2, [r3, #1]
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 25010              		.loc 1 1133 0
 25011 0ab8 7B68     		ldr	r3, [r7, #4]
 25012 0aba 4FF00002 		mov	r2, #0
 25013 0abe 9A70     		strb	r2, [r3, #2]
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 25014              		.loc 1 1136 0
 25015 0ac0 7B68     		ldr	r3, [r7, #4]
 25016 0ac2 4FF00002 		mov	r2, #0
 25017 0ac6 9A60     		str	r2, [r3, #8]
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 25018              		.loc 1 1137 0
 25019 0ac8 7B68     		ldr	r3, [r7, #4]
 25020 0aca 4FF00102 		mov	r2, #1
 25021 0ace 1A73     		strb	r2, [r3, #12]
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 25022              		.loc 1 1140 0
 25023 0ad0 7B68     		ldr	r3, [r7, #4]
 25024 0ad2 4FF00002 		mov	r2, #0
 25025 0ad6 5A60     		str	r2, [r3, #4]
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25026              		.loc 1 1141 0
 25027 0ad8 07F10C07 		add	r7, r7, #12
 25028 0adc BD46     		mov	sp, r7
 25029 0ade 80BC     		pop	{r7}
 25030 0ae0 7047     		bx	lr
 25031              		.cfi_endproc
 25032              	.LFE44:
 25034 0ae2 00BF     		.align	2
 25035              		.global	RTC_GetAlarm
 25036              		.thumb
 25037              		.thumb_func
 25039              	RTC_GetAlarm:
 25040              	.LFB45:
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                          contains the output alarm configuration values.     
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25041              		.loc 1 1158 0
 25042              		.cfi_startproc
 25043              		@ args = 0, pretend = 0, frame = 24
 25044              		@ frame_needed = 1, uses_anonymous_args = 0
 25045 0ae4 80B5     		push	{r7, lr}
 25046              	.LCFI47:
 25047              		.cfi_def_cfa_offset 8
 25048 0ae6 86B0     		sub	sp, sp, #24
 25049              	.LCFI48:
 25050              		.cfi_def_cfa_offset 32
 25051 0ae8 00AF     		add	r7, sp, #0
 25052              		.cfi_offset 14, -4
 25053              		.cfi_offset 7, -8
 25054              	.LCFI49:
 25055              		.cfi_def_cfa_register 7
 25056 0aea F860     		str	r0, [r7, #12]
 25057 0aec B960     		str	r1, [r7, #8]
 25058 0aee 7A60     		str	r2, [r7, #4]
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 25059              		.loc 1 1159 0
 25060 0af0 4FF00003 		mov	r3, #0
 25061 0af4 7B61     		str	r3, [r7, #20]
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 25062              		.loc 1 1166 0
 25063 0af6 BB68     		ldr	r3, [r7, #8]
 25064 0af8 B3F5807F 		cmp	r3, #256
 25065 0afc 06D1     		bne	.L68
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 25066              		.loc 1 1168 0
 25067 0afe 4FF42053 		mov	r3, #10240
 25068 0b02 C4F20003 		movt	r3, 16384
 25069 0b06 DB69     		ldr	r3, [r3, #28]
 25070 0b08 7B61     		str	r3, [r7, #20]
 25071 0b0a 05E0     		b	.L69
 25072              	.L68:
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 25073              		.loc 1 1172 0
 25074 0b0c 4FF42053 		mov	r3, #10240
 25075 0b10 C4F20003 		movt	r3, 16384
 25076 0b14 1B6A     		ldr	r3, [r3, #32]
 25077 0b16 7B61     		str	r3, [r7, #20]
 25078              	.L69:
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the structure with the read parameters */
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 25079              		.loc 1 1176 0
 25080 0b18 7B69     		ldr	r3, [r7, #20]
 25081 0b1a 03F47C13 		and	r3, r3, #4128768
 25082 0b1e 4FEA1343 		lsr	r3, r3, #16
 25083 0b22 DAB2     		uxtb	r2, r3
 25084 0b24 7B68     		ldr	r3, [r7, #4]
 25085 0b26 1A70     		strb	r2, [r3, #0]
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 25086              		.loc 1 1178 0
 25087 0b28 7B69     		ldr	r3, [r7, #20]
 25088 0b2a 03F4FE43 		and	r3, r3, #32512
 25089 0b2e 4FEA1323 		lsr	r3, r3, #8
 25090 0b32 DAB2     		uxtb	r2, r3
 25091 0b34 7B68     		ldr	r3, [r7, #4]
 25092 0b36 5A70     		strb	r2, [r3, #1]
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 25093              		.loc 1 1180 0
 25094 0b38 7B69     		ldr	r3, [r7, #20]
 25095 0b3a DBB2     		uxtb	r3, r3
 25096 0b3c 03F07F03 		and	r3, r3, #127
 25097 0b40 DAB2     		uxtb	r2, r3
 25098 0b42 7B68     		ldr	r3, [r7, #4]
 25099 0b44 9A70     		strb	r2, [r3, #2]
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 25100              		.loc 1 1182 0
 25101 0b46 7B69     		ldr	r3, [r7, #20]
 25102 0b48 03F48003 		and	r3, r3, #4194304
 25103 0b4c 4FEA1343 		lsr	r3, r3, #16
 25104 0b50 DAB2     		uxtb	r2, r3
 25105 0b52 7B68     		ldr	r3, [r7, #4]
 25106 0b54 DA70     		strb	r2, [r3, #3]
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 25107              		.loc 1 1183 0
 25108 0b56 7B69     		ldr	r3, [r7, #20]
 25109 0b58 03F07C53 		and	r3, r3, #1056964608
 25110 0b5c 4FEA1363 		lsr	r3, r3, #24
 25111 0b60 DAB2     		uxtb	r2, r3
 25112 0b62 7B68     		ldr	r3, [r7, #4]
 25113 0b64 1A73     		strb	r2, [r3, #12]
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 25114              		.loc 1 1184 0
 25115 0b66 7B69     		ldr	r3, [r7, #20]
 25116 0b68 03F08042 		and	r2, r3, #1073741824
 25117 0b6c 7B68     		ldr	r3, [r7, #4]
 25118 0b6e 9A60     		str	r2, [r3, #8]
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 25119              		.loc 1 1185 0
 25120 0b70 7B69     		ldr	r3, [r7, #20]
 25121 0b72 03F08032 		and	r2, r3, #-2139062144
 25122 0b76 7B68     		ldr	r3, [r7, #4]
 25123 0b78 5A60     		str	r2, [r3, #4]
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 25124              		.loc 1 1187 0
 25125 0b7a FB68     		ldr	r3, [r7, #12]
 25126 0b7c 002B     		cmp	r3, #0
 25127 0b7e 23D1     		bne	.L67
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 25128              		.loc 1 1189 0
 25129 0b80 7B68     		ldr	r3, [r7, #4]
 25130 0b82 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25131 0b84 1846     		mov	r0, r3
 25132 0b86 00F0D1FD 		bl	RTC_Bcd2ToByte
 25133 0b8a 0346     		mov	r3, r0
 25134 0b8c 1A46     		mov	r2, r3
 25135 0b8e 7B68     		ldr	r3, [r7, #4]
 25136 0b90 1A70     		strb	r2, [r3, #0]
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 25137              		.loc 1 1191 0
 25138 0b92 7B68     		ldr	r3, [r7, #4]
 25139 0b94 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25140 0b96 1846     		mov	r0, r3
 25141 0b98 00F0C8FD 		bl	RTC_Bcd2ToByte
 25142 0b9c 0346     		mov	r3, r0
 25143 0b9e 1A46     		mov	r2, r3
 25144 0ba0 7B68     		ldr	r3, [r7, #4]
 25145 0ba2 5A70     		strb	r2, [r3, #1]
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 25146              		.loc 1 1193 0
 25147 0ba4 7B68     		ldr	r3, [r7, #4]
 25148 0ba6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25149 0ba8 1846     		mov	r0, r3
 25150 0baa 00F0BFFD 		bl	RTC_Bcd2ToByte
 25151 0bae 0346     		mov	r3, r0
 25152 0bb0 1A46     		mov	r2, r3
 25153 0bb2 7B68     		ldr	r3, [r7, #4]
 25154 0bb4 9A70     		strb	r2, [r3, #2]
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 25155              		.loc 1 1195 0
 25156 0bb6 7B68     		ldr	r3, [r7, #4]
 25157 0bb8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 25158 0bba 1846     		mov	r0, r3
 25159 0bbc 00F0B6FD 		bl	RTC_Bcd2ToByte
 25160 0bc0 0346     		mov	r3, r0
 25161 0bc2 1A46     		mov	r2, r3
 25162 0bc4 7B68     		ldr	r3, [r7, #4]
 25163 0bc6 1A73     		strb	r2, [r3, #12]
 25164              	.L67:
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25165              		.loc 1 1197 0
 25166 0bc8 07F11807 		add	r7, r7, #24
 25167 0bcc BD46     		mov	sp, r7
 25168 0bce 80BD     		pop	{r7, pc}
 25169              		.cfi_endproc
 25170              	.LFE45:
 25172              		.align	2
 25173              		.global	RTC_AlarmCmd
 25174              		.thumb
 25175              		.thumb_func
 25177              	RTC_AlarmCmd:
 25178              	.LFB46:
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be any combination of the following values:
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25179              		.loc 1 1212 0
 25180              		.cfi_startproc
 25181              		@ args = 0, pretend = 0, frame = 24
 25182              		@ frame_needed = 1, uses_anonymous_args = 0
 25183              		@ link register save eliminated.
 25184 0bd0 80B4     		push	{r7}
 25185              	.LCFI50:
 25186              		.cfi_def_cfa_offset 4
 25187 0bd2 87B0     		sub	sp, sp, #28
 25188              	.LCFI51:
 25189              		.cfi_def_cfa_offset 32
 25190 0bd4 00AF     		add	r7, sp, #0
 25191              		.cfi_offset 7, -4
 25192              	.LCFI52:
 25193              		.cfi_def_cfa_register 7
 25194 0bd6 7860     		str	r0, [r7, #4]
 25195 0bd8 0B46     		mov	r3, r1
 25196 0bda FB70     		strb	r3, [r7, #3]
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 25197              		.loc 1 1213 0
 25198 0bdc 4FF00003 		mov	r3, #0
 25199 0be0 FB60     		str	r3, [r7, #12]
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 25200              		.loc 1 1214 0
 25201 0be2 4FF00003 		mov	r3, #0
 25202 0be6 3B61     		str	r3, [r7, #16]
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 25203              		.loc 1 1215 0
 25204 0be8 4FF00003 		mov	r3, #0
 25205 0bec FB75     		strb	r3, [r7, #23]
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25206              		.loc 1 1222 0
 25207 0bee 4FF42053 		mov	r3, #10240
 25208 0bf2 C4F20003 		movt	r3, 16384
 25209 0bf6 4FF0CA02 		mov	r2, #202
 25210 0bfa 5A62     		str	r2, [r3, #36]
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25211              		.loc 1 1223 0
 25212 0bfc 4FF42053 		mov	r3, #10240
 25213 0c00 C4F20003 		movt	r3, 16384
 25214 0c04 4FF05302 		mov	r2, #83
 25215 0c08 5A62     		str	r2, [r3, #36]
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the Alarm state */
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 25216              		.loc 1 1226 0
 25217 0c0a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25218 0c0c 002B     		cmp	r3, #0
 25219 0c0e 10D0     		beq	.L72
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 25220              		.loc 1 1228 0
 25221 0c10 4FF42053 		mov	r3, #10240
 25222 0c14 C4F20003 		movt	r3, 16384
 25223 0c18 4FF42052 		mov	r2, #10240
 25224 0c1c C4F20002 		movt	r2, 16384
 25225 0c20 9168     		ldr	r1, [r2, #8]
 25226 0c22 7A68     		ldr	r2, [r7, #4]
 25227 0c24 41EA0202 		orr	r2, r1, r2
 25228 0c28 9A60     		str	r2, [r3, #8]
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;    
 25229              		.loc 1 1230 0
 25230 0c2a 4FF00103 		mov	r3, #1
 25231 0c2e FB75     		strb	r3, [r7, #23]
 25232 0c30 37E0     		b	.L73
 25233              	.L72:
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   { 
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 25234              		.loc 1 1235 0
 25235 0c32 4FF42053 		mov	r3, #10240
 25236 0c36 C4F20003 		movt	r3, 16384
 25237 0c3a 4FF42052 		mov	r2, #10240
 25238 0c3e C4F20002 		movt	r2, 16384
 25239 0c42 9168     		ldr	r1, [r2, #8]
 25240 0c44 7A68     		ldr	r2, [r7, #4]
 25241 0c46 6FEA0202 		mvn	r2, r2
 25242 0c4a 01EA0202 		and	r2, r1, r2
 25243 0c4e 9A60     		str	r2, [r3, #8]
 25244              	.L75:
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     do
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 25245              		.loc 1 1240 0 discriminator 1
 25246 0c50 4FF42053 		mov	r3, #10240
 25247 0c54 C4F20003 		movt	r3, 16384
 25248 0c58 DA68     		ldr	r2, [r3, #12]
 25249 0c5a 7B68     		ldr	r3, [r7, #4]
 25250 0c5c 4FEA1323 		lsr	r3, r3, #8
 25251 0c60 02EA0303 		and	r3, r2, r3
 25252 0c64 3B61     		str	r3, [r7, #16]
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       alarmcounter++;  
 25253              		.loc 1 1241 0 discriminator 1
 25254 0c66 FB68     		ldr	r3, [r7, #12]
 25255 0c68 03F10103 		add	r3, r3, #1
 25256 0c6c FB60     		str	r3, [r7, #12]
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 25257              		.loc 1 1242 0 discriminator 1
 25258 0c6e FB68     		ldr	r3, [r7, #12]
 25259 0c70 B3F5803F 		cmp	r3, #65536
 25260 0c74 02D0     		beq	.L74
 25261 0c76 3B69     		ldr	r3, [r7, #16]
 25262 0c78 002B     		cmp	r3, #0
 25263 0c7a E9D0     		beq	.L75
 25264              	.L74:
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 25265              		.loc 1 1244 0
 25266 0c7c 4FF42053 		mov	r3, #10240
 25267 0c80 C4F20003 		movt	r3, 16384
 25268 0c84 DA68     		ldr	r2, [r3, #12]
 25269 0c86 7B68     		ldr	r3, [r7, #4]
 25270 0c88 4FEA1323 		lsr	r3, r3, #8
 25271 0c8c 02EA0303 		and	r3, r2, r3
 25272 0c90 002B     		cmp	r3, #0
 25273 0c92 03D1     		bne	.L76
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 25274              		.loc 1 1246 0
 25275 0c94 4FF00003 		mov	r3, #0
 25276 0c98 FB75     		strb	r3, [r7, #23]
 25277 0c9a 02E0     		b	.L73
 25278              	.L76:
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 25279              		.loc 1 1250 0
 25280 0c9c 4FF00103 		mov	r3, #1
 25281 0ca0 FB75     		strb	r3, [r7, #23]
 25282              	.L73:
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }        
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25283              		.loc 1 1255 0
 25284 0ca2 4FF42053 		mov	r3, #10240
 25285 0ca6 C4F20003 		movt	r3, 16384
 25286 0caa 4FF0FF02 		mov	r2, #255
 25287 0cae 5A62     		str	r2, [r3, #36]
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 25288              		.loc 1 1257 0
 25289 0cb0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25290              		.loc 1 1258 0
 25291 0cb2 1846     		mov	r0, r3
 25292 0cb4 07F11C07 		add	r7, r7, #28
 25293 0cb8 BD46     		mov	sp, r7
 25294 0cba 80BC     		pop	{r7}
 25295 0cbc 7047     		bx	lr
 25296              		.cfi_endproc
 25297              	.LFE46:
 25299 0cbe 00BF     		.align	2
 25300              		.global	RTC_WakeUpClockConfig
 25301              		.thumb
 25302              		.thumb_func
 25304              	RTC_WakeUpClockConfig:
 25305              	.LFB47:
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                      WakeUp Timer configuration functions
1270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25306              		.loc 1 1293 0
 25307              		.cfi_startproc
 25308              		@ args = 0, pretend = 0, frame = 8
 25309              		@ frame_needed = 1, uses_anonymous_args = 0
 25310              		@ link register save eliminated.
 25311 0cc0 80B4     		push	{r7}
 25312              	.LCFI53:
 25313              		.cfi_def_cfa_offset 4
 25314 0cc2 83B0     		sub	sp, sp, #12
 25315              	.LCFI54:
 25316              		.cfi_def_cfa_offset 16
 25317 0cc4 00AF     		add	r7, sp, #0
 25318              		.cfi_offset 7, -4
 25319              	.LCFI55:
 25320              		.cfi_def_cfa_register 7
 25321 0cc6 7860     		str	r0, [r7, #4]
1294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25322              		.loc 1 1298 0
 25323 0cc8 4FF42053 		mov	r3, #10240
 25324 0ccc C4F20003 		movt	r3, 16384
 25325 0cd0 4FF0CA02 		mov	r2, #202
 25326 0cd4 5A62     		str	r2, [r3, #36]
1299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25327              		.loc 1 1299 0
 25328 0cd6 4FF42053 		mov	r3, #10240
 25329 0cda C4F20003 		movt	r3, 16384
 25330 0cde 4FF05302 		mov	r2, #83
 25331 0ce2 5A62     		str	r2, [r3, #36]
1300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 25332              		.loc 1 1302 0
 25333 0ce4 4FF42053 		mov	r3, #10240
 25334 0ce8 C4F20003 		movt	r3, 16384
 25335 0cec 4FF42052 		mov	r2, #10240
 25336 0cf0 C4F20002 		movt	r2, 16384
 25337 0cf4 9268     		ldr	r2, [r2, #8]
 25338 0cf6 22F00702 		bic	r2, r2, #7
 25339 0cfa 9A60     		str	r2, [r3, #8]
1303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the clock source */
1305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 25340              		.loc 1 1305 0
 25341 0cfc 4FF42053 		mov	r3, #10240
 25342 0d00 C4F20003 		movt	r3, 16384
 25343 0d04 4FF42052 		mov	r2, #10240
 25344 0d08 C4F20002 		movt	r2, 16384
 25345 0d0c 9168     		ldr	r1, [r2, #8]
 25346 0d0e 7A68     		ldr	r2, [r7, #4]
 25347 0d10 41EA0202 		orr	r2, r1, r2
 25348 0d14 9A60     		str	r2, [r3, #8]
1306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25349              		.loc 1 1308 0
 25350 0d16 4FF42053 		mov	r3, #10240
 25351 0d1a C4F20003 		movt	r3, 16384
 25352 0d1e 4FF0FF02 		mov	r2, #255
 25353 0d22 5A62     		str	r2, [r3, #36]
1309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25354              		.loc 1 1309 0
 25355 0d24 07F10C07 		add	r7, r7, #12
 25356 0d28 BD46     		mov	sp, r7
 25357 0d2a 80BC     		pop	{r7}
 25358 0d2c 7047     		bx	lr
 25359              		.cfi_endproc
 25360              	.LFE47:
 25362 0d2e 00BF     		.align	2
 25363              		.global	RTC_SetWakeUpCounter
 25364              		.thumb
 25365              		.thumb_func
 25367              	RTC_SetWakeUpCounter:
 25368              	.LFB48:
1310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25369              		.loc 1 1320 0
 25370              		.cfi_startproc
 25371              		@ args = 0, pretend = 0, frame = 8
 25372              		@ frame_needed = 1, uses_anonymous_args = 0
 25373              		@ link register save eliminated.
 25374 0d30 80B4     		push	{r7}
 25375              	.LCFI56:
 25376              		.cfi_def_cfa_offset 4
 25377 0d32 83B0     		sub	sp, sp, #12
 25378              	.LCFI57:
 25379              		.cfi_def_cfa_offset 16
 25380 0d34 00AF     		add	r7, sp, #0
 25381              		.cfi_offset 7, -4
 25382              	.LCFI58:
 25383              		.cfi_def_cfa_register 7
 25384 0d36 7860     		str	r0, [r7, #4]
1321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25385              		.loc 1 1325 0
 25386 0d38 4FF42053 		mov	r3, #10240
 25387 0d3c C4F20003 		movt	r3, 16384
 25388 0d40 4FF0CA02 		mov	r2, #202
 25389 0d44 5A62     		str	r2, [r3, #36]
1326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25390              		.loc 1 1326 0
 25391 0d46 4FF42053 		mov	r3, #10240
 25392 0d4a C4F20003 		movt	r3, 16384
 25393 0d4e 4FF05302 		mov	r2, #83
 25394 0d52 5A62     		str	r2, [r3, #36]
1327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 25395              		.loc 1 1329 0
 25396 0d54 4FF42053 		mov	r3, #10240
 25397 0d58 C4F20003 		movt	r3, 16384
 25398 0d5c 7A68     		ldr	r2, [r7, #4]
 25399 0d5e 5A61     		str	r2, [r3, #20]
1330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25400              		.loc 1 1332 0
 25401 0d60 4FF42053 		mov	r3, #10240
 25402 0d64 C4F20003 		movt	r3, 16384
 25403 0d68 4FF0FF02 		mov	r2, #255
 25404 0d6c 5A62     		str	r2, [r3, #36]
1333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25405              		.loc 1 1333 0
 25406 0d6e 07F10C07 		add	r7, r7, #12
 25407 0d72 BD46     		mov	sp, r7
 25408 0d74 80BC     		pop	{r7}
 25409 0d76 7047     		bx	lr
 25410              		.cfi_endproc
 25411              	.LFE48:
 25413              		.align	2
 25414              		.global	RTC_GetWakeUpCounter
 25415              		.thumb
 25416              		.thumb_func
 25418              	RTC_GetWakeUpCounter:
 25419              	.LFB49:
1334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
1338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25420              		.loc 1 1341 0
 25421              		.cfi_startproc
 25422              		@ args = 0, pretend = 0, frame = 0
 25423              		@ frame_needed = 1, uses_anonymous_args = 0
 25424              		@ link register save eliminated.
 25425 0d78 80B4     		push	{r7}
 25426              	.LCFI59:
 25427              		.cfi_def_cfa_offset 4
 25428 0d7a 00AF     		add	r7, sp, #0
 25429              		.cfi_offset 7, -4
 25430              	.LCFI60:
 25431              		.cfi_def_cfa_register 7
1342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the counter value */
1343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 25432              		.loc 1 1343 0
 25433 0d7c 4FF42053 		mov	r3, #10240
 25434 0d80 C4F20003 		movt	r3, 16384
 25435 0d84 5B69     		ldr	r3, [r3, #20]
 25436 0d86 4FEA0343 		lsl	r3, r3, #16
 25437 0d8a 4FEA1343 		lsr	r3, r3, #16
1344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25438              		.loc 1 1344 0
 25439 0d8e 1846     		mov	r0, r3
 25440 0d90 BD46     		mov	sp, r7
 25441 0d92 80BC     		pop	{r7}
 25442 0d94 7047     		bx	lr
 25443              		.cfi_endproc
 25444              	.LFE49:
 25446 0d96 00BF     		.align	2
 25447              		.global	RTC_WakeUpCmd
 25448              		.thumb
 25449              		.thumb_func
 25451              	RTC_WakeUpCmd:
 25452              	.LFB50:
1345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25453              		.loc 1 1353 0
 25454              		.cfi_startproc
 25455              		@ args = 0, pretend = 0, frame = 24
 25456              		@ frame_needed = 1, uses_anonymous_args = 0
 25457              		@ link register save eliminated.
 25458 0d98 80B4     		push	{r7}
 25459              	.LCFI61:
 25460              		.cfi_def_cfa_offset 4
 25461 0d9a 87B0     		sub	sp, sp, #28
 25462              	.LCFI62:
 25463              		.cfi_def_cfa_offset 32
 25464 0d9c 00AF     		add	r7, sp, #0
 25465              		.cfi_offset 7, -4
 25466              	.LCFI63:
 25467              		.cfi_def_cfa_register 7
 25468 0d9e 0346     		mov	r3, r0
 25469 0da0 FB71     		strb	r3, [r7, #7]
1354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 25470              		.loc 1 1354 0
 25471 0da2 4FF00003 		mov	r3, #0
 25472 0da6 FB60     		str	r3, [r7, #12]
1355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 25473              		.loc 1 1355 0
 25474 0da8 4FF00003 		mov	r3, #0
 25475 0dac 3B61     		str	r3, [r7, #16]
1356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 25476              		.loc 1 1356 0
 25477 0dae 4FF00003 		mov	r3, #0
 25478 0db2 FB75     		strb	r3, [r7, #23]
1357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25479              		.loc 1 1362 0
 25480 0db4 4FF42053 		mov	r3, #10240
 25481 0db8 C4F20003 		movt	r3, 16384
 25482 0dbc 4FF0CA02 		mov	r2, #202
 25483 0dc0 5A62     		str	r2, [r3, #36]
1363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25484              		.loc 1 1363 0
 25485 0dc2 4FF42053 		mov	r3, #10240
 25486 0dc6 C4F20003 		movt	r3, 16384
 25487 0dca 4FF05302 		mov	r2, #83
 25488 0dce 5A62     		str	r2, [r3, #36]
1364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 25489              		.loc 1 1365 0
 25490 0dd0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25491 0dd2 002B     		cmp	r3, #0
 25492 0dd4 0FD0     		beq	.L81
1366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Enable the Wakeup Timer */
1368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 25493              		.loc 1 1368 0
 25494 0dd6 4FF42053 		mov	r3, #10240
 25495 0dda C4F20003 		movt	r3, 16384
 25496 0dde 4FF42052 		mov	r2, #10240
 25497 0de2 C4F20002 		movt	r2, 16384
 25498 0de6 9268     		ldr	r2, [r2, #8]
 25499 0de8 42F48062 		orr	r2, r2, #1024
 25500 0dec 9A60     		str	r2, [r3, #8]
1369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;    
 25501              		.loc 1 1369 0
 25502 0dee 4FF00103 		mov	r3, #1
 25503 0df2 FB75     		strb	r3, [r7, #23]
 25504 0df4 2EE0     		b	.L82
 25505              	.L81:
1370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the Wakeup Timer */
1374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 25506              		.loc 1 1374 0
 25507 0df6 4FF42053 		mov	r3, #10240
 25508 0dfa C4F20003 		movt	r3, 16384
 25509 0dfe 4FF42052 		mov	r2, #10240
 25510 0e02 C4F20002 		movt	r2, 16384
 25511 0e06 9268     		ldr	r2, [r2, #8]
 25512 0e08 22F48062 		bic	r2, r2, #1024
 25513 0e0c 9A60     		str	r2, [r3, #8]
 25514              	.L84:
1375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     do
1377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 25515              		.loc 1 1378 0 discriminator 1
 25516 0e0e 4FF42053 		mov	r3, #10240
 25517 0e12 C4F20003 		movt	r3, 16384
 25518 0e16 DB68     		ldr	r3, [r3, #12]
 25519 0e18 03F00403 		and	r3, r3, #4
 25520 0e1c 3B61     		str	r3, [r7, #16]
1379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       wutcounter++;  
 25521              		.loc 1 1379 0 discriminator 1
 25522 0e1e FB68     		ldr	r3, [r7, #12]
 25523 0e20 03F10103 		add	r3, r3, #1
 25524 0e24 FB60     		str	r3, [r7, #12]
1380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 25525              		.loc 1 1380 0 discriminator 1
 25526 0e26 FB68     		ldr	r3, [r7, #12]
 25527 0e28 B3F5803F 		cmp	r3, #65536
 25528 0e2c 02D0     		beq	.L83
 25529 0e2e 3B69     		ldr	r3, [r7, #16]
 25530 0e30 002B     		cmp	r3, #0
 25531 0e32 ECD0     		beq	.L84
 25532              	.L83:
1381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 25533              		.loc 1 1382 0
 25534 0e34 4FF42053 		mov	r3, #10240
 25535 0e38 C4F20003 		movt	r3, 16384
 25536 0e3c DB68     		ldr	r3, [r3, #12]
 25537 0e3e 03F00403 		and	r3, r3, #4
 25538 0e42 002B     		cmp	r3, #0
 25539 0e44 03D1     		bne	.L85
1383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 25540              		.loc 1 1384 0
 25541 0e46 4FF00003 		mov	r3, #0
 25542 0e4a FB75     		strb	r3, [r7, #23]
 25543 0e4c 02E0     		b	.L82
 25544              	.L85:
1385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 25545              		.loc 1 1388 0
 25546 0e4e 4FF00103 		mov	r3, #1
 25547 0e52 FB75     		strb	r3, [r7, #23]
 25548              	.L82:
1389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }    
1390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25549              		.loc 1 1393 0
 25550 0e54 4FF42053 		mov	r3, #10240
 25551 0e58 C4F20003 		movt	r3, 16384
 25552 0e5c 4FF0FF02 		mov	r2, #255
 25553 0e60 5A62     		str	r2, [r3, #36]
1394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 25554              		.loc 1 1395 0
 25555 0e62 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25556              		.loc 1 1396 0
 25557 0e64 1846     		mov	r0, r3
 25558 0e66 07F11C07 		add	r7, r7, #28
 25559 0e6a BD46     		mov	sp, r7
 25560 0e6c 80BC     		pop	{r7}
 25561 0e6e 7047     		bx	lr
 25562              		.cfi_endproc
 25563              	.LFE50:
 25565              		.align	2
 25566              		.global	RTC_DayLightSavingConfig
 25567              		.thumb
 25568              		.thumb_func
 25570              	RTC_DayLightSavingConfig:
 25571              	.LFB51:
1397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                     Daylight Saving configuration functions
1408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                            in CR register to store the operation.
1424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25572              		.loc 1 1430 0
 25573              		.cfi_startproc
 25574              		@ args = 0, pretend = 0, frame = 8
 25575              		@ frame_needed = 1, uses_anonymous_args = 0
 25576              		@ link register save eliminated.
 25577 0e70 80B4     		push	{r7}
 25578              	.LCFI64:
 25579              		.cfi_def_cfa_offset 4
 25580 0e72 83B0     		sub	sp, sp, #12
 25581              	.LCFI65:
 25582              		.cfi_def_cfa_offset 16
 25583 0e74 00AF     		add	r7, sp, #0
 25584              		.cfi_offset 7, -4
 25585              	.LCFI66:
 25586              		.cfi_def_cfa_register 7
 25587 0e76 7860     		str	r0, [r7, #4]
 25588 0e78 3960     		str	r1, [r7, #0]
1431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25589              		.loc 1 1436 0
 25590 0e7a 4FF42053 		mov	r3, #10240
 25591 0e7e C4F20003 		movt	r3, 16384
 25592 0e82 4FF0CA02 		mov	r2, #202
 25593 0e86 5A62     		str	r2, [r3, #36]
1437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25594              		.loc 1 1437 0
 25595 0e88 4FF42053 		mov	r3, #10240
 25596 0e8c C4F20003 		movt	r3, 16384
 25597 0e90 4FF05302 		mov	r2, #83
 25598 0e94 5A62     		str	r2, [r3, #36]
1438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the bits to be configured */
1440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 25599              		.loc 1 1440 0
 25600 0e96 4FF42053 		mov	r3, #10240
 25601 0e9a C4F20003 		movt	r3, 16384
 25602 0e9e 4FF42052 		mov	r2, #10240
 25603 0ea2 C4F20002 		movt	r2, 16384
 25604 0ea6 9268     		ldr	r2, [r2, #8]
 25605 0ea8 22F48022 		bic	r2, r2, #262144
 25606 0eac 9A60     		str	r2, [r3, #8]
1441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the RTC_CR register */
1443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 25607              		.loc 1 1443 0
 25608 0eae 4FF42053 		mov	r3, #10240
 25609 0eb2 C4F20003 		movt	r3, 16384
 25610 0eb6 4FF42052 		mov	r2, #10240
 25611 0eba C4F20002 		movt	r2, 16384
 25612 0ebe 9168     		ldr	r1, [r2, #8]
 25613 0ec0 7868     		ldr	r0, [r7, #4]
 25614 0ec2 3A68     		ldr	r2, [r7, #0]
 25615 0ec4 40EA0202 		orr	r2, r0, r2
 25616 0ec8 41EA0202 		orr	r2, r1, r2
 25617 0ecc 9A60     		str	r2, [r3, #8]
1444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25618              		.loc 1 1446 0
 25619 0ece 4FF42053 		mov	r3, #10240
 25620 0ed2 C4F20003 		movt	r3, 16384
 25621 0ed6 4FF0FF02 		mov	r2, #255
 25622 0eda 5A62     		str	r2, [r3, #36]
1447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25623              		.loc 1 1447 0
 25624 0edc 07F10C07 		add	r7, r7, #12
 25625 0ee0 BD46     		mov	sp, r7
 25626 0ee2 80BC     		pop	{r7}
 25627 0ee4 7047     		bx	lr
 25628              		.cfi_endproc
 25629              	.LFE51:
 25631 0ee6 00BF     		.align	2
 25632              		.global	RTC_GetStoreOperation
 25633              		.thumb
 25634              		.thumb_func
 25636              	RTC_GetStoreOperation:
 25637              	.LFB52:
1448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
1452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25638              		.loc 1 1457 0
 25639              		.cfi_startproc
 25640              		@ args = 0, pretend = 0, frame = 0
 25641              		@ frame_needed = 1, uses_anonymous_args = 0
 25642              		@ link register save eliminated.
 25643 0ee8 80B4     		push	{r7}
 25644              	.LCFI67:
 25645              		.cfi_def_cfa_offset 4
 25646 0eea 00AF     		add	r7, sp, #0
 25647              		.cfi_offset 7, -4
 25648              	.LCFI68:
 25649              		.cfi_def_cfa_register 7
1458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 25650              		.loc 1 1458 0
 25651 0eec 4FF42053 		mov	r3, #10240
 25652 0ef0 C4F20003 		movt	r3, 16384
 25653 0ef4 9B68     		ldr	r3, [r3, #8]
 25654 0ef6 03F48023 		and	r3, r3, #262144
1459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25655              		.loc 1 1459 0
 25656 0efa 1846     		mov	r0, r3
 25657 0efc BD46     		mov	sp, r7
 25658 0efe 80BC     		pop	{r7}
 25659 0f00 7047     		bx	lr
 25660              		.cfi_endproc
 25661              	.LFE52:
 25663 0f02 00BF     		.align	2
 25664              		.global	RTC_OutputConfig
 25665              		.thumb
 25666              		.thumb_func
 25668              	RTC_OutputConfig:
 25669              	.LFB53:
1460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Output pin Configuration function 
1467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                          Output pin Configuration function
1471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following:
1489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25670              		.loc 1 1496 0
 25671              		.cfi_startproc
 25672              		@ args = 0, pretend = 0, frame = 8
 25673              		@ frame_needed = 1, uses_anonymous_args = 0
 25674              		@ link register save eliminated.
 25675 0f04 80B4     		push	{r7}
 25676              	.LCFI69:
 25677              		.cfi_def_cfa_offset 4
 25678 0f06 83B0     		sub	sp, sp, #12
 25679              	.LCFI70:
 25680              		.cfi_def_cfa_offset 16
 25681 0f08 00AF     		add	r7, sp, #0
 25682              		.cfi_offset 7, -4
 25683              	.LCFI71:
 25684              		.cfi_def_cfa_register 7
 25685 0f0a 7860     		str	r0, [r7, #4]
 25686 0f0c 3960     		str	r1, [r7, #0]
1497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25687              		.loc 1 1502 0
 25688 0f0e 4FF42053 		mov	r3, #10240
 25689 0f12 C4F20003 		movt	r3, 16384
 25690 0f16 4FF0CA02 		mov	r2, #202
 25691 0f1a 5A62     		str	r2, [r3, #36]
1503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25692              		.loc 1 1503 0
 25693 0f1c 4FF42053 		mov	r3, #10240
 25694 0f20 C4F20003 		movt	r3, 16384
 25695 0f24 4FF05302 		mov	r2, #83
 25696 0f28 5A62     		str	r2, [r3, #36]
1504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the bits to be configured */
1506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 25697              		.loc 1 1506 0
 25698 0f2a 4FF42053 		mov	r3, #10240
 25699 0f2e C4F20003 		movt	r3, 16384
 25700 0f32 4FF42052 		mov	r2, #10240
 25701 0f36 C4F20002 		movt	r2, 16384
 25702 0f3a 9268     		ldr	r2, [r2, #8]
 25703 0f3c 22F4E002 		bic	r2, r2, #7340032
 25704 0f40 9A60     		str	r2, [r3, #8]
1507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the output selection and polarity */
1509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 25705              		.loc 1 1509 0
 25706 0f42 4FF42053 		mov	r3, #10240
 25707 0f46 C4F20003 		movt	r3, 16384
 25708 0f4a 4FF42052 		mov	r2, #10240
 25709 0f4e C4F20002 		movt	r2, 16384
 25710 0f52 9168     		ldr	r1, [r2, #8]
 25711 0f54 7868     		ldr	r0, [r7, #4]
 25712 0f56 3A68     		ldr	r2, [r7, #0]
 25713 0f58 40EA0202 		orr	r2, r0, r2
 25714 0f5c 41EA0202 		orr	r2, r1, r2
 25715 0f60 9A60     		str	r2, [r3, #8]
1510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25716              		.loc 1 1512 0
 25717 0f62 4FF42053 		mov	r3, #10240
 25718 0f66 C4F20003 		movt	r3, 16384
 25719 0f6a 4FF0FF02 		mov	r2, #255
 25720 0f6e 5A62     		str	r2, [r3, #36]
1513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25721              		.loc 1 1513 0
 25722 0f70 07F10C07 		add	r7, r7, #12
 25723 0f74 BD46     		mov	sp, r7
 25724 0f76 80BC     		pop	{r7}
 25725 0f78 7047     		bx	lr
 25726              		.cfi_endproc
 25727              	.LFE53:
 25729 0f7a 00BF     		.align	2
 25730              		.global	RTC_CoarseCalibConfig
 25731              		.thumb
 25732              		.thumb_func
 25734              	RTC_CoarseCalibConfig:
 25735              	.LFB54:
1514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group7 Coarse Calibration configuration functions
1520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                   Coarse Calibration configuration functions
1525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be  one of the following values:
1535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *    
1539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         sign with a 2-ppm step.
1541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           
1542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         sign with a 4-ppm step.
1544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           
1545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25736              		.loc 1 1550 0
 25737              		.cfi_startproc
 25738              		@ args = 0, pretend = 0, frame = 16
 25739              		@ frame_needed = 1, uses_anonymous_args = 0
 25740 0f7c 80B5     		push	{r7, lr}
 25741              	.LCFI72:
 25742              		.cfi_def_cfa_offset 8
 25743 0f7e 84B0     		sub	sp, sp, #16
 25744              	.LCFI73:
 25745              		.cfi_def_cfa_offset 24
 25746 0f80 00AF     		add	r7, sp, #0
 25747              		.cfi_offset 14, -4
 25748              		.cfi_offset 7, -8
 25749              	.LCFI74:
 25750              		.cfi_def_cfa_register 7
 25751 0f82 7860     		str	r0, [r7, #4]
 25752 0f84 3960     		str	r1, [r7, #0]
1551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 25753              		.loc 1 1551 0
 25754 0f86 4FF00003 		mov	r3, #0
 25755 0f8a FB73     		strb	r3, [r7, #15]
1552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    
1553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25756              		.loc 1 1558 0
 25757 0f8c 4FF42053 		mov	r3, #10240
 25758 0f90 C4F20003 		movt	r3, 16384
 25759 0f94 4FF0CA02 		mov	r2, #202
 25760 0f98 5A62     		str	r2, [r3, #36]
1559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25761              		.loc 1 1559 0
 25762 0f9a 4FF42053 		mov	r3, #10240
 25763 0f9e C4F20003 		movt	r3, 16384
 25764 0fa2 4FF05302 		mov	r2, #83
 25765 0fa6 5A62     		str	r2, [r3, #36]
1560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
1562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 25766              		.loc 1 1562 0
 25767 0fa8 FFF7FEFF 		bl	RTC_EnterInitMode
 25768 0fac 0346     		mov	r3, r0
 25769 0fae 002B     		cmp	r3, #0
 25770 0fb0 03D1     		bne	.L90
1563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 25771              		.loc 1 1564 0
 25772 0fb2 4FF00003 		mov	r3, #0
 25773 0fb6 FB73     		strb	r3, [r7, #15]
 25774 0fb8 0DE0     		b	.L91
 25775              	.L90:
1565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set the coarse calibration value */
1569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 25776              		.loc 1 1569 0
 25777 0fba 4FF42053 		mov	r3, #10240
 25778 0fbe C4F20003 		movt	r3, 16384
 25779 0fc2 7968     		ldr	r1, [r7, #4]
 25780 0fc4 3A68     		ldr	r2, [r7, #0]
 25781 0fc6 41EA0202 		orr	r2, r1, r2
 25782 0fca 9A61     		str	r2, [r3, #24]
1570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
1571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode();
 25783              		.loc 1 1571 0
 25784 0fcc FFF7FEFF 		bl	RTC_ExitInitMode
1572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;
 25785              		.loc 1 1573 0
 25786 0fd0 4FF00103 		mov	r3, #1
 25787 0fd4 FB73     		strb	r3, [r7, #15]
 25788              	.L91:
1574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25789              		.loc 1 1577 0
 25790 0fd6 4FF42053 		mov	r3, #10240
 25791 0fda C4F20003 		movt	r3, 16384
 25792 0fde 4FF0FF02 		mov	r2, #255
 25793 0fe2 5A62     		str	r2, [r3, #36]
1578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 25794              		.loc 1 1579 0
 25795 0fe4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25796              		.loc 1 1580 0
 25797 0fe6 1846     		mov	r0, r3
 25798 0fe8 07F11007 		add	r7, r7, #16
 25799 0fec BD46     		mov	sp, r7
 25800 0fee 80BD     		pop	{r7, pc}
 25801              		.cfi_endproc
 25802              	.LFE54:
 25804              		.align	2
 25805              		.global	RTC_CoarseCalibCmd
 25806              		.thumb
 25807              		.thumb_func
 25809              	RTC_CoarseCalibCmd:
 25810              	.LFB55:
1581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25811              		.loc 1 1591 0
 25812              		.cfi_startproc
 25813              		@ args = 0, pretend = 0, frame = 16
 25814              		@ frame_needed = 1, uses_anonymous_args = 0
 25815 0ff0 80B5     		push	{r7, lr}
 25816              	.LCFI75:
 25817              		.cfi_def_cfa_offset 8
 25818 0ff2 84B0     		sub	sp, sp, #16
 25819              	.LCFI76:
 25820              		.cfi_def_cfa_offset 24
 25821 0ff4 00AF     		add	r7, sp, #0
 25822              		.cfi_offset 14, -4
 25823              		.cfi_offset 7, -8
 25824              	.LCFI77:
 25825              		.cfi_def_cfa_register 7
 25826 0ff6 0346     		mov	r3, r0
 25827 0ff8 FB71     		strb	r3, [r7, #7]
1592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 25828              		.loc 1 1592 0
 25829 0ffa 4FF00003 		mov	r3, #0
 25830 0ffe FB73     		strb	r3, [r7, #15]
1593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25831              		.loc 1 1598 0
 25832 1000 4FF42053 		mov	r3, #10240
 25833 1004 C4F20003 		movt	r3, 16384
 25834 1008 4FF0CA02 		mov	r2, #202
 25835 100c 5A62     		str	r2, [r3, #36]
1599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25836              		.loc 1 1599 0
 25837 100e 4FF42053 		mov	r3, #10240
 25838 1012 C4F20003 		movt	r3, 16384
 25839 1016 4FF05302 		mov	r2, #83
 25840 101a 5A62     		str	r2, [r3, #36]
1600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
1602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 25841              		.loc 1 1602 0
 25842 101c FFF7FEFF 		bl	RTC_EnterInitMode
 25843 1020 0346     		mov	r3, r0
 25844 1022 002B     		cmp	r3, #0
 25845 1024 03D1     		bne	.L93
1603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status =  ERROR;
 25846              		.loc 1 1604 0
 25847 1026 4FF00003 		mov	r3, #0
 25848 102a FB73     		strb	r3, [r7, #15]
 25849 102c 20E0     		b	.L94
 25850              	.L93:
1605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if (NewState != DISABLE)
 25851              		.loc 1 1608 0
 25852 102e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25853 1030 002B     		cmp	r3, #0
 25854 1032 0CD0     		beq	.L95
1609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Enable the Coarse Calibration */
1611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 25855              		.loc 1 1611 0
 25856 1034 4FF42053 		mov	r3, #10240
 25857 1038 C4F20003 		movt	r3, 16384
 25858 103c 4FF42052 		mov	r2, #10240
 25859 1040 C4F20002 		movt	r2, 16384
 25860 1044 9268     		ldr	r2, [r2, #8]
 25861 1046 42F08002 		orr	r2, r2, #128
 25862 104a 9A60     		str	r2, [r3, #8]
 25863 104c 0BE0     		b	.L96
 25864              	.L95:
1612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     { 
1615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Disable the Coarse Calibration */
1616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 25865              		.loc 1 1616 0
 25866 104e 4FF42053 		mov	r3, #10240
 25867 1052 C4F20003 		movt	r3, 16384
 25868 1056 4FF42052 		mov	r2, #10240
 25869 105a C4F20002 		movt	r2, 16384
 25870 105e 9268     		ldr	r2, [r2, #8]
 25871 1060 22F08002 		bic	r2, r2, #128
 25872 1064 9A60     		str	r2, [r3, #8]
 25873              	.L96:
1617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
1619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode();
 25874              		.loc 1 1619 0
 25875 1066 FFF7FEFF 		bl	RTC_ExitInitMode
1620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;
 25876              		.loc 1 1621 0
 25877 106a 4FF00103 		mov	r3, #1
 25878 106e FB73     		strb	r3, [r7, #15]
 25879              	.L94:
1622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25880              		.loc 1 1625 0
 25881 1070 4FF42053 		mov	r3, #10240
 25882 1074 C4F20003 		movt	r3, 16384
 25883 1078 4FF0FF02 		mov	r2, #255
 25884 107c 5A62     		str	r2, [r3, #36]
1626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 25885              		.loc 1 1627 0
 25886 107e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25887              		.loc 1 1628 0
 25888 1080 1846     		mov	r0, r3
 25889 1082 07F11007 		add	r7, r7, #16
 25890 1086 BD46     		mov	sp, r7
 25891 1088 80BD     		pop	{r7, pc}
 25892              		.cfi_endproc
 25893              	.LFE55:
 25895 108a 00BF     		.align	2
 25896              		.global	RTC_CalibOutputCmd
 25897              		.thumb
 25898              		.thumb_func
 25900              	RTC_CalibOutputCmd:
 25901              	.LFB56:
1629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25902              		.loc 1 1637 0
 25903              		.cfi_startproc
 25904              		@ args = 0, pretend = 0, frame = 8
 25905              		@ frame_needed = 1, uses_anonymous_args = 0
 25906              		@ link register save eliminated.
 25907 108c 80B4     		push	{r7}
 25908              	.LCFI78:
 25909              		.cfi_def_cfa_offset 4
 25910 108e 83B0     		sub	sp, sp, #12
 25911              	.LCFI79:
 25912              		.cfi_def_cfa_offset 16
 25913 1090 00AF     		add	r7, sp, #0
 25914              		.cfi_offset 7, -4
 25915              	.LCFI80:
 25916              		.cfi_def_cfa_register 7
 25917 1092 0346     		mov	r3, r0
 25918 1094 FB71     		strb	r3, [r7, #7]
1638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 25919              		.loc 1 1642 0
 25920 1096 4FF42053 		mov	r3, #10240
 25921 109a C4F20003 		movt	r3, 16384
 25922 109e 4FF0CA02 		mov	r2, #202
 25923 10a2 5A62     		str	r2, [r3, #36]
1643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 25924              		.loc 1 1643 0
 25925 10a4 4FF42053 		mov	r3, #10240
 25926 10a8 C4F20003 		movt	r3, 16384
 25927 10ac 4FF05302 		mov	r2, #83
 25928 10b0 5A62     		str	r2, [r3, #36]
1644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 25929              		.loc 1 1645 0
 25930 10b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25931 10b4 002B     		cmp	r3, #0
 25932 10b6 0CD0     		beq	.L98
1646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Enable the RTC clock output */
1648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 25933              		.loc 1 1648 0
 25934 10b8 4FF42053 		mov	r3, #10240
 25935 10bc C4F20003 		movt	r3, 16384
 25936 10c0 4FF42052 		mov	r2, #10240
 25937 10c4 C4F20002 		movt	r2, 16384
 25938 10c8 9268     		ldr	r2, [r2, #8]
 25939 10ca 42F40002 		orr	r2, r2, #8388608
 25940 10ce 9A60     		str	r2, [r3, #8]
 25941 10d0 0BE0     		b	.L99
 25942              	.L98:
1649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   { 
1652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the RTC clock output */
1653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 25943              		.loc 1 1653 0
 25944 10d2 4FF42053 		mov	r3, #10240
 25945 10d6 C4F20003 		movt	r3, 16384
 25946 10da 4FF42052 		mov	r2, #10240
 25947 10de C4F20002 		movt	r2, 16384
 25948 10e2 9268     		ldr	r2, [r2, #8]
 25949 10e4 22F40002 		bic	r2, r2, #8388608
 25950 10e8 9A60     		str	r2, [r3, #8]
 25951              	.L99:
1654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 25952              		.loc 1 1657 0
 25953 10ea 4FF42053 		mov	r3, #10240
 25954 10ee C4F20003 		movt	r3, 16384
 25955 10f2 4FF0FF02 		mov	r2, #255
 25956 10f6 5A62     		str	r2, [r3, #36]
1658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 25957              		.loc 1 1658 0
 25958 10f8 07F10C07 		add	r7, r7, #12
 25959 10fc BD46     		mov	sp, r7
 25960 10fe 80BC     		pop	{r7}
 25961 1100 7047     		bx	lr
 25962              		.cfi_endproc
 25963              	.LFE56:
 25965 1102 00BF     		.align	2
 25966              		.global	RTC_TimeStampCmd
 25967              		.thumb
 25968              		.thumb_func
 25970              	RTC_TimeStampCmd:
 25971              	.LFB57:
1659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                        TimeStamp configuration functions
1671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         activated.
1682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following:
1683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                    edge of the related pin.
1685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                     falling edge of the related pin.
1687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 25972              		.loc 1 1692 0
 25973              		.cfi_startproc
 25974              		@ args = 0, pretend = 0, frame = 16
 25975              		@ frame_needed = 1, uses_anonymous_args = 0
 25976              		@ link register save eliminated.
 25977 1104 80B4     		push	{r7}
 25978              	.LCFI81:
 25979              		.cfi_def_cfa_offset 4
 25980 1106 85B0     		sub	sp, sp, #20
 25981              	.LCFI82:
 25982              		.cfi_def_cfa_offset 24
 25983 1108 00AF     		add	r7, sp, #0
 25984              		.cfi_offset 7, -4
 25985              	.LCFI83:
 25986              		.cfi_def_cfa_register 7
 25987 110a 7860     		str	r0, [r7, #4]
 25988 110c 0B46     		mov	r3, r1
 25989 110e FB70     		strb	r3, [r7, #3]
1693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 25990              		.loc 1 1693 0
 25991 1110 4FF00003 		mov	r3, #0
 25992 1114 FB60     		str	r3, [r7, #12]
1694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 25993              		.loc 1 1700 0
 25994 1116 4FF42053 		mov	r3, #10240
 25995 111a C4F20003 		movt	r3, 16384
 25996 111e 9B68     		ldr	r3, [r3, #8]
 25997 1120 23F40063 		bic	r3, r3, #2048
 25998 1124 23F00803 		bic	r3, r3, #8
 25999 1128 FB60     		str	r3, [r7, #12]
1701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the new configuration */
1703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 26000              		.loc 1 1703 0
 26001 112a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26002 112c 002B     		cmp	r3, #0
 26003 112e 07D0     		beq	.L101
1704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 26004              		.loc 1 1705 0
 26005 1130 7A68     		ldr	r2, [r7, #4]
 26006 1132 FB68     		ldr	r3, [r7, #12]
 26007 1134 42EA0303 		orr	r3, r2, r3
 26008 1138 43F40063 		orr	r3, r3, #2048
 26009 113c FB60     		str	r3, [r7, #12]
 26010 113e 04E0     		b	.L102
 26011              	.L101:
1706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 26012              		.loc 1 1709 0
 26013 1140 FA68     		ldr	r2, [r7, #12]
 26014 1142 7B68     		ldr	r3, [r7, #4]
 26015 1144 42EA0303 		orr	r3, r2, r3
 26016 1148 FB60     		str	r3, [r7, #12]
 26017              	.L102:
1710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 26018              		.loc 1 1713 0
 26019 114a 4FF42053 		mov	r3, #10240
 26020 114e C4F20003 		movt	r3, 16384
 26021 1152 4FF0CA02 		mov	r2, #202
 26022 1156 5A62     		str	r2, [r3, #36]
1714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 26023              		.loc 1 1714 0
 26024 1158 4FF42053 		mov	r3, #10240
 26025 115c C4F20003 		movt	r3, 16384
 26026 1160 4FF05302 		mov	r2, #83
 26027 1164 5A62     		str	r2, [r3, #36]
1715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 26028              		.loc 1 1717 0
 26029 1166 4FF42053 		mov	r3, #10240
 26030 116a C4F20003 		movt	r3, 16384
 26031 116e FA68     		ldr	r2, [r7, #12]
 26032 1170 9A60     		str	r2, [r3, #8]
1718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 26033              		.loc 1 1720 0
 26034 1172 4FF42053 		mov	r3, #10240
 26035 1176 C4F20003 		movt	r3, 16384
 26036 117a 4FF0FF02 		mov	r2, #255
 26037 117e 5A62     		str	r2, [r3, #36]
1721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26038              		.loc 1 1721 0
 26039 1180 07F11407 		add	r7, r7, #20
 26040 1184 BD46     		mov	sp, r7
 26041 1186 80BC     		pop	{r7}
 26042 1188 7047     		bx	lr
 26043              		.cfi_endproc
 26044              	.LFE57:
 26046 118a 00BF     		.align	2
 26047              		.global	RTC_GetTimeStamp
 26048              		.thumb
 26049              		.thumb_func
 26051              	RTC_GetTimeStamp:
 26052              	.LFB58:
1722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                             contains the TimeStamp time values. 
1731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                             contains the TimeStamp date values.     
1733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
1736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
1737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26053              		.loc 1 1737 0
 26054              		.cfi_startproc
 26055              		@ args = 0, pretend = 0, frame = 24
 26056              		@ frame_needed = 1, uses_anonymous_args = 0
 26057 118c 80B5     		push	{r7, lr}
 26058              	.LCFI84:
 26059              		.cfi_def_cfa_offset 8
 26060 118e 86B0     		sub	sp, sp, #24
 26061              	.LCFI85:
 26062              		.cfi_def_cfa_offset 32
 26063 1190 00AF     		add	r7, sp, #0
 26064              		.cfi_offset 14, -4
 26065              		.cfi_offset 7, -8
 26066              	.LCFI86:
 26067              		.cfi_def_cfa_register 7
 26068 1192 F860     		str	r0, [r7, #12]
 26069 1194 B960     		str	r1, [r7, #8]
 26070 1196 7A60     		str	r2, [r7, #4]
1738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 26071              		.loc 1 1738 0
 26072 1198 4FF00003 		mov	r3, #0
 26073 119c 7B61     		str	r3, [r7, #20]
 26074 119e 4FF00003 		mov	r3, #0
 26075 11a2 3B61     		str	r3, [r7, #16]
1739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
1744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 26076              		.loc 1 1744 0
 26077 11a4 4FF42053 		mov	r3, #10240
 26078 11a8 C4F20003 		movt	r3, 16384
 26079 11ac 1A6B     		ldr	r2, [r3, #48]
 26080 11ae 47F67F73 		movw	r3, #32639
 26081 11b2 C0F27F03 		movt	r3, 127
 26082 11b6 02EA0303 		and	r3, r2, r3
 26083 11ba 7B61     		str	r3, [r7, #20]
1745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 26084              		.loc 1 1745 0
 26085 11bc 4FF42053 		mov	r3, #10240
 26086 11c0 C4F20003 		movt	r3, 16384
 26087 11c4 5B6B     		ldr	r3, [r3, #52]
 26088 11c6 23F07F43 		bic	r3, r3, #-16777216
 26089 11ca 23F0C003 		bic	r3, r3, #192
 26090 11ce 3B61     		str	r3, [r7, #16]
1746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
1748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 26091              		.loc 1 1748 0
 26092 11d0 7B69     		ldr	r3, [r7, #20]
 26093 11d2 03F47C13 		and	r3, r3, #4128768
 26094 11d6 4FEA1343 		lsr	r3, r3, #16
 26095 11da DAB2     		uxtb	r2, r3
 26096 11dc BB68     		ldr	r3, [r7, #8]
 26097 11de 1A70     		strb	r2, [r3, #0]
1749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 26098              		.loc 1 1749 0
 26099 11e0 7B69     		ldr	r3, [r7, #20]
 26100 11e2 03F4FE43 		and	r3, r3, #32512
 26101 11e6 4FEA1323 		lsr	r3, r3, #8
 26102 11ea DAB2     		uxtb	r2, r3
 26103 11ec BB68     		ldr	r3, [r7, #8]
 26104 11ee 5A70     		strb	r2, [r3, #1]
1750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 26105              		.loc 1 1750 0
 26106 11f0 7B69     		ldr	r3, [r7, #20]
 26107 11f2 DBB2     		uxtb	r3, r3
 26108 11f4 03F07F03 		and	r3, r3, #127
 26109 11f8 DAB2     		uxtb	r2, r3
 26110 11fa BB68     		ldr	r3, [r7, #8]
 26111 11fc 9A70     		strb	r2, [r3, #2]
1751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 26112              		.loc 1 1751 0
 26113 11fe 7B69     		ldr	r3, [r7, #20]
 26114 1200 03F48003 		and	r3, r3, #4194304
 26115 1204 4FEA1343 		lsr	r3, r3, #16
 26116 1208 DAB2     		uxtb	r2, r3
 26117 120a BB68     		ldr	r3, [r7, #8]
 26118 120c DA70     		strb	r2, [r3, #3]
1752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
1754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 26119              		.loc 1 1754 0
 26120 120e 7B68     		ldr	r3, [r7, #4]
 26121 1210 4FF00002 		mov	r2, #0
 26122 1214 DA70     		strb	r2, [r3, #3]
1755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 26123              		.loc 1 1755 0
 26124 1216 3B69     		ldr	r3, [r7, #16]
 26125 1218 03F4F853 		and	r3, r3, #7936
 26126 121c 4FEA1323 		lsr	r3, r3, #8
 26127 1220 DAB2     		uxtb	r2, r3
 26128 1222 7B68     		ldr	r3, [r7, #4]
 26129 1224 5A70     		strb	r2, [r3, #1]
1756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 26130              		.loc 1 1756 0
 26131 1226 3B69     		ldr	r3, [r7, #16]
 26132 1228 DBB2     		uxtb	r3, r3
 26133 122a 03F03F03 		and	r3, r3, #63
 26134 122e DAB2     		uxtb	r2, r3
 26135 1230 7B68     		ldr	r3, [r7, #4]
 26136 1232 9A70     		strb	r2, [r3, #2]
1757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 26137              		.loc 1 1757 0
 26138 1234 3B69     		ldr	r3, [r7, #16]
 26139 1236 03F46043 		and	r3, r3, #57344
 26140 123a 4FEA5333 		lsr	r3, r3, #13
 26141 123e DAB2     		uxtb	r2, r3
 26142 1240 7B68     		ldr	r3, [r7, #4]
 26143 1242 1A70     		strb	r2, [r3, #0]
1758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
1760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 26144              		.loc 1 1760 0
 26145 1244 FB68     		ldr	r3, [r7, #12]
 26146 1246 002B     		cmp	r3, #0
 26147 1248 35D1     		bne	.L103
1761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
1763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 26148              		.loc 1 1763 0
 26149 124a BB68     		ldr	r3, [r7, #8]
 26150 124c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26151 124e 1846     		mov	r0, r3
 26152 1250 00F06CFA 		bl	RTC_Bcd2ToByte
 26153 1254 0346     		mov	r3, r0
 26154 1256 1A46     		mov	r2, r3
 26155 1258 BB68     		ldr	r3, [r7, #8]
 26156 125a 1A70     		strb	r2, [r3, #0]
1764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 26157              		.loc 1 1764 0
 26158 125c BB68     		ldr	r3, [r7, #8]
 26159 125e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26160 1260 1846     		mov	r0, r3
 26161 1262 00F063FA 		bl	RTC_Bcd2ToByte
 26162 1266 0346     		mov	r3, r0
 26163 1268 1A46     		mov	r2, r3
 26164 126a BB68     		ldr	r3, [r7, #8]
 26165 126c 5A70     		strb	r2, [r3, #1]
1765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 26166              		.loc 1 1765 0
 26167 126e BB68     		ldr	r3, [r7, #8]
 26168 1270 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 26169 1272 1846     		mov	r0, r3
 26170 1274 00F05AFA 		bl	RTC_Bcd2ToByte
 26171 1278 0346     		mov	r3, r0
 26172 127a 1A46     		mov	r2, r3
 26173 127c BB68     		ldr	r3, [r7, #8]
 26174 127e 9A70     		strb	r2, [r3, #2]
1766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
1768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 26175              		.loc 1 1768 0
 26176 1280 7B68     		ldr	r3, [r7, #4]
 26177 1282 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26178 1284 1846     		mov	r0, r3
 26179 1286 00F051FA 		bl	RTC_Bcd2ToByte
 26180 128a 0346     		mov	r3, r0
 26181 128c 1A46     		mov	r2, r3
 26182 128e 7B68     		ldr	r3, [r7, #4]
 26183 1290 5A70     		strb	r2, [r3, #1]
1769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 26184              		.loc 1 1769 0
 26185 1292 7B68     		ldr	r3, [r7, #4]
 26186 1294 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 26187 1296 1846     		mov	r0, r3
 26188 1298 00F048FA 		bl	RTC_Bcd2ToByte
 26189 129c 0346     		mov	r3, r0
 26190 129e 1A46     		mov	r2, r3
 26191 12a0 7B68     		ldr	r3, [r7, #4]
 26192 12a2 9A70     		strb	r2, [r3, #2]
1770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 26193              		.loc 1 1770 0
 26194 12a4 7B68     		ldr	r3, [r7, #4]
 26195 12a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26196 12a8 1846     		mov	r0, r3
 26197 12aa 00F03FFA 		bl	RTC_Bcd2ToByte
 26198 12ae 0346     		mov	r3, r0
 26199 12b0 1A46     		mov	r2, r3
 26200 12b2 7B68     		ldr	r3, [r7, #4]
 26201 12b4 1A70     		strb	r2, [r3, #0]
 26202              	.L103:
1771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26203              		.loc 1 1772 0
 26204 12b6 07F11807 		add	r7, r7, #24
 26205 12ba BD46     		mov	sp, r7
 26206 12bc 80BD     		pop	{r7, pc}
 26207              		.cfi_endproc
 26208              	.LFE58:
 26210 12be 00BF     		.align	2
 26211              		.global	RTC_TamperTriggerConfig
 26212              		.thumb
 26213              		.thumb_func
 26215              	RTC_TamperTriggerConfig:
 26216              	.LFB59:
1773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
1779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Tampers configuration functions 
1780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                        Tampers configuration functions
1784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
1792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
1794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
1795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         stimulates tamper event. 
1796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event
1798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper eve
1799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
1802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26217              		.loc 1 1802 0
 26218              		.cfi_startproc
 26219              		@ args = 0, pretend = 0, frame = 8
 26220              		@ frame_needed = 1, uses_anonymous_args = 0
 26221              		@ link register save eliminated.
 26222 12c0 80B4     		push	{r7}
 26223              	.LCFI87:
 26224              		.cfi_def_cfa_offset 4
 26225 12c2 83B0     		sub	sp, sp, #12
 26226              	.LCFI88:
 26227              		.cfi_def_cfa_offset 16
 26228 12c4 00AF     		add	r7, sp, #0
 26229              		.cfi_offset 7, -4
 26230              	.LCFI89:
 26231              		.cfi_def_cfa_register 7
 26232 12c6 7860     		str	r0, [r7, #4]
 26233 12c8 3960     		str	r1, [r7, #0]
1803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
1805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
1806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  
1807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 26234              		.loc 1 1807 0
 26235 12ca 3B68     		ldr	r3, [r7, #0]
 26236 12cc 002B     		cmp	r3, #0
 26237 12ce 11D1     		bne	.L106
1808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {  
1809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the RTC_TAFCR register */
1810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 26238              		.loc 1 1810 0
 26239 12d0 4FF42053 		mov	r3, #10240
 26240 12d4 C4F20003 		movt	r3, 16384
 26241 12d8 4FF42052 		mov	r2, #10240
 26242 12dc C4F20002 		movt	r2, 16384
 26243 12e0 116C     		ldr	r1, [r2, #64]
 26244 12e2 7A68     		ldr	r2, [r7, #4]
 26245 12e4 4FEA4202 		lsl	r2, r2, #1
 26246 12e8 6FEA0202 		mvn	r2, r2
 26247 12ec 01EA0202 		and	r2, r1, r2
 26248 12f0 1A64     		str	r2, [r3, #64]
 26249 12f2 0EE0     		b	.L105
 26250              	.L106:
1811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   { 
1814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the RTC_TAFCR register */
1815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 26251              		.loc 1 1815 0
 26252 12f4 4FF42053 		mov	r3, #10240
 26253 12f8 C4F20003 		movt	r3, 16384
 26254 12fc 4FF42052 		mov	r2, #10240
 26255 1300 C4F20002 		movt	r2, 16384
 26256 1304 116C     		ldr	r1, [r2, #64]
 26257 1306 7A68     		ldr	r2, [r7, #4]
 26258 1308 4FEA4202 		lsl	r2, r2, #1
 26259 130c 41EA0202 		orr	r2, r1, r2
 26260 1310 1A64     		str	r2, [r3, #64]
 26261              	.L105:
1816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
1817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26262              		.loc 1 1817 0
 26263 1312 07F10C07 		add	r7, r7, #12
 26264 1316 BD46     		mov	sp, r7
 26265 1318 80BC     		pop	{r7}
 26266 131a 7047     		bx	lr
 26267              		.cfi_endproc
 26268              	.LFE59:
 26270              		.align	2
 26271              		.global	RTC_TamperCmd
 26272              		.thumb
 26273              		.thumb_func
 26275              	RTC_TamperCmd:
 26276              	.LFB60:
1818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
1821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
1823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
1824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
1825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
1828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26277              		.loc 1 1828 0
 26278              		.cfi_startproc
 26279              		@ args = 0, pretend = 0, frame = 8
 26280              		@ frame_needed = 1, uses_anonymous_args = 0
 26281              		@ link register save eliminated.
 26282 131c 80B4     		push	{r7}
 26283              	.LCFI90:
 26284              		.cfi_def_cfa_offset 4
 26285 131e 83B0     		sub	sp, sp, #12
 26286              	.LCFI91:
 26287              		.cfi_def_cfa_offset 16
 26288 1320 00AF     		add	r7, sp, #0
 26289              		.cfi_offset 7, -4
 26290              	.LCFI92:
 26291              		.cfi_def_cfa_register 7
 26292 1322 7860     		str	r0, [r7, #4]
 26293 1324 0B46     		mov	r3, r1
 26294 1326 FB70     		strb	r3, [r7, #3]
1829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
1831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 26295              		.loc 1 1833 0
 26296 1328 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26297 132a 002B     		cmp	r3, #0
 26298 132c 0DD0     		beq	.L109
1834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Enable the selected Tamper pin */
1836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 26299              		.loc 1 1836 0
 26300 132e 4FF42053 		mov	r3, #10240
 26301 1332 C4F20003 		movt	r3, 16384
 26302 1336 4FF42052 		mov	r2, #10240
 26303 133a C4F20002 		movt	r2, 16384
 26304 133e 116C     		ldr	r1, [r2, #64]
 26305 1340 7A68     		ldr	r2, [r7, #4]
 26306 1342 41EA0202 		orr	r2, r1, r2
 26307 1346 1A64     		str	r2, [r3, #64]
 26308 1348 0EE0     		b	.L108
 26309              	.L109:
1837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the selected Tamper pin */
1841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 26310              		.loc 1 1841 0
 26311 134a 4FF42053 		mov	r3, #10240
 26312 134e C4F20003 		movt	r3, 16384
 26313 1352 4FF42052 		mov	r2, #10240
 26314 1356 C4F20002 		movt	r2, 16384
 26315 135a 116C     		ldr	r1, [r2, #64]
 26316 135c 7A68     		ldr	r2, [r7, #4]
 26317 135e 6FEA0202 		mvn	r2, r2
 26318 1362 01EA0202 		and	r2, r1, r2
 26319 1366 1A64     		str	r2, [r3, #64]
 26320              	.L108:
1842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
1843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26321              		.loc 1 1843 0
 26322 1368 07F10C07 		add	r7, r7, #12
 26323 136c BD46     		mov	sp, r7
 26324 136e 80BC     		pop	{r7}
 26325 1370 7047     		bx	lr
 26326              		.cfi_endproc
 26327              	.LFE60:
 26329 1372 00BF     		.align	2
 26330              		.global	RTC_WriteBackupRegister
 26331              		.thumb
 26332              		.thumb_func
 26334              	RTC_WriteBackupRegister:
 26335              	.LFB61:
1844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
1850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
1851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                        Backup Data Registers configuration functions 
1855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
1863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
1864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
1865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                          specify the register.
1866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
1867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
1870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26336              		.loc 1 1870 0
 26337              		.cfi_startproc
 26338              		@ args = 0, pretend = 0, frame = 16
 26339              		@ frame_needed = 1, uses_anonymous_args = 0
 26340              		@ link register save eliminated.
 26341 1374 80B4     		push	{r7}
 26342              	.LCFI93:
 26343              		.cfi_def_cfa_offset 4
 26344 1376 85B0     		sub	sp, sp, #20
 26345              	.LCFI94:
 26346              		.cfi_def_cfa_offset 24
 26347 1378 00AF     		add	r7, sp, #0
 26348              		.cfi_offset 7, -4
 26349              	.LCFI95:
 26350              		.cfi_def_cfa_register 7
 26351 137a 7860     		str	r0, [r7, #4]
 26352 137c 3960     		str	r1, [r7, #0]
1871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t tmp = 0;
 26353              		.loc 1 1871 0
 26354 137e 4FF00003 		mov	r3, #0
 26355 1382 FB60     		str	r3, [r7, #12]
1872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
1875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 26356              		.loc 1 1876 0
 26357 1384 42F65003 		movw	r3, #10320
 26358 1388 C4F20003 		movt	r3, 16384
 26359 138c FB60     		str	r3, [r7, #12]
1877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 26360              		.loc 1 1877 0
 26361 138e 7B68     		ldr	r3, [r7, #4]
 26362 1390 4FEA8302 		lsl	r2, r3, #2
 26363 1394 FB68     		ldr	r3, [r7, #12]
 26364 1396 1344     		add	r3, r2, r3
 26365 1398 FB60     		str	r3, [r7, #12]
1878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Write the specified register */
1880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 26366              		.loc 1 1880 0
 26367 139a FB68     		ldr	r3, [r7, #12]
 26368 139c 3A68     		ldr	r2, [r7, #0]
 26369 139e 1A60     		str	r2, [r3, #0]
1881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26370              		.loc 1 1881 0
 26371 13a0 07F11407 		add	r7, r7, #20
 26372 13a4 BD46     		mov	sp, r7
 26373 13a6 80BC     		pop	{r7}
 26374 13a8 7047     		bx	lr
 26375              		.cfi_endproc
 26376              	.LFE61:
 26378 13aa 00BF     		.align	2
 26379              		.global	RTC_ReadBackupRegister
 26380              		.thumb
 26381              		.thumb_func
 26383              	RTC_ReadBackupRegister:
 26384              	.LFB62:
1882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
1885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
1886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
1887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                          specify the register.                   
1888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
1891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26385              		.loc 1 1891 0
 26386              		.cfi_startproc
 26387              		@ args = 0, pretend = 0, frame = 16
 26388              		@ frame_needed = 1, uses_anonymous_args = 0
 26389              		@ link register save eliminated.
 26390 13ac 80B4     		push	{r7}
 26391              	.LCFI96:
 26392              		.cfi_def_cfa_offset 4
 26393 13ae 85B0     		sub	sp, sp, #20
 26394              	.LCFI97:
 26395              		.cfi_def_cfa_offset 24
 26396 13b0 00AF     		add	r7, sp, #0
 26397              		.cfi_offset 7, -4
 26398              	.LCFI98:
 26399              		.cfi_def_cfa_register 7
 26400 13b2 7860     		str	r0, [r7, #4]
1892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t tmp = 0;
 26401              		.loc 1 1892 0
 26402 13b4 4FF00003 		mov	r3, #0
 26403 13b8 FB60     		str	r3, [r7, #12]
1893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
1896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 26404              		.loc 1 1897 0
 26405 13ba 42F65003 		movw	r3, #10320
 26406 13be C4F20003 		movt	r3, 16384
 26407 13c2 FB60     		str	r3, [r7, #12]
1898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 26408              		.loc 1 1898 0
 26409 13c4 7B68     		ldr	r3, [r7, #4]
 26410 13c6 4FEA8302 		lsl	r2, r3, #2
 26411 13ca FB68     		ldr	r3, [r7, #12]
 26412 13cc 1344     		add	r3, r2, r3
 26413 13ce FB60     		str	r3, [r7, #12]
1899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Read the specified register */
1901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 26414              		.loc 1 1901 0
 26415 13d0 FB68     		ldr	r3, [r7, #12]
 26416 13d2 1B68     		ldr	r3, [r3, #0]
1902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26417              		.loc 1 1902 0
 26418 13d4 1846     		mov	r0, r3
 26419 13d6 07F11407 		add	r7, r7, #20
 26420 13da BD46     		mov	sp, r7
 26421 13dc 80BC     		pop	{r7}
 26422 13de 7047     		bx	lr
 26423              		.cfi_endproc
 26424              	.LFE62:
 26426              		.align	2
 26427              		.global	RTC_TamperPinSelection
 26428              		.thumb
 26429              		.thumb_func
 26431              	RTC_TamperPinSelection:
 26432              	.LFB63:
1903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
1909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
1910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *           configuration functions  
1911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
1915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   functions 
1916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
1924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
1925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
1927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
1928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
1931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26433              		.loc 1 1931 0
 26434              		.cfi_startproc
 26435              		@ args = 0, pretend = 0, frame = 8
 26436              		@ frame_needed = 1, uses_anonymous_args = 0
 26437              		@ link register save eliminated.
 26438 13e0 80B4     		push	{r7}
 26439              	.LCFI99:
 26440              		.cfi_def_cfa_offset 4
 26441 13e2 83B0     		sub	sp, sp, #12
 26442              	.LCFI100:
 26443              		.cfi_def_cfa_offset 16
 26444 13e4 00AF     		add	r7, sp, #0
 26445              		.cfi_offset 7, -4
 26446              	.LCFI101:
 26447              		.cfi_def_cfa_register 7
 26448 13e6 7860     		str	r0, [r7, #4]
1932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
1934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 26449              		.loc 1 1935 0
 26450 13e8 4FF42053 		mov	r3, #10240
 26451 13ec C4F20003 		movt	r3, 16384
 26452 13f0 4FF42052 		mov	r2, #10240
 26453 13f4 C4F20002 		movt	r2, 16384
 26454 13f8 126C     		ldr	r2, [r2, #64]
 26455 13fa 22F48032 		bic	r2, r2, #65536
 26456 13fe 1A64     		str	r2, [r3, #64]
1936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 26457              		.loc 1 1936 0
 26458 1400 4FF42053 		mov	r3, #10240
 26459 1404 C4F20003 		movt	r3, 16384
 26460 1408 4FF42052 		mov	r2, #10240
 26461 140c C4F20002 		movt	r2, 16384
 26462 1410 116C     		ldr	r1, [r2, #64]
 26463 1412 7A68     		ldr	r2, [r7, #4]
 26464 1414 41EA0202 		orr	r2, r1, r2
 26465 1418 1A64     		str	r2, [r3, #64]
1937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26466              		.loc 1 1937 0
 26467 141a 07F10C07 		add	r7, r7, #12
 26468 141e BD46     		mov	sp, r7
 26469 1420 80BC     		pop	{r7}
 26470 1422 7047     		bx	lr
 26471              		.cfi_endproc
 26472              	.LFE63:
 26474              		.align	2
 26475              		.global	RTC_TimeStampPinSelection
 26476              		.thumb
 26477              		.thumb_func
 26479              	RTC_TimeStampPinSelection:
 26480              	.LFB64:
1938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
1941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
1942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
1944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
1945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
1948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26481              		.loc 1 1948 0
 26482              		.cfi_startproc
 26483              		@ args = 0, pretend = 0, frame = 8
 26484              		@ frame_needed = 1, uses_anonymous_args = 0
 26485              		@ link register save eliminated.
 26486 1424 80B4     		push	{r7}
 26487              	.LCFI102:
 26488              		.cfi_def_cfa_offset 4
 26489 1426 83B0     		sub	sp, sp, #12
 26490              	.LCFI103:
 26491              		.cfi_def_cfa_offset 16
 26492 1428 00AF     		add	r7, sp, #0
 26493              		.cfi_offset 7, -4
 26494              	.LCFI104:
 26495              		.cfi_def_cfa_register 7
 26496 142a 7860     		str	r0, [r7, #4]
1949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
1951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 26497              		.loc 1 1952 0
 26498 142c 4FF42053 		mov	r3, #10240
 26499 1430 C4F20003 		movt	r3, 16384
 26500 1434 4FF42052 		mov	r2, #10240
 26501 1438 C4F20002 		movt	r2, 16384
 26502 143c 126C     		ldr	r2, [r2, #64]
 26503 143e 22F40032 		bic	r2, r2, #131072
 26504 1442 1A64     		str	r2, [r3, #64]
1953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 26505              		.loc 1 1953 0
 26506 1444 4FF42053 		mov	r3, #10240
 26507 1448 C4F20003 		movt	r3, 16384
 26508 144c 4FF42052 		mov	r2, #10240
 26509 1450 C4F20002 		movt	r2, 16384
 26510 1454 116C     		ldr	r1, [r2, #64]
 26511 1456 7A68     		ldr	r2, [r7, #4]
 26512 1458 41EA0202 		orr	r2, r1, r2
 26513 145c 1A64     		str	r2, [r3, #64]
1954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26514              		.loc 1 1954 0
 26515 145e 07F10C07 		add	r7, r7, #12
 26516 1462 BD46     		mov	sp, r7
 26517 1464 80BC     		pop	{r7}
 26518 1466 7047     		bx	lr
 26519              		.cfi_endproc
 26520              	.LFE64:
 26522              		.align	2
 26523              		.global	RTC_OutputTypeConfig
 26524              		.thumb
 26525              		.thumb_func
 26527              	RTC_OutputTypeConfig:
 26528              	.LFB65:
1955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
1958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
1959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
1961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                    Open Drain mode.
1962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
1963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                    Push Pull mode.    
1964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
1967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26529              		.loc 1 1967 0
 26530              		.cfi_startproc
 26531              		@ args = 0, pretend = 0, frame = 8
 26532              		@ frame_needed = 1, uses_anonymous_args = 0
 26533              		@ link register save eliminated.
 26534 1468 80B4     		push	{r7}
 26535              	.LCFI105:
 26536              		.cfi_def_cfa_offset 4
 26537 146a 83B0     		sub	sp, sp, #12
 26538              	.LCFI106:
 26539              		.cfi_def_cfa_offset 16
 26540 146c 00AF     		add	r7, sp, #0
 26541              		.cfi_offset 7, -4
 26542              	.LCFI107:
 26543              		.cfi_def_cfa_register 7
 26544 146e 7860     		str	r0, [r7, #4]
1968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
1970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 26545              		.loc 1 1971 0
 26546 1470 4FF42053 		mov	r3, #10240
 26547 1474 C4F20003 		movt	r3, 16384
 26548 1478 4FF42052 		mov	r2, #10240
 26549 147c C4F20002 		movt	r2, 16384
 26550 1480 126C     		ldr	r2, [r2, #64]
 26551 1482 22F48022 		bic	r2, r2, #262144
 26552 1486 1A64     		str	r2, [r3, #64]
1972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 26553              		.loc 1 1972 0
 26554 1488 4FF42053 		mov	r3, #10240
 26555 148c C4F20003 		movt	r3, 16384
 26556 1490 4FF42052 		mov	r2, #10240
 26557 1494 C4F20002 		movt	r2, 16384
 26558 1498 116C     		ldr	r1, [r2, #64]
 26559 149a 7A68     		ldr	r2, [r7, #4]
 26560 149c 41EA0202 		orr	r2, r1, r2
 26561 14a0 1A64     		str	r2, [r3, #64]
1973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26562              		.loc 1 1973 0
 26563 14a2 07F10C07 		add	r7, r7, #12
 26564 14a6 BD46     		mov	sp, r7
 26565 14a8 80BC     		pop	{r7}
 26566 14aa 7047     		bx	lr
 26567              		.cfi_endproc
 26568              	.LFE65:
 26570              		.align	2
 26571              		.global	RTC_ITConfig
 26572              		.thumb
 26573              		.thumb_func
 26575              	RTC_ITConfig:
 26576              	.LFB66:
1974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group12 Interrupts and flags management functions
1980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
1981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                        Interrupts and flags management functions
1985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
1987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  
1988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
1989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
1990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
1991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
1992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      function.
1993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
1994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
1995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
1997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
1998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
1999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      function.
2001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      function.
2009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      function.
2017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      RTC_TimeStampCmd() functions.
2019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
2021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
2022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be any combination of the following values:
2028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
2036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26577              		.loc 1 2038 0
 26578              		.cfi_startproc
 26579              		@ args = 0, pretend = 0, frame = 8
 26580              		@ frame_needed = 1, uses_anonymous_args = 0
 26581              		@ link register save eliminated.
 26582 14ac 80B4     		push	{r7}
 26583              	.LCFI108:
 26584              		.cfi_def_cfa_offset 4
 26585 14ae 83B0     		sub	sp, sp, #12
 26586              	.LCFI109:
 26587              		.cfi_def_cfa_offset 16
 26588 14b0 00AF     		add	r7, sp, #0
 26589              		.cfi_offset 7, -4
 26590              	.LCFI110:
 26591              		.cfi_def_cfa_register 7
 26592 14b2 7860     		str	r0, [r7, #4]
 26593 14b4 0B46     		mov	r3, r1
 26594 14b6 FB70     		strb	r3, [r7, #3]
2039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
2044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 26595              		.loc 1 2044 0
 26596 14b8 4FF42053 		mov	r3, #10240
 26597 14bc C4F20003 		movt	r3, 16384
 26598 14c0 4FF0CA02 		mov	r2, #202
 26599 14c4 5A62     		str	r2, [r3, #36]
2045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 26600              		.loc 1 2045 0
 26601 14c6 4FF42053 		mov	r3, #10240
 26602 14ca C4F20003 		movt	r3, 16384
 26603 14ce 4FF05302 		mov	r2, #83
 26604 14d2 5A62     		str	r2, [r3, #36]
2046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 26605              		.loc 1 2047 0
 26606 14d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26607 14d6 002B     		cmp	r3, #0
 26608 14d8 1ED0     		beq	.L117
2048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 26609              		.loc 1 2050 0
 26610 14da 4FF42053 		mov	r3, #10240
 26611 14de C4F20003 		movt	r3, 16384
 26612 14e2 4FF42052 		mov	r2, #10240
 26613 14e6 C4F20002 		movt	r2, 16384
 26614 14ea 9168     		ldr	r1, [r2, #8]
 26615 14ec 7A68     		ldr	r2, [r7, #4]
 26616 14ee 22F00402 		bic	r2, r2, #4
 26617 14f2 41EA0202 		orr	r2, r1, r2
 26618 14f6 9A60     		str	r2, [r3, #8]
2051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 26619              		.loc 1 2052 0
 26620 14f8 4FF42053 		mov	r3, #10240
 26621 14fc C4F20003 		movt	r3, 16384
 26622 1500 4FF42052 		mov	r2, #10240
 26623 1504 C4F20002 		movt	r2, 16384
 26624 1508 116C     		ldr	r1, [r2, #64]
 26625 150a 7A68     		ldr	r2, [r7, #4]
 26626 150c 02F00402 		and	r2, r2, #4
 26627 1510 41EA0202 		orr	r2, r1, r2
 26628 1514 1A64     		str	r2, [r3, #64]
 26629 1516 21E0     		b	.L118
 26630              	.L117:
2053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
2055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 26631              		.loc 1 2057 0
 26632 1518 4FF42053 		mov	r3, #10240
 26633 151c C4F20003 		movt	r3, 16384
 26634 1520 4FF42052 		mov	r2, #10240
 26635 1524 C4F20002 		movt	r2, 16384
 26636 1528 9168     		ldr	r1, [r2, #8]
 26637 152a 7A68     		ldr	r2, [r7, #4]
 26638 152c 22F00402 		bic	r2, r2, #4
 26639 1530 6FEA0202 		mvn	r2, r2
 26640 1534 01EA0202 		and	r2, r1, r2
 26641 1538 9A60     		str	r2, [r3, #8]
2058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 26642              		.loc 1 2059 0
 26643 153a 4FF42053 		mov	r3, #10240
 26644 153e C4F20003 		movt	r3, 16384
 26645 1542 4FF42052 		mov	r2, #10240
 26646 1546 C4F20002 		movt	r2, 16384
 26647 154a 116C     		ldr	r1, [r2, #64]
 26648 154c 7A68     		ldr	r2, [r7, #4]
 26649 154e 02F00402 		and	r2, r2, #4
 26650 1552 6FEA0202 		mvn	r2, r2
 26651 1556 01EA0202 		and	r2, r1, r2
 26652 155a 1A64     		str	r2, [r3, #64]
 26653              	.L118:
2060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
2062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 26654              		.loc 1 2062 0
 26655 155c 4FF42053 		mov	r3, #10240
 26656 1560 C4F20003 		movt	r3, 16384
 26657 1564 4FF0FF02 		mov	r2, #255
 26658 1568 5A62     		str	r2, [r3, #36]
2063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26659              		.loc 1 2063 0
 26660 156a 07F10C07 		add	r7, r7, #12
 26661 156e BD46     		mov	sp, r7
 26662 1570 80BC     		pop	{r7}
 26663 1572 7047     		bx	lr
 26664              		.cfi_endproc
 26665              	.LFE66:
 26667              		.align	2
 26668              		.global	RTC_GetFlagStatus
 26669              		.thumb
 26670              		.thumb_func
 26672              	RTC_GetFlagStatus:
 26673              	.LFB67:
2064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
2069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26674              		.loc 1 2084 0
 26675              		.cfi_startproc
 26676              		@ args = 0, pretend = 0, frame = 16
 26677              		@ frame_needed = 1, uses_anonymous_args = 0
 26678              		@ link register save eliminated.
 26679 1574 80B4     		push	{r7}
 26680              	.LCFI111:
 26681              		.cfi_def_cfa_offset 4
 26682 1576 85B0     		sub	sp, sp, #20
 26683              	.LCFI112:
 26684              		.cfi_def_cfa_offset 24
 26685 1578 00AF     		add	r7, sp, #0
 26686              		.cfi_offset 7, -4
 26687              	.LCFI113:
 26688              		.cfi_def_cfa_register 7
 26689 157a 7860     		str	r0, [r7, #4]
2085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   FlagStatus bitstatus = RESET;
 26690              		.loc 1 2085 0
 26691 157c 4FF00003 		mov	r3, #0
 26692 1580 FB73     		strb	r3, [r7, #15]
2086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 26693              		.loc 1 2086 0
 26694 1582 4FF00003 		mov	r3, #0
 26695 1586 BB60     		str	r3, [r7, #8]
2087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get all the flags */
2092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 26696              		.loc 1 2092 0
 26697 1588 4FF42053 		mov	r3, #10240
 26698 158c C4F20003 		movt	r3, 16384
 26699 1590 DA68     		ldr	r2, [r3, #12]
 26700 1592 43F67773 		movw	r3, #16247
 26701 1596 02EA0303 		and	r3, r2, r3
 26702 159a BB60     		str	r3, [r7, #8]
2093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Return the status of the flag */
2095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 26703              		.loc 1 2095 0
 26704 159c BA68     		ldr	r2, [r7, #8]
 26705 159e 7B68     		ldr	r3, [r7, #4]
 26706 15a0 02EA0303 		and	r3, r2, r3
 26707 15a4 002B     		cmp	r3, #0
 26708 15a6 03D0     		beq	.L120
2096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bitstatus = SET;
 26709              		.loc 1 2097 0
 26710 15a8 4FF00103 		mov	r3, #1
 26711 15ac FB73     		strb	r3, [r7, #15]
 26712 15ae 02E0     		b	.L121
 26713              	.L120:
2098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
2100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bitstatus = RESET;
 26714              		.loc 1 2101 0
 26715 15b0 4FF00003 		mov	r3, #0
 26716 15b4 FB73     		strb	r3, [r7, #15]
 26717              	.L121:
2102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return bitstatus;
 26718              		.loc 1 2103 0
 26719 15b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26720              		.loc 1 2104 0
 26721 15b8 1846     		mov	r0, r3
 26722 15ba 07F11407 		add	r7, r7, #20
 26723 15be BD46     		mov	sp, r7
 26724 15c0 80BC     		pop	{r7}
 26725 15c2 7047     		bx	lr
 26726              		.cfi_endproc
 26727              	.LFE67:
 26729              		.align	2
 26730              		.global	RTC_ClearFlag
 26731              		.thumb
 26732              		.thumb_func
 26734              	RTC_ClearFlag:
 26735              	.LFB68:
2105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be any combination of the following values:
2110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
2118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26736              		.loc 1 2120 0
 26737              		.cfi_startproc
 26738              		@ args = 0, pretend = 0, frame = 8
 26739              		@ frame_needed = 1, uses_anonymous_args = 0
 26740              		@ link register save eliminated.
 26741 15c4 80B4     		push	{r7}
 26742              	.LCFI114:
 26743              		.cfi_def_cfa_offset 4
 26744 15c6 83B0     		sub	sp, sp, #12
 26745              	.LCFI115:
 26746              		.cfi_def_cfa_offset 16
 26747 15c8 00AF     		add	r7, sp, #0
 26748              		.cfi_offset 7, -4
 26749              	.LCFI116:
 26750              		.cfi_def_cfa_register 7
 26751 15ca 7860     		str	r0, [r7, #4]
2121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 26752              		.loc 1 2125 0
 26753 15cc 4FF42053 		mov	r3, #10240
 26754 15d0 C4F20003 		movt	r3, 16384
 26755 15d4 7A68     		ldr	r2, [r7, #4]
 26756 15d6 4FEA0242 		lsl	r2, r2, #16
 26757 15da 4FEA1242 		lsr	r2, r2, #16
 26758 15de 42F08002 		orr	r2, r2, #128
 26759 15e2 6FEA0201 		mvn	r1, r2
 26760 15e6 4FF42052 		mov	r2, #10240
 26761 15ea C4F20002 		movt	r2, 16384
 26762 15ee D268     		ldr	r2, [r2, #12]
 26763 15f0 02F08002 		and	r2, r2, #128
 26764 15f4 41EA0202 		orr	r2, r1, r2
 26765 15f8 DA60     		str	r2, [r3, #12]
2126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26766              		.loc 1 2126 0
 26767 15fa 07F10C07 		add	r7, r7, #12
 26768 15fe BD46     		mov	sp, r7
 26769 1600 80BC     		pop	{r7}
 26770 1602 7047     		bx	lr
 26771              		.cfi_endproc
 26772              	.LFE68:
 26774              		.align	2
 26775              		.global	RTC_GetITStatus
 26776              		.thumb
 26777              		.thumb_func
 26779              	RTC_GetITStatus:
 26780              	.LFB69:
2127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
2132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26781              		.loc 1 2140 0
 26782              		.cfi_startproc
 26783              		@ args = 0, pretend = 0, frame = 24
 26784              		@ frame_needed = 1, uses_anonymous_args = 0
 26785              		@ link register save eliminated.
 26786 1604 80B4     		push	{r7}
 26787              	.LCFI117:
 26788              		.cfi_def_cfa_offset 4
 26789 1606 87B0     		sub	sp, sp, #28
 26790              	.LCFI118:
 26791              		.cfi_def_cfa_offset 32
 26792 1608 00AF     		add	r7, sp, #0
 26793              		.cfi_offset 7, -4
 26794              	.LCFI119:
 26795              		.cfi_def_cfa_register 7
 26796 160a 7860     		str	r0, [r7, #4]
2141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ITStatus bitstatus = RESET;
 26797              		.loc 1 2141 0
 26798 160c 4FF00003 		mov	r3, #0
 26799 1610 FB75     		strb	r3, [r7, #23]
2142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 26800              		.loc 1 2142 0
 26801 1612 4FF00003 		mov	r3, #0
 26802 1616 3B61     		str	r3, [r7, #16]
 26803 1618 4FF00003 		mov	r3, #0
 26804 161c FB60     		str	r3, [r7, #12]
2143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  
2144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 26805              		.loc 1 2148 0
 26806 161e 4FF42053 		mov	r3, #10240
 26807 1622 C4F20003 		movt	r3, 16384
 26808 1626 1B6C     		ldr	r3, [r3, #64]
 26809 1628 03F00403 		and	r3, r3, #4
 26810 162c 3B61     		str	r3, [r7, #16]
2149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  
2150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the Interrupt enable Status */
2151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 26811              		.loc 1 2151 0
 26812 162e 4FF42053 		mov	r3, #10240
 26813 1632 C4F20003 		movt	r3, 16384
 26814 1636 9A68     		ldr	r2, [r3, #8]
 26815 1638 7B68     		ldr	r3, [r7, #4]
 26816 163a 02EA0302 		and	r2, r2, r3
 26817 163e 7B68     		ldr	r3, [r7, #4]
 26818 1640 4FEAD331 		lsr	r1, r3, #15
 26819 1644 3B69     		ldr	r3, [r7, #16]
 26820 1646 01EA0303 		and	r3, r1, r3
 26821 164a 42EA0303 		orr	r3, r2, r3
 26822 164e FB60     		str	r3, [r7, #12]
2152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the Interrupt pending bit */
2154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 26823              		.loc 1 2154 0
 26824 1650 4FF42053 		mov	r3, #10240
 26825 1654 C4F20003 		movt	r3, 16384
 26826 1658 DA68     		ldr	r2, [r3, #12]
 26827 165a 7B68     		ldr	r3, [r7, #4]
 26828 165c 4FEA1313 		lsr	r3, r3, #4
 26829 1660 02EA0303 		and	r3, r2, r3
 26830 1664 3B61     		str	r3, [r7, #16]
2155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the status of the Interrupt */
2157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 26831              		.loc 1 2157 0
 26832 1666 FB68     		ldr	r3, [r7, #12]
 26833 1668 002B     		cmp	r3, #0
 26834 166a 0AD0     		beq	.L124
 26835              		.loc 1 2157 0 is_stmt 0 discriminator 1
 26836 166c 3B69     		ldr	r3, [r7, #16]
 26837 166e 4FEA0343 		lsl	r3, r3, #16
 26838 1672 4FEA1343 		lsr	r3, r3, #16
 26839 1676 002B     		cmp	r3, #0
 26840 1678 03D0     		beq	.L124
2158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bitstatus = SET;
 26841              		.loc 1 2159 0 is_stmt 1
 26842 167a 4FF00103 		mov	r3, #1
 26843 167e FB75     		strb	r3, [r7, #23]
 26844 1680 02E0     		b	.L125
 26845              	.L124:
2160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
2162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bitstatus = RESET;
 26846              		.loc 1 2163 0
 26847 1682 4FF00003 		mov	r3, #0
 26848 1686 FB75     		strb	r3, [r7, #23]
 26849              	.L125:
2164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return bitstatus;
 26850              		.loc 1 2165 0
 26851 1688 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26852              		.loc 1 2166 0
 26853 168a 1846     		mov	r0, r3
 26854 168c 07F11C07 		add	r7, r7, #28
 26855 1690 BD46     		mov	sp, r7
 26856 1692 80BC     		pop	{r7}
 26857 1694 7047     		bx	lr
 26858              		.cfi_endproc
 26859              	.LFE69:
 26861 1696 00BF     		.align	2
 26862              		.global	RTC_ClearITPendingBit
 26863              		.thumb
 26864              		.thumb_func
 26866              	RTC_ClearITPendingBit:
 26867              	.LFB70:
2167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be any combination of the following values:
2172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
2178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26868              		.loc 1 2180 0
 26869              		.cfi_startproc
 26870              		@ args = 0, pretend = 0, frame = 16
 26871              		@ frame_needed = 1, uses_anonymous_args = 0
 26872              		@ link register save eliminated.
 26873 1698 80B4     		push	{r7}
 26874              	.LCFI120:
 26875              		.cfi_def_cfa_offset 4
 26876 169a 85B0     		sub	sp, sp, #20
 26877              	.LCFI121:
 26878              		.cfi_def_cfa_offset 24
 26879 169c 00AF     		add	r7, sp, #0
 26880              		.cfi_offset 7, -4
 26881              	.LCFI122:
 26882              		.cfi_def_cfa_register 7
 26883 169e 7860     		str	r0, [r7, #4]
2181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 26884              		.loc 1 2181 0
 26885 16a0 4FF00003 		mov	r3, #0
 26886 16a4 FB60     		str	r3, [r7, #12]
2182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 26887              		.loc 1 2187 0
 26888 16a6 7B68     		ldr	r3, [r7, #4]
 26889 16a8 4FEA1313 		lsr	r3, r3, #4
 26890 16ac FB60     		str	r3, [r7, #12]
2188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 26891              		.loc 1 2190 0
 26892 16ae 4FF42053 		mov	r3, #10240
 26893 16b2 C4F20003 		movt	r3, 16384
 26894 16b6 FA68     		ldr	r2, [r7, #12]
 26895 16b8 4FEA0242 		lsl	r2, r2, #16
 26896 16bc 4FEA1242 		lsr	r2, r2, #16
 26897 16c0 42F08002 		orr	r2, r2, #128
 26898 16c4 6FEA0201 		mvn	r1, r2
 26899 16c8 4FF42052 		mov	r2, #10240
 26900 16cc C4F20002 		movt	r2, 16384
 26901 16d0 D268     		ldr	r2, [r2, #12]
 26902 16d2 02F08002 		and	r2, r2, #128
 26903 16d6 41EA0202 		orr	r2, r1, r2
 26904 16da DA60     		str	r2, [r3, #12]
2191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26905              		.loc 1 2191 0
 26906 16dc 07F11407 		add	r7, r7, #20
 26907 16e0 BD46     		mov	sp, r7
 26908 16e2 80BC     		pop	{r7}
 26909 16e4 7047     		bx	lr
 26910              		.cfi_endproc
 26911              	.LFE70:
 26913 16e6 00BF     		.align	2
 26914              		.thumb
 26915              		.thumb_func
 26917              	RTC_ByteToBcd2:
 26918              	.LFB71:
2192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
2195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  Value: Byte to be converted.
2200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval Converted byte
2201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26919              		.loc 1 2203 0
 26920              		.cfi_startproc
 26921              		@ args = 0, pretend = 0, frame = 16
 26922              		@ frame_needed = 1, uses_anonymous_args = 0
 26923              		@ link register save eliminated.
 26924 16e8 80B4     		push	{r7}
 26925              	.LCFI123:
 26926              		.cfi_def_cfa_offset 4
 26927 16ea 85B0     		sub	sp, sp, #20
 26928              	.LCFI124:
 26929              		.cfi_def_cfa_offset 24
 26930 16ec 00AF     		add	r7, sp, #0
 26931              		.cfi_offset 7, -4
 26932              	.LCFI125:
 26933              		.cfi_def_cfa_register 7
 26934 16ee 0346     		mov	r3, r0
 26935 16f0 FB71     		strb	r3, [r7, #7]
2204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint8_t bcdhigh = 0;
 26936              		.loc 1 2204 0
 26937 16f2 4FF00003 		mov	r3, #0
 26938 16f6 FB73     		strb	r3, [r7, #15]
2205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   while (Value >= 10)
 26939              		.loc 1 2206 0
 26940 16f8 07E0     		b	.L128
 26941              	.L129:
2207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bcdhigh++;
 26942              		.loc 1 2208 0
 26943 16fa FB7B     		ldrb	r3, [r7, #15]
 26944 16fc 03F10103 		add	r3, r3, #1
 26945 1700 FB73     		strb	r3, [r7, #15]
2209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     Value -= 10;
 26946              		.loc 1 2209 0
 26947 1702 FB79     		ldrb	r3, [r7, #7]
 26948 1704 A3F10A03 		sub	r3, r3, #10
 26949 1708 FB71     		strb	r3, [r7, #7]
 26950              	.L128:
2206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   while (Value >= 10)
 26951              		.loc 1 2206 0 discriminator 1
 26952 170a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 26953 170c 092B     		cmp	r3, #9
 26954 170e F4D8     		bhi	.L129
2210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 26955              		.loc 1 2212 0
 26956 1710 FB7B     		ldrb	r3, [r7, #15]
 26957 1712 4FEA0313 		lsl	r3, r3, #4
 26958 1716 DAB2     		uxtb	r2, r3
 26959 1718 FB79     		ldrb	r3, [r7, #7]
 26960 171a 42EA0303 		orr	r3, r2, r3
 26961 171e DBB2     		uxtb	r3, r3
2213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 26962              		.loc 1 2213 0
 26963 1720 1846     		mov	r0, r3
 26964 1722 07F11407 		add	r7, r7, #20
 26965 1726 BD46     		mov	sp, r7
 26966 1728 80BC     		pop	{r7}
 26967 172a 7047     		bx	lr
 26968              		.cfi_endproc
 26969              	.LFE71:
 26971              		.align	2
 26972              		.thumb
 26973              		.thumb_func
 26975              	RTC_Bcd2ToByte:
 26976              	.LFB72:
2214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  Value: BCD value to be converted.
2218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval Converted word
2219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 26977              		.loc 1 2221 0
 26978              		.cfi_startproc
 26979              		@ args = 0, pretend = 0, frame = 16
 26980              		@ frame_needed = 1, uses_anonymous_args = 0
 26981              		@ link register save eliminated.
 26982 172c 80B4     		push	{r7}
 26983              	.LCFI126:
 26984              		.cfi_def_cfa_offset 4
 26985 172e 85B0     		sub	sp, sp, #20
 26986              	.LCFI127:
 26987              		.cfi_def_cfa_offset 24
 26988 1730 00AF     		add	r7, sp, #0
 26989              		.cfi_offset 7, -4
 26990              	.LCFI128:
 26991              		.cfi_def_cfa_register 7
 26992 1732 0346     		mov	r3, r0
 26993 1734 FB71     		strb	r3, [r7, #7]
2222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint8_t tmp = 0;
 26994              		.loc 1 2222 0
 26995 1736 4FF00003 		mov	r3, #0
 26996 173a FB73     		strb	r3, [r7, #15]
2223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 26997              		.loc 1 2223 0
 26998 173c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 26999 173e 4FEA1313 		lsr	r3, r3, #4
 27000 1742 DBB2     		uxtb	r3, r3
 27001 1744 1A46     		mov	r2, r3
 27002 1746 4FEA8202 		lsl	r2, r2, #2
 27003 174a 1344     		add	r3, r2, r3
 27004 174c 4FEA4303 		lsl	r3, r3, #1
 27005 1750 FB73     		strb	r3, [r7, #15]
2224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 27006              		.loc 1 2224 0
 27007 1752 FB79     		ldrb	r3, [r7, #7]
 27008 1754 03F00F03 		and	r3, r3, #15
 27009 1758 DAB2     		uxtb	r2, r3
 27010 175a FB7B     		ldrb	r3, [r7, #15]
 27011 175c 1344     		add	r3, r2, r3
 27012 175e DBB2     		uxtb	r3, r3
2225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 27013              		.loc 1 2225 0
 27014 1760 1846     		mov	r0, r3
 27015 1762 07F11407 		add	r7, r7, #20
 27016 1766 BD46     		mov	sp, r7
 27017 1768 80BC     		pop	{r7}
 27018 176a 7047     		bx	lr
 27019              		.cfi_endproc
 27020              	.LFE72:
 27022              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_rtc.c
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23383  .text:00000000 $t
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23388  .text:00000000 RTC_DeInit
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23760  .text:000002a4 RTC_EnterInitMode
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23888  .text:0000035c RTC_WaitForSynchro
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23561  .text:0000016c RTC_Init
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23854  .text:00000338 RTC_ExitInitMode
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23663  .text:00000230 RTC_StructInit
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23706  .text:0000025c RTC_WriteProtectionCmd
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:23988  .text:0000040c RTC_RefClockCmd
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:24079  .text:000004a8 RTC_SetTime
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26975  .text:0000172c RTC_Bcd2ToByte
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26917  .text:000016e8 RTC_ByteToBcd2
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:24267  .text:000005fc RTC_TimeStructInit
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:24314  .text:00000630 RTC_GetTime
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:24416  .text:000006dc RTC_SetDate
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:24604  .text:00000828 RTC_DateStructInit
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:24651  .text:0000085c RTC_GetDate
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:24757  .text:0000090c RTC_SetAlarm
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:24980  .text:00000a98 RTC_AlarmStructInit
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25039  .text:00000ae4 RTC_GetAlarm
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25177  .text:00000bd0 RTC_AlarmCmd
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25304  .text:00000cc0 RTC_WakeUpClockConfig
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25367  .text:00000d30 RTC_SetWakeUpCounter
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25418  .text:00000d78 RTC_GetWakeUpCounter
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25451  .text:00000d98 RTC_WakeUpCmd
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25570  .text:00000e70 RTC_DayLightSavingConfig
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25636  .text:00000ee8 RTC_GetStoreOperation
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25668  .text:00000f04 RTC_OutputConfig
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25734  .text:00000f7c RTC_CoarseCalibConfig
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25809  .text:00000ff0 RTC_CoarseCalibCmd
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25900  .text:0000108c RTC_CalibOutputCmd
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:25970  .text:00001104 RTC_TimeStampCmd
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26051  .text:0000118c RTC_GetTimeStamp
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26215  .text:000012c0 RTC_TamperTriggerConfig
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26275  .text:0000131c RTC_TamperCmd
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26334  .text:00001374 RTC_WriteBackupRegister
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26383  .text:000013ac RTC_ReadBackupRegister
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26431  .text:000013e0 RTC_TamperPinSelection
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26479  .text:00001424 RTC_TimeStampPinSelection
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26527  .text:00001468 RTC_OutputTypeConfig
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26575  .text:000014ac RTC_ITConfig
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26672  .text:00001574 RTC_GetFlagStatus
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26734  .text:000015c4 RTC_ClearFlag
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26779  .text:00001604 RTC_GetITStatus
C:\Users\red4sch\AppData\Local\Temp\ccRXzBT0.s:26866  .text:00001698 RTC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
