   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_usart.c"
  23              	.Ltext0:
  24              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c"
 23373              		.align	2
 23374              		.global	USART_DeInit
 23375              		.thumb
 23376              		.thumb_func
 23378              	USART_DeInit:
 23379              	.LFB29:
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @file    stm32f2xx_usart.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          transmitter (USART):           
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - Initialization and Configuration
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - Data transfers
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - Multi-Processor Communication
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - LIN mode
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - Half-duplex mode
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - Smartcard mode
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - IrDA mode
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - DMA transfers management
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           - Interrupts and flags management 
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *           
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *  @verbatim
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *      
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          ===================================================================
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                                 How to use this driver
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          ===================================================================
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *              or/and SCLK). 
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                 - Call GPIO_Init() function
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *        
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *             function.
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          6. When using the DMA mode 
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * 
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * 
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          for more details
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          and before calling the function USART_Init().
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *  @endverbatim
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *        
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   ******************************************************************************
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @attention
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   ******************************************************************************  
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */ 
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** #include "stm32f2xx_usart.h"
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** #include "stm32f2xx_rcc.h"
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART 
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief USART driver modules
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                                               USART_CR1_RE))
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*!< USART Interrupts mask */
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Private_Functions
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                   Initialization and Configuration functions
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   in asynchronous and in synchronous modes.
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Baud Rate
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Word Length 
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Stop Bit
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    +-------------------------------------------------------------+     
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |---------------------|---------------------------------------|             
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****    +-------------------------------------------------------------+            
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Hardware flow control
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Receiver/transmitter modes
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   (details for the procedure are available in reference manual (RM0033)).
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     parameters should be also configured:
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - USART Clock Enabled
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - USART polarity
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - USART phase
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - USART LastBit
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 23380              		.loc 1 179 0
 23381              		.cfi_startproc
 23382              		@ args = 0, pretend = 0, frame = 8
 23383              		@ frame_needed = 1, uses_anonymous_args = 0
 23384 0000 80B5     		push	{r7, lr}
 23385              	.LCFI0:
 23386              		.cfi_def_cfa_offset 8
 23387 0002 82B0     		sub	sp, sp, #8
 23388              	.LCFI1:
 23389              		.cfi_def_cfa_offset 16
 23390 0004 00AF     		add	r7, sp, #0
 23391              		.cfi_offset 14, -4
 23392              		.cfi_offset 7, -8
 23393              	.LCFI2:
 23394              		.cfi_def_cfa_register 7
 23395 0006 7860     		str	r0, [r7, #4]
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (USARTx == USART1)
 23396              		.loc 1 183 0
 23397 0008 7A68     		ldr	r2, [r7, #4]
 23398 000a 4FF48053 		mov	r3, #4096
 23399 000e C4F20103 		movt	r3, 16385
 23400 0012 9A42     		cmp	r2, r3
 23401 0014 0CD1     		bne	.L2
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 23402              		.loc 1 185 0
 23403 0016 4FF01000 		mov	r0, #16
 23404 001a 4FF00101 		mov	r1, #1
 23405 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 23406              		.loc 1 186 0
 23407 0022 4FF01000 		mov	r0, #16
 23408 0026 4FF00001 		mov	r1, #0
 23409 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 23410 002e 62E0     		b	.L1
 23411              	.L2:
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else if (USARTx == USART2)
 23412              		.loc 1 188 0
 23413 0030 7A68     		ldr	r2, [r7, #4]
 23414 0032 4FF48843 		mov	r3, #17408
 23415 0036 C4F20003 		movt	r3, 16384
 23416 003a 9A42     		cmp	r2, r3
 23417 003c 0CD1     		bne	.L4
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 23418              		.loc 1 190 0
 23419 003e 4FF40030 		mov	r0, #131072
 23420 0042 4FF00101 		mov	r1, #1
 23421 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 23422              		.loc 1 191 0
 23423 004a 4FF40030 		mov	r0, #131072
 23424 004e 4FF00001 		mov	r1, #0
 23425 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 23426 0056 4EE0     		b	.L1
 23427              	.L4:
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else if (USARTx == USART3)
 23428              		.loc 1 193 0
 23429 0058 7A68     		ldr	r2, [r7, #4]
 23430 005a 4FF49043 		mov	r3, #18432
 23431 005e C4F20003 		movt	r3, 16384
 23432 0062 9A42     		cmp	r2, r3
 23433 0064 0CD1     		bne	.L5
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 23434              		.loc 1 195 0
 23435 0066 4FF48020 		mov	r0, #262144
 23436 006a 4FF00101 		mov	r1, #1
 23437 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 23438              		.loc 1 196 0
 23439 0072 4FF48020 		mov	r0, #262144
 23440 0076 4FF00001 		mov	r1, #0
 23441 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 23442 007e 3AE0     		b	.L1
 23443              	.L5:
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }    
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else if (USARTx == UART4)
 23444              		.loc 1 198 0
 23445 0080 7A68     		ldr	r2, [r7, #4]
 23446 0082 4FF49843 		mov	r3, #19456
 23447 0086 C4F20003 		movt	r3, 16384
 23448 008a 9A42     		cmp	r2, r3
 23449 008c 0CD1     		bne	.L6
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 23450              		.loc 1 200 0
 23451 008e 4FF40020 		mov	r0, #524288
 23452 0092 4FF00101 		mov	r1, #1
 23453 0096 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 23454              		.loc 1 201 0
 23455 009a 4FF40020 		mov	r0, #524288
 23456 009e 4FF00001 		mov	r1, #0
 23457 00a2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 23458 00a6 26E0     		b	.L1
 23459              	.L6:
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else if (USARTx == UART5)
 23460              		.loc 1 203 0
 23461 00a8 7A68     		ldr	r2, [r7, #4]
 23462 00aa 4FF4A043 		mov	r3, #20480
 23463 00ae C4F20003 		movt	r3, 16384
 23464 00b2 9A42     		cmp	r2, r3
 23465 00b4 0CD1     		bne	.L7
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 23466              		.loc 1 205 0
 23467 00b6 4FF48010 		mov	r0, #1048576
 23468 00ba 4FF00101 		mov	r1, #1
 23469 00be FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 23470              		.loc 1 206 0
 23471 00c2 4FF48010 		mov	r0, #1048576
 23472 00c6 4FF00001 		mov	r1, #0
 23473 00ca FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 23474 00ce 12E0     		b	.L1
 23475              	.L7:
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }     
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     if (USARTx == USART6)
 23476              		.loc 1 210 0
 23477 00d0 7A68     		ldr	r2, [r7, #4]
 23478 00d2 4FF4A053 		mov	r3, #5120
 23479 00d6 C4F20103 		movt	r3, 16385
 23480 00da 9A42     		cmp	r2, r3
 23481 00dc 0BD1     		bne	.L1
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     { 
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 23482              		.loc 1 212 0
 23483 00de 4FF02000 		mov	r0, #32
 23484 00e2 4FF00101 		mov	r1, #1
 23485 00e6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 23486              		.loc 1 213 0
 23487 00ea 4FF02000 		mov	r0, #32
 23488 00ee 4FF00001 		mov	r1, #0
 23489 00f2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 23490              	.L1:
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     }
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 23491              		.loc 1 216 0
 23492 00f6 07F10807 		add	r7, r7, #8
 23493 00fa BD46     		mov	sp, r7
 23494 00fc 80BD     		pop	{r7, pc}
 23495              		.cfi_endproc
 23496              	.LFE29:
 23498 00fe 00BF     		.align	2
 23499              		.global	USART_Init
 23500              		.thumb
 23501              		.thumb_func
 23503              	USART_Init:
 23504              	.LFB30:
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 23505              		.loc 1 228 0
 23506              		.cfi_startproc
 23507              		@ args = 0, pretend = 0, frame = 40
 23508              		@ frame_needed = 1, uses_anonymous_args = 0
 23509 0100 80B5     		push	{r7, lr}
 23510              	.LCFI3:
 23511              		.cfi_def_cfa_offset 8
 23512 0102 8AB0     		sub	sp, sp, #40
 23513              	.LCFI4:
 23514              		.cfi_def_cfa_offset 48
 23515 0104 00AF     		add	r7, sp, #0
 23516              		.cfi_offset 14, -4
 23517              		.cfi_offset 7, -8
 23518              	.LCFI5:
 23519              		.cfi_def_cfa_register 7
 23520 0106 7860     		str	r0, [r7, #4]
 23521 0108 3960     		str	r1, [r7, #0]
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 23522              		.loc 1 229 0
 23523 010a 4FF00003 		mov	r3, #0
 23524 010e 7B62     		str	r3, [r7, #36]
 23525 0110 4FF00003 		mov	r3, #0
 23526 0114 3B62     		str	r3, [r7, #32]
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   uint32_t integerdivider = 0x00;
 23527              		.loc 1 230 0
 23528 0116 4FF00003 		mov	r3, #0
 23529 011a FB61     		str	r3, [r7, #28]
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 23530              		.loc 1 231 0
 23531 011c 4FF00003 		mov	r3, #0
 23532 0120 BB61     		str	r3, [r7, #24]
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg = USARTx->CR2;
 23533              		.loc 1 250 0
 23534 0122 7B68     		ldr	r3, [r7, #4]
 23535 0124 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 23536 0126 9BB2     		uxth	r3, r3
 23537 0128 7B62     		str	r3, [r7, #36]
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 23538              		.loc 1 253 0
 23539 012a 7B6A     		ldr	r3, [r7, #36]
 23540 012c 23F44053 		bic	r3, r3, #12288
 23541 0130 7B62     		str	r3, [r7, #36]
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 23542              		.loc 1 257 0
 23543 0132 3B68     		ldr	r3, [r7, #0]
 23544 0134 DB88     		ldrh	r3, [r3, #6]
 23545 0136 7A6A     		ldr	r2, [r7, #36]
 23546 0138 42EA0303 		orr	r3, r2, r3
 23547 013c 7B62     		str	r3, [r7, #36]
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Write to USART CR2 */
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 23548              		.loc 1 260 0
 23549 013e 7B6A     		ldr	r3, [r7, #36]
 23550 0140 9AB2     		uxth	r2, r3
 23551 0142 7B68     		ldr	r3, [r7, #4]
 23552 0144 1A82     		strh	r2, [r3, #16]	@ movhi
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg = USARTx->CR1;
 23553              		.loc 1 263 0
 23554 0146 7B68     		ldr	r3, [r7, #4]
 23555 0148 9B89     		ldrh	r3, [r3, #12]	@ movhi
 23556 014a 9BB2     		uxth	r3, r3
 23557 014c 7B62     		str	r3, [r7, #36]
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 23558              		.loc 1 266 0
 23559 014e 7B6A     		ldr	r3, [r7, #36]
 23560 0150 23F4B053 		bic	r3, r3, #5632
 23561 0154 23F00C03 		bic	r3, r3, #12
 23562 0158 7B62     		str	r3, [r7, #36]
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 23563              		.loc 1 272 0
 23564 015a 3B68     		ldr	r3, [r7, #0]
 23565 015c 9A88     		ldrh	r2, [r3, #4]
 23566 015e 3B68     		ldr	r3, [r7, #0]
 23567 0160 1B89     		ldrh	r3, [r3, #8]
 23568 0162 42EA0303 		orr	r3, r2, r3
 23569 0166 9AB2     		uxth	r2, r3
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****             USART_InitStruct->USART_Mode;
 23570              		.loc 1 273 0
 23571 0168 3B68     		ldr	r3, [r7, #0]
 23572 016a 5B89     		ldrh	r3, [r3, #10]
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 23573              		.loc 1 272 0
 23574 016c 42EA0303 		orr	r3, r2, r3
 23575 0170 9BB2     		uxth	r3, r3
 23576 0172 7A6A     		ldr	r2, [r7, #36]
 23577 0174 42EA0303 		orr	r3, r2, r3
 23578 0178 7B62     		str	r3, [r7, #36]
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Write to USART CR1 */
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 23579              		.loc 1 276 0
 23580 017a 7B6A     		ldr	r3, [r7, #36]
 23581 017c 9AB2     		uxth	r2, r3
 23582 017e 7B68     		ldr	r3, [r7, #4]
 23583 0180 9A81     		strh	r2, [r3, #12]	@ movhi
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg = USARTx->CR3;
 23584              		.loc 1 279 0
 23585 0182 7B68     		ldr	r3, [r7, #4]
 23586 0184 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 23587 0186 9BB2     		uxth	r3, r3
 23588 0188 7B62     		str	r3, [r7, #36]
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 23589              		.loc 1 282 0
 23590 018a 7B6A     		ldr	r3, [r7, #36]
 23591 018c 23F44073 		bic	r3, r3, #768
 23592 0190 7B62     		str	r3, [r7, #36]
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Configure the USART HFC : 
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 23593              		.loc 1 286 0
 23594 0192 3B68     		ldr	r3, [r7, #0]
 23595 0194 9B89     		ldrh	r3, [r3, #12]
 23596 0196 7A6A     		ldr	r2, [r7, #36]
 23597 0198 42EA0303 		orr	r3, r2, r3
 23598 019c 7B62     		str	r3, [r7, #36]
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Write to USART CR3 */
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 23599              		.loc 1 289 0
 23600 019e 7B6A     		ldr	r3, [r7, #36]
 23601 01a0 9AB2     		uxth	r2, r3
 23602 01a2 7B68     		ldr	r3, [r7, #4]
 23603 01a4 9A82     		strh	r2, [r3, #20]	@ movhi
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Configure the USART Baud Rate */
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 23604              		.loc 1 293 0
 23605 01a6 07F10803 		add	r3, r7, #8
 23606 01aa 1846     		mov	r0, r3
 23607 01ac FFF7FEFF 		bl	RCC_GetClocksFreq
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 23608              		.loc 1 295 0
 23609 01b0 7A68     		ldr	r2, [r7, #4]
 23610 01b2 4FF48053 		mov	r3, #4096
 23611 01b6 C4F20103 		movt	r3, 16385
 23612 01ba 9A42     		cmp	r2, r3
 23613 01bc 06D0     		beq	.L9
 23614              		.loc 1 295 0 is_stmt 0 discriminator 1
 23615 01be 7A68     		ldr	r2, [r7, #4]
 23616 01c0 4FF4A053 		mov	r3, #5120
 23617 01c4 C4F20103 		movt	r3, 16385
 23618 01c8 9A42     		cmp	r2, r3
 23619 01ca 02D1     		bne	.L10
 23620              	.L9:
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 23621              		.loc 1 297 0 is_stmt 1
 23622 01cc 7B69     		ldr	r3, [r7, #20]
 23623 01ce 3B62     		str	r3, [r7, #32]
 23624 01d0 01E0     		b	.L11
 23625              	.L10:
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 23626              		.loc 1 301 0
 23627 01d2 3B69     		ldr	r3, [r7, #16]
 23628 01d4 3B62     		str	r3, [r7, #32]
 23629              	.L11:
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Determine the integer part */
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 23630              		.loc 1 305 0
 23631 01d6 7B68     		ldr	r3, [r7, #4]
 23632 01d8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 23633 01da 9BB2     		uxth	r3, r3
 23634 01dc 9BB2     		uxth	r3, r3
 23635 01de 1BB2     		sxth	r3, r3
 23636 01e0 002B     		cmp	r3, #0
 23637 01e2 0FDA     		bge	.L12
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 23638              		.loc 1 308 0
 23639 01e4 3A6A     		ldr	r2, [r7, #32]
 23640 01e6 1346     		mov	r3, r2
 23641 01e8 4FEA8303 		lsl	r3, r3, #2
 23642 01ec 1344     		add	r3, r3, r2
 23643 01ee 4FEA8302 		lsl	r2, r3, #2
 23644 01f2 1A44     		add	r2, r3, r2
 23645 01f4 3B68     		ldr	r3, [r7, #0]
 23646 01f6 1B68     		ldr	r3, [r3, #0]
 23647 01f8 4FEA4303 		lsl	r3, r3, #1
 23648 01fc B2FBF3F3 		udiv	r3, r2, r3
 23649 0200 FB61     		str	r3, [r7, #28]
 23650 0202 0EE0     		b	.L13
 23651              	.L12:
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 23652              		.loc 1 313 0
 23653 0204 3A6A     		ldr	r2, [r7, #32]
 23654 0206 1346     		mov	r3, r2
 23655 0208 4FEA8303 		lsl	r3, r3, #2
 23656 020c 1344     		add	r3, r3, r2
 23657 020e 4FEA8302 		lsl	r2, r3, #2
 23658 0212 1A44     		add	r2, r3, r2
 23659 0214 3B68     		ldr	r3, [r7, #0]
 23660 0216 1B68     		ldr	r3, [r3, #0]
 23661 0218 4FEA8303 		lsl	r3, r3, #2
 23662 021c B2FBF3F3 		udiv	r3, r2, r3
 23663 0220 FB61     		str	r3, [r7, #28]
 23664              	.L13:
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 23665              		.loc 1 315 0
 23666 0222 FA69     		ldr	r2, [r7, #28]
 23667 0224 48F21F53 		movw	r3, #34079
 23668 0228 C5F2EB13 		movt	r3, 20971
 23669 022c A3FB0213 		umull	r1, r3, r3, r2
 23670 0230 4FEA5313 		lsr	r3, r3, #5
 23671 0234 4FEA0313 		lsl	r3, r3, #4
 23672 0238 7B62     		str	r3, [r7, #36]
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Determine the fractional part */
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 23673              		.loc 1 318 0
 23674 023a 7B6A     		ldr	r3, [r7, #36]
 23675 023c 4FEA1313 		lsr	r3, r3, #4
 23676 0240 4FF06402 		mov	r2, #100
 23677 0244 02FB03F3 		mul	r3, r2, r3
 23678 0248 FA69     		ldr	r2, [r7, #28]
 23679 024a C3EB0203 		rsb	r3, r3, r2
 23680 024e BB61     		str	r3, [r7, #24]
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Implement the fractional part in the register */
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 23681              		.loc 1 321 0
 23682 0250 7B68     		ldr	r3, [r7, #4]
 23683 0252 9B89     		ldrh	r3, [r3, #12]	@ movhi
 23684 0254 9BB2     		uxth	r3, r3
 23685 0256 9BB2     		uxth	r3, r3
 23686 0258 1BB2     		sxth	r3, r3
 23687 025a 002B     		cmp	r3, #0
 23688 025c 13DA     		bge	.L14
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 23689              		.loc 1 323 0
 23690 025e BB69     		ldr	r3, [r7, #24]
 23691 0260 4FEAC303 		lsl	r3, r3, #3
 23692 0264 03F13202 		add	r2, r3, #50
 23693 0268 48F21F53 		movw	r3, #34079
 23694 026c C5F2EB13 		movt	r3, 20971
 23695 0270 A3FB0213 		umull	r1, r3, r3, r2
 23696 0274 4FEA5313 		lsr	r3, r3, #5
 23697 0278 03F00703 		and	r3, r3, #7
 23698 027c 7A6A     		ldr	r2, [r7, #36]
 23699 027e 42EA0303 		orr	r3, r2, r3
 23700 0282 7B62     		str	r3, [r7, #36]
 23701 0284 12E0     		b	.L15
 23702              	.L14:
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 23703              		.loc 1 327 0
 23704 0286 BB69     		ldr	r3, [r7, #24]
 23705 0288 4FEA0313 		lsl	r3, r3, #4
 23706 028c 03F13202 		add	r2, r3, #50
 23707 0290 48F21F53 		movw	r3, #34079
 23708 0294 C5F2EB13 		movt	r3, 20971
 23709 0298 A3FB0213 		umull	r1, r3, r3, r2
 23710 029c 4FEA5313 		lsr	r3, r3, #5
 23711 02a0 03F00F03 		and	r3, r3, #15
 23712 02a4 7A6A     		ldr	r2, [r7, #36]
 23713 02a6 42EA0303 		orr	r3, r2, r3
 23714 02aa 7B62     		str	r3, [r7, #36]
 23715              	.L15:
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Write to USART BRR register */
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 23716              		.loc 1 331 0
 23717 02ac 7B6A     		ldr	r3, [r7, #36]
 23718 02ae 9AB2     		uxth	r2, r3
 23719 02b0 7B68     		ldr	r3, [r7, #4]
 23720 02b2 1A81     		strh	r2, [r3, #8]	@ movhi
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 23721              		.loc 1 332 0
 23722 02b4 07F12807 		add	r7, r7, #40
 23723 02b8 BD46     		mov	sp, r7
 23724 02ba 80BD     		pop	{r7, pc}
 23725              		.cfi_endproc
 23726              	.LFE30:
 23728              		.align	2
 23729              		.global	USART_StructInit
 23730              		.thumb
 23731              		.thumb_func
 23733              	USART_StructInit:
 23734              	.LFB31:
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         be initialized.
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 23735              		.loc 1 341 0
 23736              		.cfi_startproc
 23737              		@ args = 0, pretend = 0, frame = 8
 23738              		@ frame_needed = 1, uses_anonymous_args = 0
 23739              		@ link register save eliminated.
 23740 02bc 80B4     		push	{r7}
 23741              	.LCFI6:
 23742              		.cfi_def_cfa_offset 4
 23743 02be 83B0     		sub	sp, sp, #12
 23744              	.LCFI7:
 23745              		.cfi_def_cfa_offset 16
 23746 02c0 00AF     		add	r7, sp, #0
 23747              		.cfi_offset 7, -4
 23748              	.LCFI8:
 23749              		.cfi_def_cfa_register 7
 23750 02c2 7860     		str	r0, [r7, #4]
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* USART_InitStruct members default value */
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 23751              		.loc 1 343 0
 23752 02c4 7B68     		ldr	r3, [r7, #4]
 23753 02c6 4FF41652 		mov	r2, #9600
 23754 02ca 1A60     		str	r2, [r3, #0]
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 23755              		.loc 1 344 0
 23756 02cc 7B68     		ldr	r3, [r7, #4]
 23757 02ce 4FF00002 		mov	r2, #0
 23758 02d2 9A80     		strh	r2, [r3, #4]	@ movhi
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 23759              		.loc 1 345 0
 23760 02d4 7B68     		ldr	r3, [r7, #4]
 23761 02d6 4FF00002 		mov	r2, #0
 23762 02da DA80     		strh	r2, [r3, #6]	@ movhi
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 23763              		.loc 1 346 0
 23764 02dc 7B68     		ldr	r3, [r7, #4]
 23765 02de 4FF00002 		mov	r2, #0
 23766 02e2 1A81     		strh	r2, [r3, #8]	@ movhi
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 23767              		.loc 1 347 0
 23768 02e4 7B68     		ldr	r3, [r7, #4]
 23769 02e6 4FF00C02 		mov	r2, #12
 23770 02ea 5A81     		strh	r2, [r3, #10]	@ movhi
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 23771              		.loc 1 348 0
 23772 02ec 7B68     		ldr	r3, [r7, #4]
 23773 02ee 4FF00002 		mov	r2, #0
 23774 02f2 9A81     		strh	r2, [r3, #12]	@ movhi
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 23775              		.loc 1 349 0
 23776 02f4 07F10C07 		add	r7, r7, #12
 23777 02f8 BD46     		mov	sp, r7
 23778 02fa 80BC     		pop	{r7}
 23779 02fc 7047     		bx	lr
 23780              		.cfi_endproc
 23781              	.LFE31:
 23783 02fe 00BF     		.align	2
 23784              		.global	USART_ClockInit
 23785              		.thumb
 23786              		.thumb_func
 23788              	USART_ClockInit:
 23789              	.LFB32:
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 23790              		.loc 1 361 0
 23791              		.cfi_startproc
 23792              		@ args = 0, pretend = 0, frame = 16
 23793              		@ frame_needed = 1, uses_anonymous_args = 0
 23794              		@ link register save eliminated.
 23795 0300 80B4     		push	{r7}
 23796              	.LCFI9:
 23797              		.cfi_def_cfa_offset 4
 23798 0302 85B0     		sub	sp, sp, #20
 23799              	.LCFI10:
 23800              		.cfi_def_cfa_offset 24
 23801 0304 00AF     		add	r7, sp, #0
 23802              		.cfi_offset 7, -4
 23803              	.LCFI11:
 23804              		.cfi_def_cfa_register 7
 23805 0306 7860     		str	r0, [r7, #4]
 23806 0308 3960     		str	r1, [r7, #0]
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   uint32_t tmpreg = 0x00;
 23807              		.loc 1 362 0
 23808 030a 4FF00003 		mov	r3, #0
 23809 030e FB60     		str	r3, [r7, #12]
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg = USARTx->CR2;
 23810              		.loc 1 371 0
 23811 0310 7B68     		ldr	r3, [r7, #4]
 23812 0312 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 23813 0314 9BB2     		uxth	r3, r3
 23814 0316 FB60     		str	r3, [r7, #12]
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 23815              		.loc 1 373 0
 23816 0318 FB68     		ldr	r3, [r7, #12]
 23817 031a 23F47063 		bic	r3, r3, #3840
 23818 031e FB60     		str	r3, [r7, #12]
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 23819              		.loc 1 379 0
 23820 0320 3B68     		ldr	r3, [r7, #0]
 23821 0322 1A88     		ldrh	r2, [r3, #0]
 23822 0324 3B68     		ldr	r3, [r7, #0]
 23823 0326 5B88     		ldrh	r3, [r3, #2]
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 23824              		.loc 1 380 0
 23825 0328 42EA0303 		orr	r3, r2, r3
 23826 032c 9AB2     		uxth	r2, r3
 23827 032e 3B68     		ldr	r3, [r7, #0]
 23828 0330 9B88     		ldrh	r3, [r3, #4]
 23829 0332 42EA0303 		orr	r3, r2, r3
 23830 0336 9AB2     		uxth	r2, r3
 23831 0338 3B68     		ldr	r3, [r7, #0]
 23832 033a DB88     		ldrh	r3, [r3, #6]
 23833 033c 42EA0303 		orr	r3, r2, r3
 23834 0340 9BB2     		uxth	r3, r3
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 23835              		.loc 1 379 0
 23836 0342 FA68     		ldr	r2, [r7, #12]
 23837 0344 42EA0303 		orr	r3, r2, r3
 23838 0348 FB60     		str	r3, [r7, #12]
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Write to USART CR2 */
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 23839              		.loc 1 382 0
 23840 034a FB68     		ldr	r3, [r7, #12]
 23841 034c 9AB2     		uxth	r2, r3
 23842 034e 7B68     		ldr	r3, [r7, #4]
 23843 0350 1A82     		strh	r2, [r3, #16]	@ movhi
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 23844              		.loc 1 383 0
 23845 0352 07F11407 		add	r7, r7, #20
 23846 0356 BD46     		mov	sp, r7
 23847 0358 80BC     		pop	{r7}
 23848 035a 7047     		bx	lr
 23849              		.cfi_endproc
 23850              	.LFE32:
 23852              		.align	2
 23853              		.global	USART_ClockStructInit
 23854              		.thumb
 23855              		.thumb_func
 23857              	USART_ClockStructInit:
 23858              	.LFB33:
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         which will be initialized.
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 23859              		.loc 1 392 0
 23860              		.cfi_startproc
 23861              		@ args = 0, pretend = 0, frame = 8
 23862              		@ frame_needed = 1, uses_anonymous_args = 0
 23863              		@ link register save eliminated.
 23864 035c 80B4     		push	{r7}
 23865              	.LCFI12:
 23866              		.cfi_def_cfa_offset 4
 23867 035e 83B0     		sub	sp, sp, #12
 23868              	.LCFI13:
 23869              		.cfi_def_cfa_offset 16
 23870 0360 00AF     		add	r7, sp, #0
 23871              		.cfi_offset 7, -4
 23872              	.LCFI14:
 23873              		.cfi_def_cfa_register 7
 23874 0362 7860     		str	r0, [r7, #4]
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 23875              		.loc 1 394 0
 23876 0364 7B68     		ldr	r3, [r7, #4]
 23877 0366 4FF00002 		mov	r2, #0
 23878 036a 1A80     		strh	r2, [r3, #0]	@ movhi
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 23879              		.loc 1 395 0
 23880 036c 7B68     		ldr	r3, [r7, #4]
 23881 036e 4FF00002 		mov	r2, #0
 23882 0372 5A80     		strh	r2, [r3, #2]	@ movhi
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 23883              		.loc 1 396 0
 23884 0374 7B68     		ldr	r3, [r7, #4]
 23885 0376 4FF00002 		mov	r2, #0
 23886 037a 9A80     		strh	r2, [r3, #4]	@ movhi
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 23887              		.loc 1 397 0
 23888 037c 7B68     		ldr	r3, [r7, #4]
 23889 037e 4FF00002 		mov	r2, #0
 23890 0382 DA80     		strh	r2, [r3, #6]	@ movhi
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 23891              		.loc 1 398 0
 23892 0384 07F10C07 		add	r7, r7, #12
 23893 0388 BD46     		mov	sp, r7
 23894 038a 80BC     		pop	{r7}
 23895 038c 7047     		bx	lr
 23896              		.cfi_endproc
 23897              	.LFE33:
 23899 038e 00BF     		.align	2
 23900              		.global	USART_Cmd
 23901              		.thumb
 23902              		.thumb_func
 23904              	USART_Cmd:
 23905              	.LFB34:
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 23906              		.loc 1 409 0
 23907              		.cfi_startproc
 23908              		@ args = 0, pretend = 0, frame = 8
 23909              		@ frame_needed = 1, uses_anonymous_args = 0
 23910              		@ link register save eliminated.
 23911 0390 80B4     		push	{r7}
 23912              	.LCFI15:
 23913              		.cfi_def_cfa_offset 4
 23914 0392 83B0     		sub	sp, sp, #12
 23915              	.LCFI16:
 23916              		.cfi_def_cfa_offset 16
 23917 0394 00AF     		add	r7, sp, #0
 23918              		.cfi_offset 7, -4
 23919              	.LCFI17:
 23920              		.cfi_def_cfa_register 7
 23921 0396 7860     		str	r0, [r7, #4]
 23922 0398 0B46     		mov	r3, r1
 23923 039a FB70     		strb	r3, [r7, #3]
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 23924              		.loc 1 414 0
 23925 039c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23926 039e 002B     		cmp	r3, #0
 23927 03a0 08D0     		beq	.L20
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 23928              		.loc 1 417 0
 23929 03a2 7B68     		ldr	r3, [r7, #4]
 23930 03a4 9B89     		ldrh	r3, [r3, #12]	@ movhi
 23931 03a6 9BB2     		uxth	r3, r3
 23932 03a8 43F40053 		orr	r3, r3, #8192
 23933 03ac 9AB2     		uxth	r2, r3
 23934 03ae 7B68     		ldr	r3, [r7, #4]
 23935 03b0 9A81     		strh	r2, [r3, #12]	@ movhi
 23936 03b2 07E0     		b	.L19
 23937              	.L20:
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 23938              		.loc 1 422 0
 23939 03b4 7B68     		ldr	r3, [r7, #4]
 23940 03b6 9B89     		ldrh	r3, [r3, #12]	@ movhi
 23941 03b8 9BB2     		uxth	r3, r3
 23942 03ba 23F40053 		bic	r3, r3, #8192
 23943 03be 9AB2     		uxth	r2, r3
 23944 03c0 7B68     		ldr	r3, [r7, #4]
 23945 03c2 9A81     		strh	r2, [r3, #12]	@ movhi
 23946              	.L19:
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 23947              		.loc 1 424 0
 23948 03c4 07F10C07 		add	r7, r7, #12
 23949 03c8 BD46     		mov	sp, r7
 23950 03ca 80BC     		pop	{r7}
 23951 03cc 7047     		bx	lr
 23952              		.cfi_endproc
 23953              	.LFE34:
 23955 03ce 00BF     		.align	2
 23956              		.global	USART_SetPrescaler
 23957              		.thumb
 23958              		.thumb_func
 23960              	USART_SetPrescaler:
 23961              	.LFB35:
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** { 
 23962              		.loc 1 435 0
 23963              		.cfi_startproc
 23964              		@ args = 0, pretend = 0, frame = 8
 23965              		@ frame_needed = 1, uses_anonymous_args = 0
 23966              		@ link register save eliminated.
 23967 03d0 80B4     		push	{r7}
 23968              	.LCFI18:
 23969              		.cfi_def_cfa_offset 4
 23970 03d2 83B0     		sub	sp, sp, #12
 23971              	.LCFI19:
 23972              		.cfi_def_cfa_offset 16
 23973 03d4 00AF     		add	r7, sp, #0
 23974              		.cfi_offset 7, -4
 23975              	.LCFI20:
 23976              		.cfi_def_cfa_register 7
 23977 03d6 7860     		str	r0, [r7, #4]
 23978 03d8 0B46     		mov	r3, r1
 23979 03da FB70     		strb	r3, [r7, #3]
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Clear the USART prescaler */
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 23980              		.loc 1 440 0
 23981 03dc 7B68     		ldr	r3, [r7, #4]
 23982 03de 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 23983 03e0 9BB2     		uxth	r3, r3
 23984 03e2 23F0FF03 		bic	r3, r3, #255
 23985 03e6 9AB2     		uxth	r2, r3
 23986 03e8 7B68     		ldr	r3, [r7, #4]
 23987 03ea 1A83     		strh	r2, [r3, #24]	@ movhi
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Set the USART prescaler */
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 23988              		.loc 1 442 0
 23989 03ec 7B68     		ldr	r3, [r7, #4]
 23990 03ee 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 23991 03f0 9AB2     		uxth	r2, r3
 23992 03f2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23993 03f4 9BB2     		uxth	r3, r3
 23994 03f6 42EA0303 		orr	r3, r2, r3
 23995 03fa 9AB2     		uxth	r2, r3
 23996 03fc 7B68     		ldr	r3, [r7, #4]
 23997 03fe 1A83     		strh	r2, [r3, #24]	@ movhi
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 23998              		.loc 1 443 0
 23999 0400 07F10C07 		add	r7, r7, #12
 24000 0404 BD46     		mov	sp, r7
 24001 0406 80BC     		pop	{r7}
 24002 0408 7047     		bx	lr
 24003              		.cfi_endproc
 24004              	.LFE35:
 24006 040a 00BF     		.align	2
 24007              		.global	USART_OverSampling8Cmd
 24008              		.thumb
 24009              		.thumb_func
 24011              	USART_OverSampling8Cmd:
 24012              	.LFB36:
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24013              		.loc 1 456 0
 24014              		.cfi_startproc
 24015              		@ args = 0, pretend = 0, frame = 8
 24016              		@ frame_needed = 1, uses_anonymous_args = 0
 24017              		@ link register save eliminated.
 24018 040c 80B4     		push	{r7}
 24019              	.LCFI21:
 24020              		.cfi_def_cfa_offset 4
 24021 040e 83B0     		sub	sp, sp, #12
 24022              	.LCFI22:
 24023              		.cfi_def_cfa_offset 16
 24024 0410 00AF     		add	r7, sp, #0
 24025              		.cfi_offset 7, -4
 24026              	.LCFI23:
 24027              		.cfi_def_cfa_register 7
 24028 0412 7860     		str	r0, [r7, #4]
 24029 0414 0B46     		mov	r3, r1
 24030 0416 FB70     		strb	r3, [r7, #3]
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24031              		.loc 1 461 0
 24032 0418 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24033 041a 002B     		cmp	r3, #0
 24034 041c 0AD0     		beq	.L24
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 24035              		.loc 1 464 0
 24036 041e 7B68     		ldr	r3, [r7, #4]
 24037 0420 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24038 0422 9BB2     		uxth	r3, r3
 24039 0424 6FEA4343 		mvn	r3, r3, lsl #17
 24040 0428 6FEA5343 		mvn	r3, r3, lsr #17
 24041 042c 9AB2     		uxth	r2, r3
 24042 042e 7B68     		ldr	r3, [r7, #4]
 24043 0430 9A81     		strh	r2, [r3, #12]	@ movhi
 24044 0432 09E0     		b	.L23
 24045              	.L24:
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 24046              		.loc 1 469 0
 24047 0434 7B68     		ldr	r3, [r7, #4]
 24048 0436 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24049 0438 9BB2     		uxth	r3, r3
 24050 043a 4FEA4343 		lsl	r3, r3, #17
 24051 043e 4FEA5343 		lsr	r3, r3, #17
 24052 0442 9AB2     		uxth	r2, r3
 24053 0444 7B68     		ldr	r3, [r7, #4]
 24054 0446 9A81     		strh	r2, [r3, #12]	@ movhi
 24055              	.L23:
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }  
 24056              		.loc 1 471 0
 24057 0448 07F10C07 		add	r7, r7, #12
 24058 044c BD46     		mov	sp, r7
 24059 044e 80BC     		pop	{r7}
 24060 0450 7047     		bx	lr
 24061              		.cfi_endproc
 24062              	.LFE36:
 24064 0452 00BF     		.align	2
 24065              		.global	USART_OneBitMethodCmd
 24066              		.thumb
 24067              		.thumb_func
 24069              	USART_OneBitMethodCmd:
 24070              	.LFB37:
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24071              		.loc 1 482 0
 24072              		.cfi_startproc
 24073              		@ args = 0, pretend = 0, frame = 8
 24074              		@ frame_needed = 1, uses_anonymous_args = 0
 24075              		@ link register save eliminated.
 24076 0454 80B4     		push	{r7}
 24077              	.LCFI24:
 24078              		.cfi_def_cfa_offset 4
 24079 0456 83B0     		sub	sp, sp, #12
 24080              	.LCFI25:
 24081              		.cfi_def_cfa_offset 16
 24082 0458 00AF     		add	r7, sp, #0
 24083              		.cfi_offset 7, -4
 24084              	.LCFI26:
 24085              		.cfi_def_cfa_register 7
 24086 045a 7860     		str	r0, [r7, #4]
 24087 045c 0B46     		mov	r3, r1
 24088 045e FB70     		strb	r3, [r7, #3]
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24089              		.loc 1 487 0
 24090 0460 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24091 0462 002B     		cmp	r3, #0
 24092 0464 08D0     		beq	.L27
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 24093              		.loc 1 490 0
 24094 0466 7B68     		ldr	r3, [r7, #4]
 24095 0468 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24096 046a 9BB2     		uxth	r3, r3
 24097 046c 43F40063 		orr	r3, r3, #2048
 24098 0470 9AB2     		uxth	r2, r3
 24099 0472 7B68     		ldr	r3, [r7, #4]
 24100 0474 9A82     		strh	r2, [r3, #20]	@ movhi
 24101 0476 07E0     		b	.L26
 24102              	.L27:
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 24103              		.loc 1 495 0
 24104 0478 7B68     		ldr	r3, [r7, #4]
 24105 047a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24106 047c 9BB2     		uxth	r3, r3
 24107 047e 23F40063 		bic	r3, r3, #2048
 24108 0482 9AB2     		uxth	r2, r3
 24109 0484 7B68     		ldr	r3, [r7, #4]
 24110 0486 9A82     		strh	r2, [r3, #20]	@ movhi
 24111              	.L26:
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24112              		.loc 1 497 0
 24113 0488 07F10C07 		add	r7, r7, #12
 24114 048c BD46     		mov	sp, r7
 24115 048e 80BC     		pop	{r7}
 24116 0490 7047     		bx	lr
 24117              		.cfi_endproc
 24118              	.LFE37:
 24120 0492 00BF     		.align	2
 24121              		.global	USART_SendData
 24122              		.thumb
 24123              		.thumb_func
 24125              	USART_SendData:
 24126              	.LFB38:
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @}
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   Data transfers functions 
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                             Data transfers functions
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   transfers.
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   between the internal bus and the received shift register.
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   at the end of the current transmission.
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   TDR buffer.
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  Data: the data to transmit.
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24127              		.loc 1 539 0
 24128              		.cfi_startproc
 24129              		@ args = 0, pretend = 0, frame = 8
 24130              		@ frame_needed = 1, uses_anonymous_args = 0
 24131              		@ link register save eliminated.
 24132 0494 80B4     		push	{r7}
 24133              	.LCFI27:
 24134              		.cfi_def_cfa_offset 4
 24135 0496 83B0     		sub	sp, sp, #12
 24136              	.LCFI28:
 24137              		.cfi_def_cfa_offset 16
 24138 0498 00AF     		add	r7, sp, #0
 24139              		.cfi_offset 7, -4
 24140              	.LCFI29:
 24141              		.cfi_def_cfa_register 7
 24142 049a 7860     		str	r0, [r7, #4]
 24143 049c 0B46     		mov	r3, r1
 24144 049e 7B80     		strh	r3, [r7, #2]	@ movhi
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Transmit Data */
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 24145              		.loc 1 545 0
 24146 04a0 7B88     		ldrh	r3, [r7, #2]	@ movhi
 24147 04a2 4FEAC353 		lsl	r3, r3, #23
 24148 04a6 4FEAD353 		lsr	r3, r3, #23
 24149 04aa 9AB2     		uxth	r2, r3
 24150 04ac 7B68     		ldr	r3, [r7, #4]
 24151 04ae 9A80     		strh	r2, [r3, #4]	@ movhi
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24152              		.loc 1 546 0
 24153 04b0 07F10C07 		add	r7, r7, #12
 24154 04b4 BD46     		mov	sp, r7
 24155 04b6 80BC     		pop	{r7}
 24156 04b8 7047     		bx	lr
 24157              		.cfi_endproc
 24158              	.LFE38:
 24160 04ba 00BF     		.align	2
 24161              		.global	USART_ReceiveData
 24162              		.thumb
 24163              		.thumb_func
 24165              	USART_ReceiveData:
 24166              	.LFB39:
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval The received data.
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24167              		.loc 1 555 0
 24168              		.cfi_startproc
 24169              		@ args = 0, pretend = 0, frame = 8
 24170              		@ frame_needed = 1, uses_anonymous_args = 0
 24171              		@ link register save eliminated.
 24172 04bc 80B4     		push	{r7}
 24173              	.LCFI30:
 24174              		.cfi_def_cfa_offset 4
 24175 04be 83B0     		sub	sp, sp, #12
 24176              	.LCFI31:
 24177              		.cfi_def_cfa_offset 16
 24178 04c0 00AF     		add	r7, sp, #0
 24179              		.cfi_offset 7, -4
 24180              	.LCFI32:
 24181              		.cfi_def_cfa_register 7
 24182 04c2 7860     		str	r0, [r7, #4]
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Receive Data */
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 24183              		.loc 1 560 0
 24184 04c4 7B68     		ldr	r3, [r7, #4]
 24185 04c6 9B88     		ldrh	r3, [r3, #4]	@ movhi
 24186 04c8 9BB2     		uxth	r3, r3
 24187 04ca 4FEAC353 		lsl	r3, r3, #23
 24188 04ce 4FEAD353 		lsr	r3, r3, #23
 24189 04d2 9BB2     		uxth	r3, r3
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24190              		.loc 1 561 0
 24191 04d4 1846     		mov	r0, r3
 24192 04d6 07F10C07 		add	r7, r7, #12
 24193 04da BD46     		mov	sp, r7
 24194 04dc 80BC     		pop	{r7}
 24195 04de 7047     		bx	lr
 24196              		.cfi_endproc
 24197              	.LFE39:
 24199              		.align	2
 24200              		.global	USART_SetAddress
 24201              		.thumb
 24202              		.thumb_func
 24204              	USART_SetAddress:
 24205              	.LFB40:
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @}
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                     Multi-Processor Communication functions
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   multiprocessor communication.
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         function.
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24206              		.loc 1 606 0
 24207              		.cfi_startproc
 24208              		@ args = 0, pretend = 0, frame = 8
 24209              		@ frame_needed = 1, uses_anonymous_args = 0
 24210              		@ link register save eliminated.
 24211 04e0 80B4     		push	{r7}
 24212              	.LCFI33:
 24213              		.cfi_def_cfa_offset 4
 24214 04e2 83B0     		sub	sp, sp, #12
 24215              	.LCFI34:
 24216              		.cfi_def_cfa_offset 16
 24217 04e4 00AF     		add	r7, sp, #0
 24218              		.cfi_offset 7, -4
 24219              	.LCFI35:
 24220              		.cfi_def_cfa_register 7
 24221 04e6 7860     		str	r0, [r7, #4]
 24222 04e8 0B46     		mov	r3, r1
 24223 04ea FB70     		strb	r3, [r7, #3]
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Clear the USART address */
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 24224              		.loc 1 612 0
 24225 04ec 7B68     		ldr	r3, [r7, #4]
 24226 04ee 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24227 04f0 9BB2     		uxth	r3, r3
 24228 04f2 23F00F03 		bic	r3, r3, #15
 24229 04f6 9AB2     		uxth	r2, r3
 24230 04f8 7B68     		ldr	r3, [r7, #4]
 24231 04fa 1A82     		strh	r2, [r3, #16]	@ movhi
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Set the USART address node */
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR2 |= USART_Address;
 24232              		.loc 1 614 0
 24233 04fc 7B68     		ldr	r3, [r7, #4]
 24234 04fe 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24235 0500 9AB2     		uxth	r2, r3
 24236 0502 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24237 0504 9BB2     		uxth	r3, r3
 24238 0506 42EA0303 		orr	r3, r2, r3
 24239 050a 9AB2     		uxth	r2, r3
 24240 050c 7B68     		ldr	r3, [r7, #4]
 24241 050e 1A82     		strh	r2, [r3, #16]	@ movhi
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24242              		.loc 1 615 0
 24243 0510 07F10C07 		add	r7, r7, #12
 24244 0514 BD46     		mov	sp, r7
 24245 0516 80BC     		pop	{r7}
 24246 0518 7047     		bx	lr
 24247              		.cfi_endproc
 24248              	.LFE40:
 24250 051a 00BF     		.align	2
 24251              		.global	USART_ReceiverWakeUpCmd
 24252              		.thumb
 24253              		.thumb_func
 24255              	USART_ReceiverWakeUpCmd:
 24256              	.LFB41:
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24257              		.loc 1 626 0
 24258              		.cfi_startproc
 24259              		@ args = 0, pretend = 0, frame = 8
 24260              		@ frame_needed = 1, uses_anonymous_args = 0
 24261              		@ link register save eliminated.
 24262 051c 80B4     		push	{r7}
 24263              	.LCFI36:
 24264              		.cfi_def_cfa_offset 4
 24265 051e 83B0     		sub	sp, sp, #12
 24266              	.LCFI37:
 24267              		.cfi_def_cfa_offset 16
 24268 0520 00AF     		add	r7, sp, #0
 24269              		.cfi_offset 7, -4
 24270              	.LCFI38:
 24271              		.cfi_def_cfa_register 7
 24272 0522 7860     		str	r0, [r7, #4]
 24273 0524 0B46     		mov	r3, r1
 24274 0526 FB70     		strb	r3, [r7, #3]
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24275              		.loc 1 631 0
 24276 0528 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24277 052a 002B     		cmp	r3, #0
 24278 052c 08D0     		beq	.L33
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 24279              		.loc 1 634 0
 24280 052e 7B68     		ldr	r3, [r7, #4]
 24281 0530 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24282 0532 9BB2     		uxth	r3, r3
 24283 0534 43F00203 		orr	r3, r3, #2
 24284 0538 9AB2     		uxth	r2, r3
 24285 053a 7B68     		ldr	r3, [r7, #4]
 24286 053c 9A81     		strh	r2, [r3, #12]	@ movhi
 24287 053e 07E0     		b	.L32
 24288              	.L33:
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 24289              		.loc 1 639 0
 24290 0540 7B68     		ldr	r3, [r7, #4]
 24291 0542 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24292 0544 9BB2     		uxth	r3, r3
 24293 0546 23F00203 		bic	r3, r3, #2
 24294 054a 9AB2     		uxth	r2, r3
 24295 054c 7B68     		ldr	r3, [r7, #4]
 24296 054e 9A81     		strh	r2, [r3, #12]	@ movhi
 24297              	.L32:
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24298              		.loc 1 641 0
 24299 0550 07F10C07 		add	r7, r7, #12
 24300 0554 BD46     		mov	sp, r7
 24301 0556 80BC     		pop	{r7}
 24302 0558 7047     		bx	lr
 24303              		.cfi_endproc
 24304              	.LFE41:
 24306 055a 00BF     		.align	2
 24307              		.global	USART_WakeUpConfig
 24308              		.thumb
 24309              		.thumb_func
 24311              	USART_WakeUpConfig:
 24312              	.LFB42:
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24313              		.loc 1 653 0
 24314              		.cfi_startproc
 24315              		@ args = 0, pretend = 0, frame = 8
 24316              		@ frame_needed = 1, uses_anonymous_args = 0
 24317              		@ link register save eliminated.
 24318 055c 80B4     		push	{r7}
 24319              	.LCFI39:
 24320              		.cfi_def_cfa_offset 4
 24321 055e 83B0     		sub	sp, sp, #12
 24322              	.LCFI40:
 24323              		.cfi_def_cfa_offset 16
 24324 0560 00AF     		add	r7, sp, #0
 24325              		.cfi_offset 7, -4
 24326              	.LCFI41:
 24327              		.cfi_def_cfa_register 7
 24328 0562 7860     		str	r0, [r7, #4]
 24329 0564 0B46     		mov	r3, r1
 24330 0566 7B80     		strh	r3, [r7, #2]	@ movhi
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 24331              		.loc 1 658 0
 24332 0568 7B68     		ldr	r3, [r7, #4]
 24333 056a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24334 056c 9BB2     		uxth	r3, r3
 24335 056e 23F40063 		bic	r3, r3, #2048
 24336 0572 9AB2     		uxth	r2, r3
 24337 0574 7B68     		ldr	r3, [r7, #4]
 24338 0576 9A81     		strh	r2, [r3, #12]	@ movhi
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 24339              		.loc 1 659 0
 24340 0578 7B68     		ldr	r3, [r7, #4]
 24341 057a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24342 057c 9AB2     		uxth	r2, r3
 24343 057e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 24344 0580 42EA0303 		orr	r3, r2, r3
 24345 0584 9AB2     		uxth	r2, r3
 24346 0586 7B68     		ldr	r3, [r7, #4]
 24347 0588 9A81     		strh	r2, [r3, #12]	@ movhi
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24348              		.loc 1 660 0
 24349 058a 07F10C07 		add	r7, r7, #12
 24350 058e BD46     		mov	sp, r7
 24351 0590 80BC     		pop	{r7}
 24352 0592 7047     		bx	lr
 24353              		.cfi_endproc
 24354              	.LFE42:
 24356              		.align	2
 24357              		.global	USART_LINBreakDetectLengthConfig
 24358              		.thumb
 24359              		.thumb_func
 24361              	USART_LINBreakDetectLengthConfig:
 24362              	.LFB43:
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @}
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   LIN mode functions 
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                                 LIN mode functions
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Mode communication.
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   the LIN standard.
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         the USART_Init() function.
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         the USART_Init() function.
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         function.
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24363              		.loc 1 722 0
 24364              		.cfi_startproc
 24365              		@ args = 0, pretend = 0, frame = 8
 24366              		@ frame_needed = 1, uses_anonymous_args = 0
 24367              		@ link register save eliminated.
 24368 0594 80B4     		push	{r7}
 24369              	.LCFI42:
 24370              		.cfi_def_cfa_offset 4
 24371 0596 83B0     		sub	sp, sp, #12
 24372              	.LCFI43:
 24373              		.cfi_def_cfa_offset 16
 24374 0598 00AF     		add	r7, sp, #0
 24375              		.cfi_offset 7, -4
 24376              	.LCFI44:
 24377              		.cfi_def_cfa_register 7
 24378 059a 7860     		str	r0, [r7, #4]
 24379 059c 0B46     		mov	r3, r1
 24380 059e 7B80     		strh	r3, [r7, #2]	@ movhi
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 24381              		.loc 1 727 0
 24382 05a0 7B68     		ldr	r3, [r7, #4]
 24383 05a2 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24384 05a4 9BB2     		uxth	r3, r3
 24385 05a6 23F02003 		bic	r3, r3, #32
 24386 05aa 9AB2     		uxth	r2, r3
 24387 05ac 7B68     		ldr	r3, [r7, #4]
 24388 05ae 1A82     		strh	r2, [r3, #16]	@ movhi
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 24389              		.loc 1 728 0
 24390 05b0 7B68     		ldr	r3, [r7, #4]
 24391 05b2 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24392 05b4 9AB2     		uxth	r2, r3
 24393 05b6 7B88     		ldrh	r3, [r7, #2]	@ movhi
 24394 05b8 42EA0303 		orr	r3, r2, r3
 24395 05bc 9AB2     		uxth	r2, r3
 24396 05be 7B68     		ldr	r3, [r7, #4]
 24397 05c0 1A82     		strh	r2, [r3, #16]	@ movhi
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24398              		.loc 1 729 0
 24399 05c2 07F10C07 		add	r7, r7, #12
 24400 05c6 BD46     		mov	sp, r7
 24401 05c8 80BC     		pop	{r7}
 24402 05ca 7047     		bx	lr
 24403              		.cfi_endproc
 24404              	.LFE43:
 24406              		.align	2
 24407              		.global	USART_LINCmd
 24408              		.thumb
 24409              		.thumb_func
 24411              	USART_LINCmd:
 24412              	.LFB44:
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24413              		.loc 1 740 0
 24414              		.cfi_startproc
 24415              		@ args = 0, pretend = 0, frame = 8
 24416              		@ frame_needed = 1, uses_anonymous_args = 0
 24417              		@ link register save eliminated.
 24418 05cc 80B4     		push	{r7}
 24419              	.LCFI45:
 24420              		.cfi_def_cfa_offset 4
 24421 05ce 83B0     		sub	sp, sp, #12
 24422              	.LCFI46:
 24423              		.cfi_def_cfa_offset 16
 24424 05d0 00AF     		add	r7, sp, #0
 24425              		.cfi_offset 7, -4
 24426              	.LCFI47:
 24427              		.cfi_def_cfa_register 7
 24428 05d2 7860     		str	r0, [r7, #4]
 24429 05d4 0B46     		mov	r3, r1
 24430 05d6 FB70     		strb	r3, [r7, #3]
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24431              		.loc 1 745 0
 24432 05d8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24433 05da 002B     		cmp	r3, #0
 24434 05dc 08D0     		beq	.L38
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 24435              		.loc 1 748 0
 24436 05de 7B68     		ldr	r3, [r7, #4]
 24437 05e0 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24438 05e2 9BB2     		uxth	r3, r3
 24439 05e4 43F48043 		orr	r3, r3, #16384
 24440 05e8 9AB2     		uxth	r2, r3
 24441 05ea 7B68     		ldr	r3, [r7, #4]
 24442 05ec 1A82     		strh	r2, [r3, #16]	@ movhi
 24443 05ee 07E0     		b	.L37
 24444              	.L38:
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 24445              		.loc 1 753 0
 24446 05f0 7B68     		ldr	r3, [r7, #4]
 24447 05f2 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24448 05f4 9BB2     		uxth	r3, r3
 24449 05f6 23F48043 		bic	r3, r3, #16384
 24450 05fa 9AB2     		uxth	r2, r3
 24451 05fc 7B68     		ldr	r3, [r7, #4]
 24452 05fe 1A82     		strh	r2, [r3, #16]	@ movhi
 24453              	.L37:
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24454              		.loc 1 755 0
 24455 0600 07F10C07 		add	r7, r7, #12
 24456 0604 BD46     		mov	sp, r7
 24457 0606 80BC     		pop	{r7}
 24458 0608 7047     		bx	lr
 24459              		.cfi_endproc
 24460              	.LFE44:
 24462 060a 00BF     		.align	2
 24463              		.global	USART_SendBreak
 24464              		.thumb
 24465              		.thumb_func
 24467              	USART_SendBreak:
 24468              	.LFB45:
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Transmits break characters.
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24469              		.loc 1 764 0
 24470              		.cfi_startproc
 24471              		@ args = 0, pretend = 0, frame = 8
 24472              		@ frame_needed = 1, uses_anonymous_args = 0
 24473              		@ link register save eliminated.
 24474 060c 80B4     		push	{r7}
 24475              	.LCFI48:
 24476              		.cfi_def_cfa_offset 4
 24477 060e 83B0     		sub	sp, sp, #12
 24478              	.LCFI49:
 24479              		.cfi_def_cfa_offset 16
 24480 0610 00AF     		add	r7, sp, #0
 24481              		.cfi_offset 7, -4
 24482              	.LCFI50:
 24483              		.cfi_def_cfa_register 7
 24484 0612 7860     		str	r0, [r7, #4]
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Send break characters */
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 24485              		.loc 1 769 0
 24486 0614 7B68     		ldr	r3, [r7, #4]
 24487 0616 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24488 0618 9BB2     		uxth	r3, r3
 24489 061a 43F00103 		orr	r3, r3, #1
 24490 061e 9AB2     		uxth	r2, r3
 24491 0620 7B68     		ldr	r3, [r7, #4]
 24492 0622 9A81     		strh	r2, [r3, #12]	@ movhi
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24493              		.loc 1 770 0
 24494 0624 07F10C07 		add	r7, r7, #12
 24495 0628 BD46     		mov	sp, r7
 24496 062a 80BC     		pop	{r7}
 24497 062c 7047     		bx	lr
 24498              		.cfi_endproc
 24499              	.LFE45:
 24501 062e 00BF     		.align	2
 24502              		.global	USART_HalfDuplexCmd
 24503              		.thumb
 24504              		.thumb_func
 24506              	USART_HalfDuplexCmd:
 24507              	.LFB46:
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @}
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                          Half-duplex mode function
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Half-duplex communication.
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   the TX and RX lines are internally connected.
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         function.
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note The RX pin is no longer used
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24508              		.loc 1 817 0
 24509              		.cfi_startproc
 24510              		@ args = 0, pretend = 0, frame = 8
 24511              		@ frame_needed = 1, uses_anonymous_args = 0
 24512              		@ link register save eliminated.
 24513 0630 80B4     		push	{r7}
 24514              	.LCFI51:
 24515              		.cfi_def_cfa_offset 4
 24516 0632 83B0     		sub	sp, sp, #12
 24517              	.LCFI52:
 24518              		.cfi_def_cfa_offset 16
 24519 0634 00AF     		add	r7, sp, #0
 24520              		.cfi_offset 7, -4
 24521              	.LCFI53:
 24522              		.cfi_def_cfa_register 7
 24523 0636 7860     		str	r0, [r7, #4]
 24524 0638 0B46     		mov	r3, r1
 24525 063a FB70     		strb	r3, [r7, #3]
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24526              		.loc 1 822 0
 24527 063c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24528 063e 002B     		cmp	r3, #0
 24529 0640 08D0     		beq	.L42
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 24530              		.loc 1 825 0
 24531 0642 7B68     		ldr	r3, [r7, #4]
 24532 0644 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24533 0646 9BB2     		uxth	r3, r3
 24534 0648 43F00803 		orr	r3, r3, #8
 24535 064c 9AB2     		uxth	r2, r3
 24536 064e 7B68     		ldr	r3, [r7, #4]
 24537 0650 9A82     		strh	r2, [r3, #20]	@ movhi
 24538 0652 07E0     		b	.L41
 24539              	.L42:
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 24540              		.loc 1 830 0
 24541 0654 7B68     		ldr	r3, [r7, #4]
 24542 0656 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24543 0658 9BB2     		uxth	r3, r3
 24544 065a 23F00803 		bic	r3, r3, #8
 24545 065e 9AB2     		uxth	r2, r3
 24546 0660 7B68     		ldr	r3, [r7, #4]
 24547 0662 9A82     		strh	r2, [r3, #20]	@ movhi
 24548              	.L41:
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24549              		.loc 1 832 0
 24550 0664 07F10C07 		add	r7, r7, #12
 24551 0668 BD46     		mov	sp, r7
 24552 066a 80BC     		pop	{r7}
 24553 066c 7047     		bx	lr
 24554              		.cfi_endproc
 24555              	.LFE46:
 24557 066e 00BF     		.align	2
 24558              		.global	USART_SetGuardTime
 24559              		.thumb
 24560              		.thumb_func
 24562              	USART_SetGuardTime:
 24563              	.LFB47:
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @}
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                                Smartcard mode functions
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Smartcard communication.
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - USART Clock enabled
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - USART CPOL Low
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - USART CPHA on first edge
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - USART Last Bit Clock Enabled
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Word Length = 9 Bits
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - 1.5 Stop Bit
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Even parity
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - BaudRate = 12096 baud
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - Tx and Rx enabled
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         function
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       between the two configurations.
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       and UART5 peripherals).
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {    
 24564              		.loc 1 902 0
 24565              		.cfi_startproc
 24566              		@ args = 0, pretend = 0, frame = 8
 24567              		@ frame_needed = 1, uses_anonymous_args = 0
 24568              		@ link register save eliminated.
 24569 0670 80B4     		push	{r7}
 24570              	.LCFI54:
 24571              		.cfi_def_cfa_offset 4
 24572 0672 83B0     		sub	sp, sp, #12
 24573              	.LCFI55:
 24574              		.cfi_def_cfa_offset 16
 24575 0674 00AF     		add	r7, sp, #0
 24576              		.cfi_offset 7, -4
 24577              	.LCFI56:
 24578              		.cfi_def_cfa_register 7
 24579 0676 7860     		str	r0, [r7, #4]
 24580 0678 0B46     		mov	r3, r1
 24581 067a FB70     		strb	r3, [r7, #3]
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Clear the USART Guard time */
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 24582              		.loc 1 907 0
 24583 067c 7B68     		ldr	r3, [r7, #4]
 24584 067e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 24585 0680 9BB2     		uxth	r3, r3
 24586 0682 03F0FF03 		and	r3, r3, #255
 24587 0686 9AB2     		uxth	r2, r3
 24588 0688 7B68     		ldr	r3, [r7, #4]
 24589 068a 1A83     		strh	r2, [r3, #24]	@ movhi
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Set the USART guard time */
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 24590              		.loc 1 909 0
 24591 068c 7B68     		ldr	r3, [r7, #4]
 24592 068e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 24593 0690 9AB2     		uxth	r2, r3
 24594 0692 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24595 0694 9BB2     		uxth	r3, r3
 24596 0696 4FEA0323 		lsl	r3, r3, #8
 24597 069a 9BB2     		uxth	r3, r3
 24598 069c 42EA0303 		orr	r3, r2, r3
 24599 06a0 9AB2     		uxth	r2, r3
 24600 06a2 7B68     		ldr	r3, [r7, #4]
 24601 06a4 1A83     		strh	r2, [r3, #24]	@ movhi
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24602              		.loc 1 910 0
 24603 06a6 07F10C07 		add	r7, r7, #12
 24604 06aa BD46     		mov	sp, r7
 24605 06ac 80BC     		pop	{r7}
 24606 06ae 7047     		bx	lr
 24607              		.cfi_endproc
 24608              	.LFE47:
 24610              		.align	2
 24611              		.global	USART_SmartCardCmd
 24612              		.thumb
 24613              		.thumb_func
 24615              	USART_SmartCardCmd:
 24616              	.LFB48:
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24617              		.loc 1 921 0
 24618              		.cfi_startproc
 24619              		@ args = 0, pretend = 0, frame = 8
 24620              		@ frame_needed = 1, uses_anonymous_args = 0
 24621              		@ link register save eliminated.
 24622 06b0 80B4     		push	{r7}
 24623              	.LCFI57:
 24624              		.cfi_def_cfa_offset 4
 24625 06b2 83B0     		sub	sp, sp, #12
 24626              	.LCFI58:
 24627              		.cfi_def_cfa_offset 16
 24628 06b4 00AF     		add	r7, sp, #0
 24629              		.cfi_offset 7, -4
 24630              	.LCFI59:
 24631              		.cfi_def_cfa_register 7
 24632 06b6 7860     		str	r0, [r7, #4]
 24633 06b8 0B46     		mov	r3, r1
 24634 06ba FB70     		strb	r3, [r7, #3]
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24635              		.loc 1 925 0
 24636 06bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24637 06be 002B     		cmp	r3, #0
 24638 06c0 08D0     		beq	.L46
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 24639              		.loc 1 928 0
 24640 06c2 7B68     		ldr	r3, [r7, #4]
 24641 06c4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24642 06c6 9BB2     		uxth	r3, r3
 24643 06c8 43F02003 		orr	r3, r3, #32
 24644 06cc 9AB2     		uxth	r2, r3
 24645 06ce 7B68     		ldr	r3, [r7, #4]
 24646 06d0 9A82     		strh	r2, [r3, #20]	@ movhi
 24647 06d2 07E0     		b	.L45
 24648              	.L46:
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 24649              		.loc 1 933 0
 24650 06d4 7B68     		ldr	r3, [r7, #4]
 24651 06d6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24652 06d8 9BB2     		uxth	r3, r3
 24653 06da 23F02003 		bic	r3, r3, #32
 24654 06de 9AB2     		uxth	r2, r3
 24655 06e0 7B68     		ldr	r3, [r7, #4]
 24656 06e2 9A82     		strh	r2, [r3, #20]	@ movhi
 24657              	.L45:
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24658              		.loc 1 935 0
 24659 06e4 07F10C07 		add	r7, r7, #12
 24660 06e8 BD46     		mov	sp, r7
 24661 06ea 80BC     		pop	{r7}
 24662 06ec 7047     		bx	lr
 24663              		.cfi_endproc
 24664              	.LFE48:
 24666 06ee 00BF     		.align	2
 24667              		.global	USART_SmartCardNACKCmd
 24668              		.thumb
 24669              		.thumb_func
 24671              	USART_SmartCardNACKCmd:
 24672              	.LFB49:
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24673              		.loc 1 946 0
 24674              		.cfi_startproc
 24675              		@ args = 0, pretend = 0, frame = 8
 24676              		@ frame_needed = 1, uses_anonymous_args = 0
 24677              		@ link register save eliminated.
 24678 06f0 80B4     		push	{r7}
 24679              	.LCFI60:
 24680              		.cfi_def_cfa_offset 4
 24681 06f2 83B0     		sub	sp, sp, #12
 24682              	.LCFI61:
 24683              		.cfi_def_cfa_offset 16
 24684 06f4 00AF     		add	r7, sp, #0
 24685              		.cfi_offset 7, -4
 24686              	.LCFI62:
 24687              		.cfi_def_cfa_register 7
 24688 06f6 7860     		str	r0, [r7, #4]
 24689 06f8 0B46     		mov	r3, r1
 24690 06fa FB70     		strb	r3, [r7, #3]
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24691              		.loc 1 950 0
 24692 06fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24693 06fe 002B     		cmp	r3, #0
 24694 0700 08D0     		beq	.L49
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 24695              		.loc 1 953 0
 24696 0702 7B68     		ldr	r3, [r7, #4]
 24697 0704 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24698 0706 9BB2     		uxth	r3, r3
 24699 0708 43F01003 		orr	r3, r3, #16
 24700 070c 9AB2     		uxth	r2, r3
 24701 070e 7B68     		ldr	r3, [r7, #4]
 24702 0710 9A82     		strh	r2, [r3, #20]	@ movhi
 24703 0712 07E0     		b	.L48
 24704              	.L49:
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 24705              		.loc 1 958 0
 24706 0714 7B68     		ldr	r3, [r7, #4]
 24707 0716 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24708 0718 9BB2     		uxth	r3, r3
 24709 071a 23F01003 		bic	r3, r3, #16
 24710 071e 9AB2     		uxth	r2, r3
 24711 0720 7B68     		ldr	r3, [r7, #4]
 24712 0722 9A82     		strh	r2, [r3, #20]	@ movhi
 24713              	.L48:
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24714              		.loc 1 960 0
 24715 0724 07F10C07 		add	r7, r7, #12
 24716 0728 BD46     		mov	sp, r7
 24717 072a 80BC     		pop	{r7}
 24718 072c 7047     		bx	lr
 24719              		.cfi_endproc
 24720              	.LFE49:
 24722 072e 00BF     		.align	2
 24723              		.global	USART_IrDAConfig
 24724              		.thumb
 24725              		.thumb_func
 24727              	USART_IrDAConfig:
 24728              	.LFB50:
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @}
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   IrDA mode functions 
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                                 IrDA mode functions
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   IrDA communication.
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   could be corrupted.
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         the USART_SetPrescaler() function.
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         using the USART_IrDAConfig() function.
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       not be rejected.
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24729              		.loc 1 1017 0
 24730              		.cfi_startproc
 24731              		@ args = 0, pretend = 0, frame = 8
 24732              		@ frame_needed = 1, uses_anonymous_args = 0
 24733              		@ link register save eliminated.
 24734 0730 80B4     		push	{r7}
 24735              	.LCFI63:
 24736              		.cfi_def_cfa_offset 4
 24737 0732 83B0     		sub	sp, sp, #12
 24738              	.LCFI64:
 24739              		.cfi_def_cfa_offset 16
 24740 0734 00AF     		add	r7, sp, #0
 24741              		.cfi_offset 7, -4
 24742              	.LCFI65:
 24743              		.cfi_def_cfa_register 7
 24744 0736 7860     		str	r0, [r7, #4]
 24745 0738 0B46     		mov	r3, r1
 24746 073a 7B80     		strh	r3, [r7, #2]	@ movhi
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 24747              		.loc 1 1022 0
 24748 073c 7B68     		ldr	r3, [r7, #4]
 24749 073e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24750 0740 9BB2     		uxth	r3, r3
 24751 0742 23F00403 		bic	r3, r3, #4
 24752 0746 9AB2     		uxth	r2, r3
 24753 0748 7B68     		ldr	r3, [r7, #4]
 24754 074a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 24755              		.loc 1 1023 0
 24756 074c 7B68     		ldr	r3, [r7, #4]
 24757 074e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24758 0750 9AB2     		uxth	r2, r3
 24759 0752 7B88     		ldrh	r3, [r7, #2]	@ movhi
 24760 0754 42EA0303 		orr	r3, r2, r3
 24761 0758 9AB2     		uxth	r2, r3
 24762 075a 7B68     		ldr	r3, [r7, #4]
 24763 075c 9A82     		strh	r2, [r3, #20]	@ movhi
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24764              		.loc 1 1024 0
 24765 075e 07F10C07 		add	r7, r7, #12
 24766 0762 BD46     		mov	sp, r7
 24767 0764 80BC     		pop	{r7}
 24768 0766 7047     		bx	lr
 24769              		.cfi_endproc
 24770              	.LFE50:
 24772              		.align	2
 24773              		.global	USART_IrDACmd
 24774              		.thumb
 24775              		.thumb_func
 24777              	USART_IrDACmd:
 24778              	.LFB51:
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24779              		.loc 1 1035 0
 24780              		.cfi_startproc
 24781              		@ args = 0, pretend = 0, frame = 8
 24782              		@ frame_needed = 1, uses_anonymous_args = 0
 24783              		@ link register save eliminated.
 24784 0768 80B4     		push	{r7}
 24785              	.LCFI66:
 24786              		.cfi_def_cfa_offset 4
 24787 076a 83B0     		sub	sp, sp, #12
 24788              	.LCFI67:
 24789              		.cfi_def_cfa_offset 16
 24790 076c 00AF     		add	r7, sp, #0
 24791              		.cfi_offset 7, -4
 24792              	.LCFI68:
 24793              		.cfi_def_cfa_register 7
 24794 076e 7860     		str	r0, [r7, #4]
 24795 0770 0B46     		mov	r3, r1
 24796 0772 FB70     		strb	r3, [r7, #3]
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24797              		.loc 1 1040 0
 24798 0774 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24799 0776 002B     		cmp	r3, #0
 24800 0778 08D0     		beq	.L53
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 24801              		.loc 1 1043 0
 24802 077a 7B68     		ldr	r3, [r7, #4]
 24803 077c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24804 077e 9BB2     		uxth	r3, r3
 24805 0780 43F00203 		orr	r3, r3, #2
 24806 0784 9AB2     		uxth	r2, r3
 24807 0786 7B68     		ldr	r3, [r7, #4]
 24808 0788 9A82     		strh	r2, [r3, #20]	@ movhi
 24809 078a 07E0     		b	.L52
 24810              	.L53:
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 24811              		.loc 1 1048 0
 24812 078c 7B68     		ldr	r3, [r7, #4]
 24813 078e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24814 0790 9BB2     		uxth	r3, r3
 24815 0792 23F00203 		bic	r3, r3, #2
 24816 0796 9AB2     		uxth	r2, r3
 24817 0798 7B68     		ldr	r3, [r7, #4]
 24818 079a 9A82     		strh	r2, [r3, #20]	@ movhi
 24819              	.L52:
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24820              		.loc 1 1050 0
 24821 079c 07F10C07 		add	r7, r7, #12
 24822 07a0 BD46     		mov	sp, r7
 24823 07a2 80BC     		pop	{r7}
 24824 07a4 7047     		bx	lr
 24825              		.cfi_endproc
 24826              	.LFE51:
 24828 07a6 00BF     		.align	2
 24829              		.global	USART_DMACmd
 24830              		.thumb
 24831              		.thumb_func
 24833              	USART_DMACmd:
 24834              	.LFB52:
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @}
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   DMA transfers management functions
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                       DMA transfers management functions
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24835              		.loc 1 1081 0
 24836              		.cfi_startproc
 24837              		@ args = 0, pretend = 0, frame = 8
 24838              		@ frame_needed = 1, uses_anonymous_args = 0
 24839              		@ link register save eliminated.
 24840 07a8 80B4     		push	{r7}
 24841              	.LCFI69:
 24842              		.cfi_def_cfa_offset 4
 24843 07aa 83B0     		sub	sp, sp, #12
 24844              	.LCFI70:
 24845              		.cfi_def_cfa_offset 16
 24846 07ac 00AF     		add	r7, sp, #0
 24847              		.cfi_offset 7, -4
 24848              	.LCFI71:
 24849              		.cfi_def_cfa_register 7
 24850 07ae 7860     		str	r0, [r7, #4]
 24851 07b0 1346     		mov	r3, r2
 24852 07b2 0A46     		mov	r2, r1	@ movhi
 24853 07b4 7A80     		strh	r2, [r7, #2]	@ movhi
 24854 07b6 7B70     		strb	r3, [r7, #1]
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24855              		.loc 1 1087 0
 24856 07b8 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 24857 07ba 002B     		cmp	r3, #0
 24858 07bc 09D0     		beq	.L56
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 24859              		.loc 1 1091 0
 24860 07be 7B68     		ldr	r3, [r7, #4]
 24861 07c0 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24862 07c2 9AB2     		uxth	r2, r3
 24863 07c4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 24864 07c6 42EA0303 		orr	r3, r2, r3
 24865 07ca 9AB2     		uxth	r2, r3
 24866 07cc 7B68     		ldr	r3, [r7, #4]
 24867 07ce 9A82     		strh	r2, [r3, #20]	@ movhi
 24868 07d0 0BE0     		b	.L55
 24869              	.L56:
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 24870              		.loc 1 1097 0
 24871 07d2 7B68     		ldr	r3, [r7, #4]
 24872 07d4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24873 07d6 9AB2     		uxth	r2, r3
 24874 07d8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 24875 07da 6FEA0303 		mvn	r3, r3
 24876 07de 9BB2     		uxth	r3, r3
 24877 07e0 02EA0303 		and	r3, r2, r3
 24878 07e4 9AB2     		uxth	r2, r3
 24879 07e6 7B68     		ldr	r3, [r7, #4]
 24880 07e8 9A82     		strh	r2, [r3, #20]	@ movhi
 24881              	.L55:
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24882              		.loc 1 1099 0
 24883 07ea 07F10C07 		add	r7, r7, #12
 24884 07ee BD46     		mov	sp, r7
 24885 07f0 80BC     		pop	{r7}
 24886 07f2 7047     		bx	lr
 24887              		.cfi_endproc
 24888              	.LFE52:
 24890              		.align	2
 24891              		.global	USART_ITConfig
 24892              		.thumb
 24893              		.thumb_func
 24895              	USART_ITConfig:
 24896              	.LFB53:
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @}
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  *
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @verbatim   
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                    Interrupts and flags management functions
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****  ===============================================================================  
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   pending bits status.
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Polling Mode
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   =============
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Interrupt Mode
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   ===============
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   and 10 pending bits: 
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Pending Bits:
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   ------------- 
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   Interrupt Source:
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   -----------------
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                        interrupt. 
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                         empty interrupt.
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                        interrupt. 
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****                        interrupt. 
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   DMA Mode
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   ========
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   In this Mode it is advised to use the following function:
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** @endverbatim
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @{
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 24897              		.loc 1 1209 0
 24898              		.cfi_startproc
 24899              		@ args = 0, pretend = 0, frame = 24
 24900              		@ frame_needed = 1, uses_anonymous_args = 0
 24901              		@ link register save eliminated.
 24902 07f4 80B4     		push	{r7}
 24903              	.LCFI72:
 24904              		.cfi_def_cfa_offset 4
 24905 07f6 87B0     		sub	sp, sp, #28
 24906              	.LCFI73:
 24907              		.cfi_def_cfa_offset 32
 24908 07f8 00AF     		add	r7, sp, #0
 24909              		.cfi_offset 7, -4
 24910              	.LCFI74:
 24911              		.cfi_def_cfa_register 7
 24912 07fa 7860     		str	r0, [r7, #4]
 24913 07fc 1346     		mov	r3, r2
 24914 07fe 0A46     		mov	r2, r1	@ movhi
 24915 0800 7A80     		strh	r2, [r7, #2]	@ movhi
 24916 0802 7B70     		strb	r3, [r7, #1]
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 24917              		.loc 1 1210 0
 24918 0804 4FF00003 		mov	r3, #0
 24919 0808 3B61     		str	r3, [r7, #16]
 24920 080a 4FF00003 		mov	r3, #0
 24921 080e FB60     		str	r3, [r7, #12]
 24922 0810 4FF00003 		mov	r3, #0
 24923 0814 BB60     		str	r3, [r7, #8]
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   uint32_t usartxbase = 0x00;
 24924              		.loc 1 1211 0
 24925 0816 4FF00003 		mov	r3, #0
 24926 081a 7B61     		str	r3, [r7, #20]
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   } 
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 24927              		.loc 1 1223 0
 24928 081c 7B68     		ldr	r3, [r7, #4]
 24929 081e 7B61     		str	r3, [r7, #20]
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Get the USART register index */
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 24930              		.loc 1 1226 0
 24931 0820 7B88     		ldrh	r3, [r7, #2]	@ movhi
 24932 0822 DBB2     		uxtb	r3, r3
 24933 0824 4FEA5313 		lsr	r3, r3, #5
 24934 0828 DBB2     		uxtb	r3, r3
 24935 082a 3B61     		str	r3, [r7, #16]
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Get the interrupt position */
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   itpos = USART_IT & IT_MASK;
 24936              		.loc 1 1229 0
 24937 082c 7B88     		ldrh	r3, [r7, #2]
 24938 082e 03F01F03 		and	r3, r3, #31
 24939 0832 FB60     		str	r3, [r7, #12]
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 24940              		.loc 1 1230 0
 24941 0834 FB68     		ldr	r3, [r7, #12]
 24942 0836 4FF00102 		mov	r2, #1
 24943 083a 02FA03F3 		lsl	r3, r2, r3
 24944 083e BB60     		str	r3, [r7, #8]
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 24945              		.loc 1 1232 0
 24946 0840 3B69     		ldr	r3, [r7, #16]
 24947 0842 012B     		cmp	r3, #1
 24948 0844 04D1     		bne	.L59
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     usartxbase += 0x0C;
 24949              		.loc 1 1234 0
 24950 0846 7B69     		ldr	r3, [r7, #20]
 24951 0848 03F10C03 		add	r3, r3, #12
 24952 084c 7B61     		str	r3, [r7, #20]
 24953 084e 0BE0     		b	.L60
 24954              	.L59:
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 24955              		.loc 1 1236 0
 24956 0850 3B69     		ldr	r3, [r7, #16]
 24957 0852 022B     		cmp	r3, #2
 24958 0854 04D1     		bne	.L61
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     usartxbase += 0x10;
 24959              		.loc 1 1238 0
 24960 0856 7B69     		ldr	r3, [r7, #20]
 24961 0858 03F11003 		add	r3, r3, #16
 24962 085c 7B61     		str	r3, [r7, #20]
 24963 085e 03E0     		b	.L60
 24964              	.L61:
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else /* The IT is in CR3 register */
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     usartxbase += 0x14; 
 24965              		.loc 1 1242 0
 24966 0860 7B69     		ldr	r3, [r7, #20]
 24967 0862 03F11403 		add	r3, r3, #20
 24968 0866 7B61     		str	r3, [r7, #20]
 24969              	.L60:
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (NewState != DISABLE)
 24970              		.loc 1 1244 0
 24971 0868 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 24972 086a 002B     		cmp	r3, #0
 24973 086c 07D0     		beq	.L62
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 24974              		.loc 1 1246 0
 24975 086e 7B69     		ldr	r3, [r7, #20]
 24976 0870 7A69     		ldr	r2, [r7, #20]
 24977 0872 1168     		ldr	r1, [r2, #0]
 24978 0874 BA68     		ldr	r2, [r7, #8]
 24979 0876 41EA0202 		orr	r2, r1, r2
 24980 087a 1A60     		str	r2, [r3, #0]
 24981 087c 08E0     		b	.L58
 24982              	.L62:
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 24983              		.loc 1 1250 0
 24984 087e 7B69     		ldr	r3, [r7, #20]
 24985 0880 7A69     		ldr	r2, [r7, #20]
 24986 0882 1168     		ldr	r1, [r2, #0]
 24987 0884 BA68     		ldr	r2, [r7, #8]
 24988 0886 6FEA0202 		mvn	r2, r2
 24989 088a 01EA0202 		and	r2, r1, r2
 24990 088e 1A60     		str	r2, [r3, #0]
 24991              	.L58:
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 24992              		.loc 1 1252 0
 24993 0890 07F11C07 		add	r7, r7, #28
 24994 0894 BD46     		mov	sp, r7
 24995 0896 80BC     		pop	{r7}
 24996 0898 7047     		bx	lr
 24997              		.cfi_endproc
 24998              	.LFE53:
 25000 089a 00BF     		.align	2
 25001              		.global	USART_GetFlagStatus
 25002              		.thumb
 25003              		.thumb_func
 25005              	USART_GetFlagStatus:
 25006              	.LFB54:
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 25007              		.loc 1 1273 0
 25008              		.cfi_startproc
 25009              		@ args = 0, pretend = 0, frame = 16
 25010              		@ frame_needed = 1, uses_anonymous_args = 0
 25011              		@ link register save eliminated.
 25012 089c 80B4     		push	{r7}
 25013              	.LCFI75:
 25014              		.cfi_def_cfa_offset 4
 25015 089e 85B0     		sub	sp, sp, #20
 25016              	.LCFI76:
 25017              		.cfi_def_cfa_offset 24
 25018 08a0 00AF     		add	r7, sp, #0
 25019              		.cfi_offset 7, -4
 25020              	.LCFI77:
 25021              		.cfi_def_cfa_register 7
 25022 08a2 7860     		str	r0, [r7, #4]
 25023 08a4 0B46     		mov	r3, r1
 25024 08a6 7B80     		strh	r3, [r7, #2]	@ movhi
1274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   FlagStatus bitstatus = RESET;
 25025              		.loc 1 1274 0
 25026 08a8 4FF00003 		mov	r3, #0
 25027 08ac FB73     		strb	r3, [r7, #15]
1275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
1276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   } 
1284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
1285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 25028              		.loc 1 1285 0
 25029 08ae 7B68     		ldr	r3, [r7, #4]
 25030 08b0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25031 08b2 9AB2     		uxth	r2, r3
 25032 08b4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25033 08b6 02EA0303 		and	r3, r2, r3
 25034 08ba 9BB2     		uxth	r3, r3
 25035 08bc 002B     		cmp	r3, #0
 25036 08be 03D0     		beq	.L65
1286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     bitstatus = SET;
 25037              		.loc 1 1287 0
 25038 08c0 4FF00103 		mov	r3, #1
 25039 08c4 FB73     		strb	r3, [r7, #15]
 25040 08c6 02E0     		b	.L66
 25041              	.L65:
1288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
1290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     bitstatus = RESET;
 25042              		.loc 1 1291 0
 25043 08c8 4FF00003 		mov	r3, #0
 25044 08cc FB73     		strb	r3, [r7, #15]
 25045              	.L66:
1292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   return bitstatus;
 25046              		.loc 1 1293 0
 25047 08ce FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 25048              		.loc 1 1294 0
 25049 08d0 1846     		mov	r0, r3
 25050 08d2 07F11407 		add	r7, r7, #20
 25051 08d6 BD46     		mov	sp, r7
 25052 08d8 80BC     		pop	{r7}
 25053 08da 7047     		bx	lr
 25054              		.cfi_endproc
 25055              	.LFE54:
 25057              		.align	2
 25058              		.global	USART_ClearFlag
 25059              		.thumb
 25060              		.thumb_func
 25062              	USART_ClearFlag:
 25063              	.LFB55:
1295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
1300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *   
1307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          (USART_ReceiveData()).
1313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          (USART_SendData()).
1318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *   
1319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
1320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 25064              		.loc 1 1322 0
 25065              		.cfi_startproc
 25066              		@ args = 0, pretend = 0, frame = 8
 25067              		@ frame_needed = 1, uses_anonymous_args = 0
 25068              		@ link register save eliminated.
 25069 08dc 80B4     		push	{r7}
 25070              	.LCFI78:
 25071              		.cfi_def_cfa_offset 4
 25072 08de 83B0     		sub	sp, sp, #12
 25073              	.LCFI79:
 25074              		.cfi_def_cfa_offset 16
 25075 08e0 00AF     		add	r7, sp, #0
 25076              		.cfi_offset 7, -4
 25077              	.LCFI80:
 25078              		.cfi_def_cfa_register 7
 25079 08e2 7860     		str	r0, [r7, #4]
 25080 08e4 0B46     		mov	r3, r1
 25081 08e6 7B80     		strh	r3, [r7, #2]	@ movhi
1323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
1324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   } 
1332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****        
1333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 25082              		.loc 1 1333 0
 25083 08e8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25084 08ea 6FEA0303 		mvn	r3, r3
 25085 08ee 9AB2     		uxth	r2, r3
 25086 08f0 7B68     		ldr	r3, [r7, #4]
 25087 08f2 1A80     		strh	r2, [r3, #0]	@ movhi
1334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 25088              		.loc 1 1334 0
 25089 08f4 07F10C07 		add	r7, r7, #12
 25090 08f8 BD46     		mov	sp, r7
 25091 08fa 80BC     		pop	{r7}
 25092 08fc 7047     		bx	lr
 25093              		.cfi_endproc
 25094              	.LFE55:
 25096 08fe 00BF     		.align	2
 25097              		.global	USART_GetITStatus
 25098              		.thumb
 25099              		.thumb_func
 25101              	USART_GetITStatus:
 25102              	.LFB56:
1335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
1340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt
1349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 25103              		.loc 1 1355 0
 25104              		.cfi_startproc
 25105              		@ args = 0, pretend = 0, frame = 24
 25106              		@ frame_needed = 1, uses_anonymous_args = 0
 25107              		@ link register save eliminated.
 25108 0900 80B4     		push	{r7}
 25109              	.LCFI81:
 25110              		.cfi_def_cfa_offset 4
 25111 0902 87B0     		sub	sp, sp, #28
 25112              	.LCFI82:
 25113              		.cfi_def_cfa_offset 32
 25114 0904 00AF     		add	r7, sp, #0
 25115              		.cfi_offset 7, -4
 25116              	.LCFI83:
 25117              		.cfi_def_cfa_register 7
 25118 0906 7860     		str	r0, [r7, #4]
 25119 0908 0B46     		mov	r3, r1
 25120 090a 7B80     		strh	r3, [r7, #2]	@ movhi
1356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 25121              		.loc 1 1356 0
 25122 090c 4FF00003 		mov	r3, #0
 25123 0910 FB60     		str	r3, [r7, #12]
 25124 0912 4FF00003 		mov	r3, #0
 25125 0916 7B61     		str	r3, [r7, #20]
 25126 0918 4FF00003 		mov	r3, #0
 25127 091c BB60     		str	r3, [r7, #8]
1357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   ITStatus bitstatus = RESET;
 25128              		.loc 1 1357 0
 25129 091e 4FF00003 		mov	r3, #0
 25130 0922 FB74     		strb	r3, [r7, #19]
1358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
1359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   } 
1367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
1368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Get the USART register index */
1369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 25131              		.loc 1 1369 0
 25132 0924 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25133 0926 DBB2     		uxtb	r3, r3
 25134 0928 4FEA5313 		lsr	r3, r3, #5
 25135 092c DBB2     		uxtb	r3, r3
 25136 092e BB60     		str	r3, [r7, #8]
1370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Get the interrupt position */
1371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   itmask = USART_IT & IT_MASK;
 25137              		.loc 1 1371 0
 25138 0930 7B88     		ldrh	r3, [r7, #2]
 25139 0932 03F01F03 		and	r3, r3, #31
 25140 0936 7B61     		str	r3, [r7, #20]
1372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 25141              		.loc 1 1372 0
 25142 0938 7B69     		ldr	r3, [r7, #20]
 25143 093a 4FF00102 		mov	r2, #1
 25144 093e 02FA03F3 		lsl	r3, r2, r3
 25145 0942 7B61     		str	r3, [r7, #20]
1373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
1374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 25146              		.loc 1 1374 0
 25147 0944 BB68     		ldr	r3, [r7, #8]
 25148 0946 012B     		cmp	r3, #1
 25149 0948 07D1     		bne	.L69
1375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     itmask &= USARTx->CR1;
 25150              		.loc 1 1376 0
 25151 094a 7B68     		ldr	r3, [r7, #4]
 25152 094c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25153 094e 9BB2     		uxth	r3, r3
 25154 0950 7A69     		ldr	r2, [r7, #20]
 25155 0952 02EA0303 		and	r3, r2, r3
 25156 0956 7B61     		str	r3, [r7, #20]
 25157 0958 11E0     		b	.L70
 25158              	.L69:
1377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 25159              		.loc 1 1378 0
 25160 095a BB68     		ldr	r3, [r7, #8]
 25161 095c 022B     		cmp	r3, #2
 25162 095e 07D1     		bne	.L71
1379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     itmask &= USARTx->CR2;
 25163              		.loc 1 1380 0
 25164 0960 7B68     		ldr	r3, [r7, #4]
 25165 0962 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25166 0964 9BB2     		uxth	r3, r3
 25167 0966 7A69     		ldr	r2, [r7, #20]
 25168 0968 02EA0303 		and	r3, r2, r3
 25169 096c 7B61     		str	r3, [r7, #20]
 25170 096e 06E0     		b	.L70
 25171              	.L71:
1381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else /* The IT  is in CR3 register */
1383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     itmask &= USARTx->CR3;
 25172              		.loc 1 1384 0
 25173 0970 7B68     		ldr	r3, [r7, #4]
 25174 0972 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25175 0974 9BB2     		uxth	r3, r3
 25176 0976 7A69     		ldr	r2, [r7, #20]
 25177 0978 02EA0303 		and	r3, r2, r3
 25178 097c 7B61     		str	r3, [r7, #20]
 25179              	.L70:
1385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
1387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   bitpos = USART_IT >> 0x08;
 25180              		.loc 1 1387 0
 25181 097e 7B88     		ldrh	r3, [r7, #2]
 25182 0980 4FEA1323 		lsr	r3, r3, #8
 25183 0984 9BB2     		uxth	r3, r3
 25184 0986 FB60     		str	r3, [r7, #12]
1388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 25185              		.loc 1 1388 0
 25186 0988 FB68     		ldr	r3, [r7, #12]
 25187 098a 4FF00102 		mov	r2, #1
 25188 098e 02FA03F3 		lsl	r3, r2, r3
 25189 0992 FB60     		str	r3, [r7, #12]
1389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   bitpos &= USARTx->SR;
 25190              		.loc 1 1389 0
 25191 0994 7B68     		ldr	r3, [r7, #4]
 25192 0996 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25193 0998 9BB2     		uxth	r3, r3
 25194 099a FA68     		ldr	r2, [r7, #12]
 25195 099c 02EA0303 		and	r3, r2, r3
 25196 09a0 FB60     		str	r3, [r7, #12]
1390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 25197              		.loc 1 1390 0
 25198 09a2 7B69     		ldr	r3, [r7, #20]
 25199 09a4 002B     		cmp	r3, #0
 25200 09a6 06D0     		beq	.L72
 25201              		.loc 1 1390 0 is_stmt 0 discriminator 1
 25202 09a8 FB68     		ldr	r3, [r7, #12]
 25203 09aa 002B     		cmp	r3, #0
 25204 09ac 03D0     		beq	.L72
1391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     bitstatus = SET;
 25205              		.loc 1 1392 0 is_stmt 1
 25206 09ae 4FF00103 		mov	r3, #1
 25207 09b2 FB74     		strb	r3, [r7, #19]
 25208 09b4 02E0     		b	.L73
 25209              	.L72:
1393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   else
1395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     bitstatus = RESET;
 25210              		.loc 1 1396 0
 25211 09b6 4FF00003 		mov	r3, #0
 25212 09ba FB74     		strb	r3, [r7, #19]
 25213              	.L73:
1397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   }
1398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   
1399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   return bitstatus;  
 25214              		.loc 1 1399 0
 25215 09bc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 25216              		.loc 1 1400 0
 25217 09be 1846     		mov	r0, r3
 25218 09c0 07F11C07 		add	r7, r7, #28
 25219 09c4 BD46     		mov	sp, r7
 25220 09c6 80BC     		pop	{r7}
 25221 09c8 7047     		bx	lr
 25222              		.cfi_endproc
 25223              	.LFE56:
 25225 09ca 00BF     		.align	2
 25226              		.global	USART_ClearITPendingBit
 25227              		.thumb
 25228              		.thumb_func
 25230              	USART_ClearITPendingBit:
 25231              	.LFB57:
1401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** /**
1403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *         UART peripheral.
1406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *
1413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          (USART_ReceiveData()).
1418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          (USART_ReceiveData()).
1420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *          (USART_SendData()).
1425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   *  
1426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   * @retval None
1427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   */
1428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** {
 25232              		.loc 1 1429 0
 25233              		.cfi_startproc
 25234              		@ args = 0, pretend = 0, frame = 16
 25235              		@ frame_needed = 1, uses_anonymous_args = 0
 25236              		@ link register save eliminated.
 25237 09cc 80B4     		push	{r7}
 25238              	.LCFI84:
 25239              		.cfi_def_cfa_offset 4
 25240 09ce 85B0     		sub	sp, sp, #20
 25241              	.LCFI85:
 25242              		.cfi_def_cfa_offset 24
 25243 09d0 00AF     		add	r7, sp, #0
 25244              		.cfi_offset 7, -4
 25245              	.LCFI86:
 25246              		.cfi_def_cfa_register 7
 25247 09d2 7860     		str	r0, [r7, #4]
 25248 09d4 0B46     		mov	r3, r1
 25249 09d6 7B80     		strh	r3, [r7, #2]	@ movhi
1430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 25250              		.loc 1 1430 0
 25251 09d8 4FF00003 		mov	r3, #0
 25252 09dc FB81     		strh	r3, [r7, #14]	@ movhi
 25253 09de 4FF00003 		mov	r3, #0
 25254 09e2 BB81     		strh	r3, [r7, #12]	@ movhi
1431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* Check the parameters */
1432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** 
1435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   {
1438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   } 
1440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****     
1441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   bitpos = USART_IT >> 0x08;
 25255              		.loc 1 1441 0
 25256 09e4 7B88     		ldrh	r3, [r7, #2]
 25257 09e6 4FEA1323 		lsr	r3, r3, #8
 25258 09ea FB81     		strh	r3, [r7, #14]	@ movhi
1442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 25259              		.loc 1 1442 0
 25260 09ec FB89     		ldrh	r3, [r7, #14]
 25261 09ee 4FF00102 		mov	r2, #1
 25262 09f2 02FA03F3 		lsl	r3, r2, r3
 25263 09f6 BB81     		strh	r3, [r7, #12]	@ movhi
1443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 25264              		.loc 1 1443 0
 25265 09f8 BB89     		ldrh	r3, [r7, #12]	@ movhi
 25266 09fa 6FEA0303 		mvn	r3, r3
 25267 09fe 9AB2     		uxth	r2, r3
 25268 0a00 7B68     		ldr	r3, [r7, #4]
 25269 0a02 1A80     		strh	r2, [r3, #0]	@ movhi
1444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_usart.c **** }
 25270              		.loc 1 1444 0
 25271 0a04 07F11407 		add	r7, r7, #20
 25272 0a08 BD46     		mov	sp, r7
 25273 0a0a 80BC     		pop	{r7}
 25274 0a0c 7047     		bx	lr
 25275              		.cfi_endproc
 25276              	.LFE57:
 25278              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_usart.c
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:23373  .text:00000000 $t
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:23378  .text:00000000 USART_DeInit
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:23503  .text:00000100 USART_Init
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:23733  .text:000002bc USART_StructInit
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:23788  .text:00000300 USART_ClockInit
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:23857  .text:0000035c USART_ClockStructInit
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:23904  .text:00000390 USART_Cmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:23960  .text:000003d0 USART_SetPrescaler
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24011  .text:0000040c USART_OverSampling8Cmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24069  .text:00000454 USART_OneBitMethodCmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24125  .text:00000494 USART_SendData
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24165  .text:000004bc USART_ReceiveData
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24204  .text:000004e0 USART_SetAddress
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24255  .text:0000051c USART_ReceiverWakeUpCmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24311  .text:0000055c USART_WakeUpConfig
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24361  .text:00000594 USART_LINBreakDetectLengthConfig
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24411  .text:000005cc USART_LINCmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24467  .text:0000060c USART_SendBreak
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24506  .text:00000630 USART_HalfDuplexCmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24562  .text:00000670 USART_SetGuardTime
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24615  .text:000006b0 USART_SmartCardCmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24671  .text:000006f0 USART_SmartCardNACKCmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24727  .text:00000730 USART_IrDAConfig
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24777  .text:00000768 USART_IrDACmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24833  .text:000007a8 USART_DMACmd
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:24895  .text:000007f4 USART_ITConfig
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:25005  .text:0000089c USART_GetFlagStatus
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:25062  .text:000008dc USART_ClearFlag
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:25101  .text:00000900 USART_GetITStatus
C:\Users\red4sch\AppData\Local\Temp\ccoJQJyX.s:25230  .text:000009cc USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
