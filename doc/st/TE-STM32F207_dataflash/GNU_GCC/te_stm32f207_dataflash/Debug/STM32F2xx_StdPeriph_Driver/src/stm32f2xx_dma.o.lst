   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_dma.c"
  23              	.Ltext0:
  24              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c"
 23404              		.align	2
 23405              		.global	DMA_DeInit
 23406              		.thumb
 23407              		.thumb_func
 23409              	DMA_DeInit:
 23410              	.LFB29:
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @file    stm32f2xx_dma.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - Initialization and Configuration
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - Data Counter
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - Interrupts and flags management
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *  @verbatim
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *      
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          ===================================================================      
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                                 How to use this driver
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          =================================================================== 
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             function for DMA2.
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             necessary). 
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *    
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *             enabled and running).  
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                   
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              two methods:
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                  communication phase.  
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                 
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         are not allowed.
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *  
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         a single access to a Word in the Memory).
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *    
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        and Destination.               
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *  @endverbatim
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                                  
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   ******************************************************************************
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @attention
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   ******************************************************************************  
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */ 
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #include "stm32f2xx_dma.h"
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #include "stm32f2xx_rcc.h"
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @{
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /** @defgroup DMA 
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief DMA driver modules
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @{
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */ 
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /* Private define ------------------------------------------------------------*/
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /* Masks Definition */
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                                            DMA_LISR_TCIF0)
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /** @defgroup DMA_Private_Functions
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @{
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  *  @brief   Initialization and Configuration functions
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  *
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @verbatim   
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  ===============================================================================
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                  Initialization and Configuration functions
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  ===============================================================================  
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   and Stream priority value.
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   reference manual (RM0033) except the first point: waiting on EN bit to be reset.
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   before calling the DMA_Init() function.
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @endverbatim
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @{
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         to 7 to select the DMA Stream.
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 23411              		.loc 1 189 0
 23412              		.cfi_startproc
 23413              		@ args = 0, pretend = 0, frame = 8
 23414              		@ frame_needed = 1, uses_anonymous_args = 0
 23415              		@ link register save eliminated.
 23416 0000 80B4     		push	{r7}
 23417              	.LCFI0:
 23418              		.cfi_def_cfa_offset 4
 23419 0002 83B0     		sub	sp, sp, #12
 23420              	.LCFI1:
 23421              		.cfi_def_cfa_offset 16
 23422 0004 00AF     		add	r7, sp, #0
 23423              		.cfi_offset 7, -4
 23424              	.LCFI2:
 23425              		.cfi_def_cfa_register 7
 23426 0006 7860     		str	r0, [r7, #4]
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Disable the selected DMAy Streamx */
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 23427              		.loc 1 194 0
 23428 0008 7B68     		ldr	r3, [r7, #4]
 23429 000a 1B68     		ldr	r3, [r3, #0]
 23430 000c 23F00102 		bic	r2, r3, #1
 23431 0010 7B68     		ldr	r3, [r7, #4]
 23432 0012 1A60     		str	r2, [r3, #0]
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Reset DMAy Streamx control register */
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->CR  = 0;
 23433              		.loc 1 197 0
 23434 0014 7B68     		ldr	r3, [r7, #4]
 23435 0016 4FF00002 		mov	r2, #0
 23436 001a 1A60     		str	r2, [r3, #0]
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->NDTR = 0;
 23437              		.loc 1 200 0
 23438 001c 7B68     		ldr	r3, [r7, #4]
 23439 001e 4FF00002 		mov	r2, #0
 23440 0022 5A60     		str	r2, [r3, #4]
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->PAR  = 0;
 23441              		.loc 1 203 0
 23442 0024 7B68     		ldr	r3, [r7, #4]
 23443 0026 4FF00002 		mov	r2, #0
 23444 002a 9A60     		str	r2, [r3, #8]
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->M0AR = 0;
 23445              		.loc 1 206 0
 23446 002c 7B68     		ldr	r3, [r7, #4]
 23447 002e 4FF00002 		mov	r2, #0
 23448 0032 DA60     		str	r2, [r3, #12]
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->M1AR = 0;
 23449              		.loc 1 209 0
 23450 0034 7B68     		ldr	r3, [r7, #4]
 23451 0036 4FF00002 		mov	r2, #0
 23452 003a 1A61     		str	r2, [r3, #16]
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 23453              		.loc 1 212 0
 23454 003c 7B68     		ldr	r3, [r7, #4]
 23455 003e 4FF02102 		mov	r2, #33
 23456 0042 5A61     		str	r2, [r3, #20]
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
 23457              		.loc 1 215 0
 23458 0044 7A68     		ldr	r2, [r7, #4]
 23459 0046 46F21003 		movw	r3, #24592
 23460 004a C4F20203 		movt	r3, 16386
 23461 004e 9A42     		cmp	r2, r3
 23462 0050 07D1     		bne	.L2
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
 23463              		.loc 1 218 0
 23464 0052 4FF4C043 		mov	r3, #24576
 23465 0056 C4F20203 		movt	r3, 16386
 23466 005a 4FF03D02 		mov	r2, #61
 23467 005e 9A60     		str	r2, [r3, #8]
 23468 0060 EBE0     		b	.L1
 23469              	.L2:
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
 23470              		.loc 1 220 0
 23471 0062 7A68     		ldr	r2, [r7, #4]
 23472 0064 46F22803 		movw	r3, #24616
 23473 0068 C4F20203 		movt	r3, 16386
 23474 006c 9A42     		cmp	r2, r3
 23475 006e 07D1     		bne	.L4
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
 23476              		.loc 1 223 0
 23477 0070 4FF4C043 		mov	r3, #24576
 23478 0074 C4F20203 		movt	r3, 16386
 23479 0078 4FF47462 		mov	r2, #3904
 23480 007c 9A60     		str	r2, [r3, #8]
 23481 007e DCE0     		b	.L1
 23482              	.L4:
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
 23483              		.loc 1 225 0
 23484 0080 7A68     		ldr	r2, [r7, #4]
 23485 0082 46F24003 		movw	r3, #24640
 23486 0086 C4F20203 		movt	r3, 16386
 23487 008a 9A42     		cmp	r2, r3
 23488 008c 07D1     		bne	.L5
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 23489              		.loc 1 228 0
 23490 008e 4FF4C043 		mov	r3, #24576
 23491 0092 C4F20203 		movt	r3, 16386
 23492 0096 4FF47412 		mov	r2, #3997696
 23493 009a 9A60     		str	r2, [r3, #8]
 23494 009c CDE0     		b	.L1
 23495              	.L5:
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 23496              		.loc 1 230 0
 23497 009e 7A68     		ldr	r2, [r7, #4]
 23498 00a0 46F25803 		movw	r3, #24664
 23499 00a4 C4F20203 		movt	r3, 16386
 23500 00a8 9A42     		cmp	r2, r3
 23501 00aa 07D1     		bne	.L6
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 23502              		.loc 1 233 0
 23503 00ac 4FF4C043 		mov	r3, #24576
 23504 00b0 C4F20203 		movt	r3, 16386
 23505 00b4 4FF07462 		mov	r2, #255852544
 23506 00b8 9A60     		str	r2, [r3, #8]
 23507 00ba BEE0     		b	.L1
 23508              	.L6:
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 23509              		.loc 1 235 0
 23510 00bc 7A68     		ldr	r2, [r7, #4]
 23511 00be 46F27003 		movw	r3, #24688
 23512 00c2 C4F20203 		movt	r3, 16386
 23513 00c6 9A42     		cmp	r2, r3
 23514 00c8 09D1     		bne	.L7
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 23515              		.loc 1 238 0
 23516 00ca 4FF4C043 		mov	r3, #24576
 23517 00ce C4F20203 		movt	r3, 16386
 23518 00d2 4FF03D02 		mov	r2, #61
 23519 00d6 C2F20002 		movt	r2, 8192
 23520 00da DA60     		str	r2, [r3, #12]
 23521 00dc ADE0     		b	.L1
 23522              	.L7:
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 23523              		.loc 1 240 0
 23524 00de 7A68     		ldr	r2, [r7, #4]
 23525 00e0 46F28803 		movw	r3, #24712
 23526 00e4 C4F20203 		movt	r3, 16386
 23527 00e8 9A42     		cmp	r2, r3
 23528 00ea 09D1     		bne	.L8
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 23529              		.loc 1 243 0
 23530 00ec 4FF4C043 		mov	r3, #24576
 23531 00f0 C4F20203 		movt	r3, 16386
 23532 00f4 4FF47462 		mov	r2, #3904
 23533 00f8 C2F20002 		movt	r2, 8192
 23534 00fc DA60     		str	r2, [r3, #12]
 23535 00fe 9CE0     		b	.L1
 23536              	.L8:
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 23537              		.loc 1 245 0
 23538 0100 7A68     		ldr	r2, [r7, #4]
 23539 0102 46F2A003 		movw	r3, #24736
 23540 0106 C4F20203 		movt	r3, 16386
 23541 010a 9A42     		cmp	r2, r3
 23542 010c 09D1     		bne	.L9
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 23543              		.loc 1 248 0
 23544 010e 4FF4C043 		mov	r3, #24576
 23545 0112 C4F20203 		movt	r3, 16386
 23546 0116 4FF00002 		mov	r2, #0
 23547 011a C2F23D02 		movt	r2, 8253
 23548 011e DA60     		str	r2, [r3, #12]
 23549 0120 8BE0     		b	.L1
 23550              	.L9:
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 23551              		.loc 1 250 0
 23552 0122 7A68     		ldr	r2, [r7, #4]
 23553 0124 46F2B803 		movw	r3, #24760
 23554 0128 C4F20203 		movt	r3, 16386
 23555 012c 9A42     		cmp	r2, r3
 23556 012e 07D1     		bne	.L10
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 23557              		.loc 1 253 0
 23558 0130 4FF4C043 		mov	r3, #24576
 23559 0134 C4F20203 		movt	r3, 16386
 23560 0138 4FF03D52 		mov	r2, #792723456
 23561 013c DA60     		str	r2, [r3, #12]
 23562 013e 7CE0     		b	.L1
 23563              	.L10:
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 23564              		.loc 1 255 0
 23565 0140 7A68     		ldr	r2, [r7, #4]
 23566 0142 46F21043 		movw	r3, #25616
 23567 0146 C4F20203 		movt	r3, 16386
 23568 014a 9A42     		cmp	r2, r3
 23569 014c 07D1     		bne	.L11
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 23570              		.loc 1 258 0
 23571 014e 4FF4C843 		mov	r3, #25600
 23572 0152 C4F20203 		movt	r3, 16386
 23573 0156 4FF03D02 		mov	r2, #61
 23574 015a 9A60     		str	r2, [r3, #8]
 23575 015c 6DE0     		b	.L1
 23576              	.L11:
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 23577              		.loc 1 260 0
 23578 015e 7A68     		ldr	r2, [r7, #4]
 23579 0160 46F22843 		movw	r3, #25640
 23580 0164 C4F20203 		movt	r3, 16386
 23581 0168 9A42     		cmp	r2, r3
 23582 016a 07D1     		bne	.L12
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 23583              		.loc 1 263 0
 23584 016c 4FF4C843 		mov	r3, #25600
 23585 0170 C4F20203 		movt	r3, 16386
 23586 0174 4FF47462 		mov	r2, #3904
 23587 0178 9A60     		str	r2, [r3, #8]
 23588 017a 5EE0     		b	.L1
 23589              	.L12:
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 23590              		.loc 1 265 0
 23591 017c 7A68     		ldr	r2, [r7, #4]
 23592 017e 46F24043 		movw	r3, #25664
 23593 0182 C4F20203 		movt	r3, 16386
 23594 0186 9A42     		cmp	r2, r3
 23595 0188 07D1     		bne	.L13
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 23596              		.loc 1 268 0
 23597 018a 4FF4C843 		mov	r3, #25600
 23598 018e C4F20203 		movt	r3, 16386
 23599 0192 4FF47412 		mov	r2, #3997696
 23600 0196 9A60     		str	r2, [r3, #8]
 23601 0198 4FE0     		b	.L1
 23602              	.L13:
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 23603              		.loc 1 270 0
 23604 019a 7A68     		ldr	r2, [r7, #4]
 23605 019c 46F25843 		movw	r3, #25688
 23606 01a0 C4F20203 		movt	r3, 16386
 23607 01a4 9A42     		cmp	r2, r3
 23608 01a6 07D1     		bne	.L14
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 23609              		.loc 1 273 0
 23610 01a8 4FF4C843 		mov	r3, #25600
 23611 01ac C4F20203 		movt	r3, 16386
 23612 01b0 4FF07462 		mov	r2, #255852544
 23613 01b4 9A60     		str	r2, [r3, #8]
 23614 01b6 40E0     		b	.L1
 23615              	.L14:
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 23616              		.loc 1 275 0
 23617 01b8 7A68     		ldr	r2, [r7, #4]
 23618 01ba 46F27043 		movw	r3, #25712
 23619 01be C4F20203 		movt	r3, 16386
 23620 01c2 9A42     		cmp	r2, r3
 23621 01c4 09D1     		bne	.L15
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 23622              		.loc 1 278 0
 23623 01c6 4FF4C843 		mov	r3, #25600
 23624 01ca C4F20203 		movt	r3, 16386
 23625 01ce 4FF03D02 		mov	r2, #61
 23626 01d2 C2F20002 		movt	r2, 8192
 23627 01d6 DA60     		str	r2, [r3, #12]
 23628 01d8 2FE0     		b	.L1
 23629              	.L15:
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 23630              		.loc 1 280 0
 23631 01da 7A68     		ldr	r2, [r7, #4]
 23632 01dc 46F28843 		movw	r3, #25736
 23633 01e0 C4F20203 		movt	r3, 16386
 23634 01e4 9A42     		cmp	r2, r3
 23635 01e6 09D1     		bne	.L16
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 23636              		.loc 1 283 0
 23637 01e8 4FF4C843 		mov	r3, #25600
 23638 01ec C4F20203 		movt	r3, 16386
 23639 01f0 4FF47462 		mov	r2, #3904
 23640 01f4 C2F20002 		movt	r2, 8192
 23641 01f8 DA60     		str	r2, [r3, #12]
 23642 01fa 1EE0     		b	.L1
 23643              	.L16:
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 23644              		.loc 1 285 0
 23645 01fc 7A68     		ldr	r2, [r7, #4]
 23646 01fe 46F2A043 		movw	r3, #25760
 23647 0202 C4F20203 		movt	r3, 16386
 23648 0206 9A42     		cmp	r2, r3
 23649 0208 09D1     		bne	.L17
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 23650              		.loc 1 288 0
 23651 020a 4FF4C843 		mov	r3, #25600
 23652 020e C4F20203 		movt	r3, 16386
 23653 0212 4FF00002 		mov	r2, #0
 23654 0216 C2F23D02 		movt	r2, 8253
 23655 021a DA60     		str	r2, [r3, #12]
 23656 021c 0DE0     		b	.L1
 23657              	.L17:
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else 
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 23658              		.loc 1 292 0
 23659 021e 7A68     		ldr	r2, [r7, #4]
 23660 0220 46F2B843 		movw	r3, #25784
 23661 0224 C4F20203 		movt	r3, 16386
 23662 0228 9A42     		cmp	r2, r3
 23663 022a 06D1     		bne	.L1
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     {
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 23664              		.loc 1 295 0
 23665 022c 4FF4C843 		mov	r3, #25600
 23666 0230 C4F20203 		movt	r3, 16386
 23667 0234 4FF03D52 		mov	r2, #792723456
 23668 0238 DA60     		str	r2, [r3, #12]
 23669              	.L1:
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     }
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 23670              		.loc 1 298 0
 23671 023a 07F10C07 		add	r7, r7, #12
 23672 023e BD46     		mov	sp, r7
 23673 0240 80BC     		pop	{r7}
 23674 0242 7047     		bx	lr
 23675              		.cfi_endproc
 23676              	.LFE29:
 23678              		.align	2
 23679              		.global	DMA_Init
 23680              		.thumb
 23681              		.thumb_func
 23683              	DMA_Init:
 23684              	.LFB30:
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         the DMA_InitStruct structure.
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         to 7 to select the DMA Stream.
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 23685              		.loc 1 312 0
 23686              		.cfi_startproc
 23687              		@ args = 0, pretend = 0, frame = 16
 23688              		@ frame_needed = 1, uses_anonymous_args = 0
 23689              		@ link register save eliminated.
 23690 0244 80B4     		push	{r7}
 23691              	.LCFI3:
 23692              		.cfi_def_cfa_offset 4
 23693 0246 85B0     		sub	sp, sp, #20
 23694              	.LCFI4:
 23695              		.cfi_def_cfa_offset 24
 23696 0248 00AF     		add	r7, sp, #0
 23697              		.cfi_offset 7, -4
 23698              	.LCFI5:
 23699              		.cfi_def_cfa_register 7
 23700 024a 7860     		str	r0, [r7, #4]
 23701 024c 3960     		str	r1, [r7, #0]
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   uint32_t tmpreg = 0;
 23702              		.loc 1 313 0
 23703 024e 4FF00003 		mov	r3, #0
 23704 0252 FB60     		str	r3, [r7, #12]
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 23705              		.loc 1 333 0
 23706 0254 7B68     		ldr	r3, [r7, #4]
 23707 0256 1B68     		ldr	r3, [r3, #0]
 23708 0258 FB60     		str	r3, [r7, #12]
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 23709              		.loc 1 336 0
 23710 025a FA68     		ldr	r2, [r7, #12]
 23711 025c 48F23F03 		movw	r3, #32831
 23712 0260 CFF21C03 		movt	r3, 61468
 23713 0264 02EA0303 		and	r3, r2, r3
 23714 0268 FB60     		str	r3, [r7, #12]
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                          DMA_SxCR_DIR));
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Configure DMAy Streamx: */
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 23715              		.loc 1 352 0
 23716 026a 3B68     		ldr	r3, [r7, #0]
 23717 026c 1A68     		ldr	r2, [r3, #0]
 23718 026e 3B68     		ldr	r3, [r7, #0]
 23719 0270 DB68     		ldr	r3, [r3, #12]
 23720 0272 42EA0302 		orr	r2, r2, r3
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 23721              		.loc 1 353 0
 23722 0276 3B68     		ldr	r3, [r7, #0]
 23723 0278 5B69     		ldr	r3, [r3, #20]
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 23724              		.loc 1 352 0
 23725 027a 42EA0302 		orr	r2, r2, r3
 23726              		.loc 1 353 0
 23727 027e 3B68     		ldr	r3, [r7, #0]
 23728 0280 9B69     		ldr	r3, [r3, #24]
 23729 0282 42EA0302 		orr	r2, r2, r3
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 23730              		.loc 1 354 0
 23731 0286 3B68     		ldr	r3, [r7, #0]
 23732 0288 DB69     		ldr	r3, [r3, #28]
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 23733              		.loc 1 353 0
 23734 028a 42EA0302 		orr	r2, r2, r3
 23735              		.loc 1 354 0
 23736 028e 3B68     		ldr	r3, [r7, #0]
 23737 0290 1B6A     		ldr	r3, [r3, #32]
 23738 0292 42EA0302 		orr	r2, r2, r3
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 23739              		.loc 1 355 0
 23740 0296 3B68     		ldr	r3, [r7, #0]
 23741 0298 5B6A     		ldr	r3, [r3, #36]
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 23742              		.loc 1 354 0
 23743 029a 42EA0302 		orr	r2, r2, r3
 23744              		.loc 1 355 0
 23745 029e 3B68     		ldr	r3, [r7, #0]
 23746 02a0 9B6A     		ldr	r3, [r3, #40]
 23747 02a2 42EA0302 		orr	r2, r2, r3
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 23748              		.loc 1 356 0
 23749 02a6 3B68     		ldr	r3, [r7, #0]
 23750 02a8 5B6B     		ldr	r3, [r3, #52]
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 23751              		.loc 1 355 0
 23752 02aa 42EA0302 		orr	r2, r2, r3
 23753              		.loc 1 356 0
 23754 02ae 3B68     		ldr	r3, [r7, #0]
 23755 02b0 9B6B     		ldr	r3, [r3, #56]
 23756 02b2 42EA0303 		orr	r3, r2, r3
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 23757              		.loc 1 352 0
 23758 02b6 FA68     		ldr	r2, [r7, #12]
 23759 02b8 42EA0303 		orr	r3, r2, r3
 23760 02bc FB60     		str	r3, [r7, #12]
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Write to DMAy Streamx CR register */
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 23761              		.loc 1 359 0
 23762 02be 7B68     		ldr	r3, [r7, #4]
 23763 02c0 FA68     		ldr	r2, [r7, #12]
 23764 02c2 1A60     		str	r2, [r3, #0]
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 23765              		.loc 1 363 0
 23766 02c4 7B68     		ldr	r3, [r7, #4]
 23767 02c6 5B69     		ldr	r3, [r3, #20]
 23768 02c8 FB60     		str	r3, [r7, #12]
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Clear DMDIS and FTH bits */
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 23769              		.loc 1 366 0
 23770 02ca FB68     		ldr	r3, [r7, #12]
 23771 02cc 23F00703 		bic	r3, r3, #7
 23772 02d0 FB60     		str	r3, [r7, #12]
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 23773              		.loc 1 371 0
 23774 02d2 3B68     		ldr	r3, [r7, #0]
 23775 02d4 DA6A     		ldr	r2, [r3, #44]
 23776 02d6 3B68     		ldr	r3, [r7, #0]
 23777 02d8 1B6B     		ldr	r3, [r3, #48]
 23778 02da 42EA0303 		orr	r3, r2, r3
 23779 02de FA68     		ldr	r2, [r7, #12]
 23780 02e0 42EA0303 		orr	r3, r2, r3
 23781 02e4 FB60     		str	r3, [r7, #12]
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Write to DMAy Streamx CR */
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 23782              		.loc 1 374 0
 23783 02e6 7B68     		ldr	r3, [r7, #4]
 23784 02e8 FA68     		ldr	r2, [r7, #12]
 23785 02ea 5A61     		str	r2, [r3, #20]
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 23786              		.loc 1 378 0
 23787 02ec 3B68     		ldr	r3, [r7, #0]
 23788 02ee 1A69     		ldr	r2, [r3, #16]
 23789 02f0 7B68     		ldr	r3, [r7, #4]
 23790 02f2 5A60     		str	r2, [r3, #4]
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Write to DMAy Streamx PAR */
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 23791              		.loc 1 382 0
 23792 02f4 3B68     		ldr	r3, [r7, #0]
 23793 02f6 5A68     		ldr	r2, [r3, #4]
 23794 02f8 7B68     		ldr	r3, [r7, #4]
 23795 02fa 9A60     		str	r2, [r3, #8]
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 23796              		.loc 1 386 0
 23797 02fc 3B68     		ldr	r3, [r7, #0]
 23798 02fe 9A68     		ldr	r2, [r3, #8]
 23799 0300 7B68     		ldr	r3, [r7, #4]
 23800 0302 DA60     		str	r2, [r3, #12]
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 23801              		.loc 1 387 0
 23802 0304 07F11407 		add	r7, r7, #20
 23803 0308 BD46     		mov	sp, r7
 23804 030a 80BC     		pop	{r7}
 23805 030c 7047     		bx	lr
 23806              		.cfi_endproc
 23807              	.LFE30:
 23809 030e 00BF     		.align	2
 23810              		.global	DMA_StructInit
 23811              		.thumb
 23812              		.thumb_func
 23814              	DMA_StructInit:
 23815              	.LFB31:
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         be initialized.
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 23816              		.loc 1 396 0
 23817              		.cfi_startproc
 23818              		@ args = 0, pretend = 0, frame = 8
 23819              		@ frame_needed = 1, uses_anonymous_args = 0
 23820              		@ link register save eliminated.
 23821 0310 80B4     		push	{r7}
 23822              	.LCFI6:
 23823              		.cfi_def_cfa_offset 4
 23824 0312 83B0     		sub	sp, sp, #12
 23825              	.LCFI7:
 23826              		.cfi_def_cfa_offset 16
 23827 0314 00AF     		add	r7, sp, #0
 23828              		.cfi_offset 7, -4
 23829              	.LCFI8:
 23830              		.cfi_def_cfa_register 7
 23831 0316 7860     		str	r0, [r7, #4]
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_Channel member */
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 23832              		.loc 1 399 0
 23833 0318 7B68     		ldr	r3, [r7, #4]
 23834 031a 4FF00002 		mov	r2, #0
 23835 031e 1A60     		str	r2, [r3, #0]
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 23836              		.loc 1 402 0
 23837 0320 7B68     		ldr	r3, [r7, #4]
 23838 0322 4FF00002 		mov	r2, #0
 23839 0326 5A60     		str	r2, [r3, #4]
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 23840              		.loc 1 405 0
 23841 0328 7B68     		ldr	r3, [r7, #4]
 23842 032a 4FF00002 		mov	r2, #0
 23843 032e 9A60     		str	r2, [r3, #8]
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_DIR member */
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 23844              		.loc 1 408 0
 23845 0330 7B68     		ldr	r3, [r7, #4]
 23846 0332 4FF00002 		mov	r2, #0
 23847 0336 DA60     		str	r2, [r3, #12]
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 23848              		.loc 1 411 0
 23849 0338 7B68     		ldr	r3, [r7, #4]
 23850 033a 4FF00002 		mov	r2, #0
 23851 033e 1A61     		str	r2, [r3, #16]
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 23852              		.loc 1 414 0
 23853 0340 7B68     		ldr	r3, [r7, #4]
 23854 0342 4FF00002 		mov	r2, #0
 23855 0346 5A61     		str	r2, [r3, #20]
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 23856              		.loc 1 417 0
 23857 0348 7B68     		ldr	r3, [r7, #4]
 23858 034a 4FF00002 		mov	r2, #0
 23859 034e 9A61     		str	r2, [r3, #24]
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 23860              		.loc 1 420 0
 23861 0350 7B68     		ldr	r3, [r7, #4]
 23862 0352 4FF00002 		mov	r2, #0
 23863 0356 DA61     		str	r2, [r3, #28]
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 23864              		.loc 1 423 0
 23865 0358 7B68     		ldr	r3, [r7, #4]
 23866 035a 4FF00002 		mov	r2, #0
 23867 035e 1A62     		str	r2, [r3, #32]
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_Mode member */
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 23868              		.loc 1 426 0
 23869 0360 7B68     		ldr	r3, [r7, #4]
 23870 0362 4FF00002 		mov	r2, #0
 23871 0366 5A62     		str	r2, [r3, #36]
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_Priority member */
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 23872              		.loc 1 429 0
 23873 0368 7B68     		ldr	r3, [r7, #4]
 23874 036a 4FF00002 		mov	r2, #0
 23875 036e 9A62     		str	r2, [r3, #40]
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 23876              		.loc 1 432 0
 23877 0370 7B68     		ldr	r3, [r7, #4]
 23878 0372 4FF00002 		mov	r2, #0
 23879 0376 DA62     		str	r2, [r3, #44]
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 23880              		.loc 1 435 0
 23881 0378 7B68     		ldr	r3, [r7, #4]
 23882 037a 4FF00002 		mov	r2, #0
 23883 037e 1A63     		str	r2, [r3, #48]
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 23884              		.loc 1 438 0
 23885 0380 7B68     		ldr	r3, [r7, #4]
 23886 0382 4FF00002 		mov	r2, #0
 23887 0386 5A63     		str	r2, [r3, #52]
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 23888              		.loc 1 441 0
 23889 0388 7B68     		ldr	r3, [r7, #4]
 23890 038a 4FF00002 		mov	r2, #0
 23891 038e 9A63     		str	r2, [r3, #56]
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 23892              		.loc 1 442 0
 23893 0390 07F10C07 		add	r7, r7, #12
 23894 0394 BD46     		mov	sp, r7
 23895 0396 80BC     		pop	{r7}
 23896 0398 7047     		bx	lr
 23897              		.cfi_endproc
 23898              	.LFE31:
 23900 039a 00BF     		.align	2
 23901              		.global	DMA_Cmd
 23902              		.thumb
 23903              		.thumb_func
 23905              	DMA_Cmd:
 23906              	.LFB32:
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         to 7 to select the DMA Stream.
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        the point where it was paused.          
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *    
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        parameter is wrong.
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *        this single data is finished.            
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *    
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 23907              		.loc 1 471 0
 23908              		.cfi_startproc
 23909              		@ args = 0, pretend = 0, frame = 8
 23910              		@ frame_needed = 1, uses_anonymous_args = 0
 23911              		@ link register save eliminated.
 23912 039c 80B4     		push	{r7}
 23913              	.LCFI9:
 23914              		.cfi_def_cfa_offset 4
 23915 039e 83B0     		sub	sp, sp, #12
 23916              	.LCFI10:
 23917              		.cfi_def_cfa_offset 16
 23918 03a0 00AF     		add	r7, sp, #0
 23919              		.cfi_offset 7, -4
 23920              	.LCFI11:
 23921              		.cfi_def_cfa_register 7
 23922 03a2 7860     		str	r0, [r7, #4]
 23923 03a4 0B46     		mov	r3, r1
 23924 03a6 FB70     		strb	r3, [r7, #3]
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (NewState != DISABLE)
 23925              		.loc 1 476 0
 23926 03a8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23927 03aa 002B     		cmp	r3, #0
 23928 03ac 06D0     		beq	.L21
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 23929              		.loc 1 479 0
 23930 03ae 7B68     		ldr	r3, [r7, #4]
 23931 03b0 1B68     		ldr	r3, [r3, #0]
 23932 03b2 43F00102 		orr	r2, r3, #1
 23933 03b6 7B68     		ldr	r3, [r7, #4]
 23934 03b8 1A60     		str	r2, [r3, #0]
 23935 03ba 05E0     		b	.L20
 23936              	.L21:
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 23937              		.loc 1 484 0
 23938 03bc 7B68     		ldr	r3, [r7, #4]
 23939 03be 1B68     		ldr	r3, [r3, #0]
 23940 03c0 23F00102 		bic	r2, r3, #1
 23941 03c4 7B68     		ldr	r3, [r7, #4]
 23942 03c6 1A60     		str	r2, [r3, #0]
 23943              	.L20:
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 23944              		.loc 1 486 0
 23945 03c8 07F10C07 		add	r7, r7, #12
 23946 03cc BD46     		mov	sp, r7
 23947 03ce 80BC     		pop	{r7}
 23948 03d0 7047     		bx	lr
 23949              		.cfi_endproc
 23950              	.LFE32:
 23952 03d2 00BF     		.align	2
 23953              		.global	DMA_PeriphIncOffsetSizeConfig
 23954              		.thumb
 23955              		.thumb_func
 23957              	DMA_PeriphIncOffsetSizeConfig:
 23958              	.LFB33:
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         (32-bit aligned addresses).
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *   
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *     
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be one of the following values:
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 23959              		.loc 1 507 0
 23960              		.cfi_startproc
 23961              		@ args = 0, pretend = 0, frame = 8
 23962              		@ frame_needed = 1, uses_anonymous_args = 0
 23963              		@ link register save eliminated.
 23964 03d4 80B4     		push	{r7}
 23965              	.LCFI12:
 23966              		.cfi_def_cfa_offset 4
 23967 03d6 83B0     		sub	sp, sp, #12
 23968              	.LCFI13:
 23969              		.cfi_def_cfa_offset 16
 23970 03d8 00AF     		add	r7, sp, #0
 23971              		.cfi_offset 7, -4
 23972              	.LCFI14:
 23973              		.cfi_def_cfa_register 7
 23974 03da 7860     		str	r0, [r7, #4]
 23975 03dc 3960     		str	r1, [r7, #0]
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the needed Peripheral increment offset */
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 23976              		.loc 1 513 0
 23977 03de 3B68     		ldr	r3, [r7, #0]
 23978 03e0 002B     		cmp	r3, #0
 23979 03e2 06D0     		beq	.L24
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 23980              		.loc 1 516 0
 23981 03e4 7B68     		ldr	r3, [r7, #4]
 23982 03e6 1B68     		ldr	r3, [r3, #0]
 23983 03e8 43F40042 		orr	r2, r3, #32768
 23984 03ec 7B68     		ldr	r3, [r7, #4]
 23985 03ee 1A60     		str	r2, [r3, #0]
 23986 03f0 05E0     		b	.L23
 23987              	.L24:
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 23988              		.loc 1 521 0
 23989 03f2 7B68     		ldr	r3, [r7, #4]
 23990 03f4 1B68     		ldr	r3, [r3, #0]
 23991 03f6 23F40042 		bic	r2, r3, #32768
 23992 03fa 7B68     		ldr	r3, [r7, #4]
 23993 03fc 1A60     		str	r2, [r3, #0]
 23994              	.L23:
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 23995              		.loc 1 523 0
 23996 03fe 07F10C07 		add	r7, r7, #12
 23997 0402 BD46     		mov	sp, r7
 23998 0404 80BC     		pop	{r7}
 23999 0406 7047     		bx	lr
 24000              		.cfi_endproc
 24001              	.LFE33:
 24003              		.align	2
 24004              		.global	DMA_FlowControllerConfig
 24005              		.thumb
 24006              		.thumb_func
 24008              	DMA_FlowControllerConfig:
 24009              	.LFB34:
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *       
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         the Flow Controller mode or not.    
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *  
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be one of the following values:
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                                      the DMA controller.
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                                          is the peripheral.    
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24010              		.loc 1 543 0
 24011              		.cfi_startproc
 24012              		@ args = 0, pretend = 0, frame = 8
 24013              		@ frame_needed = 1, uses_anonymous_args = 0
 24014              		@ link register save eliminated.
 24015 0408 80B4     		push	{r7}
 24016              	.LCFI15:
 24017              		.cfi_def_cfa_offset 4
 24018 040a 83B0     		sub	sp, sp, #12
 24019              	.LCFI16:
 24020              		.cfi_def_cfa_offset 16
 24021 040c 00AF     		add	r7, sp, #0
 24022              		.cfi_offset 7, -4
 24023              	.LCFI17:
 24024              		.cfi_def_cfa_register 7
 24025 040e 7860     		str	r0, [r7, #4]
 24026 0410 3960     		str	r1, [r7, #0]
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the needed flow controller  */
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 24027              		.loc 1 549 0
 24028 0412 3B68     		ldr	r3, [r7, #0]
 24029 0414 002B     		cmp	r3, #0
 24030 0416 06D0     		beq	.L27
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 24031              		.loc 1 552 0
 24032 0418 7B68     		ldr	r3, [r7, #4]
 24033 041a 1B68     		ldr	r3, [r3, #0]
 24034 041c 43F02002 		orr	r2, r3, #32
 24035 0420 7B68     		ldr	r3, [r7, #4]
 24036 0422 1A60     		str	r2, [r3, #0]
 24037 0424 05E0     		b	.L26
 24038              	.L27:
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 24039              		.loc 1 557 0
 24040 0426 7B68     		ldr	r3, [r7, #4]
 24041 0428 1B68     		ldr	r3, [r3, #0]
 24042 042a 23F02002 		bic	r2, r3, #32
 24043 042e 7B68     		ldr	r3, [r7, #4]
 24044 0430 1A60     		str	r2, [r3, #0]
 24045              	.L26:
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24046              		.loc 1 559 0
 24047 0432 07F10C07 		add	r7, r7, #12
 24048 0436 BD46     		mov	sp, r7
 24049 0438 80BC     		pop	{r7}
 24050 043a 7047     		bx	lr
 24051              		.cfi_endproc
 24052              	.LFE34:
 24054              		.align	2
 24055              		.global	DMA_SetCurrDataCounter
 24056              		.thumb
 24057              		.thumb_func
 24059              	DMA_SetCurrDataCounter:
 24060              	.LFB35:
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @}
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  *  @brief   Data Counter functions 
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  *
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @verbatim   
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  ===============================================================================
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                            Data Counter functions
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  ===============================================================================  
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   (number of data to be transferred). 
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   (ie. after transfer complete event).
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The following function can be used to write the Stream data counter value:
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       only the Data buffer needs to be reloaded.
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       transfers from the Peripheral point of view.
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       from/to the peripheral.
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   transfer and when the transfer is complete: 
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****      (configured before enabling the DMA Stream)
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The following function can be used to read the Stream data counter value:
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @endverbatim
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @{
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         to total number of bytes to be transferred.
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *      
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *      
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24061              		.loc 1 627 0
 24062              		.cfi_startproc
 24063              		@ args = 0, pretend = 0, frame = 8
 24064              		@ frame_needed = 1, uses_anonymous_args = 0
 24065              		@ link register save eliminated.
 24066 043c 80B4     		push	{r7}
 24067              	.LCFI18:
 24068              		.cfi_def_cfa_offset 4
 24069 043e 83B0     		sub	sp, sp, #12
 24070              	.LCFI19:
 24071              		.cfi_def_cfa_offset 16
 24072 0440 00AF     		add	r7, sp, #0
 24073              		.cfi_offset 7, -4
 24074              	.LCFI20:
 24075              		.cfi_def_cfa_register 7
 24076 0442 7860     		str	r0, [r7, #4]
 24077 0444 0B46     		mov	r3, r1
 24078 0446 7B80     		strh	r3, [r7, #2]	@ movhi
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Write the number of data units to be transferred */
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 24079              		.loc 1 632 0
 24080 0448 7A88     		ldrh	r2, [r7, #2]
 24081 044a 7B68     		ldr	r3, [r7, #4]
 24082 044c 5A60     		str	r2, [r3, #4]
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24083              		.loc 1 633 0
 24084 044e 07F10C07 		add	r7, r7, #12
 24085 0452 BD46     		mov	sp, r7
 24086 0454 80BC     		pop	{r7}
 24087 0456 7047     		bx	lr
 24088              		.cfi_endproc
 24089              	.LFE35:
 24091              		.align	2
 24092              		.global	DMA_GetCurrDataCounter
 24093              		.thumb
 24094              		.thumb_func
 24096              	DMA_GetCurrDataCounter:
 24097              	.LFB36:
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24098              		.loc 1 642 0
 24099              		.cfi_startproc
 24100              		@ args = 0, pretend = 0, frame = 8
 24101              		@ frame_needed = 1, uses_anonymous_args = 0
 24102              		@ link register save eliminated.
 24103 0458 80B4     		push	{r7}
 24104              	.LCFI21:
 24105              		.cfi_def_cfa_offset 4
 24106 045a 83B0     		sub	sp, sp, #12
 24107              	.LCFI22:
 24108              		.cfi_def_cfa_offset 16
 24109 045c 00AF     		add	r7, sp, #0
 24110              		.cfi_offset 7, -4
 24111              	.LCFI23:
 24112              		.cfi_def_cfa_register 7
 24113 045e 7860     		str	r0, [r7, #4]
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 24114              		.loc 1 647 0
 24115 0460 7B68     		ldr	r3, [r7, #4]
 24116 0462 5B68     		ldr	r3, [r3, #4]
 24117 0464 9BB2     		uxth	r3, r3
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24118              		.loc 1 648 0
 24119 0466 1846     		mov	r0, r3
 24120 0468 07F10C07 		add	r7, r7, #12
 24121 046c BD46     		mov	sp, r7
 24122 046e 80BC     		pop	{r7}
 24123 0470 7047     		bx	lr
 24124              		.cfi_endproc
 24125              	.LFE36:
 24127 0472 00BF     		.align	2
 24128              		.global	DMA_DoubleBufferModeConfig
 24129              		.thumb
 24130              		.thumb_func
 24132              	DMA_DoubleBufferModeConfig:
 24133              	.LFB37:
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @}
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  *  @brief   Double Buffer mode functions 
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  *
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @verbatim   
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  ===============================================================================
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                          Double Buffer mode functions
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  ===============================================================================  
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   buffer mode parameters.
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   access time.
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   it when it should not be used).
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    used:
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   of target Memory 0 and vice versa).
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @endverbatim
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @{
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         and the current memory target.
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be one of the following values:
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *       
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *   
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {  
 24134              		.loc 1 720 0
 24135              		.cfi_startproc
 24136              		@ args = 0, pretend = 0, frame = 16
 24137              		@ frame_needed = 1, uses_anonymous_args = 0
 24138              		@ link register save eliminated.
 24139 0474 80B4     		push	{r7}
 24140              	.LCFI24:
 24141              		.cfi_def_cfa_offset 4
 24142 0476 85B0     		sub	sp, sp, #20
 24143              	.LCFI25:
 24144              		.cfi_def_cfa_offset 24
 24145 0478 00AF     		add	r7, sp, #0
 24146              		.cfi_offset 7, -4
 24147              	.LCFI26:
 24148              		.cfi_def_cfa_register 7
 24149 047a F860     		str	r0, [r7, #12]
 24150 047c B960     		str	r1, [r7, #8]
 24151 047e 7A60     		str	r2, [r7, #4]
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 24152              		.loc 1 725 0
 24153 0480 7B68     		ldr	r3, [r7, #4]
 24154 0482 002B     		cmp	r3, #0
 24155 0484 06D0     		beq	.L32
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Set Memory 1 as current memory address */
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 24156              		.loc 1 728 0
 24157 0486 FB68     		ldr	r3, [r7, #12]
 24158 0488 1B68     		ldr	r3, [r3, #0]
 24159 048a 43F40022 		orr	r2, r3, #524288
 24160 048e FB68     		ldr	r3, [r7, #12]
 24161 0490 1A60     		str	r2, [r3, #0]
 24162 0492 05E0     		b	.L33
 24163              	.L32:
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Set Memory 0 as current memory address */
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 24164              		.loc 1 733 0
 24165 0494 FB68     		ldr	r3, [r7, #12]
 24166 0496 1B68     		ldr	r3, [r3, #0]
 24167 0498 23F40022 		bic	r2, r3, #524288
 24168 049c FB68     		ldr	r3, [r7, #12]
 24169 049e 1A60     		str	r2, [r3, #0]
 24170              	.L33:
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 24171              		.loc 1 737 0
 24172 04a0 FB68     		ldr	r3, [r7, #12]
 24173 04a2 BA68     		ldr	r2, [r7, #8]
 24174 04a4 1A61     		str	r2, [r3, #16]
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24175              		.loc 1 738 0
 24176 04a6 07F11407 		add	r7, r7, #20
 24177 04aa BD46     		mov	sp, r7
 24178 04ac 80BC     		pop	{r7}
 24179 04ae 7047     		bx	lr
 24180              		.cfi_endproc
 24181              	.LFE37:
 24183              		.align	2
 24184              		.global	DMA_DoubleBufferModeCmd
 24185              		.thumb
 24186              		.thumb_func
 24188              	DMA_DoubleBufferModeCmd:
 24189              	.LFB38:
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {  
 24190              		.loc 1 750 0
 24191              		.cfi_startproc
 24192              		@ args = 0, pretend = 0, frame = 8
 24193              		@ frame_needed = 1, uses_anonymous_args = 0
 24194              		@ link register save eliminated.
 24195 04b0 80B4     		push	{r7}
 24196              	.LCFI27:
 24197              		.cfi_def_cfa_offset 4
 24198 04b2 83B0     		sub	sp, sp, #12
 24199              	.LCFI28:
 24200              		.cfi_def_cfa_offset 16
 24201 04b4 00AF     		add	r7, sp, #0
 24202              		.cfi_offset 7, -4
 24203              	.LCFI29:
 24204              		.cfi_def_cfa_register 7
 24205 04b6 7860     		str	r0, [r7, #4]
 24206 04b8 0B46     		mov	r3, r1
 24207 04ba FB70     		strb	r3, [r7, #3]
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Configure the Double Buffer mode */
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (NewState != DISABLE)
 24208              		.loc 1 756 0
 24209 04bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24210 04be 002B     		cmp	r3, #0
 24211 04c0 06D0     		beq	.L35
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Enable the Double buffer mode */
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 24212              		.loc 1 759 0
 24213 04c2 7B68     		ldr	r3, [r7, #4]
 24214 04c4 1B68     		ldr	r3, [r3, #0]
 24215 04c6 43F48022 		orr	r2, r3, #262144
 24216 04ca 7B68     		ldr	r3, [r7, #4]
 24217 04cc 1A60     		str	r2, [r3, #0]
 24218 04ce 05E0     		b	.L34
 24219              	.L35:
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Disable the Double buffer mode */
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 24220              		.loc 1 764 0
 24221 04d0 7B68     		ldr	r3, [r7, #4]
 24222 04d2 1B68     		ldr	r3, [r3, #0]
 24223 04d4 23F48022 		bic	r2, r3, #262144
 24224 04d8 7B68     		ldr	r3, [r7, #4]
 24225 04da 1A60     		str	r2, [r3, #0]
 24226              	.L34:
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24227              		.loc 1 766 0
 24228 04dc 07F10C07 		add	r7, r7, #12
 24229 04e0 BD46     		mov	sp, r7
 24230 04e2 80BC     		pop	{r7}
 24231 04e4 7047     		bx	lr
 24232              		.cfi_endproc
 24233              	.LFE38:
 24235 04e6 00BF     		.align	2
 24236              		.global	DMA_MemoryTargetConfig
 24237              		.thumb
 24238              		.thumb_func
 24240              	DMA_MemoryTargetConfig:
 24241              	.LFB39:
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         This parameter can be one of the following values:
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * 
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          address of Memory 0.
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *  
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24242              		.loc 1 792 0
 24243              		.cfi_startproc
 24244              		@ args = 0, pretend = 0, frame = 16
 24245              		@ frame_needed = 1, uses_anonymous_args = 0
 24246              		@ link register save eliminated.
 24247 04e8 80B4     		push	{r7}
 24248              	.LCFI30:
 24249              		.cfi_def_cfa_offset 4
 24250 04ea 85B0     		sub	sp, sp, #20
 24251              	.LCFI31:
 24252              		.cfi_def_cfa_offset 24
 24253 04ec 00AF     		add	r7, sp, #0
 24254              		.cfi_offset 7, -4
 24255              	.LCFI32:
 24256              		.cfi_def_cfa_register 7
 24257 04ee F860     		str	r0, [r7, #12]
 24258 04f0 B960     		str	r1, [r7, #8]
 24259 04f2 7A60     		str	r2, [r7, #4]
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the Memory target to be configured */
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 24260              		.loc 1 798 0
 24261 04f4 7B68     		ldr	r3, [r7, #4]
 24262 04f6 002B     		cmp	r3, #0
 24263 04f8 03D0     		beq	.L38
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 24264              		.loc 1 801 0
 24265 04fa FB68     		ldr	r3, [r7, #12]
 24266 04fc BA68     		ldr	r2, [r7, #8]
 24267 04fe 1A61     		str	r2, [r3, #16]
 24268 0500 02E0     		b	.L37
 24269              	.L38:
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }  
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 24270              		.loc 1 806 0
 24271 0502 FB68     		ldr	r3, [r7, #12]
 24272 0504 BA68     		ldr	r2, [r7, #8]
 24273 0506 DA60     		str	r2, [r3, #12]
 24274              	.L37:
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24275              		.loc 1 808 0
 24276 0508 07F11407 		add	r7, r7, #20
 24277 050c BD46     		mov	sp, r7
 24278 050e 80BC     		pop	{r7}
 24279 0510 7047     		bx	lr
 24280              		.cfi_endproc
 24281              	.LFE39:
 24283 0512 00BF     		.align	2
 24284              		.global	DMA_GetCurrentMemoryTarget
 24285              		.thumb
 24286              		.thumb_func
 24288              	DMA_GetCurrentMemoryTarget:
 24289              	.LFB40:
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24290              		.loc 1 817 0
 24291              		.cfi_startproc
 24292              		@ args = 0, pretend = 0, frame = 16
 24293              		@ frame_needed = 1, uses_anonymous_args = 0
 24294              		@ link register save eliminated.
 24295 0514 80B4     		push	{r7}
 24296              	.LCFI33:
 24297              		.cfi_def_cfa_offset 4
 24298 0516 85B0     		sub	sp, sp, #20
 24299              	.LCFI34:
 24300              		.cfi_def_cfa_offset 24
 24301 0518 00AF     		add	r7, sp, #0
 24302              		.cfi_offset 7, -4
 24303              	.LCFI35:
 24304              		.cfi_def_cfa_register 7
 24305 051a 7860     		str	r0, [r7, #4]
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   uint32_t tmp = 0;
 24306              		.loc 1 818 0
 24307 051c 4FF00003 		mov	r3, #0
 24308 0520 FB60     		str	r3, [r7, #12]
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Get the current memory target */
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 24309              		.loc 1 824 0
 24310 0522 7B68     		ldr	r3, [r7, #4]
 24311 0524 1B68     		ldr	r3, [r3, #0]
 24312 0526 03F40023 		and	r3, r3, #524288
 24313 052a 002B     		cmp	r3, #0
 24314 052c 03D0     		beq	.L41
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     tmp = 1;
 24315              		.loc 1 827 0
 24316 052e 4FF00103 		mov	r3, #1
 24317 0532 FB60     		str	r3, [r7, #12]
 24318 0534 02E0     		b	.L42
 24319              	.L41:
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }  
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     tmp = 0;    
 24320              		.loc 1 832 0
 24321 0536 4FF00003 		mov	r3, #0
 24322 053a FB60     		str	r3, [r7, #12]
 24323              	.L42:
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   return tmp;
 24324              		.loc 1 834 0
 24325 053c FB68     		ldr	r3, [r7, #12]
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24326              		.loc 1 835 0
 24327 053e 1846     		mov	r0, r3
 24328 0540 07F11407 		add	r7, r7, #20
 24329 0544 BD46     		mov	sp, r7
 24330 0546 80BC     		pop	{r7}
 24331 0548 7047     		bx	lr
 24332              		.cfi_endproc
 24333              	.LFE40:
 24335 054a 00BF     		.align	2
 24336              		.global	DMA_GetCmdStatus
 24337              		.thumb
 24338              		.thumb_func
 24340              	DMA_GetCmdStatus:
 24341              	.LFB41:
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @}
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  *
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @verbatim   
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  ===============================================================================
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****                   Interrupts and flags management functions
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  ===============================================================================  
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   This subsection provides functions allowing to
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    - Check the DMA enable status
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    - Check the FIFO status 
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  1. DMA Enable status:
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    this data transfer completion.
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    To monitor this state it is possible to use the following function:
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  2. FIFO Status:
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    function:
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  3. DMA Interrupts and Flags:
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   Polling Mode
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   =============
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     (x : DMA Stream number )
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****    In this Mode it is advised to use the following functions:
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   Interrupt Mode
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   ===============
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     Interrupt Source
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     ----------------
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****      
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   In this Mode it is advised to use the following functions:
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** @endverbatim
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @{
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *   
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          parameter is wrong.
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          of this single data is finished.  
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *      
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24342              		.loc 1 926 0
 24343              		.cfi_startproc
 24344              		@ args = 0, pretend = 0, frame = 16
 24345              		@ frame_needed = 1, uses_anonymous_args = 0
 24346              		@ link register save eliminated.
 24347 054c 80B4     		push	{r7}
 24348              	.LCFI36:
 24349              		.cfi_def_cfa_offset 4
 24350 054e 85B0     		sub	sp, sp, #20
 24351              	.LCFI37:
 24352              		.cfi_def_cfa_offset 24
 24353 0550 00AF     		add	r7, sp, #0
 24354              		.cfi_offset 7, -4
 24355              	.LCFI38:
 24356              		.cfi_def_cfa_register 7
 24357 0552 7860     		str	r0, [r7, #4]
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   FunctionalState state = DISABLE;
 24358              		.loc 1 927 0
 24359 0554 4FF00003 		mov	r3, #0
 24360 0558 FB73     		strb	r3, [r7, #15]
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 24361              		.loc 1 932 0
 24362 055a 7B68     		ldr	r3, [r7, #4]
 24363 055c 1B68     		ldr	r3, [r3, #0]
 24364 055e 03F00103 		and	r3, r3, #1
 24365 0562 DBB2     		uxtb	r3, r3
 24366 0564 002B     		cmp	r3, #0
 24367 0566 03D0     		beq	.L44
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     state = ENABLE;
 24368              		.loc 1 935 0
 24369 0568 4FF00103 		mov	r3, #1
 24370 056c FB73     		strb	r3, [r7, #15]
 24371 056e 02E0     		b	.L45
 24372              	.L44:
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****         all transfers are complete) */
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     state = DISABLE;
 24373              		.loc 1 941 0
 24374 0570 4FF00003 		mov	r3, #0
 24375 0574 FB73     		strb	r3, [r7, #15]
 24376              	.L45:
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   return state;
 24377              		.loc 1 943 0
 24378 0576 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24379              		.loc 1 944 0
 24380 0578 1846     		mov	r0, r3
 24381 057a 07F11407 		add	r7, r7, #20
 24382 057e BD46     		mov	sp, r7
 24383 0580 80BC     		pop	{r7}
 24384 0582 7047     		bx	lr
 24385              		.cfi_endproc
 24386              	.LFE41:
 24388              		.align	2
 24389              		.global	DMA_GetFIFOStatus
 24390              		.thumb
 24391              		.thumb_func
 24393              	DMA_GetFIFOStatus:
 24394              	.LFB42:
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         to 7 to select the DMA Stream.
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval The FIFO filling state.
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *                                               and not empty.
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24395              		.loc 1 960 0
 24396              		.cfi_startproc
 24397              		@ args = 0, pretend = 0, frame = 16
 24398              		@ frame_needed = 1, uses_anonymous_args = 0
 24399              		@ link register save eliminated.
 24400 0584 80B4     		push	{r7}
 24401              	.LCFI39:
 24402              		.cfi_def_cfa_offset 4
 24403 0586 85B0     		sub	sp, sp, #20
 24404              	.LCFI40:
 24405              		.cfi_def_cfa_offset 24
 24406 0588 00AF     		add	r7, sp, #0
 24407              		.cfi_offset 7, -4
 24408              	.LCFI41:
 24409              		.cfi_def_cfa_register 7
 24410 058a 7860     		str	r0, [r7, #4]
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   uint32_t tmpreg = 0;
 24411              		.loc 1 961 0
 24412 058c 4FF00003 		mov	r3, #0
 24413 0590 FB60     		str	r3, [r7, #12]
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Get the FIFO level bits */
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 24414              		.loc 1 967 0
 24415 0592 7B68     		ldr	r3, [r7, #4]
 24416 0594 5B69     		ldr	r3, [r3, #20]
 24417 0596 03F03803 		and	r3, r3, #56
 24418 059a FB60     		str	r3, [r7, #12]
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   return tmpreg;
 24419              		.loc 1 969 0
 24420 059c FB68     		ldr	r3, [r7, #12]
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24421              		.loc 1 970 0
 24422 059e 1846     		mov	r0, r3
 24423 05a0 07F11407 		add	r7, r7, #20
 24424 05a4 BD46     		mov	sp, r7
 24425 05a6 80BC     		pop	{r7}
 24426 05a8 7047     		bx	lr
 24427              		.cfi_endproc
 24428              	.LFE42:
 24430 05aa 00BF     		.align	2
 24431              		.global	DMA_GetFlagStatus
 24432              		.thumb
 24433              		.thumb_func
 24435              	DMA_GetFlagStatus:
 24436              	.LFB43:
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be one of the following values:
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24437              		.loc 1 987 0
 24438              		.cfi_startproc
 24439              		@ args = 0, pretend = 0, frame = 24
 24440              		@ frame_needed = 1, uses_anonymous_args = 0
 24441              		@ link register save eliminated.
 24442 05ac 80B4     		push	{r7}
 24443              	.LCFI42:
 24444              		.cfi_def_cfa_offset 4
 24445 05ae 87B0     		sub	sp, sp, #28
 24446              	.LCFI43:
 24447              		.cfi_def_cfa_offset 32
 24448 05b0 00AF     		add	r7, sp, #0
 24449              		.cfi_offset 7, -4
 24450              	.LCFI44:
 24451              		.cfi_def_cfa_register 7
 24452 05b2 7860     		str	r0, [r7, #4]
 24453 05b4 3960     		str	r1, [r7, #0]
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   FlagStatus bitstatus = RESET;
 24454              		.loc 1 988 0
 24455 05b6 4FF00003 		mov	r3, #0
 24456 05ba FB75     		strb	r3, [r7, #23]
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_TypeDef* DMAy;
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   uint32_t tmpreg = 0;
 24457              		.loc 1 990 0
 24458 05bc 4FF00003 		mov	r3, #0
 24459 05c0 FB60     		str	r3, [r7, #12]
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Determine the DMA to which belongs the stream */
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 24460              		.loc 1 997 0
 24461 05c2 7A68     		ldr	r2, [r7, #4]
 24462 05c4 46F20F43 		movw	r3, #25615
 24463 05c8 C4F20203 		movt	r3, 16386
 24464 05cc 9A42     		cmp	r2, r3
 24465 05ce 05D8     		bhi	.L48
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy = DMA1; 
 24466              		.loc 1 1000 0
 24467 05d0 4FF4C043 		mov	r3, #24576
 24468 05d4 C4F20203 		movt	r3, 16386
 24469 05d8 3B61     		str	r3, [r7, #16]
 24470 05da 04E0     		b	.L49
 24471              	.L48:
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   } 
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else 
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy = DMA2; 
 24472              		.loc 1 1005 0
 24473 05dc 4FF4C843 		mov	r3, #25600
 24474 05e0 C4F20203 		movt	r3, 16386
 24475 05e4 3B61     		str	r3, [r7, #16]
 24476              	.L49:
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 24477              		.loc 1 1009 0
 24478 05e6 3B68     		ldr	r3, [r7, #0]
 24479 05e8 03F00053 		and	r3, r3, #536870912
 24480 05ec 002B     		cmp	r3, #0
 24481 05ee 03D0     		beq	.L50
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Get DMAy HISR register value */
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     tmpreg = DMAy->HISR;
 24482              		.loc 1 1012 0
 24483 05f0 3B69     		ldr	r3, [r7, #16]
 24484 05f2 5B68     		ldr	r3, [r3, #4]
 24485 05f4 FB60     		str	r3, [r7, #12]
 24486 05f6 02E0     		b	.L51
 24487              	.L50:
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Get DMAy LISR register value */
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     tmpreg = DMAy->LISR;
 24488              		.loc 1 1017 0
 24489 05f8 3B69     		ldr	r3, [r7, #16]
 24490 05fa 1B68     		ldr	r3, [r3, #0]
 24491 05fc FB60     		str	r3, [r7, #12]
 24492              	.L51:
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }   
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Mask the reserved bits */
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 24493              		.loc 1 1021 0
 24494 05fe FA68     		ldr	r2, [r7, #12]
 24495 0600 40F67D73 		movw	r3, #3965
 24496 0604 C0F67D73 		movt	r3, 3965
 24497 0608 02EA0303 		and	r3, r2, r3
 24498 060c FB60     		str	r3, [r7, #12]
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the status of the specified DMA flag */
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 24499              		.loc 1 1024 0
 24500 060e FA68     		ldr	r2, [r7, #12]
 24501 0610 3B68     		ldr	r3, [r7, #0]
 24502 0612 02EA0303 		and	r3, r2, r3
 24503 0616 002B     		cmp	r3, #0
 24504 0618 03D0     		beq	.L52
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMA_FLAG is set */
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     bitstatus = SET;
 24505              		.loc 1 1027 0
 24506 061a 4FF00103 		mov	r3, #1
 24507 061e FB75     		strb	r3, [r7, #23]
 24508 0620 02E0     		b	.L53
 24509              	.L52:
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMA_FLAG is reset */
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     bitstatus = RESET;
 24510              		.loc 1 1032 0
 24511 0622 4FF00003 		mov	r3, #0
 24512 0626 FB75     		strb	r3, [r7, #23]
 24513              	.L53:
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Return the DMA_FLAG status */
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   return  bitstatus;
 24514              		.loc 1 1036 0
 24515 0628 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24516              		.loc 1 1037 0
 24517 062a 1846     		mov	r0, r3
 24518 062c 07F11C07 		add	r7, r7, #28
 24519 0630 BD46     		mov	sp, r7
 24520 0632 80BC     		pop	{r7}
 24521 0634 7047     		bx	lr
 24522              		.cfi_endproc
 24523              	.LFE43:
 24525 0636 00BF     		.align	2
 24526              		.global	DMA_ClearFlag
 24527              		.thumb
 24528              		.thumb_func
 24530              	DMA_ClearFlag:
 24531              	.LFB44:
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be any combination of the following values:
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24532              		.loc 1 1054 0
 24533              		.cfi_startproc
 24534              		@ args = 0, pretend = 0, frame = 16
 24535              		@ frame_needed = 1, uses_anonymous_args = 0
 24536              		@ link register save eliminated.
 24537 0638 80B4     		push	{r7}
 24538              	.LCFI45:
 24539              		.cfi_def_cfa_offset 4
 24540 063a 85B0     		sub	sp, sp, #20
 24541              	.LCFI46:
 24542              		.cfi_def_cfa_offset 24
 24543 063c 00AF     		add	r7, sp, #0
 24544              		.cfi_offset 7, -4
 24545              	.LCFI47:
 24546              		.cfi_def_cfa_register 7
 24547 063e 7860     		str	r0, [r7, #4]
 24548 0640 3960     		str	r1, [r7, #0]
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_TypeDef* DMAy;
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 24549              		.loc 1 1062 0
 24550 0642 7A68     		ldr	r2, [r7, #4]
 24551 0644 46F20F43 		movw	r3, #25615
 24552 0648 C4F20203 		movt	r3, 16386
 24553 064c 9A42     		cmp	r2, r3
 24554 064e 05D8     		bhi	.L55
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy = DMA1; 
 24555              		.loc 1 1065 0
 24556 0650 4FF4C043 		mov	r3, #24576
 24557 0654 C4F20203 		movt	r3, 16386
 24558 0658 FB60     		str	r3, [r7, #12]
 24559 065a 04E0     		b	.L56
 24560              	.L55:
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   } 
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else 
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy = DMA2; 
 24561              		.loc 1 1070 0
 24562 065c 4FF4C843 		mov	r3, #25600
 24563 0660 C4F20203 		movt	r3, 16386
 24564 0664 FB60     		str	r3, [r7, #12]
 24565              	.L56:
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 24566              		.loc 1 1074 0
 24567 0666 3B68     		ldr	r3, [r7, #0]
 24568 0668 03F00053 		and	r3, r3, #536870912
 24569 066c 002B     		cmp	r3, #0
 24570 066e 09D0     		beq	.L57
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 24571              		.loc 1 1077 0
 24572 0670 3A68     		ldr	r2, [r7, #0]
 24573 0672 40F67D73 		movw	r3, #3965
 24574 0676 C0F67D73 		movt	r3, 3965
 24575 067a 02EA0303 		and	r3, r2, r3
 24576 067e FA68     		ldr	r2, [r7, #12]
 24577 0680 D360     		str	r3, [r2, #12]
 24578 0682 08E0     		b	.L54
 24579              	.L57:
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else 
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 24580              		.loc 1 1082 0
 24581 0684 3A68     		ldr	r2, [r7, #0]
 24582 0686 40F67D73 		movw	r3, #3965
 24583 068a C0F67D73 		movt	r3, 3965
 24584 068e 02EA0303 		and	r3, r2, r3
 24585 0692 FA68     		ldr	r2, [r7, #12]
 24586 0694 9360     		str	r3, [r2, #8]
 24587              	.L54:
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }    
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24588              		.loc 1 1084 0
 24589 0696 07F11407 		add	r7, r7, #20
 24590 069a BD46     		mov	sp, r7
 24591 069c 80BC     		pop	{r7}
 24592 069e 7047     		bx	lr
 24593              		.cfi_endproc
 24594              	.LFE44:
 24596              		.align	2
 24597              		.global	DMA_ITConfig
 24598              		.thumb
 24599              		.thumb_func
 24601              	DMA_ITConfig:
 24602              	.LFB45:
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be any combination of the following values:
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24603              		.loc 1 1101 0
 24604              		.cfi_startproc
 24605              		@ args = 0, pretend = 0, frame = 16
 24606              		@ frame_needed = 1, uses_anonymous_args = 0
 24607              		@ link register save eliminated.
 24608 06a0 80B4     		push	{r7}
 24609              	.LCFI48:
 24610              		.cfi_def_cfa_offset 4
 24611 06a2 85B0     		sub	sp, sp, #20
 24612              	.LCFI49:
 24613              		.cfi_def_cfa_offset 24
 24614 06a4 00AF     		add	r7, sp, #0
 24615              		.cfi_offset 7, -4
 24616              	.LCFI50:
 24617              		.cfi_def_cfa_register 7
 24618 06a6 F860     		str	r0, [r7, #12]
 24619 06a8 B960     		str	r1, [r7, #8]
 24620 06aa 1346     		mov	r3, r2
 24621 06ac FB71     		strb	r3, [r7, #7]
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 24622              		.loc 1 1108 0
 24623 06ae BB68     		ldr	r3, [r7, #8]
 24624 06b0 03F08003 		and	r3, r3, #128
 24625 06b4 002B     		cmp	r3, #0
 24626 06b6 0FD0     		beq	.L60
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     if (NewState != DISABLE)
 24627              		.loc 1 1110 0
 24628 06b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24629 06ba 002B     		cmp	r3, #0
 24630 06bc 06D0     		beq	.L61
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     {
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 24631              		.loc 1 1113 0
 24632 06be FB68     		ldr	r3, [r7, #12]
 24633 06c0 5B69     		ldr	r3, [r3, #20]
 24634 06c2 43F08002 		orr	r2, r3, #128
 24635 06c6 FB68     		ldr	r3, [r7, #12]
 24636 06c8 5A61     		str	r2, [r3, #20]
 24637 06ca 05E0     		b	.L60
 24638              	.L61:
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     }    
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     else 
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     {
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 24639              		.loc 1 1118 0
 24640 06cc FB68     		ldr	r3, [r7, #12]
 24641 06ce 5B69     		ldr	r3, [r3, #20]
 24642 06d0 23F08002 		bic	r2, r3, #128
 24643 06d4 FB68     		ldr	r3, [r7, #12]
 24644 06d6 5A61     		str	r2, [r3, #20]
 24645              	.L60:
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     }
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 24646              		.loc 1 1123 0
 24647 06d8 BB68     		ldr	r3, [r7, #8]
 24648 06da 802B     		cmp	r3, #128
 24649 06dc 17D0     		beq	.L59
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     if (NewState != DISABLE)
 24650              		.loc 1 1125 0
 24651 06de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24652 06e0 002B     		cmp	r3, #0
 24653 06e2 09D0     		beq	.L63
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     {
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 24654              		.loc 1 1128 0
 24655 06e4 FB68     		ldr	r3, [r7, #12]
 24656 06e6 1A68     		ldr	r2, [r3, #0]
 24657 06e8 BB68     		ldr	r3, [r7, #8]
 24658 06ea 03F01E03 		and	r3, r3, #30
 24659 06ee 42EA0302 		orr	r2, r2, r3
 24660 06f2 FB68     		ldr	r3, [r7, #12]
 24661 06f4 1A60     		str	r2, [r3, #0]
 24662 06f6 0AE0     		b	.L59
 24663              	.L63:
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     }
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     else
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     {
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 24664              		.loc 1 1133 0
 24665 06f8 FB68     		ldr	r3, [r7, #12]
 24666 06fa 1A68     		ldr	r2, [r3, #0]
 24667 06fc BB68     		ldr	r3, [r7, #8]
 24668 06fe 03F01E03 		and	r3, r3, #30
 24669 0702 6FEA0303 		mvn	r3, r3
 24670 0706 02EA0302 		and	r2, r2, r3
 24671 070a FB68     		ldr	r3, [r7, #12]
 24672 070c 1A60     		str	r2, [r3, #0]
 24673              	.L59:
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     }    
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24674              		.loc 1 1136 0
 24675 070e 07F11407 		add	r7, r7, #20
 24676 0712 BD46     		mov	sp, r7
 24677 0714 80BC     		pop	{r7}
 24678 0716 7047     		bx	lr
 24679              		.cfi_endproc
 24680              	.LFE45:
 24682              		.align	2
 24683              		.global	DMA_GetITStatus
 24684              		.thumb
 24685              		.thumb_func
 24687              	DMA_GetITStatus:
 24688              	.LFB46:
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be one of the following values:
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24689              		.loc 1 1153 0
 24690              		.cfi_startproc
 24691              		@ args = 0, pretend = 0, frame = 24
 24692              		@ frame_needed = 1, uses_anonymous_args = 0
 24693              		@ link register save eliminated.
 24694 0718 80B4     		push	{r7}
 24695              	.LCFI51:
 24696              		.cfi_def_cfa_offset 4
 24697 071a 87B0     		sub	sp, sp, #28
 24698              	.LCFI52:
 24699              		.cfi_def_cfa_offset 32
 24700 071c 00AF     		add	r7, sp, #0
 24701              		.cfi_offset 7, -4
 24702              	.LCFI53:
 24703              		.cfi_def_cfa_register 7
 24704 071e 7860     		str	r0, [r7, #4]
 24705 0720 3960     		str	r1, [r7, #0]
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   ITStatus bitstatus = RESET;
 24706              		.loc 1 1154 0
 24707 0722 4FF00003 		mov	r3, #0
 24708 0726 FB75     		strb	r3, [r7, #23]
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_TypeDef* DMAy;
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 24709              		.loc 1 1156 0
 24710 0728 4FF00003 		mov	r3, #0
 24711 072c FB60     		str	r3, [r7, #12]
 24712 072e 4FF00003 		mov	r3, #0
 24713 0732 BB60     		str	r3, [r7, #8]
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 24714              		.loc 1 1163 0
 24715 0734 7A68     		ldr	r2, [r7, #4]
 24716 0736 46F20F43 		movw	r3, #25615
 24717 073a C4F20203 		movt	r3, 16386
 24718 073e 9A42     		cmp	r2, r3
 24719 0740 05D8     		bhi	.L65
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy = DMA1; 
 24720              		.loc 1 1166 0
 24721 0742 4FF4C043 		mov	r3, #24576
 24722 0746 C4F20203 		movt	r3, 16386
 24723 074a 3B61     		str	r3, [r7, #16]
 24724 074c 04E0     		b	.L66
 24725              	.L65:
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   } 
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else 
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy = DMA2; 
 24726              		.loc 1 1171 0
 24727 074e 4FF4C843 		mov	r3, #25600
 24728 0752 C4F20203 		movt	r3, 16386
 24729 0756 3B61     		str	r3, [r7, #16]
 24730              	.L66:
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 24731              		.loc 1 1175 0
 24732 0758 3A68     		ldr	r2, [r7, #0]
 24733 075a 40F63C73 		movw	r3, #3900
 24734 075e C0F63C73 		movt	r3, 3900
 24735 0762 02EA0303 		and	r3, r2, r3
 24736 0766 002B     		cmp	r3, #0
 24737 0768 0CD0     		beq	.L67
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 24738              		.loc 1 1178 0
 24739 076a 3B68     		ldr	r3, [r7, #0]
 24740 076c 4FEAD323 		lsr	r3, r3, #11
 24741 0770 03F01E03 		and	r3, r3, #30
 24742 0774 FB60     		str	r3, [r7, #12]
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Check the enable bit in CR register */
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 24743              		.loc 1 1181 0
 24744 0776 7B68     		ldr	r3, [r7, #4]
 24745 0778 1A68     		ldr	r2, [r3, #0]
 24746 077a FB68     		ldr	r3, [r7, #12]
 24747 077c 02EA0303 		and	r3, r2, r3
 24748 0780 BB60     		str	r3, [r7, #8]
 24749 0782 04E0     		b	.L68
 24750              	.L67:
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else 
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Check the enable bit in FCR register */
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 24751              		.loc 1 1186 0
 24752 0784 7B68     		ldr	r3, [r7, #4]
 24753 0786 5B69     		ldr	r3, [r3, #20]
 24754 0788 03F08003 		and	r3, r3, #128
 24755 078c BB60     		str	r3, [r7, #8]
 24756              	.L68:
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****  
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 24757              		.loc 1 1190 0
 24758 078e 3B68     		ldr	r3, [r7, #0]
 24759 0790 03F00053 		and	r3, r3, #536870912
 24760 0794 002B     		cmp	r3, #0
 24761 0796 03D0     		beq	.L69
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Get DMAy HISR register value */
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     tmpreg = DMAy->HISR ;
 24762              		.loc 1 1193 0
 24763 0798 3B69     		ldr	r3, [r7, #16]
 24764 079a 5B68     		ldr	r3, [r3, #4]
 24765 079c FB60     		str	r3, [r7, #12]
 24766 079e 02E0     		b	.L70
 24767              	.L69:
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Get DMAy LISR register value */
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     tmpreg = DMAy->LISR ;
 24768              		.loc 1 1198 0
 24769 07a0 3B69     		ldr	r3, [r7, #16]
 24770 07a2 1B68     		ldr	r3, [r3, #0]
 24771 07a4 FB60     		str	r3, [r7, #12]
 24772              	.L70:
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   } 
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* mask all reserved bits */
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 24773              		.loc 1 1202 0
 24774 07a6 FA68     		ldr	r2, [r7, #12]
 24775 07a8 40F67D73 		movw	r3, #3965
 24776 07ac C0F67D73 		movt	r3, 3965
 24777 07b0 02EA0303 		and	r3, r2, r3
 24778 07b4 FB60     		str	r3, [r7, #12]
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 24779              		.loc 1 1205 0
 24780 07b6 FA68     		ldr	r2, [r7, #12]
 24781 07b8 3B68     		ldr	r3, [r7, #0]
 24782 07ba 02EA0303 		and	r3, r2, r3
 24783 07be 002B     		cmp	r3, #0
 24784 07c0 06D0     		beq	.L71
 24785              		.loc 1 1205 0 is_stmt 0 discriminator 1
 24786 07c2 BB68     		ldr	r3, [r7, #8]
 24787 07c4 002B     		cmp	r3, #0
 24788 07c6 03D0     		beq	.L71
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMA_IT is set */
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     bitstatus = SET;
 24789              		.loc 1 1208 0 is_stmt 1
 24790 07c8 4FF00103 		mov	r3, #1
 24791 07cc FB75     		strb	r3, [r7, #23]
 24792 07ce 02E0     		b	.L72
 24793              	.L71:
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMA_IT is reset */
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     bitstatus = RESET;
 24794              		.loc 1 1213 0
 24795 07d0 4FF00003 		mov	r3, #0
 24796 07d4 FB75     		strb	r3, [r7, #23]
 24797              	.L72:
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Return the DMA_IT status */
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   return  bitstatus;
 24798              		.loc 1 1217 0
 24799 07d6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24800              		.loc 1 1218 0
 24801 07d8 1846     		mov	r0, r3
 24802 07da 07F11C07 		add	r7, r7, #28
 24803 07de BD46     		mov	sp, r7
 24804 07e0 80BC     		pop	{r7}
 24805 07e2 7047     		bx	lr
 24806              		.cfi_endproc
 24807              	.LFE46:
 24809              		.align	2
 24810              		.global	DMA_ClearITPendingBit
 24811              		.thumb
 24812              		.thumb_func
 24814              	DMA_ClearITPendingBit:
 24815              	.LFB47:
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** /**
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          to 7 to select the DMA Stream.
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *          This parameter can be any combination of the following values:
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   * @retval None
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   */
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** {
 24816              		.loc 1 1235 0
 24817              		.cfi_startproc
 24818              		@ args = 0, pretend = 0, frame = 16
 24819              		@ frame_needed = 1, uses_anonymous_args = 0
 24820              		@ link register save eliminated.
 24821 07e4 80B4     		push	{r7}
 24822              	.LCFI54:
 24823              		.cfi_def_cfa_offset 4
 24824 07e6 85B0     		sub	sp, sp, #20
 24825              	.LCFI55:
 24826              		.cfi_def_cfa_offset 24
 24827 07e8 00AF     		add	r7, sp, #0
 24828              		.cfi_offset 7, -4
 24829              	.LCFI56:
 24830              		.cfi_def_cfa_register 7
 24831 07ea 7860     		str	r0, [r7, #4]
 24832 07ec 3960     		str	r1, [r7, #0]
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   DMA_TypeDef* DMAy;
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check the parameters */
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 24833              		.loc 1 1243 0
 24834 07ee 7A68     		ldr	r2, [r7, #4]
 24835 07f0 46F20F43 		movw	r3, #25615
 24836 07f4 C4F20203 		movt	r3, 16386
 24837 07f8 9A42     		cmp	r2, r3
 24838 07fa 05D8     		bhi	.L74
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy = DMA1; 
 24839              		.loc 1 1246 0
 24840 07fc 4FF4C043 		mov	r3, #24576
 24841 0800 C4F20203 		movt	r3, 16386
 24842 0804 FB60     		str	r3, [r7, #12]
 24843 0806 04E0     		b	.L75
 24844              	.L74:
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   } 
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else 
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy = DMA2; 
 24845              		.loc 1 1251 0
 24846 0808 4FF4C843 		mov	r3, #25600
 24847 080c C4F20203 		movt	r3, 16386
 24848 0810 FB60     		str	r3, [r7, #12]
 24849              	.L75:
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** 
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 24850              		.loc 1 1255 0
 24851 0812 3B68     		ldr	r3, [r7, #0]
 24852 0814 03F00053 		and	r3, r3, #536870912
 24853 0818 002B     		cmp	r3, #0
 24854 081a 09D0     		beq	.L76
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 24855              		.loc 1 1258 0
 24856 081c 3A68     		ldr	r2, [r7, #0]
 24857 081e 40F67D73 		movw	r3, #3965
 24858 0822 C0F67D73 		movt	r3, 3965
 24859 0826 02EA0303 		and	r3, r2, r3
 24860 082a FA68     		ldr	r2, [r7, #12]
 24861 082c D360     		str	r3, [r2, #12]
 24862 082e 08E0     		b	.L73
 24863              	.L76:
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   else 
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   {
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 24864              		.loc 1 1263 0
 24865 0830 3A68     		ldr	r2, [r7, #0]
 24866 0832 40F67D73 		movw	r3, #3965
 24867 0836 C0F67D73 		movt	r3, 3965
 24868 083a 02EA0303 		and	r3, r2, r3
 24869 083e FA68     		ldr	r2, [r7, #12]
 24870 0840 9360     		str	r3, [r2, #8]
 24871              	.L73:
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c ****   }   
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c **** }
 24872              		.loc 1 1265 0
 24873 0842 07F11407 		add	r7, r7, #20
 24874 0846 BD46     		mov	sp, r7
 24875 0848 80BC     		pop	{r7}
 24876 084a 7047     		bx	lr
 24877              		.cfi_endproc
 24878              	.LFE47:
 24880              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_dma.c
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:23404  .text:00000000 $t
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:23409  .text:00000000 DMA_DeInit
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:23683  .text:00000244 DMA_Init
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:23814  .text:00000310 DMA_StructInit
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:23905  .text:0000039c DMA_Cmd
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:23957  .text:000003d4 DMA_PeriphIncOffsetSizeConfig
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24008  .text:00000408 DMA_FlowControllerConfig
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24059  .text:0000043c DMA_SetCurrDataCounter
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24096  .text:00000458 DMA_GetCurrDataCounter
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24132  .text:00000474 DMA_DoubleBufferModeConfig
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24188  .text:000004b0 DMA_DoubleBufferModeCmd
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24240  .text:000004e8 DMA_MemoryTargetConfig
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24288  .text:00000514 DMA_GetCurrentMemoryTarget
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24340  .text:0000054c DMA_GetCmdStatus
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24393  .text:00000584 DMA_GetFIFOStatus
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24435  .text:000005ac DMA_GetFlagStatus
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24530  .text:00000638 DMA_ClearFlag
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24601  .text:000006a0 DMA_ITConfig
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24687  .text:00000718 DMA_GetITStatus
C:\Users\red4sch\AppData\Local\Temp\ccvmH8J3.s:24814  .text:000007e4 DMA_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
