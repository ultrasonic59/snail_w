   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_i2c.c"
  23              	.Ltext0:
  24              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c"
 23367              		.align	2
 23368              		.global	I2C_DeInit
 23369              		.thumb
 23370              		.thumb_func
 23372              	I2C_DeInit:
 23373              	.LFB29:
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @file    stm32f2xx_i2c.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - Initialization and Configuration
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - Data transfers
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - PEC management
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - DMA transfers management
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *  @verbatim
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *    
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          ===================================================================
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                                 How to use this driver
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          ===================================================================
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *        
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                function.
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - For SMBus Mode: 
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          7. When using the DMA mode 
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * 
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * 
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             transfers. 
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *  @endverbatim
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *  
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ******************************************************************************
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @attention
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ******************************************************************************  
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */ 
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #include "stm32f2xx_i2c.h"
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #include "stm32f2xx_rcc.h"
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C 
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief I2C driver modules
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */ 
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                    Initialization and Configuration functions
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 23374              		.loc 1 133 0
 23375              		.cfi_startproc
 23376              		@ args = 0, pretend = 0, frame = 8
 23377              		@ frame_needed = 1, uses_anonymous_args = 0
 23378 0000 80B5     		push	{r7, lr}
 23379              	.LCFI0:
 23380              		.cfi_def_cfa_offset 8
 23381 0002 82B0     		sub	sp, sp, #8
 23382              	.LCFI1:
 23383              		.cfi_def_cfa_offset 16
 23384 0004 00AF     		add	r7, sp, #0
 23385              		.cfi_offset 14, -4
 23386              		.cfi_offset 7, -8
 23387              	.LCFI2:
 23388              		.cfi_def_cfa_register 7
 23389 0006 7860     		str	r0, [r7, #4]
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2Cx == I2C1)
 23390              		.loc 1 137 0
 23391 0008 7A68     		ldr	r2, [r7, #4]
 23392 000a 4FF4A843 		mov	r3, #21504
 23393 000e C4F20003 		movt	r3, 16384
 23394 0012 9A42     		cmp	r2, r3
 23395 0014 0CD1     		bne	.L2
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable I2C1 reset state */
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 23396              		.loc 1 140 0
 23397 0016 4FF40010 		mov	r0, #2097152
 23398 001a 4FF00101 		mov	r1, #1
 23399 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Release I2C1 from reset state */
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 23400              		.loc 1 142 0
 23401 0022 4FF40010 		mov	r0, #2097152
 23402 0026 4FF00001 		mov	r1, #0
 23403 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 23404 002e 26E0     		b	.L1
 23405              	.L2:
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else if (I2Cx == I2C2)
 23406              		.loc 1 144 0
 23407 0030 7A68     		ldr	r2, [r7, #4]
 23408 0032 4FF4B043 		mov	r3, #22528
 23409 0036 C4F20003 		movt	r3, 16384
 23410 003a 9A42     		cmp	r2, r3
 23411 003c 0CD1     		bne	.L4
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable I2C2 reset state */
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 23412              		.loc 1 147 0
 23413 003e 4FF48000 		mov	r0, #4194304
 23414 0042 4FF00101 		mov	r1, #1
 23415 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Release I2C2 from reset state */
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 23416              		.loc 1 149 0
 23417 004a 4FF48000 		mov	r0, #4194304
 23418 004e 4FF00001 		mov	r1, #0
 23419 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 23420 0056 12E0     		b	.L1
 23421              	.L4:
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else 
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     if (I2Cx == I2C3)
 23422              		.loc 1 153 0
 23423 0058 7A68     		ldr	r2, [r7, #4]
 23424 005a 4FF4B843 		mov	r3, #23552
 23425 005e C4F20003 		movt	r3, 16384
 23426 0062 9A42     		cmp	r2, r3
 23427 0064 0BD1     		bne	.L1
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Enable I2C3 reset state */
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 23428              		.loc 1 156 0
 23429 0066 4FF40000 		mov	r0, #8388608
 23430 006a 4FF00101 		mov	r1, #1
 23431 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Release I2C3 from reset state */
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 23432              		.loc 1 158 0
 23433 0072 4FF40000 		mov	r0, #8388608
 23434 0076 4FF00001 		mov	r1, #0
 23435 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 23436              	.L1:
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 23437              		.loc 1 161 0
 23438 007e 07F10807 		add	r7, r7, #8
 23439 0082 BD46     		mov	sp, r7
 23440 0084 80BD     		pop	{r7, pc}
 23441              		.cfi_endproc
 23442              	.LFE29:
 23444 0086 00BF     		.align	2
 23445              		.global	I2C_Init
 23446              		.thumb
 23447              		.thumb_func
 23449              	I2C_Init:
 23450              	.LFB30:
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 23451              		.loc 1 176 0
 23452              		.cfi_startproc
 23453              		@ args = 0, pretend = 0, frame = 40
 23454              		@ frame_needed = 1, uses_anonymous_args = 0
 23455 0088 80B5     		push	{r7, lr}
 23456              	.LCFI3:
 23457              		.cfi_def_cfa_offset 8
 23458 008a 8AB0     		sub	sp, sp, #40
 23459              	.LCFI4:
 23460              		.cfi_def_cfa_offset 48
 23461 008c 00AF     		add	r7, sp, #0
 23462              		.cfi_offset 14, -4
 23463              		.cfi_offset 7, -8
 23464              	.LCFI5:
 23465              		.cfi_def_cfa_register 7
 23466 008e 7860     		str	r0, [r7, #4]
 23467 0090 3960     		str	r1, [r7, #0]
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 23468              		.loc 1 177 0
 23469 0092 4FF00003 		mov	r3, #0
 23470 0096 FB84     		strh	r3, [r7, #38]	@ movhi
 23471 0098 4FF00003 		mov	r3, #0
 23472 009c 7B84     		strh	r3, [r7, #34]	@ movhi
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint16_t result = 0x04;
 23473              		.loc 1 178 0
 23474 009e 4FF00403 		mov	r3, #4
 23475 00a2 BB84     		strh	r3, [r7, #36]	@ movhi
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t pclk1 = 8000000;
 23476              		.loc 1 179 0
 23477 00a4 4FF49053 		mov	r3, #4608
 23478 00a8 C0F27A03 		movt	r3, 122
 23479 00ac FB61     		str	r3, [r7, #28]
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg = I2Cx->CR2;
 23480              		.loc 1 192 0
 23481 00ae 7B68     		ldr	r3, [r7, #4]
 23482 00b0 9B88     		ldrh	r3, [r3, #4]	@ movhi
 23483 00b2 FB84     		strh	r3, [r7, #38]	@ movhi
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 23484              		.loc 1 194 0
 23485 00b4 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 23486 00b6 23F03F03 		bic	r3, r3, #63
 23487 00ba FB84     		strh	r3, [r7, #38]	@ movhi
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get pclk1 frequency value */
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 23488              		.loc 1 196 0
 23489 00bc 07F10C03 		add	r3, r7, #12
 23490 00c0 1846     		mov	r0, r3
 23491 00c2 FFF7FEFF 		bl	RCC_GetClocksFreq
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 23492              		.loc 1 197 0
 23493 00c6 7B69     		ldr	r3, [r7, #20]
 23494 00c8 FB61     		str	r3, [r7, #28]
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 23495              		.loc 1 199 0
 23496 00ca FA69     		ldr	r2, [r7, #28]
 23497 00cc 4DF68363 		movw	r3, #56963
 23498 00d0 C4F21B33 		movt	r3, 17179
 23499 00d4 A3FB0213 		umull	r1, r3, r3, r2
 23500 00d8 4FEA9343 		lsr	r3, r3, #18
 23501 00dc 7B84     		strh	r3, [r7, #34]	@ movhi
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg |= freqrange;
 23502              		.loc 1 200 0
 23503 00de FA8C     		ldrh	r2, [r7, #38]	@ movhi
 23504 00e0 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 23505 00e2 42EA0303 		orr	r3, r2, r3
 23506 00e6 FB84     		strh	r3, [r7, #38]	@ movhi
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 23507              		.loc 1 202 0
 23508 00e8 7B68     		ldr	r3, [r7, #4]
 23509 00ea FA8C     		ldrh	r2, [r7, #38]	@ movhi
 23510 00ec 9A80     		strh	r2, [r3, #4]	@ movhi
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 23511              		.loc 1 206 0
 23512 00ee 7B68     		ldr	r3, [r7, #4]
 23513 00f0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23514 00f2 9BB2     		uxth	r3, r3
 23515 00f4 23F00103 		bic	r3, r3, #1
 23516 00f8 9AB2     		uxth	r2, r3
 23517 00fa 7B68     		ldr	r3, [r7, #4]
 23518 00fc 1A80     		strh	r2, [r3, #0]	@ movhi
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Reset tmpreg value */
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg = 0;
 23519              		.loc 1 209 0
 23520 00fe 4FF00003 		mov	r3, #0
 23521 0102 FB84     		strh	r3, [r7, #38]	@ movhi
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Configure speed in standard mode */
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 23522              		.loc 1 212 0
 23523 0104 3B68     		ldr	r3, [r7, #0]
 23524 0106 1A68     		ldr	r2, [r3, #0]
 23525 0108 48F2A063 		movw	r3, #34464
 23526 010c C0F20103 		movt	r3, 1
 23527 0110 9A42     		cmp	r2, r3
 23528 0112 19D8     		bhi	.L6
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Standard mode speed calculate */
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 23529              		.loc 1 215 0
 23530 0114 3B68     		ldr	r3, [r7, #0]
 23531 0116 1B68     		ldr	r3, [r3, #0]
 23532 0118 4FEA4303 		lsl	r3, r3, #1
 23533 011c FA69     		ldr	r2, [r7, #28]
 23534 011e B2FBF3F3 		udiv	r3, r2, r3
 23535 0122 BB84     		strh	r3, [r7, #36]	@ movhi
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     if (result < 0x04)
 23536              		.loc 1 217 0
 23537 0124 BB8C     		ldrh	r3, [r7, #36]
 23538 0126 032B     		cmp	r3, #3
 23539 0128 02D8     		bhi	.L7
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Set minimum allowed value */
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result = 0x04;  
 23540              		.loc 1 220 0
 23541 012a 4FF00403 		mov	r3, #4
 23542 012e BB84     		strh	r3, [r7, #36]	@ movhi
 23543              	.L7:
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set speed value for standard mode */
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     tmpreg |= result;	  
 23544              		.loc 1 223 0
 23545 0130 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 23546 0132 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 23547 0134 42EA0303 		orr	r3, r2, r3
 23548 0138 FB84     		strh	r3, [r7, #38]	@ movhi
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 23549              		.loc 1 225 0
 23550 013a 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 23551 013c 03F10103 		add	r3, r3, #1
 23552 0140 9AB2     		uxth	r2, r3
 23553 0142 7B68     		ldr	r3, [r7, #4]
 23554 0144 1A84     		strh	r2, [r3, #32]	@ movhi
 23555 0146 4DE0     		b	.L8
 23556              	.L6:
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Configure speed in fast mode */
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 23557              		.loc 1 232 0
 23558 0148 3B68     		ldr	r3, [r7, #0]
 23559 014a DA88     		ldrh	r2, [r3, #6]
 23560 014c 4BF6FF73 		movw	r3, #49151
 23561 0150 9A42     		cmp	r2, r3
 23562 0152 0AD1     		bne	.L9
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 23563              		.loc 1 235 0
 23564 0154 3B68     		ldr	r3, [r7, #0]
 23565 0156 1A68     		ldr	r2, [r3, #0]
 23566 0158 1346     		mov	r3, r2
 23567 015a 4FEA4303 		lsl	r3, r3, #1
 23568 015e 1344     		add	r3, r3, r2
 23569 0160 FA69     		ldr	r2, [r7, #28]
 23570 0162 B2FBF3F3 		udiv	r3, r2, r3
 23571 0166 BB84     		strh	r3, [r7, #36]	@ movhi
 23572 0168 10E0     		b	.L10
 23573              	.L9:
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 23574              		.loc 1 240 0
 23575 016a 3B68     		ldr	r3, [r7, #0]
 23576 016c 1A68     		ldr	r2, [r3, #0]
 23577 016e 1346     		mov	r3, r2
 23578 0170 4FEA8303 		lsl	r3, r3, #2
 23579 0174 1344     		add	r3, r3, r2
 23580 0176 4FEA8302 		lsl	r2, r3, #2
 23581 017a 1344     		add	r3, r3, r2
 23582 017c FA69     		ldr	r2, [r7, #28]
 23583 017e B2FBF3F3 		udiv	r3, r2, r3
 23584 0182 BB84     		strh	r3, [r7, #36]	@ movhi
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Set DUTY bit */
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 23585              		.loc 1 242 0
 23586 0184 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 23587 0186 43F48043 		orr	r3, r3, #16384
 23588 018a BB84     		strh	r3, [r7, #36]	@ movhi
 23589              	.L10:
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 23590              		.loc 1 246 0
 23591 018c BB8C     		ldrh	r3, [r7, #36]
 23592 018e 4FEA0353 		lsl	r3, r3, #20
 23593 0192 4FEA1353 		lsr	r3, r3, #20
 23594 0196 002B     		cmp	r3, #0
 23595 0198 03D1     		bne	.L11
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Set minimum allowed value */
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result |= (uint16_t)0x0001;  
 23596              		.loc 1 249 0
 23597 019a BB8C     		ldrh	r3, [r7, #36]	@ movhi
 23598 019c 43F00103 		orr	r3, r3, #1
 23599 01a0 BB84     		strh	r3, [r7, #36]	@ movhi
 23600              	.L11:
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 23601              		.loc 1 252 0
 23602 01a2 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 23603 01a4 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 23604 01a6 42EA0303 		orr	r3, r2, r3
 23605 01aa 9BB2     		uxth	r3, r3
 23606 01ac 6FEA4343 		mvn	r3, r3, lsl #17
 23607 01b0 6FEA5343 		mvn	r3, r3, lsr #17
 23608 01b4 FB84     		strh	r3, [r7, #38]	@ movhi
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 23609              		.loc 1 254 0
 23610 01b6 7B8C     		ldrh	r3, [r7, #34]
 23611 01b8 4FF49672 		mov	r2, #300
 23612 01bc 02FB03F2 		mul	r2, r2, r3
 23613 01c0 44F6D353 		movw	r3, #19923
 23614 01c4 C1F26203 		movt	r3, 4194
 23615 01c8 83FB0213 		smull	r1, r3, r3, r2
 23616 01cc 4FEAA311 		asr	r1, r3, #6
 23617 01d0 4FEAE273 		asr	r3, r2, #31
 23618 01d4 C3EB0103 		rsb	r3, r3, r1
 23619 01d8 9BB2     		uxth	r3, r3
 23620 01da 03F10103 		add	r3, r3, #1
 23621 01de 9AB2     		uxth	r2, r3
 23622 01e0 7B68     		ldr	r3, [r7, #4]
 23623 01e2 1A84     		strh	r2, [r3, #32]	@ movhi
 23624              	.L8:
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Write to I2Cx CCR */
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CCR = tmpreg;
 23625              		.loc 1 258 0
 23626 01e4 7B68     		ldr	r3, [r7, #4]
 23627 01e6 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 23628 01e8 9A83     		strh	r2, [r3, #28]	@ movhi
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 23629              		.loc 1 260 0
 23630 01ea 7B68     		ldr	r3, [r7, #4]
 23631 01ec 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23632 01ee 9BB2     		uxth	r3, r3
 23633 01f0 43F00103 		orr	r3, r3, #1
 23634 01f4 9AB2     		uxth	r2, r3
 23635 01f6 7B68     		ldr	r3, [r7, #4]
 23636 01f8 1A80     		strh	r2, [r3, #0]	@ movhi
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg = I2Cx->CR1;
 23637              		.loc 1 264 0
 23638 01fa 7B68     		ldr	r3, [r7, #4]
 23639 01fc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23640 01fe FB84     		strh	r3, [r7, #38]	@ movhi
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 23641              		.loc 1 266 0
 23642 0200 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 23643 0202 23F48063 		bic	r3, r3, #1024
 23644 0206 23F00A03 		bic	r3, r3, #10
 23645 020a FB84     		strh	r3, [r7, #38]	@ movhi
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 23646              		.loc 1 270 0
 23647 020c 3B68     		ldr	r3, [r7, #0]
 23648 020e 9A88     		ldrh	r2, [r3, #4]
 23649 0210 3B68     		ldr	r3, [r7, #0]
 23650 0212 5B89     		ldrh	r3, [r3, #10]
 23651 0214 42EA0303 		orr	r3, r2, r3
 23652 0218 9AB2     		uxth	r2, r3
 23653 021a FB8C     		ldrh	r3, [r7, #38]	@ movhi
 23654 021c 42EA0303 		orr	r3, r2, r3
 23655 0220 FB84     		strh	r3, [r7, #38]	@ movhi
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 23656              		.loc 1 272 0
 23657 0222 7B68     		ldr	r3, [r7, #4]
 23658 0224 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 23659 0226 1A80     		strh	r2, [r3, #0]	@ movhi
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 23660              		.loc 1 276 0
 23661 0228 3B68     		ldr	r3, [r7, #0]
 23662 022a 9A89     		ldrh	r2, [r3, #12]
 23663 022c 3B68     		ldr	r3, [r7, #0]
 23664 022e 1B89     		ldrh	r3, [r3, #8]
 23665 0230 42EA0303 		orr	r3, r2, r3
 23666 0234 9AB2     		uxth	r2, r3
 23667 0236 7B68     		ldr	r3, [r7, #4]
 23668 0238 1A81     		strh	r2, [r3, #8]	@ movhi
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 23669              		.loc 1 277 0
 23670 023a 07F12807 		add	r7, r7, #40
 23671 023e BD46     		mov	sp, r7
 23672 0240 80BD     		pop	{r7, pc}
 23673              		.cfi_endproc
 23674              	.LFE30:
 23676 0242 00BF     		.align	2
 23677              		.global	I2C_StructInit
 23678              		.thumb
 23679              		.thumb_func
 23681              	I2C_StructInit:
 23682              	.LFB31:
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 23683              		.loc 1 285 0
 23684              		.cfi_startproc
 23685              		@ args = 0, pretend = 0, frame = 8
 23686              		@ frame_needed = 1, uses_anonymous_args = 0
 23687              		@ link register save eliminated.
 23688 0244 80B4     		push	{r7}
 23689              	.LCFI6:
 23690              		.cfi_def_cfa_offset 4
 23691 0246 83B0     		sub	sp, sp, #12
 23692              	.LCFI7:
 23693              		.cfi_def_cfa_offset 16
 23694 0248 00AF     		add	r7, sp, #0
 23695              		.cfi_offset 7, -4
 23696              	.LCFI8:
 23697              		.cfi_def_cfa_register 7
 23698 024a 7860     		str	r0, [r7, #4]
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 23699              		.loc 1 288 0
 23700 024c 7B68     		ldr	r3, [r7, #4]
 23701 024e 41F28832 		movw	r2, #5000
 23702 0252 1A60     		str	r2, [r3, #0]
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 23703              		.loc 1 290 0
 23704 0254 7B68     		ldr	r3, [r7, #4]
 23705 0256 4FF00002 		mov	r2, #0
 23706 025a 9A80     		strh	r2, [r3, #4]	@ movhi
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 23707              		.loc 1 292 0
 23708 025c 7B68     		ldr	r3, [r7, #4]
 23709 025e 4BF6FF72 		movw	r2, #49151
 23710 0262 DA80     		strh	r2, [r3, #6]	@ movhi
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 23711              		.loc 1 294 0
 23712 0264 7B68     		ldr	r3, [r7, #4]
 23713 0266 4FF00002 		mov	r2, #0
 23714 026a 1A81     		strh	r2, [r3, #8]	@ movhi
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 23715              		.loc 1 296 0
 23716 026c 7B68     		ldr	r3, [r7, #4]
 23717 026e 4FF00002 		mov	r2, #0
 23718 0272 5A81     		strh	r2, [r3, #10]	@ movhi
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 23719              		.loc 1 298 0
 23720 0274 7B68     		ldr	r3, [r7, #4]
 23721 0276 4FF48042 		mov	r2, #16384
 23722 027a 9A81     		strh	r2, [r3, #12]	@ movhi
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 23723              		.loc 1 299 0
 23724 027c 07F10C07 		add	r7, r7, #12
 23725 0280 BD46     		mov	sp, r7
 23726 0282 80BC     		pop	{r7}
 23727 0284 7047     		bx	lr
 23728              		.cfi_endproc
 23729              	.LFE31:
 23731 0286 00BF     		.align	2
 23732              		.global	I2C_Cmd
 23733              		.thumb
 23734              		.thumb_func
 23736              	I2C_Cmd:
 23737              	.LFB32:
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 23738              		.loc 1 309 0
 23739              		.cfi_startproc
 23740              		@ args = 0, pretend = 0, frame = 8
 23741              		@ frame_needed = 1, uses_anonymous_args = 0
 23742              		@ link register save eliminated.
 23743 0288 80B4     		push	{r7}
 23744              	.LCFI9:
 23745              		.cfi_def_cfa_offset 4
 23746 028a 83B0     		sub	sp, sp, #12
 23747              	.LCFI10:
 23748              		.cfi_def_cfa_offset 16
 23749 028c 00AF     		add	r7, sp, #0
 23750              		.cfi_offset 7, -4
 23751              	.LCFI11:
 23752              		.cfi_def_cfa_register 7
 23753 028e 7860     		str	r0, [r7, #4]
 23754 0290 0B46     		mov	r3, r1
 23755 0292 FB70     		strb	r3, [r7, #3]
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 23756              		.loc 1 313 0
 23757 0294 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23758 0296 002B     		cmp	r3, #0
 23759 0298 08D0     		beq	.L14
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 23760              		.loc 1 316 0
 23761 029a 7B68     		ldr	r3, [r7, #4]
 23762 029c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23763 029e 9BB2     		uxth	r3, r3
 23764 02a0 43F00103 		orr	r3, r3, #1
 23765 02a4 9AB2     		uxth	r2, r3
 23766 02a6 7B68     		ldr	r3, [r7, #4]
 23767 02a8 1A80     		strh	r2, [r3, #0]	@ movhi
 23768 02aa 07E0     		b	.L13
 23769              	.L14:
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 23770              		.loc 1 321 0
 23771 02ac 7B68     		ldr	r3, [r7, #4]
 23772 02ae 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23773 02b0 9BB2     		uxth	r3, r3
 23774 02b2 23F00103 		bic	r3, r3, #1
 23775 02b6 9AB2     		uxth	r2, r3
 23776 02b8 7B68     		ldr	r3, [r7, #4]
 23777 02ba 1A80     		strh	r2, [r3, #0]	@ movhi
 23778              	.L13:
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 23779              		.loc 1 323 0
 23780 02bc 07F10C07 		add	r7, r7, #12
 23781 02c0 BD46     		mov	sp, r7
 23782 02c2 80BC     		pop	{r7}
 23783 02c4 7047     		bx	lr
 23784              		.cfi_endproc
 23785              	.LFE32:
 23787 02c6 00BF     		.align	2
 23788              		.global	I2C_GenerateSTART
 23789              		.thumb
 23790              		.thumb_func
 23792              	I2C_GenerateSTART:
 23793              	.LFB33:
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 23794              		.loc 1 333 0
 23795              		.cfi_startproc
 23796              		@ args = 0, pretend = 0, frame = 8
 23797              		@ frame_needed = 1, uses_anonymous_args = 0
 23798              		@ link register save eliminated.
 23799 02c8 80B4     		push	{r7}
 23800              	.LCFI12:
 23801              		.cfi_def_cfa_offset 4
 23802 02ca 83B0     		sub	sp, sp, #12
 23803              	.LCFI13:
 23804              		.cfi_def_cfa_offset 16
 23805 02cc 00AF     		add	r7, sp, #0
 23806              		.cfi_offset 7, -4
 23807              	.LCFI14:
 23808              		.cfi_def_cfa_register 7
 23809 02ce 7860     		str	r0, [r7, #4]
 23810 02d0 0B46     		mov	r3, r1
 23811 02d2 FB70     		strb	r3, [r7, #3]
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 23812              		.loc 1 337 0
 23813 02d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23814 02d6 002B     		cmp	r3, #0
 23815 02d8 08D0     		beq	.L17
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Generate a START condition */
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 23816              		.loc 1 340 0
 23817 02da 7B68     		ldr	r3, [r7, #4]
 23818 02dc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23819 02de 9BB2     		uxth	r3, r3
 23820 02e0 43F48073 		orr	r3, r3, #256
 23821 02e4 9AB2     		uxth	r2, r3
 23822 02e6 7B68     		ldr	r3, [r7, #4]
 23823 02e8 1A80     		strh	r2, [r3, #0]	@ movhi
 23824 02ea 07E0     		b	.L16
 23825              	.L17:
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the START condition generation */
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 23826              		.loc 1 345 0
 23827 02ec 7B68     		ldr	r3, [r7, #4]
 23828 02ee 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23829 02f0 9BB2     		uxth	r3, r3
 23830 02f2 23F48073 		bic	r3, r3, #256
 23831 02f6 9AB2     		uxth	r2, r3
 23832 02f8 7B68     		ldr	r3, [r7, #4]
 23833 02fa 1A80     		strh	r2, [r3, #0]	@ movhi
 23834              	.L16:
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 23835              		.loc 1 347 0
 23836 02fc 07F10C07 		add	r7, r7, #12
 23837 0300 BD46     		mov	sp, r7
 23838 0302 80BC     		pop	{r7}
 23839 0304 7047     		bx	lr
 23840              		.cfi_endproc
 23841              	.LFE33:
 23843 0306 00BF     		.align	2
 23844              		.global	I2C_GenerateSTOP
 23845              		.thumb
 23846              		.thumb_func
 23848              	I2C_GenerateSTOP:
 23849              	.LFB34:
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 23850              		.loc 1 357 0
 23851              		.cfi_startproc
 23852              		@ args = 0, pretend = 0, frame = 8
 23853              		@ frame_needed = 1, uses_anonymous_args = 0
 23854              		@ link register save eliminated.
 23855 0308 80B4     		push	{r7}
 23856              	.LCFI15:
 23857              		.cfi_def_cfa_offset 4
 23858 030a 83B0     		sub	sp, sp, #12
 23859              	.LCFI16:
 23860              		.cfi_def_cfa_offset 16
 23861 030c 00AF     		add	r7, sp, #0
 23862              		.cfi_offset 7, -4
 23863              	.LCFI17:
 23864              		.cfi_def_cfa_register 7
 23865 030e 7860     		str	r0, [r7, #4]
 23866 0310 0B46     		mov	r3, r1
 23867 0312 FB70     		strb	r3, [r7, #3]
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 23868              		.loc 1 361 0
 23869 0314 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23870 0316 002B     		cmp	r3, #0
 23871 0318 08D0     		beq	.L20
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Generate a STOP condition */
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 23872              		.loc 1 364 0
 23873 031a 7B68     		ldr	r3, [r7, #4]
 23874 031c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23875 031e 9BB2     		uxth	r3, r3
 23876 0320 43F40073 		orr	r3, r3, #512
 23877 0324 9AB2     		uxth	r2, r3
 23878 0326 7B68     		ldr	r3, [r7, #4]
 23879 0328 1A80     		strh	r2, [r3, #0]	@ movhi
 23880 032a 07E0     		b	.L19
 23881              	.L20:
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the STOP condition generation */
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 23882              		.loc 1 369 0
 23883 032c 7B68     		ldr	r3, [r7, #4]
 23884 032e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23885 0330 9BB2     		uxth	r3, r3
 23886 0332 23F40073 		bic	r3, r3, #512
 23887 0336 9AB2     		uxth	r2, r3
 23888 0338 7B68     		ldr	r3, [r7, #4]
 23889 033a 1A80     		strh	r2, [r3, #0]	@ movhi
 23890              	.L19:
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 23891              		.loc 1 371 0
 23892 033c 07F10C07 		add	r7, r7, #12
 23893 0340 BD46     		mov	sp, r7
 23894 0342 80BC     		pop	{r7}
 23895 0344 7047     		bx	lr
 23896              		.cfi_endproc
 23897              	.LFE34:
 23899 0346 00BF     		.align	2
 23900              		.global	I2C_Send7bitAddress
 23901              		.thumb
 23902              		.thumb_func
 23904              	I2C_Send7bitAddress:
 23905              	.LFB35:
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         or a Receiver. 
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 23906              		.loc 1 385 0
 23907              		.cfi_startproc
 23908              		@ args = 0, pretend = 0, frame = 8
 23909              		@ frame_needed = 1, uses_anonymous_args = 0
 23910              		@ link register save eliminated.
 23911 0348 80B4     		push	{r7}
 23912              	.LCFI18:
 23913              		.cfi_def_cfa_offset 4
 23914 034a 83B0     		sub	sp, sp, #12
 23915              	.LCFI19:
 23916              		.cfi_def_cfa_offset 16
 23917 034c 00AF     		add	r7, sp, #0
 23918              		.cfi_offset 7, -4
 23919              	.LCFI20:
 23920              		.cfi_def_cfa_register 7
 23921 034e 7860     		str	r0, [r7, #4]
 23922 0350 1346     		mov	r3, r2
 23923 0352 0A46     		mov	r2, r1
 23924 0354 FA70     		strb	r2, [r7, #3]
 23925 0356 BB70     		strb	r3, [r7, #2]
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 23926              		.loc 1 390 0
 23927 0358 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 23928 035a 002B     		cmp	r3, #0
 23929 035c 04D0     		beq	.L23
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set the address bit0 for read */
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 23930              		.loc 1 393 0
 23931 035e FB78     		ldrb	r3, [r7, #3]
 23932 0360 43F00103 		orr	r3, r3, #1
 23933 0364 FB70     		strb	r3, [r7, #3]
 23934 0366 03E0     		b	.L24
 23935              	.L23:
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Reset the address bit0 for write */
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 23936              		.loc 1 398 0
 23937 0368 FB78     		ldrb	r3, [r7, #3]
 23938 036a 23F00103 		bic	r3, r3, #1
 23939 036e FB70     		strb	r3, [r7, #3]
 23940              	.L24:
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Send the address */
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->DR = Address;
 23941              		.loc 1 401 0
 23942 0370 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23943 0372 9AB2     		uxth	r2, r3
 23944 0374 7B68     		ldr	r3, [r7, #4]
 23945 0376 1A82     		strh	r2, [r3, #16]	@ movhi
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 23946              		.loc 1 402 0
 23947 0378 07F10C07 		add	r7, r7, #12
 23948 037c BD46     		mov	sp, r7
 23949 037e 80BC     		pop	{r7}
 23950 0380 7047     		bx	lr
 23951              		.cfi_endproc
 23952              	.LFE35:
 23954 0382 00BF     		.align	2
 23955              		.global	I2C_AcknowledgeConfig
 23956              		.thumb
 23957              		.thumb_func
 23959              	I2C_AcknowledgeConfig:
 23960              	.LFB36:
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 23961              		.loc 1 412 0
 23962              		.cfi_startproc
 23963              		@ args = 0, pretend = 0, frame = 8
 23964              		@ frame_needed = 1, uses_anonymous_args = 0
 23965              		@ link register save eliminated.
 23966 0384 80B4     		push	{r7}
 23967              	.LCFI21:
 23968              		.cfi_def_cfa_offset 4
 23969 0386 83B0     		sub	sp, sp, #12
 23970              	.LCFI22:
 23971              		.cfi_def_cfa_offset 16
 23972 0388 00AF     		add	r7, sp, #0
 23973              		.cfi_offset 7, -4
 23974              	.LCFI23:
 23975              		.cfi_def_cfa_register 7
 23976 038a 7860     		str	r0, [r7, #4]
 23977 038c 0B46     		mov	r3, r1
 23978 038e FB70     		strb	r3, [r7, #3]
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 23979              		.loc 1 416 0
 23980 0390 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23981 0392 002B     		cmp	r3, #0
 23982 0394 08D0     		beq	.L26
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the acknowledgement */
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 23983              		.loc 1 419 0
 23984 0396 7B68     		ldr	r3, [r7, #4]
 23985 0398 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23986 039a 9BB2     		uxth	r3, r3
 23987 039c 43F48063 		orr	r3, r3, #1024
 23988 03a0 9AB2     		uxth	r2, r3
 23989 03a2 7B68     		ldr	r3, [r7, #4]
 23990 03a4 1A80     		strh	r2, [r3, #0]	@ movhi
 23991 03a6 07E0     		b	.L25
 23992              	.L26:
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the acknowledgement */
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 23993              		.loc 1 424 0
 23994 03a8 7B68     		ldr	r3, [r7, #4]
 23995 03aa 1B88     		ldrh	r3, [r3, #0]	@ movhi
 23996 03ac 9BB2     		uxth	r3, r3
 23997 03ae 23F48063 		bic	r3, r3, #1024
 23998 03b2 9AB2     		uxth	r2, r3
 23999 03b4 7B68     		ldr	r3, [r7, #4]
 24000 03b6 1A80     		strh	r2, [r3, #0]	@ movhi
 24001              	.L25:
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24002              		.loc 1 426 0
 24003 03b8 07F10C07 		add	r7, r7, #12
 24004 03bc BD46     		mov	sp, r7
 24005 03be 80BC     		pop	{r7}
 24006 03c0 7047     		bx	lr
 24007              		.cfi_endproc
 24008              	.LFE36:
 24010 03c2 00BF     		.align	2
 24011              		.global	I2C_OwnAddress2Config
 24012              		.thumb
 24013              		.thumb_func
 24015              	I2C_OwnAddress2Config:
 24016              	.LFB37:
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24017              		.loc 1 435 0
 24018              		.cfi_startproc
 24019              		@ args = 0, pretend = 0, frame = 16
 24020              		@ frame_needed = 1, uses_anonymous_args = 0
 24021              		@ link register save eliminated.
 24022 03c4 80B4     		push	{r7}
 24023              	.LCFI24:
 24024              		.cfi_def_cfa_offset 4
 24025 03c6 85B0     		sub	sp, sp, #20
 24026              	.LCFI25:
 24027              		.cfi_def_cfa_offset 24
 24028 03c8 00AF     		add	r7, sp, #0
 24029              		.cfi_offset 7, -4
 24030              	.LCFI26:
 24031              		.cfi_def_cfa_register 7
 24032 03ca 7860     		str	r0, [r7, #4]
 24033 03cc 0B46     		mov	r3, r1
 24034 03ce FB70     		strb	r3, [r7, #3]
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint16_t tmpreg = 0;
 24035              		.loc 1 436 0
 24036 03d0 4FF00003 		mov	r3, #0
 24037 03d4 FB81     		strh	r3, [r7, #14]	@ movhi
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the old register value */
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 24038              		.loc 1 442 0
 24039 03d6 7B68     		ldr	r3, [r7, #4]
 24040 03d8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24041 03da FB81     		strh	r3, [r7, #14]	@ movhi
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 24042              		.loc 1 445 0
 24043 03dc FB89     		ldrh	r3, [r7, #14]	@ movhi
 24044 03de 23F0FE03 		bic	r3, r3, #254
 24045 03e2 FB81     		strh	r3, [r7, #14]	@ movhi
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 24046              		.loc 1 448 0
 24047 03e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24048 03e6 9BB2     		uxth	r3, r3
 24049 03e8 03F0FE03 		and	r3, r3, #254
 24050 03ec 9AB2     		uxth	r2, r3
 24051 03ee FB89     		ldrh	r3, [r7, #14]
 24052 03f0 42EA0303 		orr	r3, r2, r3
 24053 03f4 9BB2     		uxth	r3, r3
 24054 03f6 FB81     		strh	r3, [r7, #14]	@ movhi
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Store the new register value */
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 24055              		.loc 1 451 0
 24056 03f8 7B68     		ldr	r3, [r7, #4]
 24057 03fa FA89     		ldrh	r2, [r7, #14]	@ movhi
 24058 03fc 9A81     		strh	r2, [r3, #12]	@ movhi
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24059              		.loc 1 452 0
 24060 03fe 07F11407 		add	r7, r7, #20
 24061 0402 BD46     		mov	sp, r7
 24062 0404 80BC     		pop	{r7}
 24063 0406 7047     		bx	lr
 24064              		.cfi_endproc
 24065              	.LFE37:
 24067              		.align	2
 24068              		.global	I2C_DualAddressCmd
 24069              		.thumb
 24070              		.thumb_func
 24072              	I2C_DualAddressCmd:
 24073              	.LFB38:
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24074              		.loc 1 462 0
 24075              		.cfi_startproc
 24076              		@ args = 0, pretend = 0, frame = 8
 24077              		@ frame_needed = 1, uses_anonymous_args = 0
 24078              		@ link register save eliminated.
 24079 0408 80B4     		push	{r7}
 24080              	.LCFI27:
 24081              		.cfi_def_cfa_offset 4
 24082 040a 83B0     		sub	sp, sp, #12
 24083              	.LCFI28:
 24084              		.cfi_def_cfa_offset 16
 24085 040c 00AF     		add	r7, sp, #0
 24086              		.cfi_offset 7, -4
 24087              	.LCFI29:
 24088              		.cfi_def_cfa_register 7
 24089 040e 7860     		str	r0, [r7, #4]
 24090 0410 0B46     		mov	r3, r1
 24091 0412 FB70     		strb	r3, [r7, #3]
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24092              		.loc 1 466 0
 24093 0414 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24094 0416 002B     		cmp	r3, #0
 24095 0418 08D0     		beq	.L30
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable dual addressing mode */
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 24096              		.loc 1 469 0
 24097 041a 7B68     		ldr	r3, [r7, #4]
 24098 041c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24099 041e 9BB2     		uxth	r3, r3
 24100 0420 43F00103 		orr	r3, r3, #1
 24101 0424 9AB2     		uxth	r2, r3
 24102 0426 7B68     		ldr	r3, [r7, #4]
 24103 0428 9A81     		strh	r2, [r3, #12]	@ movhi
 24104 042a 07E0     		b	.L29
 24105              	.L30:
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable dual addressing mode */
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 24106              		.loc 1 474 0
 24107 042c 7B68     		ldr	r3, [r7, #4]
 24108 042e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24109 0430 9BB2     		uxth	r3, r3
 24110 0432 23F00103 		bic	r3, r3, #1
 24111 0436 9AB2     		uxth	r2, r3
 24112 0438 7B68     		ldr	r3, [r7, #4]
 24113 043a 9A81     		strh	r2, [r3, #12]	@ movhi
 24114              	.L29:
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24115              		.loc 1 476 0
 24116 043c 07F10C07 		add	r7, r7, #12
 24117 0440 BD46     		mov	sp, r7
 24118 0442 80BC     		pop	{r7}
 24119 0444 7047     		bx	lr
 24120              		.cfi_endproc
 24121              	.LFE38:
 24123 0446 00BF     		.align	2
 24124              		.global	I2C_GeneralCallCmd
 24125              		.thumb
 24126              		.thumb_func
 24128              	I2C_GeneralCallCmd:
 24129              	.LFB39:
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24130              		.loc 1 486 0
 24131              		.cfi_startproc
 24132              		@ args = 0, pretend = 0, frame = 8
 24133              		@ frame_needed = 1, uses_anonymous_args = 0
 24134              		@ link register save eliminated.
 24135 0448 80B4     		push	{r7}
 24136              	.LCFI30:
 24137              		.cfi_def_cfa_offset 4
 24138 044a 83B0     		sub	sp, sp, #12
 24139              	.LCFI31:
 24140              		.cfi_def_cfa_offset 16
 24141 044c 00AF     		add	r7, sp, #0
 24142              		.cfi_offset 7, -4
 24143              	.LCFI32:
 24144              		.cfi_def_cfa_register 7
 24145 044e 7860     		str	r0, [r7, #4]
 24146 0450 0B46     		mov	r3, r1
 24147 0452 FB70     		strb	r3, [r7, #3]
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24148              		.loc 1 490 0
 24149 0454 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24150 0456 002B     		cmp	r3, #0
 24151 0458 08D0     		beq	.L33
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable generall call */
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 24152              		.loc 1 493 0
 24153 045a 7B68     		ldr	r3, [r7, #4]
 24154 045c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24155 045e 9BB2     		uxth	r3, r3
 24156 0460 43F04003 		orr	r3, r3, #64
 24157 0464 9AB2     		uxth	r2, r3
 24158 0466 7B68     		ldr	r3, [r7, #4]
 24159 0468 1A80     		strh	r2, [r3, #0]	@ movhi
 24160 046a 07E0     		b	.L32
 24161              	.L33:
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable generall call */
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 24162              		.loc 1 498 0
 24163 046c 7B68     		ldr	r3, [r7, #4]
 24164 046e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24165 0470 9BB2     		uxth	r3, r3
 24166 0472 23F04003 		bic	r3, r3, #64
 24167 0476 9AB2     		uxth	r2, r3
 24168 0478 7B68     		ldr	r3, [r7, #4]
 24169 047a 1A80     		strh	r2, [r3, #0]	@ movhi
 24170              	.L32:
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24171              		.loc 1 500 0
 24172 047c 07F10C07 		add	r7, r7, #12
 24173 0480 BD46     		mov	sp, r7
 24174 0482 80BC     		pop	{r7}
 24175 0484 7047     		bx	lr
 24176              		.cfi_endproc
 24177              	.LFE39:
 24179 0486 00BF     		.align	2
 24180              		.global	I2C_SoftwareResetCmd
 24181              		.thumb
 24182              		.thumb_func
 24184              	I2C_SoftwareResetCmd:
 24185              	.LFB40:
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24186              		.loc 1 512 0
 24187              		.cfi_startproc
 24188              		@ args = 0, pretend = 0, frame = 8
 24189              		@ frame_needed = 1, uses_anonymous_args = 0
 24190              		@ link register save eliminated.
 24191 0488 80B4     		push	{r7}
 24192              	.LCFI33:
 24193              		.cfi_def_cfa_offset 4
 24194 048a 83B0     		sub	sp, sp, #12
 24195              	.LCFI34:
 24196              		.cfi_def_cfa_offset 16
 24197 048c 00AF     		add	r7, sp, #0
 24198              		.cfi_offset 7, -4
 24199              	.LCFI35:
 24200              		.cfi_def_cfa_register 7
 24201 048e 7860     		str	r0, [r7, #4]
 24202 0490 0B46     		mov	r3, r1
 24203 0492 FB70     		strb	r3, [r7, #3]
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24204              		.loc 1 516 0
 24205 0494 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24206 0496 002B     		cmp	r3, #0
 24207 0498 0AD0     		beq	.L36
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Peripheral under reset */
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 24208              		.loc 1 519 0
 24209 049a 7B68     		ldr	r3, [r7, #4]
 24210 049c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24211 049e 9BB2     		uxth	r3, r3
 24212 04a0 6FEA4343 		mvn	r3, r3, lsl #17
 24213 04a4 6FEA5343 		mvn	r3, r3, lsr #17
 24214 04a8 9AB2     		uxth	r2, r3
 24215 04aa 7B68     		ldr	r3, [r7, #4]
 24216 04ac 1A80     		strh	r2, [r3, #0]	@ movhi
 24217 04ae 09E0     		b	.L35
 24218              	.L36:
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Peripheral not under reset */
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 24219              		.loc 1 524 0
 24220 04b0 7B68     		ldr	r3, [r7, #4]
 24221 04b2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24222 04b4 9BB2     		uxth	r3, r3
 24223 04b6 4FEA4343 		lsl	r3, r3, #17
 24224 04ba 4FEA5343 		lsr	r3, r3, #17
 24225 04be 9AB2     		uxth	r2, r3
 24226 04c0 7B68     		ldr	r3, [r7, #4]
 24227 04c2 1A80     		strh	r2, [r3, #0]	@ movhi
 24228              	.L35:
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24229              		.loc 1 526 0
 24230 04c4 07F10C07 		add	r7, r7, #12
 24231 04c8 BD46     		mov	sp, r7
 24232 04ca 80BC     		pop	{r7}
 24233 04cc 7047     		bx	lr
 24234              		.cfi_endproc
 24235              	.LFE40:
 24237 04ce 00BF     		.align	2
 24238              		.global	I2C_StretchClockCmd
 24239              		.thumb
 24240              		.thumb_func
 24242              	I2C_StretchClockCmd:
 24243              	.LFB41:
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24244              		.loc 1 536 0
 24245              		.cfi_startproc
 24246              		@ args = 0, pretend = 0, frame = 8
 24247              		@ frame_needed = 1, uses_anonymous_args = 0
 24248              		@ link register save eliminated.
 24249 04d0 80B4     		push	{r7}
 24250              	.LCFI36:
 24251              		.cfi_def_cfa_offset 4
 24252 04d2 83B0     		sub	sp, sp, #12
 24253              	.LCFI37:
 24254              		.cfi_def_cfa_offset 16
 24255 04d4 00AF     		add	r7, sp, #0
 24256              		.cfi_offset 7, -4
 24257              	.LCFI38:
 24258              		.cfi_def_cfa_register 7
 24259 04d6 7860     		str	r0, [r7, #4]
 24260 04d8 0B46     		mov	r3, r1
 24261 04da FB70     		strb	r3, [r7, #3]
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState == DISABLE)
 24262              		.loc 1 540 0
 24263 04dc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24264 04de 002B     		cmp	r3, #0
 24265 04e0 08D1     		bne	.L39
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 24266              		.loc 1 543 0
 24267 04e2 7B68     		ldr	r3, [r7, #4]
 24268 04e4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24269 04e6 9BB2     		uxth	r3, r3
 24270 04e8 43F08003 		orr	r3, r3, #128
 24271 04ec 9AB2     		uxth	r2, r3
 24272 04ee 7B68     		ldr	r3, [r7, #4]
 24273 04f0 1A80     		strh	r2, [r3, #0]	@ movhi
 24274 04f2 07E0     		b	.L38
 24275              	.L39:
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 24276              		.loc 1 548 0
 24277 04f4 7B68     		ldr	r3, [r7, #4]
 24278 04f6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24279 04f8 9BB2     		uxth	r3, r3
 24280 04fa 23F08003 		bic	r3, r3, #128
 24281 04fe 9AB2     		uxth	r2, r3
 24282 0500 7B68     		ldr	r3, [r7, #4]
 24283 0502 1A80     		strh	r2, [r3, #0]	@ movhi
 24284              	.L38:
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24285              		.loc 1 550 0
 24286 0504 07F10C07 		add	r7, r7, #12
 24287 0508 BD46     		mov	sp, r7
 24288 050a 80BC     		pop	{r7}
 24289 050c 7047     		bx	lr
 24290              		.cfi_endproc
 24291              	.LFE41:
 24293 050e 00BF     		.align	2
 24294              		.global	I2C_FastModeDutyCycleConfig
 24295              		.thumb
 24296              		.thumb_func
 24298              	I2C_FastModeDutyCycleConfig:
 24299              	.LFB42:
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24300              		.loc 1 562 0
 24301              		.cfi_startproc
 24302              		@ args = 0, pretend = 0, frame = 8
 24303              		@ frame_needed = 1, uses_anonymous_args = 0
 24304              		@ link register save eliminated.
 24305 0510 80B4     		push	{r7}
 24306              	.LCFI39:
 24307              		.cfi_def_cfa_offset 4
 24308 0512 83B0     		sub	sp, sp, #12
 24309              	.LCFI40:
 24310              		.cfi_def_cfa_offset 16
 24311 0514 00AF     		add	r7, sp, #0
 24312              		.cfi_offset 7, -4
 24313              	.LCFI41:
 24314              		.cfi_def_cfa_register 7
 24315 0516 7860     		str	r0, [r7, #4]
 24316 0518 0B46     		mov	r3, r1
 24317 051a 7B80     		strh	r3, [r7, #2]	@ movhi
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 24318              		.loc 1 566 0
 24319 051c 7B88     		ldrh	r3, [r7, #2]
 24320 051e B3F5804F 		cmp	r3, #16384
 24321 0522 08D0     		beq	.L42
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 24322              		.loc 1 569 0
 24323 0524 7B68     		ldr	r3, [r7, #4]
 24324 0526 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 24325 0528 9BB2     		uxth	r3, r3
 24326 052a 23F48043 		bic	r3, r3, #16384
 24327 052e 9AB2     		uxth	r2, r3
 24328 0530 7B68     		ldr	r3, [r7, #4]
 24329 0532 9A83     		strh	r2, [r3, #28]	@ movhi
 24330 0534 07E0     		b	.L41
 24331              	.L42:
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 24332              		.loc 1 574 0
 24333 0536 7B68     		ldr	r3, [r7, #4]
 24334 0538 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 24335 053a 9BB2     		uxth	r3, r3
 24336 053c 43F48043 		orr	r3, r3, #16384
 24337 0540 9AB2     		uxth	r2, r3
 24338 0542 7B68     		ldr	r3, [r7, #4]
 24339 0544 9A83     		strh	r2, [r3, #28]	@ movhi
 24340              	.L41:
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24341              		.loc 1 576 0
 24342 0546 07F10C07 		add	r7, r7, #12
 24343 054a BD46     		mov	sp, r7
 24344 054c 80BC     		pop	{r7}
 24345 054e 7047     		bx	lr
 24346              		.cfi_endproc
 24347              	.LFE42:
 24349              		.align	2
 24350              		.global	I2C_NACKPositionConfig
 24351              		.thumb
 24352              		.thumb_func
 24354              	I2C_NACKPositionConfig:
 24355              	.LFB43:
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                                        received byte.  
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                                           received byte.
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24356              		.loc 1 600 0
 24357              		.cfi_startproc
 24358              		@ args = 0, pretend = 0, frame = 8
 24359              		@ frame_needed = 1, uses_anonymous_args = 0
 24360              		@ link register save eliminated.
 24361 0550 80B4     		push	{r7}
 24362              	.LCFI42:
 24363              		.cfi_def_cfa_offset 4
 24364 0552 83B0     		sub	sp, sp, #12
 24365              	.LCFI43:
 24366              		.cfi_def_cfa_offset 16
 24367 0554 00AF     		add	r7, sp, #0
 24368              		.cfi_offset 7, -4
 24369              	.LCFI44:
 24370              		.cfi_def_cfa_register 7
 24371 0556 7860     		str	r0, [r7, #4]
 24372 0558 0B46     		mov	r3, r1
 24373 055a 7B80     		strh	r3, [r7, #2]	@ movhi
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the input parameter */
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 24374              		.loc 1 606 0
 24375 055c 7B88     		ldrh	r3, [r7, #2]
 24376 055e B3F5006F 		cmp	r3, #2048
 24377 0562 08D1     		bne	.L45
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 24378              		.loc 1 609 0
 24379 0564 7B68     		ldr	r3, [r7, #4]
 24380 0566 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24381 0568 9BB2     		uxth	r3, r3
 24382 056a 43F40063 		orr	r3, r3, #2048
 24383 056e 9AB2     		uxth	r2, r3
 24384 0570 7B68     		ldr	r3, [r7, #4]
 24385 0572 1A80     		strh	r2, [r3, #0]	@ movhi
 24386 0574 07E0     		b	.L44
 24387              	.L45:
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 24388              		.loc 1 614 0
 24389 0576 7B68     		ldr	r3, [r7, #4]
 24390 0578 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24391 057a 9BB2     		uxth	r3, r3
 24392 057c 23F40063 		bic	r3, r3, #2048
 24393 0580 9AB2     		uxth	r2, r3
 24394 0582 7B68     		ldr	r3, [r7, #4]
 24395 0584 1A80     		strh	r2, [r3, #0]	@ movhi
 24396              	.L44:
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24397              		.loc 1 616 0
 24398 0586 07F10C07 		add	r7, r7, #12
 24399 058a BD46     		mov	sp, r7
 24400 058c 80BC     		pop	{r7}
 24401 058e 7047     		bx	lr
 24402              		.cfi_endproc
 24403              	.LFE43:
 24405              		.align	2
 24406              		.global	I2C_SMBusAlertConfig
 24407              		.thumb
 24408              		.thumb_func
 24410              	I2C_SMBusAlertConfig:
 24411              	.LFB44:
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24412              		.loc 1 628 0
 24413              		.cfi_startproc
 24414              		@ args = 0, pretend = 0, frame = 8
 24415              		@ frame_needed = 1, uses_anonymous_args = 0
 24416              		@ link register save eliminated.
 24417 0590 80B4     		push	{r7}
 24418              	.LCFI45:
 24419              		.cfi_def_cfa_offset 4
 24420 0592 83B0     		sub	sp, sp, #12
 24421              	.LCFI46:
 24422              		.cfi_def_cfa_offset 16
 24423 0594 00AF     		add	r7, sp, #0
 24424              		.cfi_offset 7, -4
 24425              	.LCFI47:
 24426              		.cfi_def_cfa_register 7
 24427 0596 7860     		str	r0, [r7, #4]
 24428 0598 0B46     		mov	r3, r1
 24429 059a 7B80     		strh	r3, [r7, #2]	@ movhi
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 24430              		.loc 1 632 0
 24431 059c 7B88     		ldrh	r3, [r7, #2]
 24432 059e B3F5005F 		cmp	r3, #8192
 24433 05a2 08D1     		bne	.L48
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 24434              		.loc 1 635 0
 24435 05a4 7B68     		ldr	r3, [r7, #4]
 24436 05a6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24437 05a8 9BB2     		uxth	r3, r3
 24438 05aa 43F40053 		orr	r3, r3, #8192
 24439 05ae 9AB2     		uxth	r2, r3
 24440 05b0 7B68     		ldr	r3, [r7, #4]
 24441 05b2 1A80     		strh	r2, [r3, #0]	@ movhi
 24442 05b4 07E0     		b	.L47
 24443              	.L48:
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 24444              		.loc 1 640 0
 24445 05b6 7B68     		ldr	r3, [r7, #4]
 24446 05b8 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24447 05ba 9BB2     		uxth	r3, r3
 24448 05bc 23F40053 		bic	r3, r3, #8192
 24449 05c0 9AB2     		uxth	r2, r3
 24450 05c2 7B68     		ldr	r3, [r7, #4]
 24451 05c4 1A80     		strh	r2, [r3, #0]	@ movhi
 24452              	.L47:
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24453              		.loc 1 642 0
 24454 05c6 07F10C07 		add	r7, r7, #12
 24455 05ca BD46     		mov	sp, r7
 24456 05cc 80BC     		pop	{r7}
 24457 05ce 7047     		bx	lr
 24458              		.cfi_endproc
 24459              	.LFE44:
 24461              		.align	2
 24462              		.global	I2C_ARPCmd
 24463              		.thumb
 24464              		.thumb_func
 24466              	I2C_ARPCmd:
 24467              	.LFB45:
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24468              		.loc 1 652 0
 24469              		.cfi_startproc
 24470              		@ args = 0, pretend = 0, frame = 8
 24471              		@ frame_needed = 1, uses_anonymous_args = 0
 24472              		@ link register save eliminated.
 24473 05d0 80B4     		push	{r7}
 24474              	.LCFI48:
 24475              		.cfi_def_cfa_offset 4
 24476 05d2 83B0     		sub	sp, sp, #12
 24477              	.LCFI49:
 24478              		.cfi_def_cfa_offset 16
 24479 05d4 00AF     		add	r7, sp, #0
 24480              		.cfi_offset 7, -4
 24481              	.LCFI50:
 24482              		.cfi_def_cfa_register 7
 24483 05d6 7860     		str	r0, [r7, #4]
 24484 05d8 0B46     		mov	r3, r1
 24485 05da FB70     		strb	r3, [r7, #3]
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24486              		.loc 1 656 0
 24487 05dc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24488 05de 002B     		cmp	r3, #0
 24489 05e0 08D0     		beq	.L51
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 24490              		.loc 1 659 0
 24491 05e2 7B68     		ldr	r3, [r7, #4]
 24492 05e4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24493 05e6 9BB2     		uxth	r3, r3
 24494 05e8 43F01003 		orr	r3, r3, #16
 24495 05ec 9AB2     		uxth	r2, r3
 24496 05ee 7B68     		ldr	r3, [r7, #4]
 24497 05f0 1A80     		strh	r2, [r3, #0]	@ movhi
 24498 05f2 07E0     		b	.L50
 24499              	.L51:
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 24500              		.loc 1 664 0
 24501 05f4 7B68     		ldr	r3, [r7, #4]
 24502 05f6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24503 05f8 9BB2     		uxth	r3, r3
 24504 05fa 23F01003 		bic	r3, r3, #16
 24505 05fe 9AB2     		uxth	r2, r3
 24506 0600 7B68     		ldr	r3, [r7, #4]
 24507 0602 1A80     		strh	r2, [r3, #0]	@ movhi
 24508              	.L50:
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24509              		.loc 1 666 0
 24510 0604 07F10C07 		add	r7, r7, #12
 24511 0608 BD46     		mov	sp, r7
 24512 060a 80BC     		pop	{r7}
 24513 060c 7047     		bx	lr
 24514              		.cfi_endproc
 24515              	.LFE45:
 24517 060e 00BF     		.align	2
 24518              		.global	I2C_SendData
 24519              		.thumb
 24520              		.thumb_func
 24522              	I2C_SendData:
 24523              	.LFB46:
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @}
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   Data transfers functions 
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                         Data transfers functions
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24524              		.loc 1 690 0
 24525              		.cfi_startproc
 24526              		@ args = 0, pretend = 0, frame = 8
 24527              		@ frame_needed = 1, uses_anonymous_args = 0
 24528              		@ link register save eliminated.
 24529 0610 80B4     		push	{r7}
 24530              	.LCFI51:
 24531              		.cfi_def_cfa_offset 4
 24532 0612 83B0     		sub	sp, sp, #12
 24533              	.LCFI52:
 24534              		.cfi_def_cfa_offset 16
 24535 0614 00AF     		add	r7, sp, #0
 24536              		.cfi_offset 7, -4
 24537              	.LCFI53:
 24538              		.cfi_def_cfa_register 7
 24539 0616 7860     		str	r0, [r7, #4]
 24540 0618 0B46     		mov	r3, r1
 24541 061a FB70     		strb	r3, [r7, #3]
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->DR = Data;
 24542              		.loc 1 694 0
 24543 061c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24544 061e 9AB2     		uxth	r2, r3
 24545 0620 7B68     		ldr	r3, [r7, #4]
 24546 0622 1A82     		strh	r2, [r3, #16]	@ movhi
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24547              		.loc 1 695 0
 24548 0624 07F10C07 		add	r7, r7, #12
 24549 0628 BD46     		mov	sp, r7
 24550 062a 80BC     		pop	{r7}
 24551 062c 7047     		bx	lr
 24552              		.cfi_endproc
 24553              	.LFE46:
 24555 062e 00BF     		.align	2
 24556              		.global	I2C_ReceiveData
 24557              		.thumb
 24558              		.thumb_func
 24560              	I2C_ReceiveData:
 24561              	.LFB47:
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The value of the received data.
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24562              		.loc 1 703 0
 24563              		.cfi_startproc
 24564              		@ args = 0, pretend = 0, frame = 8
 24565              		@ frame_needed = 1, uses_anonymous_args = 0
 24566              		@ link register save eliminated.
 24567 0630 80B4     		push	{r7}
 24568              	.LCFI54:
 24569              		.cfi_def_cfa_offset 4
 24570 0632 83B0     		sub	sp, sp, #12
 24571              	.LCFI55:
 24572              		.cfi_def_cfa_offset 16
 24573 0634 00AF     		add	r7, sp, #0
 24574              		.cfi_offset 7, -4
 24575              	.LCFI56:
 24576              		.cfi_def_cfa_register 7
 24577 0636 7860     		str	r0, [r7, #4]
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the data in the DR register */
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 24578              		.loc 1 707 0
 24579 0638 7B68     		ldr	r3, [r7, #4]
 24580 063a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24581 063c 9BB2     		uxth	r3, r3
 24582 063e DBB2     		uxtb	r3, r3
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24583              		.loc 1 708 0
 24584 0640 1846     		mov	r0, r3
 24585 0642 07F10C07 		add	r7, r7, #12
 24586 0646 BD46     		mov	sp, r7
 24587 0648 80BC     		pop	{r7}
 24588 064a 7047     		bx	lr
 24589              		.cfi_endproc
 24590              	.LFE47:
 24592              		.align	2
 24593              		.global	I2C_TransmitPEC
 24594              		.thumb
 24595              		.thumb_func
 24597              	I2C_TransmitPEC:
 24598              	.LFB48:
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @}
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   PEC management functions 
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                          PEC management functions
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24599              		.loc 1 734 0
 24600              		.cfi_startproc
 24601              		@ args = 0, pretend = 0, frame = 8
 24602              		@ frame_needed = 1, uses_anonymous_args = 0
 24603              		@ link register save eliminated.
 24604 064c 80B4     		push	{r7}
 24605              	.LCFI57:
 24606              		.cfi_def_cfa_offset 4
 24607 064e 83B0     		sub	sp, sp, #12
 24608              	.LCFI58:
 24609              		.cfi_def_cfa_offset 16
 24610 0650 00AF     		add	r7, sp, #0
 24611              		.cfi_offset 7, -4
 24612              	.LCFI59:
 24613              		.cfi_def_cfa_register 7
 24614 0652 7860     		str	r0, [r7, #4]
 24615 0654 0B46     		mov	r3, r1
 24616 0656 FB70     		strb	r3, [r7, #3]
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24617              		.loc 1 738 0
 24618 0658 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24619 065a 002B     		cmp	r3, #0
 24620 065c 08D0     		beq	.L56
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 24621              		.loc 1 741 0
 24622 065e 7B68     		ldr	r3, [r7, #4]
 24623 0660 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24624 0662 9BB2     		uxth	r3, r3
 24625 0664 43F48053 		orr	r3, r3, #4096
 24626 0668 9AB2     		uxth	r2, r3
 24627 066a 7B68     		ldr	r3, [r7, #4]
 24628 066c 1A80     		strh	r2, [r3, #0]	@ movhi
 24629 066e 07E0     		b	.L55
 24630              	.L56:
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 24631              		.loc 1 746 0
 24632 0670 7B68     		ldr	r3, [r7, #4]
 24633 0672 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24634 0674 9BB2     		uxth	r3, r3
 24635 0676 23F48053 		bic	r3, r3, #4096
 24636 067a 9AB2     		uxth	r2, r3
 24637 067c 7B68     		ldr	r3, [r7, #4]
 24638 067e 1A80     		strh	r2, [r3, #0]	@ movhi
 24639              	.L55:
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24640              		.loc 1 748 0
 24641 0680 07F10C07 		add	r7, r7, #12
 24642 0684 BD46     		mov	sp, r7
 24643 0686 80BC     		pop	{r7}
 24644 0688 7047     		bx	lr
 24645              		.cfi_endproc
 24646              	.LFE48:
 24648 068a 00BF     		.align	2
 24649              		.global	I2C_PECPositionConfig
 24650              		.thumb
 24651              		.thumb_func
 24653              	I2C_PECPositionConfig:
 24654              	.LFB49:
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *       
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          is intended to used in I2C mode.
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24655              		.loc 1 765 0
 24656              		.cfi_startproc
 24657              		@ args = 0, pretend = 0, frame = 8
 24658              		@ frame_needed = 1, uses_anonymous_args = 0
 24659              		@ link register save eliminated.
 24660 068c 80B4     		push	{r7}
 24661              	.LCFI60:
 24662              		.cfi_def_cfa_offset 4
 24663 068e 83B0     		sub	sp, sp, #12
 24664              	.LCFI61:
 24665              		.cfi_def_cfa_offset 16
 24666 0690 00AF     		add	r7, sp, #0
 24667              		.cfi_offset 7, -4
 24668              	.LCFI62:
 24669              		.cfi_def_cfa_register 7
 24670 0692 7860     		str	r0, [r7, #4]
 24671 0694 0B46     		mov	r3, r1
 24672 0696 7B80     		strh	r3, [r7, #2]	@ movhi
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 24673              		.loc 1 769 0
 24674 0698 7B88     		ldrh	r3, [r7, #2]
 24675 069a B3F5006F 		cmp	r3, #2048
 24676 069e 08D1     		bne	.L59
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 24677              		.loc 1 772 0
 24678 06a0 7B68     		ldr	r3, [r7, #4]
 24679 06a2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24680 06a4 9BB2     		uxth	r3, r3
 24681 06a6 43F40063 		orr	r3, r3, #2048
 24682 06aa 9AB2     		uxth	r2, r3
 24683 06ac 7B68     		ldr	r3, [r7, #4]
 24684 06ae 1A80     		strh	r2, [r3, #0]	@ movhi
 24685 06b0 07E0     		b	.L58
 24686              	.L59:
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 24687              		.loc 1 777 0
 24688 06b2 7B68     		ldr	r3, [r7, #4]
 24689 06b4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24690 06b6 9BB2     		uxth	r3, r3
 24691 06b8 23F40063 		bic	r3, r3, #2048
 24692 06bc 9AB2     		uxth	r2, r3
 24693 06be 7B68     		ldr	r3, [r7, #4]
 24694 06c0 1A80     		strh	r2, [r3, #0]	@ movhi
 24695              	.L58:
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24696              		.loc 1 779 0
 24697 06c2 07F10C07 		add	r7, r7, #12
 24698 06c6 BD46     		mov	sp, r7
 24699 06c8 80BC     		pop	{r7}
 24700 06ca 7047     		bx	lr
 24701              		.cfi_endproc
 24702              	.LFE49:
 24704              		.align	2
 24705              		.global	I2C_CalculatePEC
 24706              		.thumb
 24707              		.thumb_func
 24709              	I2C_CalculatePEC:
 24710              	.LFB50:
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24711              		.loc 1 789 0
 24712              		.cfi_startproc
 24713              		@ args = 0, pretend = 0, frame = 8
 24714              		@ frame_needed = 1, uses_anonymous_args = 0
 24715              		@ link register save eliminated.
 24716 06cc 80B4     		push	{r7}
 24717              	.LCFI63:
 24718              		.cfi_def_cfa_offset 4
 24719 06ce 83B0     		sub	sp, sp, #12
 24720              	.LCFI64:
 24721              		.cfi_def_cfa_offset 16
 24722 06d0 00AF     		add	r7, sp, #0
 24723              		.cfi_offset 7, -4
 24724              	.LCFI65:
 24725              		.cfi_def_cfa_register 7
 24726 06d2 7860     		str	r0, [r7, #4]
 24727 06d4 0B46     		mov	r3, r1
 24728 06d6 FB70     		strb	r3, [r7, #3]
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24729              		.loc 1 793 0
 24730 06d8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24731 06da 002B     		cmp	r3, #0
 24732 06dc 08D0     		beq	.L62
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 24733              		.loc 1 796 0
 24734 06de 7B68     		ldr	r3, [r7, #4]
 24735 06e0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24736 06e2 9BB2     		uxth	r3, r3
 24737 06e4 43F02003 		orr	r3, r3, #32
 24738 06e8 9AB2     		uxth	r2, r3
 24739 06ea 7B68     		ldr	r3, [r7, #4]
 24740 06ec 1A80     		strh	r2, [r3, #0]	@ movhi
 24741 06ee 07E0     		b	.L61
 24742              	.L62:
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 24743              		.loc 1 801 0
 24744 06f0 7B68     		ldr	r3, [r7, #4]
 24745 06f2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24746 06f4 9BB2     		uxth	r3, r3
 24747 06f6 23F02003 		bic	r3, r3, #32
 24748 06fa 9AB2     		uxth	r2, r3
 24749 06fc 7B68     		ldr	r3, [r7, #4]
 24750 06fe 1A80     		strh	r2, [r3, #0]	@ movhi
 24751              	.L61:
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24752              		.loc 1 803 0
 24753 0700 07F10C07 		add	r7, r7, #12
 24754 0704 BD46     		mov	sp, r7
 24755 0706 80BC     		pop	{r7}
 24756 0708 7047     		bx	lr
 24757              		.cfi_endproc
 24758              	.LFE50:
 24760 070a 00BF     		.align	2
 24761              		.global	I2C_GetPEC
 24762              		.thumb
 24763              		.thumb_func
 24765              	I2C_GetPEC:
 24766              	.LFB51:
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The PEC value.
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24767              		.loc 1 811 0
 24768              		.cfi_startproc
 24769              		@ args = 0, pretend = 0, frame = 8
 24770              		@ frame_needed = 1, uses_anonymous_args = 0
 24771              		@ link register save eliminated.
 24772 070c 80B4     		push	{r7}
 24773              	.LCFI66:
 24774              		.cfi_def_cfa_offset 4
 24775 070e 83B0     		sub	sp, sp, #12
 24776              	.LCFI67:
 24777              		.cfi_def_cfa_offset 16
 24778 0710 00AF     		add	r7, sp, #0
 24779              		.cfi_offset 7, -4
 24780              	.LCFI68:
 24781              		.cfi_def_cfa_register 7
 24782 0712 7860     		str	r0, [r7, #4]
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 24783              		.loc 1 815 0
 24784 0714 7B68     		ldr	r3, [r7, #4]
 24785 0716 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 24786 0718 9BB2     		uxth	r3, r3
 24787 071a 4FEA1323 		lsr	r3, r3, #8
 24788 071e 9BB2     		uxth	r3, r3
 24789 0720 DBB2     		uxtb	r3, r3
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24790              		.loc 1 816 0
 24791 0722 1846     		mov	r0, r3
 24792 0724 07F10C07 		add	r7, r7, #12
 24793 0728 BD46     		mov	sp, r7
 24794 072a 80BC     		pop	{r7}
 24795 072c 7047     		bx	lr
 24796              		.cfi_endproc
 24797              	.LFE51:
 24799 072e 00BF     		.align	2
 24800              		.global	I2C_DMACmd
 24801              		.thumb
 24802              		.thumb_func
 24804              	I2C_DMACmd:
 24805              	.LFB52:
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @}
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                          DMA transfers management functions
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   requests.
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24806              		.loc 1 844 0
 24807              		.cfi_startproc
 24808              		@ args = 0, pretend = 0, frame = 8
 24809              		@ frame_needed = 1, uses_anonymous_args = 0
 24810              		@ link register save eliminated.
 24811 0730 80B4     		push	{r7}
 24812              	.LCFI69:
 24813              		.cfi_def_cfa_offset 4
 24814 0732 83B0     		sub	sp, sp, #12
 24815              	.LCFI70:
 24816              		.cfi_def_cfa_offset 16
 24817 0734 00AF     		add	r7, sp, #0
 24818              		.cfi_offset 7, -4
 24819              	.LCFI71:
 24820              		.cfi_def_cfa_register 7
 24821 0736 7860     		str	r0, [r7, #4]
 24822 0738 0B46     		mov	r3, r1
 24823 073a FB70     		strb	r3, [r7, #3]
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24824              		.loc 1 848 0
 24825 073c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24826 073e 002B     		cmp	r3, #0
 24827 0740 08D0     		beq	.L66
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 24828              		.loc 1 851 0
 24829 0742 7B68     		ldr	r3, [r7, #4]
 24830 0744 9B88     		ldrh	r3, [r3, #4]	@ movhi
 24831 0746 9BB2     		uxth	r3, r3
 24832 0748 43F40063 		orr	r3, r3, #2048
 24833 074c 9AB2     		uxth	r2, r3
 24834 074e 7B68     		ldr	r3, [r7, #4]
 24835 0750 9A80     		strh	r2, [r3, #4]	@ movhi
 24836 0752 07E0     		b	.L65
 24837              	.L66:
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 24838              		.loc 1 856 0
 24839 0754 7B68     		ldr	r3, [r7, #4]
 24840 0756 9B88     		ldrh	r3, [r3, #4]	@ movhi
 24841 0758 9BB2     		uxth	r3, r3
 24842 075a 23F40063 		bic	r3, r3, #2048
 24843 075e 9AB2     		uxth	r2, r3
 24844 0760 7B68     		ldr	r3, [r7, #4]
 24845 0762 9A80     		strh	r2, [r3, #4]	@ movhi
 24846              	.L65:
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24847              		.loc 1 858 0
 24848 0764 07F10C07 		add	r7, r7, #12
 24849 0768 BD46     		mov	sp, r7
 24850 076a 80BC     		pop	{r7}
 24851 076c 7047     		bx	lr
 24852              		.cfi_endproc
 24853              	.LFE52:
 24855 076e 00BF     		.align	2
 24856              		.global	I2C_DMALastTransferCmd
 24857              		.thumb
 24858              		.thumb_func
 24860              	I2C_DMALastTransferCmd:
 24861              	.LFB53:
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24862              		.loc 1 868 0
 24863              		.cfi_startproc
 24864              		@ args = 0, pretend = 0, frame = 8
 24865              		@ frame_needed = 1, uses_anonymous_args = 0
 24866              		@ link register save eliminated.
 24867 0770 80B4     		push	{r7}
 24868              	.LCFI72:
 24869              		.cfi_def_cfa_offset 4
 24870 0772 83B0     		sub	sp, sp, #12
 24871              	.LCFI73:
 24872              		.cfi_def_cfa_offset 16
 24873 0774 00AF     		add	r7, sp, #0
 24874              		.cfi_offset 7, -4
 24875              	.LCFI74:
 24876              		.cfi_def_cfa_register 7
 24877 0776 7860     		str	r0, [r7, #4]
 24878 0778 0B46     		mov	r3, r1
 24879 077a FB70     		strb	r3, [r7, #3]
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24880              		.loc 1 872 0
 24881 077c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24882 077e 002B     		cmp	r3, #0
 24883 0780 08D0     		beq	.L69
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 24884              		.loc 1 875 0
 24885 0782 7B68     		ldr	r3, [r7, #4]
 24886 0784 9B88     		ldrh	r3, [r3, #4]	@ movhi
 24887 0786 9BB2     		uxth	r3, r3
 24888 0788 43F48053 		orr	r3, r3, #4096
 24889 078c 9AB2     		uxth	r2, r3
 24890 078e 7B68     		ldr	r3, [r7, #4]
 24891 0790 9A80     		strh	r2, [r3, #4]	@ movhi
 24892 0792 07E0     		b	.L68
 24893              	.L69:
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 24894              		.loc 1 880 0
 24895 0794 7B68     		ldr	r3, [r7, #4]
 24896 0796 9B88     		ldrh	r3, [r3, #4]	@ movhi
 24897 0798 9BB2     		uxth	r3, r3
 24898 079a 23F48053 		bic	r3, r3, #4096
 24899 079e 9AB2     		uxth	r2, r3
 24900 07a0 7B68     		ldr	r3, [r7, #4]
 24901 07a2 9A80     		strh	r2, [r3, #4]	@ movhi
 24902              	.L68:
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24903              		.loc 1 882 0
 24904 07a4 07F10C07 		add	r7, r7, #12
 24905 07a8 BD46     		mov	sp, r7
 24906 07aa 80BC     		pop	{r7}
 24907 07ac 7047     		bx	lr
 24908              		.cfi_endproc
 24909              	.LFE53:
 24911 07ae 00BF     		.align	2
 24912              		.global	I2C_ReadRegister
 24913              		.thumb
 24914              		.thumb_func
 24916              	I2C_ReadRegister:
 24917              	.LFB54:
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @}
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                 Interrupts, events and flags management functions
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================   
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   depending on the application requirements and constraints:
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****          
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****    
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      -----------------------------------------------------------
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         (can be the combination of one or more flags).
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - When to use
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                manual (RM0033).
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - Limitations
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                the communication hold or corrupted real state. 
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****          
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      @note 
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              and return to correct  communication status.
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      -------------------------------------------------------------------- 
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - When to use
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                function.
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                the library (stm32f2xx_i2c.h) or to custom values defined by user.
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                same time.
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                like I2C_CheckEvent() function.
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - Limitations
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - User may need to define his own events.
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                (and ignores error flags).
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      -----------------------------------------------------------------------
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - When to use
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                phase.
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                events are monitored through multiple flags).
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - Limitations: 
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                one single event.
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****    stm32f2xx_i2c.h file.
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****        
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****    
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The value of the read register.
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24918              		.loc 1 1006 0
 24919              		.cfi_startproc
 24920              		@ args = 0, pretend = 0, frame = 16
 24921              		@ frame_needed = 1, uses_anonymous_args = 0
 24922              		@ link register save eliminated.
 24923 07b0 80B4     		push	{r7}
 24924              	.LCFI75:
 24925              		.cfi_def_cfa_offset 4
 24926 07b2 85B0     		sub	sp, sp, #20
 24927              	.LCFI76:
 24928              		.cfi_def_cfa_offset 24
 24929 07b4 00AF     		add	r7, sp, #0
 24930              		.cfi_offset 7, -4
 24931              	.LCFI77:
 24932              		.cfi_def_cfa_register 7
 24933 07b6 7860     		str	r0, [r7, #4]
 24934 07b8 0B46     		mov	r3, r1
 24935 07ba FB70     		strb	r3, [r7, #3]
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   __IO uint32_t tmp = 0;
 24936              		.loc 1 1007 0
 24937 07bc 4FF00003 		mov	r3, #0
 24938 07c0 FB60     		str	r3, [r7, #12]
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 24939              		.loc 1 1013 0
 24940 07c2 7B68     		ldr	r3, [r7, #4]
 24941 07c4 FB60     		str	r3, [r7, #12]
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmp += I2C_Register;
 24942              		.loc 1 1014 0
 24943 07c6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24944 07c8 FB68     		ldr	r3, [r7, #12]
 24945 07ca 1344     		add	r3, r2, r3
 24946 07cc FB60     		str	r3, [r7, #12]
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the selected register value */
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 24947              		.loc 1 1017 0
 24948 07ce FB68     		ldr	r3, [r7, #12]
 24949 07d0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24950 07d2 9BB2     		uxth	r3, r3
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 24951              		.loc 1 1018 0
 24952 07d4 1846     		mov	r0, r3
 24953 07d6 07F11407 		add	r7, r7, #20
 24954 07da BD46     		mov	sp, r7
 24955 07dc 80BC     		pop	{r7}
 24956 07de 7047     		bx	lr
 24957              		.cfi_endproc
 24958              	.LFE54:
 24960              		.align	2
 24961              		.global	I2C_ITConfig
 24962              		.thumb
 24963              		.thumb_func
 24965              	I2C_ITConfig:
 24966              	.LFB55:
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 24967              		.loc 1 1033 0
 24968              		.cfi_startproc
 24969              		@ args = 0, pretend = 0, frame = 8
 24970              		@ frame_needed = 1, uses_anonymous_args = 0
 24971              		@ link register save eliminated.
 24972 07e0 80B4     		push	{r7}
 24973              	.LCFI78:
 24974              		.cfi_def_cfa_offset 4
 24975 07e2 83B0     		sub	sp, sp, #12
 24976              	.LCFI79:
 24977              		.cfi_def_cfa_offset 16
 24978 07e4 00AF     		add	r7, sp, #0
 24979              		.cfi_offset 7, -4
 24980              	.LCFI80:
 24981              		.cfi_def_cfa_register 7
 24982 07e6 7860     		str	r0, [r7, #4]
 24983 07e8 1346     		mov	r3, r2
 24984 07ea 0A46     		mov	r2, r1	@ movhi
 24985 07ec 7A80     		strh	r2, [r7, #2]	@ movhi
 24986 07ee 7B70     		strb	r3, [r7, #1]
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 24987              		.loc 1 1039 0
 24988 07f0 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 24989 07f2 002B     		cmp	r3, #0
 24990 07f4 09D0     		beq	.L73
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 24991              		.loc 1 1042 0
 24992 07f6 7B68     		ldr	r3, [r7, #4]
 24993 07f8 9B88     		ldrh	r3, [r3, #4]	@ movhi
 24994 07fa 9AB2     		uxth	r2, r3
 24995 07fc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 24996 07fe 42EA0303 		orr	r3, r2, r3
 24997 0802 9AB2     		uxth	r2, r3
 24998 0804 7B68     		ldr	r3, [r7, #4]
 24999 0806 9A80     		strh	r2, [r3, #4]	@ movhi
 25000 0808 0BE0     		b	.L72
 25001              	.L73:
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 25002              		.loc 1 1047 0
 25003 080a 7B68     		ldr	r3, [r7, #4]
 25004 080c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25005 080e 9AB2     		uxth	r2, r3
 25006 0810 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25007 0812 6FEA0303 		mvn	r3, r3
 25008 0816 9BB2     		uxth	r3, r3
 25009 0818 02EA0303 		and	r3, r2, r3
 25010 081c 9AB2     		uxth	r2, r3
 25011 081e 7B68     		ldr	r3, [r7, #4]
 25012 0820 9A80     		strh	r2, [r3, #4]	@ movhi
 25013              	.L72:
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 25014              		.loc 1 1049 0
 25015 0822 07F10C07 		add	r7, r7, #12
 25016 0826 BD46     		mov	sp, r7
 25017 0828 80BC     		pop	{r7}
 25018 082a 7047     		bx	lr
 25019              		.cfi_endproc
 25020              	.LFE55:
 25022              		.align	2
 25023              		.global	I2C_CheckEvent
 25024              		.thumb
 25025              		.thumb_func
 25027              	I2C_CheckEvent:
 25028              	.LFB56:
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                           1. Basic state monitoring                    
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  */
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         as parameter.
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *     
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         in stm32f2xx_i2c.h file.
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *    
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 25029              		.loc 1 1092 0
 25030              		.cfi_startproc
 25031              		@ args = 0, pretend = 0, frame = 24
 25032              		@ frame_needed = 1, uses_anonymous_args = 0
 25033              		@ link register save eliminated.
 25034 082c 80B4     		push	{r7}
 25035              	.LCFI81:
 25036              		.cfi_def_cfa_offset 4
 25037 082e 87B0     		sub	sp, sp, #28
 25038              	.LCFI82:
 25039              		.cfi_def_cfa_offset 32
 25040 0830 00AF     		add	r7, sp, #0
 25041              		.cfi_offset 7, -4
 25042              	.LCFI83:
 25043              		.cfi_def_cfa_register 7
 25044 0832 7860     		str	r0, [r7, #4]
 25045 0834 3960     		str	r1, [r7, #0]
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t lastevent = 0;
 25046              		.loc 1 1093 0
 25047 0836 4FF00003 		mov	r3, #0
 25048 083a 3B61     		str	r3, [r7, #16]
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 25049              		.loc 1 1094 0
 25050 083c 4FF00003 		mov	r3, #0
 25051 0840 FB60     		str	r3, [r7, #12]
 25052 0842 4FF00003 		mov	r3, #0
 25053 0846 BB60     		str	r3, [r7, #8]
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ErrorStatus status = ERROR;
 25054              		.loc 1 1095 0
 25055 0848 4FF00003 		mov	r3, #0
 25056 084c FB75     		strb	r3, [r7, #23]
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Read the I2Cx status register */
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag1 = I2Cx->SR1;
 25057              		.loc 1 1102 0
 25058 084e 7B68     		ldr	r3, [r7, #4]
 25059 0850 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25060 0852 9BB2     		uxth	r3, r3
 25061 0854 FB60     		str	r3, [r7, #12]
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag2 = I2Cx->SR2;
 25062              		.loc 1 1103 0
 25063 0856 7B68     		ldr	r3, [r7, #4]
 25064 0858 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25065 085a 9BB2     		uxth	r3, r3
 25066 085c BB60     		str	r3, [r7, #8]
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag2 = flag2 << 16;
 25067              		.loc 1 1104 0
 25068 085e BB68     		ldr	r3, [r7, #8]
 25069 0860 4FEA0343 		lsl	r3, r3, #16
 25070 0864 BB60     		str	r3, [r7, #8]
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 25071              		.loc 1 1107 0
 25072 0866 FA68     		ldr	r2, [r7, #12]
 25073 0868 BB68     		ldr	r3, [r7, #8]
 25074 086a 42EA0303 		orr	r3, r2, r3
 25075 086e 23F07F43 		bic	r3, r3, #-16777216
 25076 0872 3B61     		str	r3, [r7, #16]
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 25077              		.loc 1 1110 0
 25078 0874 3A69     		ldr	r2, [r7, #16]
 25079 0876 3B68     		ldr	r3, [r7, #0]
 25080 0878 02EA0302 		and	r2, r2, r3
 25081 087c 3B68     		ldr	r3, [r7, #0]
 25082 087e 9A42     		cmp	r2, r3
 25083 0880 03D1     		bne	.L76
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     status = SUCCESS;
 25084              		.loc 1 1113 0
 25085 0882 4FF00103 		mov	r3, #1
 25086 0886 FB75     		strb	r3, [r7, #23]
 25087 0888 02E0     		b	.L77
 25088              	.L76:
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     status = ERROR;
 25089              		.loc 1 1118 0
 25090 088a 4FF00003 		mov	r3, #0
 25091 088e FB75     		strb	r3, [r7, #23]
 25092              	.L77:
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return status */
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return status;
 25093              		.loc 1 1121 0
 25094 0890 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 25095              		.loc 1 1122 0
 25096 0892 1846     		mov	r0, r3
 25097 0894 07F11C07 		add	r7, r7, #28
 25098 0898 BD46     		mov	sp, r7
 25099 089a 80BC     		pop	{r7}
 25100 089c 7047     		bx	lr
 25101              		.cfi_endproc
 25102              	.LFE56:
 25104 089e 00BF     		.align	2
 25105              		.global	I2C_GetLastEvent
 25106              		.thumb
 25107              		.thumb_func
 25109              	I2C_GetLastEvent:
 25110              	.LFB57:
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                           2. Advanced state monitoring                   
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  */
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *     
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         in stm32f2xx_i2c.h file.
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *    
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The last event
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 25111              		.loc 1 1140 0
 25112              		.cfi_startproc
 25113              		@ args = 0, pretend = 0, frame = 24
 25114              		@ frame_needed = 1, uses_anonymous_args = 0
 25115              		@ link register save eliminated.
 25116 08a0 80B4     		push	{r7}
 25117              	.LCFI84:
 25118              		.cfi_def_cfa_offset 4
 25119 08a2 87B0     		sub	sp, sp, #28
 25120              	.LCFI85:
 25121              		.cfi_def_cfa_offset 32
 25122 08a4 00AF     		add	r7, sp, #0
 25123              		.cfi_offset 7, -4
 25124              	.LCFI86:
 25125              		.cfi_def_cfa_register 7
 25126 08a6 7860     		str	r0, [r7, #4]
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t lastevent = 0;
 25127              		.loc 1 1141 0
 25128 08a8 4FF00003 		mov	r3, #0
 25129 08ac 7B61     		str	r3, [r7, #20]
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 25130              		.loc 1 1142 0
 25131 08ae 4FF00003 		mov	r3, #0
 25132 08b2 3B61     		str	r3, [r7, #16]
 25133 08b4 4FF00003 		mov	r3, #0
 25134 08b8 FB60     		str	r3, [r7, #12]
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Read the I2Cx status register */
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag1 = I2Cx->SR1;
 25135              		.loc 1 1148 0
 25136 08ba 7B68     		ldr	r3, [r7, #4]
 25137 08bc 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25138 08be 9BB2     		uxth	r3, r3
 25139 08c0 3B61     		str	r3, [r7, #16]
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag2 = I2Cx->SR2;
 25140              		.loc 1 1149 0
 25141 08c2 7B68     		ldr	r3, [r7, #4]
 25142 08c4 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25143 08c6 9BB2     		uxth	r3, r3
 25144 08c8 FB60     		str	r3, [r7, #12]
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag2 = flag2 << 16;
 25145              		.loc 1 1150 0
 25146 08ca FB68     		ldr	r3, [r7, #12]
 25147 08cc 4FEA0343 		lsl	r3, r3, #16
 25148 08d0 FB60     		str	r3, [r7, #12]
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 25149              		.loc 1 1153 0
 25150 08d2 3A69     		ldr	r2, [r7, #16]
 25151 08d4 FB68     		ldr	r3, [r7, #12]
 25152 08d6 42EA0303 		orr	r3, r2, r3
 25153 08da 23F07F43 		bic	r3, r3, #-16777216
 25154 08de 7B61     		str	r3, [r7, #20]
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return status */
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return lastevent;
 25155              		.loc 1 1156 0
 25156 08e0 7B69     		ldr	r3, [r7, #20]
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 25157              		.loc 1 1157 0
 25158 08e2 1846     		mov	r0, r3
 25159 08e4 07F11C07 		add	r7, r7, #28
 25160 08e8 BD46     		mov	sp, r7
 25161 08ea 80BC     		pop	{r7}
 25162 08ec 7047     		bx	lr
 25163              		.cfi_endproc
 25164              	.LFE57:
 25166 08ee 00BF     		.align	2
 25167              		.global	I2C_GetFlagStatus
 25168              		.thumb
 25169              		.thumb_func
 25171              	I2C_GetFlagStatus:
 25172              	.LFB58:
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  */
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 25173              		.loc 1 1195 0
 25174              		.cfi_startproc
 25175              		@ args = 0, pretend = 0, frame = 24
 25176              		@ frame_needed = 1, uses_anonymous_args = 0
 25177              		@ link register save eliminated.
 25178 08f0 80B4     		push	{r7}
 25179              	.LCFI87:
 25180              		.cfi_def_cfa_offset 4
 25181 08f2 87B0     		sub	sp, sp, #28
 25182              	.LCFI88:
 25183              		.cfi_def_cfa_offset 32
 25184 08f4 00AF     		add	r7, sp, #0
 25185              		.cfi_offset 7, -4
 25186              	.LCFI89:
 25187              		.cfi_def_cfa_register 7
 25188 08f6 7860     		str	r0, [r7, #4]
 25189 08f8 3960     		str	r1, [r7, #0]
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   FlagStatus bitstatus = RESET;
 25190              		.loc 1 1196 0
 25191 08fa 4FF00003 		mov	r3, #0
 25192 08fe FB75     		strb	r3, [r7, #23]
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 25193              		.loc 1 1197 0
 25194 0900 4FF00003 		mov	r3, #0
 25195 0904 3B61     		str	r3, [r7, #16]
 25196 0906 4FF00003 		mov	r3, #0
 25197 090a FB60     		str	r3, [r7, #12]
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 25198              		.loc 1 1204 0
 25199 090c 7B68     		ldr	r3, [r7, #4]
 25200 090e FB60     		str	r3, [r7, #12]
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Read flag register index */
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 25201              		.loc 1 1207 0
 25202 0910 3B68     		ldr	r3, [r7, #0]
 25203 0912 4FEA1373 		lsr	r3, r3, #28
 25204 0916 3B61     		str	r3, [r7, #16]
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 25205              		.loc 1 1210 0
 25206 0918 3B68     		ldr	r3, [r7, #0]
 25207 091a 23F07F43 		bic	r3, r3, #-16777216
 25208 091e 3B60     		str	r3, [r7, #0]
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if(i2creg != 0)
 25209              		.loc 1 1212 0
 25210 0920 3B69     		ldr	r3, [r7, #16]
 25211 0922 002B     		cmp	r3, #0
 25212 0924 04D0     		beq	.L80
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     i2cxbase += 0x14;
 25213              		.loc 1 1215 0
 25214 0926 FB68     		ldr	r3, [r7, #12]
 25215 0928 03F11403 		add	r3, r3, #20
 25216 092c FB60     		str	r3, [r7, #12]
 25217 092e 07E0     		b	.L81
 25218              	.L80:
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 25219              		.loc 1 1220 0
 25220 0930 3B68     		ldr	r3, [r7, #0]
 25221 0932 4FEA1343 		lsr	r3, r3, #16
 25222 0936 3B60     		str	r3, [r7, #0]
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     i2cxbase += 0x18;
 25223              		.loc 1 1222 0
 25224 0938 FB68     		ldr	r3, [r7, #12]
 25225 093a 03F11803 		add	r3, r3, #24
 25226 093e FB60     		str	r3, [r7, #12]
 25227              	.L81:
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 25228              		.loc 1 1225 0
 25229 0940 FB68     		ldr	r3, [r7, #12]
 25230 0942 1A68     		ldr	r2, [r3, #0]
 25231 0944 3B68     		ldr	r3, [r7, #0]
 25232 0946 02EA0303 		and	r3, r2, r3
 25233 094a 002B     		cmp	r3, #0
 25234 094c 03D0     		beq	.L82
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C_FLAG is set */
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     bitstatus = SET;
 25235              		.loc 1 1228 0
 25236 094e 4FF00103 		mov	r3, #1
 25237 0952 FB75     		strb	r3, [r7, #23]
 25238 0954 02E0     		b	.L83
 25239              	.L82:
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C_FLAG is reset */
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     bitstatus = RESET;
 25240              		.loc 1 1233 0
 25241 0956 4FF00003 		mov	r3, #0
 25242 095a FB75     		strb	r3, [r7, #23]
 25243              	.L83:
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return  bitstatus;
 25244              		.loc 1 1237 0
 25245 095c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 25246              		.loc 1 1238 0
 25247 095e 1846     		mov	r0, r3
 25248 0960 07F11C07 		add	r7, r7, #28
 25249 0964 BD46     		mov	sp, r7
 25250 0966 80BC     		pop	{r7}
 25251 0968 7047     		bx	lr
 25252              		.cfi_endproc
 25253              	.LFE58:
 25255 096a 00BF     		.align	2
 25256              		.global	I2C_ClearFlag
 25257              		.thumb
 25258              		.thumb_func
 25260              	I2C_ClearFlag:
 25261              	.LFB59:
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *   
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          second byte of the address in DR register.
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          register (I2C_SendData()).
1268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *  
1269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
1270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 25262              		.loc 1 1272 0
 25263              		.cfi_startproc
 25264              		@ args = 0, pretend = 0, frame = 16
 25265              		@ frame_needed = 1, uses_anonymous_args = 0
 25266              		@ link register save eliminated.
 25267 096c 80B4     		push	{r7}
 25268              	.LCFI90:
 25269              		.cfi_def_cfa_offset 4
 25270 096e 85B0     		sub	sp, sp, #20
 25271              	.LCFI91:
 25272              		.cfi_def_cfa_offset 24
 25273 0970 00AF     		add	r7, sp, #0
 25274              		.cfi_offset 7, -4
 25275              	.LCFI92:
 25276              		.cfi_def_cfa_register 7
 25277 0972 7860     		str	r0, [r7, #4]
 25278 0974 3960     		str	r1, [r7, #0]
1273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t flagpos = 0;
 25279              		.loc 1 1273 0
 25280 0976 4FF00003 		mov	r3, #0
 25281 097a FB60     		str	r3, [r7, #12]
1274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2C flag position */
1278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 25282              		.loc 1 1278 0
 25283 097c 3B68     		ldr	r3, [r7, #0]
 25284 097e 23F07F43 		bic	r3, r3, #-16777216
 25285 0982 FB60     		str	r3, [r7, #12]
1279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear the selected I2C flag */
1280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 25286              		.loc 1 1280 0
 25287 0984 FB68     		ldr	r3, [r7, #12]
 25288 0986 9BB2     		uxth	r3, r3
 25289 0988 6FEA0303 		mvn	r3, r3
 25290 098c 9AB2     		uxth	r2, r3
 25291 098e 7B68     		ldr	r3, [r7, #4]
 25292 0990 9A82     		strh	r2, [r3, #20]	@ movhi
1281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 25293              		.loc 1 1281 0
 25294 0992 07F11407 		add	r7, r7, #20
 25295 0996 BD46     		mov	sp, r7
 25296 0998 80BC     		pop	{r7}
 25297 099a 7047     		bx	lr
 25298              		.cfi_endproc
 25299              	.LFE59:
 25301              		.align	2
 25302              		.global	I2C_GetITStatus
 25303              		.thumb
 25304              		.thumb_func
 25306              	I2C_GetITStatus:
 25307              	.LFB60:
1282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
1288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 25308              		.loc 1 1306 0
 25309              		.cfi_startproc
 25310              		@ args = 0, pretend = 0, frame = 16
 25311              		@ frame_needed = 1, uses_anonymous_args = 0
 25312              		@ link register save eliminated.
 25313 099c 80B4     		push	{r7}
 25314              	.LCFI93:
 25315              		.cfi_def_cfa_offset 4
 25316 099e 85B0     		sub	sp, sp, #20
 25317              	.LCFI94:
 25318              		.cfi_def_cfa_offset 24
 25319 09a0 00AF     		add	r7, sp, #0
 25320              		.cfi_offset 7, -4
 25321              	.LCFI95:
 25322              		.cfi_def_cfa_register 7
 25323 09a2 7860     		str	r0, [r7, #4]
 25324 09a4 3960     		str	r1, [r7, #0]
1307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ITStatus bitstatus = RESET;
 25325              		.loc 1 1307 0
 25326 09a6 4FF00003 		mov	r3, #0
 25327 09aa FB73     		strb	r3, [r7, #15]
1308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t enablestatus = 0;
 25328              		.loc 1 1308 0
 25329 09ac 4FF00003 		mov	r3, #0
 25330 09b0 BB60     		str	r3, [r7, #8]
1309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 25331              		.loc 1 1315 0
 25332 09b2 3B68     		ldr	r3, [r7, #0]
 25333 09b4 03F0E063 		and	r3, r3, #117440512
 25334 09b8 4FEA1342 		lsr	r2, r3, #16
 25335 09bc 7B68     		ldr	r3, [r7, #4]
 25336 09be 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25337 09c0 9BB2     		uxth	r3, r3
 25338 09c2 02EA0303 		and	r3, r2, r3
 25339 09c6 BB60     		str	r3, [r7, #8]
1316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 25340              		.loc 1 1318 0
 25341 09c8 3B68     		ldr	r3, [r7, #0]
 25342 09ca 23F07F43 		bic	r3, r3, #-16777216
 25343 09ce 3B60     		str	r3, [r7, #0]
1319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 25344              		.loc 1 1321 0
 25345 09d0 7B68     		ldr	r3, [r7, #4]
 25346 09d2 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25347 09d4 9BB2     		uxth	r3, r3
 25348 09d6 1A46     		mov	r2, r3
 25349 09d8 3B68     		ldr	r3, [r7, #0]
 25350 09da 02EA0303 		and	r3, r2, r3
 25351 09de 002B     		cmp	r3, #0
 25352 09e0 06D0     		beq	.L86
 25353              		.loc 1 1321 0 is_stmt 0 discriminator 1
 25354 09e2 BB68     		ldr	r3, [r7, #8]
 25355 09e4 002B     		cmp	r3, #0
 25356 09e6 03D0     		beq	.L86
1322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C_IT is set */
1324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     bitstatus = SET;
 25357              		.loc 1 1324 0 is_stmt 1
 25358 09e8 4FF00103 		mov	r3, #1
 25359 09ec FB73     		strb	r3, [r7, #15]
 25360 09ee 02E0     		b	.L87
 25361              	.L86:
1325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C_IT is reset */
1329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     bitstatus = RESET;
 25362              		.loc 1 1329 0
 25363 09f0 4FF00003 		mov	r3, #0
 25364 09f4 FB73     		strb	r3, [r7, #15]
 25365              	.L87:
1330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the I2C_IT status */
1332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return  bitstatus;
 25366              		.loc 1 1332 0
 25367 09f6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 25368              		.loc 1 1333 0
 25369 09f8 1846     		mov	r0, r3
 25370 09fa 07F11407 		add	r7, r7, #20
 25371 09fe BD46     		mov	sp, r7
 25372 0a00 80BC     		pop	{r7}
 25373 0a02 7047     		bx	lr
 25374              		.cfi_endproc
 25375              	.LFE60:
 25377              		.align	2
 25378              		.global	I2C_ClearITPendingBit
 25379              		.thumb
 25380              		.thumb_func
 25382              	I2C_ClearITPendingBit:
 25383              	.LFB61:
1334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * 
1348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
1364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 25384              		.loc 1 1366 0
 25385              		.cfi_startproc
 25386              		@ args = 0, pretend = 0, frame = 16
 25387              		@ frame_needed = 1, uses_anonymous_args = 0
 25388              		@ link register save eliminated.
 25389 0a04 80B4     		push	{r7}
 25390              	.LCFI96:
 25391              		.cfi_def_cfa_offset 4
 25392 0a06 85B0     		sub	sp, sp, #20
 25393              	.LCFI97:
 25394              		.cfi_def_cfa_offset 24
 25395 0a08 00AF     		add	r7, sp, #0
 25396              		.cfi_offset 7, -4
 25397              	.LCFI98:
 25398              		.cfi_def_cfa_register 7
 25399 0a0a 7860     		str	r0, [r7, #4]
 25400 0a0c 3960     		str	r1, [r7, #0]
1367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t flagpos = 0;
 25401              		.loc 1 1367 0
 25402 0a0e 4FF00003 		mov	r3, #0
 25403 0a12 FB60     		str	r3, [r7, #12]
1368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2C flag position */
1373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 25404              		.loc 1 1373 0
 25405 0a14 3B68     		ldr	r3, [r7, #0]
 25406 0a16 23F07F43 		bic	r3, r3, #-16777216
 25407 0a1a FB60     		str	r3, [r7, #12]
1374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear the selected I2C flag */
1376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 25408              		.loc 1 1376 0
 25409 0a1c FB68     		ldr	r3, [r7, #12]
 25410 0a1e 9BB2     		uxth	r3, r3
 25411 0a20 6FEA0303 		mvn	r3, r3
 25412 0a24 9AB2     		uxth	r2, r3
 25413 0a26 7B68     		ldr	r3, [r7, #4]
 25414 0a28 9A82     		strh	r2, [r3, #20]	@ movhi
1377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 25415              		.loc 1 1377 0
 25416 0a2a 07F11407 		add	r7, r7, #20
 25417 0a2e BD46     		mov	sp, r7
 25418 0a30 80BC     		pop	{r7}
 25419 0a32 7047     		bx	lr
 25420              		.cfi_endproc
 25421              	.LFE61:
 25423              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_i2c.c
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23367  .text:00000000 $t
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23372  .text:00000000 I2C_DeInit
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23449  .text:00000088 I2C_Init
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23681  .text:00000244 I2C_StructInit
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23736  .text:00000288 I2C_Cmd
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23792  .text:000002c8 I2C_GenerateSTART
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23848  .text:00000308 I2C_GenerateSTOP
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23904  .text:00000348 I2C_Send7bitAddress
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:23959  .text:00000384 I2C_AcknowledgeConfig
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24015  .text:000003c4 I2C_OwnAddress2Config
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24072  .text:00000408 I2C_DualAddressCmd
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24128  .text:00000448 I2C_GeneralCallCmd
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24184  .text:00000488 I2C_SoftwareResetCmd
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24242  .text:000004d0 I2C_StretchClockCmd
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24298  .text:00000510 I2C_FastModeDutyCycleConfig
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24354  .text:00000550 I2C_NACKPositionConfig
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24410  .text:00000590 I2C_SMBusAlertConfig
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24466  .text:000005d0 I2C_ARPCmd
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24522  .text:00000610 I2C_SendData
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24560  .text:00000630 I2C_ReceiveData
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24597  .text:0000064c I2C_TransmitPEC
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24653  .text:0000068c I2C_PECPositionConfig
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24709  .text:000006cc I2C_CalculatePEC
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24765  .text:0000070c I2C_GetPEC
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24804  .text:00000730 I2C_DMACmd
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24860  .text:00000770 I2C_DMALastTransferCmd
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24916  .text:000007b0 I2C_ReadRegister
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:24965  .text:000007e0 I2C_ITConfig
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:25027  .text:0000082c I2C_CheckEvent
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:25109  .text:000008a0 I2C_GetLastEvent
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:25171  .text:000008f0 I2C_GetFlagStatus
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:25260  .text:0000096c I2C_ClearFlag
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:25306  .text:0000099c I2C_GetITStatus
C:\Users\red4sch\AppData\Local\Temp\ccBkq8LR.s:25382  .text:00000a04 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
