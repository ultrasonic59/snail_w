   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_rcc.c"
  23              	.Ltext0:
  24              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c"
 23452              		.align	2
 23455              	APBAHBPrescTable:
 23456 0000 00       		.byte	0
 23457 0001 00       		.byte	0
 23458 0002 00       		.byte	0
 23459 0003 00       		.byte	0
 23460 0004 01       		.byte	1
 23461 0005 02       		.byte	2
 23462 0006 03       		.byte	3
 23463 0007 04       		.byte	4
 23464 0008 01       		.byte	1
 23465 0009 02       		.byte	2
 23466 000a 03       		.byte	3
 23467 000b 04       		.byte	4
 23468 000c 06       		.byte	6
 23469 000d 07       		.byte	7
 23470 000e 08       		.byte	8
 23471 000f 09       		.byte	9
 23472              		.text
 23473              		.align	2
 23474              		.global	RCC_DeInit
 23475              		.thumb
 23476              		.thumb_func
 23478              	RCC_DeInit:
 23479              	.LFB29:
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @file    stm32f2xx_rcc.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Peripheral clocks configuration
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Interrupts and flags management
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  @verbatim
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *               
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          ===================================================================
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                               RCC specific features
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          ===================================================================
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *        
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                        
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  @endverbatim
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ******************************************************************************
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @attention
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ******************************************************************************
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #include "stm32f2xx_rcc.h"
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC 
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief RCC driver modules
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */ 
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* --- CR Register ---*/
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of HSION bit */
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define HSION_BitNumber           0x00
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of CSSON bit */
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of PLLON bit */
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* --- CFGR Register ---*/
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* --- BDCR Register ---*/
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of BDRST bit */
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* --- CSR Register ---*/
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of LSION bit */
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define LSION_BitNumber           0x00
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* CFGR register bit mask */
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* RCC Flag Mask */
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* BDCR register base address */
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */ 
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @verbatim   
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================  
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      the PLL as System clock source.
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      clock source.
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      The interrupt is linked to the Cortex-M3 NMI (Non-Maskable Interrupt) 
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      exception vector.   
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @endverbatim
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - All interrupts disabled
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - Peripheral clocks
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  None
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_DeInit(void)
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23480              		.loc 1 197 0
 23481              		.cfi_startproc
 23482              		@ args = 0, pretend = 0, frame = 0
 23483              		@ frame_needed = 1, uses_anonymous_args = 0
 23484              		@ link register save eliminated.
 23485 0000 80B4     		push	{r7}
 23486              	.LCFI0:
 23487              		.cfi_def_cfa_offset 4
 23488 0002 00AF     		add	r7, sp, #0
 23489              		.cfi_offset 7, -4
 23490              	.LCFI1:
 23491              		.cfi_def_cfa_register 7
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set HSION bit */
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
 23492              		.loc 1 199 0
 23493 0004 4FF46053 		mov	r3, #14336
 23494 0008 C4F20203 		movt	r3, 16386
 23495 000c 4FF46052 		mov	r2, #14336
 23496 0010 C4F20202 		movt	r2, 16386
 23497 0014 1268     		ldr	r2, [r2, #0]
 23498 0016 42F00102 		orr	r2, r2, #1
 23499 001a 1A60     		str	r2, [r3, #0]
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset CFGR register */
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = 0x00000000;
 23500              		.loc 1 202 0
 23501 001c 4FF46053 		mov	r3, #14336
 23502 0020 C4F20203 		movt	r3, 16386
 23503 0024 4FF00002 		mov	r2, #0
 23504 0028 9A60     		str	r2, [r3, #8]
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 23505              		.loc 1 205 0
 23506 002a 4FF46053 		mov	r3, #14336
 23507 002e C4F20203 		movt	r3, 16386
 23508 0032 4FF46052 		mov	r2, #14336
 23509 0036 C4F20202 		movt	r2, 16386
 23510 003a 1268     		ldr	r2, [r2, #0]
 23511 003c 22F08472 		bic	r2, r2, #17301504
 23512 0040 22F48032 		bic	r2, r2, #65536
 23513 0044 1A60     		str	r2, [r3, #0]
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset PLLCFGR register */
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
 23514              		.loc 1 208 0
 23515 0046 4FF46053 		mov	r3, #14336
 23516 004a C4F20203 		movt	r3, 16386
 23517 004e 43F21002 		movw	r2, #12304
 23518 0052 C2F20042 		movt	r2, 9216
 23519 0056 5A60     		str	r2, [r3, #4]
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset HSEBYP bit */
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 23520              		.loc 1 211 0
 23521 0058 4FF46053 		mov	r3, #14336
 23522 005c C4F20203 		movt	r3, 16386
 23523 0060 4FF46052 		mov	r2, #14336
 23524 0064 C4F20202 		movt	r2, 16386
 23525 0068 1268     		ldr	r2, [r2, #0]
 23526 006a 22F48022 		bic	r2, r2, #262144
 23527 006e 1A60     		str	r2, [r3, #0]
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Disable all interrupts */
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CIR = 0x00000000;
 23528              		.loc 1 214 0
 23529 0070 4FF46053 		mov	r3, #14336
 23530 0074 C4F20203 		movt	r3, 16386
 23531 0078 4FF00002 		mov	r2, #0
 23532 007c DA60     		str	r2, [r3, #12]
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23533              		.loc 1 215 0
 23534 007e BD46     		mov	sp, r7
 23535 0080 80BC     		pop	{r7}
 23536 0082 7047     		bx	lr
 23537              		.cfi_endproc
 23538              	.LFE29:
 23540              		.align	2
 23541              		.global	RCC_HSEConfig
 23542              		.thumb
 23543              		.thumb_func
 23545              	RCC_HSEConfig:
 23546              	.LFB30:
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         function.    
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23547              		.loc 1 238 0
 23548              		.cfi_startproc
 23549              		@ args = 0, pretend = 0, frame = 8
 23550              		@ frame_needed = 1, uses_anonymous_args = 0
 23551              		@ link register save eliminated.
 23552 0084 80B4     		push	{r7}
 23553              	.LCFI2:
 23554              		.cfi_def_cfa_offset 4
 23555 0086 83B0     		sub	sp, sp, #12
 23556              	.LCFI3:
 23557              		.cfi_def_cfa_offset 16
 23558 0088 00AF     		add	r7, sp, #0
 23559              		.cfi_offset 7, -4
 23560              	.LCFI4:
 23561              		.cfi_def_cfa_register 7
 23562 008a 0346     		mov	r3, r0
 23563 008c FB71     		strb	r3, [r7, #7]
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 23564              		.loc 1 243 0
 23565 008e 43F60203 		movw	r3, #14338
 23566 0092 C4F20203 		movt	r3, 16386
 23567 0096 4FF00002 		mov	r2, #0
 23568 009a 1A70     		strb	r2, [r3, #0]
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 23569              		.loc 1 246 0
 23570 009c 43F60203 		movw	r3, #14338
 23571 00a0 C4F20203 		movt	r3, 16386
 23572 00a4 FA79     		ldrb	r2, [r7, #7]
 23573 00a6 1A70     		strb	r2, [r3, #0]
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23574              		.loc 1 247 0
 23575 00a8 07F10C07 		add	r7, r7, #12
 23576 00ac BD46     		mov	sp, r7
 23577 00ae 80BC     		pop	{r7}
 23578 00b0 7047     		bx	lr
 23579              		.cfi_endproc
 23580              	.LFE30:
 23582 00b2 00BF     		.align	2
 23583              		.global	RCC_WaitForHSEStartUp
 23584              		.thumb
 23585              		.thumb_func
 23587              	RCC_WaitForHSEStartUp:
 23588              	.LFB31:
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f2xx.h file. You can tailor it depending
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  None
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23589              		.loc 1 262 0
 23590              		.cfi_startproc
 23591              		@ args = 0, pretend = 0, frame = 8
 23592              		@ frame_needed = 1, uses_anonymous_args = 0
 23593 00b4 80B5     		push	{r7, lr}
 23594              	.LCFI5:
 23595              		.cfi_def_cfa_offset 8
 23596 00b6 82B0     		sub	sp, sp, #8
 23597              	.LCFI6:
 23598              		.cfi_def_cfa_offset 16
 23599 00b8 00AF     		add	r7, sp, #0
 23600              		.cfi_offset 14, -4
 23601              		.cfi_offset 7, -8
 23602              	.LCFI7:
 23603              		.cfi_def_cfa_register 7
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 23604              		.loc 1 263 0
 23605 00ba 4FF00003 		mov	r3, #0
 23606 00be 3B60     		str	r3, [r7, #0]
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ErrorStatus status = ERROR;
 23607              		.loc 1 264 0
 23608 00c0 4FF00003 		mov	r3, #0
 23609 00c4 FB71     		strb	r3, [r7, #7]
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   FlagStatus hsestatus = RESET;
 23610              		.loc 1 265 0
 23611 00c6 4FF00003 		mov	r3, #0
 23612 00ca BB71     		strb	r3, [r7, #6]
 23613              	.L5:
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   do
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 23614              		.loc 1 269 0 discriminator 1
 23615 00cc 4FF03100 		mov	r0, #49
 23616 00d0 FFF7FEFF 		bl	RCC_GetFlagStatus
 23617 00d4 0346     		mov	r3, r0
 23618 00d6 BB71     		strb	r3, [r7, #6]
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     startupcounter++;
 23619              		.loc 1 270 0 discriminator 1
 23620 00d8 3B68     		ldr	r3, [r7, #0]
 23621 00da 03F10103 		add	r3, r3, #1
 23622 00de 3B60     		str	r3, [r7, #0]
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 23623              		.loc 1 271 0 discriminator 1
 23624 00e0 3B68     		ldr	r3, [r7, #0]
 23625 00e2 B3F5A06F 		cmp	r3, #1280
 23626 00e6 02D0     		beq	.L4
 23627 00e8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23628 00ea 002B     		cmp	r3, #0
 23629 00ec EED0     		beq	.L5
 23630              	.L4:
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 23631              		.loc 1 273 0
 23632 00ee 4FF03100 		mov	r0, #49
 23633 00f2 FFF7FEFF 		bl	RCC_GetFlagStatus
 23634 00f6 0346     		mov	r3, r0
 23635 00f8 002B     		cmp	r3, #0
 23636 00fa 03D0     		beq	.L6
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     status = SUCCESS;
 23637              		.loc 1 275 0
 23638 00fc 4FF00103 		mov	r3, #1
 23639 0100 FB71     		strb	r3, [r7, #7]
 23640 0102 02E0     		b	.L7
 23641              	.L6:
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     status = ERROR;
 23642              		.loc 1 279 0
 23643 0104 4FF00003 		mov	r3, #0
 23644 0108 FB71     		strb	r3, [r7, #7]
 23645              	.L7:
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   return (status);
 23646              		.loc 1 281 0
 23647 010a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23648              		.loc 1 282 0
 23649 010c 1846     		mov	r0, r3
 23650 010e 07F10807 		add	r7, r7, #8
 23651 0112 BD46     		mov	sp, r7
 23652 0114 80BD     		pop	{r7, pc}
 23653              		.cfi_endproc
 23654              	.LFE31:
 23656 0116 00BF     		.align	2
 23657              		.global	RCC_AdjustHSICalibrationValue
 23658              		.thumb
 23659              		.thumb_func
 23661              	RCC_AdjustHSICalibrationValue:
 23662              	.LFB32:
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23663              		.loc 1 293 0
 23664              		.cfi_startproc
 23665              		@ args = 0, pretend = 0, frame = 16
 23666              		@ frame_needed = 1, uses_anonymous_args = 0
 23667              		@ link register save eliminated.
 23668 0118 80B4     		push	{r7}
 23669              	.LCFI8:
 23670              		.cfi_def_cfa_offset 4
 23671 011a 85B0     		sub	sp, sp, #20
 23672              	.LCFI9:
 23673              		.cfi_def_cfa_offset 24
 23674 011c 00AF     		add	r7, sp, #0
 23675              		.cfi_offset 7, -4
 23676              	.LCFI10:
 23677              		.cfi_def_cfa_register 7
 23678 011e 0346     		mov	r3, r0
 23679 0120 FB71     		strb	r3, [r7, #7]
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 23680              		.loc 1 294 0
 23681 0122 4FF00003 		mov	r3, #0
 23682 0126 FB60     		str	r3, [r7, #12]
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CR;
 23683              		.loc 1 298 0
 23684 0128 4FF46053 		mov	r3, #14336
 23685 012c C4F20203 		movt	r3, 16386
 23686 0130 1B68     		ldr	r3, [r3, #0]
 23687 0132 FB60     		str	r3, [r7, #12]
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 23688              		.loc 1 301 0
 23689 0134 FB68     		ldr	r3, [r7, #12]
 23690 0136 23F0F803 		bic	r3, r3, #248
 23691 013a FB60     		str	r3, [r7, #12]
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 23692              		.loc 1 304 0
 23693 013c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23694 013e 4FEAC303 		lsl	r3, r3, #3
 23695 0142 FA68     		ldr	r2, [r7, #12]
 23696 0144 42EA0303 		orr	r3, r2, r3
 23697 0148 FB60     		str	r3, [r7, #12]
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CR = tmpreg;
 23698              		.loc 1 307 0
 23699 014a 4FF46053 		mov	r3, #14336
 23700 014e C4F20203 		movt	r3, 16386
 23701 0152 FA68     		ldr	r2, [r7, #12]
 23702 0154 1A60     		str	r2, [r3, #0]
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23703              		.loc 1 308 0
 23704 0156 07F11407 		add	r7, r7, #20
 23705 015a BD46     		mov	sp, r7
 23706 015c 80BC     		pop	{r7}
 23707 015e 7047     		bx	lr
 23708              		.cfi_endproc
 23709              	.LFE32:
 23711              		.align	2
 23712              		.global	RCC_HSICmd
 23713              		.thumb
 23714              		.thumb_func
 23716              	RCC_HSICmd:
 23717              	.LFB33:
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         Security System CSS is enabled).             
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         system clock source.  
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         clock cycles.  
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23718              		.loc 1 329 0
 23719              		.cfi_startproc
 23720              		@ args = 0, pretend = 0, frame = 8
 23721              		@ frame_needed = 1, uses_anonymous_args = 0
 23722              		@ link register save eliminated.
 23723 0160 80B4     		push	{r7}
 23724              	.LCFI11:
 23725              		.cfi_def_cfa_offset 4
 23726 0162 83B0     		sub	sp, sp, #12
 23727              	.LCFI12:
 23728              		.cfi_def_cfa_offset 16
 23729 0164 00AF     		add	r7, sp, #0
 23730              		.cfi_offset 7, -4
 23731              	.LCFI13:
 23732              		.cfi_def_cfa_register 7
 23733 0166 0346     		mov	r3, r0
 23734 0168 FB71     		strb	r3, [r7, #7]
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 23735              		.loc 1 333 0
 23736 016a 4FF00003 		mov	r3, #0
 23737 016e C4F24723 		movt	r3, 16967
 23738 0172 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23739 0174 1A60     		str	r2, [r3, #0]
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23740              		.loc 1 334 0
 23741 0176 07F10C07 		add	r7, r7, #12
 23742 017a BD46     		mov	sp, r7
 23743 017c 80BC     		pop	{r7}
 23744 017e 7047     		bx	lr
 23745              		.cfi_endproc
 23746              	.LFE33:
 23748              		.align	2
 23749              		.global	RCC_LSEConfig
 23750              		.thumb
 23751              		.thumb_func
 23753              	RCC_LSEConfig:
 23754              	.LFB34:
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         (to be done once after reset).  
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23755              		.loc 1 354 0
 23756              		.cfi_startproc
 23757              		@ args = 0, pretend = 0, frame = 8
 23758              		@ frame_needed = 1, uses_anonymous_args = 0
 23759              		@ link register save eliminated.
 23760 0180 80B4     		push	{r7}
 23761              	.LCFI14:
 23762              		.cfi_def_cfa_offset 4
 23763 0182 83B0     		sub	sp, sp, #12
 23764              	.LCFI15:
 23765              		.cfi_def_cfa_offset 16
 23766 0184 00AF     		add	r7, sp, #0
 23767              		.cfi_offset 7, -4
 23768              	.LCFI16:
 23769              		.cfi_def_cfa_register 7
 23770 0186 0346     		mov	r3, r0
 23771 0188 FB71     		strb	r3, [r7, #7]
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset LSEON bit */
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 23772              		.loc 1 360 0
 23773 018a 43F67003 		movw	r3, #14448
 23774 018e C4F20203 		movt	r3, 16386
 23775 0192 4FF00002 		mov	r2, #0
 23776 0196 1A70     		strb	r2, [r3, #0]
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset LSEBYP bit */
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 23777              		.loc 1 363 0
 23778 0198 43F67003 		movw	r3, #14448
 23779 019c C4F20203 		movt	r3, 16386
 23780 01a0 4FF00002 		mov	r2, #0
 23781 01a4 1A70     		strb	r2, [r3, #0]
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   switch (RCC_LSE)
 23782              		.loc 1 366 0
 23783 01a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23784 01a8 012B     		cmp	r3, #1
 23785 01aa 02D0     		beq	.L12
 23786 01ac 042B     		cmp	r3, #4
 23787 01ae 08D0     		beq	.L13
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case RCC_LSE_ON:
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       /* Set LSEON bit */
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case RCC_LSE_Bypass:
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     default:
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 23788              		.loc 1 377 0
 23789 01b0 0FE0     		b	.L10
 23790              	.L12:
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 23791              		.loc 1 370 0
 23792 01b2 43F67003 		movw	r3, #14448
 23793 01b6 C4F20203 		movt	r3, 16386
 23794 01ba 4FF00102 		mov	r2, #1
 23795 01be 1A70     		strb	r2, [r3, #0]
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 23796              		.loc 1 371 0
 23797 01c0 07E0     		b	.L10
 23798              	.L13:
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 23799              		.loc 1 374 0
 23800 01c2 43F67003 		movw	r3, #14448
 23801 01c6 C4F20203 		movt	r3, 16386
 23802 01ca 4FF00502 		mov	r2, #5
 23803 01ce 1A70     		strb	r2, [r3, #0]
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 23804              		.loc 1 375 0
 23805 01d0 00BF     		nop
 23806              	.L10:
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23807              		.loc 1 379 0
 23808 01d2 07F10C07 		add	r7, r7, #12
 23809 01d6 BD46     		mov	sp, r7
 23810 01d8 80BC     		pop	{r7}
 23811 01da 7047     		bx	lr
 23812              		.cfi_endproc
 23813              	.LFE34:
 23815              		.align	2
 23816              		.global	RCC_LSICmd
 23817              		.thumb
 23818              		.thumb_func
 23820              	RCC_LSICmd:
 23821              	.LFB35:
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         clock cycles. 
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23822              		.loc 1 394 0
 23823              		.cfi_startproc
 23824              		@ args = 0, pretend = 0, frame = 8
 23825              		@ frame_needed = 1, uses_anonymous_args = 0
 23826              		@ link register save eliminated.
 23827 01dc 80B4     		push	{r7}
 23828              	.LCFI17:
 23829              		.cfi_def_cfa_offset 4
 23830 01de 83B0     		sub	sp, sp, #12
 23831              	.LCFI18:
 23832              		.cfi_def_cfa_offset 16
 23833 01e0 00AF     		add	r7, sp, #0
 23834              		.cfi_offset 7, -4
 23835              	.LCFI19:
 23836              		.cfi_def_cfa_register 7
 23837 01e2 0346     		mov	r3, r0
 23838 01e4 FB71     		strb	r3, [r7, #7]
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 23839              		.loc 1 398 0
 23840 01e6 4FF46863 		mov	r3, #3712
 23841 01ea C4F24723 		movt	r3, 16967
 23842 01ee FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23843 01f0 1A60     		str	r2, [r3, #0]
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23844              		.loc 1 399 0
 23845 01f2 07F10C07 		add	r7, r7, #12
 23846 01f6 BD46     		mov	sp, r7
 23847 01f8 80BC     		pop	{r7}
 23848 01fa 7047     		bx	lr
 23849              		.cfi_endproc
 23850              	.LFE35:
 23852              		.align	2
 23853              		.global	RCC_PLLConfig
 23854              		.thumb
 23855              		.thumb_func
 23857              	RCC_PLLConfig:
 23858              	.LFB36:
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the System clock frequency.
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         correctly.
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23859              		.loc 1 437 0
 23860              		.cfi_startproc
 23861              		@ args = 4, pretend = 0, frame = 16
 23862              		@ frame_needed = 1, uses_anonymous_args = 0
 23863              		@ link register save eliminated.
 23864 01fc 80B4     		push	{r7}
 23865              	.LCFI20:
 23866              		.cfi_def_cfa_offset 4
 23867 01fe 85B0     		sub	sp, sp, #20
 23868              	.LCFI21:
 23869              		.cfi_def_cfa_offset 24
 23870 0200 00AF     		add	r7, sp, #0
 23871              		.cfi_offset 7, -4
 23872              	.LCFI22:
 23873              		.cfi_def_cfa_register 7
 23874 0202 F860     		str	r0, [r7, #12]
 23875 0204 B960     		str	r1, [r7, #8]
 23876 0206 7A60     		str	r2, [r7, #4]
 23877 0208 3B60     		str	r3, [r7, #0]
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 23878              		.loc 1 445 0
 23879 020a 4FF46053 		mov	r3, #14336
 23880 020e C4F20203 		movt	r3, 16386
 23881 0212 7A68     		ldr	r2, [r7, #4]
 23882 0214 4FEA8211 		lsl	r1, r2, #6
 23883 0218 BA68     		ldr	r2, [r7, #8]
 23884 021a 41EA0201 		orr	r1, r1, r2
 23885 021e 3A68     		ldr	r2, [r7, #0]
 23886 0220 4FEA5202 		lsr	r2, r2, #1
 23887 0224 02F1FF32 		add	r2, r2, #-1
 23888 0228 4FEA0242 		lsl	r2, r2, #16
 23889 022c 41EA0201 		orr	r1, r1, r2
 23890 0230 FA68     		ldr	r2, [r7, #12]
 23891 0232 41EA0201 		orr	r1, r1, r2
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****                  (PLLQ << 24);
 23892              		.loc 1 446 0
 23893 0236 BA69     		ldr	r2, [r7, #24]
 23894 0238 4FEA0262 		lsl	r2, r2, #24
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 23895              		.loc 1 445 0
 23896 023c 41EA0202 		orr	r2, r1, r2
 23897 0240 5A60     		str	r2, [r3, #4]
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23898              		.loc 1 447 0
 23899 0242 07F11407 		add	r7, r7, #20
 23900 0246 BD46     		mov	sp, r7
 23901 0248 80BC     		pop	{r7}
 23902 024a 7047     		bx	lr
 23903              		.cfi_endproc
 23904              	.LFE36:
 23906              		.align	2
 23907              		.global	RCC_PLLCmd
 23908              		.thumb
 23909              		.thumb_func
 23911              	RCC_PLLCmd:
 23912              	.LFB37:
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         be used as system clock source.
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23913              		.loc 1 460 0
 23914              		.cfi_startproc
 23915              		@ args = 0, pretend = 0, frame = 8
 23916              		@ frame_needed = 1, uses_anonymous_args = 0
 23917              		@ link register save eliminated.
 23918 024c 80B4     		push	{r7}
 23919              	.LCFI23:
 23920              		.cfi_def_cfa_offset 4
 23921 024e 83B0     		sub	sp, sp, #12
 23922              	.LCFI24:
 23923              		.cfi_def_cfa_offset 16
 23924 0250 00AF     		add	r7, sp, #0
 23925              		.cfi_offset 7, -4
 23926              	.LCFI25:
 23927              		.cfi_def_cfa_register 7
 23928 0252 0346     		mov	r3, r0
 23929 0254 FB71     		strb	r3, [r7, #7]
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 23930              		.loc 1 463 0
 23931 0256 4FF06003 		mov	r3, #96
 23932 025a C4F24723 		movt	r3, 16967
 23933 025e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23934 0260 1A60     		str	r2, [r3, #0]
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23935              		.loc 1 464 0
 23936 0262 07F10C07 		add	r7, r7, #12
 23937 0266 BD46     		mov	sp, r7
 23938 0268 80BC     		pop	{r7}
 23939 026a 7047     		bx	lr
 23940              		.cfi_endproc
 23941              	.LFE37:
 23943              		.align	2
 23944              		.global	RCC_PLLI2SConfig
 23945              		.thumb
 23946              		.thumb_func
 23948              	RCC_PLLI2SConfig:
 23949              	.LFB38:
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         on the I2S clock frequency.
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23950              		.loc 1 487 0
 23951              		.cfi_startproc
 23952              		@ args = 0, pretend = 0, frame = 8
 23953              		@ frame_needed = 1, uses_anonymous_args = 0
 23954              		@ link register save eliminated.
 23955 026c 80B4     		push	{r7}
 23956              	.LCFI26:
 23957              		.cfi_def_cfa_offset 4
 23958 026e 83B0     		sub	sp, sp, #12
 23959              	.LCFI27:
 23960              		.cfi_def_cfa_offset 16
 23961 0270 00AF     		add	r7, sp, #0
 23962              		.cfi_offset 7, -4
 23963              	.LCFI28:
 23964              		.cfi_def_cfa_register 7
 23965 0272 7860     		str	r0, [r7, #4]
 23966 0274 3960     		str	r1, [r7, #0]
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 23967              		.loc 1 492 0
 23968 0276 4FF46053 		mov	r3, #14336
 23969 027a C4F20203 		movt	r3, 16386
 23970 027e 7A68     		ldr	r2, [r7, #4]
 23971 0280 4FEA8211 		lsl	r1, r2, #6
 23972 0284 3A68     		ldr	r2, [r7, #0]
 23973 0286 4FEA0272 		lsl	r2, r2, #28
 23974 028a 41EA0202 		orr	r2, r1, r2
 23975 028e C3F88420 		str	r2, [r3, #132]
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 23976              		.loc 1 493 0
 23977 0292 07F10C07 		add	r7, r7, #12
 23978 0296 BD46     		mov	sp, r7
 23979 0298 80BC     		pop	{r7}
 23980 029a 7047     		bx	lr
 23981              		.cfi_endproc
 23982              	.LFE38:
 23984              		.align	2
 23985              		.global	RCC_PLLI2SCmd
 23986              		.thumb
 23987              		.thumb_func
 23989              	RCC_PLLI2SCmd:
 23990              	.LFB39:
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 23991              		.loc 1 503 0
 23992              		.cfi_startproc
 23993              		@ args = 0, pretend = 0, frame = 8
 23994              		@ frame_needed = 1, uses_anonymous_args = 0
 23995              		@ link register save eliminated.
 23996 029c 80B4     		push	{r7}
 23997              	.LCFI29:
 23998              		.cfi_def_cfa_offset 4
 23999 029e 83B0     		sub	sp, sp, #12
 24000              	.LCFI30:
 24001              		.cfi_def_cfa_offset 16
 24002 02a0 00AF     		add	r7, sp, #0
 24003              		.cfi_offset 7, -4
 24004              	.LCFI31:
 24005              		.cfi_def_cfa_register 7
 24006 02a2 0346     		mov	r3, r0
 24007 02a4 FB71     		strb	r3, [r7, #7]
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 24008              		.loc 1 506 0
 24009 02a6 4FF06803 		mov	r3, #104
 24010 02aa C4F24723 		movt	r3, 16967
 24011 02ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24012 02b0 1A60     		str	r2, [r3, #0]
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24013              		.loc 1 507 0
 24014 02b2 07F10C07 		add	r7, r7, #12
 24015 02b6 BD46     		mov	sp, r7
 24016 02b8 80BC     		pop	{r7}
 24017 02ba 7047     		bx	lr
 24018              		.cfi_endproc
 24019              	.LFE39:
 24021              		.align	2
 24022              		.global	RCC_ClockSecuritySystemCmd
 24023              		.thumb
 24024              		.thumb_func
 24026              	RCC_ClockSecuritySystemCmd:
 24027              	.LFB40:
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24028              		.loc 1 521 0
 24029              		.cfi_startproc
 24030              		@ args = 0, pretend = 0, frame = 8
 24031              		@ frame_needed = 1, uses_anonymous_args = 0
 24032              		@ link register save eliminated.
 24033 02bc 80B4     		push	{r7}
 24034              	.LCFI32:
 24035              		.cfi_def_cfa_offset 4
 24036 02be 83B0     		sub	sp, sp, #12
 24037              	.LCFI33:
 24038              		.cfi_def_cfa_offset 16
 24039 02c0 00AF     		add	r7, sp, #0
 24040              		.cfi_offset 7, -4
 24041              	.LCFI34:
 24042              		.cfi_def_cfa_register 7
 24043 02c2 0346     		mov	r3, r0
 24044 02c4 FB71     		strb	r3, [r7, #7]
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 24045              		.loc 1 524 0
 24046 02c6 4FF04C03 		mov	r3, #76
 24047 02ca C4F24723 		movt	r3, 16967
 24048 02ce FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24049 02d0 1A60     		str	r2, [r3, #0]
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24050              		.loc 1 525 0
 24051 02d2 07F10C07 		add	r7, r7, #12
 24052 02d6 BD46     		mov	sp, r7
 24053 02d8 80BC     		pop	{r7}
 24054 02da 7047     		bx	lr
 24055              		.cfi_endproc
 24056              	.LFE40:
 24058              		.align	2
 24059              		.global	RCC_MCO1Config
 24060              		.thumb
 24061              		.thumb_func
 24063              	RCC_MCO1Config:
 24064              	.LFB41:
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24065              		.loc 1 546 0
 24066              		.cfi_startproc
 24067              		@ args = 0, pretend = 0, frame = 16
 24068              		@ frame_needed = 1, uses_anonymous_args = 0
 24069              		@ link register save eliminated.
 24070 02dc 80B4     		push	{r7}
 24071              	.LCFI35:
 24072              		.cfi_def_cfa_offset 4
 24073 02de 85B0     		sub	sp, sp, #20
 24074              	.LCFI36:
 24075              		.cfi_def_cfa_offset 24
 24076 02e0 00AF     		add	r7, sp, #0
 24077              		.cfi_offset 7, -4
 24078              	.LCFI37:
 24079              		.cfi_def_cfa_register 7
 24080 02e2 7860     		str	r0, [r7, #4]
 24081 02e4 3960     		str	r1, [r7, #0]
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 24082              		.loc 1 547 0
 24083 02e6 4FF00003 		mov	r3, #0
 24084 02ea FB60     		str	r3, [r7, #12]
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 24085              		.loc 1 553 0
 24086 02ec 4FF46053 		mov	r3, #14336
 24087 02f0 C4F20203 		movt	r3, 16386
 24088 02f4 9B68     		ldr	r3, [r3, #8]
 24089 02f6 FB60     		str	r3, [r7, #12]
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 24090              		.loc 1 556 0
 24091 02f8 FB68     		ldr	r3, [r7, #12]
 24092 02fa 23F0EC63 		bic	r3, r3, #123731968
 24093 02fe FB60     		str	r3, [r7, #12]
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 24094              		.loc 1 559 0
 24095 0300 7A68     		ldr	r2, [r7, #4]
 24096 0302 3B68     		ldr	r3, [r7, #0]
 24097 0304 42EA0303 		orr	r3, r2, r3
 24098 0308 FA68     		ldr	r2, [r7, #12]
 24099 030a 42EA0303 		orr	r3, r2, r3
 24100 030e FB60     		str	r3, [r7, #12]
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;  
 24101              		.loc 1 562 0
 24102 0310 4FF46053 		mov	r3, #14336
 24103 0314 C4F20203 		movt	r3, 16386
 24104 0318 FA68     		ldr	r2, [r7, #12]
 24105 031a 9A60     		str	r2, [r3, #8]
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24106              		.loc 1 563 0
 24107 031c 07F11407 		add	r7, r7, #20
 24108 0320 BD46     		mov	sp, r7
 24109 0322 80BC     		pop	{r7}
 24110 0324 7047     		bx	lr
 24111              		.cfi_endproc
 24112              	.LFE41:
 24114 0326 00BF     		.align	2
 24115              		.global	RCC_MCO2Config
 24116              		.thumb
 24117              		.thumb_func
 24119              	RCC_MCO2Config:
 24120              	.LFB42:
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24121              		.loc 1 584 0
 24122              		.cfi_startproc
 24123              		@ args = 0, pretend = 0, frame = 16
 24124              		@ frame_needed = 1, uses_anonymous_args = 0
 24125              		@ link register save eliminated.
 24126 0328 80B4     		push	{r7}
 24127              	.LCFI38:
 24128              		.cfi_def_cfa_offset 4
 24129 032a 85B0     		sub	sp, sp, #20
 24130              	.LCFI39:
 24131              		.cfi_def_cfa_offset 24
 24132 032c 00AF     		add	r7, sp, #0
 24133              		.cfi_offset 7, -4
 24134              	.LCFI40:
 24135              		.cfi_def_cfa_register 7
 24136 032e 7860     		str	r0, [r7, #4]
 24137 0330 3960     		str	r1, [r7, #0]
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 24138              		.loc 1 585 0
 24139 0332 4FF00003 		mov	r3, #0
 24140 0336 FB60     		str	r3, [r7, #12]
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 24141              		.loc 1 591 0
 24142 0338 4FF46053 		mov	r3, #14336
 24143 033c C4F20203 		movt	r3, 16386
 24144 0340 9B68     		ldr	r3, [r3, #8]
 24145 0342 FB60     		str	r3, [r7, #12]
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 24146              		.loc 1 594 0
 24147 0344 FB68     		ldr	r3, [r7, #12]
 24148 0346 23F07843 		bic	r3, r3, #-134217728
 24149 034a FB60     		str	r3, [r7, #12]
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 24150              		.loc 1 597 0
 24151 034c 7A68     		ldr	r2, [r7, #4]
 24152 034e 3B68     		ldr	r3, [r7, #0]
 24153 0350 42EA0303 		orr	r3, r2, r3
 24154 0354 FA68     		ldr	r2, [r7, #12]
 24155 0356 42EA0303 		orr	r3, r2, r3
 24156 035a FB60     		str	r3, [r7, #12]
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;  
 24157              		.loc 1 600 0
 24158 035c 4FF46053 		mov	r3, #14336
 24159 0360 C4F20203 		movt	r3, 16386
 24160 0364 FA68     		ldr	r2, [r7, #12]
 24161 0366 9A60     		str	r2, [r3, #8]
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24162              		.loc 1 601 0
 24163 0368 07F11407 		add	r7, r7, #20
 24164 036c BD46     		mov	sp, r7
 24165 036e 80BC     		pop	{r7}
 24166 0370 7047     		bx	lr
 24167              		.cfi_endproc
 24168              	.LFE42:
 24170 0372 00BF     		.align	2
 24171              		.global	RCC_SYSCLKConfig
 24172              		.thumb
 24173              		.thumb_func
 24175              	RCC_SYSCLKConfig:
 24176              	.LFB43:
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @}
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @verbatim   
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================  
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   APB2 busses clocks.
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      HSE and PLL.
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           functions to configure this clock. 
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      adapted accordingly:
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @endverbatim
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         currently used as system clock source. 
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24177              		.loc 1 689 0
 24178              		.cfi_startproc
 24179              		@ args = 0, pretend = 0, frame = 16
 24180              		@ frame_needed = 1, uses_anonymous_args = 0
 24181              		@ link register save eliminated.
 24182 0374 80B4     		push	{r7}
 24183              	.LCFI41:
 24184              		.cfi_def_cfa_offset 4
 24185 0376 85B0     		sub	sp, sp, #20
 24186              	.LCFI42:
 24187              		.cfi_def_cfa_offset 24
 24188 0378 00AF     		add	r7, sp, #0
 24189              		.cfi_offset 7, -4
 24190              	.LCFI43:
 24191              		.cfi_def_cfa_register 7
 24192 037a 7860     		str	r0, [r7, #4]
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 24193              		.loc 1 690 0
 24194 037c 4FF00003 		mov	r3, #0
 24195 0380 FB60     		str	r3, [r7, #12]
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 24196              		.loc 1 695 0
 24197 0382 4FF46053 		mov	r3, #14336
 24198 0386 C4F20203 		movt	r3, 16386
 24199 038a 9B68     		ldr	r3, [r3, #8]
 24200 038c FB60     		str	r3, [r7, #12]
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 24201              		.loc 1 698 0
 24202 038e FB68     		ldr	r3, [r7, #12]
 24203 0390 23F00303 		bic	r3, r3, #3
 24204 0394 FB60     		str	r3, [r7, #12]
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 24205              		.loc 1 701 0
 24206 0396 FA68     		ldr	r2, [r7, #12]
 24207 0398 7B68     		ldr	r3, [r7, #4]
 24208 039a 42EA0303 		orr	r3, r2, r3
 24209 039e FB60     		str	r3, [r7, #12]
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;
 24210              		.loc 1 704 0
 24211 03a0 4FF46053 		mov	r3, #14336
 24212 03a4 C4F20203 		movt	r3, 16386
 24213 03a8 FA68     		ldr	r2, [r7, #12]
 24214 03aa 9A60     		str	r2, [r3, #8]
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24215              		.loc 1 705 0
 24216 03ac 07F11407 		add	r7, r7, #20
 24217 03b0 BD46     		mov	sp, r7
 24218 03b2 80BC     		pop	{r7}
 24219 03b4 7047     		bx	lr
 24220              		.cfi_endproc
 24221              	.LFE43:
 24223 03b6 00BF     		.align	2
 24224              		.global	RCC_GetSYSCLKSource
 24225              		.thumb
 24226              		.thumb_func
 24228              	RCC_GetSYSCLKSource:
 24229              	.LFB44:
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  None
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of the following:
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24230              		.loc 1 717 0
 24231              		.cfi_startproc
 24232              		@ args = 0, pretend = 0, frame = 0
 24233              		@ frame_needed = 1, uses_anonymous_args = 0
 24234              		@ link register save eliminated.
 24235 03b8 80B4     		push	{r7}
 24236              	.LCFI44:
 24237              		.cfi_def_cfa_offset 4
 24238 03ba 00AF     		add	r7, sp, #0
 24239              		.cfi_offset 7, -4
 24240              	.LCFI45:
 24241              		.cfi_def_cfa_register 7
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 24242              		.loc 1 718 0
 24243 03bc 4FF46053 		mov	r3, #14336
 24244 03c0 C4F20203 		movt	r3, 16386
 24245 03c4 9B68     		ldr	r3, [r3, #8]
 24246 03c6 DBB2     		uxtb	r3, r3
 24247 03c8 03F00C03 		and	r3, r3, #12
 24248 03cc DBB2     		uxtb	r3, r3
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24249              		.loc 1 719 0
 24250 03ce 1846     		mov	r0, r3
 24251 03d0 BD46     		mov	sp, r7
 24252 03d2 80BC     		pop	{r7}
 24253 03d4 7047     		bx	lr
 24254              		.cfi_endproc
 24255              	.LFE44:
 24257 03d6 00BF     		.align	2
 24258              		.global	RCC_HCLKConfig
 24259              		.thumb
 24260              		.thumb_func
 24262              	RCC_HCLKConfig:
 24263              	.LFB45:
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         (for more details refer to section above
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the system clock (SYSCLK).
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24264              		.loc 1 742 0
 24265              		.cfi_startproc
 24266              		@ args = 0, pretend = 0, frame = 16
 24267              		@ frame_needed = 1, uses_anonymous_args = 0
 24268              		@ link register save eliminated.
 24269 03d8 80B4     		push	{r7}
 24270              	.LCFI46:
 24271              		.cfi_def_cfa_offset 4
 24272 03da 85B0     		sub	sp, sp, #20
 24273              	.LCFI47:
 24274              		.cfi_def_cfa_offset 24
 24275 03dc 00AF     		add	r7, sp, #0
 24276              		.cfi_offset 7, -4
 24277              	.LCFI48:
 24278              		.cfi_def_cfa_register 7
 24279 03de 7860     		str	r0, [r7, #4]
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 24280              		.loc 1 743 0
 24281 03e0 4FF00003 		mov	r3, #0
 24282 03e4 FB60     		str	r3, [r7, #12]
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 24283              		.loc 1 748 0
 24284 03e6 4FF46053 		mov	r3, #14336
 24285 03ea C4F20203 		movt	r3, 16386
 24286 03ee 9B68     		ldr	r3, [r3, #8]
 24287 03f0 FB60     		str	r3, [r7, #12]
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 24288              		.loc 1 751 0
 24289 03f2 FB68     		ldr	r3, [r7, #12]
 24290 03f4 23F0F003 		bic	r3, r3, #240
 24291 03f8 FB60     		str	r3, [r7, #12]
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 24292              		.loc 1 754 0
 24293 03fa FA68     		ldr	r2, [r7, #12]
 24294 03fc 7B68     		ldr	r3, [r7, #4]
 24295 03fe 42EA0303 		orr	r3, r2, r3
 24296 0402 FB60     		str	r3, [r7, #12]
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;
 24297              		.loc 1 757 0
 24298 0404 4FF46053 		mov	r3, #14336
 24299 0408 C4F20203 		movt	r3, 16386
 24300 040c FA68     		ldr	r2, [r7, #12]
 24301 040e 9A60     		str	r2, [r3, #8]
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24302              		.loc 1 758 0
 24303 0410 07F11407 		add	r7, r7, #20
 24304 0414 BD46     		mov	sp, r7
 24305 0416 80BC     		pop	{r7}
 24306 0418 7047     		bx	lr
 24307              		.cfi_endproc
 24308              	.LFE45:
 24310 041a 00BF     		.align	2
 24311              		.global	RCC_PCLK1Config
 24312              		.thumb
 24313              		.thumb_func
 24315              	RCC_PCLK1Config:
 24316              	.LFB46:
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the AHB clock (HCLK).
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24317              		.loc 1 774 0
 24318              		.cfi_startproc
 24319              		@ args = 0, pretend = 0, frame = 16
 24320              		@ frame_needed = 1, uses_anonymous_args = 0
 24321              		@ link register save eliminated.
 24322 041c 80B4     		push	{r7}
 24323              	.LCFI49:
 24324              		.cfi_def_cfa_offset 4
 24325 041e 85B0     		sub	sp, sp, #20
 24326              	.LCFI50:
 24327              		.cfi_def_cfa_offset 24
 24328 0420 00AF     		add	r7, sp, #0
 24329              		.cfi_offset 7, -4
 24330              	.LCFI51:
 24331              		.cfi_def_cfa_register 7
 24332 0422 7860     		str	r0, [r7, #4]
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 24333              		.loc 1 775 0
 24334 0424 4FF00003 		mov	r3, #0
 24335 0428 FB60     		str	r3, [r7, #12]
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 24336              		.loc 1 780 0
 24337 042a 4FF46053 		mov	r3, #14336
 24338 042e C4F20203 		movt	r3, 16386
 24339 0432 9B68     		ldr	r3, [r3, #8]
 24340 0434 FB60     		str	r3, [r7, #12]
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 24341              		.loc 1 783 0
 24342 0436 FB68     		ldr	r3, [r7, #12]
 24343 0438 23F4E053 		bic	r3, r3, #7168
 24344 043c FB60     		str	r3, [r7, #12]
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_HCLK;
 24345              		.loc 1 786 0
 24346 043e FA68     		ldr	r2, [r7, #12]
 24347 0440 7B68     		ldr	r3, [r7, #4]
 24348 0442 42EA0303 		orr	r3, r2, r3
 24349 0446 FB60     		str	r3, [r7, #12]
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;
 24350              		.loc 1 789 0
 24351 0448 4FF46053 		mov	r3, #14336
 24352 044c C4F20203 		movt	r3, 16386
 24353 0450 FA68     		ldr	r2, [r7, #12]
 24354 0452 9A60     		str	r2, [r3, #8]
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24355              		.loc 1 790 0
 24356 0454 07F11407 		add	r7, r7, #20
 24357 0458 BD46     		mov	sp, r7
 24358 045a 80BC     		pop	{r7}
 24359 045c 7047     		bx	lr
 24360              		.cfi_endproc
 24361              	.LFE46:
 24363 045e 00BF     		.align	2
 24364              		.global	RCC_PCLK2Config
 24365              		.thumb
 24366              		.thumb_func
 24368              	RCC_PCLK2Config:
 24369              	.LFB47:
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the AHB clock (HCLK).
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24370              		.loc 1 805 0
 24371              		.cfi_startproc
 24372              		@ args = 0, pretend = 0, frame = 16
 24373              		@ frame_needed = 1, uses_anonymous_args = 0
 24374              		@ link register save eliminated.
 24375 0460 80B4     		push	{r7}
 24376              	.LCFI52:
 24377              		.cfi_def_cfa_offset 4
 24378 0462 85B0     		sub	sp, sp, #20
 24379              	.LCFI53:
 24380              		.cfi_def_cfa_offset 24
 24381 0464 00AF     		add	r7, sp, #0
 24382              		.cfi_offset 7, -4
 24383              	.LCFI54:
 24384              		.cfi_def_cfa_register 7
 24385 0466 7860     		str	r0, [r7, #4]
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 24386              		.loc 1 806 0
 24387 0468 4FF00003 		mov	r3, #0
 24388 046c FB60     		str	r3, [r7, #12]
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 24389              		.loc 1 811 0
 24390 046e 4FF46053 		mov	r3, #14336
 24391 0472 C4F20203 		movt	r3, 16386
 24392 0476 9B68     		ldr	r3, [r3, #8]
 24393 0478 FB60     		str	r3, [r7, #12]
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 24394              		.loc 1 814 0
 24395 047a FB68     		ldr	r3, [r7, #12]
 24396 047c 23F46043 		bic	r3, r3, #57344
 24397 0480 FB60     		str	r3, [r7, #12]
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 24398              		.loc 1 817 0
 24399 0482 7B68     		ldr	r3, [r7, #4]
 24400 0484 4FEAC303 		lsl	r3, r3, #3
 24401 0488 FA68     		ldr	r2, [r7, #12]
 24402 048a 42EA0303 		orr	r3, r2, r3
 24403 048e FB60     		str	r3, [r7, #12]
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;
 24404              		.loc 1 820 0
 24405 0490 4FF46053 		mov	r3, #14336
 24406 0494 C4F20203 		movt	r3, 16386
 24407 0498 FA68     		ldr	r2, [r7, #12]
 24408 049a 9A60     		str	r2, [r3, #8]
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24409              		.loc 1 821 0
 24410 049c 07F11407 		add	r7, r7, #20
 24411 04a0 BD46     		mov	sp, r7
 24412 04a2 80BC     		pop	{r7}
 24413 04a4 7047     		bx	lr
 24414              		.cfi_endproc
 24415              	.LFE47:
 24417 04a6 00BF     		.align	2
 24418              		.global	RCC_GetClocksFreq
 24419              		.thumb
 24420              		.thumb_func
 24422              	RCC_GetClocksFreq:
 24423              	.LFB48:
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * 
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         constant and the selected clock source:
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f2xx.h file (default value
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *               in voltage and temperature.
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f2xx.h file (default value
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                have wrong result.
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         value for HSE crystal.
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          the clocks frequencies.
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *     
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24424              		.loc 1 857 0
 24425              		.cfi_startproc
 24426              		@ args = 0, pretend = 0, frame = 32
 24427              		@ frame_needed = 1, uses_anonymous_args = 0
 24428              		@ link register save eliminated.
 24429 04a8 80B4     		push	{r7}
 24430              	.LCFI55:
 24431              		.cfi_def_cfa_offset 4
 24432 04aa 89B0     		sub	sp, sp, #36
 24433              	.LCFI56:
 24434              		.cfi_def_cfa_offset 40
 24435 04ac 00AF     		add	r7, sp, #0
 24436              		.cfi_offset 7, -4
 24437              	.LCFI57:
 24438              		.cfi_def_cfa_register 7
 24439 04ae 7860     		str	r0, [r7, #4]
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 24440              		.loc 1 858 0
 24441 04b0 4FF00003 		mov	r3, #0
 24442 04b4 BB61     		str	r3, [r7, #24]
 24443 04b6 4FF00003 		mov	r3, #0
 24444 04ba 7B61     		str	r3, [r7, #20]
 24445 04bc 4FF00003 		mov	r3, #0
 24446 04c0 FB61     		str	r3, [r7, #28]
 24447 04c2 4FF00203 		mov	r3, #2
 24448 04c6 3B61     		str	r3, [r7, #16]
 24449 04c8 4FF00003 		mov	r3, #0
 24450 04cc FB60     		str	r3, [r7, #12]
 24451 04ce 4FF00203 		mov	r3, #2
 24452 04d2 BB60     		str	r3, [r7, #8]
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 24453              		.loc 1 861 0
 24454 04d4 4FF46053 		mov	r3, #14336
 24455 04d8 C4F20203 		movt	r3, 16386
 24456 04dc 9B68     		ldr	r3, [r3, #8]
 24457 04de 03F00C03 		and	r3, r3, #12
 24458 04e2 BB61     		str	r3, [r7, #24]
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   switch (tmp)
 24459              		.loc 1 863 0
 24460 04e4 BB69     		ldr	r3, [r7, #24]
 24461 04e6 042B     		cmp	r3, #4
 24462 04e8 0AD0     		beq	.L31
 24463 04ea 082B     		cmp	r3, #8
 24464 04ec 0FD0     		beq	.L32
 24465 04ee 002B     		cmp	r3, #0
 24466 04f0 62D1     		bne	.L36
 24467              	.L30:
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 24468              		.loc 1 866 0
 24469 04f2 7A68     		ldr	r2, [r7, #4]
 24470 04f4 4FF41053 		mov	r3, #9216
 24471 04f8 C0F2F403 		movt	r3, 244
 24472 04fc 1360     		str	r3, [r2, #0]
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 24473              		.loc 1 867 0
 24474 04fe 62E0     		b	.L33
 24475              	.L31:
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 24476              		.loc 1 869 0
 24477 0500 7A68     		ldr	r2, [r7, #4]
 24478 0502 47F64003 		movw	r3, #30784
 24479 0506 C0F27D13 		movt	r3, 381
 24480 050a 1360     		str	r3, [r2, #0]
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 24481              		.loc 1 870 0
 24482 050c 5BE0     		b	.L33
 24483              	.L32:
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****          */    
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 24484              		.loc 1 876 0
 24485 050e 4FF46053 		mov	r3, #14336
 24486 0512 C4F20203 		movt	r3, 16386
 24487 0516 5B68     		ldr	r3, [r3, #4]
 24488 0518 03F48003 		and	r3, r3, #4194304
 24489 051c 4FEA9353 		lsr	r3, r3, #22
 24490 0520 FB60     		str	r3, [r7, #12]
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 24491              		.loc 1 877 0
 24492 0522 4FF46053 		mov	r3, #14336
 24493 0526 C4F20203 		movt	r3, 16386
 24494 052a 5B68     		ldr	r3, [r3, #4]
 24495 052c 03F03F03 		and	r3, r3, #63
 24496 0530 BB60     		str	r3, [r7, #8]
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       if (pllsource != 0)
 24497              		.loc 1 879 0
 24498 0532 FB68     		ldr	r3, [r7, #12]
 24499 0534 002B     		cmp	r3, #0
 24500 0536 15D0     		beq	.L34
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       {
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         /* HSE used as PLL clock source */
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 24501              		.loc 1 882 0
 24502 0538 47F64003 		movw	r3, #30784
 24503 053c C0F27D13 		movt	r3, 381
 24504 0540 BA68     		ldr	r2, [r7, #8]
 24505 0542 B3FBF2F2 		udiv	r2, r3, r2
 24506 0546 4FF46053 		mov	r3, #14336
 24507 054a C4F20203 		movt	r3, 16386
 24508 054e 5968     		ldr	r1, [r3, #4]
 24509 0550 47F6C073 		movw	r3, #32704
 24510 0554 01EA0303 		and	r3, r1, r3
 24511 0558 4FEA9313 		lsr	r3, r3, #6
 24512 055c 03FB02F3 		mul	r3, r3, r2
 24513 0560 FB61     		str	r3, [r7, #28]
 24514 0562 14E0     		b	.L35
 24515              	.L34:
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       }
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       else
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       {
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         /* HSI used as PLL clock source */
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 24516              		.loc 1 887 0
 24517 0564 4FF41053 		mov	r3, #9216
 24518 0568 C0F2F403 		movt	r3, 244
 24519 056c BA68     		ldr	r2, [r7, #8]
 24520 056e B3FBF2F2 		udiv	r2, r3, r2
 24521 0572 4FF46053 		mov	r3, #14336
 24522 0576 C4F20203 		movt	r3, 16386
 24523 057a 5968     		ldr	r1, [r3, #4]
 24524 057c 47F6C073 		movw	r3, #32704
 24525 0580 01EA0303 		and	r3, r1, r3
 24526 0584 4FEA9313 		lsr	r3, r3, #6
 24527 0588 03FB02F3 		mul	r3, r3, r2
 24528 058c FB61     		str	r3, [r7, #28]
 24529              	.L35:
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       }
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 24530              		.loc 1 890 0
 24531 058e 4FF46053 		mov	r3, #14336
 24532 0592 C4F20203 		movt	r3, 16386
 24533 0596 5B68     		ldr	r3, [r3, #4]
 24534 0598 03F44033 		and	r3, r3, #196608
 24535 059c 4FEA1343 		lsr	r3, r3, #16
 24536 05a0 03F10103 		add	r3, r3, #1
 24537 05a4 4FEA4303 		lsl	r3, r3, #1
 24538 05a8 3B61     		str	r3, [r7, #16]
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 24539              		.loc 1 891 0
 24540 05aa FA69     		ldr	r2, [r7, #28]
 24541 05ac 3B69     		ldr	r3, [r7, #16]
 24542 05ae B2FBF3F2 		udiv	r2, r2, r3
 24543 05b2 7B68     		ldr	r3, [r7, #4]
 24544 05b4 1A60     		str	r2, [r3, #0]
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 24545              		.loc 1 892 0
 24546 05b6 06E0     		b	.L33
 24547              	.L36:
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     default:
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 24548              		.loc 1 894 0
 24549 05b8 7A68     		ldr	r2, [r7, #4]
 24550 05ba 4FF41053 		mov	r3, #9216
 24551 05be C0F2F403 		movt	r3, 244
 24552 05c2 1360     		str	r3, [r2, #0]
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 24553              		.loc 1 895 0
 24554 05c4 00BF     		nop
 24555              	.L33:
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get HCLK prescaler */
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 24556              		.loc 1 900 0
 24557 05c6 4FF46053 		mov	r3, #14336
 24558 05ca C4F20203 		movt	r3, 16386
 24559 05ce 9B68     		ldr	r3, [r3, #8]
 24560 05d0 03F0F003 		and	r3, r3, #240
 24561 05d4 BB61     		str	r3, [r7, #24]
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = tmp >> 4;
 24562              		.loc 1 901 0
 24563 05d6 BB69     		ldr	r3, [r7, #24]
 24564 05d8 4FEA1313 		lsr	r3, r3, #4
 24565 05dc BB61     		str	r3, [r7, #24]
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 24566              		.loc 1 902 0
 24567 05de 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 24568 05e2 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 24569 05e6 BA69     		ldr	r2, [r7, #24]
 24570 05e8 1344     		add	r3, r3, r2
 24571 05ea 1B78     		ldrb	r3, [r3, #0]
 24572 05ec DBB2     		uxtb	r3, r3
 24573 05ee 7B61     		str	r3, [r7, #20]
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* HCLK clock frequency */
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 24574              		.loc 1 904 0
 24575 05f0 7B68     		ldr	r3, [r7, #4]
 24576 05f2 1A68     		ldr	r2, [r3, #0]
 24577 05f4 7B69     		ldr	r3, [r7, #20]
 24578 05f6 22FA03F2 		lsr	r2, r2, r3
 24579 05fa 7B68     		ldr	r3, [r7, #4]
 24580 05fc 5A60     		str	r2, [r3, #4]
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 24581              		.loc 1 907 0
 24582 05fe 4FF46053 		mov	r3, #14336
 24583 0602 C4F20203 		movt	r3, 16386
 24584 0606 9B68     		ldr	r3, [r3, #8]
 24585 0608 03F4E053 		and	r3, r3, #7168
 24586 060c BB61     		str	r3, [r7, #24]
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = tmp >> 10;
 24587              		.loc 1 908 0
 24588 060e BB69     		ldr	r3, [r7, #24]
 24589 0610 4FEA9323 		lsr	r3, r3, #10
 24590 0614 BB61     		str	r3, [r7, #24]
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 24591              		.loc 1 909 0
 24592 0616 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 24593 061a C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 24594 061e BA69     		ldr	r2, [r7, #24]
 24595 0620 1344     		add	r3, r3, r2
 24596 0622 1B78     		ldrb	r3, [r3, #0]
 24597 0624 DBB2     		uxtb	r3, r3
 24598 0626 7B61     		str	r3, [r7, #20]
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* PCLK1 clock frequency */
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 24599              		.loc 1 911 0
 24600 0628 7B68     		ldr	r3, [r7, #4]
 24601 062a 5A68     		ldr	r2, [r3, #4]
 24602 062c 7B69     		ldr	r3, [r7, #20]
 24603 062e 22FA03F2 		lsr	r2, r2, r3
 24604 0632 7B68     		ldr	r3, [r7, #4]
 24605 0634 9A60     		str	r2, [r3, #8]
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 24606              		.loc 1 914 0
 24607 0636 4FF46053 		mov	r3, #14336
 24608 063a C4F20203 		movt	r3, 16386
 24609 063e 9B68     		ldr	r3, [r3, #8]
 24610 0640 03F46043 		and	r3, r3, #57344
 24611 0644 BB61     		str	r3, [r7, #24]
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = tmp >> 13;
 24612              		.loc 1 915 0
 24613 0646 BB69     		ldr	r3, [r7, #24]
 24614 0648 4FEA5333 		lsr	r3, r3, #13
 24615 064c BB61     		str	r3, [r7, #24]
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 24616              		.loc 1 916 0
 24617 064e 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 24618 0652 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 24619 0656 BA69     		ldr	r2, [r7, #24]
 24620 0658 1344     		add	r3, r3, r2
 24621 065a 1B78     		ldrb	r3, [r3, #0]
 24622 065c DBB2     		uxtb	r3, r3
 24623 065e 7B61     		str	r3, [r7, #20]
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* PCLK2 clock frequency */
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 24624              		.loc 1 918 0
 24625 0660 7B68     		ldr	r3, [r7, #4]
 24626 0662 5A68     		ldr	r2, [r3, #4]
 24627 0664 7B69     		ldr	r3, [r7, #20]
 24628 0666 22FA03F2 		lsr	r2, r2, r3
 24629 066a 7B68     		ldr	r3, [r7, #4]
 24630 066c DA60     		str	r2, [r3, #12]
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24631              		.loc 1 919 0
 24632 066e 07F12407 		add	r7, r7, #36
 24633 0672 BD46     		mov	sp, r7
 24634 0674 80BC     		pop	{r7}
 24635 0676 7047     		bx	lr
 24636              		.cfi_endproc
 24637              	.LFE48:
 24639              		.align	2
 24640              		.global	RCC_RTCCLKConfig
 24641              		.thumb
 24642              		.thumb_func
 24644              	RCC_RTCCLKConfig:
 24645              	.LFB49:
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @}
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @verbatim   
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****                    Peripheral clocks configuration functions
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================  
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @endverbatim
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         a Power On Reset (POR).
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         RTC clock source).
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24646              		.loc 1 982 0
 24647              		.cfi_startproc
 24648              		@ args = 0, pretend = 0, frame = 16
 24649              		@ frame_needed = 1, uses_anonymous_args = 0
 24650              		@ link register save eliminated.
 24651 0678 80B4     		push	{r7}
 24652              	.LCFI58:
 24653              		.cfi_def_cfa_offset 4
 24654 067a 85B0     		sub	sp, sp, #20
 24655              	.LCFI59:
 24656              		.cfi_def_cfa_offset 24
 24657 067c 00AF     		add	r7, sp, #0
 24658              		.cfi_offset 7, -4
 24659              	.LCFI60:
 24660              		.cfi_def_cfa_register 7
 24661 067e 7860     		str	r0, [r7, #4]
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 24662              		.loc 1 983 0
 24663 0680 4FF00003 		mov	r3, #0
 24664 0684 FB60     		str	r3, [r7, #12]
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 24665              		.loc 1 988 0
 24666 0686 7B68     		ldr	r3, [r7, #4]
 24667 0688 03F44073 		and	r3, r3, #768
 24668 068c B3F5407F 		cmp	r3, #768
 24669 0690 18D1     		bne	.L38
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     tmpreg = RCC->CFGR;
 24670              		.loc 1 990 0
 24671 0692 4FF46053 		mov	r3, #14336
 24672 0696 C4F20203 		movt	r3, 16386
 24673 069a 9B68     		ldr	r3, [r3, #8]
 24674 069c FB60     		str	r3, [r7, #12]
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 24675              		.loc 1 993 0
 24676 069e FB68     		ldr	r3, [r7, #12]
 24677 06a0 23F4F813 		bic	r3, r3, #2031616
 24678 06a4 FB60     		str	r3, [r7, #12]
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 24679              		.loc 1 996 0
 24680 06a6 7B68     		ldr	r3, [r7, #4]
 24681 06a8 23F07043 		bic	r3, r3, #-268435456
 24682 06ac 23F44073 		bic	r3, r3, #768
 24683 06b0 FA68     		ldr	r2, [r7, #12]
 24684 06b2 42EA0303 		orr	r3, r2, r3
 24685 06b6 FB60     		str	r3, [r7, #12]
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Store the new value */
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->CFGR = tmpreg;
 24686              		.loc 1 999 0
 24687 06b8 4FF46053 		mov	r3, #14336
 24688 06bc C4F20203 		movt	r3, 16386
 24689 06c0 FA68     		ldr	r2, [r7, #12]
 24690 06c2 9A60     		str	r2, [r3, #8]
 24691              	.L38:
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Select the RTC clock source */
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 24692              		.loc 1 1003 0
 24693 06c4 4FF46053 		mov	r3, #14336
 24694 06c8 C4F20203 		movt	r3, 16386
 24695 06cc 4FF46052 		mov	r2, #14336
 24696 06d0 C4F20202 		movt	r2, 16386
 24697 06d4 116F     		ldr	r1, [r2, #112]
 24698 06d6 7A68     		ldr	r2, [r7, #4]
 24699 06d8 4FEA0252 		lsl	r2, r2, #20
 24700 06dc 4FEA1252 		lsr	r2, r2, #20
 24701 06e0 41EA0202 		orr	r2, r1, r2
 24702 06e4 1A67     		str	r2, [r3, #112]
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24703              		.loc 1 1004 0
 24704 06e6 07F11407 		add	r7, r7, #20
 24705 06ea BD46     		mov	sp, r7
 24706 06ec 80BC     		pop	{r7}
 24707 06ee 7047     		bx	lr
 24708              		.cfi_endproc
 24709              	.LFE49:
 24711              		.align	2
 24712              		.global	RCC_RTCCLKCmd
 24713              		.thumb
 24714              		.thumb_func
 24716              	RCC_RTCCLKCmd:
 24717              	.LFB50:
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24718              		.loc 1 1014 0
 24719              		.cfi_startproc
 24720              		@ args = 0, pretend = 0, frame = 8
 24721              		@ frame_needed = 1, uses_anonymous_args = 0
 24722              		@ link register save eliminated.
 24723 06f0 80B4     		push	{r7}
 24724              	.LCFI61:
 24725              		.cfi_def_cfa_offset 4
 24726 06f2 83B0     		sub	sp, sp, #12
 24727              	.LCFI62:
 24728              		.cfi_def_cfa_offset 16
 24729 06f4 00AF     		add	r7, sp, #0
 24730              		.cfi_offset 7, -4
 24731              	.LCFI63:
 24732              		.cfi_def_cfa_register 7
 24733 06f6 0346     		mov	r3, r0
 24734 06f8 FB71     		strb	r3, [r7, #7]
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 24735              		.loc 1 1018 0
 24736 06fa 40F63C63 		movw	r3, #3644
 24737 06fe C4F24723 		movt	r3, 16967
 24738 0702 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24739 0704 1A60     		str	r2, [r3, #0]
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24740              		.loc 1 1019 0
 24741 0706 07F10C07 		add	r7, r7, #12
 24742 070a BD46     		mov	sp, r7
 24743 070c 80BC     		pop	{r7}
 24744 070e 7047     		bx	lr
 24745              		.cfi_endproc
 24746              	.LFE50:
 24748              		.align	2
 24749              		.global	RCC_BackupResetCmd
 24750              		.thumb
 24751              		.thumb_func
 24753              	RCC_BackupResetCmd:
 24754              	.LFB51:
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24755              		.loc 1 1031 0
 24756              		.cfi_startproc
 24757              		@ args = 0, pretend = 0, frame = 8
 24758              		@ frame_needed = 1, uses_anonymous_args = 0
 24759              		@ link register save eliminated.
 24760 0710 80B4     		push	{r7}
 24761              	.LCFI64:
 24762              		.cfi_def_cfa_offset 4
 24763 0712 83B0     		sub	sp, sp, #12
 24764              	.LCFI65:
 24765              		.cfi_def_cfa_offset 16
 24766 0714 00AF     		add	r7, sp, #0
 24767              		.cfi_offset 7, -4
 24768              	.LCFI66:
 24769              		.cfi_def_cfa_register 7
 24770 0716 0346     		mov	r3, r0
 24771 0718 FB71     		strb	r3, [r7, #7]
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 24772              		.loc 1 1034 0
 24773 071a 4FF46463 		mov	r3, #3648
 24774 071e C4F24723 		movt	r3, 16967
 24775 0722 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24776 0724 1A60     		str	r2, [r3, #0]
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24777              		.loc 1 1035 0
 24778 0726 07F10C07 		add	r7, r7, #12
 24779 072a BD46     		mov	sp, r7
 24780 072c 80BC     		pop	{r7}
 24781 072e 7047     		bx	lr
 24782              		.cfi_endproc
 24783              	.LFE51:
 24785              		.align	2
 24786              		.global	RCC_I2SCLKConfig
 24787              		.thumb
 24788              		.thumb_func
 24790              	RCC_I2SCLKConfig:
 24791              	.LFB52:
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                                        used as I2S clock source
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24792              		.loc 1 1051 0
 24793              		.cfi_startproc
 24794              		@ args = 0, pretend = 0, frame = 8
 24795              		@ frame_needed = 1, uses_anonymous_args = 0
 24796              		@ link register save eliminated.
 24797 0730 80B4     		push	{r7}
 24798              	.LCFI67:
 24799              		.cfi_def_cfa_offset 4
 24800 0732 83B0     		sub	sp, sp, #12
 24801              	.LCFI68:
 24802              		.cfi_def_cfa_offset 16
 24803 0734 00AF     		add	r7, sp, #0
 24804              		.cfi_offset 7, -4
 24805              	.LCFI69:
 24806              		.cfi_def_cfa_register 7
 24807 0736 7860     		str	r0, [r7, #4]
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 24808              		.loc 1 1055 0
 24809 0738 4FF4AE73 		mov	r3, #348
 24810 073c C4F24723 		movt	r3, 16967
 24811 0740 7A68     		ldr	r2, [r7, #4]
 24812 0742 1A60     		str	r2, [r3, #0]
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24813              		.loc 1 1056 0
 24814 0744 07F10C07 		add	r7, r7, #12
 24815 0748 BD46     		mov	sp, r7
 24816 074a 80BC     		pop	{r7}
 24817 074c 7047     		bx	lr
 24818              		.cfi_endproc
 24819              	.LFE52:
 24821 074e 00BF     		.align	2
 24822              		.global	RCC_AHB1PeriphClockCmd
 24823              		.thumb
 24824              		.thumb_func
 24826              	RCC_AHB1PeriphClockCmd:
 24827              	.LFB53:
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it.   
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24828              		.loc 1 1089 0
 24829              		.cfi_startproc
 24830              		@ args = 0, pretend = 0, frame = 8
 24831              		@ frame_needed = 1, uses_anonymous_args = 0
 24832              		@ link register save eliminated.
 24833 0750 80B4     		push	{r7}
 24834              	.LCFI70:
 24835              		.cfi_def_cfa_offset 4
 24836 0752 83B0     		sub	sp, sp, #12
 24837              	.LCFI71:
 24838              		.cfi_def_cfa_offset 16
 24839 0754 00AF     		add	r7, sp, #0
 24840              		.cfi_offset 7, -4
 24841              	.LCFI72:
 24842              		.cfi_def_cfa_register 7
 24843 0756 7860     		str	r0, [r7, #4]
 24844 0758 0B46     		mov	r3, r1
 24845 075a FB70     		strb	r3, [r7, #3]
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 24846              		.loc 1 1094 0
 24847 075c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24848 075e 002B     		cmp	r3, #0
 24849 0760 0DD0     		beq	.L43
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 24850              		.loc 1 1096 0
 24851 0762 4FF46053 		mov	r3, #14336
 24852 0766 C4F20203 		movt	r3, 16386
 24853 076a 4FF46052 		mov	r2, #14336
 24854 076e C4F20202 		movt	r2, 16386
 24855 0772 116B     		ldr	r1, [r2, #48]
 24856 0774 7A68     		ldr	r2, [r7, #4]
 24857 0776 41EA0202 		orr	r2, r1, r2
 24858 077a 1A63     		str	r2, [r3, #48]
 24859 077c 0EE0     		b	.L42
 24860              	.L43:
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 24861              		.loc 1 1100 0
 24862 077e 4FF46053 		mov	r3, #14336
 24863 0782 C4F20203 		movt	r3, 16386
 24864 0786 4FF46052 		mov	r2, #14336
 24865 078a C4F20202 		movt	r2, 16386
 24866 078e 116B     		ldr	r1, [r2, #48]
 24867 0790 7A68     		ldr	r2, [r7, #4]
 24868 0792 6FEA0202 		mvn	r2, r2
 24869 0796 01EA0202 		and	r2, r1, r2
 24870 079a 1A63     		str	r2, [r3, #48]
 24871              	.L42:
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24872              		.loc 1 1102 0
 24873 079c 07F10C07 		add	r7, r7, #12
 24874 07a0 BD46     		mov	sp, r7
 24875 07a2 80BC     		pop	{r7}
 24876 07a4 7047     		bx	lr
 24877              		.cfi_endproc
 24878              	.LFE53:
 24880 07a6 00BF     		.align	2
 24881              		.global	RCC_AHB2PeriphClockCmd
 24882              		.thumb
 24883              		.thumb_func
 24885              	RCC_AHB2PeriphClockCmd:
 24886              	.LFB54:
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it. 
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24887              		.loc 1 1121 0
 24888              		.cfi_startproc
 24889              		@ args = 0, pretend = 0, frame = 8
 24890              		@ frame_needed = 1, uses_anonymous_args = 0
 24891              		@ link register save eliminated.
 24892 07a8 80B4     		push	{r7}
 24893              	.LCFI73:
 24894              		.cfi_def_cfa_offset 4
 24895 07aa 83B0     		sub	sp, sp, #12
 24896              	.LCFI74:
 24897              		.cfi_def_cfa_offset 16
 24898 07ac 00AF     		add	r7, sp, #0
 24899              		.cfi_offset 7, -4
 24900              	.LCFI75:
 24901              		.cfi_def_cfa_register 7
 24902 07ae 7860     		str	r0, [r7, #4]
 24903 07b0 0B46     		mov	r3, r1
 24904 07b2 FB70     		strb	r3, [r7, #3]
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 24905              		.loc 1 1126 0
 24906 07b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24907 07b6 002B     		cmp	r3, #0
 24908 07b8 0DD0     		beq	.L46
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 24909              		.loc 1 1128 0
 24910 07ba 4FF46053 		mov	r3, #14336
 24911 07be C4F20203 		movt	r3, 16386
 24912 07c2 4FF46052 		mov	r2, #14336
 24913 07c6 C4F20202 		movt	r2, 16386
 24914 07ca 516B     		ldr	r1, [r2, #52]
 24915 07cc 7A68     		ldr	r2, [r7, #4]
 24916 07ce 41EA0202 		orr	r2, r1, r2
 24917 07d2 5A63     		str	r2, [r3, #52]
 24918 07d4 0EE0     		b	.L45
 24919              	.L46:
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 24920              		.loc 1 1132 0
 24921 07d6 4FF46053 		mov	r3, #14336
 24922 07da C4F20203 		movt	r3, 16386
 24923 07de 4FF46052 		mov	r2, #14336
 24924 07e2 C4F20202 		movt	r2, 16386
 24925 07e6 516B     		ldr	r1, [r2, #52]
 24926 07e8 7A68     		ldr	r2, [r7, #4]
 24927 07ea 6FEA0202 		mvn	r2, r2
 24928 07ee 01EA0202 		and	r2, r1, r2
 24929 07f2 5A63     		str	r2, [r3, #52]
 24930              	.L45:
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24931              		.loc 1 1134 0
 24932 07f4 07F10C07 		add	r7, r7, #12
 24933 07f8 BD46     		mov	sp, r7
 24934 07fa 80BC     		pop	{r7}
 24935 07fc 7047     		bx	lr
 24936              		.cfi_endproc
 24937              	.LFE54:
 24939 07fe 00BF     		.align	2
 24940              		.global	RCC_AHB3PeriphClockCmd
 24941              		.thumb
 24942              		.thumb_func
 24944              	RCC_AHB3PeriphClockCmd:
 24945              	.LFB55:
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it. 
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 24946              		.loc 1 1148 0
 24947              		.cfi_startproc
 24948              		@ args = 0, pretend = 0, frame = 8
 24949              		@ frame_needed = 1, uses_anonymous_args = 0
 24950              		@ link register save eliminated.
 24951 0800 80B4     		push	{r7}
 24952              	.LCFI76:
 24953              		.cfi_def_cfa_offset 4
 24954 0802 83B0     		sub	sp, sp, #12
 24955              	.LCFI77:
 24956              		.cfi_def_cfa_offset 16
 24957 0804 00AF     		add	r7, sp, #0
 24958              		.cfi_offset 7, -4
 24959              	.LCFI78:
 24960              		.cfi_def_cfa_register 7
 24961 0806 7860     		str	r0, [r7, #4]
 24962 0808 0B46     		mov	r3, r1
 24963 080a FB70     		strb	r3, [r7, #3]
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 24964              		.loc 1 1153 0
 24965 080c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24966 080e 002B     		cmp	r3, #0
 24967 0810 0DD0     		beq	.L49
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 24968              		.loc 1 1155 0
 24969 0812 4FF46053 		mov	r3, #14336
 24970 0816 C4F20203 		movt	r3, 16386
 24971 081a 4FF46052 		mov	r2, #14336
 24972 081e C4F20202 		movt	r2, 16386
 24973 0822 916B     		ldr	r1, [r2, #56]
 24974 0824 7A68     		ldr	r2, [r7, #4]
 24975 0826 41EA0202 		orr	r2, r1, r2
 24976 082a 9A63     		str	r2, [r3, #56]
 24977 082c 0EE0     		b	.L48
 24978              	.L49:
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 24979              		.loc 1 1159 0
 24980 082e 4FF46053 		mov	r3, #14336
 24981 0832 C4F20203 		movt	r3, 16386
 24982 0836 4FF46052 		mov	r2, #14336
 24983 083a C4F20202 		movt	r2, 16386
 24984 083e 916B     		ldr	r1, [r2, #56]
 24985 0840 7A68     		ldr	r2, [r7, #4]
 24986 0842 6FEA0202 		mvn	r2, r2
 24987 0846 01EA0202 		and	r2, r1, r2
 24988 084a 9A63     		str	r2, [r3, #56]
 24989              	.L48:
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 24990              		.loc 1 1161 0
 24991 084c 07F10C07 		add	r7, r7, #12
 24992 0850 BD46     		mov	sp, r7
 24993 0852 80BC     		pop	{r7}
 24994 0854 7047     		bx	lr
 24995              		.cfi_endproc
 24996              	.LFE55:
 24998 0856 00BF     		.align	2
 24999              		.global	RCC_APB1PeriphClockCmd
 25000              		.thumb
 25001              		.thumb_func
 25003              	RCC_APB1PeriphClockCmd:
 25004              	.LFB56:
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it. 
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25005              		.loc 1 1198 0
 25006              		.cfi_startproc
 25007              		@ args = 0, pretend = 0, frame = 8
 25008              		@ frame_needed = 1, uses_anonymous_args = 0
 25009              		@ link register save eliminated.
 25010 0858 80B4     		push	{r7}
 25011              	.LCFI79:
 25012              		.cfi_def_cfa_offset 4
 25013 085a 83B0     		sub	sp, sp, #12
 25014              	.LCFI80:
 25015              		.cfi_def_cfa_offset 16
 25016 085c 00AF     		add	r7, sp, #0
 25017              		.cfi_offset 7, -4
 25018              	.LCFI81:
 25019              		.cfi_def_cfa_register 7
 25020 085e 7860     		str	r0, [r7, #4]
 25021 0860 0B46     		mov	r3, r1
 25022 0862 FB70     		strb	r3, [r7, #3]
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25023              		.loc 1 1203 0
 25024 0864 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25025 0866 002B     		cmp	r3, #0
 25026 0868 0DD0     		beq	.L52
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 25027              		.loc 1 1205 0
 25028 086a 4FF46053 		mov	r3, #14336
 25029 086e C4F20203 		movt	r3, 16386
 25030 0872 4FF46052 		mov	r2, #14336
 25031 0876 C4F20202 		movt	r2, 16386
 25032 087a 116C     		ldr	r1, [r2, #64]
 25033 087c 7A68     		ldr	r2, [r7, #4]
 25034 087e 41EA0202 		orr	r2, r1, r2
 25035 0882 1A64     		str	r2, [r3, #64]
 25036 0884 0EE0     		b	.L51
 25037              	.L52:
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 25038              		.loc 1 1209 0
 25039 0886 4FF46053 		mov	r3, #14336
 25040 088a C4F20203 		movt	r3, 16386
 25041 088e 4FF46052 		mov	r2, #14336
 25042 0892 C4F20202 		movt	r2, 16386
 25043 0896 116C     		ldr	r1, [r2, #64]
 25044 0898 7A68     		ldr	r2, [r7, #4]
 25045 089a 6FEA0202 		mvn	r2, r2
 25046 089e 01EA0202 		and	r2, r1, r2
 25047 08a2 1A64     		str	r2, [r3, #64]
 25048              	.L51:
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25049              		.loc 1 1211 0
 25050 08a4 07F10C07 		add	r7, r7, #12
 25051 08a8 BD46     		mov	sp, r7
 25052 08aa 80BC     		pop	{r7}
 25053 08ac 7047     		bx	lr
 25054              		.cfi_endproc
 25055              	.LFE56:
 25057 08ae 00BF     		.align	2
 25058              		.global	RCC_APB2PeriphClockCmd
 25059              		.thumb
 25060              		.thumb_func
 25062              	RCC_APB2PeriphClockCmd:
 25063              	.LFB57:
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it.
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25064              		.loc 1 1238 0
 25065              		.cfi_startproc
 25066              		@ args = 0, pretend = 0, frame = 8
 25067              		@ frame_needed = 1, uses_anonymous_args = 0
 25068              		@ link register save eliminated.
 25069 08b0 80B4     		push	{r7}
 25070              	.LCFI82:
 25071              		.cfi_def_cfa_offset 4
 25072 08b2 83B0     		sub	sp, sp, #12
 25073              	.LCFI83:
 25074              		.cfi_def_cfa_offset 16
 25075 08b4 00AF     		add	r7, sp, #0
 25076              		.cfi_offset 7, -4
 25077              	.LCFI84:
 25078              		.cfi_def_cfa_register 7
 25079 08b6 7860     		str	r0, [r7, #4]
 25080 08b8 0B46     		mov	r3, r1
 25081 08ba FB70     		strb	r3, [r7, #3]
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25082              		.loc 1 1243 0
 25083 08bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25084 08be 002B     		cmp	r3, #0
 25085 08c0 0DD0     		beq	.L55
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 25086              		.loc 1 1245 0
 25087 08c2 4FF46053 		mov	r3, #14336
 25088 08c6 C4F20203 		movt	r3, 16386
 25089 08ca 4FF46052 		mov	r2, #14336
 25090 08ce C4F20202 		movt	r2, 16386
 25091 08d2 516C     		ldr	r1, [r2, #68]
 25092 08d4 7A68     		ldr	r2, [r7, #4]
 25093 08d6 41EA0202 		orr	r2, r1, r2
 25094 08da 5A64     		str	r2, [r3, #68]
 25095 08dc 0EE0     		b	.L54
 25096              	.L55:
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 25097              		.loc 1 1249 0
 25098 08de 4FF46053 		mov	r3, #14336
 25099 08e2 C4F20203 		movt	r3, 16386
 25100 08e6 4FF46052 		mov	r2, #14336
 25101 08ea C4F20202 		movt	r2, 16386
 25102 08ee 516C     		ldr	r1, [r2, #68]
 25103 08f0 7A68     		ldr	r2, [r7, #4]
 25104 08f2 6FEA0202 		mvn	r2, r2
 25105 08f6 01EA0202 		and	r2, r1, r2
 25106 08fa 5A64     		str	r2, [r3, #68]
 25107              	.L54:
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25108              		.loc 1 1251 0
 25109 08fc 07F10C07 		add	r7, r7, #12
 25110 0900 BD46     		mov	sp, r7
 25111 0902 80BC     		pop	{r7}
 25112 0904 7047     		bx	lr
 25113              		.cfi_endproc
 25114              	.LFE57:
 25116 0906 00BF     		.align	2
 25117              		.global	RCC_AHB1PeriphResetCmd
 25118              		.thumb
 25119              		.thumb_func
 25121              	RCC_AHB1PeriphResetCmd:
 25122              	.LFB58:
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                  
1272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25123              		.loc 1 1277 0
 25124              		.cfi_startproc
 25125              		@ args = 0, pretend = 0, frame = 8
 25126              		@ frame_needed = 1, uses_anonymous_args = 0
 25127              		@ link register save eliminated.
 25128 0908 80B4     		push	{r7}
 25129              	.LCFI85:
 25130              		.cfi_def_cfa_offset 4
 25131 090a 83B0     		sub	sp, sp, #12
 25132              	.LCFI86:
 25133              		.cfi_def_cfa_offset 16
 25134 090c 00AF     		add	r7, sp, #0
 25135              		.cfi_offset 7, -4
 25136              	.LCFI87:
 25137              		.cfi_def_cfa_register 7
 25138 090e 7860     		str	r0, [r7, #4]
 25139 0910 0B46     		mov	r3, r1
 25140 0912 FB70     		strb	r3, [r7, #3]
1278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25141              		.loc 1 1282 0
 25142 0914 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25143 0916 002B     		cmp	r3, #0
 25144 0918 0DD0     		beq	.L58
1283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 25145              		.loc 1 1284 0
 25146 091a 4FF46053 		mov	r3, #14336
 25147 091e C4F20203 		movt	r3, 16386
 25148 0922 4FF46052 		mov	r2, #14336
 25149 0926 C4F20202 		movt	r2, 16386
 25150 092a 1169     		ldr	r1, [r2, #16]
 25151 092c 7A68     		ldr	r2, [r7, #4]
 25152 092e 41EA0202 		orr	r2, r1, r2
 25153 0932 1A61     		str	r2, [r3, #16]
 25154 0934 0EE0     		b	.L57
 25155              	.L58:
1285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 25156              		.loc 1 1288 0
 25157 0936 4FF46053 		mov	r3, #14336
 25158 093a C4F20203 		movt	r3, 16386
 25159 093e 4FF46052 		mov	r2, #14336
 25160 0942 C4F20202 		movt	r2, 16386
 25161 0946 1169     		ldr	r1, [r2, #16]
 25162 0948 7A68     		ldr	r2, [r7, #4]
 25163 094a 6FEA0202 		mvn	r2, r2
 25164 094e 01EA0202 		and	r2, r1, r2
 25165 0952 1A61     		str	r2, [r3, #16]
 25166              	.L57:
1289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25167              		.loc 1 1290 0
 25168 0954 07F10C07 		add	r7, r7, #12
 25169 0958 BD46     		mov	sp, r7
 25170 095a 80BC     		pop	{r7}
 25171 095c 7047     		bx	lr
 25172              		.cfi_endproc
 25173              	.LFE58:
 25175 095e 00BF     		.align	2
 25176              		.global	RCC_AHB2PeriphResetCmd
 25177              		.thumb
 25178              		.thumb_func
 25180              	RCC_AHB2PeriphResetCmd:
 25181              	.LFB59:
1291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25182              		.loc 1 1306 0
 25183              		.cfi_startproc
 25184              		@ args = 0, pretend = 0, frame = 8
 25185              		@ frame_needed = 1, uses_anonymous_args = 0
 25186              		@ link register save eliminated.
 25187 0960 80B4     		push	{r7}
 25188              	.LCFI88:
 25189              		.cfi_def_cfa_offset 4
 25190 0962 83B0     		sub	sp, sp, #12
 25191              	.LCFI89:
 25192              		.cfi_def_cfa_offset 16
 25193 0964 00AF     		add	r7, sp, #0
 25194              		.cfi_offset 7, -4
 25195              	.LCFI90:
 25196              		.cfi_def_cfa_register 7
 25197 0966 7860     		str	r0, [r7, #4]
 25198 0968 0B46     		mov	r3, r1
 25199 096a FB70     		strb	r3, [r7, #3]
1307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25200              		.loc 1 1311 0
 25201 096c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25202 096e 002B     		cmp	r3, #0
 25203 0970 0DD0     		beq	.L61
1312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 25204              		.loc 1 1313 0
 25205 0972 4FF46053 		mov	r3, #14336
 25206 0976 C4F20203 		movt	r3, 16386
 25207 097a 4FF46052 		mov	r2, #14336
 25208 097e C4F20202 		movt	r2, 16386
 25209 0982 5169     		ldr	r1, [r2, #20]
 25210 0984 7A68     		ldr	r2, [r7, #4]
 25211 0986 41EA0202 		orr	r2, r1, r2
 25212 098a 5A61     		str	r2, [r3, #20]
 25213 098c 0EE0     		b	.L60
 25214              	.L61:
1314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 25215              		.loc 1 1317 0
 25216 098e 4FF46053 		mov	r3, #14336
 25217 0992 C4F20203 		movt	r3, 16386
 25218 0996 4FF46052 		mov	r2, #14336
 25219 099a C4F20202 		movt	r2, 16386
 25220 099e 5169     		ldr	r1, [r2, #20]
 25221 09a0 7A68     		ldr	r2, [r7, #4]
 25222 09a2 6FEA0202 		mvn	r2, r2
 25223 09a6 01EA0202 		and	r2, r1, r2
 25224 09aa 5A61     		str	r2, [r3, #20]
 25225              	.L60:
1318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25226              		.loc 1 1319 0
 25227 09ac 07F10C07 		add	r7, r7, #12
 25228 09b0 BD46     		mov	sp, r7
 25229 09b2 80BC     		pop	{r7}
 25230 09b4 7047     		bx	lr
 25231              		.cfi_endproc
 25232              	.LFE59:
 25234 09b6 00BF     		.align	2
 25235              		.global	RCC_AHB3PeriphResetCmd
 25236              		.thumb
 25237              		.thumb_func
 25239              	RCC_AHB3PeriphResetCmd:
 25240              	.LFB60:
1320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25241              		.loc 1 1330 0
 25242              		.cfi_startproc
 25243              		@ args = 0, pretend = 0, frame = 8
 25244              		@ frame_needed = 1, uses_anonymous_args = 0
 25245              		@ link register save eliminated.
 25246 09b8 80B4     		push	{r7}
 25247              	.LCFI91:
 25248              		.cfi_def_cfa_offset 4
 25249 09ba 83B0     		sub	sp, sp, #12
 25250              	.LCFI92:
 25251              		.cfi_def_cfa_offset 16
 25252 09bc 00AF     		add	r7, sp, #0
 25253              		.cfi_offset 7, -4
 25254              	.LCFI93:
 25255              		.cfi_def_cfa_register 7
 25256 09be 7860     		str	r0, [r7, #4]
 25257 09c0 0B46     		mov	r3, r1
 25258 09c2 FB70     		strb	r3, [r7, #3]
1331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25259              		.loc 1 1335 0
 25260 09c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25261 09c6 002B     		cmp	r3, #0
 25262 09c8 0DD0     		beq	.L64
1336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 25263              		.loc 1 1337 0
 25264 09ca 4FF46053 		mov	r3, #14336
 25265 09ce C4F20203 		movt	r3, 16386
 25266 09d2 4FF46052 		mov	r2, #14336
 25267 09d6 C4F20202 		movt	r2, 16386
 25268 09da 9169     		ldr	r1, [r2, #24]
 25269 09dc 7A68     		ldr	r2, [r7, #4]
 25270 09de 41EA0202 		orr	r2, r1, r2
 25271 09e2 9A61     		str	r2, [r3, #24]
 25272 09e4 0EE0     		b	.L63
 25273              	.L64:
1338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 25274              		.loc 1 1341 0
 25275 09e6 4FF46053 		mov	r3, #14336
 25276 09ea C4F20203 		movt	r3, 16386
 25277 09ee 4FF46052 		mov	r2, #14336
 25278 09f2 C4F20202 		movt	r2, 16386
 25279 09f6 9169     		ldr	r1, [r2, #24]
 25280 09f8 7A68     		ldr	r2, [r7, #4]
 25281 09fa 6FEA0202 		mvn	r2, r2
 25282 09fe 01EA0202 		and	r2, r1, r2
 25283 0a02 9A61     		str	r2, [r3, #24]
 25284              	.L63:
1342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25285              		.loc 1 1343 0
 25286 0a04 07F10C07 		add	r7, r7, #12
 25287 0a08 BD46     		mov	sp, r7
 25288 0a0a 80BC     		pop	{r7}
 25289 0a0c 7047     		bx	lr
 25290              		.cfi_endproc
 25291              	.LFE60:
 25293 0a0e 00BF     		.align	2
 25294              		.global	RCC_APB1PeriphResetCmd
 25295              		.thumb
 25296              		.thumb_func
 25298              	RCC_APB1PeriphResetCmd:
 25299              	.LFB61:
1344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25300              		.loc 1 1377 0
 25301              		.cfi_startproc
 25302              		@ args = 0, pretend = 0, frame = 8
 25303              		@ frame_needed = 1, uses_anonymous_args = 0
 25304              		@ link register save eliminated.
 25305 0a10 80B4     		push	{r7}
 25306              	.LCFI94:
 25307              		.cfi_def_cfa_offset 4
 25308 0a12 83B0     		sub	sp, sp, #12
 25309              	.LCFI95:
 25310              		.cfi_def_cfa_offset 16
 25311 0a14 00AF     		add	r7, sp, #0
 25312              		.cfi_offset 7, -4
 25313              	.LCFI96:
 25314              		.cfi_def_cfa_register 7
 25315 0a16 7860     		str	r0, [r7, #4]
 25316 0a18 0B46     		mov	r3, r1
 25317 0a1a FB70     		strb	r3, [r7, #3]
1378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25318              		.loc 1 1381 0
 25319 0a1c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25320 0a1e 002B     		cmp	r3, #0
 25321 0a20 0DD0     		beq	.L67
1382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 25322              		.loc 1 1383 0
 25323 0a22 4FF46053 		mov	r3, #14336
 25324 0a26 C4F20203 		movt	r3, 16386
 25325 0a2a 4FF46052 		mov	r2, #14336
 25326 0a2e C4F20202 		movt	r2, 16386
 25327 0a32 116A     		ldr	r1, [r2, #32]
 25328 0a34 7A68     		ldr	r2, [r7, #4]
 25329 0a36 41EA0202 		orr	r2, r1, r2
 25330 0a3a 1A62     		str	r2, [r3, #32]
 25331 0a3c 0EE0     		b	.L66
 25332              	.L67:
1384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 25333              		.loc 1 1387 0
 25334 0a3e 4FF46053 		mov	r3, #14336
 25335 0a42 C4F20203 		movt	r3, 16386
 25336 0a46 4FF46052 		mov	r2, #14336
 25337 0a4a C4F20202 		movt	r2, 16386
 25338 0a4e 116A     		ldr	r1, [r2, #32]
 25339 0a50 7A68     		ldr	r2, [r7, #4]
 25340 0a52 6FEA0202 		mvn	r2, r2
 25341 0a56 01EA0202 		and	r2, r1, r2
 25342 0a5a 1A62     		str	r2, [r3, #32]
 25343              	.L66:
1388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25344              		.loc 1 1389 0
 25345 0a5c 07F10C07 		add	r7, r7, #12
 25346 0a60 BD46     		mov	sp, r7
 25347 0a62 80BC     		pop	{r7}
 25348 0a64 7047     		bx	lr
 25349              		.cfi_endproc
 25350              	.LFE61:
 25352 0a66 00BF     		.align	2
 25353              		.global	RCC_APB2PeriphResetCmd
 25354              		.thumb
 25355              		.thumb_func
 25357              	RCC_APB2PeriphResetCmd:
 25358              	.LFB62:
1390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25359              		.loc 1 1413 0
 25360              		.cfi_startproc
 25361              		@ args = 0, pretend = 0, frame = 8
 25362              		@ frame_needed = 1, uses_anonymous_args = 0
 25363              		@ link register save eliminated.
 25364 0a68 80B4     		push	{r7}
 25365              	.LCFI97:
 25366              		.cfi_def_cfa_offset 4
 25367 0a6a 83B0     		sub	sp, sp, #12
 25368              	.LCFI98:
 25369              		.cfi_def_cfa_offset 16
 25370 0a6c 00AF     		add	r7, sp, #0
 25371              		.cfi_offset 7, -4
 25372              	.LCFI99:
 25373              		.cfi_def_cfa_register 7
 25374 0a6e 7860     		str	r0, [r7, #4]
 25375 0a70 0B46     		mov	r3, r1
 25376 0a72 FB70     		strb	r3, [r7, #3]
1414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25377              		.loc 1 1417 0
 25378 0a74 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25379 0a76 002B     		cmp	r3, #0
 25380 0a78 0DD0     		beq	.L70
1418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 25381              		.loc 1 1419 0
 25382 0a7a 4FF46053 		mov	r3, #14336
 25383 0a7e C4F20203 		movt	r3, 16386
 25384 0a82 4FF46052 		mov	r2, #14336
 25385 0a86 C4F20202 		movt	r2, 16386
 25386 0a8a 516A     		ldr	r1, [r2, #36]
 25387 0a8c 7A68     		ldr	r2, [r7, #4]
 25388 0a8e 41EA0202 		orr	r2, r1, r2
 25389 0a92 5A62     		str	r2, [r3, #36]
 25390 0a94 0EE0     		b	.L69
 25391              	.L70:
1420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 25392              		.loc 1 1423 0
 25393 0a96 4FF46053 		mov	r3, #14336
 25394 0a9a C4F20203 		movt	r3, 16386
 25395 0a9e 4FF46052 		mov	r2, #14336
 25396 0aa2 C4F20202 		movt	r2, 16386
 25397 0aa6 516A     		ldr	r1, [r2, #36]
 25398 0aa8 7A68     		ldr	r2, [r7, #4]
 25399 0aaa 6FEA0202 		mvn	r2, r2
 25400 0aae 01EA0202 		and	r2, r1, r2
 25401 0ab2 5A62     		str	r2, [r3, #36]
 25402              	.L69:
1424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25403              		.loc 1 1425 0
 25404 0ab4 07F10C07 		add	r7, r7, #12
 25405 0ab8 BD46     		mov	sp, r7
 25406 0aba 80BC     		pop	{r7}
 25407 0abc 7047     		bx	lr
 25408              		.cfi_endproc
 25409              	.LFE62:
 25411 0abe 00BF     		.align	2
 25412              		.global	RCC_AHB1PeriphClockLPModeCmd
 25413              		.thumb
 25414              		.thumb_func
 25416              	RCC_AHB1PeriphClockLPModeCmd:
 25417              	.LFB63:
1426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         power consumption.
1431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25418              		.loc 1 1459 0
 25419              		.cfi_startproc
 25420              		@ args = 0, pretend = 0, frame = 8
 25421              		@ frame_needed = 1, uses_anonymous_args = 0
 25422              		@ link register save eliminated.
 25423 0ac0 80B4     		push	{r7}
 25424              	.LCFI100:
 25425              		.cfi_def_cfa_offset 4
 25426 0ac2 83B0     		sub	sp, sp, #12
 25427              	.LCFI101:
 25428              		.cfi_def_cfa_offset 16
 25429 0ac4 00AF     		add	r7, sp, #0
 25430              		.cfi_offset 7, -4
 25431              	.LCFI102:
 25432              		.cfi_def_cfa_register 7
 25433 0ac6 7860     		str	r0, [r7, #4]
 25434 0ac8 0B46     		mov	r3, r1
 25435 0aca FB70     		strb	r3, [r7, #3]
1460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25436              		.loc 1 1463 0
 25437 0acc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25438 0ace 002B     		cmp	r3, #0
 25439 0ad0 0DD0     		beq	.L73
1464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 25440              		.loc 1 1465 0
 25441 0ad2 4FF46053 		mov	r3, #14336
 25442 0ad6 C4F20203 		movt	r3, 16386
 25443 0ada 4FF46052 		mov	r2, #14336
 25444 0ade C4F20202 		movt	r2, 16386
 25445 0ae2 116D     		ldr	r1, [r2, #80]
 25446 0ae4 7A68     		ldr	r2, [r7, #4]
 25447 0ae6 41EA0202 		orr	r2, r1, r2
 25448 0aea 1A65     		str	r2, [r3, #80]
 25449 0aec 0EE0     		b	.L72
 25450              	.L73:
1466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 25451              		.loc 1 1469 0
 25452 0aee 4FF46053 		mov	r3, #14336
 25453 0af2 C4F20203 		movt	r3, 16386
 25454 0af6 4FF46052 		mov	r2, #14336
 25455 0afa C4F20202 		movt	r2, 16386
 25456 0afe 116D     		ldr	r1, [r2, #80]
 25457 0b00 7A68     		ldr	r2, [r7, #4]
 25458 0b02 6FEA0202 		mvn	r2, r2
 25459 0b06 01EA0202 		and	r2, r1, r2
 25460 0b0a 1A65     		str	r2, [r3, #80]
 25461              	.L72:
1470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25462              		.loc 1 1471 0
 25463 0b0c 07F10C07 		add	r7, r7, #12
 25464 0b10 BD46     		mov	sp, r7
 25465 0b12 80BC     		pop	{r7}
 25466 0b14 7047     		bx	lr
 25467              		.cfi_endproc
 25468              	.LFE63:
 25470 0b16 00BF     		.align	2
 25471              		.global	RCC_AHB2PeriphClockLPModeCmd
 25472              		.thumb
 25473              		.thumb_func
 25475              	RCC_AHB2PeriphClockLPModeCmd:
 25476              	.LFB64:
1472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           power consumption.
1477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25477              		.loc 1 1491 0
 25478              		.cfi_startproc
 25479              		@ args = 0, pretend = 0, frame = 8
 25480              		@ frame_needed = 1, uses_anonymous_args = 0
 25481              		@ link register save eliminated.
 25482 0b18 80B4     		push	{r7}
 25483              	.LCFI103:
 25484              		.cfi_def_cfa_offset 4
 25485 0b1a 83B0     		sub	sp, sp, #12
 25486              	.LCFI104:
 25487              		.cfi_def_cfa_offset 16
 25488 0b1c 00AF     		add	r7, sp, #0
 25489              		.cfi_offset 7, -4
 25490              	.LCFI105:
 25491              		.cfi_def_cfa_register 7
 25492 0b1e 7860     		str	r0, [r7, #4]
 25493 0b20 0B46     		mov	r3, r1
 25494 0b22 FB70     		strb	r3, [r7, #3]
1492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25495              		.loc 1 1495 0
 25496 0b24 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25497 0b26 002B     		cmp	r3, #0
 25498 0b28 0DD0     		beq	.L76
1496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 25499              		.loc 1 1497 0
 25500 0b2a 4FF46053 		mov	r3, #14336
 25501 0b2e C4F20203 		movt	r3, 16386
 25502 0b32 4FF46052 		mov	r2, #14336
 25503 0b36 C4F20202 		movt	r2, 16386
 25504 0b3a 516D     		ldr	r1, [r2, #84]
 25505 0b3c 7A68     		ldr	r2, [r7, #4]
 25506 0b3e 41EA0202 		orr	r2, r1, r2
 25507 0b42 5A65     		str	r2, [r3, #84]
 25508 0b44 0EE0     		b	.L75
 25509              	.L76:
1498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 25510              		.loc 1 1501 0
 25511 0b46 4FF46053 		mov	r3, #14336
 25512 0b4a C4F20203 		movt	r3, 16386
 25513 0b4e 4FF46052 		mov	r2, #14336
 25514 0b52 C4F20202 		movt	r2, 16386
 25515 0b56 516D     		ldr	r1, [r2, #84]
 25516 0b58 7A68     		ldr	r2, [r7, #4]
 25517 0b5a 6FEA0202 		mvn	r2, r2
 25518 0b5e 01EA0202 		and	r2, r1, r2
 25519 0b62 5A65     		str	r2, [r3, #84]
 25520              	.L75:
1502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25521              		.loc 1 1503 0
 25522 0b64 07F10C07 		add	r7, r7, #12
 25523 0b68 BD46     		mov	sp, r7
 25524 0b6a 80BC     		pop	{r7}
 25525 0b6c 7047     		bx	lr
 25526              		.cfi_endproc
 25527              	.LFE64:
 25529 0b6e 00BF     		.align	2
 25530              		.global	RCC_AHB3PeriphClockLPModeCmd
 25531              		.thumb
 25532              		.thumb_func
 25534              	RCC_AHB3PeriphClockLPModeCmd:
 25535              	.LFB65:
1504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         power consumption.
1509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25536              		.loc 1 1518 0
 25537              		.cfi_startproc
 25538              		@ args = 0, pretend = 0, frame = 8
 25539              		@ frame_needed = 1, uses_anonymous_args = 0
 25540              		@ link register save eliminated.
 25541 0b70 80B4     		push	{r7}
 25542              	.LCFI106:
 25543              		.cfi_def_cfa_offset 4
 25544 0b72 83B0     		sub	sp, sp, #12
 25545              	.LCFI107:
 25546              		.cfi_def_cfa_offset 16
 25547 0b74 00AF     		add	r7, sp, #0
 25548              		.cfi_offset 7, -4
 25549              	.LCFI108:
 25550              		.cfi_def_cfa_register 7
 25551 0b76 7860     		str	r0, [r7, #4]
 25552 0b78 0B46     		mov	r3, r1
 25553 0b7a FB70     		strb	r3, [r7, #3]
1519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25554              		.loc 1 1522 0
 25555 0b7c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25556 0b7e 002B     		cmp	r3, #0
 25557 0b80 0DD0     		beq	.L79
1523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 25558              		.loc 1 1524 0
 25559 0b82 4FF46053 		mov	r3, #14336
 25560 0b86 C4F20203 		movt	r3, 16386
 25561 0b8a 4FF46052 		mov	r2, #14336
 25562 0b8e C4F20202 		movt	r2, 16386
 25563 0b92 916D     		ldr	r1, [r2, #88]
 25564 0b94 7A68     		ldr	r2, [r7, #4]
 25565 0b96 41EA0202 		orr	r2, r1, r2
 25566 0b9a 9A65     		str	r2, [r3, #88]
 25567 0b9c 0EE0     		b	.L78
 25568              	.L79:
1525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 25569              		.loc 1 1528 0
 25570 0b9e 4FF46053 		mov	r3, #14336
 25571 0ba2 C4F20203 		movt	r3, 16386
 25572 0ba6 4FF46052 		mov	r2, #14336
 25573 0baa C4F20202 		movt	r2, 16386
 25574 0bae 916D     		ldr	r1, [r2, #88]
 25575 0bb0 7A68     		ldr	r2, [r7, #4]
 25576 0bb2 6FEA0202 		mvn	r2, r2
 25577 0bb6 01EA0202 		and	r2, r1, r2
 25578 0bba 9A65     		str	r2, [r3, #88]
 25579              	.L78:
1529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25580              		.loc 1 1530 0
 25581 0bbc 07F10C07 		add	r7, r7, #12
 25582 0bc0 BD46     		mov	sp, r7
 25583 0bc2 80BC     		pop	{r7}
 25584 0bc4 7047     		bx	lr
 25585              		.cfi_endproc
 25586              	.LFE65:
 25588 0bc6 00BF     		.align	2
 25589              		.global	RCC_APB1PeriphClockLPModeCmd
 25590              		.thumb
 25591              		.thumb_func
 25593              	RCC_APB1PeriphClockLPModeCmd:
 25594              	.LFB66:
1531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         power consumption.
1536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25595              		.loc 1 1568 0
 25596              		.cfi_startproc
 25597              		@ args = 0, pretend = 0, frame = 8
 25598              		@ frame_needed = 1, uses_anonymous_args = 0
 25599              		@ link register save eliminated.
 25600 0bc8 80B4     		push	{r7}
 25601              	.LCFI109:
 25602              		.cfi_def_cfa_offset 4
 25603 0bca 83B0     		sub	sp, sp, #12
 25604              	.LCFI110:
 25605              		.cfi_def_cfa_offset 16
 25606 0bcc 00AF     		add	r7, sp, #0
 25607              		.cfi_offset 7, -4
 25608              	.LCFI111:
 25609              		.cfi_def_cfa_register 7
 25610 0bce 7860     		str	r0, [r7, #4]
 25611 0bd0 0B46     		mov	r3, r1
 25612 0bd2 FB70     		strb	r3, [r7, #3]
1569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25613              		.loc 1 1572 0
 25614 0bd4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25615 0bd6 002B     		cmp	r3, #0
 25616 0bd8 0DD0     		beq	.L82
1573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 25617              		.loc 1 1574 0
 25618 0bda 4FF46053 		mov	r3, #14336
 25619 0bde C4F20203 		movt	r3, 16386
 25620 0be2 4FF46052 		mov	r2, #14336
 25621 0be6 C4F20202 		movt	r2, 16386
 25622 0bea 116E     		ldr	r1, [r2, #96]
 25623 0bec 7A68     		ldr	r2, [r7, #4]
 25624 0bee 41EA0202 		orr	r2, r1, r2
 25625 0bf2 1A66     		str	r2, [r3, #96]
 25626 0bf4 0EE0     		b	.L81
 25627              	.L82:
1575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 25628              		.loc 1 1578 0
 25629 0bf6 4FF46053 		mov	r3, #14336
 25630 0bfa C4F20203 		movt	r3, 16386
 25631 0bfe 4FF46052 		mov	r2, #14336
 25632 0c02 C4F20202 		movt	r2, 16386
 25633 0c06 116E     		ldr	r1, [r2, #96]
 25634 0c08 7A68     		ldr	r2, [r7, #4]
 25635 0c0a 6FEA0202 		mvn	r2, r2
 25636 0c0e 01EA0202 		and	r2, r1, r2
 25637 0c12 1A66     		str	r2, [r3, #96]
 25638              	.L81:
1579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25639              		.loc 1 1580 0
 25640 0c14 07F10C07 		add	r7, r7, #12
 25641 0c18 BD46     		mov	sp, r7
 25642 0c1a 80BC     		pop	{r7}
 25643 0c1c 7047     		bx	lr
 25644              		.cfi_endproc
 25645              	.LFE66:
 25647 0c1e 00BF     		.align	2
 25648              		.global	RCC_APB2PeriphClockLPModeCmd
 25649              		.thumb
 25650              		.thumb_func
 25652              	RCC_APB2PeriphClockLPModeCmd:
 25653              	.LFB67:
1581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         power consumption.
1586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25654              		.loc 1 1608 0
 25655              		.cfi_startproc
 25656              		@ args = 0, pretend = 0, frame = 8
 25657              		@ frame_needed = 1, uses_anonymous_args = 0
 25658              		@ link register save eliminated.
 25659 0c20 80B4     		push	{r7}
 25660              	.LCFI112:
 25661              		.cfi_def_cfa_offset 4
 25662 0c22 83B0     		sub	sp, sp, #12
 25663              	.LCFI113:
 25664              		.cfi_def_cfa_offset 16
 25665 0c24 00AF     		add	r7, sp, #0
 25666              		.cfi_offset 7, -4
 25667              	.LCFI114:
 25668              		.cfi_def_cfa_register 7
 25669 0c26 7860     		str	r0, [r7, #4]
 25670 0c28 0B46     		mov	r3, r1
 25671 0c2a FB70     		strb	r3, [r7, #3]
1609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25672              		.loc 1 1612 0
 25673 0c2c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25674 0c2e 002B     		cmp	r3, #0
 25675 0c30 0DD0     		beq	.L85
1613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 25676              		.loc 1 1614 0
 25677 0c32 4FF46053 		mov	r3, #14336
 25678 0c36 C4F20203 		movt	r3, 16386
 25679 0c3a 4FF46052 		mov	r2, #14336
 25680 0c3e C4F20202 		movt	r2, 16386
 25681 0c42 516E     		ldr	r1, [r2, #100]
 25682 0c44 7A68     		ldr	r2, [r7, #4]
 25683 0c46 41EA0202 		orr	r2, r1, r2
 25684 0c4a 5A66     		str	r2, [r3, #100]
 25685 0c4c 0EE0     		b	.L84
 25686              	.L85:
1615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 25687              		.loc 1 1618 0
 25688 0c4e 4FF46053 		mov	r3, #14336
 25689 0c52 C4F20203 		movt	r3, 16386
 25690 0c56 4FF46052 		mov	r2, #14336
 25691 0c5a C4F20202 		movt	r2, 16386
 25692 0c5e 516E     		ldr	r1, [r2, #100]
 25693 0c60 7A68     		ldr	r2, [r7, #4]
 25694 0c62 6FEA0202 		mvn	r2, r2
 25695 0c66 01EA0202 		and	r2, r1, r2
 25696 0c6a 5A66     		str	r2, [r3, #100]
 25697              	.L84:
1619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25698              		.loc 1 1620 0
 25699 0c6c 07F10C07 		add	r7, r7, #12
 25700 0c70 BD46     		mov	sp, r7
 25701 0c72 80BC     		pop	{r7}
 25702 0c74 7047     		bx	lr
 25703              		.cfi_endproc
 25704              	.LFE67:
 25706 0c76 00BF     		.align	2
 25707              		.global	RCC_ITConfig
 25708              		.thumb
 25709              		.thumb_func
 25711              	RCC_ITConfig:
 25712              	.LFB68:
1621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @}
1624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *
1629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @verbatim   
1630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================
1631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****                    Interrupts and flags management functions
1632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================  
1633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @endverbatim
1635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
1636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25713              		.loc 1 1653 0
 25714              		.cfi_startproc
 25715              		@ args = 0, pretend = 0, frame = 8
 25716              		@ frame_needed = 1, uses_anonymous_args = 0
 25717              		@ link register save eliminated.
 25718 0c78 80B4     		push	{r7}
 25719              	.LCFI115:
 25720              		.cfi_def_cfa_offset 4
 25721 0c7a 83B0     		sub	sp, sp, #12
 25722              	.LCFI116:
 25723              		.cfi_def_cfa_offset 16
 25724 0c7c 00AF     		add	r7, sp, #0
 25725              		.cfi_offset 7, -4
 25726              	.LCFI117:
 25727              		.cfi_def_cfa_register 7
 25728 0c7e 0246     		mov	r2, r0
 25729 0c80 0B46     		mov	r3, r1
 25730 0c82 FA71     		strb	r2, [r7, #7]
 25731 0c84 BB71     		strb	r3, [r7, #6]
1654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 25732              		.loc 1 1657 0
 25733 0c86 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25734 0c88 002B     		cmp	r3, #0
 25735 0c8a 0FD0     		beq	.L88
1658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 25736              		.loc 1 1660 0
 25737 0c8c 43F60D03 		movw	r3, #14349
 25738 0c90 C4F20203 		movt	r3, 16386
 25739 0c94 43F60D02 		movw	r2, #14349
 25740 0c98 C4F20202 		movt	r2, 16386
 25741 0c9c 1278     		ldrb	r2, [r2, #0]
 25742 0c9e D1B2     		uxtb	r1, r2
 25743 0ca0 FA79     		ldrb	r2, [r7, #7]
 25744 0ca2 41EA0202 		orr	r2, r1, r2
 25745 0ca6 D2B2     		uxtb	r2, r2
 25746 0ca8 1A70     		strb	r2, [r3, #0]
 25747 0caa 11E0     		b	.L87
 25748              	.L88:
1661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 25749              		.loc 1 1665 0
 25750 0cac 43F60D03 		movw	r3, #14349
 25751 0cb0 C4F20203 		movt	r3, 16386
 25752 0cb4 43F60D02 		movw	r2, #14349
 25753 0cb8 C4F20202 		movt	r2, 16386
 25754 0cbc 1278     		ldrb	r2, [r2, #0]
 25755 0cbe D1B2     		uxtb	r1, r2
 25756 0cc0 FA79     		ldrb	r2, [r7, #7]
 25757 0cc2 6FEA0202 		mvn	r2, r2
 25758 0cc6 D2B2     		uxtb	r2, r2
 25759 0cc8 01EA0202 		and	r2, r1, r2
 25760 0ccc D2B2     		uxtb	r2, r2
 25761 0cce 1A70     		strb	r2, [r3, #0]
 25762              	.L87:
1666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25763              		.loc 1 1667 0
 25764 0cd0 07F10C07 		add	r7, r7, #12
 25765 0cd4 BD46     		mov	sp, r7
 25766 0cd6 80BC     		pop	{r7}
 25767 0cd8 7047     		bx	lr
 25768              		.cfi_endproc
 25769              	.LFE68:
 25771 0cda 00BF     		.align	2
 25772              		.global	RCC_GetFlagStatus
 25773              		.thumb
 25774              		.thumb_func
 25776              	RCC_GetFlagStatus:
 25777              	.LFB69:
1668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
1673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25778              		.loc 1 1689 0
 25779              		.cfi_startproc
 25780              		@ args = 0, pretend = 0, frame = 24
 25781              		@ frame_needed = 1, uses_anonymous_args = 0
 25782              		@ link register save eliminated.
 25783 0cdc 80B4     		push	{r7}
 25784              	.LCFI118:
 25785              		.cfi_def_cfa_offset 4
 25786 0cde 87B0     		sub	sp, sp, #28
 25787              	.LCFI119:
 25788              		.cfi_def_cfa_offset 32
 25789 0ce0 00AF     		add	r7, sp, #0
 25790              		.cfi_offset 7, -4
 25791              	.LCFI120:
 25792              		.cfi_def_cfa_register 7
 25793 0ce2 0346     		mov	r3, r0
 25794 0ce4 FB71     		strb	r3, [r7, #7]
1690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmp = 0;
 25795              		.loc 1 1690 0
 25796 0ce6 4FF00003 		mov	r3, #0
 25797 0cea FB60     		str	r3, [r7, #12]
1691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t statusreg = 0;
 25798              		.loc 1 1691 0
 25799 0cec 4FF00003 		mov	r3, #0
 25800 0cf0 7B61     		str	r3, [r7, #20]
1692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   FlagStatus bitstatus = RESET;
 25801              		.loc 1 1692 0
 25802 0cf2 4FF00003 		mov	r3, #0
 25803 0cf6 FB74     		strb	r3, [r7, #19]
1693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get the RCC register index */
1698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 25804              		.loc 1 1698 0
 25805 0cf8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25806 0cfa 4FEA5313 		lsr	r3, r3, #5
 25807 0cfe DBB2     		uxtb	r3, r3
 25808 0d00 FB60     		str	r3, [r7, #12]
1699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 25809              		.loc 1 1699 0
 25810 0d02 FB68     		ldr	r3, [r7, #12]
 25811 0d04 012B     		cmp	r3, #1
 25812 0d06 06D1     		bne	.L91
1700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     statusreg = RCC->CR;
 25813              		.loc 1 1701 0
 25814 0d08 4FF46053 		mov	r3, #14336
 25815 0d0c C4F20203 		movt	r3, 16386
 25816 0d10 1B68     		ldr	r3, [r3, #0]
 25817 0d12 7B61     		str	r3, [r7, #20]
 25818 0d14 0FE0     		b	.L92
 25819              	.L91:
1702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 25820              		.loc 1 1703 0
 25821 0d16 FB68     		ldr	r3, [r7, #12]
 25822 0d18 022B     		cmp	r3, #2
 25823 0d1a 06D1     		bne	.L93
1704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     statusreg = RCC->BDCR;
 25824              		.loc 1 1705 0
 25825 0d1c 4FF46053 		mov	r3, #14336
 25826 0d20 C4F20203 		movt	r3, 16386
 25827 0d24 1B6F     		ldr	r3, [r3, #112]
 25828 0d26 7B61     		str	r3, [r7, #20]
 25829 0d28 05E0     		b	.L92
 25830              	.L93:
1706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     statusreg = RCC->CSR;
 25831              		.loc 1 1709 0
 25832 0d2a 4FF46053 		mov	r3, #14336
 25833 0d2e C4F20203 		movt	r3, 16386
 25834 0d32 5B6F     		ldr	r3, [r3, #116]
 25835 0d34 7B61     		str	r3, [r7, #20]
 25836              	.L92:
1710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get the flag position */
1713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 25837              		.loc 1 1713 0
 25838 0d36 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25839 0d38 03F01F03 		and	r3, r3, #31
 25840 0d3c FB60     		str	r3, [r7, #12]
1714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 25841              		.loc 1 1714 0
 25842 0d3e FB68     		ldr	r3, [r7, #12]
 25843 0d40 7A69     		ldr	r2, [r7, #20]
 25844 0d42 22FA03F3 		lsr	r3, r2, r3
 25845 0d46 03F00103 		and	r3, r3, #1
 25846 0d4a DBB2     		uxtb	r3, r3
 25847 0d4c 002B     		cmp	r3, #0
 25848 0d4e 03D0     		beq	.L94
1715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     bitstatus = SET;
 25849              		.loc 1 1716 0
 25850 0d50 4FF00103 		mov	r3, #1
 25851 0d54 FB74     		strb	r3, [r7, #19]
 25852 0d56 02E0     		b	.L95
 25853              	.L94:
1717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     bitstatus = RESET;
 25854              		.loc 1 1720 0
 25855 0d58 4FF00003 		mov	r3, #0
 25856 0d5c FB74     		strb	r3, [r7, #19]
 25857              	.L95:
1721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Return the flag status */
1723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   return bitstatus;
 25858              		.loc 1 1723 0
 25859 0d5e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25860              		.loc 1 1724 0
 25861 0d60 1846     		mov	r0, r3
 25862 0d62 07F11C07 		add	r7, r7, #28
 25863 0d66 BD46     		mov	sp, r7
 25864 0d68 80BC     		pop	{r7}
 25865 0d6a 7047     		bx	lr
 25866              		.cfi_endproc
 25867              	.LFE69:
 25869              		.align	2
 25870              		.global	RCC_ClearFlag
 25871              		.thumb
 25872              		.thumb_func
 25874              	RCC_ClearFlag:
 25875              	.LFB70:
1725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  None
1731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_ClearFlag(void)
1734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25876              		.loc 1 1734 0
 25877              		.cfi_startproc
 25878              		@ args = 0, pretend = 0, frame = 0
 25879              		@ frame_needed = 1, uses_anonymous_args = 0
 25880              		@ link register save eliminated.
 25881 0d6c 80B4     		push	{r7}
 25882              	.LCFI121:
 25883              		.cfi_def_cfa_offset 4
 25884 0d6e 00AF     		add	r7, sp, #0
 25885              		.cfi_offset 7, -4
 25886              	.LCFI122:
 25887              		.cfi_def_cfa_register 7
1735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 25888              		.loc 1 1736 0
 25889 0d70 4FF46053 		mov	r3, #14336
 25890 0d74 C4F20203 		movt	r3, 16386
 25891 0d78 4FF46052 		mov	r2, #14336
 25892 0d7c C4F20202 		movt	r2, 16386
 25893 0d80 526F     		ldr	r2, [r2, #116]
 25894 0d82 42F08072 		orr	r2, r2, #16777216
 25895 0d86 5A67     		str	r2, [r3, #116]
1737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25896              		.loc 1 1737 0
 25897 0d88 BD46     		mov	sp, r7
 25898 0d8a 80BC     		pop	{r7}
 25899 0d8c 7047     		bx	lr
 25900              		.cfi_endproc
 25901              	.LFE70:
 25903 0d8e 00BF     		.align	2
 25904              		.global	RCC_GetITStatus
 25905              		.thumb
 25906              		.thumb_func
 25908              	RCC_GetITStatus:
 25909              	.LFB71:
1738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
1743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25910              		.loc 1 1753 0
 25911              		.cfi_startproc
 25912              		@ args = 0, pretend = 0, frame = 16
 25913              		@ frame_needed = 1, uses_anonymous_args = 0
 25914              		@ link register save eliminated.
 25915 0d90 80B4     		push	{r7}
 25916              	.LCFI123:
 25917              		.cfi_def_cfa_offset 4
 25918 0d92 85B0     		sub	sp, sp, #20
 25919              	.LCFI124:
 25920              		.cfi_def_cfa_offset 24
 25921 0d94 00AF     		add	r7, sp, #0
 25922              		.cfi_offset 7, -4
 25923              	.LCFI125:
 25924              		.cfi_def_cfa_register 7
 25925 0d96 0346     		mov	r3, r0
 25926 0d98 FB71     		strb	r3, [r7, #7]
1754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ITStatus bitstatus = RESET;
 25927              		.loc 1 1754 0
 25928 0d9a 4FF00003 		mov	r3, #0
 25929 0d9e FB73     		strb	r3, [r7, #15]
1755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 25930              		.loc 1 1760 0
 25931 0da0 4FF46053 		mov	r3, #14336
 25932 0da4 C4F20203 		movt	r3, 16386
 25933 0da8 DA68     		ldr	r2, [r3, #12]
 25934 0daa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25935 0dac 02EA0303 		and	r3, r2, r3
 25936 0db0 002B     		cmp	r3, #0
 25937 0db2 03D0     		beq	.L98
1761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     bitstatus = SET;
 25938              		.loc 1 1762 0
 25939 0db4 4FF00103 		mov	r3, #1
 25940 0db8 FB73     		strb	r3, [r7, #15]
 25941 0dba 02E0     		b	.L99
 25942              	.L98:
1763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     bitstatus = RESET;
 25943              		.loc 1 1766 0
 25944 0dbc 4FF00003 		mov	r3, #0
 25945 0dc0 FB73     		strb	r3, [r7, #15]
 25946              	.L99:
1767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Return the RCC_IT status */
1769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   return  bitstatus;
 25947              		.loc 1 1769 0
 25948 0dc2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25949              		.loc 1 1770 0
 25950 0dc4 1846     		mov	r0, r3
 25951 0dc6 07F11407 		add	r7, r7, #20
 25952 0dca BD46     		mov	sp, r7
 25953 0dcc 80BC     		pop	{r7}
 25954 0dce 7047     		bx	lr
 25955              		.cfi_endproc
 25956              	.LFE71:
 25958              		.align	2
 25959              		.global	RCC_ClearITPendingBit
 25960              		.thumb
 25961              		.thumb_func
 25963              	RCC_ClearITPendingBit:
 25964              	.LFB72:
1771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 25965              		.loc 1 1786 0
 25966              		.cfi_startproc
 25967              		@ args = 0, pretend = 0, frame = 8
 25968              		@ frame_needed = 1, uses_anonymous_args = 0
 25969              		@ link register save eliminated.
 25970 0dd0 80B4     		push	{r7}
 25971              	.LCFI126:
 25972              		.cfi_def_cfa_offset 4
 25973 0dd2 83B0     		sub	sp, sp, #12
 25974              	.LCFI127:
 25975              		.cfi_def_cfa_offset 16
 25976 0dd4 00AF     		add	r7, sp, #0
 25977              		.cfi_offset 7, -4
 25978              	.LCFI128:
 25979              		.cfi_def_cfa_register 7
 25980 0dd6 0346     		mov	r3, r0
 25981 0dd8 FB71     		strb	r3, [r7, #7]
1787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      pending bits */
1792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 25982              		.loc 1 1792 0
 25983 0dda 43F60E03 		movw	r3, #14350
 25984 0dde C4F20203 		movt	r3, 16386
 25985 0de2 FA79     		ldrb	r2, [r7, #7]
 25986 0de4 1A70     		strb	r2, [r3, #0]
1793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 25987              		.loc 1 1793 0
 25988 0de6 07F10C07 		add	r7, r7, #12
 25989 0dea BD46     		mov	sp, r7
 25990 0dec 80BC     		pop	{r7}
 25991 0dee 7047     		bx	lr
 25992              		.cfi_endproc
 25993              	.LFE72:
 25995              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_rcc.c
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23452  .data:00000000 $d
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23455  .data:00000000 APBAHBPrescTable
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23473  .text:00000000 $t
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23478  .text:00000000 RCC_DeInit
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23545  .text:00000084 RCC_HSEConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23587  .text:000000b4 RCC_WaitForHSEStartUp
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25776  .text:00000cdc RCC_GetFlagStatus
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23661  .text:00000118 RCC_AdjustHSICalibrationValue
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23716  .text:00000160 RCC_HSICmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23753  .text:00000180 RCC_LSEConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23820  .text:000001dc RCC_LSICmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23857  .text:000001fc RCC_PLLConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23911  .text:0000024c RCC_PLLCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23948  .text:0000026c RCC_PLLI2SConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:23989  .text:0000029c RCC_PLLI2SCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24026  .text:000002bc RCC_ClockSecuritySystemCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24063  .text:000002dc RCC_MCO1Config
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24119  .text:00000328 RCC_MCO2Config
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24175  .text:00000374 RCC_SYSCLKConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24228  .text:000003b8 RCC_GetSYSCLKSource
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24262  .text:000003d8 RCC_HCLKConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24315  .text:0000041c RCC_PCLK1Config
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24368  .text:00000460 RCC_PCLK2Config
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24422  .text:000004a8 RCC_GetClocksFreq
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24644  .text:00000678 RCC_RTCCLKConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24716  .text:000006f0 RCC_RTCCLKCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24753  .text:00000710 RCC_BackupResetCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24790  .text:00000730 RCC_I2SCLKConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24826  .text:00000750 RCC_AHB1PeriphClockCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24885  .text:000007a8 RCC_AHB2PeriphClockCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:24944  .text:00000800 RCC_AHB3PeriphClockCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25003  .text:00000858 RCC_APB1PeriphClockCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25062  .text:000008b0 RCC_APB2PeriphClockCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25121  .text:00000908 RCC_AHB1PeriphResetCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25180  .text:00000960 RCC_AHB2PeriphResetCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25239  .text:000009b8 RCC_AHB3PeriphResetCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25298  .text:00000a10 RCC_APB1PeriphResetCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25357  .text:00000a68 RCC_APB2PeriphResetCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25416  .text:00000ac0 RCC_AHB1PeriphClockLPModeCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25475  .text:00000b18 RCC_AHB2PeriphClockLPModeCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25534  .text:00000b70 RCC_AHB3PeriphClockLPModeCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25593  .text:00000bc8 RCC_APB1PeriphClockLPModeCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25652  .text:00000c20 RCC_APB2PeriphClockLPModeCmd
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25711  .text:00000c78 RCC_ITConfig
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25874  .text:00000d6c RCC_ClearFlag
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25908  .text:00000d90 RCC_GetITStatus
C:\Users\red4sch\AppData\Local\Temp\ccNEPQoo.s:25963  .text:00000dd0 RCC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
