   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_adc.c"
  23              	.Ltext0:
  24              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c"
 23418              		.align	2
 23419              		.global	ADC_DeInit
 23420              		.thumb
 23421              		.thumb_func
 23423              	ADC_DeInit:
 23424              	.LFB29:
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @file    stm32f2xx_adc.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *             selection)
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - Analog Watchdog configuration
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *             management 
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - Regular Channels Configuration
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - Injected channels Configuration
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - Interrupts and flags management
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *  @verbatim
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          ===================================================================
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *                                   How to use this driver
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          ===================================================================
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *     
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          2. ADC pins configuration
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          Regular channels group configuration
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          ====================================    
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              function.
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              function.
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          ===============================================
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              functions.        
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          ====================================================== 
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *             ADC_DMACmd() function.
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *             function.
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          Injected channels group configuration
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          =====================================    
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              functions.
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              function.
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              function.        
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *              function.
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *  @endverbatim
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ******************************************************************************
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @attention
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ******************************************************************************  
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */ 
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #include "stm32f2xx_adc.h"
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #include "stm32f2xx_rcc.h"
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC 
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief ADC driver modules
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */ 
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC DISCNUM mask */
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC AWDCH mask */
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* CR1 register Mask */
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC EXTEN mask */
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC JEXTEN mask */
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC JEXTSEL mask */
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* CR2 register Mask */
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC SQx mask */
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC L Mask */
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC JSQx mask */
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC JL mask */
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC SMPx mask */
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC JDRx registers offset */
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC CDR register base address */
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* ADC CCR register Mask */
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */ 
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @verbatim    
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                       Initialization and Configuration functions
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================  
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   This section provides functions allowing to:
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      regular group
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - Converted data alignment (left or right)
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      regular channel group
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - Multi ADC mode selection
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    - Enable or disable the ADC peripheral
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @endverbatim
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         values.
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  None
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_DeInit(void)
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23425              		.loc 1 207 0
 23426              		.cfi_startproc
 23427              		@ args = 0, pretend = 0, frame = 0
 23428              		@ frame_needed = 1, uses_anonymous_args = 0
 23429 0000 80B5     		push	{r7, lr}
 23430              	.LCFI0:
 23431              		.cfi_def_cfa_offset 8
 23432 0002 00AF     		add	r7, sp, #0
 23433              		.cfi_offset 14, -4
 23434              		.cfi_offset 7, -8
 23435              	.LCFI1:
 23436              		.cfi_def_cfa_register 7
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Enable all ADCs reset state */
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 23437              		.loc 1 209 0
 23438 0004 4FF48070 		mov	r0, #256
 23439 0008 4FF00101 		mov	r1, #1
 23440 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Release all ADCs from reset state */
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 23441              		.loc 1 212 0
 23442 0010 4FF48070 		mov	r0, #256
 23443 0014 4FF00001 		mov	r1, #0
 23444 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23445              		.loc 1 213 0
 23446 001c BD46     		mov	sp, r7
 23447 001e 80BD     		pop	{r7, pc}
 23448              		.cfi_endproc
 23449              	.LFE29:
 23451              		.align	2
 23452              		.global	ADC_Init
 23453              		.thumb
 23454              		.thumb_func
 23456              	ADC_Init:
 23457              	.LFB30:
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         in the ADC_InitStruct.
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23458              		.loc 1 229 0
 23459              		.cfi_startproc
 23460              		@ args = 0, pretend = 0, frame = 16
 23461              		@ frame_needed = 1, uses_anonymous_args = 0
 23462              		@ link register save eliminated.
 23463 0020 80B4     		push	{r7}
 23464              	.LCFI2:
 23465              		.cfi_def_cfa_offset 4
 23466 0022 85B0     		sub	sp, sp, #20
 23467              	.LCFI3:
 23468              		.cfi_def_cfa_offset 24
 23469 0024 00AF     		add	r7, sp, #0
 23470              		.cfi_offset 7, -4
 23471              	.LCFI4:
 23472              		.cfi_def_cfa_register 7
 23473 0026 7860     		str	r0, [r7, #4]
 23474 0028 3960     		str	r1, [r7, #0]
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0;
 23475              		.loc 1 230 0
 23476 002a 4FF00003 		mov	r3, #0
 23477 002e FB60     		str	r3, [r7, #12]
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint8_t tmpreg2 = 0;
 23478              		.loc 1 231 0
 23479 0030 4FF00003 		mov	r3, #0
 23480 0034 FB72     		strb	r3, [r7, #11]
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the ADCx CR1 value */
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 = ADCx->CR1;
 23481              		.loc 1 244 0
 23482 0036 7B68     		ldr	r3, [r7, #4]
 23483 0038 5B68     		ldr	r3, [r3, #4]
 23484 003a FB60     		str	r3, [r7, #12]
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear RES and SCAN bits */
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
 23485              		.loc 1 247 0
 23486 003c FB68     		ldr	r3, [r7, #12]
 23487 003e 23F04073 		bic	r3, r3, #50331648
 23488 0042 23F48073 		bic	r3, r3, #256
 23489 0046 FB60     		str	r3, [r7, #12]
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 23490              		.loc 1 252 0
 23491 0048 3B68     		ldr	r3, [r7, #0]
 23492 004a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 23493 004c 4FEA0322 		lsl	r2, r3, #8
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 23494              		.loc 1 253 0
 23495 0050 3B68     		ldr	r3, [r7, #0]
 23496 0052 1B68     		ldr	r3, [r3, #0]
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 23497              		.loc 1 252 0
 23498 0054 42EA0303 		orr	r3, r2, r3
 23499 0058 FA68     		ldr	r2, [r7, #12]
 23500 005a 42EA0303 		orr	r3, r2, r3
 23501 005e FB60     		str	r3, [r7, #12]
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Write to ADCx CR1 */
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR1 = tmpreg1;
 23502              		.loc 1 255 0
 23503 0060 7B68     		ldr	r3, [r7, #4]
 23504 0062 FA68     		ldr	r2, [r7, #12]
 23505 0064 5A60     		str	r2, [r3, #4]
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the ADCx CR2 value */
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 = ADCx->CR2;
 23506              		.loc 1 258 0
 23507 0066 7B68     		ldr	r3, [r7, #4]
 23508 0068 9B68     		ldr	r3, [r3, #8]
 23509 006a FB60     		str	r3, [r7, #12]
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 23510              		.loc 1 261 0
 23511 006c FA68     		ldr	r2, [r7, #12]
 23512 006e 4FF2FD73 		movw	r3, #63485
 23513 0072 CCF2FF03 		movt	r3, 49407
 23514 0076 02EA0303 		and	r3, r2, r3
 23515 007a FB60     		str	r3, [r7, #12]
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      continuous conversion mode */
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 23516              		.loc 1 269 0
 23517 007c 3B68     		ldr	r3, [r7, #0]
 23518 007e 1A69     		ldr	r2, [r3, #16]
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 23519              		.loc 1 270 0
 23520 0080 3B68     		ldr	r3, [r7, #0]
 23521 0082 DB68     		ldr	r3, [r3, #12]
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 23522              		.loc 1 269 0
 23523 0084 42EA0302 		orr	r2, r2, r3
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 23524              		.loc 1 271 0
 23525 0088 3B68     		ldr	r3, [r7, #0]
 23526 008a 9B68     		ldr	r3, [r3, #8]
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 23527              		.loc 1 270 0
 23528 008c 42EA0302 		orr	r2, r2, r3
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 23529              		.loc 1 272 0
 23530 0090 3B68     		ldr	r3, [r7, #0]
 23531 0092 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 23532 0094 4FEA4303 		lsl	r3, r3, #1
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 23533              		.loc 1 269 0
 23534 0098 42EA0303 		orr	r3, r2, r3
 23535 009c FA68     		ldr	r2, [r7, #12]
 23536 009e 42EA0303 		orr	r3, r2, r3
 23537 00a2 FB60     		str	r3, [r7, #12]
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Write to ADCx CR2 */
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR2 = tmpreg1;
 23538              		.loc 1 275 0
 23539 00a4 7B68     		ldr	r3, [r7, #4]
 23540 00a6 FA68     		ldr	r2, [r7, #12]
 23541 00a8 9A60     		str	r2, [r3, #8]
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 23542              		.loc 1 278 0
 23543 00aa 7B68     		ldr	r3, [r7, #4]
 23544 00ac DB6A     		ldr	r3, [r3, #44]
 23545 00ae FB60     		str	r3, [r7, #12]
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear L bits */
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 23546              		.loc 1 281 0
 23547 00b0 FB68     		ldr	r3, [r7, #12]
 23548 00b2 23F47003 		bic	r3, r3, #15728640
 23549 00b6 FB60     		str	r3, [r7, #12]
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 23550              		.loc 1 285 0
 23551 00b8 3B68     		ldr	r3, [r7, #0]
 23552 00ba 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 23553 00bc 03F1FF33 		add	r3, r3, #-1
 23554 00c0 DAB2     		uxtb	r2, r3
 23555 00c2 FB7A     		ldrb	r3, [r7, #11]
 23556 00c4 42EA0303 		orr	r3, r2, r3
 23557 00c8 FB72     		strb	r3, [r7, #11]
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 23558              		.loc 1 286 0
 23559 00ca FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 23560 00cc 4FEA0353 		lsl	r3, r3, #20
 23561 00d0 FA68     		ldr	r2, [r7, #12]
 23562 00d2 42EA0303 		orr	r3, r2, r3
 23563 00d6 FB60     		str	r3, [r7, #12]
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Write to ADCx SQR1 */
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 23564              		.loc 1 289 0
 23565 00d8 7B68     		ldr	r3, [r7, #4]
 23566 00da FA68     		ldr	r2, [r7, #12]
 23567 00dc DA62     		str	r2, [r3, #44]
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23568              		.loc 1 290 0
 23569 00de 07F11407 		add	r7, r7, #20
 23570 00e2 BD46     		mov	sp, r7
 23571 00e4 80BC     		pop	{r7}
 23572 00e6 7047     		bx	lr
 23573              		.cfi_endproc
 23574              	.LFE30:
 23576              		.align	2
 23577              		.global	ADC_StructInit
 23578              		.thumb
 23579              		.thumb_func
 23581              	ADC_StructInit:
 23582              	.LFB31:
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         be initialized.
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23583              		.loc 1 304 0
 23584              		.cfi_startproc
 23585              		@ args = 0, pretend = 0, frame = 8
 23586              		@ frame_needed = 1, uses_anonymous_args = 0
 23587              		@ link register save eliminated.
 23588 00e8 80B4     		push	{r7}
 23589              	.LCFI5:
 23590              		.cfi_def_cfa_offset 4
 23591 00ea 83B0     		sub	sp, sp, #12
 23592              	.LCFI6:
 23593              		.cfi_def_cfa_offset 16
 23594 00ec 00AF     		add	r7, sp, #0
 23595              		.cfi_offset 7, -4
 23596              	.LCFI7:
 23597              		.cfi_def_cfa_register 7
 23598 00ee 7860     		str	r0, [r7, #4]
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 23599              		.loc 1 306 0
 23600 00f0 7B68     		ldr	r3, [r7, #4]
 23601 00f2 4FF00002 		mov	r2, #0
 23602 00f6 1A60     		str	r2, [r3, #0]
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 23603              		.loc 1 309 0
 23604 00f8 7B68     		ldr	r3, [r7, #4]
 23605 00fa 4FF00002 		mov	r2, #0
 23606 00fe 1A71     		strb	r2, [r3, #4]
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 23607              		.loc 1 312 0
 23608 0100 7B68     		ldr	r3, [r7, #4]
 23609 0102 4FF00002 		mov	r2, #0
 23610 0106 5A71     		strb	r2, [r3, #5]
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 23611              		.loc 1 315 0
 23612 0108 7B68     		ldr	r3, [r7, #4]
 23613 010a 4FF00002 		mov	r2, #0
 23614 010e 9A60     		str	r2, [r3, #8]
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 23615              		.loc 1 318 0
 23616 0110 7B68     		ldr	r3, [r7, #4]
 23617 0112 4FF00002 		mov	r2, #0
 23618 0116 DA60     		str	r2, [r3, #12]
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 23619              		.loc 1 321 0
 23620 0118 7B68     		ldr	r3, [r7, #4]
 23621 011a 4FF00002 		mov	r2, #0
 23622 011e 1A61     		str	r2, [r3, #16]
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 23623              		.loc 1 324 0
 23624 0120 7B68     		ldr	r3, [r7, #4]
 23625 0122 4FF00102 		mov	r2, #1
 23626 0126 1A75     		strb	r2, [r3, #20]
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23627              		.loc 1 325 0
 23628 0128 07F10C07 		add	r7, r7, #12
 23629 012c BD46     		mov	sp, r7
 23630 012e 80BC     		pop	{r7}
 23631 0130 7047     		bx	lr
 23632              		.cfi_endproc
 23633              	.LFE31:
 23635 0132 00BF     		.align	2
 23636              		.global	ADC_CommonInit
 23637              		.thumb
 23638              		.thumb_func
 23640              	ADC_CommonInit:
 23641              	.LFB32:
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23642              		.loc 1 335 0
 23643              		.cfi_startproc
 23644              		@ args = 0, pretend = 0, frame = 16
 23645              		@ frame_needed = 1, uses_anonymous_args = 0
 23646              		@ link register save eliminated.
 23647 0134 80B4     		push	{r7}
 23648              	.LCFI8:
 23649              		.cfi_def_cfa_offset 4
 23650 0136 85B0     		sub	sp, sp, #20
 23651              	.LCFI9:
 23652              		.cfi_def_cfa_offset 24
 23653 0138 00AF     		add	r7, sp, #0
 23654              		.cfi_offset 7, -4
 23655              	.LCFI10:
 23656              		.cfi_def_cfa_register 7
 23657 013a 7860     		str	r0, [r7, #4]
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0;
 23658              		.loc 1 336 0
 23659 013c 4FF00003 		mov	r3, #0
 23660 0140 FB60     		str	r3, [r7, #12]
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the ADC CCR value */
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 = ADC->CCR;
 23661              		.loc 1 344 0
 23662 0142 4FF40C53 		mov	r3, #8960
 23663 0146 C4F20103 		movt	r3, 16385
 23664 014a 5B68     		ldr	r3, [r3, #4]
 23665 014c FB60     		str	r3, [r7, #12]
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 23666              		.loc 1 347 0
 23667 014e FA68     		ldr	r2, [r7, #12]
 23668 0150 43F2E003 		movw	r3, #12512
 23669 0154 CFF6FC73 		movt	r3, 65532
 23670 0158 02EA0303 		and	r3, r2, r3
 23671 015c FB60     		str	r3, [r7, #12]
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      and DMA access mode for multimode */
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 23672              		.loc 1 355 0
 23673 015e 7B68     		ldr	r3, [r7, #4]
 23674 0160 1A68     		ldr	r2, [r3, #0]
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 23675              		.loc 1 356 0
 23676 0162 7B68     		ldr	r3, [r7, #4]
 23677 0164 5B68     		ldr	r3, [r3, #4]
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 23678              		.loc 1 355 0
 23679 0166 42EA0302 		orr	r2, r2, r3
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 23680              		.loc 1 357 0
 23681 016a 7B68     		ldr	r3, [r7, #4]
 23682 016c 9B68     		ldr	r3, [r3, #8]
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 23683              		.loc 1 356 0
 23684 016e 42EA0302 		orr	r2, r2, r3
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 23685              		.loc 1 358 0
 23686 0172 7B68     		ldr	r3, [r7, #4]
 23687 0174 DB68     		ldr	r3, [r3, #12]
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 23688              		.loc 1 355 0
 23689 0176 42EA0303 		orr	r3, r2, r3
 23690 017a FA68     		ldr	r2, [r7, #12]
 23691 017c 42EA0303 		orr	r3, r2, r3
 23692 0180 FB60     		str	r3, [r7, #12]
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                         
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Write to ADC CCR */
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC->CCR = tmpreg1;
 23693              		.loc 1 361 0
 23694 0182 4FF40C53 		mov	r3, #8960
 23695 0186 C4F20103 		movt	r3, 16385
 23696 018a FA68     		ldr	r2, [r7, #12]
 23697 018c 5A60     		str	r2, [r3, #4]
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23698              		.loc 1 362 0
 23699 018e 07F11407 		add	r7, r7, #20
 23700 0192 BD46     		mov	sp, r7
 23701 0194 80BC     		pop	{r7}
 23702 0196 7047     		bx	lr
 23703              		.cfi_endproc
 23704              	.LFE32:
 23706              		.align	2
 23707              		.global	ADC_CommonStructInit
 23708              		.thumb
 23709              		.thumb_func
 23711              	ADC_CommonStructInit:
 23712              	.LFB33:
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         which will be initialized.
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23713              		.loc 1 371 0
 23714              		.cfi_startproc
 23715              		@ args = 0, pretend = 0, frame = 8
 23716              		@ frame_needed = 1, uses_anonymous_args = 0
 23717              		@ link register save eliminated.
 23718 0198 80B4     		push	{r7}
 23719              	.LCFI11:
 23720              		.cfi_def_cfa_offset 4
 23721 019a 83B0     		sub	sp, sp, #12
 23722              	.LCFI12:
 23723              		.cfi_def_cfa_offset 16
 23724 019c 00AF     		add	r7, sp, #0
 23725              		.cfi_offset 7, -4
 23726              	.LCFI13:
 23727              		.cfi_def_cfa_register 7
 23728 019e 7860     		str	r0, [r7, #4]
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 23729              		.loc 1 373 0
 23730 01a0 7B68     		ldr	r3, [r7, #4]
 23731 01a2 4FF00002 		mov	r2, #0
 23732 01a6 1A60     		str	r2, [r3, #0]
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 23733              		.loc 1 376 0
 23734 01a8 7B68     		ldr	r3, [r7, #4]
 23735 01aa 4FF00002 		mov	r2, #0
 23736 01ae 5A60     		str	r2, [r3, #4]
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 23737              		.loc 1 379 0
 23738 01b0 7B68     		ldr	r3, [r7, #4]
 23739 01b2 4FF00002 		mov	r2, #0
 23740 01b6 9A60     		str	r2, [r3, #8]
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 23741              		.loc 1 382 0
 23742 01b8 7B68     		ldr	r3, [r7, #4]
 23743 01ba 4FF00002 		mov	r2, #0
 23744 01be DA60     		str	r2, [r3, #12]
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23745              		.loc 1 383 0
 23746 01c0 07F10C07 		add	r7, r7, #12
 23747 01c4 BD46     		mov	sp, r7
 23748 01c6 80BC     		pop	{r7}
 23749 01c8 7047     		bx	lr
 23750              		.cfi_endproc
 23751              	.LFE33:
 23753 01ca 00BF     		.align	2
 23754              		.global	ADC_Cmd
 23755              		.thumb
 23756              		.thumb_func
 23758              	ADC_Cmd:
 23759              	.LFB34:
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23760              		.loc 1 393 0
 23761              		.cfi_startproc
 23762              		@ args = 0, pretend = 0, frame = 8
 23763              		@ frame_needed = 1, uses_anonymous_args = 0
 23764              		@ link register save eliminated.
 23765 01cc 80B4     		push	{r7}
 23766              	.LCFI14:
 23767              		.cfi_def_cfa_offset 4
 23768 01ce 83B0     		sub	sp, sp, #12
 23769              	.LCFI15:
 23770              		.cfi_def_cfa_offset 16
 23771 01d0 00AF     		add	r7, sp, #0
 23772              		.cfi_offset 7, -4
 23773              	.LCFI16:
 23774              		.cfi_def_cfa_register 7
 23775 01d2 7860     		str	r0, [r7, #4]
 23776 01d4 0B46     		mov	r3, r1
 23777 01d6 FB70     		strb	r3, [r7, #3]
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 23778              		.loc 1 397 0
 23779 01d8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23780 01da 002B     		cmp	r3, #0
 23781 01dc 06D0     		beq	.L7
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 23782              		.loc 1 400 0
 23783 01de 7B68     		ldr	r3, [r7, #4]
 23784 01e0 9B68     		ldr	r3, [r3, #8]
 23785 01e2 43F00102 		orr	r2, r3, #1
 23786 01e6 7B68     		ldr	r3, [r7, #4]
 23787 01e8 9A60     		str	r2, [r3, #8]
 23788 01ea 05E0     		b	.L6
 23789              	.L7:
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 23790              		.loc 1 405 0
 23791 01ec 7B68     		ldr	r3, [r7, #4]
 23792 01ee 9B68     		ldr	r3, [r3, #8]
 23793 01f0 23F00102 		bic	r2, r3, #1
 23794 01f4 7B68     		ldr	r3, [r7, #4]
 23795 01f6 9A60     		str	r2, [r3, #8]
 23796              	.L6:
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23797              		.loc 1 407 0
 23798 01f8 07F10C07 		add	r7, r7, #12
 23799 01fc BD46     		mov	sp, r7
 23800 01fe 80BC     		pop	{r7}
 23801 0200 7047     		bx	lr
 23802              		.cfi_endproc
 23803              	.LFE34:
 23805 0202 00BF     		.align	2
 23806              		.global	ADC_AnalogWatchdogCmd
 23807              		.thumb
 23808              		.thumb_func
 23810              	ADC_AnalogWatchdogCmd:
 23811              	.LFB35:
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @}
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @verbatim   
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                     Analog Watchdog configuration functions
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================  
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   (AWD) feature in the ADC.
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @endverbatim
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         injected channels
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         This parameter can be one of the following values:
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None	  
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23812              		.loc 1 451 0
 23813              		.cfi_startproc
 23814              		@ args = 0, pretend = 0, frame = 16
 23815              		@ frame_needed = 1, uses_anonymous_args = 0
 23816              		@ link register save eliminated.
 23817 0204 80B4     		push	{r7}
 23818              	.LCFI17:
 23819              		.cfi_def_cfa_offset 4
 23820 0206 85B0     		sub	sp, sp, #20
 23821              	.LCFI18:
 23822              		.cfi_def_cfa_offset 24
 23823 0208 00AF     		add	r7, sp, #0
 23824              		.cfi_offset 7, -4
 23825              	.LCFI19:
 23826              		.cfi_def_cfa_register 7
 23827 020a 7860     		str	r0, [r7, #4]
 23828 020c 3960     		str	r1, [r7, #0]
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg = 0;
 23829              		.loc 1 452 0
 23830 020e 4FF00003 		mov	r3, #0
 23831 0212 FB60     		str	r3, [r7, #12]
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the old register value */
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg = ADCx->CR1;
 23832              		.loc 1 458 0
 23833 0214 7B68     		ldr	r3, [r7, #4]
 23834 0216 5B68     		ldr	r3, [r3, #4]
 23835 0218 FB60     		str	r3, [r7, #12]
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 23836              		.loc 1 461 0
 23837 021a FB68     		ldr	r3, [r7, #12]
 23838 021c 23F44003 		bic	r3, r3, #12582912
 23839 0220 23F40073 		bic	r3, r3, #512
 23840 0224 FB60     		str	r3, [r7, #12]
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 23841              		.loc 1 464 0
 23842 0226 FA68     		ldr	r2, [r7, #12]
 23843 0228 3B68     		ldr	r3, [r7, #0]
 23844 022a 42EA0303 		orr	r3, r2, r3
 23845 022e FB60     		str	r3, [r7, #12]
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Store the new register value */
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR1 = tmpreg;
 23846              		.loc 1 467 0
 23847 0230 7B68     		ldr	r3, [r7, #4]
 23848 0232 FA68     		ldr	r2, [r7, #12]
 23849 0234 5A60     		str	r2, [r3, #4]
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23850              		.loc 1 468 0
 23851 0236 07F11407 		add	r7, r7, #20
 23852 023a BD46     		mov	sp, r7
 23853 023c 80BC     		pop	{r7}
 23854 023e 7047     		bx	lr
 23855              		.cfi_endproc
 23856              	.LFE35:
 23858              		.align	2
 23859              		.global	ADC_AnalogWatchdogThresholdsConfig
 23860              		.thumb
 23861              		.thumb_func
 23863              	ADC_AnalogWatchdogThresholdsConfig:
 23864              	.LFB36:
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                                         uint16_t LowThreshold)
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23865              		.loc 1 481 0
 23866              		.cfi_startproc
 23867              		@ args = 0, pretend = 0, frame = 8
 23868              		@ frame_needed = 1, uses_anonymous_args = 0
 23869              		@ link register save eliminated.
 23870 0240 80B4     		push	{r7}
 23871              	.LCFI20:
 23872              		.cfi_def_cfa_offset 4
 23873 0242 83B0     		sub	sp, sp, #12
 23874              	.LCFI21:
 23875              		.cfi_def_cfa_offset 16
 23876 0244 00AF     		add	r7, sp, #0
 23877              		.cfi_offset 7, -4
 23878              	.LCFI22:
 23879              		.cfi_def_cfa_register 7
 23880 0246 7860     		str	r0, [r7, #4]
 23881 0248 1346     		mov	r3, r2
 23882 024a 0A46     		mov	r2, r1	@ movhi
 23883 024c 7A80     		strh	r2, [r7, #2]	@ movhi
 23884 024e 3B80     		strh	r3, [r7, #0]	@ movhi
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the ADCx high threshold */
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->HTR = HighThreshold;
 23885              		.loc 1 488 0
 23886 0250 7A88     		ldrh	r2, [r7, #2]
 23887 0252 7B68     		ldr	r3, [r7, #4]
 23888 0254 5A62     		str	r2, [r3, #36]
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the ADCx low threshold */
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->LTR = LowThreshold;
 23889              		.loc 1 491 0
 23890 0256 3A88     		ldrh	r2, [r7, #0]
 23891 0258 7B68     		ldr	r3, [r7, #4]
 23892 025a 9A62     		str	r2, [r3, #40]
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23893              		.loc 1 492 0
 23894 025c 07F10C07 		add	r7, r7, #12
 23895 0260 BD46     		mov	sp, r7
 23896 0262 80BC     		pop	{r7}
 23897 0264 7047     		bx	lr
 23898              		.cfi_endproc
 23899              	.LFE36:
 23901 0266 00BF     		.align	2
 23902              		.global	ADC_AnalogWatchdogSingleChannelConfig
 23903              		.thumb
 23904              		.thumb_func
 23906              	ADC_AnalogWatchdogSingleChannelConfig:
 23907              	.LFB37:
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23908              		.loc 1 521 0
 23909              		.cfi_startproc
 23910              		@ args = 0, pretend = 0, frame = 16
 23911              		@ frame_needed = 1, uses_anonymous_args = 0
 23912              		@ link register save eliminated.
 23913 0268 80B4     		push	{r7}
 23914              	.LCFI23:
 23915              		.cfi_def_cfa_offset 4
 23916 026a 85B0     		sub	sp, sp, #20
 23917              	.LCFI24:
 23918              		.cfi_def_cfa_offset 24
 23919 026c 00AF     		add	r7, sp, #0
 23920              		.cfi_offset 7, -4
 23921              	.LCFI25:
 23922              		.cfi_def_cfa_register 7
 23923 026e 7860     		str	r0, [r7, #4]
 23924 0270 0B46     		mov	r3, r1
 23925 0272 FB70     		strb	r3, [r7, #3]
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg = 0;
 23926              		.loc 1 522 0
 23927 0274 4FF00003 		mov	r3, #0
 23928 0278 FB60     		str	r3, [r7, #12]
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the old register value */
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg = ADCx->CR1;
 23929              		.loc 1 528 0
 23930 027a 7B68     		ldr	r3, [r7, #4]
 23931 027c 5B68     		ldr	r3, [r3, #4]
 23932 027e FB60     		str	r3, [r7, #12]
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 23933              		.loc 1 531 0
 23934 0280 FB68     		ldr	r3, [r7, #12]
 23935 0282 23F01F03 		bic	r3, r3, #31
 23936 0286 FB60     		str	r3, [r7, #12]
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the Analog watchdog channel */
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg |= ADC_Channel;
 23937              		.loc 1 534 0
 23938 0288 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 23939 028a FA68     		ldr	r2, [r7, #12]
 23940 028c 42EA0303 		orr	r3, r2, r3
 23941 0290 FB60     		str	r3, [r7, #12]
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Store the new register value */
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR1 = tmpreg;
 23942              		.loc 1 537 0
 23943 0292 7B68     		ldr	r3, [r7, #4]
 23944 0294 FA68     		ldr	r2, [r7, #12]
 23945 0296 5A60     		str	r2, [r3, #4]
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 23946              		.loc 1 538 0
 23947 0298 07F11407 		add	r7, r7, #20
 23948 029c BD46     		mov	sp, r7
 23949 029e 80BC     		pop	{r7}
 23950 02a0 7047     		bx	lr
 23951              		.cfi_endproc
 23952              	.LFE37:
 23954 02a2 00BF     		.align	2
 23955              		.global	ADC_TempSensorVrefintCmd
 23956              		.thumb
 23957              		.thumb_func
 23959              	ADC_TempSensorVrefintCmd:
 23960              	.LFB38:
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @}
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @verbatim   
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================  
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Vbat sources.
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   voltages is done following these steps :
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   these steps :
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       ADC_VBATCmd() function. 
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @endverbatim
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 23961              		.loc 1 586 0
 23962              		.cfi_startproc
 23963              		@ args = 0, pretend = 0, frame = 8
 23964              		@ frame_needed = 1, uses_anonymous_args = 0
 23965              		@ link register save eliminated.
 23966 02a4 80B4     		push	{r7}
 23967              	.LCFI26:
 23968              		.cfi_def_cfa_offset 4
 23969 02a6 83B0     		sub	sp, sp, #12
 23970              	.LCFI27:
 23971              		.cfi_def_cfa_offset 16
 23972 02a8 00AF     		add	r7, sp, #0
 23973              		.cfi_offset 7, -4
 23974              	.LCFI28:
 23975              		.cfi_def_cfa_register 7
 23976 02aa 0346     		mov	r3, r0
 23977 02ac FB71     		strb	r3, [r7, #7]
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 23978              		.loc 1 589 0
 23979 02ae FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23980 02b0 002B     		cmp	r3, #0
 23981 02b2 0CD0     		beq	.L13
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 23982              		.loc 1 592 0
 23983 02b4 4FF40C53 		mov	r3, #8960
 23984 02b8 C4F20103 		movt	r3, 16385
 23985 02bc 4FF40C52 		mov	r2, #8960
 23986 02c0 C4F20102 		movt	r2, 16385
 23987 02c4 5268     		ldr	r2, [r2, #4]
 23988 02c6 42F40002 		orr	r2, r2, #8388608
 23989 02ca 5A60     		str	r2, [r3, #4]
 23990 02cc 0BE0     		b	.L12
 23991              	.L13:
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 23992              		.loc 1 597 0
 23993 02ce 4FF40C53 		mov	r3, #8960
 23994 02d2 C4F20103 		movt	r3, 16385
 23995 02d6 4FF40C52 		mov	r2, #8960
 23996 02da C4F20102 		movt	r2, 16385
 23997 02de 5268     		ldr	r2, [r2, #4]
 23998 02e0 22F40002 		bic	r2, r2, #8388608
 23999 02e4 5A60     		str	r2, [r3, #4]
 24000              	.L12:
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24001              		.loc 1 599 0
 24002 02e6 07F10C07 		add	r7, r7, #12
 24003 02ea BD46     		mov	sp, r7
 24004 02ec 80BC     		pop	{r7}
 24005 02ee 7047     		bx	lr
 24006              		.cfi_endproc
 24007              	.LFE38:
 24009              		.align	2
 24010              		.global	ADC_VBATCmd
 24011              		.thumb
 24012              		.thumb_func
 24014              	ADC_VBATCmd:
 24015              	.LFB39:
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24016              		.loc 1 608 0
 24017              		.cfi_startproc
 24018              		@ args = 0, pretend = 0, frame = 8
 24019              		@ frame_needed = 1, uses_anonymous_args = 0
 24020              		@ link register save eliminated.
 24021 02f0 80B4     		push	{r7}
 24022              	.LCFI29:
 24023              		.cfi_def_cfa_offset 4
 24024 02f2 83B0     		sub	sp, sp, #12
 24025              	.LCFI30:
 24026              		.cfi_def_cfa_offset 16
 24027 02f4 00AF     		add	r7, sp, #0
 24028              		.cfi_offset 7, -4
 24029              	.LCFI31:
 24030              		.cfi_def_cfa_register 7
 24031 02f6 0346     		mov	r3, r0
 24032 02f8 FB71     		strb	r3, [r7, #7]
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 24033              		.loc 1 611 0
 24034 02fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24035 02fc 002B     		cmp	r3, #0
 24036 02fe 0CD0     		beq	.L16
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the VBAT channel*/
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 24037              		.loc 1 614 0
 24038 0300 4FF40C53 		mov	r3, #8960
 24039 0304 C4F20103 		movt	r3, 16385
 24040 0308 4FF40C52 		mov	r2, #8960
 24041 030c C4F20102 		movt	r2, 16385
 24042 0310 5268     		ldr	r2, [r2, #4]
 24043 0312 42F48002 		orr	r2, r2, #4194304
 24044 0316 5A60     		str	r2, [r3, #4]
 24045 0318 0BE0     		b	.L15
 24046              	.L16:
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the VBAT channel*/
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 24047              		.loc 1 619 0
 24048 031a 4FF40C53 		mov	r3, #8960
 24049 031e C4F20103 		movt	r3, 16385
 24050 0322 4FF40C52 		mov	r2, #8960
 24051 0326 C4F20102 		movt	r2, 16385
 24052 032a 5268     		ldr	r2, [r2, #4]
 24053 032c 22F48002 		bic	r2, r2, #4194304
 24054 0330 5A60     		str	r2, [r3, #4]
 24055              	.L15:
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24056              		.loc 1 621 0
 24057 0332 07F10C07 		add	r7, r7, #12
 24058 0336 BD46     		mov	sp, r7
 24059 0338 80BC     		pop	{r7}
 24060 033a 7047     		bx	lr
 24061              		.cfi_endproc
 24062              	.LFE39:
 24064              		.align	2
 24065              		.global	ADC_RegularChannelConfig
 24066              		.thumb
 24067              		.thumb_func
 24069              	ADC_RegularChannelConfig:
 24070              	.LFB40:
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @}
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @verbatim   
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                   Regular Channels Configuration functions
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================  
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   it is composed of 2 sub sections : 
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - Configure the sampling time for each channel
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - select the conversion Trigger for regular channels
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - select the desired EOC event behavior configuration
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - Activate the continuous Mode  (*)
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - Activate the Discontinuous Mode 
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      using the ADC_Init() function : 
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - scan mode activation 
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - continuous mode activation (**) 
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - External trigger source  
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - External trigger edge 
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      automatically cleared.
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****        
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @endverbatim
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24071              		.loc 1 709 0
 24072              		.cfi_startproc
 24073              		@ args = 0, pretend = 0, frame = 16
 24074              		@ frame_needed = 1, uses_anonymous_args = 0
 24075              		@ link register save eliminated.
 24076 033c 80B4     		push	{r7}
 24077              	.LCFI32:
 24078              		.cfi_def_cfa_offset 4
 24079 033e 85B0     		sub	sp, sp, #20
 24080              	.LCFI33:
 24081              		.cfi_def_cfa_offset 24
 24082 0340 00AF     		add	r7, sp, #0
 24083              		.cfi_offset 7, -4
 24084              	.LCFI34:
 24085              		.cfi_def_cfa_register 7
 24086 0342 7860     		str	r0, [r7, #4]
 24087 0344 F970     		strb	r1, [r7, #3]
 24088 0346 BA70     		strb	r2, [r7, #2]
 24089 0348 7B70     		strb	r3, [r7, #1]
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 24090              		.loc 1 710 0
 24091 034a 4FF00003 		mov	r3, #0
 24092 034e FB60     		str	r3, [r7, #12]
 24093 0350 4FF00003 		mov	r3, #0
 24094 0354 BB60     		str	r3, [r7, #8]
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 24095              		.loc 1 718 0
 24096 0356 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24097 0358 092B     		cmp	r3, #9
 24098 035a 29D9     		bls	.L19
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Get the old register value */
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 24099              		.loc 1 721 0
 24100 035c 7B68     		ldr	r3, [r7, #4]
 24101 035e DB68     		ldr	r3, [r3, #12]
 24102 0360 FB60     		str	r3, [r7, #12]
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 24103              		.loc 1 724 0
 24104 0362 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24105 0364 1346     		mov	r3, r2
 24106 0366 4FEA4303 		lsl	r3, r3, #1
 24107 036a 1344     		add	r3, r3, r2
 24108 036c A3F11E03 		sub	r3, r3, #30
 24109 0370 4FF00702 		mov	r2, #7
 24110 0374 02FA03F3 		lsl	r3, r2, r3
 24111 0378 BB60     		str	r3, [r7, #8]
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Clear the old sample time */
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 24112              		.loc 1 727 0
 24113 037a BB68     		ldr	r3, [r7, #8]
 24114 037c 6FEA0303 		mvn	r3, r3
 24115 0380 FA68     		ldr	r2, [r7, #12]
 24116 0382 02EA0303 		and	r3, r2, r3
 24117 0386 FB60     		str	r3, [r7, #12]
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to set */
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 24118              		.loc 1 730 0
 24119 0388 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 24120 038a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24121 038c 1346     		mov	r3, r2
 24122 038e 4FEA4303 		lsl	r3, r3, #1
 24123 0392 1344     		add	r3, r3, r2
 24124 0394 A3F11E03 		sub	r3, r3, #30
 24125 0398 01FA03F3 		lsl	r3, r1, r3
 24126 039c BB60     		str	r3, [r7, #8]
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Set the new sample time */
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 24127              		.loc 1 733 0
 24128 039e FA68     		ldr	r2, [r7, #12]
 24129 03a0 BB68     		ldr	r3, [r7, #8]
 24130 03a2 42EA0303 		orr	r3, r2, r3
 24131 03a6 FB60     		str	r3, [r7, #12]
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Store the new register value */
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 24132              		.loc 1 736 0
 24133 03a8 7B68     		ldr	r3, [r7, #4]
 24134 03aa FA68     		ldr	r2, [r7, #12]
 24135 03ac DA60     		str	r2, [r3, #12]
 24136 03ae 24E0     		b	.L20
 24137              	.L19:
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Get the old register value */
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 24138              		.loc 1 741 0
 24139 03b0 7B68     		ldr	r3, [r7, #4]
 24140 03b2 1B69     		ldr	r3, [r3, #16]
 24141 03b4 FB60     		str	r3, [r7, #12]
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 24142              		.loc 1 744 0
 24143 03b6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24144 03b8 1346     		mov	r3, r2
 24145 03ba 4FEA4303 		lsl	r3, r3, #1
 24146 03be 1344     		add	r3, r3, r2
 24147 03c0 4FF00702 		mov	r2, #7
 24148 03c4 02FA03F3 		lsl	r3, r2, r3
 24149 03c8 BB60     		str	r3, [r7, #8]
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Clear the old sample time */
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 24150              		.loc 1 747 0
 24151 03ca BB68     		ldr	r3, [r7, #8]
 24152 03cc 6FEA0303 		mvn	r3, r3
 24153 03d0 FA68     		ldr	r2, [r7, #12]
 24154 03d2 02EA0303 		and	r3, r2, r3
 24155 03d6 FB60     		str	r3, [r7, #12]
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to set */
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 24156              		.loc 1 750 0
 24157 03d8 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 24158 03da FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24159 03dc 1346     		mov	r3, r2
 24160 03de 4FEA4303 		lsl	r3, r3, #1
 24161 03e2 1344     		add	r3, r3, r2
 24162 03e4 01FA03F3 		lsl	r3, r1, r3
 24163 03e8 BB60     		str	r3, [r7, #8]
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Set the new sample time */
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 24164              		.loc 1 753 0
 24165 03ea FA68     		ldr	r2, [r7, #12]
 24166 03ec BB68     		ldr	r3, [r7, #8]
 24167 03ee 42EA0303 		orr	r3, r2, r3
 24168 03f2 FB60     		str	r3, [r7, #12]
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Store the new register value */
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 24169              		.loc 1 756 0
 24170 03f4 7B68     		ldr	r3, [r7, #4]
 24171 03f6 FA68     		ldr	r2, [r7, #12]
 24172 03f8 1A61     		str	r2, [r3, #16]
 24173              	.L20:
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* For Rank 1 to 6 */
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (Rank < 7)
 24174              		.loc 1 759 0
 24175 03fa BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 24176 03fc 062B     		cmp	r3, #6
 24177 03fe 29D8     		bhi	.L21
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Get the old register value */
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 24178              		.loc 1 762 0
 24179 0400 7B68     		ldr	r3, [r7, #4]
 24180 0402 5B6B     		ldr	r3, [r3, #52]
 24181 0404 FB60     		str	r3, [r7, #12]
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 24182              		.loc 1 765 0
 24183 0406 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 24184 0408 03F1FF32 		add	r2, r3, #-1
 24185 040c 1346     		mov	r3, r2
 24186 040e 4FEA8303 		lsl	r3, r3, #2
 24187 0412 1344     		add	r3, r3, r2
 24188 0414 4FF01F02 		mov	r2, #31
 24189 0418 02FA03F3 		lsl	r3, r2, r3
 24190 041c BB60     		str	r3, [r7, #8]
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 24191              		.loc 1 768 0
 24192 041e BB68     		ldr	r3, [r7, #8]
 24193 0420 6FEA0303 		mvn	r3, r3
 24194 0424 FA68     		ldr	r2, [r7, #12]
 24195 0426 02EA0303 		and	r3, r2, r3
 24196 042a FB60     		str	r3, [r7, #12]
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to set */
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 24197              		.loc 1 771 0
 24198 042c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 24199 042e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 24200 0430 03F1FF32 		add	r2, r3, #-1
 24201 0434 1346     		mov	r3, r2
 24202 0436 4FEA8303 		lsl	r3, r3, #2
 24203 043a 1344     		add	r3, r3, r2
 24204 043c 01FA03F3 		lsl	r3, r1, r3
 24205 0440 BB60     		str	r3, [r7, #8]
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 24206              		.loc 1 774 0
 24207 0442 FA68     		ldr	r2, [r7, #12]
 24208 0444 BB68     		ldr	r3, [r7, #8]
 24209 0446 42EA0303 		orr	r3, r2, r3
 24210 044a FB60     		str	r3, [r7, #12]
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Store the new register value */
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 24211              		.loc 1 777 0
 24212 044c 7B68     		ldr	r3, [r7, #4]
 24213 044e FA68     		ldr	r2, [r7, #12]
 24214 0450 5A63     		str	r2, [r3, #52]
 24215 0452 55E0     		b	.L18
 24216              	.L21:
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* For Rank 7 to 12 */
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else if (Rank < 13)
 24217              		.loc 1 780 0
 24218 0454 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 24219 0456 0C2B     		cmp	r3, #12
 24220 0458 29D8     		bhi	.L23
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Get the old register value */
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 24221              		.loc 1 783 0
 24222 045a 7B68     		ldr	r3, [r7, #4]
 24223 045c 1B6B     		ldr	r3, [r3, #48]
 24224 045e FB60     		str	r3, [r7, #12]
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 24225              		.loc 1 786 0
 24226 0460 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 24227 0462 1346     		mov	r3, r2
 24228 0464 4FEA8303 		lsl	r3, r3, #2
 24229 0468 1344     		add	r3, r3, r2
 24230 046a A3F12303 		sub	r3, r3, #35
 24231 046e 4FF01F02 		mov	r2, #31
 24232 0472 02FA03F3 		lsl	r3, r2, r3
 24233 0476 BB60     		str	r3, [r7, #8]
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 24234              		.loc 1 789 0
 24235 0478 BB68     		ldr	r3, [r7, #8]
 24236 047a 6FEA0303 		mvn	r3, r3
 24237 047e FA68     		ldr	r2, [r7, #12]
 24238 0480 02EA0303 		and	r3, r2, r3
 24239 0484 FB60     		str	r3, [r7, #12]
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to set */
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 24240              		.loc 1 792 0
 24241 0486 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 24242 0488 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 24243 048a 1346     		mov	r3, r2
 24244 048c 4FEA8303 		lsl	r3, r3, #2
 24245 0490 1344     		add	r3, r3, r2
 24246 0492 A3F12303 		sub	r3, r3, #35
 24247 0496 01FA03F3 		lsl	r3, r1, r3
 24248 049a BB60     		str	r3, [r7, #8]
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 24249              		.loc 1 795 0
 24250 049c FA68     		ldr	r2, [r7, #12]
 24251 049e BB68     		ldr	r3, [r7, #8]
 24252 04a0 42EA0303 		orr	r3, r2, r3
 24253 04a4 FB60     		str	r3, [r7, #12]
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Store the new register value */
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 24254              		.loc 1 798 0
 24255 04a6 7B68     		ldr	r3, [r7, #4]
 24256 04a8 FA68     		ldr	r2, [r7, #12]
 24257 04aa 1A63     		str	r2, [r3, #48]
 24258 04ac 28E0     		b	.L18
 24259              	.L23:
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* For Rank 13 to 16 */
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Get the old register value */
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 24260              		.loc 1 804 0
 24261 04ae 7B68     		ldr	r3, [r7, #4]
 24262 04b0 DB6A     		ldr	r3, [r3, #44]
 24263 04b2 FB60     		str	r3, [r7, #12]
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 24264              		.loc 1 807 0
 24265 04b4 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 24266 04b6 1346     		mov	r3, r2
 24267 04b8 4FEA8303 		lsl	r3, r3, #2
 24268 04bc 1344     		add	r3, r3, r2
 24269 04be A3F14103 		sub	r3, r3, #65
 24270 04c2 4FF01F02 		mov	r2, #31
 24271 04c6 02FA03F3 		lsl	r3, r2, r3
 24272 04ca BB60     		str	r3, [r7, #8]
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 24273              		.loc 1 810 0
 24274 04cc BB68     		ldr	r3, [r7, #8]
 24275 04ce 6FEA0303 		mvn	r3, r3
 24276 04d2 FA68     		ldr	r2, [r7, #12]
 24277 04d4 02EA0303 		and	r3, r2, r3
 24278 04d8 FB60     		str	r3, [r7, #12]
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to set */
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 24279              		.loc 1 813 0
 24280 04da F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 24281 04dc BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 24282 04de 1346     		mov	r3, r2
 24283 04e0 4FEA8303 		lsl	r3, r3, #2
 24284 04e4 1344     		add	r3, r3, r2
 24285 04e6 A3F14103 		sub	r3, r3, #65
 24286 04ea 01FA03F3 		lsl	r3, r1, r3
 24287 04ee BB60     		str	r3, [r7, #8]
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 24288              		.loc 1 816 0
 24289 04f0 FA68     		ldr	r2, [r7, #12]
 24290 04f2 BB68     		ldr	r3, [r7, #8]
 24291 04f4 42EA0303 		orr	r3, r2, r3
 24292 04f8 FB60     		str	r3, [r7, #12]
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Store the new register value */
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 24293              		.loc 1 819 0
 24294 04fa 7B68     		ldr	r3, [r7, #4]
 24295 04fc FA68     		ldr	r2, [r7, #12]
 24296 04fe DA62     		str	r2, [r3, #44]
 24297              	.L18:
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24298              		.loc 1 821 0
 24299 0500 07F11407 		add	r7, r7, #20
 24300 0504 BD46     		mov	sp, r7
 24301 0506 80BC     		pop	{r7}
 24302 0508 7047     		bx	lr
 24303              		.cfi_endproc
 24304              	.LFE40:
 24306 050a 00BF     		.align	2
 24307              		.global	ADC_SoftwareStartConv
 24308              		.thumb
 24309              		.thumb_func
 24311              	ADC_SoftwareStartConv:
 24312              	.LFB41:
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24313              		.loc 1 829 0
 24314              		.cfi_startproc
 24315              		@ args = 0, pretend = 0, frame = 8
 24316              		@ frame_needed = 1, uses_anonymous_args = 0
 24317              		@ link register save eliminated.
 24318 050c 80B4     		push	{r7}
 24319              	.LCFI35:
 24320              		.cfi_def_cfa_offset 4
 24321 050e 83B0     		sub	sp, sp, #12
 24322              	.LCFI36:
 24323              		.cfi_def_cfa_offset 16
 24324 0510 00AF     		add	r7, sp, #0
 24325              		.cfi_offset 7, -4
 24326              	.LCFI37:
 24327              		.cfi_def_cfa_register 7
 24328 0512 7860     		str	r0, [r7, #4]
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 24329              		.loc 1 834 0
 24330 0514 7B68     		ldr	r3, [r7, #4]
 24331 0516 9B68     		ldr	r3, [r3, #8]
 24332 0518 43F08042 		orr	r2, r3, #1073741824
 24333 051c 7B68     		ldr	r3, [r7, #4]
 24334 051e 9A60     		str	r2, [r3, #8]
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24335              		.loc 1 835 0
 24336 0520 07F10C07 		add	r7, r7, #12
 24337 0524 BD46     		mov	sp, r7
 24338 0526 80BC     		pop	{r7}
 24339 0528 7047     		bx	lr
 24340              		.cfi_endproc
 24341              	.LFE41:
 24343 052a 00BF     		.align	2
 24344              		.global	ADC_GetSoftwareStartConvStatus
 24345              		.thumb
 24346              		.thumb_func
 24348              	ADC_GetSoftwareStartConvStatus:
 24349              	.LFB42:
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24350              		.loc 1 843 0
 24351              		.cfi_startproc
 24352              		@ args = 0, pretend = 0, frame = 16
 24353              		@ frame_needed = 1, uses_anonymous_args = 0
 24354              		@ link register save eliminated.
 24355 052c 80B4     		push	{r7}
 24356              	.LCFI38:
 24357              		.cfi_def_cfa_offset 4
 24358 052e 85B0     		sub	sp, sp, #20
 24359              	.LCFI39:
 24360              		.cfi_def_cfa_offset 24
 24361 0530 00AF     		add	r7, sp, #0
 24362              		.cfi_offset 7, -4
 24363              	.LCFI40:
 24364              		.cfi_def_cfa_register 7
 24365 0532 7860     		str	r0, [r7, #4]
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   FlagStatus bitstatus = RESET;
 24366              		.loc 1 844 0
 24367 0534 4FF00003 		mov	r3, #0
 24368 0538 FB73     		strb	r3, [r7, #15]
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the status of SWSTART bit */
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 24369              		.loc 1 849 0
 24370 053a 7B68     		ldr	r3, [r7, #4]
 24371 053c 9B68     		ldr	r3, [r3, #8]
 24372 053e 03F48003 		and	r3, r3, #4194304
 24373 0542 002B     		cmp	r3, #0
 24374 0544 03D0     		beq	.L26
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* SWSTART bit is set */
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     bitstatus = SET;
 24375              		.loc 1 852 0
 24376 0546 4FF00103 		mov	r3, #1
 24377 054a FB73     		strb	r3, [r7, #15]
 24378 054c 02E0     		b	.L27
 24379              	.L26:
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* SWSTART bit is reset */
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     bitstatus = RESET;
 24380              		.loc 1 857 0
 24381 054e 4FF00003 		mov	r3, #0
 24382 0552 FB73     		strb	r3, [r7, #15]
 24383              	.L27:
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Return the SWSTART bit status */
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   return  bitstatus;
 24384              		.loc 1 861 0
 24385 0554 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24386              		.loc 1 862 0
 24387 0556 1846     		mov	r0, r3
 24388 0558 07F11407 		add	r7, r7, #20
 24389 055c BD46     		mov	sp, r7
 24390 055e 80BC     		pop	{r7}
 24391 0560 7047     		bx	lr
 24392              		.cfi_endproc
 24393              	.LFE42:
 24395 0562 00BF     		.align	2
 24396              		.global	ADC_EOCOnEachRegularChannelCmd
 24397              		.thumb
 24398              		.thumb_func
 24400              	ADC_EOCOnEachRegularChannelCmd:
 24401              	.LFB43:
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24402              		.loc 1 873 0
 24403              		.cfi_startproc
 24404              		@ args = 0, pretend = 0, frame = 8
 24405              		@ frame_needed = 1, uses_anonymous_args = 0
 24406              		@ link register save eliminated.
 24407 0564 80B4     		push	{r7}
 24408              	.LCFI41:
 24409              		.cfi_def_cfa_offset 4
 24410 0566 83B0     		sub	sp, sp, #12
 24411              	.LCFI42:
 24412              		.cfi_def_cfa_offset 16
 24413 0568 00AF     		add	r7, sp, #0
 24414              		.cfi_offset 7, -4
 24415              	.LCFI43:
 24416              		.cfi_def_cfa_register 7
 24417 056a 7860     		str	r0, [r7, #4]
 24418 056c 0B46     		mov	r3, r1
 24419 056e FB70     		strb	r3, [r7, #3]
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 24420              		.loc 1 878 0
 24421 0570 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24422 0572 002B     		cmp	r3, #0
 24423 0574 06D0     		beq	.L29
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 24424              		.loc 1 881 0
 24425 0576 7B68     		ldr	r3, [r7, #4]
 24426 0578 9B68     		ldr	r3, [r3, #8]
 24427 057a 43F48062 		orr	r2, r3, #1024
 24428 057e 7B68     		ldr	r3, [r7, #4]
 24429 0580 9A60     		str	r2, [r3, #8]
 24430 0582 05E0     		b	.L28
 24431              	.L29:
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 24432              		.loc 1 886 0
 24433 0584 7B68     		ldr	r3, [r7, #4]
 24434 0586 9B68     		ldr	r3, [r3, #8]
 24435 0588 23F48062 		bic	r2, r3, #1024
 24436 058c 7B68     		ldr	r3, [r7, #4]
 24437 058e 9A60     		str	r2, [r3, #8]
 24438              	.L28:
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24439              		.loc 1 888 0
 24440 0590 07F10C07 		add	r7, r7, #12
 24441 0594 BD46     		mov	sp, r7
 24442 0596 80BC     		pop	{r7}
 24443 0598 7047     		bx	lr
 24444              		.cfi_endproc
 24445              	.LFE43:
 24447 059a 00BF     		.align	2
 24448              		.global	ADC_ContinuousModeCmd
 24449              		.thumb
 24450              		.thumb_func
 24452              	ADC_ContinuousModeCmd:
 24453              	.LFB44:
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24454              		.loc 1 898 0
 24455              		.cfi_startproc
 24456              		@ args = 0, pretend = 0, frame = 8
 24457              		@ frame_needed = 1, uses_anonymous_args = 0
 24458              		@ link register save eliminated.
 24459 059c 80B4     		push	{r7}
 24460              	.LCFI44:
 24461              		.cfi_def_cfa_offset 4
 24462 059e 83B0     		sub	sp, sp, #12
 24463              	.LCFI45:
 24464              		.cfi_def_cfa_offset 16
 24465 05a0 00AF     		add	r7, sp, #0
 24466              		.cfi_offset 7, -4
 24467              	.LCFI46:
 24468              		.cfi_def_cfa_register 7
 24469 05a2 7860     		str	r0, [r7, #4]
 24470 05a4 0B46     		mov	r3, r1
 24471 05a6 FB70     		strb	r3, [r7, #3]
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 24472              		.loc 1 903 0
 24473 05a8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24474 05aa 002B     		cmp	r3, #0
 24475 05ac 06D0     		beq	.L32
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 24476              		.loc 1 906 0
 24477 05ae 7B68     		ldr	r3, [r7, #4]
 24478 05b0 9B68     		ldr	r3, [r3, #8]
 24479 05b2 43F00202 		orr	r2, r3, #2
 24480 05b6 7B68     		ldr	r3, [r7, #4]
 24481 05b8 9A60     		str	r2, [r3, #8]
 24482 05ba 05E0     		b	.L31
 24483              	.L32:
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 24484              		.loc 1 911 0
 24485 05bc 7B68     		ldr	r3, [r7, #4]
 24486 05be 9B68     		ldr	r3, [r3, #8]
 24487 05c0 23F00202 		bic	r2, r3, #2
 24488 05c4 7B68     		ldr	r3, [r7, #4]
 24489 05c6 9A60     		str	r2, [r3, #8]
 24490              	.L31:
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24491              		.loc 1 913 0
 24492 05c8 07F10C07 		add	r7, r7, #12
 24493 05cc BD46     		mov	sp, r7
 24494 05ce 80BC     		pop	{r7}
 24495 05d0 7047     		bx	lr
 24496              		.cfi_endproc
 24497              	.LFE44:
 24499 05d2 00BF     		.align	2
 24500              		.global	ADC_DiscModeChannelCountConfig
 24501              		.thumb
 24502              		.thumb_func
 24504              	ADC_DiscModeChannelCountConfig:
 24505              	.LFB45:
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         channel.
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This number must be between 1 and 8.
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24506              		.loc 1 924 0
 24507              		.cfi_startproc
 24508              		@ args = 0, pretend = 0, frame = 16
 24509              		@ frame_needed = 1, uses_anonymous_args = 0
 24510              		@ link register save eliminated.
 24511 05d4 80B4     		push	{r7}
 24512              	.LCFI47:
 24513              		.cfi_def_cfa_offset 4
 24514 05d6 85B0     		sub	sp, sp, #20
 24515              	.LCFI48:
 24516              		.cfi_def_cfa_offset 24
 24517 05d8 00AF     		add	r7, sp, #0
 24518              		.cfi_offset 7, -4
 24519              	.LCFI49:
 24520              		.cfi_def_cfa_register 7
 24521 05da 7860     		str	r0, [r7, #4]
 24522 05dc 0B46     		mov	r3, r1
 24523 05de FB70     		strb	r3, [r7, #3]
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0;
 24524              		.loc 1 925 0
 24525 05e0 4FF00003 		mov	r3, #0
 24526 05e4 FB60     		str	r3, [r7, #12]
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg2 = 0;
 24527              		.loc 1 926 0
 24528 05e6 4FF00003 		mov	r3, #0
 24529 05ea BB60     		str	r3, [r7, #8]
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the old register value */
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 = ADCx->CR1;
 24530              		.loc 1 933 0
 24531 05ec 7B68     		ldr	r3, [r7, #4]
 24532 05ee 5B68     		ldr	r3, [r3, #4]
 24533 05f0 FB60     		str	r3, [r7, #12]
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 24534              		.loc 1 936 0
 24535 05f2 FB68     		ldr	r3, [r7, #12]
 24536 05f4 23F46043 		bic	r3, r3, #57344
 24537 05f8 FB60     		str	r3, [r7, #12]
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg2 = Number - 1;
 24538              		.loc 1 939 0
 24539 05fa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24540 05fc 03F1FF33 		add	r3, r3, #-1
 24541 0600 BB60     		str	r3, [r7, #8]
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 24542              		.loc 1 940 0
 24543 0602 BB68     		ldr	r3, [r7, #8]
 24544 0604 4FEA4333 		lsl	r3, r3, #13
 24545 0608 FA68     		ldr	r2, [r7, #12]
 24546 060a 42EA0303 		orr	r3, r2, r3
 24547 060e FB60     		str	r3, [r7, #12]
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Store the new register value */
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR1 = tmpreg1;
 24548              		.loc 1 943 0
 24549 0610 7B68     		ldr	r3, [r7, #4]
 24550 0612 FA68     		ldr	r2, [r7, #12]
 24551 0614 5A60     		str	r2, [r3, #4]
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24552              		.loc 1 944 0
 24553 0616 07F11407 		add	r7, r7, #20
 24554 061a BD46     		mov	sp, r7
 24555 061c 80BC     		pop	{r7}
 24556 061e 7047     		bx	lr
 24557              		.cfi_endproc
 24558              	.LFE45:
 24560              		.align	2
 24561              		.global	ADC_DiscModeCmd
 24562              		.thumb
 24563              		.thumb_func
 24565              	ADC_DiscModeCmd:
 24566              	.LFB46:
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         for the specified ADC
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         regular group channel.
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24567              		.loc 1 956 0
 24568              		.cfi_startproc
 24569              		@ args = 0, pretend = 0, frame = 8
 24570              		@ frame_needed = 1, uses_anonymous_args = 0
 24571              		@ link register save eliminated.
 24572 0620 80B4     		push	{r7}
 24573              	.LCFI50:
 24574              		.cfi_def_cfa_offset 4
 24575 0622 83B0     		sub	sp, sp, #12
 24576              	.LCFI51:
 24577              		.cfi_def_cfa_offset 16
 24578 0624 00AF     		add	r7, sp, #0
 24579              		.cfi_offset 7, -4
 24580              	.LCFI52:
 24581              		.cfi_def_cfa_register 7
 24582 0626 7860     		str	r0, [r7, #4]
 24583 0628 0B46     		mov	r3, r1
 24584 062a FB70     		strb	r3, [r7, #3]
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 24585              		.loc 1 961 0
 24586 062c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24587 062e 002B     		cmp	r3, #0
 24588 0630 06D0     		beq	.L36
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 24589              		.loc 1 964 0
 24590 0632 7B68     		ldr	r3, [r7, #4]
 24591 0634 5B68     		ldr	r3, [r3, #4]
 24592 0636 43F40062 		orr	r2, r3, #2048
 24593 063a 7B68     		ldr	r3, [r7, #4]
 24594 063c 5A60     		str	r2, [r3, #4]
 24595 063e 05E0     		b	.L35
 24596              	.L36:
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 24597              		.loc 1 969 0
 24598 0640 7B68     		ldr	r3, [r7, #4]
 24599 0642 5B68     		ldr	r3, [r3, #4]
 24600 0644 23F40062 		bic	r2, r3, #2048
 24601 0648 7B68     		ldr	r3, [r7, #4]
 24602 064a 5A60     		str	r2, [r3, #4]
 24603              	.L35:
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24604              		.loc 1 971 0
 24605 064c 07F10C07 		add	r7, r7, #12
 24606 0650 BD46     		mov	sp, r7
 24607 0652 80BC     		pop	{r7}
 24608 0654 7047     		bx	lr
 24609              		.cfi_endproc
 24610              	.LFE46:
 24612 0656 00BF     		.align	2
 24613              		.global	ADC_GetConversionValue
 24614              		.thumb
 24615              		.thumb_func
 24617              	ADC_GetConversionValue:
 24618              	.LFB47:
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval The Data conversion value.
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24619              		.loc 1 979 0
 24620              		.cfi_startproc
 24621              		@ args = 0, pretend = 0, frame = 8
 24622              		@ frame_needed = 1, uses_anonymous_args = 0
 24623              		@ link register save eliminated.
 24624 0658 80B4     		push	{r7}
 24625              	.LCFI53:
 24626              		.cfi_def_cfa_offset 4
 24627 065a 83B0     		sub	sp, sp, #12
 24628              	.LCFI54:
 24629              		.cfi_def_cfa_offset 16
 24630 065c 00AF     		add	r7, sp, #0
 24631              		.cfi_offset 7, -4
 24632              	.LCFI55:
 24633              		.cfi_def_cfa_register 7
 24634 065e 7860     		str	r0, [r7, #4]
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Return the selected ADC conversion value */
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   return (uint16_t) ADCx->DR;
 24635              		.loc 1 984 0
 24636 0660 7B68     		ldr	r3, [r7, #4]
 24637 0662 DB6C     		ldr	r3, [r3, #76]
 24638 0664 9BB2     		uxth	r3, r3
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24639              		.loc 1 985 0
 24640 0666 1846     		mov	r0, r3
 24641 0668 07F10C07 		add	r7, r7, #12
 24642 066c BD46     		mov	sp, r7
 24643 066e 80BC     		pop	{r7}
 24644 0670 7047     		bx	lr
 24645              		.cfi_endproc
 24646              	.LFE47:
 24648 0672 00BF     		.align	2
 24649              		.global	ADC_GetMultiModeConversionValue
 24650              		.thumb
 24651              		.thumb_func
 24653              	ADC_GetMultiModeConversionValue:
 24654              	.LFB48:
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         data in the selected multi mode.
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  None  
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval The Data conversion value.
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24655              		.loc 1 1000 0
 24656              		.cfi_startproc
 24657              		@ args = 0, pretend = 0, frame = 0
 24658              		@ frame_needed = 1, uses_anonymous_args = 0
 24659              		@ link register save eliminated.
 24660 0674 80B4     		push	{r7}
 24661              	.LCFI56:
 24662              		.cfi_def_cfa_offset 4
 24663 0676 00AF     		add	r7, sp, #0
 24664              		.cfi_offset 7, -4
 24665              	.LCFI57:
 24666              		.cfi_def_cfa_register 7
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Return the multi mode conversion value */
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 24667              		.loc 1 1002 0
 24668 0678 42F20833 		movw	r3, #8968
 24669 067c C4F20103 		movt	r3, 16385
 24670 0680 1B68     		ldr	r3, [r3, #0]
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24671              		.loc 1 1003 0
 24672 0682 1846     		mov	r0, r3
 24673 0684 BD46     		mov	sp, r7
 24674 0686 80BC     		pop	{r7}
 24675 0688 7047     		bx	lr
 24676              		.cfi_endproc
 24677              	.LFE48:
 24679 068a 00BF     		.align	2
 24680              		.global	ADC_DMACmd
 24681              		.thumb
 24682              		.thumb_func
 24684              	ADC_DMACmd:
 24685              	.LFB49:
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @}
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @verbatim   
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================  
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   channels.
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @endverbatim
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  /**
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24686              		.loc 1 1049 0
 24687              		.cfi_startproc
 24688              		@ args = 0, pretend = 0, frame = 8
 24689              		@ frame_needed = 1, uses_anonymous_args = 0
 24690              		@ link register save eliminated.
 24691 068c 80B4     		push	{r7}
 24692              	.LCFI58:
 24693              		.cfi_def_cfa_offset 4
 24694 068e 83B0     		sub	sp, sp, #12
 24695              	.LCFI59:
 24696              		.cfi_def_cfa_offset 16
 24697 0690 00AF     		add	r7, sp, #0
 24698              		.cfi_offset 7, -4
 24699              	.LCFI60:
 24700              		.cfi_def_cfa_register 7
 24701 0692 7860     		str	r0, [r7, #4]
 24702 0694 0B46     		mov	r3, r1
 24703 0696 FB70     		strb	r3, [r7, #3]
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 24704              		.loc 1 1053 0
 24705 0698 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24706 069a 002B     		cmp	r3, #0
 24707 069c 06D0     		beq	.L41
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 24708              		.loc 1 1056 0
 24709 069e 7B68     		ldr	r3, [r7, #4]
 24710 06a0 9B68     		ldr	r3, [r3, #8]
 24711 06a2 43F48072 		orr	r2, r3, #256
 24712 06a6 7B68     		ldr	r3, [r7, #4]
 24713 06a8 9A60     		str	r2, [r3, #8]
 24714 06aa 05E0     		b	.L40
 24715              	.L41:
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 24716              		.loc 1 1061 0
 24717 06ac 7B68     		ldr	r3, [r7, #4]
 24718 06ae 9B68     		ldr	r3, [r3, #8]
 24719 06b0 23F48072 		bic	r2, r3, #256
 24720 06b4 7B68     		ldr	r3, [r7, #4]
 24721 06b6 9A60     		str	r2, [r3, #8]
 24722              	.L40:
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24723              		.loc 1 1063 0
 24724 06b8 07F10C07 		add	r7, r7, #12
 24725 06bc BD46     		mov	sp, r7
 24726 06be 80BC     		pop	{r7}
 24727 06c0 7047     		bx	lr
 24728              		.cfi_endproc
 24729              	.LFE49:
 24731 06c2 00BF     		.align	2
 24732              		.global	ADC_DMARequestAfterLastTransferCmd
 24733              		.thumb
 24734              		.thumb_func
 24736              	ADC_DMARequestAfterLastTransferCmd:
 24737              	.LFB50:
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24738              		.loc 1 1073 0
 24739              		.cfi_startproc
 24740              		@ args = 0, pretend = 0, frame = 8
 24741              		@ frame_needed = 1, uses_anonymous_args = 0
 24742              		@ link register save eliminated.
 24743 06c4 80B4     		push	{r7}
 24744              	.LCFI61:
 24745              		.cfi_def_cfa_offset 4
 24746 06c6 83B0     		sub	sp, sp, #12
 24747              	.LCFI62:
 24748              		.cfi_def_cfa_offset 16
 24749 06c8 00AF     		add	r7, sp, #0
 24750              		.cfi_offset 7, -4
 24751              	.LCFI63:
 24752              		.cfi_def_cfa_register 7
 24753 06ca 7860     		str	r0, [r7, #4]
 24754 06cc 0B46     		mov	r3, r1
 24755 06ce FB70     		strb	r3, [r7, #3]
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 24756              		.loc 1 1077 0
 24757 06d0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24758 06d2 002B     		cmp	r3, #0
 24759 06d4 06D0     		beq	.L44
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 24760              		.loc 1 1080 0
 24761 06d6 7B68     		ldr	r3, [r7, #4]
 24762 06d8 9B68     		ldr	r3, [r3, #8]
 24763 06da 43F40072 		orr	r2, r3, #512
 24764 06de 7B68     		ldr	r3, [r7, #4]
 24765 06e0 9A60     		str	r2, [r3, #8]
 24766 06e2 05E0     		b	.L43
 24767              	.L44:
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 24768              		.loc 1 1085 0
 24769 06e4 7B68     		ldr	r3, [r7, #4]
 24770 06e6 9B68     		ldr	r3, [r3, #8]
 24771 06e8 23F40072 		bic	r2, r3, #512
 24772 06ec 7B68     		ldr	r3, [r7, #4]
 24773 06ee 9A60     		str	r2, [r3, #8]
 24774              	.L43:
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24775              		.loc 1 1087 0
 24776 06f0 07F10C07 		add	r7, r7, #12
 24777 06f4 BD46     		mov	sp, r7
 24778 06f6 80BC     		pop	{r7}
 24779 06f8 7047     		bx	lr
 24780              		.cfi_endproc
 24781              	.LFE50:
 24783 06fa 00BF     		.align	2
 24784              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 24785              		.thumb
 24786              		.thumb_func
 24788              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 24789              	.LFB51:
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24790              		.loc 1 1100 0
 24791              		.cfi_startproc
 24792              		@ args = 0, pretend = 0, frame = 8
 24793              		@ frame_needed = 1, uses_anonymous_args = 0
 24794              		@ link register save eliminated.
 24795 06fc 80B4     		push	{r7}
 24796              	.LCFI64:
 24797              		.cfi_def_cfa_offset 4
 24798 06fe 83B0     		sub	sp, sp, #12
 24799              	.LCFI65:
 24800              		.cfi_def_cfa_offset 16
 24801 0700 00AF     		add	r7, sp, #0
 24802              		.cfi_offset 7, -4
 24803              	.LCFI66:
 24804              		.cfi_def_cfa_register 7
 24805 0702 0346     		mov	r3, r0
 24806 0704 FB71     		strb	r3, [r7, #7]
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 24807              		.loc 1 1103 0
 24808 0706 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24809 0708 002B     		cmp	r3, #0
 24810 070a 0CD0     		beq	.L47
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 24811              		.loc 1 1106 0
 24812 070c 4FF40C53 		mov	r3, #8960
 24813 0710 C4F20103 		movt	r3, 16385
 24814 0714 4FF40C52 		mov	r2, #8960
 24815 0718 C4F20102 		movt	r2, 16385
 24816 071c 5268     		ldr	r2, [r2, #4]
 24817 071e 42F40052 		orr	r2, r2, #8192
 24818 0722 5A60     		str	r2, [r3, #4]
 24819 0724 0BE0     		b	.L46
 24820              	.L47:
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 24821              		.loc 1 1111 0
 24822 0726 4FF40C53 		mov	r3, #8960
 24823 072a C4F20103 		movt	r3, 16385
 24824 072e 4FF40C52 		mov	r2, #8960
 24825 0732 C4F20102 		movt	r2, 16385
 24826 0736 5268     		ldr	r2, [r2, #4]
 24827 0738 22F40052 		bic	r2, r2, #8192
 24828 073c 5A60     		str	r2, [r3, #4]
 24829              	.L46:
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 24830              		.loc 1 1113 0
 24831 073e 07F10C07 		add	r7, r7, #12
 24832 0742 BD46     		mov	sp, r7
 24833 0744 80BC     		pop	{r7}
 24834 0746 7047     		bx	lr
 24835              		.cfi_endproc
 24836              	.LFE51:
 24838              		.align	2
 24839              		.global	ADC_InjectedChannelConfig
 24840              		.thumb
 24841              		.thumb_func
 24843              	ADC_InjectedChannelConfig:
 24844              	.LFB52:
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @}
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @verbatim   
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                      Injected channels Configuration functions
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================  
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   it is composed of 2 sub sections : 
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     - Configure the sampling time for each channel    
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     - Activate the Auto injected Mode  
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     - Activate the Discontinuous Mode 
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     - scan mode activation  
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     - External/software trigger source   
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     - External trigger edge 
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     - injected channels sequencer.
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       converted data of the specific injected channel.
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @endverbatim
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */ 
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 24845              		.loc 1 1187 0
 24846              		.cfi_startproc
 24847              		@ args = 0, pretend = 0, frame = 24
 24848              		@ frame_needed = 1, uses_anonymous_args = 0
 24849              		@ link register save eliminated.
 24850 0748 80B4     		push	{r7}
 24851              	.LCFI67:
 24852              		.cfi_def_cfa_offset 4
 24853 074a 87B0     		sub	sp, sp, #28
 24854              	.LCFI68:
 24855              		.cfi_def_cfa_offset 32
 24856 074c 00AF     		add	r7, sp, #0
 24857              		.cfi_offset 7, -4
 24858              	.LCFI69:
 24859              		.cfi_def_cfa_register 7
 24860 074e 7860     		str	r0, [r7, #4]
 24861 0750 F970     		strb	r1, [r7, #3]
 24862 0752 BA70     		strb	r2, [r7, #2]
 24863 0754 7B70     		strb	r3, [r7, #1]
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 24864              		.loc 1 1188 0
 24865 0756 4FF00003 		mov	r3, #0
 24866 075a 7B61     		str	r3, [r7, #20]
 24867 075c 4FF00003 		mov	r3, #0
 24868 0760 3B61     		str	r3, [r7, #16]
 24869 0762 4FF00003 		mov	r3, #0
 24870 0766 FB60     		str	r3, [r7, #12]
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 24871              		.loc 1 1195 0
 24872 0768 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24873 076a 092B     		cmp	r3, #9
 24874 076c 29D9     		bls	.L50
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Get the old register value */
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 24875              		.loc 1 1198 0
 24876 076e 7B68     		ldr	r3, [r7, #4]
 24877 0770 DB68     		ldr	r3, [r3, #12]
 24878 0772 7B61     		str	r3, [r7, #20]
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to clear */
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 24879              		.loc 1 1200 0
 24880 0774 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24881 0776 1346     		mov	r3, r2
 24882 0778 4FEA4303 		lsl	r3, r3, #1
 24883 077c 1344     		add	r3, r3, r2
 24884 077e A3F11E03 		sub	r3, r3, #30
 24885 0782 4FF00702 		mov	r2, #7
 24886 0786 02FA03F3 		lsl	r3, r2, r3
 24887 078a 3B61     		str	r3, [r7, #16]
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Clear the old sample time */
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 24888              		.loc 1 1202 0
 24889 078c 3B69     		ldr	r3, [r7, #16]
 24890 078e 6FEA0303 		mvn	r3, r3
 24891 0792 7A69     		ldr	r2, [r7, #20]
 24892 0794 02EA0303 		and	r3, r2, r3
 24893 0798 7B61     		str	r3, [r7, #20]
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to set */
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 24894              		.loc 1 1204 0
 24895 079a 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 24896 079c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24897 079e 1346     		mov	r3, r2
 24898 07a0 4FEA4303 		lsl	r3, r3, #1
 24899 07a4 1344     		add	r3, r3, r2
 24900 07a6 A3F11E03 		sub	r3, r3, #30
 24901 07aa 01FA03F3 		lsl	r3, r1, r3
 24902 07ae 3B61     		str	r3, [r7, #16]
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Set the new sample time */
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 24903              		.loc 1 1206 0
 24904 07b0 7A69     		ldr	r2, [r7, #20]
 24905 07b2 3B69     		ldr	r3, [r7, #16]
 24906 07b4 42EA0303 		orr	r3, r2, r3
 24907 07b8 7B61     		str	r3, [r7, #20]
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Store the new register value */
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 24908              		.loc 1 1208 0
 24909 07ba 7B68     		ldr	r3, [r7, #4]
 24910 07bc 7A69     		ldr	r2, [r7, #20]
 24911 07be DA60     		str	r2, [r3, #12]
 24912 07c0 24E0     		b	.L51
 24913              	.L50:
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Get the old register value */
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 24914              		.loc 1 1213 0
 24915 07c2 7B68     		ldr	r3, [r7, #4]
 24916 07c4 1B69     		ldr	r3, [r3, #16]
 24917 07c6 7B61     		str	r3, [r7, #20]
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to clear */
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 24918              		.loc 1 1215 0
 24919 07c8 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24920 07ca 1346     		mov	r3, r2
 24921 07cc 4FEA4303 		lsl	r3, r3, #1
 24922 07d0 1344     		add	r3, r3, r2
 24923 07d2 4FF00702 		mov	r2, #7
 24924 07d6 02FA03F3 		lsl	r3, r2, r3
 24925 07da 3B61     		str	r3, [r7, #16]
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Clear the old sample time */
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 24926              		.loc 1 1217 0
 24927 07dc 3B69     		ldr	r3, [r7, #16]
 24928 07de 6FEA0303 		mvn	r3, r3
 24929 07e2 7A69     		ldr	r2, [r7, #20]
 24930 07e4 02EA0303 		and	r3, r2, r3
 24931 07e8 7B61     		str	r3, [r7, #20]
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Calculate the mask to set */
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 24932              		.loc 1 1219 0
 24933 07ea 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 24934 07ec FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24935 07ee 1346     		mov	r3, r2
 24936 07f0 4FEA4303 		lsl	r3, r3, #1
 24937 07f4 1344     		add	r3, r3, r2
 24938 07f6 01FA03F3 		lsl	r3, r1, r3
 24939 07fa 3B61     		str	r3, [r7, #16]
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Set the new sample time */
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 24940              		.loc 1 1221 0
 24941 07fc 7A69     		ldr	r2, [r7, #20]
 24942 07fe 3B69     		ldr	r3, [r7, #16]
 24943 0800 42EA0303 		orr	r3, r2, r3
 24944 0804 7B61     		str	r3, [r7, #20]
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Store the new register value */
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 24945              		.loc 1 1223 0
 24946 0806 7B68     		ldr	r3, [r7, #4]
 24947 0808 7A69     		ldr	r2, [r7, #20]
 24948 080a 1A61     		str	r2, [r3, #16]
 24949              	.L51:
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Rank configuration */
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the old register value */
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 24950              		.loc 1 1227 0
 24951 080c 7B68     		ldr	r3, [r7, #4]
 24952 080e 9B6B     		ldr	r3, [r3, #56]
 24953 0810 7B61     		str	r3, [r7, #20]
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 24954              		.loc 1 1229 0
 24955 0812 7B69     		ldr	r3, [r7, #20]
 24956 0814 03F44013 		and	r3, r3, #3145728
 24957 0818 4FEA1353 		lsr	r3, r3, #20
 24958 081c FB60     		str	r3, [r7, #12]
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 24959              		.loc 1 1231 0
 24960 081e FB68     		ldr	r3, [r7, #12]
 24961 0820 DBB2     		uxtb	r3, r3
 24962 0822 6FEA0303 		mvn	r3, r3
 24963 0826 DAB2     		uxtb	r2, r3
 24964 0828 BB78     		ldrb	r3, [r7, #2]
 24965 082a 1344     		add	r3, r2, r3
 24966 082c DBB2     		uxtb	r3, r3
 24967 082e 03F10303 		add	r3, r3, #3
 24968 0832 DBB2     		uxtb	r3, r3
 24969 0834 1A46     		mov	r2, r3
 24970 0836 1346     		mov	r3, r2
 24971 0838 4FEA8303 		lsl	r3, r3, #2
 24972 083c 1344     		add	r3, r3, r2
 24973 083e 4FF01F02 		mov	r2, #31
 24974 0842 02FA03F3 		lsl	r3, r2, r3
 24975 0846 3B61     		str	r3, [r7, #16]
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 24976              		.loc 1 1233 0
 24977 0848 3B69     		ldr	r3, [r7, #16]
 24978 084a 6FEA0303 		mvn	r3, r3
 24979 084e 7A69     		ldr	r2, [r7, #20]
 24980 0850 02EA0303 		and	r3, r2, r3
 24981 0854 7B61     		str	r3, [r7, #20]
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 24982              		.loc 1 1235 0
 24983 0856 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 24984 0858 FB68     		ldr	r3, [r7, #12]
 24985 085a DBB2     		uxtb	r3, r3
 24986 085c 6FEA0303 		mvn	r3, r3
 24987 0860 DAB2     		uxtb	r2, r3
 24988 0862 BB78     		ldrb	r3, [r7, #2]
 24989 0864 1344     		add	r3, r2, r3
 24990 0866 DBB2     		uxtb	r3, r3
 24991 0868 03F10303 		add	r3, r3, #3
 24992 086c DBB2     		uxtb	r3, r3
 24993 086e 1A46     		mov	r2, r3
 24994 0870 1346     		mov	r3, r2
 24995 0872 4FEA8303 		lsl	r3, r3, #2
 24996 0876 1344     		add	r3, r3, r2
 24997 0878 01FA03F3 		lsl	r3, r1, r3
 24998 087c 3B61     		str	r3, [r7, #16]
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= tmpreg2;
 24999              		.loc 1 1237 0
 25000 087e 7A69     		ldr	r2, [r7, #20]
 25001 0880 3B69     		ldr	r3, [r7, #16]
 25002 0882 42EA0303 		orr	r3, r2, r3
 25003 0886 7B61     		str	r3, [r7, #20]
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Store the new register value */
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->JSQR = tmpreg1;
 25004              		.loc 1 1239 0
 25005 0888 7B68     		ldr	r3, [r7, #4]
 25006 088a 7A69     		ldr	r2, [r7, #20]
 25007 088c 9A63     		str	r2, [r3, #56]
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25008              		.loc 1 1240 0
 25009 088e 07F11C07 		add	r7, r7, #28
 25010 0892 BD46     		mov	sp, r7
 25011 0894 80BC     		pop	{r7}
 25012 0896 7047     		bx	lr
 25013              		.cfi_endproc
 25014              	.LFE52:
 25016              		.align	2
 25017              		.global	ADC_InjectedSequencerLengthConfig
 25018              		.thumb
 25019              		.thumb_func
 25021              	ADC_InjectedSequencerLengthConfig:
 25022              	.LFB53:
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  Length: The sequencer length. 
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25023              		.loc 1 1250 0
 25024              		.cfi_startproc
 25025              		@ args = 0, pretend = 0, frame = 16
 25026              		@ frame_needed = 1, uses_anonymous_args = 0
 25027              		@ link register save eliminated.
 25028 0898 80B4     		push	{r7}
 25029              	.LCFI70:
 25030              		.cfi_def_cfa_offset 4
 25031 089a 85B0     		sub	sp, sp, #20
 25032              	.LCFI71:
 25033              		.cfi_def_cfa_offset 24
 25034 089c 00AF     		add	r7, sp, #0
 25035              		.cfi_offset 7, -4
 25036              	.LCFI72:
 25037              		.cfi_def_cfa_register 7
 25038 089e 7860     		str	r0, [r7, #4]
 25039 08a0 0B46     		mov	r3, r1
 25040 08a2 FB70     		strb	r3, [r7, #3]
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0;
 25041              		.loc 1 1251 0
 25042 08a4 4FF00003 		mov	r3, #0
 25043 08a8 FB60     		str	r3, [r7, #12]
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg2 = 0;
 25044              		.loc 1 1252 0
 25045 08aa 4FF00003 		mov	r3, #0
 25046 08ae BB60     		str	r3, [r7, #8]
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the old register value */
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 25047              		.loc 1 1258 0
 25048 08b0 7B68     		ldr	r3, [r7, #4]
 25049 08b2 9B6B     		ldr	r3, [r3, #56]
 25050 08b4 FB60     		str	r3, [r7, #12]
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 25051              		.loc 1 1261 0
 25052 08b6 FB68     		ldr	r3, [r7, #12]
 25053 08b8 23F44013 		bic	r3, r3, #3145728
 25054 08bc FB60     		str	r3, [r7, #12]
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg2 = Length - 1; 
 25055              		.loc 1 1264 0
 25056 08be FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25057 08c0 03F1FF33 		add	r3, r3, #-1
 25058 08c4 BB60     		str	r3, [r7, #8]
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 25059              		.loc 1 1265 0
 25060 08c6 BB68     		ldr	r3, [r7, #8]
 25061 08c8 4FEA0353 		lsl	r3, r3, #20
 25062 08cc FA68     		ldr	r2, [r7, #12]
 25063 08ce 42EA0303 		orr	r3, r2, r3
 25064 08d2 FB60     		str	r3, [r7, #12]
1266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Store the new register value */
1268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->JSQR = tmpreg1;
 25065              		.loc 1 1268 0
 25066 08d4 7B68     		ldr	r3, [r7, #4]
 25067 08d6 FA68     		ldr	r2, [r7, #12]
 25068 08d8 9A63     		str	r2, [r3, #56]
1269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25069              		.loc 1 1269 0
 25070 08da 07F11407 		add	r7, r7, #20
 25071 08de BD46     		mov	sp, r7
 25072 08e0 80BC     		pop	{r7}
 25073 08e2 7047     		bx	lr
 25074              		.cfi_endproc
 25075              	.LFE53:
 25077              		.align	2
 25078              		.global	ADC_SetInjectedOffset
 25079              		.thumb
 25080              		.thumb_func
 25082              	ADC_SetInjectedOffset:
 25083              	.LFB54:
1270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter must be a 12bit value.
1282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25084              		.loc 1 1285 0
 25085              		.cfi_startproc
 25086              		@ args = 0, pretend = 0, frame = 16
 25087              		@ frame_needed = 1, uses_anonymous_args = 0
 25088              		@ link register save eliminated.
 25089 08e4 80B4     		push	{r7}
 25090              	.LCFI73:
 25091              		.cfi_def_cfa_offset 4
 25092 08e6 85B0     		sub	sp, sp, #20
 25093              	.LCFI74:
 25094              		.cfi_def_cfa_offset 24
 25095 08e8 00AF     		add	r7, sp, #0
 25096              		.cfi_offset 7, -4
 25097              	.LCFI75:
 25098              		.cfi_def_cfa_register 7
 25099 08ea 7860     		str	r0, [r7, #4]
 25100 08ec 1346     		mov	r3, r2
 25101 08ee 0A46     		mov	r2, r1
 25102 08f0 FA70     		strb	r2, [r7, #3]
 25103 08f2 3B80     		strh	r3, [r7, #0]	@ movhi
1286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     __IO uint32_t tmp = 0;
 25104              		.loc 1 1286 0
 25105 08f4 4FF00003 		mov	r3, #0
 25106 08f8 FB60     		str	r3, [r7, #12]
1287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmp = (uint32_t)ADCx;
 25107              		.loc 1 1292 0
 25108 08fa 7B68     		ldr	r3, [r7, #4]
 25109 08fc FB60     		str	r3, [r7, #12]
1293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmp += ADC_InjectedChannel;
 25110              		.loc 1 1293 0
 25111 08fe FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25112 0900 FB68     		ldr	r3, [r7, #12]
 25113 0902 1344     		add	r3, r2, r3
 25114 0904 FB60     		str	r3, [r7, #12]
1294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the selected injected channel data offset */
1296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 25115              		.loc 1 1296 0
 25116 0906 FB68     		ldr	r3, [r7, #12]
 25117 0908 3A88     		ldrh	r2, [r7, #0]
 25118 090a 1A60     		str	r2, [r3, #0]
1297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25119              		.loc 1 1297 0
 25120 090c 07F11407 		add	r7, r7, #20
 25121 0910 BD46     		mov	sp, r7
 25122 0912 80BC     		pop	{r7}
 25123 0914 7047     		bx	lr
 25124              		.cfi_endproc
 25125              	.LFE54:
 25127 0916 00BF     		.align	2
 25128              		.global	ADC_ExternalTrigInjectedConvConfig
 25129              		.thumb
 25130              		.thumb_func
 25132              	ADC_ExternalTrigInjectedConvConfig:
 25133              	.LFB55:
1298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  /**
1300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25134              		.loc 1 1323 0
 25135              		.cfi_startproc
 25136              		@ args = 0, pretend = 0, frame = 16
 25137              		@ frame_needed = 1, uses_anonymous_args = 0
 25138              		@ link register save eliminated.
 25139 0918 80B4     		push	{r7}
 25140              	.LCFI76:
 25141              		.cfi_def_cfa_offset 4
 25142 091a 85B0     		sub	sp, sp, #20
 25143              	.LCFI77:
 25144              		.cfi_def_cfa_offset 24
 25145 091c 00AF     		add	r7, sp, #0
 25146              		.cfi_offset 7, -4
 25147              	.LCFI78:
 25148              		.cfi_def_cfa_register 7
 25149 091e 7860     		str	r0, [r7, #4]
 25150 0920 3960     		str	r1, [r7, #0]
1324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg = 0;
 25151              		.loc 1 1324 0
 25152 0922 4FF00003 		mov	r3, #0
 25153 0926 FB60     		str	r3, [r7, #12]
1325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the old register value */
1330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg = ADCx->CR2;
 25154              		.loc 1 1330 0
 25155 0928 7B68     		ldr	r3, [r7, #4]
 25156 092a 9B68     		ldr	r3, [r3, #8]
 25157 092c FB60     		str	r3, [r7, #12]
1331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 25158              		.loc 1 1333 0
 25159 092e FB68     		ldr	r3, [r7, #12]
 25160 0930 23F47023 		bic	r3, r3, #983040
 25161 0934 FB60     		str	r3, [r7, #12]
1334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the external event selection for injected group */
1336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 25162              		.loc 1 1336 0
 25163 0936 FA68     		ldr	r2, [r7, #12]
 25164 0938 3B68     		ldr	r3, [r7, #0]
 25165 093a 42EA0303 		orr	r3, r2, r3
 25166 093e FB60     		str	r3, [r7, #12]
1337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Store the new register value */
1339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR2 = tmpreg;
 25167              		.loc 1 1339 0
 25168 0940 7B68     		ldr	r3, [r7, #4]
 25169 0942 FA68     		ldr	r2, [r7, #12]
 25170 0944 9A60     		str	r2, [r3, #8]
1340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25171              		.loc 1 1340 0
 25172 0946 07F11407 		add	r7, r7, #20
 25173 094a BD46     		mov	sp, r7
 25174 094c 80BC     		pop	{r7}
 25175 094e 7047     		bx	lr
 25176              		.cfi_endproc
 25177              	.LFE55:
 25179              		.align	2
 25180              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 25181              		.thumb
 25182              		.thumb_func
 25184              	ADC_ExternalTrigInjectedConvEdgeConfig:
 25185              	.LFB56:
1341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         to start injected conversion. 
1347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *                                                     injected conversion
1350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *                                                               and falling edge
1354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25186              		.loc 1 1357 0
 25187              		.cfi_startproc
 25188              		@ args = 0, pretend = 0, frame = 16
 25189              		@ frame_needed = 1, uses_anonymous_args = 0
 25190              		@ link register save eliminated.
 25191 0950 80B4     		push	{r7}
 25192              	.LCFI79:
 25193              		.cfi_def_cfa_offset 4
 25194 0952 85B0     		sub	sp, sp, #20
 25195              	.LCFI80:
 25196              		.cfi_def_cfa_offset 24
 25197 0954 00AF     		add	r7, sp, #0
 25198              		.cfi_offset 7, -4
 25199              	.LCFI81:
 25200              		.cfi_def_cfa_register 7
 25201 0956 7860     		str	r0, [r7, #4]
 25202 0958 3960     		str	r1, [r7, #0]
1358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t tmpreg = 0;
 25203              		.loc 1 1358 0
 25204 095a 4FF00003 		mov	r3, #0
 25205 095e FB60     		str	r3, [r7, #12]
1359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the old register value */
1363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg = ADCx->CR2;
 25206              		.loc 1 1363 0
 25207 0960 7B68     		ldr	r3, [r7, #4]
 25208 0962 9B68     		ldr	r3, [r3, #8]
 25209 0964 FB60     		str	r3, [r7, #12]
1364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 25210              		.loc 1 1365 0
 25211 0966 FB68     		ldr	r3, [r7, #12]
 25212 0968 23F44013 		bic	r3, r3, #3145728
 25213 096c FB60     		str	r3, [r7, #12]
1366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 25214              		.loc 1 1367 0
 25215 096e FA68     		ldr	r2, [r7, #12]
 25216 0970 3B68     		ldr	r3, [r7, #0]
 25217 0972 42EA0303 		orr	r3, r2, r3
 25218 0976 FB60     		str	r3, [r7, #12]
1368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Store the new register value */
1369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR2 = tmpreg;
 25219              		.loc 1 1369 0
 25220 0978 7B68     		ldr	r3, [r7, #4]
 25221 097a FA68     		ldr	r2, [r7, #12]
 25222 097c 9A60     		str	r2, [r3, #8]
1370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25223              		.loc 1 1370 0
 25224 097e 07F11407 		add	r7, r7, #20
 25225 0982 BD46     		mov	sp, r7
 25226 0984 80BC     		pop	{r7}
 25227 0986 7047     		bx	lr
 25228              		.cfi_endproc
 25229              	.LFE56:
 25231              		.align	2
 25232              		.global	ADC_SoftwareStartInjectedConv
 25233              		.thumb
 25234              		.thumb_func
 25236              	ADC_SoftwareStartInjectedConv:
 25237              	.LFB57:
1371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25238              		.loc 1 1378 0
 25239              		.cfi_startproc
 25240              		@ args = 0, pretend = 0, frame = 8
 25241              		@ frame_needed = 1, uses_anonymous_args = 0
 25242              		@ link register save eliminated.
 25243 0988 80B4     		push	{r7}
 25244              	.LCFI82:
 25245              		.cfi_def_cfa_offset 4
 25246 098a 83B0     		sub	sp, sp, #12
 25247              	.LCFI83:
 25248              		.cfi_def_cfa_offset 16
 25249 098c 00AF     		add	r7, sp, #0
 25250              		.cfi_offset 7, -4
 25251              	.LCFI84:
 25252              		.cfi_def_cfa_register 7
 25253 098e 7860     		str	r0, [r7, #4]
1379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 25254              		.loc 1 1382 0
 25255 0990 7B68     		ldr	r3, [r7, #4]
 25256 0992 9B68     		ldr	r3, [r3, #8]
 25257 0994 43F48002 		orr	r2, r3, #4194304
 25258 0998 7B68     		ldr	r3, [r7, #4]
 25259 099a 9A60     		str	r2, [r3, #8]
1383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25260              		.loc 1 1383 0
 25261 099c 07F10C07 		add	r7, r7, #12
 25262 09a0 BD46     		mov	sp, r7
 25263 09a2 80BC     		pop	{r7}
 25264 09a4 7047     		bx	lr
 25265              		.cfi_endproc
 25266              	.LFE57:
 25268 09a6 00BF     		.align	2
 25269              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 25270              		.thumb
 25271              		.thumb_func
 25273              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 25274              	.LFB58:
1384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25275              		.loc 1 1391 0
 25276              		.cfi_startproc
 25277              		@ args = 0, pretend = 0, frame = 16
 25278              		@ frame_needed = 1, uses_anonymous_args = 0
 25279              		@ link register save eliminated.
 25280 09a8 80B4     		push	{r7}
 25281              	.LCFI85:
 25282              		.cfi_def_cfa_offset 4
 25283 09aa 85B0     		sub	sp, sp, #20
 25284              	.LCFI86:
 25285              		.cfi_def_cfa_offset 24
 25286 09ac 00AF     		add	r7, sp, #0
 25287              		.cfi_offset 7, -4
 25288              	.LCFI87:
 25289              		.cfi_def_cfa_register 7
 25290 09ae 7860     		str	r0, [r7, #4]
1392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   FlagStatus bitstatus = RESET;
 25291              		.loc 1 1392 0
 25292 09b0 4FF00003 		mov	r3, #0
 25293 09b4 FB73     		strb	r3, [r7, #15]
1393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 25294              		.loc 1 1397 0
 25295 09b6 7B68     		ldr	r3, [r7, #4]
 25296 09b8 9B68     		ldr	r3, [r3, #8]
 25297 09ba 03F48003 		and	r3, r3, #4194304
 25298 09be 002B     		cmp	r3, #0
 25299 09c0 03D0     		beq	.L58
1398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* JSWSTART bit is set */
1400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     bitstatus = SET;
 25300              		.loc 1 1400 0
 25301 09c2 4FF00103 		mov	r3, #1
 25302 09c6 FB73     		strb	r3, [r7, #15]
 25303 09c8 02E0     		b	.L59
 25304              	.L58:
1401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* JSWSTART bit is reset */
1405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     bitstatus = RESET;
 25305              		.loc 1 1405 0
 25306 09ca 4FF00003 		mov	r3, #0
 25307 09ce FB73     		strb	r3, [r7, #15]
 25308              	.L59:
1406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Return the JSWSTART bit status */
1408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   return  bitstatus;
 25309              		.loc 1 1408 0
 25310 09d0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25311              		.loc 1 1409 0
 25312 09d2 1846     		mov	r0, r3
 25313 09d4 07F11407 		add	r7, r7, #20
 25314 09d8 BD46     		mov	sp, r7
 25315 09da 80BC     		pop	{r7}
 25316 09dc 7047     		bx	lr
 25317              		.cfi_endproc
 25318              	.LFE58:
 25320 09de 00BF     		.align	2
 25321              		.global	ADC_AutoInjectedConvCmd
 25322              		.thumb
 25323              		.thumb_func
 25325              	ADC_AutoInjectedConvCmd:
 25326              	.LFB59:
1410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         conversion after regular one.
1414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25327              		.loc 1 1420 0
 25328              		.cfi_startproc
 25329              		@ args = 0, pretend = 0, frame = 8
 25330              		@ frame_needed = 1, uses_anonymous_args = 0
 25331              		@ link register save eliminated.
 25332 09e0 80B4     		push	{r7}
 25333              	.LCFI88:
 25334              		.cfi_def_cfa_offset 4
 25335 09e2 83B0     		sub	sp, sp, #12
 25336              	.LCFI89:
 25337              		.cfi_def_cfa_offset 16
 25338 09e4 00AF     		add	r7, sp, #0
 25339              		.cfi_offset 7, -4
 25340              	.LCFI90:
 25341              		.cfi_def_cfa_register 7
 25342 09e6 7860     		str	r0, [r7, #4]
 25343 09e8 0B46     		mov	r3, r1
 25344 09ea FB70     		strb	r3, [r7, #3]
1421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 25345              		.loc 1 1424 0
 25346 09ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25347 09ee 002B     		cmp	r3, #0
 25348 09f0 06D0     		beq	.L61
1425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 25349              		.loc 1 1427 0
 25350 09f2 7B68     		ldr	r3, [r7, #4]
 25351 09f4 5B68     		ldr	r3, [r3, #4]
 25352 09f6 43F48062 		orr	r2, r3, #1024
 25353 09fa 7B68     		ldr	r3, [r7, #4]
 25354 09fc 5A60     		str	r2, [r3, #4]
 25355 09fe 05E0     		b	.L60
 25356              	.L61:
1428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 25357              		.loc 1 1432 0
 25358 0a00 7B68     		ldr	r3, [r7, #4]
 25359 0a02 5B68     		ldr	r3, [r3, #4]
 25360 0a04 23F48062 		bic	r2, r3, #1024
 25361 0a08 7B68     		ldr	r3, [r7, #4]
 25362 0a0a 5A60     		str	r2, [r3, #4]
 25363              	.L60:
1433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25364              		.loc 1 1434 0
 25365 0a0c 07F10C07 		add	r7, r7, #12
 25366 0a10 BD46     		mov	sp, r7
 25367 0a12 80BC     		pop	{r7}
 25368 0a14 7047     		bx	lr
 25369              		.cfi_endproc
 25370              	.LFE59:
 25372 0a16 00BF     		.align	2
 25373              		.global	ADC_InjectedDiscModeCmd
 25374              		.thumb
 25375              		.thumb_func
 25377              	ADC_InjectedDiscModeCmd:
 25378              	.LFB60:
1435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         channel for the specified ADC
1439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *         group channel.
1442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25379              		.loc 1 1446 0
 25380              		.cfi_startproc
 25381              		@ args = 0, pretend = 0, frame = 8
 25382              		@ frame_needed = 1, uses_anonymous_args = 0
 25383              		@ link register save eliminated.
 25384 0a18 80B4     		push	{r7}
 25385              	.LCFI91:
 25386              		.cfi_def_cfa_offset 4
 25387 0a1a 83B0     		sub	sp, sp, #12
 25388              	.LCFI92:
 25389              		.cfi_def_cfa_offset 16
 25390 0a1c 00AF     		add	r7, sp, #0
 25391              		.cfi_offset 7, -4
 25392              	.LCFI93:
 25393              		.cfi_def_cfa_register 7
 25394 0a1e 7860     		str	r0, [r7, #4]
 25395 0a20 0B46     		mov	r3, r1
 25396 0a22 FB70     		strb	r3, [r7, #3]
1447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 25397              		.loc 1 1450 0
 25398 0a24 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25399 0a26 002B     		cmp	r3, #0
 25400 0a28 06D0     		beq	.L64
1451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 25401              		.loc 1 1453 0
 25402 0a2a 7B68     		ldr	r3, [r7, #4]
 25403 0a2c 5B68     		ldr	r3, [r3, #4]
 25404 0a2e 43F48052 		orr	r2, r3, #4096
 25405 0a32 7B68     		ldr	r3, [r7, #4]
 25406 0a34 5A60     		str	r2, [r3, #4]
 25407 0a36 05E0     		b	.L63
 25408              	.L64:
1454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 25409              		.loc 1 1458 0
 25410 0a38 7B68     		ldr	r3, [r7, #4]
 25411 0a3a 5B68     		ldr	r3, [r3, #4]
 25412 0a3c 23F48052 		bic	r2, r3, #4096
 25413 0a40 7B68     		ldr	r3, [r7, #4]
 25414 0a42 5A60     		str	r2, [r3, #4]
 25415              	.L63:
1459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25416              		.loc 1 1460 0
 25417 0a44 07F10C07 		add	r7, r7, #12
 25418 0a48 BD46     		mov	sp, r7
 25419 0a4a 80BC     		pop	{r7}
 25420 0a4c 7047     		bx	lr
 25421              		.cfi_endproc
 25422              	.LFE60:
 25424 0a4e 00BF     		.align	2
 25425              		.global	ADC_GetInjectedConversionValue
 25426              		.thumb
 25427              		.thumb_func
 25429              	ADC_GetInjectedConversionValue:
 25430              	.LFB61:
1461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval The Data conversion value.
1472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25431              		.loc 1 1474 0
 25432              		.cfi_startproc
 25433              		@ args = 0, pretend = 0, frame = 16
 25434              		@ frame_needed = 1, uses_anonymous_args = 0
 25435              		@ link register save eliminated.
 25436 0a50 80B4     		push	{r7}
 25437              	.LCFI94:
 25438              		.cfi_def_cfa_offset 4
 25439 0a52 85B0     		sub	sp, sp, #20
 25440              	.LCFI95:
 25441              		.cfi_def_cfa_offset 24
 25442 0a54 00AF     		add	r7, sp, #0
 25443              		.cfi_offset 7, -4
 25444              	.LCFI96:
 25445              		.cfi_def_cfa_register 7
 25446 0a56 7860     		str	r0, [r7, #4]
 25447 0a58 0B46     		mov	r3, r1
 25448 0a5a FB70     		strb	r3, [r7, #3]
1475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   __IO uint32_t tmp = 0;
 25449              		.loc 1 1475 0
 25450 0a5c 4FF00003 		mov	r3, #0
 25451 0a60 FB60     		str	r3, [r7, #12]
1476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmp = (uint32_t)ADCx;
 25452              		.loc 1 1481 0
 25453 0a62 7B68     		ldr	r3, [r7, #4]
 25454 0a64 FB60     		str	r3, [r7, #12]
1482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 25455              		.loc 1 1482 0
 25456 0a66 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25457 0a68 FB68     		ldr	r3, [r7, #12]
 25458 0a6a 1344     		add	r3, r2, r3
 25459 0a6c 03F12803 		add	r3, r3, #40
 25460 0a70 FB60     		str	r3, [r7, #12]
1483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 25461              		.loc 1 1485 0
 25462 0a72 FB68     		ldr	r3, [r7, #12]
 25463 0a74 1B68     		ldr	r3, [r3, #0]
 25464 0a76 9BB2     		uxth	r3, r3
1486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25465              		.loc 1 1486 0
 25466 0a78 1846     		mov	r0, r3
 25467 0a7a 07F11407 		add	r7, r7, #20
 25468 0a7e BD46     		mov	sp, r7
 25469 0a80 80BC     		pop	{r7}
 25470 0a82 7047     		bx	lr
 25471              		.cfi_endproc
 25472              	.LFE61:
 25474              		.align	2
 25475              		.global	ADC_ITConfig
 25476              		.thumb
 25477              		.thumb_func
 25479              	ADC_ITConfig:
 25480              	.LFB62:
1487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @}
1489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  *
1494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @verbatim   
1495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================
1496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                    Interrupts and flags management functions
1497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****  ===============================================================================  
1498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   3 groups:
1504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   =================================================
1507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Flags :
1508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ---------- 
1509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****               conversion starts.
1518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Interrupts :
1520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ------------
1521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                      conversion event.
1524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   =================================================
1528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Flags :
1529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ---------- 
1530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                the end of injected GROUP conversion  
1532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****               
1533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                injected GROUP conversion starts.
1535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Interrupts :
1537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ------------
1538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                       conversion event.     
1540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ================================================= 
1543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Flags :
1544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ---------- 
1545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****               crosses the programmed thresholds values.
1547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****               
1548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   Interrupts :
1549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ------------
1550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   
1556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****       
1560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****                                  (corresponding Flag). 
1565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** @endverbatim
1566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @{
1567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */ 
1568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25481              		.loc 1 1582 0
 25482              		.cfi_startproc
 25483              		@ args = 0, pretend = 0, frame = 16
 25484              		@ frame_needed = 1, uses_anonymous_args = 0
 25485              		@ link register save eliminated.
 25486 0a84 80B4     		push	{r7}
 25487              	.LCFI97:
 25488              		.cfi_def_cfa_offset 4
 25489 0a86 85B0     		sub	sp, sp, #20
 25490              	.LCFI98:
 25491              		.cfi_def_cfa_offset 24
 25492 0a88 00AF     		add	r7, sp, #0
 25493              		.cfi_offset 7, -4
 25494              	.LCFI99:
 25495              		.cfi_def_cfa_register 7
 25496 0a8a 7860     		str	r0, [r7, #4]
 25497 0a8c 1346     		mov	r3, r2
 25498 0a8e 0A46     		mov	r2, r1	@ movhi
 25499 0a90 7A80     		strh	r2, [r7, #2]	@ movhi
 25500 0a92 7B70     		strb	r3, [r7, #1]
1583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t itmask = 0;
 25501              		.loc 1 1583 0
 25502 0a94 4FF00003 		mov	r3, #0
 25503 0a98 FB60     		str	r3, [r7, #12]
1584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the ADC IT index */
1590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 25504              		.loc 1 1590 0
 25505 0a9a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25506 0a9c DBB2     		uxtb	r3, r3
 25507 0a9e FB60     		str	r3, [r7, #12]
1591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 25508              		.loc 1 1591 0
 25509 0aa0 FB68     		ldr	r3, [r7, #12]
 25510 0aa2 4FF00102 		mov	r2, #1
 25511 0aa6 02FA03F3 		lsl	r3, r2, r3
 25512 0aaa FB60     		str	r3, [r7, #12]
1592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (NewState != DISABLE)
 25513              		.loc 1 1593 0
 25514 0aac 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 25515 0aae 002B     		cmp	r3, #0
 25516 0ab0 07D0     		beq	.L68
1594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR1 |= itmask;
 25517              		.loc 1 1596 0
 25518 0ab2 7B68     		ldr	r3, [r7, #4]
 25519 0ab4 5A68     		ldr	r2, [r3, #4]
 25520 0ab6 FB68     		ldr	r3, [r7, #12]
 25521 0ab8 42EA0302 		orr	r2, r2, r3
 25522 0abc 7B68     		ldr	r3, [r7, #4]
 25523 0abe 5A60     		str	r2, [r3, #4]
 25524 0ac0 08E0     		b	.L67
 25525              	.L68:
1597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 25526              		.loc 1 1601 0
 25527 0ac2 7B68     		ldr	r3, [r7, #4]
 25528 0ac4 5A68     		ldr	r2, [r3, #4]
 25529 0ac6 FB68     		ldr	r3, [r7, #12]
 25530 0ac8 6FEA0303 		mvn	r3, r3
 25531 0acc 02EA0302 		and	r2, r2, r3
 25532 0ad0 7B68     		ldr	r3, [r7, #4]
 25533 0ad2 5A60     		str	r2, [r3, #4]
 25534              	.L67:
1602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25535              		.loc 1 1603 0
 25536 0ad4 07F11407 		add	r7, r7, #20
 25537 0ad8 BD46     		mov	sp, r7
 25538 0ada 80BC     		pop	{r7}
 25539 0adc 7047     		bx	lr
 25540              		.cfi_endproc
 25541              	.LFE62:
 25543 0ade 00BF     		.align	2
 25544              		.global	ADC_GetFlagStatus
 25545              		.thumb
 25546              		.thumb_func
 25548              	ADC_GetFlagStatus:
 25549              	.LFB63:
1604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25550              		.loc 1 1619 0
 25551              		.cfi_startproc
 25552              		@ args = 0, pretend = 0, frame = 16
 25553              		@ frame_needed = 1, uses_anonymous_args = 0
 25554              		@ link register save eliminated.
 25555 0ae0 80B4     		push	{r7}
 25556              	.LCFI100:
 25557              		.cfi_def_cfa_offset 4
 25558 0ae2 85B0     		sub	sp, sp, #20
 25559              	.LCFI101:
 25560              		.cfi_def_cfa_offset 24
 25561 0ae4 00AF     		add	r7, sp, #0
 25562              		.cfi_offset 7, -4
 25563              	.LCFI102:
 25564              		.cfi_def_cfa_register 7
 25565 0ae6 7860     		str	r0, [r7, #4]
 25566 0ae8 0B46     		mov	r3, r1
 25567 0aea FB70     		strb	r3, [r7, #3]
1620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   FlagStatus bitstatus = RESET;
 25568              		.loc 1 1620 0
 25569 0aec 4FF00003 		mov	r3, #0
 25570 0af0 FB73     		strb	r3, [r7, #15]
1621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 25571              		.loc 1 1626 0
 25572 0af2 7B68     		ldr	r3, [r7, #4]
 25573 0af4 1A68     		ldr	r2, [r3, #0]
 25574 0af6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25575 0af8 02EA0303 		and	r3, r2, r3
 25576 0afc 002B     		cmp	r3, #0
 25577 0afe 03D0     		beq	.L71
1627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* ADC_FLAG is set */
1629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     bitstatus = SET;
 25578              		.loc 1 1629 0
 25579 0b00 4FF00103 		mov	r3, #1
 25580 0b04 FB73     		strb	r3, [r7, #15]
 25581 0b06 02E0     		b	.L72
 25582              	.L71:
1630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* ADC_FLAG is reset */
1634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     bitstatus = RESET;
 25583              		.loc 1 1634 0
 25584 0b08 4FF00003 		mov	r3, #0
 25585 0b0c FB73     		strb	r3, [r7, #15]
 25586              	.L72:
1635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Return the ADC_FLAG status */
1637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   return  bitstatus;
 25587              		.loc 1 1637 0
 25588 0b0e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25589              		.loc 1 1638 0
 25590 0b10 1846     		mov	r0, r3
 25591 0b12 07F11407 		add	r7, r7, #20
 25592 0b16 BD46     		mov	sp, r7
 25593 0b18 80BC     		pop	{r7}
 25594 0b1a 7047     		bx	lr
 25595              		.cfi_endproc
 25596              	.LFE63:
 25598              		.align	2
 25599              		.global	ADC_ClearFlag
 25600              		.thumb
 25601              		.thumb_func
 25603              	ADC_ClearFlag:
 25604              	.LFB64:
1639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25605              		.loc 1 1654 0
 25606              		.cfi_startproc
 25607              		@ args = 0, pretend = 0, frame = 8
 25608              		@ frame_needed = 1, uses_anonymous_args = 0
 25609              		@ link register save eliminated.
 25610 0b1c 80B4     		push	{r7}
 25611              	.LCFI103:
 25612              		.cfi_def_cfa_offset 4
 25613 0b1e 83B0     		sub	sp, sp, #12
 25614              	.LCFI104:
 25615              		.cfi_def_cfa_offset 16
 25616 0b20 00AF     		add	r7, sp, #0
 25617              		.cfi_offset 7, -4
 25618              	.LCFI105:
 25619              		.cfi_def_cfa_register 7
 25620 0b22 7860     		str	r0, [r7, #4]
 25621 0b24 0B46     		mov	r3, r1
 25622 0b26 FB70     		strb	r3, [r7, #3]
1655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear the selected ADC flags */
1660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 25623              		.loc 1 1660 0
 25624 0b28 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25625 0b2a 6FEA0302 		mvn	r2, r3
 25626 0b2e 7B68     		ldr	r3, [r7, #4]
 25627 0b30 1A60     		str	r2, [r3, #0]
1661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25628              		.loc 1 1661 0
 25629 0b32 07F10C07 		add	r7, r7, #12
 25630 0b36 BD46     		mov	sp, r7
 25631 0b38 80BC     		pop	{r7}
 25632 0b3a 7047     		bx	lr
 25633              		.cfi_endproc
 25634              	.LFE64:
 25636              		.align	2
 25637              		.global	ADC_GetITStatus
 25638              		.thumb
 25639              		.thumb_func
 25641              	ADC_GetITStatus:
 25642              	.LFB65:
1662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25643              		.loc 1 1675 0
 25644              		.cfi_startproc
 25645              		@ args = 0, pretend = 0, frame = 24
 25646              		@ frame_needed = 1, uses_anonymous_args = 0
 25647              		@ link register save eliminated.
 25648 0b3c 80B4     		push	{r7}
 25649              	.LCFI106:
 25650              		.cfi_def_cfa_offset 4
 25651 0b3e 87B0     		sub	sp, sp, #28
 25652              	.LCFI107:
 25653              		.cfi_def_cfa_offset 32
 25654 0b40 00AF     		add	r7, sp, #0
 25655              		.cfi_offset 7, -4
 25656              	.LCFI108:
 25657              		.cfi_def_cfa_register 7
 25658 0b42 7860     		str	r0, [r7, #4]
 25659 0b44 0B46     		mov	r3, r1
 25660 0b46 7B80     		strh	r3, [r7, #2]	@ movhi
1676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ITStatus bitstatus = RESET;
 25661              		.loc 1 1676 0
 25662 0b48 4FF00003 		mov	r3, #0
 25663 0b4c FB75     		strb	r3, [r7, #23]
1677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 25664              		.loc 1 1677 0
 25665 0b4e 4FF00003 		mov	r3, #0
 25666 0b52 3B61     		str	r3, [r7, #16]
 25667 0b54 4FF00003 		mov	r3, #0
 25668 0b58 FB60     		str	r3, [r7, #12]
1678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the ADC IT index */
1684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   itmask = ADC_IT >> 8;
 25669              		.loc 1 1684 0
 25670 0b5a 7B88     		ldrh	r3, [r7, #2]
 25671 0b5c 4FEA1323 		lsr	r3, r3, #8
 25672 0b60 9BB2     		uxth	r3, r3
 25673 0b62 3B61     		str	r3, [r7, #16]
1685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 25674              		.loc 1 1687 0
 25675 0b64 7B68     		ldr	r3, [r7, #4]
 25676 0b66 5A68     		ldr	r2, [r3, #4]
 25677 0b68 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25678 0b6a DBB2     		uxtb	r3, r3
 25679 0b6c 4FF00101 		mov	r1, #1
 25680 0b70 01FA03F3 		lsl	r3, r1, r3
 25681 0b74 02EA0303 		and	r3, r2, r3
 25682 0b78 FB60     		str	r3, [r7, #12]
1688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 25683              		.loc 1 1690 0
 25684 0b7a 7B68     		ldr	r3, [r7, #4]
 25685 0b7c 1A68     		ldr	r2, [r3, #0]
 25686 0b7e 3B69     		ldr	r3, [r7, #16]
 25687 0b80 02EA0303 		and	r3, r2, r3
 25688 0b84 002B     		cmp	r3, #0
 25689 0b86 06D0     		beq	.L75
 25690              		.loc 1 1690 0 is_stmt 0 discriminator 1
 25691 0b88 FB68     		ldr	r3, [r7, #12]
 25692 0b8a 002B     		cmp	r3, #0
 25693 0b8c 03D0     		beq	.L75
1691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* ADC_IT is set */
1693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     bitstatus = SET;
 25694              		.loc 1 1693 0 is_stmt 1
 25695 0b8e 4FF00103 		mov	r3, #1
 25696 0b92 FB75     		strb	r3, [r7, #23]
 25697 0b94 02E0     		b	.L76
 25698              	.L75:
1694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   else
1696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   {
1697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     /* ADC_IT is reset */
1698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****     bitstatus = RESET;
 25699              		.loc 1 1698 0
 25700 0b96 4FF00003 		mov	r3, #0
 25701 0b9a FB75     		strb	r3, [r7, #23]
 25702              	.L76:
1699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   }
1700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Return the ADC_IT status */
1701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   return  bitstatus;
 25703              		.loc 1 1701 0
 25704 0b9c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }
 25705              		.loc 1 1702 0
 25706 0b9e 1846     		mov	r0, r3
 25707 0ba0 07F11C07 		add	r7, r7, #28
 25708 0ba4 BD46     		mov	sp, r7
 25709 0ba6 80BC     		pop	{r7}
 25710 0ba8 7047     		bx	lr
 25711              		.cfi_endproc
 25712              	.LFE65:
 25714 0baa 00BF     		.align	2
 25715              		.global	ADC_ClearITPendingBit
 25716              		.thumb
 25717              		.thumb_func
 25719              	ADC_ClearITPendingBit:
 25720              	.LFB66:
1703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** 
1704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** /**
1705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   * @retval None
1714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   */
1715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** {
 25721              		.loc 1 1716 0
 25722              		.cfi_startproc
 25723              		@ args = 0, pretend = 0, frame = 16
 25724              		@ frame_needed = 1, uses_anonymous_args = 0
 25725              		@ link register save eliminated.
 25726 0bac 80B4     		push	{r7}
 25727              	.LCFI109:
 25728              		.cfi_def_cfa_offset 4
 25729 0bae 85B0     		sub	sp, sp, #20
 25730              	.LCFI110:
 25731              		.cfi_def_cfa_offset 24
 25732 0bb0 00AF     		add	r7, sp, #0
 25733              		.cfi_offset 7, -4
 25734              	.LCFI111:
 25735              		.cfi_def_cfa_register 7
 25736 0bb2 7860     		str	r0, [r7, #4]
 25737 0bb4 0B46     		mov	r3, r1
 25738 0bb6 7B80     		strh	r3, [r7, #2]	@ movhi
1717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   uint8_t itmask = 0;
 25739              		.loc 1 1717 0
 25740 0bb8 4FF00003 		mov	r3, #0
 25741 0bbc FB73     		strb	r3, [r7, #15]
1718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Check the parameters */
1719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Get the ADC IT index */
1722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 25742              		.loc 1 1722 0
 25743 0bbe 7B88     		ldrh	r3, [r7, #2]
 25744 0bc0 4FEA1323 		lsr	r3, r3, #8
 25745 0bc4 9BB2     		uxth	r3, r3
 25746 0bc6 FB73     		strb	r3, [r7, #15]
1723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 25747              		.loc 1 1724 0
 25748 0bc8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 25749 0bca 6FEA0302 		mvn	r2, r3
 25750 0bce 7B68     		ldr	r3, [r7, #4]
 25751 0bd0 1A60     		str	r2, [r3, #0]
1725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c **** }                    
 25752              		.loc 1 1725 0
 25753 0bd2 07F11407 		add	r7, r7, #20
 25754 0bd6 BD46     		mov	sp, r7
 25755 0bd8 80BC     		pop	{r7}
 25756 0bda 7047     		bx	lr
 25757              		.cfi_endproc
 25758              	.LFE66:
 25760              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_adc.c
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23418  .text:00000000 $t
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23423  .text:00000000 ADC_DeInit
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23456  .text:00000020 ADC_Init
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23581  .text:000000e8 ADC_StructInit
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23640  .text:00000134 ADC_CommonInit
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23711  .text:00000198 ADC_CommonStructInit
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23758  .text:000001cc ADC_Cmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23810  .text:00000204 ADC_AnalogWatchdogCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23863  .text:00000240 ADC_AnalogWatchdogThresholdsConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23906  .text:00000268 ADC_AnalogWatchdogSingleChannelConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:23959  .text:000002a4 ADC_TempSensorVrefintCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24014  .text:000002f0 ADC_VBATCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24069  .text:0000033c ADC_RegularChannelConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24311  .text:0000050c ADC_SoftwareStartConv
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24348  .text:0000052c ADC_GetSoftwareStartConvStatus
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24400  .text:00000564 ADC_EOCOnEachRegularChannelCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24452  .text:0000059c ADC_ContinuousModeCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24504  .text:000005d4 ADC_DiscModeChannelCountConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24565  .text:00000620 ADC_DiscModeCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24617  .text:00000658 ADC_GetConversionValue
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24653  .text:00000674 ADC_GetMultiModeConversionValue
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24684  .text:0000068c ADC_DMACmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24736  .text:000006c4 ADC_DMARequestAfterLastTransferCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24788  .text:000006fc ADC_MultiModeDMARequestAfterLastTransferCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:24843  .text:00000748 ADC_InjectedChannelConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25021  .text:00000898 ADC_InjectedSequencerLengthConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25082  .text:000008e4 ADC_SetInjectedOffset
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25132  .text:00000918 ADC_ExternalTrigInjectedConvConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25184  .text:00000950 ADC_ExternalTrigInjectedConvEdgeConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25236  .text:00000988 ADC_SoftwareStartInjectedConv
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25273  .text:000009a8 ADC_GetSoftwareStartInjectedConvCmdStatus
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25325  .text:000009e0 ADC_AutoInjectedConvCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25377  .text:00000a18 ADC_InjectedDiscModeCmd
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25429  .text:00000a50 ADC_GetInjectedConversionValue
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25479  .text:00000a84 ADC_ITConfig
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25548  .text:00000ae0 ADC_GetFlagStatus
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25603  .text:00000b1c ADC_ClearFlag
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25641  .text:00000b3c ADC_GetITStatus
C:\Users\red4sch\AppData\Local\Temp\cc3Dw7Ey.s:25719  .text:00000bac ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
