
te_stm32f207_dataflash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff00  08000184  08000184  00008184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000468  20000000  08010084  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000308  20000468  080104ec  00020468  2**2
                  ALLOC
  4 ._user_heap_stack 00000200  20000770  080107f4  00020468  2**0
                  ALLOC
  5 .ARM.attributes 0000002f  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
  6 .debug_abbrev 00003814  00000000  00000000  00020497  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00013692  00000000  00000000  00023cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b653  00000000  00000000  0003733d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 00c38054  00000000  00000000  00042990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008c8e  00000000  00000000  00c7a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00003adf  00000000  00000000  00c83672  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00001b35  00000000  00000000  00c87151  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000548  00000000  00000000  00c88c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006fc5  00000000  00000000  00c891d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000011  00000000  00000000  00c90195  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004b84  00000000  00000000  00c901a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00c94d30  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	da10      	bge.n	80001ba <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8000198:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800019c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001a0:	79fa      	ldrb	r2, [r7, #7]
 80001a2:	f002 020f 	and.w	r2, r2, #15
 80001a6:	f1a2 0104 	sub.w	r1, r2, #4
 80001aa:	683a      	ldr	r2, [r7, #0]
 80001ac:	b2d2      	uxtb	r2, r2
 80001ae:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80001b2:	b2d2      	uxtb	r2, r2
 80001b4:	440b      	add	r3, r1
 80001b6:	761a      	strb	r2, [r3, #24]
 80001b8:	e00d      	b.n	80001d6 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80001ba:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80001be:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001c2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80001c6:	683a      	ldr	r2, [r7, #0]
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80001ce:	b2d2      	uxtb	r2, r2
 80001d0:	440b      	add	r3, r1
 80001d2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80001d6:	f107 070c 	add.w	r7, r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d902      	bls.n	80001f8 <SysTick_Config+0x18>
 80001f2:	f04f 0301 	mov.w	r3, #1
 80001f6:	e01f      	b.n	8000238 <SysTick_Config+0x58>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001f8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80001fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000206:	f102 32ff 	add.w	r2, r2, #4294967295
 800020a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800020c:	f04f 30ff 	mov.w	r0, #4294967295
 8000210:	f04f 010f 	mov.w	r1, #15
 8000214:	f7ff ffb6 	bl	8000184 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000218:	f24e 0310 	movw	r3, #57360	; 0xe010
 800021c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000220:	f04f 0200 	mov.w	r2, #0
 8000224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 8000226:	f24e 0310 	movw	r3, #57360	; 0xe010
 800022a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800022e:	f04f 0207 	mov.w	r2, #7
 8000232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000234:	f04f 0300 	mov.w	r3, #0
}
 8000238:	4618      	mov	r0, r3
 800023a:	f107 0708 	add.w	r7, r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop

08000244 <main>:
  * PAGE_ADRESS читаются данные в буфер read_page и сравниваются с ранее
  * записанными. Если в процессе исполнения не произошло ошибки то мигает
  * светодиод D4. Если была ошибка, то светодиод не мигает.
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af02      	add	r7, sp, #8

  RCC_ClocksTypeDef RCC_Clocks;
  int count;

  /* Инициализация системного таймера */
  RCC_GetClocksFreq(&RCC_Clocks);
 800024a:	f107 0304 	add.w	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f00a f8be 	bl	800a3d0 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800025a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800025e:	fba3 1302 	umull	r1, r3, r3, r2
 8000262:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ffba 	bl	80001e0 <SysTick_Config>

  /* инициализация test_page буфера */
  for (count=0;count<PAGE_SIZE;count++) test_page[count]=(char )count;
 800026c:	f04f 0300 	mov.w	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
 8000272:	e00c      	b.n	800028e <main+0x4a>
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	b2da      	uxtb	r2, r3
 8000278:	f240 6384 	movw	r3, #1668	; 0x684
 800027c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000280:	6979      	ldr	r1, [r7, #20]
 8000282:	440b      	add	r3, r1
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	f103 0301 	add.w	r3, r3, #1
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	2b41      	cmp	r3, #65	; 0x41
 8000292:	ddef      	ble.n	8000274 <main+0x30>

  /* инициализация управления светодиодом D4 */
  STM_EVAL_LEDInit(LED1);
 8000294:	f04f 0000 	mov.w	r0, #0
 8000298:	f000 fdf8 	bl	8000e8c <STM_EVAL_LEDInit>

  /* инициализация интерфейса SPI3*/
  sFLASH_Init();
 800029c:	f000 ff34 	bl	8001108 <sFLASH_Init>
  /*  проверка наличия и работоспособности dataflash */
  if (df_init(&pDf)) {
 80002a0:	f240 700c 	movw	r0, #1804	; 0x70c
 80002a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80002a8:	f001 f9d6 	bl	8001658 <df_init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f000 808b 	beq.w	80003ca <main+0x186>
	  Delay(1000);
 80002b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b8:	f000 f892 	bl	80003e0 <Delay>
	  STM_EVAL_LEDToggle(LED1);
 80002bc:	f04f 0000 	mov.w	r0, #0
 80002c0:	f000 fe4e 	bl	8000f60 <STM_EVAL_LEDToggle>
	  Delay(1000);
 80002c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c8:	f000 f88a 	bl	80003e0 <Delay>
	  STM_EVAL_LEDToggle(LED1);
 80002cc:	f04f 0000 	mov.w	r0, #0
 80002d0:	f000 fe46 	bl	8000f60 <STM_EVAL_LEDToggle>
	  Delay(500);
 80002d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d8:	f000 f882 	bl	80003e0 <Delay>
	  /* стирание странциы  PAGE_ADRESS */
	  df_page_erase(&pDf,PAGE_ADRESS);
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	f04f 0364 	mov.w	r3, #100	; 0x64
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	f240 700c 	movw	r0, #1804	; 0x70c
 80002ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80002f0:	f04f 0181 	mov.w	r1, #129	; 0x81
 80002f4:	f04f 0204 	mov.w	r2, #4
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	f001 f83c 	bl	8001378 <df_send_command>
	  Delay(500);
 8000300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000304:	f000 f86c 	bl	80003e0 <Delay>
	  /* запись страницы в dataflash память */
	  df_page_write(&pDf, &test_page[0], PAGE_SIZE, PAGE_ADRESS);
 8000308:	f04f 0342 	mov.w	r3, #66	; 0x42
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	f04f 0364 	mov.w	r3, #100	; 0x64
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	f240 700c 	movw	r0, #1804	; 0x70c
 8000318:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800031c:	f04f 0182 	mov.w	r1, #130	; 0x82
 8000320:	f04f 0204 	mov.w	r2, #4
 8000324:	f240 6384 	movw	r3, #1668	; 0x684
 8000328:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800032c:	f001 f824 	bl	8001378 <df_send_command>
	  Delay(500);
 8000330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000334:	f000 f854 	bl	80003e0 <Delay>
	  /* чтение страницы из dataflash памяти */
	  df_page_read(&pDf, &read_page[0], PAGE_SIZE, PAGE_ADRESS);
 8000338:	f04f 0342 	mov.w	r3, #66	; 0x42
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	f04f 0364 	mov.w	r3, #100	; 0x64
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	f240 700c 	movw	r0, #1804	; 0x70c
 8000348:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800034c:	f04f 01d2 	mov.w	r1, #210	; 0xd2
 8000350:	f04f 0208 	mov.w	r2, #8
 8000354:	f240 63c8 	movw	r3, #1736	; 0x6c8
 8000358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800035c:	f001 f80c 	bl	8001378 <df_send_command>
	  Delay(500);
 8000360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000364:	f000 f83c 	bl	80003e0 <Delay>

	  for (count=0;count<PAGE_SIZE;count++) test_page[count]=(char )count;
 8000368:	f04f 0300 	mov.w	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
 800036e:	e00c      	b.n	800038a <main+0x146>
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	b2da      	uxtb	r2, r3
 8000374:	f240 6384 	movw	r3, #1668	; 0x684
 8000378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800037c:	6979      	ldr	r1, [r7, #20]
 800037e:	440b      	add	r3, r1
 8000380:	701a      	strb	r2, [r3, #0]
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	f103 0301 	add.w	r3, r3, #1
 8000388:	617b      	str	r3, [r7, #20]
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	2b41      	cmp	r3, #65	; 0x41
 800038e:	ddef      	ble.n	8000370 <main+0x12c>

	  /* проверка соотвествия записанной информации с прочитанной информацией */
	  for (count=0;count<PAGE_SIZE;count++) if (test_page[count]!=
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	e014      	b.n	80003c2 <main+0x17e>
 8000398:	f240 6384 	movw	r3, #1668	; 0x684
 800039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003a0:	697a      	ldr	r2, [r7, #20]
 80003a2:	4413      	add	r3, r2
 80003a4:	781a      	ldrb	r2, [r3, #0]
			  read_page[count]) for (;;);
 80003a6:	f240 63c8 	movw	r3, #1736	; 0x6c8
 80003aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003ae:	6979      	ldr	r1, [r7, #20]
 80003b0:	440b      	add	r3, r1
 80003b2:	781b      	ldrb	r3, [r3, #0]
	  Delay(500);

	  for (count=0;count<PAGE_SIZE;count++) test_page[count]=(char )count;

	  /* проверка соотвествия записанной информации с прочитанной информацией */
	  for (count=0;count<PAGE_SIZE;count++) if (test_page[count]!=
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d000      	beq.n	80003ba <main+0x176>
			  read_page[count]) for (;;);
 80003b8:	e7fe      	b.n	80003b8 <main+0x174>
	  Delay(500);

	  for (count=0;count<PAGE_SIZE;count++) test_page[count]=(char )count;

	  /* проверка соотвествия записанной информации с прочитанной информацией */
	  for (count=0;count<PAGE_SIZE;count++) if (test_page[count]!=
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	f103 0301 	add.w	r3, r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	2b41      	cmp	r3, #65	; 0x41
 80003c6:	dde7      	ble.n	8000398 <main+0x154>
 80003c8:	e000      	b.n	80003cc <main+0x188>
			  read_page[count]) for (;;);

  } else for(;;);
 80003ca:	e7fe      	b.n	80003ca <main+0x186>


  while(1) {
	  STM_EVAL_LEDToggle(LED1);
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	f000 fdc6 	bl	8000f60 <STM_EVAL_LEDToggle>
	  Delay(1000);
 80003d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d8:	f000 f802 	bl	80003e0 <Delay>
  };
 80003dc:	e7f6      	b.n	80003cc <main+0x188>
 80003de:	bf00      	nop

080003e0 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in 10 ms.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	f240 4368 	movw	r3, #1128	; 0x468
 80003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003f2:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 80003f4:	bf00      	nop
 80003f6:	f240 4368 	movw	r3, #1128	; 0x468
 80003fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1f8      	bne.n	80003f6 <Delay+0x16>
}
 8000404:	f107 070c 	add.w	r7, r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop

08000410 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8000414:	f240 4368 	movw	r3, #1128	; 0x468
 8000418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00b      	beq.n	800043a <TimingDelay_Decrement+0x2a>
  {
    TimingDelay--;
 8000422:	f240 4368 	movw	r3, #1128	; 0x468
 8000426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f103 32ff 	add.w	r2, r3, #4294967295
 8000430:	f240 4368 	movw	r3, #1128	; 0x468
 8000434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000438:	601a      	str	r2, [r3, #0]
  }
}
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
 8000440:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
 8000444:	f3ef 8409 	mrs	r4, PSP
 8000448:	4620      	mov	r0, r4
 800044a:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 800044c:	4623      	mov	r3, r4
}
 800044e:	4618      	mov	r0, r3

08000450 <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
 8000450:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
 8000452:	f383 8809 	msr	PSP, r3
 8000456:	4770      	bx	lr

08000458 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
 8000458:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
 800045c:	f3ef 8408 	mrs	r4, MSP
 8000460:	4620      	mov	r0, r4
 8000462:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 8000464:	4623      	mov	r3, r4
}
 8000466:	4618      	mov	r0, r3

08000468 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
 8000468:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
 800046a:	f383 8808 	msr	MSP, r3
 800046e:	4770      	bx	lr

08000470 <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8000476:	f04f 0300 	mov.w	r3, #0
 800047a:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800047c:	f3ef 8412 	mrs	r4, BASEPRI_MASK
 8000480:	607c      	str	r4, [r7, #4]
  return(result);
 8000482:	687b      	ldr	r3, [r7, #4]
}
 8000484:	4618      	mov	r0, r3
 8000486:	f107 0708 	add.w	r7, r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bc90      	pop	{r4, r7}
 800048e:	4770      	bx	lr

08000490 <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f383 8811 	msr	BASEPRI, r3
}
 800049e:	f107 070c 	add.w	r7, r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
 80004a8:	b490      	push	{r4, r7}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  uint32_t result=0;
 80004ae:	f04f 0300 	mov.w	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80004b4:	f3ef 8410 	mrs	r4, PRIMASK
 80004b8:	607c      	str	r4, [r7, #4]
  return(result);
 80004ba:	687b      	ldr	r3, [r7, #4]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	f107 0708 	add.w	r7, r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc90      	pop	{r4, r7}
 80004c6:	4770      	bx	lr

080004c8 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	f107 070c 	add.w	r7, r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
 80004e0:	b490      	push	{r4, r7}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  uint32_t result=0;
 80004e6:	f04f 0300 	mov.w	r3, #0
 80004ea:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 80004ec:	f3ef 8413 	mrs	r4, FAULTMASK
 80004f0:	607c      	str	r4, [r7, #4]
  return(result);
 80004f2:	687b      	ldr	r3, [r7, #4]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	f107 0708 	add.w	r7, r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc90      	pop	{r4, r7}
 80004fe:	4770      	bx	lr

08000500 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f383 8813 	msr	FAULTMASK, r3
}
 800050e:	f107 070c 	add.w	r7, r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
 8000518:	b490      	push	{r4, r7}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  uint32_t result=0;
 800051e:	f04f 0300 	mov.w	r3, #0
 8000522:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000524:	f3ef 8414 	mrs	r4, CONTROL
 8000528:	607c      	str	r4, [r7, #4]
  return(result);
 800052a:	687b      	ldr	r3, [r7, #4]
}
 800052c:	4618      	mov	r0, r3
 800052e:	f107 0708 	add.w	r7, r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bc90      	pop	{r4, r7}
 8000536:	4770      	bx	lr

08000538 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f383 8814 	msr	CONTROL, r3
}
 8000546:	f107 070c 	add.w	r7, r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
 8000550:	b490      	push	{r4, r7}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8000558:	f04f 0300 	mov.w	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	ba1c      	rev	r4, r3
 8000562:	60fc      	str	r4, [r7, #12]
  return(result);
 8000564:	68fb      	ldr	r3, [r7, #12]
}
 8000566:	4618      	mov	r0, r3
 8000568:	f107 0710 	add.w	r7, r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bc90      	pop	{r4, r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
 8000574:	b490      	push	{r4, r7}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 800057e:	f04f 0300 	mov.w	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	ba5c      	rev16	r4, r3
 8000588:	60fc      	str	r4, [r7, #12]
  return(result);
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	4618      	mov	r0, r3
 800058e:	f107 0710 	add.w	r7, r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bc90      	pop	{r4, r7}
 8000596:	4770      	bx	lr

08000598 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
 8000598:	b490      	push	{r4, r7}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 80005a2:	f04f 0300 	mov.w	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	badc      	revsh	r4, r3
 80005ac:	60fc      	str	r4, [r7, #12]
  return(result);
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	f107 0710 	add.w	r7, r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc90      	pop	{r4, r7}
 80005ba:	4770      	bx	lr

080005bc <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
 80005bc:	b490      	push	{r4, r7}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	fa93 f4a3 	rbit	r4, r3
 80005d0:	60fc      	str	r4, [r7, #12]
   return(result);
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	f107 0710 	add.w	r7, r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc90      	pop	{r4, r7}
 80005de:	4770      	bx	lr

080005e0 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
 80005e8:	f04f 0300 	mov.w	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	e8d3 4f4f 	ldrexb	r4, [r3]
 80005f4:	73fc      	strb	r4, [r7, #15]
   return(result);
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	f107 0710 	add.w	r7, r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc90      	pop	{r4, r7}
 8000602:	4770      	bx	lr

08000604 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
 8000604:	b490      	push	{r4, r7}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
 800060c:	f04f 0300 	mov.w	r3, #0
 8000610:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	e8d3 4f5f 	ldrexh	r4, [r3]
 8000618:	81fc      	strh	r4, [r7, #14]
   return(result);
 800061a:	89fb      	ldrh	r3, [r7, #14]
}
 800061c:	4618      	mov	r0, r3
 800061e:	f107 0710 	add.w	r7, r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bc90      	pop	{r4, r7}
 8000626:	4770      	bx	lr

08000628 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
 8000628:	b490      	push	{r4, r7}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	e853 4f00 	ldrex	r4, [r3]
 800063c:	60fc      	str	r4, [r7, #12]
   return(result);
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	4618      	mov	r0, r3
 8000642:	f107 0710 	add.w	r7, r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bc90      	pop	{r4, r7}
 800064a:	4770      	bx	lr

0800064c <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
 800064c:	b490      	push	{r4, r7}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
 8000658:	f04f 0300 	mov.w	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	79fa      	ldrb	r2, [r7, #7]
 8000662:	e8c3 2f44 	strexb	r4, r2, [r3]
 8000666:	60fc      	str	r4, [r7, #12]
   return(result);
 8000668:	68fb      	ldr	r3, [r7, #12]
}
 800066a:	4618      	mov	r0, r3
 800066c:	f107 0710 	add.w	r7, r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bc90      	pop	{r4, r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
 8000678:	b490      	push	{r4, r7}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
 8000684:	f04f 0300 	mov.w	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	88fa      	ldrh	r2, [r7, #6]
 800068e:	e8c3 2f54 	strexh	r4, r2, [r3]
 8000692:	60fc      	str	r4, [r7, #12]
   return(result);
 8000694:	68fb      	ldr	r3, [r7, #12]
}
 8000696:	4618      	mov	r0, r3
 8000698:	f107 0710 	add.w	r7, r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bc90      	pop	{r4, r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
 80006a4:	b490      	push	{r4, r7}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
 80006ae:	f04f 0300 	mov.w	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	e843 2400 	strex	r4, r2, [r3]
 80006bc:	60fc      	str	r4, [r7, #12]
   return(result);
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	f107 0710 	add.w	r7, r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc90      	pop	{r4, r7}
 80006ca:	4770      	bx	lr
 80006cc:	0084      	lsls	r4, r0, #2
 80006ce:	0801      	lsrs	r1, r0, #32
 80006d0:	0000      	lsls	r0, r0, #0
 80006d2:	2000      	movs	r0, #0
 80006d4:	0468      	lsls	r0, r5, #17
 80006d6:	2000      	movs	r0, #0
 80006d8:	0468      	lsls	r0, r5, #17
 80006da:	2000      	movs	r0, #0
 80006dc:	0770      	lsls	r0, r6, #29
 80006de:	2000      	movs	r0, #0

080006e0 <_read_r>:
#include <sys/types.h>

/***************************************************************************/

int _read_r (struct _reent *r, int file, char * ptr, int len)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	603b      	str	r3, [r7, #0]
  r = r;
  file = file;
  ptr = ptr;
  len = len;
  
  errno = EINVAL;
 80006ee:	f00f fc33 	bl	800ff58 <__errno>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f04f 0216 	mov.w	r2, #22
 80006f8:	601a      	str	r2, [r3, #0]
  return -1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fe:	4618      	mov	r0, r3
 8000700:	f107 0710 	add.w	r7, r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <_lseek_r>:

/***************************************************************************/

int _lseek_r (struct _reent *r, int file, int ptr, int dir)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	603b      	str	r3, [r7, #0]
  r = r;
  file = file;
  ptr = ptr;
  dir = dir;
  
  return 0;
 8000716:	f04f 0300 	mov.w	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	f107 0714 	add.w	r7, r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <_write_r>:

/***************************************************************************/

int _write_r (struct _reent *r, int file, char * ptr, int len)
{  
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	603b      	str	r3, [r7, #0]

    uart_putc(ptr[index]);
  }  
#endif   
  
  return len;
 8000736:	683b      	ldr	r3, [r7, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	f107 0714 	add.w	r7, r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <_close_r>:

/***************************************************************************/

int _close_r (struct _reent *r, int file)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  return 0;
 800074e:	f04f 0300 	mov.w	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	f107 070c 	add.w	r7, r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <_sbrk_r>:

/* Register name faking - works in collusion with the linker.  */
register char * stack_ptr asm ("sp");

caddr_t _sbrk_r (struct _reent *r, int incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  extern char   end asm ("end"); /* Defined by the linker.  */
  static char * heap_end;
  char *        prev_heap_end;

  if (heap_end == NULL)
 800076a:	f240 436c 	movw	r3, #1132	; 0x46c
 800076e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d108      	bne.n	800078a <_sbrk_r+0x2a>
    heap_end = & end;
 8000778:	f240 436c 	movw	r3, #1132	; 0x46c
 800077c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000780:	f240 7270 	movw	r2, #1904	; 0x770
 8000784:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000788:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 800078a:	f240 436c 	movw	r3, #1132	; 0x46c
 800078e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  
  if (heap_end + incr > stack_ptr)
 8000796:	f240 436c 	movw	r3, #1132	; 0x46c
 800079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	441a      	add	r2, r3
 80007a4:	466b      	mov	r3, sp
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d908      	bls.n	80007bc <_sbrk_r+0x5c>

      _write (1, "_sbrk: Heap and stack collision\n", 32);
      
      abort ();
#else
      errno = ENOMEM;
 80007aa:	f00f fbd5 	bl	800ff58 <__errno>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f04f 020c 	mov.w	r2, #12
 80007b4:	601a      	str	r2, [r3, #0]
      return (caddr_t) -1;
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	e00c      	b.n	80007d6 <_sbrk_r+0x76>
#endif
  }
  
  heap_end += incr;
 80007bc:	f240 436c 	movw	r3, #1132	; 0x46c
 80007c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	441a      	add	r2, r3
 80007ca:	f240 436c 	movw	r3, #1132	; 0x46c
 80007ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007d2:	601a      	str	r2, [r3, #0]

  return (caddr_t) prev_heap_end;
 80007d4:	68fb      	ldr	r3, [r7, #12]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	f107 0710 	add.w	r7, r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_fstat_r>:

/***************************************************************************/

int _fstat_r (struct _reent *r, int file, struct stat * st)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  r = r; 
  file = file;
   
  memset (st, 0, sizeof (* st));
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f04f 0100 	mov.w	r1, #0
 80007f2:	f04f 023c 	mov.w	r2, #60	; 0x3c
 80007f6:	f00f fbb5 	bl	800ff64 <memset>
  st->st_mode = S_IFCHR;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000800:	605a      	str	r2, [r3, #4]
  return 0;
 8000802:	f04f 0300 	mov.w	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	f107 0710 	add.w	r7, r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_isatty_r>:

/***************************************************************************/

int _isatty_r(struct _reent *r, int fd)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  r = r;
  fd = fd;
   
  return 1;
 800081a:	f04f 0301 	mov.w	r3, #1
}
 800081e:	4618      	mov	r0, r3
 8000820:	f107 070c 	add.w	r7, r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000830:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000834:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000838:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800083c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	f042 0201 	orr.w	r2, r2, #1
 8000846:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000848:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800084c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000856:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800085a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800085e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000862:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000866:	6812      	ldr	r2, [r2, #0]
 8000868:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800086c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000870:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000872:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000876:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800087a:	f243 0210 	movw	r2, #12304	; 0x3010
 800087e:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000882:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000884:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800088c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000890:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800089a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800089c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80008aa:	f000 f8c3 	bl	8000a34 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008ae:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80008b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80008b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ba:	609a      	str	r2, [r3, #8]
#endif
}
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	f04f 0302 	mov.w	r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	f04f 0302 	mov.w	r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 030c 	and.w	r3, r3, #12
 80008f2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d00d      	beq.n	8000916 <SystemCoreClockUpdate+0x56>
 80008fa:	2b08      	cmp	r3, #8
 80008fc:	d015      	beq.n	800092a <SystemCoreClockUpdate+0x6a>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d16b      	bne.n	80009da <SystemCoreClockUpdate+0x11a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000902:	f240 0300 	movw	r3, #0
 8000906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800090a:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800090e:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000912:	601a      	str	r2, [r3, #0]
      break;
 8000914:	e06b      	b.n	80009ee <SystemCoreClockUpdate+0x12e>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000916:	f240 0300 	movw	r3, #0
 800091a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800091e:	f647 0240 	movw	r2, #30784	; 0x7840
 8000922:	f2c0 127d 	movt	r2, #381	; 0x17d
 8000926:	601a      	str	r2, [r3, #0]
      break;
 8000928:	e061      	b.n	80009ee <SystemCoreClockUpdate+0x12e>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800092a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800092e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000938:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800093c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800093e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000942:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800094c:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d015      	beq.n	8000980 <SystemCoreClockUpdate+0xc0>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000954:	f647 0340 	movw	r3, #30784	; 0x7840
 8000958:	f2c0 137d 	movt	r3, #381	; 0x17d
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000962:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800096a:	6859      	ldr	r1, [r3, #4]
 800096c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000970:	ea01 0303 	and.w	r3, r1, r3
 8000974:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000978:	fb03 f302 	mul.w	r3, r3, r2
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e014      	b.n	80009aa <SystemCoreClockUpdate+0xea>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000980:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000984:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	fbb3 f2f2 	udiv	r2, r3, r2
 800098e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000992:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000996:	6859      	ldr	r1, [r3, #4]
 8000998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800099c:	ea01 0303 	and.w	r3, r1, r3
 80009a0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80009a4:	fb03 f302 	mul.w	r3, r3, r2
 80009a8:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009b8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80009bc:	f103 0301 	add.w	r3, r3, #1
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80009ce:	f240 0300 	movw	r3, #0
 80009d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009d6:	601a      	str	r2, [r3, #0]
      break;
 80009d8:	e009      	b.n	80009ee <SystemCoreClockUpdate+0x12e>
    default:
      SystemCoreClock = HSI_VALUE;
 80009da:	f240 0300 	movw	r3, #0
 80009de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009e2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80009e6:	f2c0 02f4 	movt	r2, #244	; 0xf4
 80009ea:	601a      	str	r2, [r3, #0]
      break;
 80009ec:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80009ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009fc:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8000a00:	f240 0304 	movw	r3, #4
 8000a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a08:	5c9b      	ldrb	r3, [r3, r2]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000a0e:	f240 0300 	movw	r3, #0
 8000a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	fa22 f203 	lsr.w	r2, r2, r3
 8000a1e:	f240 0300 	movw	r3, #0
 8000a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	f107 071c 	add.w	r7, r7, #28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a3a:	f04f 0300 	mov.w	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	f04f 0300 	mov.w	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a4e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a5c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f103 0301 	add.w	r3, r3, #1
 8000a74:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d103      	bne.n	8000a84 <SetSysClock+0x50>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a82:	d1ec      	bne.n	8000a5e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a96:	f04f 0301 	mov.w	r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	e002      	b.n	8000aa4 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d169      	bne.n	8000b7e <SetSysClock+0x14a>
  {
    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000aaa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ab2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ab6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000aba:	6892      	ldr	r2, [r2, #8]
 8000abc:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000abe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ac2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ac6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000aca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ace:	6892      	ldr	r2, [r2, #8]
 8000ad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ad4:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ad6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ada:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ade:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ae2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ae6:	6892      	ldr	r2, [r2, #8]
 8000ae8:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000aec:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000aee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000af2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000af6:	f643 4219 	movw	r2, #15385	; 0x3c19
 8000afa:	f2c0 5240 	movt	r2, #1344	; 0x540
 8000afe:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b16:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b18:	bf00      	nop
 8000b1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f6      	beq.n	8000b1a <SetSysClock+0xe6>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
 8000b2c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000b30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b34:	f240 7203 	movw	r2, #1795	; 0x703
 8000b38:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b3a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b42:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b4a:	6892      	ldr	r2, [r2, #8]
 8000b4c:	f022 0203 	bic.w	r2, r2, #3
 8000b50:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b62:	6892      	ldr	r2, [r2, #8]
 8000b64:	f042 0202 	orr.w	r2, r2, #2
 8000b68:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b6a:	bf00      	nop
 8000b6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d1f6      	bne.n	8000b6c <SetSysClock+0x138>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000b7e:	f107 070c 	add.w	r7, r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <udiv>:
		}
	end loop
	Shift left half of remainder right 1 bit

*/
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6079      	str	r1, [r7, #4]
 8000b92:	603a      	str	r2, [r7, #0]
	if(error) {
		printf("Result = Dividend (%d) /  Divisor (%d)\n", dividend, divisor);
		printf("Expected: Quot = %08d, Rem = %08d\n",result.quot,result.rem);
	}
#endif
	Rem = (dividend & 0x80000000)?1:0;
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b9a:	623a      	str	r2, [r7, #32]
	Quot	= dividend << 1;
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8000ba2:	627a      	str	r2, [r7, #36]	; 0x24

	for(i = 32; i > 0; i--) {
 8000ba4:	f04f 0220 	mov.w	r2, #32
 8000ba8:	61fa      	str	r2, [r7, #28]
 8000baa:	e027      	b.n	8000bfc <udiv+0x74>
		srem 	= (int) Rem - (int) divisor;
 8000bac:	6a39      	ldr	r1, [r7, #32]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	ebc2 0201 	rsb	r2, r2, r1
 8000bb4:	61ba      	str	r2, [r7, #24]
		positive= (srem >= 0)?1:0;
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	ea6f 0202 	mvn.w	r2, r2
 8000bbc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000bc0:	617a      	str	r2, [r7, #20]
		if(positive) Rem  = (unsigned int) srem; 
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d001      	beq.n	8000bcc <udiv+0x44>
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	623a      	str	r2, [r7, #32]

		left_shift_64(Rem,Quot)
 8000bcc:	6a3a      	ldr	r2, [r7, #32]
 8000bce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8000bd2:	623a      	str	r2, [r7, #32]
 8000bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	da03      	bge.n	8000be2 <udiv+0x5a>
 8000bda:	6a3a      	ldr	r2, [r7, #32]
 8000bdc:	f042 0201 	orr.w	r2, r2, #1
 8000be0:	623a      	str	r2, [r7, #32]
 8000be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8000be8:	627a      	str	r2, [r7, #36]	; 0x24
		// Set rightmost bit to "1" if positive or "0" otherwise;
		Quot	|= positive;
 8000bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	ea41 0202 	orr.w	r2, r1, r2
 8000bf2:	627a      	str	r2, [r7, #36]	; 0x24
	}
#endif
	Rem = (dividend & 0x80000000)?1:0;
	Quot	= dividend << 1;

	for(i = 32; i > 0; i--) {
 8000bf4:	69fa      	ldr	r2, [r7, #28]
 8000bf6:	f102 32ff 	add.w	r2, r2, #4294967295
 8000bfa:	61fa      	str	r2, [r7, #28]
 8000bfc:	69fa      	ldr	r2, [r7, #28]
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	dcd4      	bgt.n	8000bac <udiv+0x24>

		left_shift_64(Rem,Quot)
		// Set rightmost bit to "1" if positive or "0" otherwise;
		Quot	|= positive;
	}
	Rem >>= 1;
 8000c02:	6a3a      	ldr	r2, [r7, #32]
 8000c04:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8000c08:	623a      	str	r2, [r7, #32]
	result.rem		= Rem;
 8000c0a:	6a3a      	ldr	r2, [r7, #32]
 8000c0c:	613a      	str	r2, [r7, #16]
	result.quot	= Quot;
 8000c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c10:	60fa      	str	r2, [r7, #12]
	if(error) {
		printf("Result:   Quot = %08d, Rem = %08d\n",result.quot,result.rem);
	}
	error	= 0;
#endif
	return	result;
 8000c12:	461a      	mov	r2, r3
 8000c14:	f107 010c 	add.w	r1, r7, #12
 8000c18:	c903      	ldmia	r1!, {r0, r1}
 8000c1a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <DAC_Ch1_EscalatorConfig>:
uint32_t 	ADCConvertedValue;

const uint8_t Escalator8bit[6] = {0x0, 0x33, 0x66, 0x99, 0xCC, 0xFF};


void DAC_Ch1_EscalatorConfig(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0

	DAC_InitTypeDef  DAC_InitStructure;


	/* DMA1 clock and GPIOA clock enable (to be used with DAC) */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	f2c0 0020 	movt	r0, #32
 8000c3a:	f04f 0101 	mov.w	r1, #1
 8000c3e:	f009 fd1b 	bl	800a678 <RCC_AHB1PeriphClockCmd>

	/* DAC Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8000c42:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000c46:	f04f 0101 	mov.w	r1, #1
 8000c4a:	f009 fd99 	bl	800a780 <RCC_APB1PeriphClockCmd>

	/* DAC channel 1 & 2 (DAC_OUT1 = PA.4)(DAC_OUT2 = PA.5) configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; // | GPIO_Pin_5;
 8000c4e:	f04f 0310 	mov.w	r3, #16
 8000c52:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000c54:	f04f 0303 	mov.w	r3, #3
 8000c58:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000c5a:	f04f 0300 	mov.w	r3, #0
 8000c5e:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f007 faa7 	bl	80081c0 <GPIO_Init>

	 /* DAC channel2 Configuration */
	  DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
 8000c72:	f04f 0304 	mov.w	r3, #4
 8000c76:	603b      	str	r3, [r7, #0]
	  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_Noise;//;DAC_WaveGeneration_Triangle;//
 8000c78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000c7c:	607b      	str	r3, [r7, #4]
	  DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude = DAC_TriangleAmplitude_4095;
 8000c7e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000c82:	60bb      	str	r3, [r7, #8]
	  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
	  DAC_Init(DAC_Channel_1, &DAC_InitStructure);
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	f04f 0000 	mov.w	r0, #0
 8000c90:	4619      	mov	r1, r3
 8000c92:	f004 fba3 	bl	80053dc <DAC_Init>

	  /* Enable DAC Channel2 */
	  DAC_Cmd(DAC_Channel_1, ENABLE);
 8000c96:	f04f 0000 	mov.w	r0, #0
 8000c9a:	f04f 0101 	mov.w	r1, #1
 8000c9e:	f004 fbf5 	bl	800548c <DAC_Cmd>

	  /* Set DAC channel2 DHR12RD register */
	  DAC_SetChannel1Data(DAC_Align_12b_R, 0x2000);
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000caa:	f004 fcb3 	bl	8005614 <DAC_SetChannel1Data>


}
 8000cae:	f107 0718 	add.w	r7, r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop

08000cb8 <TIM6_Config>:


void TIM6_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
  TIM_TimeBaseInitTypeDef    TIM_TimeBaseStructure;
  /* TIM6 Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000cbe:	f04f 0010 	mov.w	r0, #16
 8000cc2:	f04f 0101 	mov.w	r1, #1
 8000cc6:	f009 fd5b 	bl	800a780 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8000cca:	f107 0304 	add.w	r3, r7, #4
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00c fe0a 	bl	800d8e8 <TIM_TimeBaseStructInit>
  TIM_TimeBaseStructure.TIM_Period = 0x0F;
 8000cd4:	f04f 030f 	mov.w	r3, #15
 8000cd8:	60bb      	str	r3, [r7, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	80bb      	strh	r3, [r7, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	81bb      	strh	r3, [r7, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000ce6:	f04f 0300 	mov.w	r3, #0
 8000cea:	80fb      	strh	r3, [r7, #6]
  TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 8000cec:	f107 0304 	add.w	r3, r7, #4
 8000cf0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cf4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f00c fd79 	bl	800d7f0 <TIM_TimeBaseInit>

  /* TIM6 TRGO selection */
  TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
 8000cfe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d02:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000d06:	f04f 0120 	mov.w	r1, #32
 8000d0a:	f00e f943 	bl	800ef94 <TIM_SelectOutputTrigger>

  /* TIM6 enable counter */
  TIM_Cmd(TIM6, ENABLE);
 8000d0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d12:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000d16:	f04f 0101 	mov.w	r1, #1
 8000d1a:	f00c ff03 	bl	800db24 <TIM_Cmd>
}
 8000d1e:	f107 0710 	add.w	r7, r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop

08000d28 <ADC1_ChTempSensor_Init>:


void ADC1_ChTempSensor_Init(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09a      	sub	sp, #104	; 0x68
 8000d2c:	af00      	add	r7, sp, #0
	  DMA_InitTypeDef       DMA_InitStructure;

	  void ADC_DeInit(void);

	  /* Enable peripheral clocks *************************************************/
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8000d2e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000d32:	f04f 0101 	mov.w	r1, #1
 8000d36:	f009 fc9f 	bl	800a678 <RCC_AHB1PeriphClockCmd>
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000d3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d3e:	f04f 0101 	mov.w	r1, #1
 8000d42:	f009 fd49 	bl	800a7d8 <RCC_APB2PeriphClockCmd>

	  /* DMA2_Stream0 channel0 configuration **************************************/
	  DMA_DeInit(DMA2_Stream0);
 8000d46:	f246 4010 	movw	r0, #25616	; 0x6410
 8000d4a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d4e:	f005 f8c1 	bl	8005ed4 <DMA_DeInit>
	  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
	  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC1_DR_ADDRESS;
 8000d58:	f242 034c 	movw	r3, #8268	; 0x204c
 8000d5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d60:	60bb      	str	r3, [r7, #8]
	  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADCConvertedValue;
 8000d62:	f240 6380 	movw	r3, #1664	; 0x680
 8000d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d6a:	60fb      	str	r3, [r7, #12]
	  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
	  DMA_InitStructure.DMA_BufferSize = 1;
 8000d72:	f04f 0301 	mov.w	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
	  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
	  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
	  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d88:	623b      	str	r3, [r7, #32]
	  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
	  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
	  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
	  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8000da2:	f04f 0301 	mov.w	r3, #1
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
	  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
	  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 8000db4:	f107 0304 	add.w	r3, r7, #4
 8000db8:	f246 4010 	movw	r0, #25616	; 0x6410
 8000dbc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f005 f9a9 	bl	8006118 <DMA_Init>
	  /* DMA2_Stream0 enable */
	  DMA_Cmd(DMA2_Stream0, ENABLE);
 8000dc6:	f246 4010 	movw	r0, #25616	; 0x6410
 8000dca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dce:	f04f 0101 	mov.w	r1, #1
 8000dd2:	f005 fa4d 	bl	8006270 <DMA_Cmd>

	  /* ADC Common Init **********************************************************/
	  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	643b      	str	r3, [r7, #64]	; 0x40
	  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	647b      	str	r3, [r7, #68]	; 0x44
	  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
	  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
	  ADC_CommonInit(&ADC_CommonInitStructure);
 8000dee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 ff8c 	bl	8001d10 <ADC_CommonInit>

	  /* ADC1 Init ****************************************************************/
	  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	653b      	str	r3, [r7, #80]	; 0x50
	  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8000e06:	f04f 0301 	mov.w	r3, #1
 8000e0a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	65bb      	str	r3, [r7, #88]	; 0x58
	  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
	  ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000e1a:	f04f 0301 	mov.w	r3, #1
 8000e1e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	  ADC_Init(ADC1, &ADC_InitStructure);
 8000e22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e26:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e2a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f000 fee4 	bl	8001bfc <ADC_Init>

	  /* Enable ADC1 DMA */
	  ADC_DMACmd(ADC1, ENABLE);
 8000e34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e38:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e3c:	f04f 0101 	mov.w	r1, #1
 8000e40:	f001 fa12 	bl	8002268 <ADC_DMACmd>

	  /* ADC1 regular channel18 (VBAT) configuration ******************************/
	  ADC_RegularChannelConfig(ADC1, ADC_Channel_TempSensor, 1, ADC_SampleTime_15Cycles);
 8000e44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e48:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e4c:	f04f 0110 	mov.w	r1, #16
 8000e50:	f04f 0201 	mov.w	r2, #1
 8000e54:	f04f 0301 	mov.w	r3, #1
 8000e58:	f001 f85e 	bl	8001f18 <ADC_RegularChannelConfig>

	  /* Enable VBAT channel */
	  ADC_TempSensorVrefintCmd(ENABLE);
 8000e5c:	f04f 0001 	mov.w	r0, #1
 8000e60:	f001 f80e 	bl	8001e80 <ADC_TempSensorVrefintCmd>

	  /* Enable DMA request after last transfer (Single-ADC mode) */
	  ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8000e64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e68:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e6c:	f04f 0101 	mov.w	r1, #1
 8000e70:	f001 fa16 	bl	80022a0 <ADC_DMARequestAfterLastTransferCmd>

	  /* Enable ADC1 **************************************************************/
	  ADC_Cmd(ADC1, ENABLE);
 8000e74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e78:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e7c:	f04f 0101 	mov.w	r1, #1
 8000e80:	f000 ff92 	bl	8001da8 <ADC_Cmd>


}
 8000e84:	f107 0768 	add.w	r7, r7, #104	; 0x68
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <STM_EVAL_LEDInit>:


void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	f240 034c 	movw	r3, #76	; 0x4c
 8000e9c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f04f 0101 	mov.w	r1, #1
 8000eaa:	f009 fbe5 	bl	800a678 <RCC_AHB1PeriphClockCmd>


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000eae:	79fa      	ldrb	r2, [r7, #7]
 8000eb0:	f240 0348 	movw	r3, #72	; 0x48
 8000eb4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000eb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ebe:	f04f 0301 	mov.w	r3, #1
 8000ec2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000eca:	f04f 0301 	mov.w	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ed0:	f04f 0302 	mov.w	r3, #2
 8000ed4:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	f240 0314 	movw	r3, #20
 8000edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	f007 f968 	bl	80081c0 <GPIO_Init>
}
 8000ef0:	f107 0710 	add.w	r7, r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	f240 0314 	movw	r3, #20
 8000f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f10:	79f9      	ldrb	r1, [r7, #7]
 8000f12:	f240 0348 	movw	r3, #72	; 0x48
 8000f16:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000f1a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f1e:	8313      	strh	r3, [r2, #24]
}
 8000f20:	f107 070c 	add.w	r7, r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8000f36:	79fa      	ldrb	r2, [r7, #7]
 8000f38:	f240 0314 	movw	r3, #20
 8000f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f44:	79f9      	ldrb	r1, [r7, #7]
 8000f46:	f240 0348 	movw	r3, #72	; 0x48
 8000f4a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000f4e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f52:	8353      	strh	r3, [r2, #26]
}
 8000f54:	f107 070c 	add.w	r7, r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	f240 0314 	movw	r3, #20
 8000f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f78:	79f9      	ldrb	r1, [r7, #7]
 8000f7a:	f240 0314 	movw	r3, #20
 8000f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f86:	6959      	ldr	r1, [r3, #20]
 8000f88:	79f8      	ldrb	r0, [r7, #7]
 8000f8a:	f240 0348 	movw	r3, #72	; 0x48
 8000f8e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000f92:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8000f96:	ea81 0303 	eor.w	r3, r1, r3
 8000f9a:	6153      	str	r3, [r2, #20]
}
 8000f9c:	f107 070c 	add.w	r7, r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <STM_EVAL_COMInit>:


void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	f240 0354 	movw	r3, #84	; 0x54
 8000fba:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000fbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fc2:	79f9      	ldrb	r1, [r7, #7]
 8000fc4:	f240 0358 	movw	r3, #88	; 0x58
 8000fc8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000fcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fd0:	ea42 0303 	orr.w	r3, r2, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f04f 0101 	mov.w	r1, #1
 8000fda:	f009 fb4d 	bl	800a678 <RCC_AHB1PeriphClockCmd>

  if (COM == COM1)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10b      	bne.n	8000ffc <STM_EVAL_COMInit+0x54>
  {
    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	f240 0350 	movw	r3, #80	; 0x50
 8000fea:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f04f 0101 	mov.w	r1, #1
 8000ff8:	f009 fbc2 	bl	800a780 <RCC_APB1PeriphClockCmd>
  }

  /* Connect PXx to USARTx_Tx*/
  GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	f240 031c 	movw	r3, #28
 8001002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001006:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	f240 0364 	movw	r3, #100	; 0x64
 8001010:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001014:	5c9b      	ldrb	r3, [r3, r2]
 8001016:	461a      	mov	r2, r3
 8001018:	79f8      	ldrb	r0, [r7, #7]
 800101a:	f240 036c 	movw	r3, #108	; 0x6c
 800101e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001022:	5c1b      	ldrb	r3, [r3, r0]
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	f007 fa61 	bl	80084f0 <GPIO_PinAFConfig>

  /* Connect PXx to USARTx_Rx*/
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	f240 0320 	movw	r3, #32
 8001034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	f240 0368 	movw	r3, #104	; 0x68
 8001042:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001046:	5c9b      	ldrb	r3, [r3, r2]
 8001048:	461a      	mov	r2, r3
 800104a:	79f8      	ldrb	r0, [r7, #7]
 800104c:	f240 0370 	movw	r3, #112	; 0x70
 8001050:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001054:	5c1b      	ldrb	r3, [r3, r0]
 8001056:	4608      	mov	r0, r1
 8001058:	4611      	mov	r1, r2
 800105a:	461a      	mov	r2, r3
 800105c:	f007 fa48 	bl	80084f0 <GPIO_PinAFConfig>

  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001066:	f04f 0301 	mov.w	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800106c:	f04f 0302 	mov.w	r3, #2
 8001070:	733b      	strb	r3, [r7, #12]

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 8001072:	79fa      	ldrb	r2, [r7, #7]
 8001074:	f240 035c 	movw	r3, #92	; 0x5c
 8001078:	f6c0 0301 	movt	r3, #2049	; 0x801
 800107c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001080:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001082:	f04f 0302 	mov.w	r3, #2
 8001086:	737b      	strb	r3, [r7, #13]
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 8001088:	79fa      	ldrb	r2, [r7, #7]
 800108a:	f240 031c 	movw	r3, #28
 800108e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001092:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f007 f88f 	bl	80081c0 <GPIO_Init>

  /* Configure USART Rx as alternate function  */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80010a2:	f04f 0302 	mov.w	r3, #2
 80010a6:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 80010a8:	79fa      	ldrb	r2, [r7, #7]
 80010aa:	f240 0360 	movw	r3, #96	; 0x60
 80010ae:	f6c0 0301 	movt	r3, #2049	; 0x801
 80010b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010b6:	60bb      	str	r3, [r7, #8]
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 80010b8:	79fa      	ldrb	r2, [r7, #7]
 80010ba:	f240 0320 	movw	r3, #32
 80010be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f007 f877 	bl	80081c0 <GPIO_Init>

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	f240 0318 	movw	r3, #24
 80010d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	4618      	mov	r0, r3
 80010e2:	6839      	ldr	r1, [r7, #0]
 80010e4:	f00e fa04 	bl	800f4f0 <USART_Init>
    
  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	f240 0318 	movw	r3, #24
 80010ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f04f 0101 	mov.w	r1, #1
 80010fc:	f00e fb40 	bl	800f780 <USART_Cmd>
}
 8001100:	f107 0710 	add.w	r7, r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <sFLASH_Init>:
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
	  SPI_InitTypeDef  SPI_InitStructure;

	  sFLASH_LowLevel_Init();
 800110e:	f000 f839 	bl	8001184 <sFLASH_LowLevel_Init>

	  /*!< Deselect the FLASH: Chip Select high */
	  sFLASH_CS_HIGH();
 8001112:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001116:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800111a:	f04f 0104 	mov.w	r1, #4
 800111e:	f007 f993 	bl	8008448 <GPIO_SetBits>

	  /*!1< SPI configuration */
	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	80bb      	strh	r3, [r7, #4]
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001128:	f44f 7382 	mov.w	r3, #260	; 0x104
 800112c:	80fb      	strh	r3, [r7, #6]
	  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	813b      	strh	r3, [r7, #8]
	  SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8001134:	f04f 0302 	mov.w	r3, #2
 8001138:	817b      	strh	r3, [r7, #10]
	  SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 800113a:	f04f 0301 	mov.w	r3, #1
 800113e:	81bb      	strh	r3, [r7, #12]
	  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	81fb      	strh	r3, [r7, #14]
	  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8001146:	f04f 0308 	mov.w	r3, #8
 800114a:	823b      	strh	r3, [r7, #16]

	  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	827b      	strh	r3, [r7, #18]
	  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001152:	f04f 0307 	mov.w	r3, #7
 8001156:	82bb      	strh	r3, [r7, #20]
	  SPI_Init(sFLASH_SPI, &SPI_InitStructure);
 8001158:	f107 0304 	add.w	r3, r7, #4
 800115c:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8001160:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001164:	4619      	mov	r1, r3
 8001166:	f00b fd79 	bl	800cc5c <SPI_Init>

	  /*!< Enable the sFLASH_SPI  */
	  SPI_Cmd(sFLASH_SPI, ENABLE);
 800116a:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800116e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001172:	f04f 0101 	mov.w	r1, #1
 8001176:	f00b ff1f 	bl	800cfb8 <SPI_Cmd>
}
 800117a:	f107 0718 	add.w	r7, r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop

08001184 <sFLASH_LowLevel_Init>:
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_LowLevel_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /*!< sFLASH_SPI Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 800118a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800118e:	f04f 0101 	mov.w	r1, #1
 8001192:	f009 faf5 	bl	800a780 <RCC_APB1PeriphClockCmd>

  /*!< sFLASH_SPI_CS_GPIO, sFLASH_SPI_MOSI_GPIO, sFLASH_SPI_MISO_GPIO
       and sFLASH_SPI_SCK_GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001196:	f04f 0004 	mov.w	r0, #4
 800119a:	f04f 0101 	mov.w	r1, #1
 800119e:	f009 fa6b 	bl	800a678 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80011a2:	f04f 0008 	mov.w	r0, #8
 80011a6:	f04f 0101 	mov.w	r1, #1
 80011aa:	f009 fa65 	bl	800a678 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_SPI3);	/* PC.10 */
 80011ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011b2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011b6:	f04f 010a 	mov.w	r1, #10
 80011ba:	f04f 0206 	mov.w	r2, #6
 80011be:	f007 f997 	bl	80084f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_SPI3);	/* PC.11 */
 80011c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011c6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011ca:	f04f 010b 	mov.w	r1, #11
 80011ce:	f04f 0206 	mov.w	r2, #6
 80011d2:	f007 f98d 	bl	80084f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC,GPIO_PinSource12,GPIO_AF_SPI3);	/* PC.12 */
 80011d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011de:	f04f 010c 	mov.w	r1, #12
 80011e2:	f04f 0206 	mov.w	r2, #6
 80011e6:	f007 f983 	bl	80084f0 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80011ea:	f04f 0302 	mov.w	r3, #2
 80011ee:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80011f0:	f04f 0302 	mov.w	r3, #2
 80011f4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80011fc:	f04f 0302 	mov.w	r3, #2
 8001200:	71fb      	strb	r3, [r7, #7]


  /*!< Configure sFLASH_SPI pins: SCK */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;	/* PC.10 */
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001208:	463b      	mov	r3, r7
 800120a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800120e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001212:	4619      	mov	r1, r3
 8001214:	f006 ffd4 	bl	80081c0 <GPIO_Init>

  /*!< Configure sFLASH_SPI pins: MOSI */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;	/* PC.11 */
 8001218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800121c:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800121e:	463b      	mov	r3, r7
 8001220:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001224:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001228:	4619      	mov	r1, r3
 800122a:	f006 ffc9 	bl	80081c0 <GPIO_Init>

  /*!< Configure sFLASH_SPI pins: MISO */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;	/* PC.12 */
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001234:	463b      	mov	r3, r7
 8001236:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800123a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800123e:	4619      	mov	r1, r3
 8001240:	f006 ffbe 	bl	80081c0 <GPIO_Init>


  /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8001244:	f04f 0304 	mov.w	r3, #4
 8001248:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800124a:	f04f 0302 	mov.w	r3, #2
 800124e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001250:	f04f 0301 	mov.w	r3, #1
 8001254:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800125c:	f04f 0302 	mov.w	r3, #2
 8001260:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001262:	463b      	mov	r3, r7
 8001264:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001268:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800126c:	4619      	mov	r1, r3
 800126e:	f006 ffa7 	bl	80081c0 <GPIO_Init>


}
 8001272:	f107 0708 	add.w	r7, r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop

0800127c <sFLASH_LowLevel_DeInit>:
  * @brief  DeInitializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_LowLevel_DeInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /*!< Disable the sFLASH_SPI  */
  SPI_Cmd(sFLASH_SPI, DISABLE);
 8001282:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8001286:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800128a:	f04f 0100 	mov.w	r1, #0
 800128e:	f00b fe93 	bl	800cfb8 <SPI_Cmd>

  /*!< DeInitializes the sFLASH_SPI */
  SPI_I2S_DeInit(sFLASH_SPI);
 8001292:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8001296:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800129a:	f00b fc9b 	bl	800cbd4 <SPI_I2S_DeInit>

  /*!< sFLASH_SPI Periph clock disable */
  RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, DISABLE);
 800129e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012a2:	f04f 0100 	mov.w	r1, #0
 80012a6:	f009 fa97 	bl	800a7d8 <RCC_APB2PeriphClockCmd>

  /*!< Configure sFLASH_SPI pins: SCK */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_OType_OD;
 80012b0:	f04f 0301 	mov.w	r3, #1
 80012b4:	713b      	strb	r3, [r7, #4]
  GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80012b6:	463b      	mov	r3, r7
 80012b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012c0:	4619      	mov	r1, r3
 80012c2:	f006 ff7d 	bl	80081c0 <GPIO_Init>

  /*!< Configure sFLASH_SPI pins: MISO */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
 80012c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ca:	603b      	str	r3, [r7, #0]
  GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80012cc:	463b      	mov	r3, r7
 80012ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012d6:	4619      	mov	r1, r3
 80012d8:	f006 ff72 	bl	80081c0 <GPIO_Init>

  /*!< Configure sFLASH_SPI pins: MOSI */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	603b      	str	r3, [r7, #0]
  GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80012e2:	463b      	mov	r3, r7
 80012e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012e8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012ec:	4619      	mov	r1, r3
 80012ee:	f006 ff67 	bl	80081c0 <GPIO_Init>

  /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
  GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
 80012f2:	f04f 0304 	mov.w	r3, #4
 80012f6:	603b      	str	r3, [r7, #0]
  GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
 80012f8:	463b      	mov	r3, r7
 80012fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80012fe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001302:	4619      	mov	r1, r3
 8001304:	f006 ff5c 	bl	80081c0 <GPIO_Init>
}
 8001308:	f107 0708 	add.w	r7, r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
uint8_t sFLASH_SendByte(uint8_t byte)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  /*!< Loop while DR register in not emplty */
  while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
 800131a:	bf00      	nop
 800131c:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8001320:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001324:	f04f 0102 	mov.w	r1, #2
 8001328:	f00b fff8 	bl	800d31c <SPI_I2S_GetFlagStatus>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f4      	beq.n	800131c <sFLASH_SendByte+0xc>

  /*!< Send byte through the SPI1 peripheral */
  SPI_I2S_SendData(sFLASH_SPI, byte);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	b29b      	uxth	r3, r3
 8001336:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800133a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800133e:	4619      	mov	r1, r3
 8001340:	f00b ff26 	bl	800d190 <SPI_I2S_SendData>

  /*!< Wait to receive a byte */
  while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
 8001344:	bf00      	nop
 8001346:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800134a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800134e:	f04f 0101 	mov.w	r1, #1
 8001352:	f00b ffe3 	bl	800d31c <SPI_I2S_GetFlagStatus>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f4      	beq.n	8001346 <sFLASH_SendByte+0x36>

  /*!< Return the byte read from the SPI bus */
  return SPI_I2S_ReceiveData(sFLASH_SPI);
 800135c:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8001360:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001364:	f00b ff06 	bl	800d174 <SPI_I2S_ReceiveData>
 8001368:	4603      	mov	r3, r0
 800136a:	b2db      	uxtb	r3, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	f107 0708 	add.w	r7, r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop

08001378 <df_send_command>:
	unsigned char bCmd,      /* Command value */
	unsigned char bCmdSize,  /* Command Size */
	char         *pData,     /* Data to be sent */
	unsigned int  dDataSize, /* Data Size */
	unsigned int  dAddress)  /* Dataflash Address */
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	72fb      	strb	r3, [r7, #11]
 8001386:	4613      	mov	r3, r2
 8001388:	72bb      	strb	r3, [r7, #10]
	unsigned int dInternalAdr;
	unsigned int count;
	unsigned char *CmdPtr;

	div_t result = udiv(dAddress, AT91C_PAGE_SIZE(pDataFlash));
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f107 0214 	add.w	r2, r7, #20
 8001392:	4610      	mov	r0, r2
 8001394:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001396:	461a      	mov	r2, r3
 8001398:	f7ff fbf6 	bl	8000b88 <udiv>
//	if ((pDataFlash->bSemaphore) != UNLOCKED)
//		return (char) 0;
//	pDataFlash->bSemaphore = LOCKED;

	/* Compute command pattern */
    if (pDataFlash->dfDescription.binaryPageMode == 0) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d108      	bne.n	80013b6 <df_send_command+0x3e>
        dInternalAdr = (result.quot << AT91C_PAGE_OFFSET(pDataFlash)) + result.rem;
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	fa02 f203 	lsl.w	r2, r2, r3
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4413      	add	r3, r2
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
 80013b4:	e001      	b.n	80013ba <df_send_command+0x42>
    } else {
        dInternalAdr = dAddress;
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    }

 	if (AT91C_DF_NB_PAGE(pDataFlash) >= 16384)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80013c2:	429a      	cmp	r2, r3
 80013c4:	dd25      	ble.n	8001412 <df_send_command+0x9a>
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
 80013c6:	7afa      	ldrb	r2, [r7, #11]
	                             ((dInternalAdr & 0x0F000000) >> 16) | \
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80013ce:	ea4f 4313 	mov.w	r3, r3, lsr #16
        dInternalAdr = dAddress;
    }

 	if (AT91C_DF_NB_PAGE(pDataFlash) >= 16384)
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
 80013d2:	ea42 0203 	orr.w	r2, r2, r3
	                             ((dInternalAdr & 0x0F000000) >> 16) | \
	                             ((dInternalAdr & 0x00FF0000) >>  0) | \
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    }

 	if (AT91C_DF_NB_PAGE(pDataFlash) >= 16384)
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
	                             ((dInternalAdr & 0x0F000000) >> 16) | \
 80013dc:	ea42 0203 	orr.w	r2, r2, r3
	                             ((dInternalAdr & 0x00FF0000) >>  0) | \
	                             ((dInternalAdr & 0x0000FF00) << 16);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013e6:	ea4f 4303 	mov.w	r3, r3, lsl #16

 	if (AT91C_DF_NB_PAGE(pDataFlash) >= 16384)
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
	                             ((dInternalAdr & 0x0F000000) >> 16) | \
	                             ((dInternalAdr & 0x00FF0000) >>  0) | \
 80013ea:	ea42 0203 	orr.w	r2, r2, r3
        dInternalAdr = dAddress;
    }

 	if (AT91C_DF_NB_PAGE(pDataFlash) >= 16384)
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	605a      	str	r2, [r3, #4]
	                             ((dInternalAdr & 0x0F000000) >> 16) | \
	                             ((dInternalAdr & 0x00FF0000) >>  0) | \
	                             ((dInternalAdr & 0x0000FF00) << 16);
 		pDataFlash->command[1] =  (dInternalAdr & 0x000000FF);
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	609a      	str	r2, [r3, #8]

		if ((bCmd != DB_CONTINUOUS_ARRAY_READ) && (bCmd != DB_PAGE_READ))
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	2be8      	cmp	r3, #232	; 0xe8
 8001400:	d021      	beq.n	8001446 <df_send_command+0xce>
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	2bd2      	cmp	r3, #210	; 0xd2
 8001406:	d01e      	beq.n	8001446 <df_send_command+0xce>
			bCmdSize++;
 8001408:	7abb      	ldrb	r3, [r7, #10]
 800140a:	f103 0301 	add.w	r3, r3, #1
 800140e:	72bb      	strb	r3, [r7, #10]
 8001410:	e019      	b.n	8001446 <df_send_command+0xce>
	}
	else
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
 8001412:	7afa      	ldrb	r2, [r7, #11]
	                             ((dInternalAdr & 0x00FF0000) >> 8) | \
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800141a:	ea4f 2313 	mov.w	r3, r3, lsr #8
		if ((bCmd != DB_CONTINUOUS_ARRAY_READ) && (bCmd != DB_PAGE_READ))
			bCmdSize++;
	}
	else
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
 800141e:	ea42 0203 	orr.w	r2, r2, r3
	                             ((dInternalAdr & 0x00FF0000) >> 8) | \
	                             ((dInternalAdr & 0x0000FF00) << 8) | \
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001428:	ea4f 2303 	mov.w	r3, r3, lsl #8
			bCmdSize++;
	}
	else
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
	                             ((dInternalAdr & 0x00FF0000) >> 8) | \
 800142c:	ea42 0203 	orr.w	r2, r2, r3
	                             ((dInternalAdr & 0x0000FF00) << 8) | \
	                             ((dInternalAdr & 0x000000FF) << 24);
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	ea4f 6303 	mov.w	r3, r3, lsl #24
	}
	else
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
	                             ((dInternalAdr & 0x00FF0000) >> 8) | \
	                             ((dInternalAdr & 0x0000FF00) << 8) | \
 8001436:	ea42 0203 	orr.w	r2, r2, r3
		if ((bCmd != DB_CONTINUOUS_ARRAY_READ) && (bCmd != DB_PAGE_READ))
			bCmdSize++;
	}
	else
	{
		pDataFlash->command[0] = (bCmd & 0x000000FF) | \
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	605a      	str	r2, [r3, #4]
	                             ((dInternalAdr & 0x00FF0000) >> 8) | \
	                             ((dInternalAdr & 0x0000FF00) << 8) | \
	                             ((dInternalAdr & 0x000000FF) << 24);
 		pDataFlash->command[1] = 0;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
	}

 	sFLASH_CS_LOW();
 8001446:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800144a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800144e:	f04f 0104 	mov.w	r1, #4
 8001452:	f007 f807 	bl	8008464 <GPIO_ResetBits>

 	CmdPtr = (unsigned char * )(&pDataFlash->command[0]);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f103 0304 	add.w	r3, r3, #4
 800145c:	61fb      	str	r3, [r7, #28]


 	for (count=0;count<bCmdSize;count++) {
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
 8001464:	e010      	b.n	8001488 <df_send_command+0x110>
 		*CmdPtr = sFLASH_SendByte(*CmdPtr);
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff50 	bl	8001310 <sFLASH_SendByte>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	701a      	strb	r2, [r3, #0]
 		CmdPtr++;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f103 0301 	add.w	r3, r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 	sFLASH_CS_LOW();

 	CmdPtr = (unsigned char * )(&pDataFlash->command[0]);


 	for (count=0;count<bCmdSize;count++) {
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	f103 0301 	add.w	r3, r3, #1
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	7aba      	ldrb	r2, [r7, #10]
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8ea      	bhi.n	8001466 <df_send_command+0xee>
 		*CmdPtr = sFLASH_SendByte(*CmdPtr);
 		CmdPtr++;
 	}

 	for (count=0;count<dDataSize;count++) {
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	e010      	b.n	80014ba <df_send_command+0x142>
 		*pData = sFLASH_SendByte(*pData);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff37 	bl	8001310 <sFLASH_SendByte>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	701a      	strb	r2, [r3, #0]
 		pData++;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0301 	add.w	r3, r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
 	for (count=0;count<bCmdSize;count++) {
 		*CmdPtr = sFLASH_SendByte(*CmdPtr);
 		CmdPtr++;
 	}

 	for (count=0;count<dDataSize;count++) {
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f103 0301 	add.w	r3, r3, #1
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	6a3a      	ldr	r2, [r7, #32]
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3ea      	bcc.n	8001498 <df_send_command+0x120>
 		*pData = sFLASH_SendByte(*pData);
 		pData++;
 	}

 	sFLASH_CS_HIGH();
 80014c2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80014c6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80014ca:	f04f 0104 	mov.w	r1, #4
 80014ce:	f006 ffbb 	bl	8008448 <GPIO_SetBits>

//    	while (df_is_busy(pDataFlash) == LOCKED);



	return 1;
 80014d2:	f04f 0301 	mov.w	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <df_wait_ready>:
/*------------------------------------------------------------------------------*/
/* \fn    df_wait_ready								*/
/* \brief wait for DataFlash to be ready					*/
/*------------------------------------------------------------------------------*/
static char df_wait_ready(AT91PS_DF pDataFlash)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
	unsigned int timeout = 0;
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]

	while (timeout++ < AT91C_DF_TIMEOUT)
 80014ee:	e01a      	b.n	8001526 <df_wait_ready+0x46>
	{
		if (df_get_status(pDataFlash))
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f04f 01d7 	mov.w	r1, #215	; 0xd7
 8001502:	f04f 0202 	mov.w	r2, #2
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	f7ff ff35 	bl	8001378 <df_send_command>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <df_wait_ready+0x46>
		{
			if (df_is_ready(pDataFlash))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <df_wait_ready+0x46>
				return 1;
 8001520:	f04f 0301 	mov.w	r3, #1
 8001524:	e011      	b.n	800154a <df_wait_ready+0x6a>
/*------------------------------------------------------------------------------*/
static char df_wait_ready(AT91PS_DF pDataFlash)
{
	unsigned int timeout = 0;

	while (timeout++ < AT91C_DF_TIMEOUT)
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f249 637f 	movw	r3, #38527	; 0x967f
 800152c:	f2c0 0398 	movt	r3, #152	; 0x98
 8001530:	429a      	cmp	r2, r3
 8001532:	bf8c      	ite	hi
 8001534:	2300      	movhi	r3, #0
 8001536:	2301      	movls	r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f102 0201 	add.w	r2, r2, #1
 8001540:	60fa      	str	r2, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1d4      	bne.n	80014f0 <df_wait_ready+0x10>
			if (df_is_ready(pDataFlash))
				return 1;
		}
	}

	return 0;
 8001546:	f04f 0300 	mov.w	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	f107 0710 	add.w	r7, r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <df_read>:
static int df_read(
	AT91PS_DF pDf,
	unsigned int addr,
	unsigned char *buffer,
	unsigned int size)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
	unsigned int SizeToRead;

	while (size)
 8001562:	e022      	b.n	80015aa <df_read+0x56>
	{
		SizeToRead = (size < AT91C_MAX_PDC_SIZE)? size : AT91C_MAX_PDC_SIZE;
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800156a:	429a      	cmp	r2, r3
 800156c:	bf38      	it	cc
 800156e:	4613      	movcc	r3, r2
 8001570:	617b      	str	r3, [r7, #20]

		/* wait the dataflash ready status */
		df_wait_ready(pDf);
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff ffb4 	bl	80014e0 <df_wait_ready>
	    	df_continuous_read(pDf, (char *)buffer, SizeToRead, addr);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f04f 01e8 	mov.w	r1, #232	; 0xe8
 8001586:	f04f 0208 	mov.w	r2, #8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f7ff fef4 	bl	8001378 <df_send_command>

		size -= SizeToRead;
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	ebc3 0302 	rsb	r3, r3, r2
 8001598:	603b      	str	r3, [r7, #0]
		addr += SizeToRead;
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4413      	add	r3, r2
 80015a0:	60bb      	str	r3, [r7, #8]
		buffer += SizeToRead;
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4413      	add	r3, r2
 80015a8:	607b      	str	r3, [r7, #4]
	unsigned char *buffer,
	unsigned int size)
{
	unsigned int SizeToRead;

	while (size)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1d9      	bne.n	8001564 <df_read+0x10>
		size -= SizeToRead;
		addr += SizeToRead;
		buffer += SizeToRead;
	}

   	return 0;
 80015b0:	f04f 0300 	mov.w	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	f107 0718 	add.w	r7, r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop

080015c0 <df_download>:
/*----------------------------------------------------------------------*/
/* \fn    df_download							*/
/* \brief load the content of the dataflash				*/
/*----------------------------------------------------------------------*/
static int df_download(AT91PS_DF pDf, unsigned int img_addr, unsigned int img_size, unsigned int img_dest)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
	/* read bytes in the dataflash */
	df_read(pDf, img_addr,(unsigned char *)img_dest, img_size);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f7ff ffbc 	bl	8001554 <df_read>

	/* wait the dataflash ready status */
	df_wait_ready(pDf);
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7ff ff7f 	bl	80014e0 <df_wait_ready>

    return 0;
 80015e2:	f04f 0300 	mov.w	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	f107 0710 	add.w	r7, r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <df_probe>:
/*----------------------------------------------------------------------*/
/* \fn    df_probe							*/
/* \brief Returns DataFlash ID						*/
/*----------------------------------------------------------------------*/
static int df_probe(AT91PS_DF pDf)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	6078      	str	r0, [r7, #4]
    char *pResult = (char *)(pDf->command);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f103 0304 	add.w	r3, r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]

    df_get_status(pDf);
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f04f 01d7 	mov.w	r1, #215	; 0xd7
 8001612:	f04f 0202 	mov.w	r2, #2
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	f7ff fead 	bl	8001378 <df_send_command>

    // Check if DataFlash has been configured in binary page mode
    if ((pResult[1] & 0x1) == 0x1) {
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f103 0301 	add.w	r3, r3, #1
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <df_probe+0x4a>
        pDf->dfDescription.binaryPageMode = 1;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f04f 0201 	mov.w	r2, #1
 8001636:	621a      	str	r2, [r3, #32]
 8001638:	e003      	b.n	8001642 <df_probe+0x52>
#ifdef CFG_DEBUG
	dbg_print("DataFlash in binary mode\n\r");
#endif /* CFG_DEBUG */
    } else {
        pDf->dfDescription.binaryPageMode = 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
    }

    return (pResult[1] & 0x3C);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f103 0301 	add.w	r3, r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
}
 800164e:	4618      	mov	r0, r3
 8001650:	f107 0710 	add.w	r7, r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <df_init>:
/*----------------------------------------------------------------------*/
/* \fn    df_init							*/
/* \brief This function tries to identify the DataFlash connected	*/
/*----------------------------------------------------------------------*/
int df_init (AT91PS_DF pDf)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	int dfcode = 0;
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
	int status = 1;
 8001666:	f04f 0301 	mov.w	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]

	/* Default: AT45DB321B */
	pDf->dfDescription.pages_number = 8192;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001672:	60da      	str	r2, [r3, #12]
	pDf->dfDescription.pages_size = 528;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f44f 7204 	mov.w	r2, #528	; 0x210
 800167a:	611a      	str	r2, [r3, #16]
	pDf->dfDescription.page_offset = 10;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f04f 020a 	mov.w	r2, #10
 8001682:	615a      	str	r2, [r3, #20]

	dfcode = df_probe (pDf);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffb3 	bl	80015f0 <df_probe>
 800168a:	4603      	mov	r3, r0
 800168c:	60bb      	str	r3, [r7, #8]

	switch (dfcode)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b34      	cmp	r3, #52	; 0x34
 8001692:	d010      	beq.n	80016b6 <df_init+0x5e>
 8001694:	2b3c      	cmp	r3, #60	; 0x3c
 8001696:	d01b      	beq.n	80016d0 <df_init+0x78>
 8001698:	2b2c      	cmp	r3, #44	; 0x2c
 800169a:	d126      	bne.n	80016ea <df_init+0x92>
			pDf->dfDescription.pages_size = 264;
			pDf->dfDescription.page_offset = 9;
			break;
*/
		case AT45DB161B:
			pDf->dfDescription.pages_number = 4096;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a2:	60da      	str	r2, [r3, #12]
			pDf->dfDescription.pages_size = 528;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f44f 7204 	mov.w	r2, #528	; 0x210
 80016aa:	611a      	str	r2, [r3, #16]
			pDf->dfDescription.page_offset = 10;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f04f 020a 	mov.w	r2, #10
 80016b2:	615a      	str	r2, [r3, #20]
			break;
 80016b4:	e01d      	b.n	80016f2 <df_init+0x9a>

		case AT45DB321B:
			pDf->dfDescription.pages_number = 8192;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016bc:	60da      	str	r2, [r3, #12]
			pDf->dfDescription.pages_size = 528;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f44f 7204 	mov.w	r2, #528	; 0x210
 80016c4:	611a      	str	r2, [r3, #16]
			pDf->dfDescription.page_offset = 10;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f04f 020a 	mov.w	r2, #10
 80016cc:	615a      	str	r2, [r3, #20]
			break;
 80016ce:	e010      	b.n	80016f2 <df_init+0x9a>

		case AT45DB642:
			pDf->dfDescription.pages_number = 8192;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	60da      	str	r2, [r3, #12]
			pDf->dfDescription.pages_size = 1056;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80016de:	611a      	str	r2, [r3, #16]
			pDf->dfDescription.page_offset = 11;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f04f 020b 	mov.w	r2, #11
 80016e6:	615a      	str	r2, [r3, #20]
			break;
 80016e8:	e003      	b.n	80016f2 <df_init+0x9a>
			pDf->dfDescription.pages_size = 2112;
			pDf->dfDescription.page_offset = 12;
			break;
*/
		default:
		        status = 0;
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
			break;
 80016f0:	bf00      	nop
	}

	return status;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	f107 0710 	add.w	r7, r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop

08001700 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
}
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop

0800170c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001710:	e7fe      	b.n	8001710 <HardFault_Handler+0x4>
 8001712:	bf00      	nop

08001714 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>
 800171a:	bf00      	nop

0800171c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001720:	e7fe      	b.n	8001720 <BusFault_Handler+0x4>
 8001722:	bf00      	nop

08001724 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>
 800172a:	bf00      	nop

0800172c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
}
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
}
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
}
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8001754:	f7fe fe5c 	bl	8000410 <TimingDelay_Decrement>
}
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <USART3_IRQHandler>:
  * @brief  This function handles USARTx global interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHANDLER(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
	  volatile unsigned int IIR;
	  struct buf_st *p;

	    IIR = USART3->SR;
 8001762:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001766:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	603b      	str	r3, [r7, #0]
	    if (IIR & USART_FLAG_RXNE) {                  // read interrupt
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b00      	cmp	r3, #0
 8001778:	d030      	beq.n	80017dc <USART3_IRQHandler+0x80>
	      USART3->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
 800177a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800177e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001782:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8001786:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800178a:	8812      	ldrh	r2, [r2, #0]
 800178c:	b292      	uxth	r2, r2
 800178e:	f022 0220 	bic.w	r2, r2, #32
 8001792:	b292      	uxth	r2, r2
 8001794:	801a      	strh	r2, [r3, #0]

	      p = &rbuf;
 8001796:	f240 4370 	movw	r3, #1136	; 0x470
 800179a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800179e:	607b      	str	r3, [r7, #4]

	      if (((p->in - p->out) & ~(RBUF_SIZE-1)) == 0) {
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	ebc3 0302 	rsb	r3, r3, r2
 80017ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d113      	bne.n	80017dc <USART3_IRQHandler+0x80>
	        p->buf [p->in & (RBUF_SIZE-1)] = (USART3->DR & 0x1FF);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80017bc:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80017c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	440b      	add	r3, r1
 80017ce:	721a      	strb	r2, [r3, #8]
	        p->in++;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f103 0201 	add.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	601a      	str	r2, [r3, #0]
	      }
	    }

	    if (IIR & USART_FLAG_TXE) {
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d047      	beq.n	8001876 <USART3_IRQHandler+0x11a>
	      USART3->SR &= ~USART_FLAG_TXE;	          // clear interrupt
 80017e6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80017ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80017ee:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80017f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80017f6:	8812      	ldrh	r2, [r2, #0]
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017fe:	b292      	uxth	r2, r2
 8001800:	801a      	strh	r2, [r3, #0]

	      p = &tbuf;
 8001802:	f240 5378 	movw	r3, #1400	; 0x578
 8001806:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800180a:	607b      	str	r3, [r7, #4]

	      if (p->in != p->out) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	d019      	beq.n	800184c <USART3_IRQHandler+0xf0>
	        USART3->DR = (p->buf [p->out & (TBUF_SIZE-1)] & 0x1FF);
 8001818:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800181c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6852      	ldr	r2, [r2, #4]
 8001824:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	440a      	add	r2, r1
 800182c:	7a12      	ldrb	r2, [r2, #8]
 800182e:	809a      	strh	r2, [r3, #4]
	        p->out++;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f103 0201 	add.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	605a      	str	r2, [r3, #4]
	        tx_restart = 0;
 800183c:	f240 0324 	movw	r3, #36	; 0x24
 8001840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e014      	b.n	8001876 <USART3_IRQHandler+0x11a>
	      }
	      else {
	        tx_restart = 1;
 800184c:	f240 0324 	movw	r3, #36	; 0x24
 8001850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001854:	f04f 0201 	mov.w	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
			USART3->CR1 &= ~USART_FLAG_TXE;		      // disable TX interrupt if nothing to send
 800185a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800185e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001862:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8001866:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800186a:	8992      	ldrh	r2, [r2, #12]
 800186c:	b292      	uxth	r2, r2
 800186e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001872:	b292      	uxth	r2, r2
 8001874:	819a      	strh	r2, [r3, #12]

	      }
	    }
}
 8001876:	f107 070c 	add.w	r7, r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <USART3_buffer_Init>:

/*------------------------------------------------------------------------------
  buffer_Init
  initialize the buffers
 *------------------------------------------------------------------------------*/
void USART3_buffer_Init (void) {
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  tbuf.in = 0;                                    // Clear com buffer indexes
 8001884:	f240 5378 	movw	r3, #1400	; 0x578
 8001888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
  tbuf.out = 0;
 8001892:	f240 5378 	movw	r3, #1400	; 0x578
 8001896:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  tx_restart = 1;
 80018a0:	f240 0324 	movw	r3, #36	; 0x24
 80018a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018a8:	f04f 0201 	mov.w	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

  rbuf.in = 0;
 80018ae:	f240 4370 	movw	r3, #1136	; 0x470
 80018b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
  rbuf.out = 0;
 80018bc:	f240 4370 	movw	r3, #1136	; 0x470
 80018c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
}
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <USART3_SendChar>:

/*------------------------------------------------------------------------------
  SenChar
  transmit a character
 *------------------------------------------------------------------------------*/
int USART3_SendChar (int c) {
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  struct buf_st *p = &tbuf;
 80018d8:	f240 5378 	movw	r3, #1400	; 0x578
 80018dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018e0:	60fb      	str	r3, [r7, #12]

                                                  // If the buffer is full, return an error value
  if (SIO_TBUFLEN >= TBUF_SIZE)
 80018e2:	f240 5378 	movw	r3, #1400	; 0x578
 80018e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f240 5378 	movw	r3, #1400	; 0x578
 80018f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	ebc3 0302 	rsb	r3, r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2bff      	cmp	r3, #255	; 0xff
 8001902:	d902      	bls.n	800190a <USART3_SendChar+0x3a>
    return (-1);
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	e02c      	b.n	8001964 <USART3_SendChar+0x94>

  p->buf [p->in & (TBUF_SIZE - 1)] = c;           // Add data to the transmit buffer.
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	440b      	add	r3, r1
 800191a:	721a      	strb	r2, [r3, #8]
  p->in++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f103 0201 	add.w	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]

  if (tx_restart) {                               // If transmit interrupt is disabled, enable it
 8001928:	f240 0324 	movw	r3, #36	; 0x24
 800192c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d014      	beq.n	8001960 <USART3_SendChar+0x90>
    tx_restart = 0;
 8001936:	f240 0324 	movw	r3, #36	; 0x24
 800193a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= USART_FLAG_TXE;		          // enable TX interrupt
 8001944:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001948:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800194c:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8001950:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001954:	8992      	ldrh	r2, [r2, #12]
 8001956:	b292      	uxth	r2, r2
 8001958:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800195c:	b292      	uxth	r2, r2
 800195e:	819a      	strh	r2, [r3, #12]
  }

  return (0);
 8001960:	f04f 0300 	mov.w	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	f107 0714 	add.w	r7, r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <USART3_GetKey>:

/*------------------------------------------------------------------------------
  GetKey
  receive a character
 *------------------------------------------------------------------------------*/
int USART3_GetKey (void) {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  struct buf_st *p = &rbuf;
 8001976:	f240 4370 	movw	r3, #1136	; 0x470
 800197a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800197e:	607b      	str	r3, [r7, #4]

  if (SIO_RBUFLEN == 0)
 8001980:	f240 4370 	movw	r3, #1136	; 0x470
 8001984:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29a      	uxth	r2, r3
 800198c:	f240 4370 	movw	r3, #1136	; 0x470
 8001990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	b29b      	uxth	r3, r3
 8001998:	429a      	cmp	r2, r3
 800199a:	d102      	bne.n	80019a2 <USART3_GetKey+0x32>
    return (-1);
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	e00a      	b.n	80019b8 <USART3_GetKey+0x48>

  return (p->buf [(p->out++) & (RBUF_SIZE - 1)]);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	440b      	add	r3, r1
 80019ae:	7a1b      	ldrb	r3, [r3, #8]
 80019b0:	f102 0101 	add.w	r1, r2, #1
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6051      	str	r1, [r2, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	f107 070c 	add.w	r7, r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <USART3_SendString>:




void USART3_SendString(char *mass,int size) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]

	while (size > 0) {
 80019ce:	e00c      	b.n	80019ea <USART3_SendString+0x26>
		USART3_SendChar((int )*mass++);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	f102 0201 	add.w	r2, r2, #1
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff77 	bl	80018d0 <USART3_SendChar>
	size--;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80019e8:	603b      	str	r3, [r7, #0]



void USART3_SendString(char *mass,int size) {

	while (size > 0) {
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dcef      	bgt.n	80019d0 <USART3_SendString+0xc>
		USART3_SendChar((int )*mass++);
	size--;
	}
}
 80019f0:	f107 0708 	add.w	r7, r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001a00:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001a04:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8001a0e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001a12:	60da      	str	r2, [r3, #12]
}
 8001a14:	f107 070c 	add.w	r7, r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop

08001a20 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	73bb      	strb	r3, [r7, #14]
 8001a34:	f04f 030f 	mov.w	r3, #15
 8001a38:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	78db      	ldrb	r3, [r3, #3]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d047      	beq.n	8001ad2 <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001a42:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001a46:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	ea6f 0303 	mvn.w	r3, r3
 8001a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a54:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001a58:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	f1c3 0304 	rsb	r3, r3, #4
 8001a60:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001a62:	7b7a      	ldrb	r2, [r7, #13]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	fa42 f303 	asr.w	r3, r2, r3
 8001a6a:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	785b      	ldrb	r3, [r3, #1]
 8001a70:	461a      	mov	r2, r3
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	789a      	ldrb	r2, [r3, #2]
 8001a7e:	7b7b      	ldrb	r3, [r7, #13]
 8001a80:	ea02 0303 	and.w	r3, r2, r3
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	ea42 0303 	orr.w	r3, r2, r3
 8001a8c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001a94:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001a96:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001a9a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001aaa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001aae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001aba:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	7809      	ldrb	r1, [r1, #0]
 8001ac0:	f001 011f 	and.w	r1, r1, #31
 8001ac4:	f04f 0001 	mov.w	r0, #1
 8001ac8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001ad0:	e014      	b.n	8001afc <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001ad2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001ad6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001ae2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	7809      	ldrb	r1, [r1, #0]
 8001ae8:	f001 011f 	and.w	r1, r1, #31
 8001aec:	f04f 0001 	mov.w	r0, #1
 8001af0:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001af4:	f102 0220 	add.w	r2, r2, #32
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001afc:	f107 0714 	add.w	r7, r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001b12:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001b16:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8001b20:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	ea42 0201 	orr.w	r2, r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]
}
 8001b2c:	f107 070c 	add.w	r7, r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	71fa      	strb	r2, [r7, #7]
 8001b44:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00d      	beq.n	8001b68 <NVIC_SystemLPConfig+0x30>
  {
    SCB->SCR |= LowPowerMode;
 8001b4c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001b50:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001b54:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001b58:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001b5c:	6911      	ldr	r1, [r2, #16]
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	ea41 0202 	orr.w	r2, r1, r2
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	e00e      	b.n	8001b86 <NVIC_SystemLPConfig+0x4e>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001b68:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001b6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001b70:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001b74:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001b78:	6911      	ldr	r1, [r2, #16]
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	ea6f 0202 	mvn.w	r2, r2
 8001b80:	ea01 0202 	and.w	r2, r1, r2
 8001b84:	611a      	str	r2, [r3, #16]
  }
}
 8001b86:	f107 070c 	add.w	r7, r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d10c      	bne.n	8001bb8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001b9e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001ba2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001ba6:	f24e 0210 	movw	r2, #57360	; 0xe010
 8001baa:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	f042 0204 	orr.w	r2, r2, #4
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e00b      	b.n	8001bd0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001bb8:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001bbc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001bc0:	f24e 0210 	movw	r2, #57360	; 0xe010
 8001bc4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	f022 0204 	bic.w	r2, r2, #4
 8001bce:	601a      	str	r2, [r3, #0]
  }
}
 8001bd0:	f107 070c 	add.w	r7, r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop

08001bdc <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8001be0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001be4:	f04f 0101 	mov.w	r1, #1
 8001be8:	f008 fed2 	bl	800a990 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8001bec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bf0:	f04f 0100 	mov.w	r1, #0
 8001bf4:	f008 fecc 	bl	800a990 <RCC_APB2PeriphResetCmd>
}
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c22:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	791b      	ldrb	r3, [r3, #4]
 8001c28:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001c30:	ea42 0303 	orr.w	r3, r2, r3
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	ea42 0303 	orr.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 8001c4e:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 8001c52:	ea02 0303 	and.w	r3, r2, r3
 8001c56:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001c60:	ea42 0203 	orr.w	r2, r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001c68:	ea42 0203 	orr.w	r2, r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	795b      	ldrb	r3, [r3, #5]
 8001c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001c74:	ea42 0303 	orr.w	r3, r2, r3
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	ea42 0303 	orr.w	r3, r2, r3
 8001c7e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001c92:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	7d1b      	ldrb	r3, [r3, #20]
 8001c98:	f103 33ff 	add.w	r3, r3, #4294967295
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	ea42 0303 	orr.w	r3, r2, r3
 8001ca4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	ea42 0303 	orr.w	r3, r2, r3
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001cba:	f107 0714 	add.w	r7, r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f04f 0201 	mov.w	r2, #1
 8001d02:	751a      	strb	r2, [r3, #20]
}
 8001d04:	f107 070c 	add.w	r7, r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8001d1e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001d22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f243 03e0 	movw	r3, #12512	; 0x30e0
 8001d30:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8001d34:	ea02 0303 	and.w	r3, r2, r3
 8001d38:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001d42:	ea42 0203 	orr.w	r2, r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001d4a:	ea42 0203 	orr.w	r2, r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001d52:	ea42 0303 	orr.w	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	ea42 0303 	orr.w	r3, r2, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8001d5e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001d62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	605a      	str	r2, [r3, #4]
}
 8001d6a:	f107 0714 	add.w	r7, r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
}
 8001d9c:	f107 070c 	add.w	r7, r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	e005      	b.n	8001dd4 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 0201 	bic.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
  }
}
 8001dd4:	f107 070c 	add.w	r7, r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e00:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	ea42 0303 	orr.w	r3, r2, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
}
 8001e12:	f107 0714 	add.w	r7, r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	460a      	mov	r2, r1
 8001e28:	807a      	strh	r2, [r7, #2]
 8001e2a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8001e2c:	887a      	ldrh	r2, [r7, #2]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8001e32:	883a      	ldrh	r2, [r7, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e38:	f107 070c 	add.w	r7, r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop

08001e44 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 031f 	bic.w	r3, r3, #31
 8001e62:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	ea42 0303 	orr.w	r3, r2, r3
 8001e6c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
}
 8001e74:	f107 0714 	add.w	r7, r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00c      	beq.n	8001eaa <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8001e90:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001e94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001e98:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8001e9c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001ea0:	6852      	ldr	r2, [r2, #4]
 8001ea2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	e00b      	b.n	8001ec2 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8001eaa:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001eae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001eb2:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8001eb6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001eba:	6852      	ldr	r2, [r2, #4]
 8001ebc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001ec0:	605a      	str	r2, [r3, #4]
  }
}
 8001ec2:	f107 070c 	add.w	r7, r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00c      	beq.n	8001ef6 <ADC_VBATCmd+0x2a>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8001edc:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001ee0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ee4:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8001ee8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001eec:	6852      	ldr	r2, [r2, #4]
 8001eee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	e00b      	b.n	8001f0e <ADC_VBATCmd+0x42>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8001ef6:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001efa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001efe:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8001f02:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001f06:	6852      	ldr	r2, [r2, #4]
 8001f08:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001f0c:	605a      	str	r2, [r3, #4]
  }
}
 8001f0e:	f107 070c 	add.w	r7, r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	70f9      	strb	r1, [r7, #3]
 8001f22:	70ba      	strb	r2, [r7, #2]
 8001f24:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	d929      	bls.n	8001f8c <ADC_RegularChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	4613      	mov	r3, r2
 8001f42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001f46:	4413      	add	r3, r2
 8001f48:	f1a3 031e 	sub.w	r3, r3, #30
 8001f4c:	f04f 0207 	mov.w	r2, #7
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	ea6f 0303 	mvn.w	r3, r3
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	ea02 0303 	and.w	r3, r2, r3
 8001f62:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001f64:	7879      	ldrb	r1, [r7, #1]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	f1a3 031e 	sub.w	r3, r3, #30
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	ea42 0303 	orr.w	r3, r2, r3
 8001f82:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	e024      	b.n	8001fd6 <ADC_RegularChannelConfig+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	4613      	mov	r3, r2
 8001f96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f04f 0207 	mov.w	r2, #7
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	ea6f 0303 	mvn.w	r3, r3
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	ea02 0303 	and.w	r3, r2, r3
 8001fb2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001fb4:	7879      	ldrb	r1, [r7, #1]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	ea42 0303 	orr.w	r3, r2, r3
 8001fce:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001fd6:	78bb      	ldrb	r3, [r7, #2]
 8001fd8:	2b06      	cmp	r3, #6
 8001fda:	d829      	bhi.n	8002030 <ADC_RegularChannelConfig+0x118>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8001fe2:	78bb      	ldrb	r3, [r7, #2]
 8001fe4:	f103 32ff 	add.w	r2, r3, #4294967295
 8001fe8:	4613      	mov	r3, r2
 8001fea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	f04f 021f 	mov.w	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	ea6f 0303 	mvn.w	r3, r3
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	ea02 0303 	and.w	r3, r2, r3
 8002006:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8002008:	78f9      	ldrb	r1, [r7, #3]
 800200a:	78bb      	ldrb	r3, [r7, #2]
 800200c:	f103 32ff 	add.w	r2, r3, #4294967295
 8002010:	4613      	mov	r3, r2
 8002012:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002016:	4413      	add	r3, r2
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	ea42 0303 	orr.w	r3, r2, r3
 8002026:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	635a      	str	r2, [r3, #52]	; 0x34
 800202e:	e055      	b.n	80020dc <ADC_RegularChannelConfig+0x1c4>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8002030:	78bb      	ldrb	r3, [r7, #2]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d829      	bhi.n	800208a <ADC_RegularChannelConfig+0x172>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800203c:	78ba      	ldrb	r2, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002044:	4413      	add	r3, r2
 8002046:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 800204a:	f04f 021f 	mov.w	r2, #31
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	ea6f 0303 	mvn.w	r3, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	ea02 0303 	and.w	r3, r2, r3
 8002060:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8002062:	78f9      	ldrb	r1, [r7, #3]
 8002064:	78ba      	ldrb	r2, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800206c:	4413      	add	r3, r2
 800206e:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	ea42 0303 	orr.w	r3, r2, r3
 8002080:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
 8002088:	e028      	b.n	80020dc <ADC_RegularChannelConfig+0x1c4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8002090:	78ba      	ldrb	r2, [r7, #2]
 8002092:	4613      	mov	r3, r2
 8002094:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002098:	4413      	add	r3, r2
 800209a:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 800209e:	f04f 021f 	mov.w	r2, #31
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	ea6f 0303 	mvn.w	r3, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	ea02 0303 	and.w	r3, r2, r3
 80020b4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80020b6:	78f9      	ldrb	r1, [r7, #3]
 80020b8:	78ba      	ldrb	r2, [r7, #2]
 80020ba:	4613      	mov	r3, r2
 80020bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020c0:	4413      	add	r3, r2
 80020c2:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	ea42 0303 	orr.w	r3, r2, r3
 80020d4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80020dc:	f107 0714 	add.w	r7, r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop

080020e8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
}
 80020fc:	f107 070c 	add.w	r7, r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8002122:	f04f 0301 	mov.w	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e002      	b.n	8002130 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	f107 0714 	add.w	r7, r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop

08002140 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	e005      	b.n	800216c <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	609a      	str	r2, [r3, #8]
  }
}
 800216c:	f107 070c 	add.w	r7, r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop

08002178 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f043 0202 	orr.w	r2, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	e005      	b.n	80021a4 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 0202 	bic.w	r2, r3, #2
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
  }
}
 80021a4:	f107 070c 	add.w	r7, r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop

080021b0 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80021d4:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80021dc:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	ea4f 3343 	mov.w	r3, r3, lsl #13
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	ea42 0303 	orr.w	r3, r2, r3
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	605a      	str	r2, [r3, #4]
}
 80021f2:	f107 0714 	add.w	r7, r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	e005      	b.n	8002228 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	605a      	str	r2, [r3, #4]
  }
}
 8002228:	f107 070c 	add.w	r7, r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop

08002234 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	b29b      	uxth	r3, r3
}
 8002242:	4618      	mov	r0, r3
 8002244:	f107 070c 	add.w	r7, r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8002254:	f242 3308 	movw	r3, #8968	; 0x2308
 8002258:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800225c:	681b      	ldr	r3, [r3, #0]
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	e005      	b.n	8002294 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
  }
}
 8002294:	f107 070c 	add.w	r7, r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	e005      	b.n	80022cc <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	609a      	str	r2, [r3, #8]
  }
}
 80022cc:	f107 070c 	add.w	r7, r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop

080022d8 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00c      	beq.n	8002302 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80022e8:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80022ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80022f0:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80022f4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80022f8:	6852      	ldr	r2, [r2, #4]
 80022fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	e00b      	b.n	800231a <ADC_MultiModeDMARequestAfterLastTransferCmd+0x42>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8002302:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002306:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800230a:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800230e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002312:	6852      	ldr	r2, [r2, #4]
 8002314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002318:	605a      	str	r2, [r3, #4]
  }
}
 800231a:	f107 070c 	add.w	r7, r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	70f9      	strb	r1, [r7, #3]
 800232e:	70ba      	strb	r2, [r7, #2]
 8002330:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	2b09      	cmp	r3, #9
 8002348:	d929      	bls.n	800239e <ADC_InjectedChannelConfig+0x7a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	4613      	mov	r3, r2
 8002354:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002358:	4413      	add	r3, r2
 800235a:	f1a3 031e 	sub.w	r3, r3, #30
 800235e:	f04f 0207 	mov.w	r2, #7
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	ea6f 0303 	mvn.w	r3, r3
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	ea02 0303 	and.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8002376:	7879      	ldrb	r1, [r7, #1]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	4613      	mov	r3, r2
 800237c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002380:	4413      	add	r3, r2
 8002382:	f1a3 031e 	sub.w	r3, r3, #30
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	ea42 0303 	orr.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e024      	b.n	80023e8 <ADC_InjectedChannelConfig+0xc4>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	4613      	mov	r3, r2
 80023a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80023ac:	4413      	add	r3, r2
 80023ae:	f04f 0207 	mov.w	r2, #7
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	ea6f 0303 	mvn.w	r3, r3
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	ea02 0303 	and.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80023c6:	7879      	ldrb	r1, [r7, #1]
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	4613      	mov	r3, r2
 80023cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80023d0:	4413      	add	r3, r2
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	ea42 0303 	orr.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80023f4:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	ea6f 0303 	mvn.w	r3, r3
 8002402:	b2da      	uxtb	r2, r3
 8002404:	78bb      	ldrb	r3, [r7, #2]
 8002406:	4413      	add	r3, r2
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f103 0303 	add.w	r3, r3, #3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	4613      	mov	r3, r2
 8002414:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002418:	4413      	add	r3, r2
 800241a:	f04f 021f 	mov.w	r2, #31
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	ea6f 0303 	mvn.w	r3, r3
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	ea02 0303 	and.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8002432:	78f9      	ldrb	r1, [r7, #3]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	ea6f 0303 	mvn.w	r3, r3
 800243c:	b2da      	uxtb	r2, r3
 800243e:	78bb      	ldrb	r3, [r7, #2]
 8002440:	4413      	add	r3, r2
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f103 0303 	add.w	r3, r3, #3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	4613      	mov	r3, r2
 800244e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002452:	4413      	add	r3, r2
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	ea42 0303 	orr.w	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
}
 800246a:	f107 071c 	add.w	r7, r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002498:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f103 33ff 	add.w	r3, r3, #4294967295
 80024a0:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	ea42 0303 	orr.w	r3, r2, r3
 80024ae:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80024b6:	f107 0714 	add.w	r7, r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	460a      	mov	r2, r1
 80024cc:	70fa      	strb	r2, [r7, #3]
 80024ce:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	883a      	ldrh	r2, [r7, #0]
 80024e6:	601a      	str	r2, [r3, #0]
}
 80024e8:	f107 0714 	add.w	r7, r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop

080024f4 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002510:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	ea42 0303 	orr.w	r3, r2, r3
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	609a      	str	r2, [r3, #8]
}
 8002522:	f107 0714 	add.w	r7, r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002548:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	ea42 0303 	orr.w	r3, r2, r3
 8002552:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	f107 0714 	add.w	r7, r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	f107 070c 	add.w	r7, r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop

08002584 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 800259e:	f04f 0301 	mov.w	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e002      	b.n	80025ac <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	f107 0714 	add.w	r7, r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop

080025bc <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	e005      	b.n	80025e8 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	605a      	str	r2, [r3, #4]
  }
}
 80025e8:	f107 070c 	add.w	r7, r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop

080025f4 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e005      	b.n	8002620 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]
  }
}
 8002620:	f107 070c 	add.w	r7, r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop

0800262c <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800264c:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	f107 0714 	add.w	r7, r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	460a      	mov	r2, r1
 800266c:	807a      	strh	r2, [r7, #2]
 800266e:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f04f 0201 	mov.w	r2, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <ADC_ITConfig+0x3e>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	ea42 0203 	orr.w	r2, r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	e008      	b.n	80026b0 <ADC_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	ea6f 0303 	mvn.w	r3, r3
 80026a8:	ea02 0203 	and.w	r2, r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	605a      	str	r2, [r3, #4]
  }
}
 80026b0:	f107 0714 	add.w	r7, r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	ea02 0303 	and.w	r3, r2, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80026dc:	f04f 0301 	mov.w	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e002      	b.n	80026ea <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	f107 0714 	add.w	r7, r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	ea6f 0203 	mvn.w	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
}
 800270e:	f107 070c 	add.w	r7, r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800273c:	b29b      	uxth	r3, r3
 800273e:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f04f 0101 	mov.w	r1, #1
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	ea02 0303 	and.w	r3, r2, r3
 8002754:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	ea02 0303 	and.w	r3, r2, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <ADC_GetITStatus+0x5a>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <ADC_GetITStatus+0x5a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 800276a:	f04f 0301 	mov.w	r3, #1
 800276e:	75fb      	strb	r3, [r7, #23]
 8002770:	e002      	b.n	8002778 <ADC_GetITStatus+0x60>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8002778:	7dfb      	ldrb	r3, [r7, #23]
}
 800277a:	4618      	mov	r0, r3
 800277c:	f107 071c 	add.w	r7, r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	ea6f 0203 	mvn.w	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
}                    
 80027ae:	f107 0714 	add.w	r7, r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80027c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d10c      	bne.n	80027e8 <CAN_DeInit+0x30>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 80027ce:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80027d2:	f04f 0101 	mov.w	r1, #1
 80027d6:	f008 f8af 	bl	800a938 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80027da:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	f008 f8a9 	bl	800a938 <RCC_APB1PeriphResetCmd>
 80027e6:	e00b      	b.n	8002800 <CAN_DeInit+0x48>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80027e8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80027ec:	f04f 0101 	mov.w	r1, #1
 80027f0:	f008 f8a2 	bl	800a938 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80027f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	f008 f89c 	bl	800a938 <RCC_APB1PeriphResetCmd>
  }
}
 8002800:	f107 0708 	add.w	r7, r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0202 	bic.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002836:	e003      	b.n	8002840 <CAN_Init+0x38>
  {
    wait_ack++;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f103 0301 	add.w	r3, r3, #1
 800283e:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <CAN_Init+0x4e>
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002852:	429a      	cmp	r2, r3
 8002854:	d1f0      	bne.n	8002838 <CAN_Init+0x30>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e0ab      	b.n	80029c2 <CAN_Init+0x1ba>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	799b      	ldrb	r3, [r3, #6]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d106      	bne.n	8002880 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e005      	b.n	800288c <CAN_Init+0x84>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	79db      	ldrb	r3, [r3, #7]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d106      	bne.n	80028a2 <CAN_Init+0x9a>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	e005      	b.n	80028ae <CAN_Init+0xa6>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7a1b      	ldrb	r3, [r3, #8]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d106      	bne.n	80028c4 <CAN_Init+0xbc>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e005      	b.n	80028d0 <CAN_Init+0xc8>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 0220 	bic.w	r2, r3, #32
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	7a5b      	ldrb	r3, [r3, #9]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d106      	bne.n	80028e6 <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_NART;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f043 0210 	orr.w	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e005      	b.n	80028f2 <CAN_Init+0xea>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0210 	bic.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	7a9b      	ldrb	r3, [r3, #10]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d106      	bne.n	8002908 <CAN_Init+0x100>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f043 0208 	orr.w	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e005      	b.n	8002914 <CAN_Init+0x10c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 0208 	bic.w	r2, r3, #8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	7adb      	ldrb	r3, [r3, #11]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <CAN_Init+0x122>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f043 0204 	orr.w	r2, r3, #4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e005      	b.n	8002936 <CAN_Init+0x12e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0204 	bic.w	r2, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	789b      	ldrb	r3, [r3, #2]
 800293a:	ea4f 7283 	mov.w	r2, r3, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	78db      	ldrb	r3, [r3, #3]
 8002942:	ea4f 6303 	mov.w	r3, r3, lsl #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002946:	ea42 0203 	orr.w	r2, r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	791b      	ldrb	r3, [r3, #4]
 800294e:	ea4f 4303 	mov.w	r3, r3, lsl #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8002952:	ea42 0203 	orr.w	r2, r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	795b      	ldrb	r3, [r3, #5]
 800295a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800295e:	ea42 0203 	orr.w	r2, r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	f103 33ff 	add.w	r3, r3, #4294967295

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800296a:	ea42 0203 	orr.w	r2, r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0201 	bic.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002984:	e003      	b.n	800298e <CAN_Init+0x186>
   {
     wait_ack++;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f103 0301 	add.w	r3, r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d004      	beq.n	80029a6 <CAN_Init+0x19e>
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d1ef      	bne.n	8002986 <CAN_Init+0x17e>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <CAN_Init+0x1b4>
    {
      InitStatus = CAN_InitStatus_Failed;
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e002      	b.n	80029c2 <CAN_Init+0x1ba>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 80029bc:	f04f 0301 	mov.w	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	f107 0714 	add.w	r7, r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7a9b      	ldrb	r3, [r3, #10]
 80029e2:	f04f 0201 	mov.w	r2, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80029ec:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80029f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80029f4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80029f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80029fc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8002a08:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002a0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a10:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002a14:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002a18:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	ea6f 0202 	mvn.w	r2, r2
 8002a22:	ea01 0202 	and.w	r2, r1, r2
 8002a26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7b1b      	ldrb	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d136      	bne.n	8002aa0 <CAN_FilterInit+0xd0>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8002a32:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002a36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a3a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002a3e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002a42:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	ea6f 0202 	mvn.w	r2, r2
 8002a4c:	ea01 0202 	and.w	r2, r1, r2
 8002a50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002a54:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002a58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	88c9      	ldrh	r1, [r1, #6]
 8002a64:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8002a6c:	ea40 0101 	orr.w	r1, r0, r1
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002a70:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8002a74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002a78:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002a7c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	8889      	ldrh	r1, [r1, #4]
 8002a88:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002a90:	ea40 0101 	orr.w	r1, r0, r1
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002a94:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002a98:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7b1b      	ldrb	r3, [r3, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d134      	bne.n	8002b12 <CAN_FilterInit+0x142>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8002aa8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002aac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ab0:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002ab4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002ab8:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	ea41 0202 	orr.w	r2, r1, r2
 8002ac2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002ac6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002aca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	8809      	ldrh	r1, [r1, #0]
 8002ad6:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8002ade:	ea40 0101 	orr.w	r1, r0, r1
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002ae2:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8002ae6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002aea:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002aee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	8889      	ldrh	r1, [r1, #4]
 8002afa:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002b02:	ea40 0101 	orr.w	r1, r0, r1
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002b06:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002b0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7adb      	ldrb	r3, [r3, #11]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d111      	bne.n	8002b3e <CAN_FilterInit+0x16e>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8002b1a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002b1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b22:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002b26:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002b2a:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	ea6f 0202 	mvn.w	r2, r2
 8002b34:	ea01 0202 	and.w	r2, r1, r2
 8002b38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b3c:	e00e      	b.n	8002b5c <CAN_FilterInit+0x18c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8002b3e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002b42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b46:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002b4a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002b4e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	ea41 0202 	orr.w	r2, r1, r2
 8002b58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	891b      	ldrh	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d110      	bne.n	8002b86 <CAN_FilterInit+0x1b6>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8002b64:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002b68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b6c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002b70:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002b74:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	ea6f 0202 	mvn.w	r2, r2
 8002b7e:	ea01 0202 	and.w	r2, r1, r2
 8002b82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	891b      	ldrh	r3, [r3, #8]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10e      	bne.n	8002bac <CAN_FilterInit+0x1dc>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8002b8e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002b92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002b96:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002b9a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002b9e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	ea41 0202 	orr.w	r2, r1, r2
 8002ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7b5b      	ldrb	r3, [r3, #13]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10e      	bne.n	8002bd2 <CAN_FilterInit+0x202>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8002bb4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002bb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bbc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002bc0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002bc4:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	ea41 0202 	orr.w	r2, r1, r2
 8002bce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8002bd2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002bd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bda:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002bde:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002be2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002bee:	f107 0714 	add.w	r7, r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f04f 0203 	mov.w	r2, #3
 8002c46:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f04f 0202 	mov.w	r2, #2
 8002c4e:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f04f 0201 	mov.w	r2, #1
 8002c56:	801a      	strh	r2, [r3, #0]
}
 8002c58:	f107 070c 	add.w	r7, r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8002c6e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002c72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c76:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002c7a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002c7e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8002c8a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002c8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c92:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002c96:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002c9a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002c9e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002ca2:	f022 020e 	bic.w	r2, r2, #14
 8002ca6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8002caa:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002cae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002cb2:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002cb6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002cba:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8002cbe:	79fa      	ldrb	r2, [r7, #7]
 8002cc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002cc4:	ea41 0202 	orr.w	r2, r1, r2
 8002cc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8002ccc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002cd0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002cd4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002cd8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002cdc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002ce8:	f107 070c 	add.w	r7, r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e005      	b.n	8002d20 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	601a      	str	r2, [r3, #0]
  }
}
 8002d20:	f107 070c 	add.w	r7, r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01e      	beq.n	8002d7c <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002d50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8002d60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002d70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8002d7a:	e01d      	b.n	8002db8 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8002d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8002db8:	f107 070c 	add.w	r7, r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop

08002dc4 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <CAN_Transmit+0x24>
  {
    transmit_mailbox = 0;
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	e016      	b.n	8002e16 <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <CAN_Transmit+0x38>
  {
    transmit_mailbox = 1;
 8002df4:	f04f 0301 	mov.w	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e00c      	b.n	8002e16 <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <CAN_Transmit+0x4c>
  {
    transmit_mailbox = 2;
 8002e08:	f04f 0302 	mov.w	r3, #2
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	e002      	b.n	8002e16 <CAN_Transmit+0x52>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8002e10:	f04f 0304 	mov.w	r3, #4
 8002e14:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	f000 80ce 	beq.w	8002fba <CAN_Transmit+0x1f6>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	f102 0218 	add.w	r2, r2, #24
 8002e28:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002e2c:	440a      	add	r2, r1
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	f002 0201 	and.w	r2, r2, #1
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	f103 0318 	add.w	r3, r3, #24
 8002e3a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002e3e:	440b      	add	r3, r1
 8002e40:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	7a1b      	ldrb	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11a      	bne.n	8002e80 <CAN_Transmit+0xbc>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	f102 0218 	add.w	r2, r2, #24
 8002e54:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002e58:	440a      	add	r2, r1
 8002e5a:	6811      	ldr	r1, [r2, #0]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	ea4f 5042 	mov.w	r0, r2, lsl #21
                                                  TxMessage->RTR);
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8002e68:	ea40 0202 	orr.w	r2, r0, r2
 8002e6c:	ea41 0202 	orr.w	r2, r1, r2
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	f103 0318 	add.w	r3, r3, #24
 8002e76:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002e7a:	440b      	add	r3, r1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e01d      	b.n	8002ebc <CAN_Transmit+0xf8>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	f102 0218 	add.w	r2, r2, #24
 8002e8a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002e8e:	440a      	add	r2, r1
 8002e90:	6811      	ldr	r1, [r2, #0]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	6852      	ldr	r2, [r2, #4]
 8002e96:	ea4f 00c2 	mov.w	r0, r2, lsl #3
                                                  TxMessage->IDE | \
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8002e9e:	ea40 0002 	orr.w	r0, r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 8002ea6:	ea40 0202 	orr.w	r2, r0, r2
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8002eaa:	ea41 0202 	orr.w	r2, r1, r2
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	f103 0318 	add.w	r3, r3, #24
 8002eb4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002eb8:	440b      	add	r3, r1
 8002eba:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	7a9b      	ldrb	r3, [r3, #10]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	f102 0218 	add.w	r2, r2, #24
 8002ed4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002ed8:	440a      	add	r2, r1
 8002eda:	f102 0204 	add.w	r2, r2, #4
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	f022 020f 	bic.w	r2, r2, #15
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	f103 0318 	add.w	r3, r3, #24
 8002eea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002eee:	440b      	add	r3, r1
 8002ef0:	f103 0304 	add.w	r3, r3, #4
 8002ef4:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	f102 0218 	add.w	r2, r2, #24
 8002f00:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002f04:	440a      	add	r2, r1
 8002f06:	f102 0204 	add.w	r2, r2, #4
 8002f0a:	6811      	ldr	r1, [r2, #0]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	7a92      	ldrb	r2, [r2, #10]
 8002f10:	ea41 0202 	orr.w	r2, r1, r2
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	f103 0318 	add.w	r3, r3, #24
 8002f1a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f1e:	440b      	add	r3, r1
 8002f20:	f103 0304 	add.w	r3, r3, #4
 8002f24:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	7b92      	ldrb	r2, [r2, #14]
 8002f2c:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	7b52      	ldrb	r2, [r2, #13]
 8002f34:	ea4f 4202 	mov.w	r2, r2, lsl #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8002f38:	ea41 0102 	orr.w	r1, r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	7b12      	ldrb	r2, [r2, #12]
 8002f40:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8002f44:	ea41 0102 	orr.w	r1, r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8002f4c:	ea41 0202 	orr.w	r2, r1, r2
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f56:	440b      	add	r3, r1
 8002f58:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f5c:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	7c92      	ldrb	r2, [r2, #18]
 8002f64:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	7c52      	ldrb	r2, [r2, #17]
 8002f6c:	ea4f 4202 	mov.w	r2, r2, lsl #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002f70:	ea41 0102 	orr.w	r1, r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	7c12      	ldrb	r2, [r2, #16]
 8002f78:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8002f7c:	ea41 0102 	orr.w	r1, r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8002f84:	ea41 0202 	orr.w	r2, r1, r2
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f8e:	440b      	add	r3, r1
 8002f90:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f94:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	f102 0218 	add.w	r2, r2, #24
 8002fa0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002fa4:	440a      	add	r2, r1
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	f103 0318 	add.w	r3, r3, #24
 8002fb2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002fb6:	440b      	add	r3, r1
 8002fb8:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f107 0714 	add.w	r7, r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d00d      	beq.n	8002ffc <CAN_TransmitStatus+0x34>
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d015      	beq.n	8003010 <CAN_TransmitStatus+0x48>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11d      	bne.n	8003024 <CAN_TransmitStatus+0x5c>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	f04f 0303 	mov.w	r3, #3
 8002ff0:	f2c0 4300 	movt	r3, #1024	; 0x400
 8002ff4:	ea02 0303 	and.w	r3, r2, r3
 8002ff8:	60fb      	str	r3, [r7, #12]
      break;
 8002ffa:	e017      	b.n	800302c <CAN_TransmitStatus+0x64>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003004:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003008:	ea02 0303 	and.w	r3, r2, r3
 800300c:	60fb      	str	r3, [r7, #12]
      break;
 800300e:	e00d      	b.n	800302c <CAN_TransmitStatus+0x64>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	f2c1 0303 	movt	r3, #4099	; 0x1003
 800301c:	ea02 0303 	and.w	r3, r2, r3
 8003020:	60fb      	str	r3, [r7, #12]
      break;
 8003022:	e003      	b.n	800302c <CAN_TransmitStatus+0x64>
    default:
      state = CAN_TxStatus_Failed;
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
      break;
 800302a:	bf00      	nop
  }
  switch (state)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003032:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003036:	4293      	cmp	r3, r2
 8003038:	d02f      	beq.n	800309a <CAN_TransmitStatus+0xd2>
 800303a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003042:	4293      	cmp	r3, r2
 8003044:	d80e      	bhi.n	8003064 <CAN_TransmitStatus+0x9c>
 8003046:	f04f 0201 	mov.w	r2, #1
 800304a:	f2c0 4200 	movt	r2, #1024	; 0x400
 800304e:	4293      	cmp	r3, r2
 8003050:	d01f      	beq.n	8003092 <CAN_TransmitStatus+0xca>
 8003052:	f04f 0203 	mov.w	r2, #3
 8003056:	f2c0 4200 	movt	r2, #1024	; 0x400
 800305a:	4293      	cmp	r3, r2
 800305c:	d025      	beq.n	80030aa <CAN_TransmitStatus+0xe2>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d013      	beq.n	800308a <CAN_TransmitStatus+0xc2>
 8003062:	e02e      	b.n	80030c2 <CAN_TransmitStatus+0xfa>
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f2c1 0201 	movt	r2, #4097	; 0x1001
 800306c:	4293      	cmp	r3, r2
 800306e:	d018      	beq.n	80030a2 <CAN_TransmitStatus+0xda>
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f2c1 0203 	movt	r2, #4099	; 0x1003
 8003078:	4293      	cmp	r3, r2
 800307a:	d01e      	beq.n	80030ba <CAN_TransmitStatus+0xf2>
 800307c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003080:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003084:	4293      	cmp	r3, r2
 8003086:	d014      	beq.n	80030b2 <CAN_TransmitStatus+0xea>
 8003088:	e01b      	b.n	80030c2 <CAN_TransmitStatus+0xfa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 800308a:	f04f 0302 	mov.w	r3, #2
 800308e:	60fb      	str	r3, [r7, #12]
      break;
 8003090:	e01b      	b.n	80030ca <CAN_TransmitStatus+0x102>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
      break;
 8003098:	e017      	b.n	80030ca <CAN_TransmitStatus+0x102>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
      break;
 80030a0:	e013      	b.n	80030ca <CAN_TransmitStatus+0x102>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
      break;
 80030a8:	e00f      	b.n	80030ca <CAN_TransmitStatus+0x102>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 80030aa:	f04f 0301 	mov.w	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
      break;
 80030b0:	e00b      	b.n	80030ca <CAN_TransmitStatus+0x102>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 80030b2:	f04f 0301 	mov.w	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
      break;
 80030b8:	e007      	b.n	80030ca <CAN_TransmitStatus+0x102>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 80030ba:	f04f 0301 	mov.w	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
      break;
 80030c0:	e003      	b.n	80030ca <CAN_TransmitStatus+0x102>
    default: state = CAN_TxStatus_Failed;
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
      break;
 80030c8:	bf00      	nop
  }
  return (uint8_t) state;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	b2db      	uxtb	r3, r3
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	f107 0714 	add.w	r7, r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop

080030dc <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d00a      	beq.n	8003104 <CAN_CancelTransmit+0x28>
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d00f      	beq.n	8003112 <CAN_CancelTransmit+0x36>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <CAN_CancelTransmit+0x46>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	609a      	str	r2, [r3, #8]
      break;
 8003102:	e00f      	b.n	8003124 <CAN_CancelTransmit+0x48>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	609a      	str	r2, [r3, #8]
      break;
 8003110:	e008      	b.n	8003124 <CAN_CancelTransmit+0x48>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]
      break;
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <CAN_CancelTransmit+0x48>
    default:
      break;
 8003122:	bf00      	nop
  }
}
 8003124:	f107 070c 	add.w	r7, r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop

08003130 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	460b      	mov	r3, r1
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	f103 031b 	add.w	r3, r3, #27
 8003146:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800314a:	4413      	add	r3, r2
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	b2da      	uxtb	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7a1b      	ldrb	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8003162:	7afb      	ldrb	r3, [r7, #11]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	f103 031b 	add.w	r3, r3, #27
 800316a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800316e:	4413      	add	r3, r2
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	ea4f 5253 	mov.w	r2, r3, lsr #21
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e00b      	b.n	8003194 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	f103 031b 	add.w	r3, r3, #27
 8003184:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003188:	4413      	add	r3, r2
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8003194:	7afb      	ldrb	r3, [r7, #11]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f103 031b 	add.w	r3, r3, #27
 800319c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031a0:	4413      	add	r3, r2
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 80031b0:	7afb      	ldrb	r3, [r7, #11]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	f103 031b 	add.w	r3, r3, #27
 80031b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031bc:	4413      	add	r3, r2
 80031be:	f103 0304 	add.w	r3, r3, #4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80031d0:	7afb      	ldrb	r3, [r7, #11]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f103 031b 	add.w	r3, r3, #27
 80031d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031dc:	4413      	add	r3, r2
 80031de:	f103 0304 	add.w	r3, r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8003204:	7afb      	ldrb	r3, [r7, #11]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800320c:	4413      	add	r3, r2
 800320e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003218:	b2da      	uxtb	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800321e:	7afb      	ldrb	r3, [r7, #11]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003226:	4413      	add	r3, r2
 8003228:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003232:	b2da      	uxtb	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8003238:	7afb      	ldrb	r3, [r7, #11]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003240:	4413      	add	r3, r2
 8003242:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800324c:	b2da      	uxtb	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800325a:	4413      	add	r3, r2
 800325c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8003268:	7afb      	ldrb	r3, [r7, #11]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003270:	4413      	add	r3, r2
 8003272:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800327c:	b2da      	uxtb	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800328a:	4413      	add	r3, r2
 800328c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003296:	b2da      	uxtb	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 800329c:	7afb      	ldrb	r3, [r7, #11]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <CAN_Receive+0x19a>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	e005      	b.n	80032d6 <CAN_Receive+0x1a6>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f043 0220 	orr.w	r2, r3, #32
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	611a      	str	r2, [r3, #16]
  }
}
 80032d6:	f107 0714 	add.w	r7, r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	e005      	b.n	800330c <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
  }
}
 800330c:	f107 070c 	add.w	r7, r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <CAN_MessagePending+0x26>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e00c      	b.n	8003358 <CAN_MessagePending+0x40>
  }
  else if (FIFONumber == CAN_FIFO1)
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <CAN_MessagePending+0x3a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e002      	b.n	8003358 <CAN_MessagePending+0x40>
  }
  else
  {
    message_pending = 0;
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	f107 0714 	add.w	r7, r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 800337a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800337e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d123      	bne.n	80033ce <CAN_OperatingModeRequest+0x66>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8003396:	e003      	b.n	80033a0 <CAN_OperatingModeRequest+0x38>
    {
      timeout--;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f103 33ff 	add.w	r3, r3, #4294967295
 800339e:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d002      	beq.n	80033b2 <CAN_OperatingModeRequest+0x4a>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f2      	bne.n	8003398 <CAN_OperatingModeRequest+0x30>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <CAN_OperatingModeRequest+0x5e>
    {
      status = CAN_ModeStatus_Failed;
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e052      	b.n	800346c <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80033c6:	f04f 0301 	mov.w	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e04e      	b.n	800346c <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d121      	bne.n	8003418 <CAN_OperatingModeRequest+0xb0>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 0203 	bic.w	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 80033e0:	e003      	b.n	80033ea <CAN_OperatingModeRequest+0x82>
    {
      timeout--;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80033e8:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <CAN_OperatingModeRequest+0x94>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f2      	bne.n	80033e2 <CAN_OperatingModeRequest+0x7a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <CAN_OperatingModeRequest+0xa8>
    {
      status = CAN_ModeStatus_Failed;
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	e02d      	b.n	800346c <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8003410:	f04f 0301 	mov.w	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e029      	b.n	800346c <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d123      	bne.n	8003466 <CAN_OperatingModeRequest+0xfe>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0303 	bic.w	r3, r3, #3
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800342e:	e003      	b.n	8003438 <CAN_OperatingModeRequest+0xd0>
    {
      timeout--;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f103 33ff 	add.w	r3, r3, #4294967295
 8003436:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d002      	beq.n	800344a <CAN_OperatingModeRequest+0xe2>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f2      	bne.n	8003430 <CAN_OperatingModeRequest+0xc8>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d003      	beq.n	800345e <CAN_OperatingModeRequest+0xf6>
    {
      status = CAN_ModeStatus_Failed;
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e006      	b.n	800346c <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800345e:	f04f 0301 	mov.w	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e002      	b.n	800346c <CAN_OperatingModeRequest+0x104>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	f107 0714 	add.w	r7, r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop

0800347c <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d102      	bne.n	80034ac <CAN_Sleep+0x30>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80034a6:	f04f 0301 	mov.w	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	f107 0714 	add.w	r7, r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 80034c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c8:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 0202 	bic.w	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 80034dc:	e003      	b.n	80034e6 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80034e4:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <CAN_WakeUp+0x3c>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f2      	bne.n	80034de <CAN_WakeUp+0x22>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <CAN_WakeUp+0x4e>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8003504:	f04f 0301 	mov.w	r3, #1
 8003508:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 800350a:	7afb      	ldrb	r3, [r7, #11]
}
 800350c:	4618      	mov	r0, r3
 800350e:	f107 0714 	add.w	r7, r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003530:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	f107 0714 	add.w	r7, r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8003556:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	f107 0714 	add.w	r7, r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800357e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003582:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	f107 0714 	add.w	r7, r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop

08003594 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	ea42 0203 	orr.w	r2, r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	615a      	str	r2, [r3, #20]
 80035b6:	e008      	b.n	80035ca <CAN_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	ea6f 0303 	mvn.w	r3, r3
 80035c2:	ea02 0203 	and.w	r2, r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	615a      	str	r2, [r3, #20]
  }
}
 80035ca:	f107 0714 	add.w	r7, r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <CAN_GetFlagStatus+0x40>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	ea02 0303 	and.w	r3, r2, r3
 80035f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <CAN_GetFlagStatus+0x38>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8003604:	f04f 0301 	mov.w	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e05d      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	e059      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d012      	beq.n	8003644 <CAN_GetFlagStatus+0x70>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	ea02 0303 	and.w	r3, r2, r3
 8003628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800362c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <CAN_GetFlagStatus+0x68>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8003634:	f04f 0301 	mov.w	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	e045      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	e041      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d012      	beq.n	8003674 <CAN_GetFlagStatus+0xa0>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	ea02 0303 	and.w	r3, r2, r3
 8003658:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800365c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <CAN_GetFlagStatus+0x98>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8003664:	f04f 0301 	mov.w	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	e02d      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	e029      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <CAN_GetFlagStatus+0xd0>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	ea02 0303 	and.w	r3, r2, r3
 8003688:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800368c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <CAN_GetFlagStatus+0xc8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8003694:	f04f 0301 	mov.w	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e015      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	e011      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	ea02 0303 	and.w	r3, r2, r3
 80036ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <CAN_GetFlagStatus+0xee>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80036ba:	f04f 0301 	mov.w	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e002      	b.n	80036c8 <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	f107 0714 	add.w	r7, r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop

080036d8 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	f04f 0370 	mov.w	r3, #112	; 0x70
 80036ee:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d104      	bne.n	8003700 <CAN_ClearFlag+0x28>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
 80036fe:	e023      	b.n	8003748 <CAN_ClearFlag+0x70>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003706:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800370a:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <CAN_ClearFlag+0x46>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	60da      	str	r2, [r3, #12]
 800371c:	e014      	b.n	8003748 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <CAN_ClearFlag+0x58>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	611a      	str	r2, [r3, #16]
 800372e:	e00b      	b.n	8003748 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <CAN_ClearFlag+0x6a>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	e002      	b.n	8003748 <CAN_ClearFlag+0x70>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003748:	f107 0714 	add.w	r7, r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	ea02 0303 	and.w	r3, r2, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80c4 	beq.w	80038fc <CAN_GetITStatus+0x1a8>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d06b      	beq.n	8003852 <CAN_GetITStatus+0xfe>
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d80f      	bhi.n	800379e <CAN_GetITStatus+0x4a>
 800377e:	2b04      	cmp	r3, #4
 8003780:	d03f      	beq.n	8003802 <CAN_GetITStatus+0xae>
 8003782:	2b04      	cmp	r3, #4
 8003784:	d804      	bhi.n	8003790 <CAN_GetITStatus+0x3c>
 8003786:	2b01      	cmp	r3, #1
 8003788:	d025      	beq.n	80037d6 <CAN_GetITStatus+0x82>
 800378a:	2b02      	cmp	r3, #2
 800378c:	d02f      	beq.n	80037ee <CAN_GetITStatus+0x9a>
 800378e:	e0b1      	b.n	80038f4 <CAN_GetITStatus+0x1a0>
 8003790:	2b10      	cmp	r3, #16
 8003792:	d04a      	beq.n	800382a <CAN_GetITStatus+0xd6>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d052      	beq.n	800383e <CAN_GetITStatus+0xea>
 8003798:	2b08      	cmp	r3, #8
 800379a:	d03c      	beq.n	8003816 <CAN_GetITStatus+0xc2>
 800379c:	e0aa      	b.n	80038f4 <CAN_GetITStatus+0x1a0>
 800379e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a2:	f000 8092 	beq.w	80038ca <CAN_GetITStatus+0x176>
 80037a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037aa:	d809      	bhi.n	80037c0 <CAN_GetITStatus+0x6c>
 80037ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b0:	d077      	beq.n	80038a2 <CAN_GetITStatus+0x14e>
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b6:	d07e      	beq.n	80038b6 <CAN_GetITStatus+0x162>
 80037b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037bc:	d067      	beq.n	800388e <CAN_GetITStatus+0x13a>
 80037be:	e099      	b.n	80038f4 <CAN_GetITStatus+0x1a0>
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d04f      	beq.n	8003866 <CAN_GetITStatus+0x112>
 80037c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ca:	d056      	beq.n	800387a <CAN_GetITStatus+0x126>
 80037cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d0:	f000 8085 	beq.w	80038de <CAN_GetITStatus+0x18a>
 80037d4:	e08e      	b.n	80038f4 <CAN_GetITStatus+0x1a0>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f240 1101 	movw	r1, #257	; 0x101
 80037e0:	f2c0 0101 	movt	r1, #1
 80037e4:	f000 f910 	bl	8003a08 <CheckITStatus>
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]
        break;
 80037ec:	e089      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f04f 0103 	mov.w	r1, #3
 80037f8:	f000 f906 	bl	8003a08 <CheckITStatus>
 80037fc:	4603      	mov	r3, r0
 80037fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003800:	e07f      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4618      	mov	r0, r3
 8003808:	f04f 0108 	mov.w	r1, #8
 800380c:	f000 f8fc 	bl	8003a08 <CheckITStatus>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
        break;
 8003814:	e075      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4618      	mov	r0, r3
 800381c:	f04f 0110 	mov.w	r1, #16
 8003820:	f000 f8f2 	bl	8003a08 <CheckITStatus>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]
        break;
 8003828:	e06b      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	4618      	mov	r0, r3
 8003830:	f04f 0103 	mov.w	r1, #3
 8003834:	f000 f8e8 	bl	8003a08 <CheckITStatus>
 8003838:	4603      	mov	r3, r0
 800383a:	73fb      	strb	r3, [r7, #15]
        break;
 800383c:	e061      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	4618      	mov	r0, r3
 8003844:	f04f 0108 	mov.w	r1, #8
 8003848:	f000 f8de 	bl	8003a08 <CheckITStatus>
 800384c:	4603      	mov	r3, r0
 800384e:	73fb      	strb	r3, [r7, #15]
        break;
 8003850:	e057      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	4618      	mov	r0, r3
 8003858:	f04f 0110 	mov.w	r1, #16
 800385c:	f000 f8d4 	bl	8003a08 <CheckITStatus>
 8003860:	4603      	mov	r3, r0
 8003862:	73fb      	strb	r3, [r7, #15]
        break;
 8003864:	e04d      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	f04f 0108 	mov.w	r1, #8
 8003870:	f000 f8ca 	bl	8003a08 <CheckITStatus>
 8003874:	4603      	mov	r3, r0
 8003876:	73fb      	strb	r3, [r7, #15]
        break;
 8003878:	e043      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4618      	mov	r0, r3
 8003880:	f04f 0110 	mov.w	r1, #16
 8003884:	f000 f8c0 	bl	8003a08 <CheckITStatus>
 8003888:	4603      	mov	r3, r0
 800388a:	73fb      	strb	r3, [r7, #15]
        break;
 800388c:	e039      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	4618      	mov	r0, r3
 8003894:	f04f 0101 	mov.w	r1, #1
 8003898:	f000 f8b6 	bl	8003a08 <CheckITStatus>
 800389c:	4603      	mov	r3, r0
 800389e:	73fb      	strb	r3, [r7, #15]
        break;
 80038a0:	e02f      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f04f 0102 	mov.w	r1, #2
 80038ac:	f000 f8ac 	bl	8003a08 <CheckITStatus>
 80038b0:	4603      	mov	r3, r0
 80038b2:	73fb      	strb	r3, [r7, #15]
        break;
 80038b4:	e025      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f04f 0104 	mov.w	r1, #4
 80038c0:	f000 f8a2 	bl	8003a08 <CheckITStatus>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
        break;
 80038c8:	e01b      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f04f 0170 	mov.w	r1, #112	; 0x70
 80038d4:	f000 f898 	bl	8003a08 <CheckITStatus>
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]
        break;
 80038dc:	e011      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f04f 0104 	mov.w	r1, #4
 80038e8:	f000 f88e 	bl	8003a08 <CheckITStatus>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]
        break;
 80038f0:	bf00      	nop
 80038f2:	e006      	b.n	8003902 <CAN_GetITStatus+0x1ae>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
        break;
 80038fa:	e002      	b.n	8003902 <CAN_GetITStatus+0x1ae>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	f107 0710 	add.w	r7, r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop

08003910 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003920:	d04c      	beq.n	80039bc <CAN_ClearITPendingBit+0xac>
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d80d      	bhi.n	8003944 <CAN_ClearITPendingBit+0x34>
 8003928:	2b08      	cmp	r3, #8
 800392a:	d02e      	beq.n	800398a <CAN_ClearITPendingBit+0x7a>
 800392c:	2b08      	cmp	r3, #8
 800392e:	d804      	bhi.n	800393a <CAN_ClearITPendingBit+0x2a>
 8003930:	2b01      	cmp	r3, #1
 8003932:	d01e      	beq.n	8003972 <CAN_ClearITPendingBit+0x62>
 8003934:	2b04      	cmp	r3, #4
 8003936:	d023      	beq.n	8003980 <CAN_ClearITPendingBit+0x70>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8003938:	e061      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800393a:	2b20      	cmp	r3, #32
 800393c:	d02a      	beq.n	8003994 <CAN_ClearITPendingBit+0x84>
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d02d      	beq.n	800399e <CAN_ClearITPendingBit+0x8e>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8003942:	e05c      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8003944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003948:	d047      	beq.n	80039da <CAN_ClearITPendingBit+0xca>
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d806      	bhi.n	800395e <CAN_ClearITPendingBit+0x4e>
 8003950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003954:	d037      	beq.n	80039c6 <CAN_ClearITPendingBit+0xb6>
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395a:	d039      	beq.n	80039d0 <CAN_ClearITPendingBit+0xc0>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 800395c:	e04f      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003962:	d021      	beq.n	80039a8 <CAN_ClearITPendingBit+0x98>
 8003964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003968:	d023      	beq.n	80039b2 <CAN_ClearITPendingBit+0xa2>
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396e:	d03d      	beq.n	80039ec <CAN_ClearITPendingBit+0xdc>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8003970:	e045      	b.n	80039fe <CAN_ClearITPendingBit+0xee>

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	f240 1301 	movw	r3, #257	; 0x101
 8003978:	f2c0 0301 	movt	r3, #1
 800397c:	6093      	str	r3, [r2, #8]
      break;
 800397e:	e03e      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f04f 0208 	mov.w	r2, #8
 8003986:	60da      	str	r2, [r3, #12]
      break;
 8003988:	e039      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f04f 0210 	mov.w	r2, #16
 8003990:	60da      	str	r2, [r3, #12]
      break;
 8003992:	e034      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f04f 0208 	mov.w	r2, #8
 800399a:	611a      	str	r2, [r3, #16]
      break;
 800399c:	e02f      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f04f 0210 	mov.w	r2, #16
 80039a4:	611a      	str	r2, [r3, #16]
      break;
 80039a6:	e02a      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f04f 0208 	mov.w	r2, #8
 80039ae:	605a      	str	r2, [r3, #4]
      break;
 80039b0:	e025      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f04f 0210 	mov.w	r2, #16
 80039b8:	605a      	str	r2, [r3, #4]
      break;
 80039ba:	e020      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f04f 0204 	mov.w	r2, #4
 80039c2:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 80039c4:	e01b      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f04f 0204 	mov.w	r2, #4
 80039cc:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 80039ce:	e016      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f04f 0204 	mov.w	r2, #4
 80039d6:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 80039d8:	e011      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f04f 0204 	mov.w	r2, #4
 80039e8:	605a      	str	r2, [r3, #4]
      break;
 80039ea:	e008      	b.n	80039fe <CAN_ClearITPendingBit+0xee>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f04f 0204 	mov.w	r2, #4
 80039fa:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 80039fc:	bf00      	nop
    default:
       break;
   }
}
 80039fe:	f107 070c 	add.w	r7, r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	ea02 0303 	and.w	r3, r2, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <CheckITStatus+0x24>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8003a24:	f04f 0301 	mov.w	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
 8003a2a:	e002      	b.n	8003a32 <CheckITStatus+0x2a>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	f107 0714 	add.w	r7, r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8003a44:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a4c:	f04f 0201 	mov.w	r2, #1
 8003a50:	609a      	str	r2, [r3, #8]
}
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8003a60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8003a6c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a74:	681b      	ldr	r3, [r3, #0]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	f107 070c 	add.w	r7, r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop

08003a84 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e00e      	b.n	8003aba <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 8003a9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003aa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	440a      	add	r2, r1
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f103 0301 	add.w	r3, r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d3ec      	bcc.n	8003a9c <CRC_CalcBlockCRC+0x18>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8003ac2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ac6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	f107 0714 	add.w	r7, r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8003adc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ae4:	681b      	ldr	r3, [r3, #0]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8003afa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003afe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b02:	79fa      	ldrb	r2, [r7, #7]
 8003b04:	711a      	strb	r2, [r3, #4]
}
 8003b06:	f107 070c 	add.w	r7, r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8003b14:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003b18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b1c:	791b      	ldrb	r3, [r3, #4]
 8003b1e:	b2db      	uxtb	r3, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8003b2c:	f04f 0010 	mov.w	r0, #16
 8003b30:	f04f 0101 	mov.w	r1, #1
 8003b34:	f006 fea8 	bl	800a888 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8003b38:	f04f 0010 	mov.w	r0, #16
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	f006 fea2 	bl	800a888 <RCC_AHB2PeriphResetCmd>
}
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003b66:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003b78:	6811      	ldr	r1, [r2, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	8852      	ldrh	r2, [r2, #2]
 8003b7e:	ea41 0202 	orr.w	r2, r1, r2
 8003b82:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b9a:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003bac:	6811      	ldr	r1, [r2, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	8892      	ldrh	r2, [r2, #4]
 8003bb2:	ea41 0202 	orr.w	r2, r1, r2
 8003bb6:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	885b      	ldrh	r3, [r3, #2]
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d00b      	beq.n	8003bd8 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	885b      	ldrh	r3, [r3, #2]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8003bc4:	2b28      	cmp	r3, #40	; 0x28
 8003bc6:	d007      	beq.n	8003bd8 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8003bcc:	2b30      	cmp	r3, #48	; 0x30
 8003bce:	d003      	beq.n	8003bd8 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8003bd4:	2b38      	cmp	r3, #56	; 0x38
 8003bd6:	d119      	bne.n	8003c0c <CRYP_Init+0xc4>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bee:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003c00:	6811      	ldr	r1, [r2, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	88d2      	ldrh	r2, [r2, #6]
 8003c06:	ea41 0202 	orr.w	r2, r1, r2
 8003c0a:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	8812      	ldrh	r2, [r2, #0]
 8003c3a:	ea41 0202 	orr.w	r2, r1, r2
 8003c3e:	601a      	str	r2, [r3, #0]
}
 8003c40:	f107 070c 	add.w	r7, r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	801a      	strh	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	805a      	strh	r2, [r3, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	80da      	strh	r2, [r3, #6]
}
 8003c74:	f107 070c 	add.w	r7, r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop

08003c80 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6852      	ldr	r2, [r2, #4]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68d2      	ldr	r2, [r2, #12]
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6912      	ldr	r2, [r2, #16]
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6952      	ldr	r2, [r2, #20]
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6992      	ldr	r2, [r2, #24]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	69d2      	ldr	r2, [r2, #28]
 8003cf6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003cf8:	f107 070c 	add.w	r7, r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop

08003d04 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	61da      	str	r2, [r3, #28]
}
 8003d4c:	f107 070c 	add.w	r7, r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop

08003d58 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6852      	ldr	r2, [r2, #4]
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6892      	ldr	r2, [r2, #8]
 8003d88:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003d98:	f107 070c 	add.w	r7, r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop

08003da4 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	60da      	str	r2, [r3, #12]
}
 8003dcc:	f107 070c 	add.w	r7, r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop

08003dd8 <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop

08003dfc <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <CRYP_Cmd+0x2a>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e00b      	b.n	8003e3e <CRYP_Cmd+0x42>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e3c:	601a      	str	r2, [r3, #0]
  }
}
 8003e3e:	f107 070c 	add.w	r7, r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
}
 8003e5c:	f107 070c 	add.w	r7, r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop

08003e68 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003e74:	68db      	ldr	r3, [r3, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop

08003e80 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003eac:	6912      	ldr	r2, [r2, #16]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <CRYP_SaveContext+0x4e>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8003ec6:	f04f 0311 	mov.w	r3, #17
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e002      	b.n	8003ed4 <CRYP_SaveContext+0x54>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8003ece:	f04f 0315 	mov.w	r3, #21
 8003ed2:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	ea02 0303 	and.w	r3, r2, r3
 8003ee4:	60fb      	str	r3, [r7, #12]
    timeout++;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f103 0301 	add.w	r3, r3, #1
 8003eec:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d002      	beq.n	8003efe <CRYP_SaveContext+0x7e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d1ea      	bne.n	8003ed4 <CRYP_SaveContext+0x54>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ea02 0303 	and.w	r3, r2, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d003      	beq.n	8003f1a <CRYP_SaveContext+0x9a>
  {
    status = ERROR;
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	74fb      	strb	r3, [r7, #19]
 8003f18:	e05f      	b.n	8003fda <CRYP_SaveContext+0x15a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003f2a:	6912      	ldr	r2, [r2, #16]
 8003f2c:	f022 0202 	bic.w	r2, r2, #2
 8003f30:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f48:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 727f 	and.w	r2, r3, #1020	; 0x3fc
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8003fd4:	f04f 0301 	mov.w	r3, #1
 8003fd8:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f107 071c 	add.w	r7, r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6952      	ldr	r2, [r2, #20]
 800400a:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6992      	ldr	r2, [r2, #24]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	69d2      	ldr	r2, [r2, #28]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6a12      	ldr	r2, [r2, #32]
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004050:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800405e:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6852      	ldr	r2, [r2, #4]
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6892      	ldr	r2, [r2, #8]
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68d2      	ldr	r2, [r2, #12]
 8004096:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6912      	ldr	r2, [r2, #16]
 80040a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	f107 070c 	add.w	r7, r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	71fa      	strb	r2, [r7, #7]
 80040d4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80040d6:	79bb      	ldrb	r3, [r7, #6]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00d      	beq.n	80040f8 <CRYP_DMACmd+0x30>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80040ec:	6911      	ldr	r1, [r2, #16]
 80040ee:	79fa      	ldrb	r2, [r7, #7]
 80040f0:	ea41 0202 	orr.w	r2, r1, r2
 80040f4:	611a      	str	r2, [r3, #16]
 80040f6:	e00f      	b.n	8004118 <CRYP_DMACmd+0x50>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004108:	6911      	ldr	r1, [r2, #16]
 800410a:	79fa      	ldrb	r2, [r7, #7]
 800410c:	ea6f 0202 	mvn.w	r2, r2
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	ea01 0202 	and.w	r2, r1, r2
 8004116:	611a      	str	r2, [r3, #16]
  }
}
 8004118:	f107 070c 	add.w	r7, r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop

08004124 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	71fa      	strb	r2, [r7, #7]
 8004130:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004132:	79bb      	ldrb	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <CRYP_ITConfig+0x30>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004148:	6951      	ldr	r1, [r2, #20]
 800414a:	79fa      	ldrb	r2, [r7, #7]
 800414c:	ea41 0202 	orr.w	r2, r1, r2
 8004150:	615a      	str	r2, [r3, #20]
 8004152:	e00f      	b.n	8004174 <CRYP_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004164:	6951      	ldr	r1, [r2, #20]
 8004166:	79fa      	ldrb	r2, [r7, #7]
 8004168:	ea6f 0202 	mvn.w	r2, r2
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	ea01 0202 	and.w	r2, r1, r2
 8004172:	615a      	str	r2, [r3, #20]
  }
}
 8004174:	f107 070c 	add.w	r7, r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop

08004180 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	ea02 0303 	and.w	r3, r2, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <CRYP_GetITStatus+0x2c>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 80041a4:	f04f 0301 	mov.w	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	e002      	b.n	80041b2 <CRYP_GetITStatus+0x32>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	f107 0714 	add.w	r7, r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <CRYP_GetFlagStatus+0x2e>
  {
    tempreg = CRYP->RISR;
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	e005      	b.n	80041fa <CRYP_GetFlagStatus+0x3a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 80041fa:	79fa      	ldrb	r2, [r7, #7]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	ea02 0303 	and.w	r3, r2, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <CRYP_GetFlagStatus+0x4e>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8004206:	f04f 0301 	mov.w	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e002      	b.n	8004214 <CRYP_GetFlagStatus+0x54>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	f107 0714 	add.w	r7, r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop

08004224 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b097      	sub	sp, #92	; 0x5c
 8004228:	af00      	add	r7, sp, #0
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4603      	mov	r3, r0
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	4613      	mov	r3, r2
 8004234:	80fb      	strh	r3, [r7, #6]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 8004242:	f04f 0301 	mov.w	r3, #1
 8004246:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint32_t keyaddr    = (uint32_t)Key;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t inputaddr  = (uint32_t)Input;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t outputaddr = (uint32_t)Output;
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800425c:	f107 0318 	add.w	r3, r7, #24
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fd4f 	bl	8003d04 <CRYP_KeyStructInit>

  switch(Keysize)
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	2bc0      	cmp	r3, #192	; 0xc0
 800426a:	d031      	beq.n	80042d0 <CRYP_AES_ECB+0xac>
 800426c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004270:	d070      	beq.n	8004354 <CRYP_AES_ECB+0x130>
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	f040 80c6 	bne.w	8004404 <CRYP_AES_ECB+0x1e0>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800427e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc f964 	bl	8000550 <__REV>
 8004288:	4603      	mov	r3, r0
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800428c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428e:	f103 0304 	add.w	r3, r3, #4
 8004292:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc f959 	bl	8000550 <__REV>
 800429e:	4603      	mov	r3, r0
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80042a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a4:	f103 0304 	add.w	r3, r3, #4
 80042a8:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80042aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc f94e 	bl	8000550 <__REV>
 80042b4:	4603      	mov	r3, r0
 80042b6:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80042b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ba:	f103 0304 	add.w	r3, r3, #4
 80042be:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80042c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc f943 	bl	8000550 <__REV>
 80042ca:	4603      	mov	r3, r0
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80042ce:	e09a      	b.n	8004406 <CRYP_AES_ECB+0x1e2>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80042d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80042d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fc f938 	bl	8000550 <__REV>
 80042e0:	4603      	mov	r3, r0
 80042e2:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 80042e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e6:	f103 0304 	add.w	r3, r3, #4
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80042ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc f92d 	bl	8000550 <__REV>
 80042f6:	4603      	mov	r3, r0
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80042fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fc:	f103 0304 	add.w	r3, r3, #4
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc f922 	bl	8000550 <__REV>
 800430c:	4603      	mov	r3, r0
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8004310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004312:	f103 0304 	add.w	r3, r3, #4
 8004316:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f917 	bl	8000550 <__REV>
 8004322:	4603      	mov	r3, r0
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	f103 0304 	add.w	r3, r3, #4
 800432c:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800432e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fc f90c 	bl	8000550 <__REV>
 8004338:	4603      	mov	r3, r0
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800433c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433e:	f103 0304 	add.w	r3, r3, #4
 8004342:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc f901 	bl	8000550 <__REV>
 800434e:	4603      	mov	r3, r0
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8004352:	e058      	b.n	8004406 <CRYP_AES_ECB+0x1e2>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8004354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004358:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f8f6 	bl	8000550 <__REV>
 8004364:	4603      	mov	r3, r0
 8004366:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8004368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436a:	f103 0304 	add.w	r3, r3, #4
 800436e:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8004370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc f8eb 	bl	8000550 <__REV>
 800437a:	4603      	mov	r3, r0
 800437c:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 800437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004380:	f103 0304 	add.w	r3, r3, #4
 8004384:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc f8e0 	bl	8000550 <__REV>
 8004390:	4603      	mov	r3, r0
 8004392:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8004394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004396:	f103 0304 	add.w	r3, r3, #4
 800439a:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800439c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc f8d5 	bl	8000550 <__REV>
 80043a6:	4603      	mov	r3, r0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80043aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ac:	f103 0304 	add.w	r3, r3, #4
 80043b0:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80043b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc f8ca 	bl	8000550 <__REV>
 80043bc:	4603      	mov	r3, r0
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	f103 0304 	add.w	r3, r3, #4
 80043c6:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80043c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fc f8bf 	bl	8000550 <__REV>
 80043d2:	4603      	mov	r3, r0
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80043d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d8:	f103 0304 	add.w	r3, r3, #4
 80043dc:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80043de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fc f8b4 	bl	8000550 <__REV>
 80043e8:	4603      	mov	r3, r0
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80043ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ee:	f103 0304 	add.w	r3, r3, #4
 80043f2:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80043f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fc f8a9 	bl	8000550 <__REV>
 80043fe:	4603      	mov	r3, r0
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8004402:	e000      	b.n	8004406 <CRYP_AES_ECB+0x1e2>
    default:
    break;
 8004404:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d135      	bne.n	8004478 <CRYP_AES_ECB+0x254>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800440c:	f7ff fce4 	bl	8003dd8 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004410:	f04f 0304 	mov.w	r3, #4
 8004414:	873b      	strh	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8004416:	f04f 0338 	mov.w	r3, #56	; 0x38
 800441a:	877b      	strh	r3, [r7, #58]	; 0x3a
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	87bb      	strh	r3, [r7, #60]	; 0x3c
    CRYP_Init(&AES_CRYP_InitStructure);
 8004422:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fb8e 	bl	8003b48 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800442c:	f107 0318 	add.w	r3, r7, #24
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fc25 	bl	8003c80 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8004436:	f04f 0001 	mov.w	r0, #1
 800443a:	f7ff fcdf 	bl	8003dfc <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800443e:	f04f 0010 	mov.w	r0, #16
 8004442:	f7ff febd 	bl	80041c0 <CRYP_GetFlagStatus>
 8004446:	4603      	mov	r3, r0
 8004448:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f103 0301 	add.w	r3, r3, #1
 8004450:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d002      	beq.n	8004460 <CRYP_AES_ECB+0x23c>
 800445a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ee      	bne.n	800443e <CRYP_AES_ECB+0x21a>

    if (busystatus != RESET)
 8004460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <CRYP_AES_ECB+0x24c>
   {
       status = ERROR;
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800446e:	e00b      	b.n	8004488 <CRYP_AES_ECB+0x264>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004470:	f04f 0304 	mov.w	r3, #4
 8004474:	873b      	strh	r3, [r7, #56]	; 0x38
 8004476:	e007      	b.n	8004488 <CRYP_AES_ECB+0x264>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8004478:	f107 0318 	add.w	r3, r7, #24
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fbff 	bl	8003c80 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8004488:	f04f 0320 	mov.w	r3, #32
 800448c:	877b      	strh	r3, [r7, #58]	; 0x3a
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800448e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004492:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&AES_CRYP_InitStructure);
 8004494:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fb55 	bl	8003b48 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 800449e:	f7ff fc9b 	bl	8003dd8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80044a2:	f04f 0001 	mov.w	r0, #1
 80044a6:	f7ff fca9 	bl	8003dfc <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b0:	e067      	b.n	8004582 <CRYP_AES_ECB+0x35e>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80044b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fcc6 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 80044bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044be:	f103 0304 	add.w	r3, r3, #4
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80044c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fcbd 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 80044ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d0:	f103 0304 	add.w	r3, r3, #4
 80044d4:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80044d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fcb4 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 80044e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e2:	f103 0304 	add.w	r3, r3, #4
 80044e6:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80044e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fcab 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 80044f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f4:	f103 0304 	add.w	r3, r3, #4
 80044f8:	653b      	str	r3, [r7, #80]	; 0x50

    /* Wait until the complete message has been processed */
    counter = 0;
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004500:	f04f 0010 	mov.w	r0, #16
 8004504:	f7ff fe5c 	bl	80041c0 <CRYP_GetFlagStatus>
 8004508:	4603      	mov	r3, r0
 800450a:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f103 0301 	add.w	r3, r3, #1
 8004512:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451a:	d002      	beq.n	8004522 <CRYP_AES_ECB+0x2fe>
 800451c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ee      	bne.n	8004500 <CRYP_AES_ECB+0x2dc>

    if (busystatus != RESET)
 8004522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <CRYP_AES_ECB+0x30e>
   {
       status = ERROR;
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004530:	e023      	b.n	800457a <CRYP_AES_ECB+0x356>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004532:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004534:	f7ff fc98 	bl	8003e68 <CRYP_DataOut>
 8004538:	4603      	mov	r3, r0
 800453a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800453c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453e:	f103 0304 	add.w	r3, r3, #4
 8004542:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004544:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004546:	f7ff fc8f 	bl	8003e68 <CRYP_DataOut>
 800454a:	4603      	mov	r3, r0
 800454c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	f103 0304 	add.w	r3, r3, #4
 8004554:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004556:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004558:	f7ff fc86 	bl	8003e68 <CRYP_DataOut>
 800455c:	4603      	mov	r3, r0
 800455e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004562:	f103 0304 	add.w	r3, r3, #4
 8004566:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8004568:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800456a:	f7ff fc7d 	bl	8003e68 <CRYP_DataOut>
 800456e:	4603      	mov	r3, r0
 8004570:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	f103 0304 	add.w	r3, r3, #4
 8004578:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800457a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457c:	f103 0310 	add.w	r3, r3, #16
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
 8004582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004586:	429a      	cmp	r2, r3
 8004588:	d203      	bcs.n	8004592 <CRYP_AES_ECB+0x36e>
 800458a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800458e:	2b00      	cmp	r3, #0
 8004590:	d18f      	bne.n	80044b2 <CRYP_AES_ECB+0x28e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f7ff fc31 	bl	8003dfc <CRYP_Cmd>

  return status; 
 800459a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800459e:	4618      	mov	r0, r3
 80045a0:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd90      	pop	{r4, r7, pc}

080045a8 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b09b      	sub	sp, #108	; 0x6c
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	4602      	mov	r2, r0
 80045b4:	73fa      	strb	r2, [r7, #15]
 80045b6:	807b      	strh	r3, [r7, #2]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 80045c4:	f04f 0301 	mov.w	r3, #1
 80045c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 80045d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d2:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 80045d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80045e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fb8b 	bl	8003d04 <CRYP_KeyStructInit>

  switch(Keysize)
 80045ee:	887b      	ldrh	r3, [r7, #2]
 80045f0:	2bc0      	cmp	r3, #192	; 0xc0
 80045f2:	d032      	beq.n	800465a <CRYP_AES_CBC+0xb2>
 80045f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f8:	d072      	beq.n	80046e0 <CRYP_AES_CBC+0x138>
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	f040 80c9 	bne.w	8004792 <CRYP_AES_CBC+0x1ea>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fb ff9f 	bl	8000550 <__REV>
 8004612:	4603      	mov	r3, r0
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8004616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004618:	f103 0304 	add.w	r3, r3, #4
 800461c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800461e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fb ff94 	bl	8000550 <__REV>
 8004628:	4603      	mov	r3, r0
 800462a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800462c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462e:	f103 0304 	add.w	r3, r3, #4
 8004632:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fb ff89 	bl	8000550 <__REV>
 800463e:	4603      	mov	r3, r0
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8004642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004644:	f103 0304 	add.w	r3, r3, #4
 8004648:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800464a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fb ff7e 	bl	8000550 <__REV>
 8004654:	4603      	mov	r3, r0
 8004656:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8004658:	e09c      	b.n	8004794 <CRYP_AES_CBC+0x1ec>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800465a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800465e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fb ff72 	bl	8000550 <__REV>
 800466c:	4603      	mov	r3, r0
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8004670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004672:	f103 0304 	add.w	r3, r3, #4
 8004676:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fb ff67 	bl	8000550 <__REV>
 8004682:	4603      	mov	r3, r0
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8004686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004688:	f103 0304 	add.w	r3, r3, #4
 800468c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800468e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fb ff5c 	bl	8000550 <__REV>
 8004698:	4603      	mov	r3, r0
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800469c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469e:	f103 0304 	add.w	r3, r3, #4
 80046a2:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80046a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fb ff51 	bl	8000550 <__REV>
 80046ae:	4603      	mov	r3, r0
 80046b0:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80046b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b4:	f103 0304 	add.w	r3, r3, #4
 80046b8:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80046ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fb ff46 	bl	8000550 <__REV>
 80046c4:	4603      	mov	r3, r0
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80046c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ca:	f103 0304 	add.w	r3, r3, #4
 80046ce:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80046d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb ff3b 	bl	8000550 <__REV>
 80046da:	4603      	mov	r3, r0
 80046dc:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80046de:	e059      	b.n	8004794 <CRYP_AES_CBC+0x1ec>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80046e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80046e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fb ff2f 	bl	8000550 <__REV>
 80046f2:	4603      	mov	r3, r0
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80046f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f8:	f103 0304 	add.w	r3, r3, #4
 80046fc:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80046fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fb ff24 	bl	8000550 <__REV>
 8004708:	4603      	mov	r3, r0
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800470c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470e:	f103 0304 	add.w	r3, r3, #4
 8004712:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb ff19 	bl	8000550 <__REV>
 800471e:	4603      	mov	r3, r0
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8004722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004724:	f103 0304 	add.w	r3, r3, #4
 8004728:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800472a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fb ff0e 	bl	8000550 <__REV>
 8004734:	4603      	mov	r3, r0
 8004736:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8004738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473a:	f103 0304 	add.w	r3, r3, #4
 800473e:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7fb ff03 	bl	8000550 <__REV>
 800474a:	4603      	mov	r3, r0
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800474e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004750:	f103 0304 	add.w	r3, r3, #4
 8004754:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fb fef8 	bl	8000550 <__REV>
 8004760:	4603      	mov	r3, r0
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8004764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004766:	f103 0304 	add.w	r3, r3, #4
 800476a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800476c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fb feed 	bl	8000550 <__REV>
 8004776:	4603      	mov	r3, r0
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800477a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800477c:	f103 0304 	add.w	r3, r3, #4
 8004780:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fb fee2 	bl	8000550 <__REV>
 800478c:	4603      	mov	r3, r0
 800478e:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8004790:	e000      	b.n	8004794 <CRYP_AES_CBC+0x1ec>
    default:
    break;
 8004792:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7fb fed9 	bl	8000550 <__REV>
 800479e:	4603      	mov	r3, r0
 80047a0:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80047a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a4:	f103 0304 	add.w	r3, r3, #4
 80047a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fece 	bl	8000550 <__REV>
 80047b4:	4603      	mov	r3, r0
 80047b6:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 80047b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ba:	f103 0304 	add.w	r3, r3, #4
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 80047c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fb fec3 	bl	8000550 <__REV>
 80047ca:	4603      	mov	r3, r0
 80047cc:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 80047ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d0:	f103 0304 	add.w	r3, r3, #4
 80047d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fb feb8 	bl	8000550 <__REV>
 80047e0:	4603      	mov	r3, r0
 80047e2:	623b      	str	r3, [r7, #32]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d139      	bne.n	800485e <CRYP_AES_CBC+0x2b6>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80047ea:	f7ff faf5 	bl	8003dd8 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80047ee:	f04f 0304 	mov.w	r3, #4
 80047f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80047f6:	f04f 0338 	mov.w	r3, #56	; 0x38
 80047fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    CRYP_Init(&AES_CRYP_InitStructure);
 8004806:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff f99c 	bl	8003b48 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8004810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fa33 	bl	8003c80 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800481a:	f04f 0001 	mov.w	r0, #1
 800481e:	f7ff faed 	bl	8003dfc <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004822:	f04f 0010 	mov.w	r0, #16
 8004826:	f7ff fccb 	bl	80041c0 <CRYP_GetFlagStatus>
 800482a:	4603      	mov	r3, r0
 800482c:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f103 0301 	add.w	r3, r3, #1
 8004834:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d002      	beq.n	8004844 <CRYP_AES_CBC+0x29c>
 800483e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ee      	bne.n	8004822 <CRYP_AES_CBC+0x27a>

    if (busystatus != RESET)
 8004844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <CRYP_AES_CBC+0x2ac>
   {
       status = ERROR;
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004852:	e00d      	b.n	8004870 <CRYP_AES_CBC+0x2c8>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004854:	f04f 0304 	mov.w	r3, #4
 8004858:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800485c:	e008      	b.n	8004870 <CRYP_AES_CBC+0x2c8>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800485e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fa0c 	bl	8003c80 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8004870:	f04f 0328 	mov.w	r3, #40	; 0x28
 8004874:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004878:	f04f 0380 	mov.w	r3, #128	; 0x80
 800487c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8004880:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff f95f 	bl	8003b48 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fa62 	bl	8003d58 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8004894:	f7ff faa0 	bl	8003dd8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004898:	f04f 0001 	mov.w	r0, #1
 800489c:	f7ff faae 	bl	8003dfc <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048a6:	e067      	b.n	8004978 <CRYP_AES_CBC+0x3d0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80048a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff facb 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 80048b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b4:	f103 0304 	add.w	r3, r3, #4
 80048b8:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80048ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fac2 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 80048c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c6:	f103 0304 	add.w	r3, r3, #4
 80048ca:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80048cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fab9 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 80048d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d8:	f103 0304 	add.w	r3, r3, #4
 80048dc:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80048de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fab0 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 80048e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ea:	f103 0304 	add.w	r3, r3, #4
 80048ee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Wait until the complete message has been processed */
    counter = 0;
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80048f6:	f04f 0010 	mov.w	r0, #16
 80048fa:	f7ff fc61 	bl	80041c0 <CRYP_GetFlagStatus>
 80048fe:	4603      	mov	r3, r0
 8004900:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f103 0301 	add.w	r3, r3, #1
 8004908:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004910:	d002      	beq.n	8004918 <CRYP_AES_CBC+0x370>
 8004912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ee      	bne.n	80048f6 <CRYP_AES_CBC+0x34e>

    if (busystatus != RESET)
 8004918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <CRYP_AES_CBC+0x380>
   {
       status = ERROR;
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004926:	e023      	b.n	8004970 <CRYP_AES_CBC+0x3c8>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004928:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800492a:	f7ff fa9d 	bl	8003e68 <CRYP_DataOut>
 800492e:	4603      	mov	r3, r0
 8004930:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	f103 0304 	add.w	r3, r3, #4
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800493a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800493c:	f7ff fa94 	bl	8003e68 <CRYP_DataOut>
 8004940:	4603      	mov	r3, r0
 8004942:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004946:	f103 0304 	add.w	r3, r3, #4
 800494a:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800494c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800494e:	f7ff fa8b 	bl	8003e68 <CRYP_DataOut>
 8004952:	4603      	mov	r3, r0
 8004954:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	f103 0304 	add.w	r3, r3, #4
 800495c:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800495e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004960:	f7ff fa82 	bl	8003e68 <CRYP_DataOut>
 8004964:	4603      	mov	r3, r0
 8004966:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800496a:	f103 0304 	add.w	r3, r3, #4
 800496e:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8004970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004972:	f103 0310 	add.w	r3, r3, #16
 8004976:	65bb      	str	r3, [r7, #88]	; 0x58
 8004978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800497a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800497c:	429a      	cmp	r2, r3
 800497e:	d203      	bcs.n	8004988 <CRYP_AES_CBC+0x3e0>
 8004980:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004984:	2b00      	cmp	r3, #0
 8004986:	d18f      	bne.n	80048a8 <CRYP_AES_CBC+0x300>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004988:	f04f 0000 	mov.w	r0, #0
 800498c:	f7ff fa36 	bl	8003dfc <CRYP_Cmd>

  return status;
 8004990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004994:	4618      	mov	r0, r3
 8004996:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 800499a:	46bd      	mov	sp, r7
 800499c:	bd90      	pop	{r4, r7, pc}
 800499e:	bf00      	nop

080049a0 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b09b      	sub	sp, #108	; 0x6c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	4602      	mov	r2, r0
 80049ac:	73fa      	strb	r2, [r7, #15]
 80049ae:	807b      	strh	r3, [r7, #2]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 80049bc:	f04f 0301 	mov.w	r3, #1
 80049c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 80049c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ca:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 80049cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80049dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff f98f 	bl	8003d04 <CRYP_KeyStructInit>

  switch(Keysize)
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	2bc0      	cmp	r3, #192	; 0xc0
 80049ea:	d032      	beq.n	8004a52 <CRYP_AES_CTR+0xb2>
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d072      	beq.n	8004ad8 <CRYP_AES_CTR+0x138>
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	f040 80c9 	bne.w	8004b8a <CRYP_AES_CTR+0x1ea>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fda3 	bl	8000550 <__REV>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8004a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a10:	f103 0304 	add.w	r3, r3, #4
 8004a14:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fb fd98 	bl	8000550 <__REV>
 8004a20:	4603      	mov	r3, r0
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8004a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a26:	f103 0304 	add.w	r3, r3, #4
 8004a2a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd8d 	bl	8000550 <__REV>
 8004a36:	4603      	mov	r3, r0
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3c:	f103 0304 	add.w	r3, r3, #4
 8004a40:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fb fd82 	bl	8000550 <__REV>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8004a50:	e09c      	b.n	8004b8c <CRYP_AES_CTR+0x1ec>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8004a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a56:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fb fd76 	bl	8000550 <__REV>
 8004a64:	4603      	mov	r3, r0
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8004a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6a:	f103 0304 	add.w	r3, r3, #4
 8004a6e:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fb fd6b 	bl	8000550 <__REV>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8004a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a80:	f103 0304 	add.w	r3, r3, #4
 8004a84:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fb fd60 	bl	8000550 <__REV>
 8004a90:	4603      	mov	r3, r0
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8004a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a96:	f103 0304 	add.w	r3, r3, #4
 8004a9a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fb fd55 	bl	8000550 <__REV>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8004aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aac:	f103 0304 	add.w	r3, r3, #4
 8004ab0:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fb fd4a 	bl	8000550 <__REV>
 8004abc:	4603      	mov	r3, r0
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8004ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac2:	f103 0304 	add.w	r3, r3, #4
 8004ac6:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fb fd3f 	bl	8000550 <__REV>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8004ad6:	e059      	b.n	8004b8c <CRYP_AES_CTR+0x1ec>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8004ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004adc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8004ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fb fd33 	bl	8000550 <__REV>
 8004aea:	4603      	mov	r3, r0
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8004aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af0:	f103 0304 	add.w	r3, r3, #4
 8004af4:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8004af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fd28 	bl	8000550 <__REV>
 8004b00:	4603      	mov	r3, r0
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8004b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b06:	f103 0304 	add.w	r3, r3, #4
 8004b0a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fb fd1d 	bl	8000550 <__REV>
 8004b16:	4603      	mov	r3, r0
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8004b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b1c:	f103 0304 	add.w	r3, r3, #4
 8004b20:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fb fd12 	bl	8000550 <__REV>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8004b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b32:	f103 0304 	add.w	r3, r3, #4
 8004b36:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb fd07 	bl	8000550 <__REV>
 8004b42:	4603      	mov	r3, r0
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8004b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b48:	f103 0304 	add.w	r3, r3, #4
 8004b4c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fb fcfc 	bl	8000550 <__REV>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8004b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5e:	f103 0304 	add.w	r3, r3, #4
 8004b62:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fb fcf1 	bl	8000550 <__REV>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8004b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b74:	f103 0304 	add.w	r3, r3, #4
 8004b78:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fb fce6 	bl	8000550 <__REV>
 8004b84:	4603      	mov	r3, r0
 8004b86:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8004b88:	e000      	b.n	8004b8c <CRYP_AES_CTR+0x1ec>
    default:
    break;
 8004b8a:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fb fcdd 	bl	8000550 <__REV>
 8004b96:	4603      	mov	r3, r0
 8004b98:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	f103 0304 	add.w	r3, r3, #4
 8004ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fb fcd2 	bl	8000550 <__REV>
 8004bac:	4603      	mov	r3, r0
 8004bae:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 8004bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb2:	f103 0304 	add.w	r3, r3, #4
 8004bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fb fcc7 	bl	8000550 <__REV>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 8004bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc8:	f103 0304 	add.w	r3, r3, #4
 8004bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8004bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fb fcbc 	bl	8000550 <__REV>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	623b      	str	r3, [r7, #32]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8004bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff f84d 	bl	8003c80 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <CRYP_AES_CTR+0x256>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004bec:	f04f 0304 	mov.w	r3, #4
 8004bf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bf4:	e003      	b.n	8004bfe <CRYP_AES_CTR+0x25e>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8004bfe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004c02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004c06:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004c0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8004c0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe ff98 	bl	8003b48 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff f89b 	bl	8003d58 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8004c22:	f7ff f8d9 	bl	8003dd8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004c26:	f04f 0001 	mov.w	r0, #1
 8004c2a:	f7ff f8e7 	bl	8003dfc <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c34:	e067      	b.n	8004d06 <CRYP_AES_CTR+0x366>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f904 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8004c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c42:	f103 0304 	add.w	r3, r3, #4
 8004c46:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff f8fb 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8004c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c54:	f103 0304 	add.w	r3, r3, #4
 8004c58:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff f8f2 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8004c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c66:	f103 0304 	add.w	r3, r3, #4
 8004c6a:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff f8e9 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8004c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c78:	f103 0304 	add.w	r3, r3, #4
 8004c7c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Wait until the complete message has been processed */
    counter = 0;
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004c84:	f04f 0010 	mov.w	r0, #16
 8004c88:	f7ff fa9a 	bl	80041c0 <CRYP_GetFlagStatus>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f103 0301 	add.w	r3, r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9e:	d002      	beq.n	8004ca6 <CRYP_AES_CTR+0x306>
 8004ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ee      	bne.n	8004c84 <CRYP_AES_CTR+0x2e4>

    if (busystatus != RESET)
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <CRYP_AES_CTR+0x316>
   {
       status = ERROR;
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004cb4:	e023      	b.n	8004cfe <CRYP_AES_CTR+0x35e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004cb6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004cb8:	f7ff f8d6 	bl	8003e68 <CRYP_DataOut>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc2:	f103 0304 	add.w	r3, r3, #4
 8004cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004cc8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004cca:	f7ff f8cd 	bl	8003e68 <CRYP_DataOut>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd4:	f103 0304 	add.w	r3, r3, #4
 8004cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004cda:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004cdc:	f7ff f8c4 	bl	8003e68 <CRYP_DataOut>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce6:	f103 0304 	add.w	r3, r3, #4
 8004cea:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004cec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004cee:	f7ff f8bb 	bl	8003e68 <CRYP_DataOut>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf8:	f103 0304 	add.w	r3, r3, #4
 8004cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8004cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d00:	f103 0310 	add.w	r3, r3, #16
 8004d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d203      	bcs.n	8004d16 <CRYP_AES_CTR+0x376>
 8004d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d18f      	bne.n	8004c36 <CRYP_AES_CTR+0x296>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004d16:	f04f 0000 	mov.w	r0, #0
 8004d1a:	f7ff f86f 	bl	8003dfc <CRYP_Cmd>

  return status;
 8004d1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd90      	pop	{r4, r7, pc}

08004d2c <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b097      	sub	sp, #92	; 0x5c
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 8004d48:	f04f 0301 	mov.w	r3, #1
 8004d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint32_t keyaddr    = (uint32_t)Key;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t inputaddr  = (uint32_t)Input;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t outputaddr = (uint32_t)Output;
 8004d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8004d62:	f107 0318 	add.w	r3, r7, #24
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe ffcc 	bl	8003d04 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d103      	bne.n	8004d7a <CRYP_DES_ECB+0x4e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d78:	e002      	b.n	8004d80 <CRYP_DES_ECB+0x54>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8004d7a:	f04f 0304 	mov.w	r3, #4
 8004d7e:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8004d80:	f04f 0310 	mov.w	r3, #16
 8004d84:	877b      	strh	r3, [r7, #58]	; 0x3a
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004d86:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004d8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&DES_CRYP_InitStructure);
 8004d8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe fed9 	bl	8003b48 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fbd8 	bl	8000550 <__REV>
 8004da0:	4603      	mov	r3, r0
 8004da2:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8004da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da6:	f103 0304 	add.w	r3, r3, #4
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fbcd 	bl	8000550 <__REV>
 8004db6:	4603      	mov	r3, r0
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8004dba:	f107 0318 	add.w	r3, r7, #24
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe ff5e 	bl	8003c80 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004dc4:	f7ff f808 	bl	8003dd8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004dc8:	f04f 0001 	mov.w	r0, #1
 8004dcc:	f7ff f816 	bl	8003dfc <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd6:	e043      	b.n	8004e60 <CRYP_DES_ECB+0x134>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff f833 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8004de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de4:	f103 0304 	add.w	r3, r3, #4
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff f82a 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8004df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df6:	f103 0304 	add.w	r3, r3, #4
 8004dfa:	653b      	str	r3, [r7, #80]	; 0x50

/* Wait until the complete message has been processed */
    counter = 0;
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004e02:	f04f 0010 	mov.w	r0, #16
 8004e06:	f7ff f9db 	bl	80041c0 <CRYP_GetFlagStatus>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f103 0301 	add.w	r3, r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1c:	d002      	beq.n	8004e24 <CRYP_DES_ECB+0xf8>
 8004e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ee      	bne.n	8004e02 <CRYP_DES_ECB+0xd6>

    if (busystatus != RESET)
 8004e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <CRYP_DES_ECB+0x108>
   {
       status = ERROR;
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004e32:	e011      	b.n	8004e58 <CRYP_DES_ECB+0x12c>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004e34:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004e36:	f7ff f817 	bl	8003e68 <CRYP_DataOut>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e40:	f103 0304 	add.w	r3, r3, #4
 8004e44:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004e46:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004e48:	f7ff f80e 	bl	8003e68 <CRYP_DataOut>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e52:	f103 0304 	add.w	r3, r3, #4
 8004e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	f103 0308 	add.w	r3, r3, #8
 8004e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d203      	bcs.n	8004e70 <CRYP_DES_ECB+0x144>
 8004e68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1b3      	bne.n	8004dd8 <CRYP_DES_ECB+0xac>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004e70:	f04f 0000 	mov.w	r0, #0
 8004e74:	f7fe ffc2 	bl	8003dfc <CRYP_Cmd>

  return status; 
 8004e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd90      	pop	{r4, r7, pc}
 8004e86:	bf00      	nop

08004e88 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b09b      	sub	sp, #108	; 0x6c
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4603      	mov	r3, r0
 8004e96:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8004ea4:	f04f 0301 	mov.w	r3, #1
 8004ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8004eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8004ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe ff1c 	bl	8003d04 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d104      	bne.n	8004edc <CRYP_DES_CBC+0x54>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004eda:	e003      	b.n	8004ee4 <CRYP_DES_CBC+0x5c>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8004edc:	f04f 0304 	mov.w	r3, #4
 8004ee0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 8004ee4:	f04f 0318 	mov.w	r3, #24
 8004ee8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004eec:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004ef0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&DES_CRYP_InitStructure);
 8004ef4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe fe25 	bl	8003b48 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fb fb24 	bl	8000550 <__REV>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8004f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0e:	f103 0304 	add.w	r3, r3, #4
 8004f12:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb fb19 	bl	8000550 <__REV>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8004f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe feaa 	bl	8003c80 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fb fb0d 	bl	8000550 <__REV>
 8004f36:	4603      	mov	r3, r0
 8004f38:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3c:	f103 0304 	add.w	r3, r3, #4
 8004f40:	64fb      	str	r3, [r7, #76]	; 0x4c
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8004f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb fb02 	bl	8000550 <__REV>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8004f50:	f107 0314 	add.w	r3, r7, #20
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe feff 	bl	8003d58 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004f5a:	f7fe ff3d 	bl	8003dd8 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004f5e:	f04f 0001 	mov.w	r0, #1
 8004f62:	f7fe ff4b 	bl	8003dfc <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f6c:	e043      	b.n	8004ff6 <CRYP_DES_CBC+0x16e>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe ff68 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8004f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7a:	f103 0304 	add.w	r3, r3, #4
 8004f7e:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe ff5f 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8004f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8c:	f103 0304 	add.w	r3, r3, #4
 8004f90:	663b      	str	r3, [r7, #96]	; 0x60

    /* Wait until the complete message has been processed */
    counter = 0;
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004f98:	f04f 0010 	mov.w	r0, #16
 8004f9c:	f7ff f910 	bl	80041c0 <CRYP_GetFlagStatus>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f103 0301 	add.w	r3, r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb2:	d002      	beq.n	8004fba <CRYP_DES_CBC+0x132>
 8004fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ee      	bne.n	8004f98 <CRYP_DES_CBC+0x110>

    if (busystatus != RESET)
 8004fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <CRYP_DES_CBC+0x142>
   {
       status = ERROR;
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004fc8:	e011      	b.n	8004fee <CRYP_DES_CBC+0x166>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004fca:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004fcc:	f7fe ff4c 	bl	8003e68 <CRYP_DataOut>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	f103 0304 	add.w	r3, r3, #4
 8004fda:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004fdc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004fde:	f7fe ff43 	bl	8003e68 <CRYP_DataOut>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe8:	f103 0304 	add.w	r3, r3, #4
 8004fec:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff0:	f103 0308 	add.w	r3, r3, #8
 8004ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d203      	bcs.n	8005006 <CRYP_DES_CBC+0x17e>
 8004ffe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1b3      	bne.n	8004f6e <CRYP_DES_CBC+0xe6>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8005006:	f04f 0000 	mov.w	r0, #0
 800500a:	f7fe fef7 	bl	8003dfc <CRYP_Cmd>

  return status; 
 800500e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005012:	4618      	mov	r0, r3
 8005014:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 8005018:	46bd      	mov	sp, r7
 800501a:	bd90      	pop	{r4, r7, pc}

0800501c <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b097      	sub	sp, #92	; 0x5c
 8005020:	af00      	add	r7, sp, #0
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 8005038:	f04f 0301 	mov.w	r3, #1
 800503c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint32_t keyaddr    = (uint32_t)Key;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t inputaddr  = (uint32_t)Input;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t outputaddr = (uint32_t)Output;
 8005048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800504a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8005052:	f107 0318 	add.w	r3, r7, #24
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fe54 	bl	8003d04 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d103      	bne.n	800506a <CRYP_TDES_ECB+0x4e>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	873b      	strh	r3, [r7, #56]	; 0x38
 8005068:	e002      	b.n	8005070 <CRYP_TDES_ECB+0x54>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800506a:	f04f 0304 	mov.w	r3, #4
 800506e:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	877b      	strh	r3, [r7, #58]	; 0x3a
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8005076:	f04f 0380 	mov.w	r3, #128	; 0x80
 800507a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&TDES_CRYP_InitStructure);
 800507c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe fd61 	bl	8003b48 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7fb fa60 	bl	8000550 <__REV>
 8005090:	4603      	mov	r3, r0
 8005092:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	f103 0304 	add.w	r3, r3, #4
 800509a:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800509c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fb fa55 	bl	8000550 <__REV>
 80050a6:	4603      	mov	r3, r0
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 80050aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ac:	f103 0304 	add.w	r3, r3, #4
 80050b0:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80050b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fb fa4a 	bl	8000550 <__REV>
 80050bc:	4603      	mov	r3, r0
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 80050c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c2:	f103 0304 	add.w	r3, r3, #4
 80050c6:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80050c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fb fa3f 	bl	8000550 <__REV>
 80050d2:	4603      	mov	r3, r0
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80050d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d8:	f103 0304 	add.w	r3, r3, #4
 80050dc:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80050de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fb fa34 	bl	8000550 <__REV>
 80050e8:	4603      	mov	r3, r0
 80050ea:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 80050ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ee:	f103 0304 	add.w	r3, r3, #4
 80050f2:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80050f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fb fa29 	bl	8000550 <__REV>
 80050fe:	4603      	mov	r3, r0
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8005102:	f107 0318 	add.w	r3, r7, #24
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fdba 	bl	8003c80 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800510c:	f7fe fe64 	bl	8003dd8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8005110:	f04f 0001 	mov.w	r0, #1
 8005114:	f7fe fe72 	bl	8003dfc <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	64bb      	str	r3, [r7, #72]	; 0x48
 800511e:	e043      	b.n	80051a8 <CRYP_TDES_ECB+0x18c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fe8f 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 800512a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800512c:	f103 0304 	add.w	r3, r3, #4
 8005130:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fe86 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 800513c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513e:	f103 0304 	add.w	r3, r3, #4
 8005142:	653b      	str	r3, [r7, #80]	; 0x50

    /* Wait until the complete message has been processed */
    counter = 0;
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800514a:	f04f 0010 	mov.w	r0, #16
 800514e:	f7ff f837 	bl	80041c0 <CRYP_GetFlagStatus>
 8005152:	4603      	mov	r3, r0
 8005154:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f103 0301 	add.w	r3, r3, #1
 800515c:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d002      	beq.n	800516c <CRYP_TDES_ECB+0x150>
 8005166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <CRYP_TDES_ECB+0x12e>

    if (busystatus != RESET)
 800516c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <CRYP_TDES_ECB+0x160>
    {
       status = ERROR;
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800517a:	e011      	b.n	80051a0 <CRYP_TDES_ECB+0x184>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800517c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800517e:	f7fe fe73 	bl	8003e68 <CRYP_DataOut>
 8005182:	4603      	mov	r3, r0
 8005184:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005188:	f103 0304 	add.w	r3, r3, #4
 800518c:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800518e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8005190:	f7fe fe6a 	bl	8003e68 <CRYP_DataOut>
 8005194:	4603      	mov	r3, r0
 8005196:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519a:	f103 0304 	add.w	r3, r3, #4
 800519e:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80051a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a2:	f103 0308 	add.w	r3, r3, #8
 80051a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d203      	bcs.n	80051b8 <CRYP_TDES_ECB+0x19c>
 80051b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1b3      	bne.n	8005120 <CRYP_TDES_ECB+0x104>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80051b8:	f04f 0000 	mov.w	r0, #0
 80051bc:	f7fe fe1e 	bl	8003dfc <CRYP_Cmd>

  return status; 
 80051c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd90      	pop	{r4, r7, pc}
 80051ce:	bf00      	nop

080051d0 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b09b      	sub	sp, #108	; 0x6c
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 80051ec:	f04f 0301 	mov.w	r3, #1
 80051f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 80051fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800520a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fd78 	bl	8003d04 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d104      	bne.n	8005224 <CRYP_TDES_CBC+0x54>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005222:	e003      	b.n	800522c <CRYP_TDES_CBC+0x5c>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8005224:	f04f 0304 	mov.w	r3, #4
 8005228:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 800522c:	f04f 0308 	mov.w	r3, #8
 8005230:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8005234:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005238:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  CRYP_Init(&TDES_CRYP_InitStructure);
 800523c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe fc81 	bl	8003b48 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fb f980 	bl	8000550 <__REV>
 8005250:	4603      	mov	r3, r0
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8005254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005256:	f103 0304 	add.w	r3, r3, #4
 800525a:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800525c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fb f975 	bl	8000550 <__REV>
 8005266:	4603      	mov	r3, r0
 8005268:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 800526a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526c:	f103 0304 	add.w	r3, r3, #4
 8005270:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fb f96a 	bl	8000550 <__REV>
 800527c:	4603      	mov	r3, r0
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8005280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005282:	f103 0304 	add.w	r3, r3, #4
 8005286:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f7fb f95f 	bl	8000550 <__REV>
 8005292:	4603      	mov	r3, r0
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8005296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005298:	f103 0304 	add.w	r3, r3, #4
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fb f954 	bl	8000550 <__REV>
 80052a8:	4603      	mov	r3, r0
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 80052ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ae:	f103 0304 	add.w	r3, r3, #4
 80052b2:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80052b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fb f949 	bl	8000550 <__REV>
 80052be:	4603      	mov	r3, r0
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80052c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fcda 	bl	8003c80 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80052cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb f93d 	bl	8000550 <__REV>
 80052d6:	4603      	mov	r3, r0
 80052d8:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80052da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052dc:	f103 0304 	add.w	r3, r3, #4
 80052e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80052e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb f932 	bl	8000550 <__REV>
 80052ec:	4603      	mov	r3, r0
 80052ee:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fe fd2f 	bl	8003d58 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80052fa:	f7fe fd6d 	bl	8003dd8 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80052fe:	f04f 0001 	mov.w	r0, #1
 8005302:	f7fe fd7b 	bl	8003dfc <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	65bb      	str	r3, [r7, #88]	; 0x58
 800530c:	e043      	b.n	8005396 <CRYP_TDES_CBC+0x1c6>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800530e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fd98 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 8005318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800531a:	f103 0304 	add.w	r3, r3, #4
 800531e:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe fd8f 	bl	8003e48 <CRYP_DataIn>
    inputaddr+=4;
 800532a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800532c:	f103 0304 	add.w	r3, r3, #4
 8005330:	663b      	str	r3, [r7, #96]	; 0x60

    /* Wait until the complete message has been processed */
    counter = 0;
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005338:	f04f 0010 	mov.w	r0, #16
 800533c:	f7fe ff40 	bl	80041c0 <CRYP_GetFlagStatus>
 8005340:	4603      	mov	r3, r0
 8005342:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f103 0301 	add.w	r3, r3, #1
 800534a:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005352:	d002      	beq.n	800535a <CRYP_TDES_CBC+0x18a>
 8005354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1ee      	bne.n	8005338 <CRYP_TDES_CBC+0x168>

    if (busystatus != RESET)
 800535a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <CRYP_TDES_CBC+0x19a>
   {
       status = ERROR;
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005368:	e011      	b.n	800538e <CRYP_TDES_CBC+0x1be>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800536a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800536c:	f7fe fd7c 	bl	8003e68 <CRYP_DataOut>
 8005370:	4603      	mov	r3, r0
 8005372:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005376:	f103 0304 	add.w	r3, r3, #4
 800537a:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800537c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800537e:	f7fe fd73 	bl	8003e68 <CRYP_DataOut>
 8005382:	4603      	mov	r3, r0
 8005384:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005388:	f103 0304 	add.w	r3, r3, #4
 800538c:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800538e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005390:	f103 0308 	add.w	r3, r3, #8
 8005394:	65bb      	str	r3, [r7, #88]	; 0x58
 8005396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539a:	429a      	cmp	r2, r3
 800539c:	d203      	bcs.n	80053a6 <CRYP_TDES_CBC+0x1d6>
 800539e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1b3      	bne.n	800530e <CRYP_TDES_CBC+0x13e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80053a6:	f04f 0000 	mov.w	r0, #0
 80053aa:	f7fe fd27 	bl	8003dfc <CRYP_Cmd>

  return status; 
 80053ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}

080053bc <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 80053c0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80053c4:	f04f 0101 	mov.w	r1, #1
 80053c8:	f005 fab6 	bl	800a938 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80053cc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80053d0:	f04f 0100 	mov.w	r1, #0
 80053d4:	f005 fab0 	bl	800a938 <RCC_APB1PeriphResetCmd>
}
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80053f2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80053f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	ea6f 0303 	mvn.w	r3, r3
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	ea02 0303 	and.w	r3, r2, r3
 8005412:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	ea42 0203 	orr.w	r2, r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8005424:	ea42 0203 	orr.w	r2, r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800542c:	ea42 0303 	orr.w	r3, r2, r3
 8005430:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	ea42 0303 	orr.w	r3, r2, r3
 8005440:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8005442:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005446:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	f107 0714 	add.w	r7, r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	60da      	str	r2, [r3, #12]
}
 8005480:	f107 070c 	add.w	r7, r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop

0800548c <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d011      	beq.n	80054c2 <DAC_Cmd+0x36>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800549e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80054a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80054a6:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80054aa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80054ae:	6811      	ldr	r1, [r2, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	f04f 0001 	mov.w	r0, #1
 80054b6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ba:	ea41 0202 	orr.w	r2, r1, r2
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e012      	b.n	80054e8 <DAC_Cmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80054c2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80054c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80054ca:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80054ce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80054d2:	6811      	ldr	r1, [r2, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	f04f 0001 	mov.w	r0, #1
 80054da:	fa00 f202 	lsl.w	r2, r0, r2
 80054de:	ea6f 0202 	mvn.w	r2, r2
 80054e2:	ea01 0202 	and.w	r2, r1, r2
 80054e6:	601a      	str	r2, [r3, #0]
  }
}
 80054e8:	f107 070c 	add.w	r7, r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop

080054f4 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d013      	beq.n	800552e <DAC_SoftwareTriggerCmd+0x3a>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8005506:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800550a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800550e:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8005512:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005516:	6851      	ldr	r1, [r2, #4]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	ea4f 1212 	mov.w	r2, r2, lsr #4
 800551e:	f04f 0001 	mov.w	r0, #1
 8005522:	fa00 f202 	lsl.w	r2, r0, r2
 8005526:	ea41 0202 	orr.w	r2, r1, r2
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	e014      	b.n	8005558 <DAC_SoftwareTriggerCmd+0x64>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 800552e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005532:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005536:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800553a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800553e:	6851      	ldr	r1, [r2, #4]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8005546:	f04f 0001 	mov.w	r0, #1
 800554a:	fa00 f202 	lsl.w	r2, r0, r2
 800554e:	ea6f 0202 	mvn.w	r2, r2
 8005552:	ea01 0202 	and.w	r2, r1, r2
 8005556:	605a      	str	r2, [r3, #4]
  }
}
 8005558:	f107 070c 	add.w	r7, r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop

08005564 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00c      	beq.n	800558e <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8005574:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005578:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800557c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8005580:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005584:	6852      	ldr	r2, [r2, #4]
 8005586:	f042 0203 	orr.w	r2, r2, #3
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	e00b      	b.n	80055a6 <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 800558e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005592:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005596:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800559a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800559e:	6852      	ldr	r2, [r2, #4]
 80055a0:	f022 0203 	bic.w	r2, r2, #3
 80055a4:	605a      	str	r2, [r3, #4]
  }
}
 80055a6:	f107 070c 	add.w	r7, r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <DAC_WaveGenerationCmd+0x36>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 80055c4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80055c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80055cc:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80055d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80055d4:	6811      	ldr	r1, [r2, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	68b8      	ldr	r0, [r7, #8]
 80055da:	fa00 f202 	lsl.w	r2, r0, r2
 80055de:	ea41 0202 	orr.w	r2, r1, r2
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e011      	b.n	800560a <DAC_WaveGenerationCmd+0x5a>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 80055e6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80055ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80055ee:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80055f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80055f6:	6811      	ldr	r1, [r2, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	68b8      	ldr	r0, [r7, #8]
 80055fc:	fa00 f202 	lsl.w	r2, r0, r2
 8005600:	ea6f 0202 	mvn.w	r2, r2
 8005604:	ea01 0202 	and.w	r2, r1, r2
 8005608:	601a      	str	r2, [r3, #0]
  }
}
 800560a:	f107 0714 	add.w	r7, r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8005626:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800562a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800562e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4413      	add	r3, r2
 8005636:	f103 0308 	add.w	r3, r3, #8
 800563a:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	887a      	ldrh	r2, [r7, #2]
 8005640:	601a      	str	r2, [r3, #0]
}
 8005642:	f107 0714 	add.w	r7, r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 800565e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005662:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005666:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	f103 0314 	add.w	r3, r3, #20
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	887a      	ldrh	r2, [r7, #2]
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	f107 0714 	add.w	r7, r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	460a      	mov	r2, r1
 8005690:	807a      	strh	r2, [r7, #2]
 8005692:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d107      	bne.n	80056b6 <DAC_SetDualChannelData+0x32>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 80056a6:	887b      	ldrh	r3, [r7, #2]
 80056a8:	ea4f 2203 	mov.w	r2, r3, lsl #8
 80056ac:	883b      	ldrh	r3, [r7, #0]
 80056ae:	ea42 0303 	orr.w	r3, r2, r3
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e006      	b.n	80056c4 <DAC_SetDualChannelData+0x40>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	ea4f 4203 	mov.w	r2, r3, lsl #16
 80056bc:	883b      	ldrh	r3, [r7, #0]
 80056be:	ea42 0303 	orr.w	r3, r2, r3
 80056c2:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 80056c4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80056c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80056cc:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4413      	add	r3, r2
 80056d4:	f103 0320 	add.w	r3, r3, #32
 80056d8:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]
}
 80056e0:	f107 0714 	add.w	r7, r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop

080056ec <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 80056fa:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80056fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005702:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	ea4f 0293 	mov.w	r2, r3, lsr #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8005712:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
}
 800571a:	4618      	mov	r0, r3
 800571c:	f107 0714 	add.w	r7, r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop

08005728 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d011      	beq.n	800575e <DAC_DMACmd+0x36>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 800573a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800573e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005742:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8005746:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800574a:	6811      	ldr	r1, [r2, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005752:	fa00 f202 	lsl.w	r2, r0, r2
 8005756:	ea41 0202 	orr.w	r2, r1, r2
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e012      	b.n	8005784 <DAC_DMACmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 800575e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005762:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005766:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800576a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800576e:	6811      	ldr	r1, [r2, #0]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005776:	fa00 f202 	lsl.w	r2, r0, r2
 800577a:	ea6f 0202 	mvn.w	r2, r2
 800577e:	ea01 0202 	and.w	r2, r1, r2
 8005782:	601a      	str	r2, [r3, #0]
  }
}
 8005784:	f107 070c 	add.w	r7, r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d010      	beq.n	80057c6 <DAC_ITConfig+0x36>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 80057a4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80057a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80057ac:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80057b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80057b4:	6811      	ldr	r1, [r2, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	68b8      	ldr	r0, [r7, #8]
 80057ba:	fa00 f202 	lsl.w	r2, r0, r2
 80057be:	ea41 0202 	orr.w	r2, r1, r2
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e011      	b.n	80057ea <DAC_ITConfig+0x5a>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 80057c6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80057ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80057ce:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80057d2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80057d6:	6811      	ldr	r1, [r2, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	68b8      	ldr	r0, [r7, #8]
 80057dc:	fa00 f202 	lsl.w	r2, r0, r2
 80057e0:	ea6f 0202 	mvn.w	r2, r2
 80057e4:	ea01 0202 	and.w	r2, r1, r2
 80057e8:	601a      	str	r2, [r3, #0]
  }
}
 80057ea:	f107 0714 	add.w	r7, r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8005804:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005808:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800580c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	ea02 0303 	and.w	r3, r2, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <DAC_GetFlagStatus+0x32>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 800581e:	f04f 0301 	mov.w	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
 8005824:	e002      	b.n	800582c <DAC_GetFlagStatus+0x38>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	f107 0714 	add.w	r7, r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop

0800583c <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8005846:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800584a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005858:	f107 070c 	add.w	r7, r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop

08005864 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 800587a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800587e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	fa01 f303 	lsl.w	r3, r1, r3
 800588c:	ea02 0303 	and.w	r3, r2, r3
 8005890:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8005892:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005896:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800589a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	ea02 0303 	and.w	r3, r2, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d006      	beq.n	80058ba <DAC_GetITStatus+0x56>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <DAC_GetITStatus+0x56>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 80058b2:	f04f 0301 	mov.w	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
 80058b8:	e002      	b.n	80058c0 <DAC_GetITStatus+0x5c>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	f107 0714 	add.w	r7, r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop

080058d0 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 80058da:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80058de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80058ec:	f107 070c 	add.w	r7, r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop

080058f8 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 80058fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005900:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800590a:	4618      	mov	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop

08005914 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8005918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800591c:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8005926:	ea4f 5313 	mov.w	r3, r3, lsr #20
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop

08005934 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <DBGMCU_Config+0x2e>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8005946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800594a:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800594e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005952:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8005956:	6851      	ldr	r1, [r2, #4]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	ea41 0202 	orr.w	r2, r1, r2
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	e00e      	b.n	8005980 <DBGMCU_Config+0x4c>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8005962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005966:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800596a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800596e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8005972:	6851      	ldr	r1, [r2, #4]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	ea6f 0202 	mvn.w	r2, r2
 800597a:	ea01 0202 	and.w	r2, r1, r2
 800597e:	605a      	str	r2, [r3, #4]
  }
}
 8005980:	f107 070c 	add.w	r7, r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop

0800598c <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <DBGMCU_APB1PeriphConfig+0x2e>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800599e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059a2:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80059a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059aa:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80059ae:	6891      	ldr	r1, [r2, #8]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	ea41 0202 	orr.w	r2, r1, r2
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	e00e      	b.n	80059d8 <DBGMCU_APB1PeriphConfig+0x4c>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 80059ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059be:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80059c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059c6:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80059ca:	6891      	ldr	r1, [r2, #8]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	ea6f 0202 	mvn.w	r2, r2
 80059d2:	ea01 0202 	and.w	r2, r1, r2
 80059d6:	609a      	str	r2, [r3, #8]
  }
}
 80059d8:	f107 070c 	add.w	r7, r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop

080059e4 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00d      	beq.n	8005a12 <DBGMCU_APB2PeriphConfig+0x2e>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 80059f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059fa:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80059fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a02:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8005a06:	68d1      	ldr	r1, [r2, #12]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	ea41 0202 	orr.w	r2, r1, r2
 8005a0e:	60da      	str	r2, [r3, #12]
 8005a10:	e00e      	b.n	8005a30 <DBGMCU_APB2PeriphConfig+0x4c>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8005a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a16:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8005a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a1e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8005a22:	68d1      	ldr	r1, [r2, #12]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	ea6f 0202 	mvn.w	r2, r2
 8005a2a:	ea01 0202 	and.w	r2, r1, r2
 8005a2e:	60da      	str	r2, [r3, #12]
  }
}
 8005a30:	f107 070c 	add.w	r7, r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop

08005a3c <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005a64:	f04f 021f 	mov.w	r2, #31
 8005a68:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8005ae4:	f023 0312 	bic.w	r3, r3, #18
 8005ae8:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005af2:	ea42 0303 	orr.w	r3, r2, r3
 8005af6:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005afc:	ea42 0303 	orr.w	r3, r2, r3
 8005b00:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005b06:	ea42 0303 	orr.w	r3, r2, r3
 8005b0a:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005b10:	ea42 0303 	orr.w	r3, r2, r3
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	895b      	ldrh	r3, [r3, #10]
 8005b1a:	ea42 0303 	orr.w	r3, r2, r3
 8005b1e:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005b24:	ea42 0303 	orr.w	r3, r2, r3
 8005b28:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	ea42 0303 	orr.w	r3, r2, r3
 8005b30:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	f107 0714 	add.w	r7, r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	819a      	strh	r2, [r3, #12]
}
 8005b88:	f107 070c 	add.w	r7, r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop

08005b94 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	8852      	ldrh	r2, [r2, #2]
 8005ba8:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	8812      	ldrh	r2, [r2, #0]
 8005bae:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8005bb2:	ea41 0202 	orr.w	r2, r1, r2
 8005bb6:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	88d2      	ldrh	r2, [r2, #6]
 8005bc4:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	8892      	ldrh	r2, [r2, #4]
 8005bca:	ea4f 4202 	mov.w	r2, r2, lsl #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8005bce:	ea41 0202 	orr.w	r2, r1, r2
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8005bd4:	f107 070c 	add.w	r7, r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop

08005be0 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <DCMI_CROPCmd+0x2a>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	f042 0204 	orr.w	r2, r2, #4
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e00b      	b.n	8005c22 <DCMI_CROPCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	f022 0204 	bic.w	r2, r2, #4
 8005c20:	601a      	str	r2, [r3, #0]
  }
}
 8005c22:	f107 070c 	add.w	r7, r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	7852      	ldrb	r2, [r2, #1]
 8005c46:	ea4f 2202 	mov.w	r2, r2, lsl #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8005c4a:	ea41 0102 	orr.w	r1, r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	7892      	ldrb	r2, [r2, #2]
 8005c52:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8005c56:	ea41 0102 	orr.w	r1, r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	78d2      	ldrb	r2, [r2, #3]
 8005c5e:	ea4f 6202 	mov.w	r2, r2, lsl #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8005c62:	ea41 0202 	orr.w	r2, r1, r2
 8005c66:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8005c68:	f107 070c 	add.w	r7, r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop

08005c74 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <DCMI_JPEGCmd+0x2a>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	f042 0208 	orr.w	r2, r2, #8
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	e00b      	b.n	8005cb6 <DCMI_JPEGCmd+0x42>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	f022 0208 	bic.w	r2, r2, #8
 8005cb4:	601a      	str	r2, [r3, #0]
  }
}
 8005cb6:	f107 070c 	add.w	r7, r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00c      	beq.n	8005cea <DCMI_Cmd+0x2a>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	e00b      	b.n	8005d02 <DCMI_Cmd+0x42>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d00:	601a      	str	r2, [r3, #0]
  }
}
 8005d02:	f107 070c 	add.w	r7, r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00c      	beq.n	8005d36 <DCMI_CaptureCmd+0x2a>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e00b      	b.n	8005d4e <DCMI_CaptureCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
  }
}
 8005d4e:	f107 070c 	add.w	r7, r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr

08005d58 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop

08005d70 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	80fa      	strh	r2, [r7, #6]
 8005d7c:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005d7e:	797b      	ldrb	r3, [r7, #5]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00d      	beq.n	8005da0 <DCMI_ITConfig+0x30>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005d94:	68d1      	ldr	r1, [r2, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	ea41 0202 	orr.w	r2, r1, r2
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	e00f      	b.n	8005dc0 <DCMI_ITConfig+0x50>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005db0:	68d1      	ldr	r1, [r2, #12]
 8005db2:	88fa      	ldrh	r2, [r7, #6]
 8005db4:	ea6f 0202 	mvn.w	r2, r2
 8005db8:	b292      	uxth	r2, r2
 8005dba:	ea01 0202 	and.w	r2, r1, r2
 8005dbe:	60da      	str	r2, [r3, #12]
  }  
}
 8005dc0:	f107 070c 	add.w	r7, r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop

08005dcc <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 8005ddc:	f04f 0300 	mov.w	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x01) /* The FLAG is in RISR register */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d106      	bne.n	8005e00 <DCMI_GetFlagStatus+0x34>
  {
    tempreg= DCMI->RISR;
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	e00f      	b.n	8005e20 <DCMI_GetFlagStatus+0x54>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d106      	bne.n	8005e14 <DCMI_GetFlagStatus+0x48>
  {
    tempreg = DCMI->SR;
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	e005      	b.n	8005e20 <DCMI_GetFlagStatus+0x54>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	ea02 0303 	and.w	r3, r2, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <DCMI_GetFlagStatus+0x68>
  {
    bitstatus = SET;
 8005e2c:	f04f 0301 	mov.w	r3, #1
 8005e30:	75fb      	strb	r3, [r7, #23]
 8005e32:	e002      	b.n	8005e3a <DCMI_GetFlagStatus+0x6e>
  }
  else
  {
    bitstatus = RESET;
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f107 071c 	add.w	r7, r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005e5a:	88fa      	ldrh	r2, [r7, #6]
 8005e5c:	615a      	str	r2, [r3, #20]
}
 8005e5e:	f107 070c 	add.w	r7, r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr

08005e68 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	ea02 0303 	and.w	r3, r2, r3
 8005e8e:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <DCMI_GetITStatus+0x36>
  {
    bitstatus = SET;
 8005e96:	f04f 0301 	mov.w	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
 8005e9c:	e002      	b.n	8005ea4 <DCMI_GetITStatus+0x3c>
  }
  else
  {
    bitstatus = RESET;
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f107 0714 	add.w	r7, r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop

08005eb4 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	615a      	str	r2, [r3, #20]
}
 8005eca:	f107 070c 	add.w	r7, r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr

08005ed4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f023 0201 	bic.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f04f 0221 	mov.w	r2, #33	; 0x21
 8005f16:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	f246 0310 	movw	r3, #24592	; 0x6010
 8005f1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d107      	bne.n	8005f36 <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8005f26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005f2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f2e:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	e0eb      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	f246 0328 	movw	r3, #24616	; 0x6028
 8005f3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d107      	bne.n	8005f54 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8005f44:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005f48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f4c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005f50:	609a      	str	r2, [r3, #8]
 8005f52:	e0dc      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	f246 0340 	movw	r3, #24640	; 0x6040
 8005f5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d107      	bne.n	8005f72 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8005f62:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005f66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f6a:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	e0cd      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	f246 0358 	movw	r3, #24664	; 0x6058
 8005f78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d107      	bne.n	8005f90 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8005f80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005f84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f88:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005f8c:	609a      	str	r2, [r3, #8]
 8005f8e:	e0be      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	f246 0370 	movw	r3, #24688	; 0x6070
 8005f96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d109      	bne.n	8005fb2 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8005f9e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005fa2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fa6:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8005faa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005fae:	60da      	str	r2, [r3, #12]
 8005fb0:	e0ad      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	f246 0388 	movw	r3, #24712	; 0x6088
 8005fb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d109      	bne.n	8005fd4 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8005fc0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005fc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fc8:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005fcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	e09c      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8005fda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d109      	bne.n	8005ff6 <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8005fe2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005fe6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8005ff2:	60da      	str	r2, [r3, #12]
 8005ff4:	e08b      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8005ffc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006000:	429a      	cmp	r2, r3
 8006002:	d107      	bne.n	8006014 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8006004:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006008:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800600c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8006010:	60da      	str	r2, [r3, #12]
 8006012:	e07c      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	f246 4310 	movw	r3, #25616	; 0x6410
 800601a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800601e:	429a      	cmp	r2, r3
 8006020:	d107      	bne.n	8006032 <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8006022:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006026:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800602a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	e06d      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	f246 4328 	movw	r3, #25640	; 0x6428
 8006038:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800603c:	429a      	cmp	r2, r3
 800603e:	d107      	bne.n	8006050 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8006040:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006044:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006048:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800604c:	609a      	str	r2, [r3, #8]
 800604e:	e05e      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	f246 4340 	movw	r3, #25664	; 0x6440
 8006056:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800605a:	429a      	cmp	r2, r3
 800605c:	d107      	bne.n	800606e <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800605e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006062:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006066:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	e04f      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	f246 4358 	movw	r3, #25688	; 0x6458
 8006074:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006078:	429a      	cmp	r2, r3
 800607a:	d107      	bne.n	800608c <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800607c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006080:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006084:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8006088:	609a      	str	r2, [r3, #8]
 800608a:	e040      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	f246 4370 	movw	r3, #25712	; 0x6470
 8006092:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006096:	429a      	cmp	r2, r3
 8006098:	d109      	bne.n	80060ae <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800609a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800609e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060a2:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80060a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	e02f      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	f246 4388 	movw	r3, #25736	; 0x6488
 80060b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d109      	bne.n	80060d0 <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80060bc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80060c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060c4:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80060c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80060cc:	60da      	str	r2, [r3, #12]
 80060ce:	e01e      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	f246 43a0 	movw	r3, #25760	; 0x64a0
 80060d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060da:	429a      	cmp	r2, r3
 80060dc:	d109      	bne.n	80060f2 <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80060de:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80060e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f2c2 023d 	movt	r2, #8253	; 0x203d
 80060ee:	60da      	str	r2, [r3, #12]
 80060f0:	e00d      	b.n	800610e <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	f246 43b8 	movw	r3, #25784	; 0x64b8
 80060f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d106      	bne.n	800610e <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8006100:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006104:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006108:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800610c:	60da      	str	r2, [r3, #12]
    }
  }
}
 800610e:	f107 070c 	add.w	r7, r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f248 033f 	movw	r3, #32831	; 0x803f
 8006134:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8006138:	ea02 0303 	and.w	r3, r2, r3
 800613c:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	ea42 0203 	orr.w	r2, r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800614e:	ea42 0203 	orr.w	r2, r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	ea42 0203 	orr.w	r2, r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800615e:	ea42 0203 	orr.w	r2, r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	ea42 0203 	orr.w	r2, r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800616e:	ea42 0203 	orr.w	r2, r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	ea42 0203 	orr.w	r2, r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800617e:	ea42 0203 	orr.w	r2, r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	ea42 0303 	orr.w	r3, r2, r3
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	ea42 0303 	orr.w	r3, r2, r3
 8006190:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 0307 	bic.w	r3, r3, #7
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	ea42 0303 	orr.w	r3, r2, r3
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	ea42 0303 	orr.w	r3, r2, r3
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]
}
 80061d8:	f107 0714 	add.w	r7, r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop

080061e4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006264:	f107 070c 	add.w	r7, r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop

08006270 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f043 0201 	orr.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e005      	b.n	800629c <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f023 0201 	bic.w	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	601a      	str	r2, [r3, #0]
  }
}
 800629c:	f107 070c 	add.w	r7, r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop

080062a8 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d006      	beq.n	80062c6 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	e005      	b.n	80062d2 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
  }
}
 80062d2:	f107 070c 	add.w	r7, r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d006      	beq.n	80062fa <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e005      	b.n	8006306 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f023 0220 	bic.w	r2, r3, #32
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	601a      	str	r2, [r3, #0]
  }
}
 8006306:	f107 070c 	add.w	r7, r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800631c:	887a      	ldrh	r2, [r7, #2]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	605a      	str	r2, [r3, #4]
}
 8006322:	f107 070c 	add.w	r7, r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	b29b      	uxth	r3, r3
}
 800633a:	4618      	mov	r0, r3
 800633c:	f107 070c 	add.w	r7, r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop

08006348 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d006      	beq.n	8006368 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	e005      	b.n	8006374 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	611a      	str	r2, [r3, #16]
}
 800637a:	f107 0714 	add.w	r7, r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d006      	beq.n	80063a4 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e005      	b.n	80063b0 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]
  }
}
 80063b0:	f107 070c 	add.w	r7, r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop

080063bc <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	611a      	str	r2, [r3, #16]
 80063d4:	e002      	b.n	80063dc <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	60da      	str	r2, [r3, #12]
  }
}
 80063dc:	f107 0714 	add.w	r7, r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop

080063e8 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8006402:	f04f 0301 	mov.w	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e002      	b.n	8006410 <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8006410:	68fb      	ldr	r3, [r7, #12]
}
 8006412:	4618      	mov	r0, r3
 8006414:	f107 0714 	add.w	r7, r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop

08006420 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800643c:	f04f 0301 	mov.w	r3, #1
 8006440:	73fb      	strb	r3, [r7, #15]
 8006442:	e002      	b.n	800644a <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
}
 800644c:	4618      	mov	r0, r3
 800644e:	f107 0714 	add.w	r7, r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800646e:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8006470:	68fb      	ldr	r3, [r7, #12]
}
 8006472:	4618      	mov	r0, r3
 8006474:	f107 0714 	add.w	r7, r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop

08006480 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	f246 430f 	movw	r3, #25615	; 0x640f
 800649c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d805      	bhi.n	80064b0 <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80064a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80064a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	e004      	b.n	80064ba <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80064b0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80064b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064b8:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	e002      	b.n	80064d2 <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f640 737d 	movw	r3, #3965	; 0xf7d
 80064d8:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 80064dc:	ea02 0303 	and.w	r3, r2, r3
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	ea02 0303 	and.w	r3, r2, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <DMA_GetFlagStatus+0x76>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80064ee:	f04f 0301 	mov.w	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
 80064f4:	e002      	b.n	80064fc <DMA_GetFlagStatus+0x7c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	f107 071c 	add.w	r7, r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	f246 430f 	movw	r3, #25615	; 0x640f
 800651c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006520:	429a      	cmp	r2, r3
 8006522:	d805      	bhi.n	8006530 <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006524:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006528:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e004      	b.n	800653a <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006530:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006534:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006538:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d009      	beq.n	8006558 <DMA_ClearFlag+0x4c>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	f640 737d 	movw	r3, #3965	; 0xf7d
 800654a:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800654e:	ea02 0303 	and.w	r3, r2, r3
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	60d3      	str	r3, [r2, #12]
 8006556:	e008      	b.n	800656a <DMA_ClearFlag+0x5e>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	f640 737d 	movw	r3, #3965	; 0xf7d
 800655e:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8006562:	ea02 0303 	and.w	r3, r2, r3
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	6093      	str	r3, [r2, #8]
  }    
}
 800656a:	f107 0714 	add.w	r7, r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00f      	beq.n	80065ac <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d006      	beq.n	80065a0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	615a      	str	r2, [r3, #20]
 800659e:	e005      	b.n	80065ac <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b80      	cmp	r3, #128	; 0x80
 80065b0:	d017      	beq.n	80065e2 <DMA_ITConfig+0x6e>
  {
    if (NewState != DISABLE)
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d009      	beq.n	80065cc <DMA_ITConfig+0x58>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 031e 	and.w	r3, r3, #30
 80065c2:	ea42 0203 	orr.w	r2, r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e00a      	b.n	80065e2 <DMA_ITConfig+0x6e>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 031e 	and.w	r3, r3, #30
 80065d6:	ea6f 0303 	mvn.w	r3, r3
 80065da:	ea02 0203 	and.w	r2, r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80065e2:	f107 0714 	add.w	r7, r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr

080065ec <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	f04f 0300 	mov.w	r3, #0
 8006606:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	f246 430f 	movw	r3, #25615	; 0x640f
 800660e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006612:	429a      	cmp	r2, r3
 8006614:	d805      	bhi.n	8006622 <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006616:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800661a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	e004      	b.n	800662c <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006622:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006626:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800662a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	f640 733c 	movw	r3, #3900	; 0xf3c
 8006632:	f6c0 733c 	movt	r3, #3900	; 0xf3c
 8006636:	ea02 0303 	and.w	r3, r2, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <DMA_GetITStatus+0x6c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006644:	f003 031e 	and.w	r3, r3, #30
 8006648:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	ea02 0303 	and.w	r3, r2, r3
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	e004      	b.n	8006662 <DMA_GetITStatus+0x76>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <DMA_GetITStatus+0x88>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e002      	b.n	800667a <DMA_GetITStatus+0x8e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f640 737d 	movw	r3, #3965	; 0xf7d
 8006680:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8006684:	ea02 0303 	and.w	r3, r2, r3
 8006688:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	ea02 0303 	and.w	r3, r2, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d006      	beq.n	80066a4 <DMA_GetITStatus+0xb8>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <DMA_GetITStatus+0xb8>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800669c:	f04f 0301 	mov.w	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
 80066a2:	e002      	b.n	80066aa <DMA_GetITStatus+0xbe>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	f107 071c 	add.w	r7, r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	f246 430f 	movw	r3, #25615	; 0x640f
 80066c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d805      	bhi.n	80066dc <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80066d0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80066d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	e004      	b.n	80066e6 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80066dc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80066e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066e4:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d009      	beq.n	8006704 <DMA_ClearITPendingBit+0x4c>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	f640 737d 	movw	r3, #3965	; 0xf7d
 80066f6:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 80066fa:	ea02 0303 	and.w	r3, r2, r3
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	60d3      	str	r3, [r2, #12]
 8006702:	e008      	b.n	8006716 <DMA_ClearITPendingBit+0x5e>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	f640 737d 	movw	r3, #3965	; 0xf7d
 800670a:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800670e:	ea02 0303 	and.w	r3, r2, r3
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	6093      	str	r3, [r2, #8]
  }   
}
 8006716:	f107 0714 	add.w	r7, r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr

08006720 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8006724:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006728:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8006732:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006736:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8006740:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006744:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800674e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006752:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 800675c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006760:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006768:	f2c0 027f 	movt	r2, #127	; 0x7f
 800676c:	615a      	str	r2, [r3, #20]
}
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8006782:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006786:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800678a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	799b      	ldrb	r3, [r3, #6]
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8081 	beq.w	8006898 <EXTI_Init+0x124>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8006796:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800679a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800679e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80067a2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80067a6:	6811      	ldr	r1, [r2, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	ea6f 0202 	mvn.w	r2, r2
 80067b0:	ea01 0202 	and.w	r2, r1, r2
 80067b4:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80067b6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80067be:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80067c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80067c6:	6851      	ldr	r1, [r2, #4]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	ea6f 0202 	mvn.w	r2, r2
 80067d0:	ea01 0202 	and.w	r2, r1, r2
 80067d4:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	791b      	ldrb	r3, [r3, #4]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	ea41 0202 	orr.w	r2, r1, r2
 80067ee:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80067f0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80067f8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80067fc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006800:	6891      	ldr	r1, [r2, #8]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	ea6f 0202 	mvn.w	r2, r2
 800680a:	ea01 0202 	and.w	r2, r1, r2
 800680e:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006810:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006814:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006818:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800681c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006820:	68d1      	ldr	r1, [r2, #12]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	ea6f 0202 	mvn.w	r2, r2
 800682a:	ea01 0202 	and.w	r2, r1, r2
 800682e:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	795b      	ldrb	r3, [r3, #5]
 8006834:	2b10      	cmp	r3, #16
 8006836:	d11c      	bne.n	8006872 <EXTI_Init+0xfe>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8006838:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800683c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006840:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006844:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006848:	6891      	ldr	r1, [r2, #8]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	ea41 0202 	orr.w	r2, r1, r2
 8006852:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8006854:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006858:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800685c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006860:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006864:	68d1      	ldr	r1, [r2, #12]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	ea41 0202 	orr.w	r2, r1, r2
 800686e:	60da      	str	r2, [r3, #12]
 8006870:	e021      	b.n	80068b6 <EXTI_Init+0x142>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8006872:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006876:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800687a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	795b      	ldrb	r3, [r3, #5]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	6811      	ldr	r1, [r2, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6812      	ldr	r2, [r2, #0]
 8006890:	ea41 0202 	orr.w	r2, r1, r2
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	e00e      	b.n	80068b6 <EXTI_Init+0x142>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	791b      	ldrb	r3, [r3, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	6811      	ldr	r1, [r2, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	ea6f 0202 	mvn.w	r2, r2
 80068b0:	ea01 0202 	and.w	r2, r1, r2
 80068b4:	601a      	str	r2, [r3, #0]
  }
}
 80068b6:	f107 0714 	add.w	r7, r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bc80      	pop	{r7}
 80068be:	4770      	bx	lr

080068c0 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f04f 0200 	mov.w	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f04f 020c 	mov.w	r2, #12
 80068de:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	719a      	strb	r2, [r3, #6]
}
 80068e8:	f107 070c 	add.w	r7, r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop

080068f4 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 80068fc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006900:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006904:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006908:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800690c:	6911      	ldr	r1, [r2, #16]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	ea41 0202 	orr.w	r2, r1, r2
 8006914:	611a      	str	r2, [r3, #16]
}
 8006916:	f107 070c 	add.w	r7, r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800692e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006932:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006936:	695a      	ldr	r2, [r3, #20]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	ea02 0303 	and.w	r3, r2, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <EXTI_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8006942:	f04f 0301 	mov.w	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
 8006948:	e002      	b.n	8006950 <EXTI_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	f107 0714 	add.w	r7, r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop

08006960 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8006968:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800696c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	615a      	str	r2, [r3, #20]
}
 8006974:	f107 070c 	add.w	r7, r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop

08006980 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8006994:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006998:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	ea02 0303 	and.w	r3, r2, r3
 80069a4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80069a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80069ae:	695a      	ldr	r2, [r3, #20]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	ea02 0303 	and.w	r3, r2, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d006      	beq.n	80069c8 <EXTI_GetITStatus+0x48>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <EXTI_GetITStatus+0x48>
  {
    bitstatus = SET;
 80069c0:	f04f 0301 	mov.w	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
 80069c6:	e002      	b.n	80069ce <EXTI_GetITStatus+0x4e>
  }
  else
  {
    bitstatus = RESET;
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	f107 0714 	add.w	r7, r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80069e4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	615a      	str	r2, [r3, #20]
}
 80069f0:	f107 070c 	add.w	r7, r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop

080069fc <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8006a04:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
}
 8006a12:	f107 070c 	add.w	r7, r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00c      	beq.n	8006a46 <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8006a2c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a34:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006a38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e00b      	b.n	8006a5e <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8006a46:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a4e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006a52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a56:	6812      	ldr	r2, [r2, #0]
 8006a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a5c:	601a      	str	r2, [r3, #0]
  }
}
 8006a5e:	f107 070c 	add.w	r7, r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00c      	beq.n	8006a92 <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8006a78:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a80:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006a84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e00b      	b.n	8006aaa <FLASH_InstructionCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8006a92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a9a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006a9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006aa8:	601a      	str	r2, [r3, #0]
  }
}
 8006aaa:	f107 070c 	add.w	r7, r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00c      	beq.n	8006ade <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8006ac4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ac8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006acc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006ad0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	e00b      	b.n	8006af6 <FLASH_DataCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8006ade:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ae2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ae6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006aea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af4:	601a      	str	r2, [r3, #0]
  }
}
 8006af6:	f107 070c 	add.w	r7, r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr

08006b00 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 8006b04:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b0c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006b10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b1a:	601a      	str	r2, [r3, #0]
}
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop

08006b24 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8006b28:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b30:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006b34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b3e:	601a      	str	r2, [r3, #0]
}
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop

08006b48 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8006b4c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	da11      	bge.n	8006b7e <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8006b5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b62:	f240 1223 	movw	r2, #291	; 0x123
 8006b66:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8006b6a:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8006b6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b74:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8006b78:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8006b7c:	605a      	str	r2, [r3, #4]
  }  
}
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006b88:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b90:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006b94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b98:	6912      	ldr	r2, [r2, #16]
 8006b9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006b9e:	611a      	str	r2, [r3, #16]
}
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop

08006ba8 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8006bba:	f04f 0308 	mov.w	r3, #8
 8006bbe:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <FLASH_EraseSector+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e010      	b.n	8006bf0 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d103      	bne.n	8006bdc <FLASH_EraseSector+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	e009      	b.n	8006bf0 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d103      	bne.n	8006bea <FLASH_EraseSector+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e002      	b.n	8006bf0 <FLASH_EraseSector+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006bee:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006bf0:	f000 fbfc 	bl	80073ec <FLASH_WaitForLastOperation>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 8006bf8:	7afb      	ldrb	r3, [r7, #11]
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d15b      	bne.n	8006cb6 <FLASH_EraseSector+0x10e>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8006bfe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c06:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006c0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c0e:	6912      	ldr	r2, [r2, #16]
 8006c10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c14:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 8006c16:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c1e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006c22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c26:	6911      	ldr	r1, [r2, #16]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	ea41 0202 	orr.w	r2, r1, r2
 8006c2e:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 8006c30:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c38:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006c3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c40:	6912      	ldr	r2, [r2, #16]
 8006c42:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006c46:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8006c48:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c50:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006c54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c58:	6911      	ldr	r1, [r2, #16]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	ea41 0202 	orr.w	r2, r1, r2
 8006c60:	f042 0202 	orr.w	r2, r2, #2
 8006c64:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8006c66:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c6e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006c72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c76:	6912      	ldr	r2, [r2, #16]
 8006c78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c7c:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006c7e:	f000 fbb5 	bl	80073ec <FLASH_WaitForLastOperation>
 8006c82:	4603      	mov	r3, r0
 8006c84:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8006c86:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c8e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006c92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c96:	6912      	ldr	r2, [r2, #16]
 8006c98:	f022 0202 	bic.w	r2, r2, #2
 8006c9c:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 8006c9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ca2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ca6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006caa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006cae:	6912      	ldr	r2, [r2, #16]
 8006cb0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006cb4:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f107 0710 	add.w	r7, r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop

08006cc4 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8006cd4:	f04f 0308 	mov.w	r3, #8
 8006cd8:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006cda:	f000 fb87 	bl	80073ec <FLASH_WaitForLastOperation>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d103      	bne.n	8006cf0 <FLASH_EraseAllSectors+0x2c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e010      	b.n	8006d12 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_2)
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d103      	bne.n	8006cfe <FLASH_EraseAllSectors+0x3a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	e009      	b.n	8006d12 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_3)
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d103      	bne.n	8006d0c <FLASH_EraseAllSectors+0x48>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e002      	b.n	8006d12 <FLASH_EraseAllSectors+0x4e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006d0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006d10:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d140      	bne.n	8006d9a <FLASH_EraseAllSectors+0xd6>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8006d18:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006d20:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006d24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006d28:	6912      	ldr	r2, [r2, #16]
 8006d2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d2e:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 8006d30:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006d38:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006d3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006d40:	6911      	ldr	r1, [r2, #16]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	ea41 0202 	orr.w	r2, r1, r2
 8006d48:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER;
 8006d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006d52:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006d56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006d5a:	6912      	ldr	r2, [r2, #16]
 8006d5c:	f042 0204 	orr.w	r2, r2, #4
 8006d60:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8006d62:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006d6a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006d6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006d72:	6912      	ldr	r2, [r2, #16]
 8006d74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d78:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006d7a:	f000 fb37 	bl	80073ec <FLASH_WaitForLastOperation>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8006d82:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006d8a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006d92:	6912      	ldr	r2, [r2, #16]
 8006d94:	f022 0204 	bic.w	r2, r2, #4
 8006d98:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f107 0710 	add.w	r7, r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop

08006da8 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8006db4:	f04f 0308 	mov.w	r3, #8
 8006db8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006dba:	f000 fb17 	bl	80073ec <FLASH_WaitForLastOperation>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d138      	bne.n	8006e3a <FLASH_ProgramDoubleWord+0x92>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006dc8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006dd0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006dd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006dd8:	6912      	ldr	r2, [r2, #16]
 8006dda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006dde:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006de0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006de4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006de8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006dec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006df0:	6912      	ldr	r2, [r2, #16]
 8006df2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006df6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006df8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e00:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006e04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006e08:	6912      	ldr	r2, [r2, #16]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 8006e10:	68f9      	ldr	r1, [r7, #12]
 8006e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e16:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006e1a:	f000 fae7 	bl	80073ec <FLASH_WaitForLastOperation>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006e22:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e2a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006e32:	6912      	ldr	r2, [r2, #16]
 8006e34:	f022 0201 	bic.w	r2, r2, #1
 8006e38:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f107 0718 	add.w	r7, r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop

08006e48 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8006e52:	f04f 0308 	mov.w	r3, #8
 8006e56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006e58:	f000 fac8 	bl	80073ec <FLASH_WaitForLastOperation>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d136      	bne.n	8006ed4 <FLASH_ProgramWord+0x8c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006e66:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e6e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006e72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006e76:	6912      	ldr	r2, [r2, #16]
 8006e78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006e7c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8006e7e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e86:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006e8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006e8e:	6912      	ldr	r2, [r2, #16]
 8006e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e94:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006e96:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e9e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006ea6:	6912      	ldr	r2, [r2, #16]
 8006ea8:	f042 0201 	orr.w	r2, r2, #1
 8006eac:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006eb4:	f000 fa9a 	bl	80073ec <FLASH_WaitForLastOperation>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006ebc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ec0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ec4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006ec8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006ecc:	6912      	ldr	r2, [r2, #16]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f107 0710 	add.w	r7, r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8006eec:	f04f 0308 	mov.w	r3, #8
 8006ef0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006ef2:	f000 fa7b 	bl	80073ec <FLASH_WaitForLastOperation>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d136      	bne.n	8006f6e <FLASH_ProgramHalfWord+0x8e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006f00:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f08:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006f0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006f10:	6912      	ldr	r2, [r2, #16]
 8006f12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f16:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006f18:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f20:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006f24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006f28:	6912      	ldr	r2, [r2, #16]
 8006f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f2e:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006f30:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f38:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006f3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006f40:	6912      	ldr	r2, [r2, #16]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	887a      	ldrh	r2, [r7, #2]
 8006f4c:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006f4e:	f000 fa4d 	bl	80073ec <FLASH_WaitForLastOperation>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006f56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f5e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006f62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006f66:	6912      	ldr	r2, [r2, #16]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	f107 0710 	add.w	r7, r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop

08006f7c <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8006f88:	f04f 0308 	mov.w	r3, #8
 8006f8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006f8e:	f000 fa2d 	bl	80073ec <FLASH_WaitForLastOperation>
 8006f92:	4603      	mov	r3, r0
 8006f94:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d134      	bne.n	8007006 <FLASH_ProgramByte+0x8a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006f9c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006fa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006fa4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006fa8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006fac:	6912      	ldr	r2, [r2, #16]
 8006fae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006fb2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8006fb4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006fb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006fbc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006fc0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006fc4:	6912      	ldr	r2, [r2, #16]
 8006fc6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006fc8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006fcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006fd0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006fd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006fd8:	6912      	ldr	r2, [r2, #16]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
 8006fde:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	78fa      	ldrb	r2, [r7, #3]
 8006fe4:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006fe6:	f000 fa01 	bl	80073ec <FLASH_WaitForLastOperation>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006fee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ff2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ff6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006ffa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006ffe:	6912      	ldr	r2, [r2, #16]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	f107 0710 	add.w	r7, r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop

08007014 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8007018:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800701c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d011      	beq.n	8007050 <FLASH_OB_Unlock+0x3c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800702c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007030:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007034:	f642 223b 	movw	r2, #10811	; 0x2a3b
 8007038:	f6c0 0219 	movt	r2, #2073	; 0x819
 800703c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800703e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007042:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007046:	f646 627f 	movw	r2, #28287	; 0x6e7f
 800704a:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
 800704e:	609a      	str	r2, [r3, #8]
  }  
}
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop

08007058 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8007058:	b480      	push	{r7}
 800705a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800705c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007064:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007068:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800706c:	6952      	ldr	r2, [r2, #20]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	615a      	str	r2, [r3, #20]
}
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop

0800707c <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8007088:	f04f 0308 	mov.w	r3, #8
 800708c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800708e:	f000 f9ad 	bl	80073ec <FLASH_WaitForLastOperation>
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d126      	bne.n	80070ea <FLASH_OB_WRPConfig+0x6e>
  { 
    if(NewState != DISABLE)
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d013      	beq.n	80070ca <FLASH_OB_WRPConfig+0x4e>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 80070a2:	f643 4316 	movw	r3, #15382	; 0x3c16
 80070a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80070aa:	f643 4216 	movw	r2, #15382	; 0x3c16
 80070ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80070b2:	8812      	ldrh	r2, [r2, #0]
 80070b4:	b291      	uxth	r1, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	b292      	uxth	r2, r2
 80070ba:	ea6f 0202 	mvn.w	r2, r2
 80070be:	b292      	uxth	r2, r2
 80070c0:	ea01 0202 	and.w	r2, r1, r2
 80070c4:	b292      	uxth	r2, r2
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	e00f      	b.n	80070ea <FLASH_OB_WRPConfig+0x6e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 80070ca:	f643 4316 	movw	r3, #15382	; 0x3c16
 80070ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80070d2:	f643 4216 	movw	r2, #15382	; 0x3c16
 80070d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80070da:	8812      	ldrh	r2, [r2, #0]
 80070dc:	b291      	uxth	r1, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	b292      	uxth	r2, r2
 80070e2:	ea41 0202 	orr.w	r2, r1, r2
 80070e6:	b292      	uxth	r2, r2
 80070e8:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80070ea:	f107 0710 	add.w	r7, r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop

080070f4 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 80070fe:	f04f 0308 	mov.w	r3, #8
 8007102:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 8007104:	f000 f972 	bl	80073ec <FLASH_WaitForLastOperation>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b08      	cmp	r3, #8
 8007110:	d105      	bne.n	800711e <FLASH_OB_RDPConfig+0x2a>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8007112:	f643 4315 	movw	r3, #15381	; 0x3c15
 8007116:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800711a:	79fa      	ldrb	r2, [r7, #7]
 800711c:	701a      	strb	r2, [r3, #0]

  }
}
 800711e:	f107 0710 	add.w	r7, r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop

08007128 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	4613      	mov	r3, r2
 8007130:	4602      	mov	r2, r0
 8007132:	71fa      	strb	r2, [r7, #7]
 8007134:	460a      	mov	r2, r1
 8007136:	71ba      	strb	r2, [r7, #6]
 8007138:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800713a:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800713e:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8007140:	f04f 0308 	mov.w	r3, #8
 8007144:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8007146:	f000 f951 	bl	80073ec <FLASH_WaitForLastOperation>
 800714a:	4603      	mov	r3, r0
 800714c:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d11a      	bne.n	800718a <FLASH_OB_UserConfig+0x62>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8007154:	f643 4314 	movw	r3, #15380	; 0x3c14
 8007158:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8007166:	f643 4314 	movw	r3, #15380	; 0x3c14
 800716a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800716e:	79b9      	ldrb	r1, [r7, #6]
 8007170:	7bfa      	ldrb	r2, [r7, #15]
 8007172:	ea41 0202 	orr.w	r2, r1, r2
 8007176:	b2d1      	uxtb	r1, r2
 8007178:	797a      	ldrb	r2, [r7, #5]
 800717a:	ea41 0202 	orr.w	r2, r1, r2
 800717e:	b2d1      	uxtb	r1, r2
 8007180:	79fa      	ldrb	r2, [r7, #7]
 8007182:	ea41 0202 	orr.w	r2, r1, r2
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]
  }  
}
 800718a:	f107 0710 	add.w	r7, r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop

08007194 <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800719e:	f643 4314 	movw	r3, #15380	; 0x3c14
 80071a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80071a6:	f643 4214 	movw	r2, #15380	; 0x3c14
 80071aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80071ae:	7812      	ldrb	r2, [r2, #0]
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	f022 020c 	bic.w	r2, r2, #12
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 80071ba:	f643 4314 	movw	r3, #15380	; 0x3c14
 80071be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80071c2:	f643 4214 	movw	r2, #15380	; 0x3c14
 80071c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80071ca:	7812      	ldrb	r2, [r2, #0]
 80071cc:	b2d1      	uxtb	r1, r2
 80071ce:	79fa      	ldrb	r2, [r7, #7]
 80071d0:	ea41 0202 	orr.w	r2, r1, r2
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]

}
 80071d8:	f107 070c 	add.w	r7, r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop

080071e4 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 80071ea:	f04f 0308 	mov.w	r3, #8
 80071ee:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80071f0:	f643 4314 	movw	r3, #15380	; 0x3c14
 80071f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80071f8:	f643 4214 	movw	r2, #15380	; 0x3c14
 80071fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007200:	7812      	ldrb	r2, [r2, #0]
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	f042 0202 	orr.w	r2, r2, #2
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800720c:	f000 f8ee 	bl	80073ec <FLASH_WaitForLastOperation>
 8007210:	4603      	mov	r3, r0
 8007212:	71fb      	strb	r3, [r7, #7]

  return status;
 8007214:	79fb      	ldrb	r3, [r7, #7]
}
 8007216:	4618      	mov	r0, r3
 8007218:	f107 0708 	add.w	r7, r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8007224:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007228:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8007232:	b2db      	uxtb	r3, r3
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8007240:	f643 4316 	movw	r3, #15382	; 0x3c16
 8007244:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
}
 800724c:	4618      	mov	r0, r3
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8007260:	f643 4315 	movw	r3, #15381	; 0x3c15
 8007264:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2baa      	cmp	r3, #170	; 0xaa
 800726e:	d003      	beq.n	8007278 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = SET;
 8007270:	f04f 0301 	mov.w	r3, #1
 8007274:	71fb      	strb	r3, [r7, #7]
 8007276:	e002      	b.n	800727e <FLASH_OB_GetRDP+0x2a>
  }
  else
  {
    readstatus = RESET;
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 800727e:	79fb      	ldrb	r3, [r7, #7]
}
 8007280:	4618      	mov	r0, r3
 8007282:	f107 070c 	add.w	r7, r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8007290:	f643 4314 	movw	r3, #15380	; 0x3c14
 8007294:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 030c 	and.w	r3, r3, #12
 80072a0:	b2db      	uxtb	r3, r3
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop

080072ac <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <FLASH_ITConfig+0x2e>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80072be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80072c6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80072ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80072ce:	6911      	ldr	r1, [r2, #16]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	ea41 0202 	orr.w	r2, r1, r2
 80072d6:	611a      	str	r2, [r3, #16]
 80072d8:	e00e      	b.n	80072f8 <FLASH_ITConfig+0x4c>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 80072da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80072e2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80072e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80072ea:	6911      	ldr	r1, [r2, #16]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	ea6f 0202 	mvn.w	r2, r2
 80072f2:	ea01 0202 	and.w	r2, r1, r2
 80072f6:	611a      	str	r2, [r3, #16]
  }
}
 80072f8:	f107 070c 	add.w	r7, r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8007312:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007316:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	ea02 0303 	and.w	r3, r2, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <FLASH_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8007326:	f04f 0301 	mov.w	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
 800732c:	e002      	b.n	8007334 <FLASH_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8007334:	7bfb      	ldrb	r3, [r7, #15]
}
 8007336:	4618      	mov	r0, r3
 8007338:	f107 0714 	add.w	r7, r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop

08007344 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800734c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007350:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	60da      	str	r2, [r3, #12]
}
 8007358:	f107 070c 	add.w	r7, r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop

08007364 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800736a:	f04f 0308 	mov.w	r3, #8
 800736e:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8007370:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007374:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
 8007382:	f04f 0301 	mov.w	r3, #1
 8007386:	71fb      	strb	r3, [r7, #7]
 8007388:	e029      	b.n	80073de <FLASH_GetStatus+0x7a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800738a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800738e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <FLASH_GetStatus+0x40>
    { 
      flashstatus = FLASH_ERROR_WRP;
 800739c:	f04f 0305 	mov.w	r3, #5
 80073a0:	71fb      	strb	r3, [r7, #7]
 80073a2:	e01c      	b.n	80073de <FLASH_GetStatus+0x7a>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 80073a4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80073a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <FLASH_GetStatus+0x5a>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 80073b6:	f04f 0306 	mov.w	r3, #6
 80073ba:	71fb      	strb	r3, [r7, #7]
 80073bc:	e00f      	b.n	80073de <FLASH_GetStatus+0x7a>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80073be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80073c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <FLASH_GetStatus+0x74>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 80073d0:	f04f 0307 	mov.w	r3, #7
 80073d4:	71fb      	strb	r3, [r7, #7]
 80073d6:	e002      	b.n	80073de <FLASH_GetStatus+0x7a>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 80073d8:	f04f 0308 	mov.w	r3, #8
 80073dc:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80073de:	79fb      	ldrb	r3, [r7, #7]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	f107 070c 	add.w	r7, r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr

080073ec <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 80073f2:	f04f 0308 	mov.w	r3, #8
 80073f6:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80073f8:	f7ff ffb4 	bl	8007364 <FLASH_GetStatus>
 80073fc:	4603      	mov	r3, r0
 80073fe:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8007400:	e003      	b.n	800740a <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
 8007402:	f7ff ffaf 	bl	8007364 <FLASH_GetStatus>
 8007406:	4603      	mov	r3, r0
 8007408:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b01      	cmp	r3, #1
 8007410:	d0f7      	beq.n	8007402 <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	b2db      	uxtb	r3, r3
}
 8007416:	4618      	mov	r0, r3
 8007418:	f107 0708 	add.w	r7, r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 800742e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	f243 01db 	movw	r1, #12507	; 0x30db
 8007438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800743c:	e006      	b.n	800744c <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 800743e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8007448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 800744c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	f102 0201 	add.w	r2, r2, #1
 8007456:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800745a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 800745e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007462:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800746c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007470:	f107 070c 	add.w	r7, r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop

0800747c <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8007484:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800748c:	6879      	ldr	r1, [r7, #4]
 800748e:	6848      	ldr	r0, [r1, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8007494:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800749c:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	6909      	ldr	r1, [r1, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 80074a4:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	6949      	ldr	r1, [r1, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 80074ac:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	6989      	ldr	r1, [r1, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 80074b4:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 80074bc:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	6a09      	ldr	r1, [r1, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 80074c4:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 80074cc:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 80074d4:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 80074dc:	ea40 0001 	orr.w	r0, r0, r1
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 80074e4:	ea40 0101 	orr.w	r1, r0, r1
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80074e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d10d      	bne.n	8007510 <FSMC_NORSRAMInit+0x94>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 80074f4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	6800      	ldr	r0, [r0, #0]
 8007504:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007508:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800750c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8007510:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	f102 0201 	add.w	r2, r2, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007520:	6808      	ldr	r0, [r1, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007526:	6849      	ldr	r1, [r1, #4]
 8007528:	ea4f 1101 	mov.w	r1, r1, lsl #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 800752c:	ea40 0001 	orr.w	r0, r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007534:	6889      	ldr	r1, [r1, #8]
 8007536:	ea4f 2101 	mov.w	r1, r1, lsl #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 800753a:	ea40 0001 	orr.w	r0, r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007542:	68c9      	ldr	r1, [r1, #12]
 8007544:	ea4f 4101 	mov.w	r1, r1, lsl #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8007548:	ea40 0001 	orr.w	r0, r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007550:	6909      	ldr	r1, [r1, #16]
 8007552:	ea4f 5101 	mov.w	r1, r1, lsl #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8007556:	ea40 0001 	orr.w	r0, r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800755e:	6949      	ldr	r1, [r1, #20]
 8007560:	ea4f 6101 	mov.w	r1, r1, lsl #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8007564:	ea40 0001 	orr.w	r0, r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800756c:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800756e:	ea40 0101 	orr.w	r1, r0, r1
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8007572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800757e:	d12c      	bne.n	80075da <FSMC_NORSRAMInit+0x15e>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8007580:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007584:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6812      	ldr	r2, [r2, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8007590:	6808      	ldr	r0, [r1, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8007596:	6849      	ldr	r1, [r1, #4]
 8007598:	ea4f 1101 	mov.w	r1, r1, lsl #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800759c:	ea40 0001 	orr.w	r0, r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 80075a0:	6879      	ldr	r1, [r7, #4]
 80075a2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80075a4:	6889      	ldr	r1, [r1, #8]
 80075a6:	ea4f 2101 	mov.w	r1, r1, lsl #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 80075aa:	ea40 0001 	orr.w	r0, r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80075b2:	6909      	ldr	r1, [r1, #16]
 80075b4:	ea4f 5101 	mov.w	r1, r1, lsl #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 80075b8:	ea40 0001 	orr.w	r0, r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80075c0:	6949      	ldr	r1, [r1, #20]
 80075c2:	ea4f 6101 	mov.w	r1, r1, lsl #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 80075c6:	ea40 0001 	orr.w	r0, r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80075ce:	6989      	ldr	r1, [r1, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 80075d0:	ea40 0101 	orr.w	r1, r0, r1
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80075d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80075d8:	e009      	b.n	80075ee <FSMC_NORSRAMInit+0x172>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 80075da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80075de:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80075ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 80075ee:	f107 070c 	add.w	r7, r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr

080075f8 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f04f 0202 	mov.w	r2, #2
 800760e:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800764e:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007656:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766c:	f04f 020f 	mov.w	r2, #15
 8007670:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	f04f 020f 	mov.w	r2, #15
 800767a:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8007684:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768a:	f04f 020f 	mov.w	r2, #15
 800768e:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007694:	f04f 020f 	mov.w	r2, #15
 8007698:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769e:	f04f 020f 	mov.w	r2, #15
 80076a2:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a8:	f04f 0200 	mov.w	r2, #0
 80076ac:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	f04f 020f 	mov.w	r2, #15
 80076b6:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	f04f 020f 	mov.w	r2, #15
 80076c0:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80076ca:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	f04f 020f 	mov.w	r2, #15
 80076d4:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	f04f 020f 	mov.w	r2, #15
 80076de:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	f04f 020f 	mov.w	r2, #15
 80076e8:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	619a      	str	r2, [r3, #24]
}
 80076f4:	f107 070c 	add.w	r7, r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop

08007700 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00c      	beq.n	800772c <FSMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 8007712:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8007716:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007720:	f042 0101 	orr.w	r1, r2, #1
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800772a:	e00f      	b.n	800774c <FSMC_NORSRAMCmd+0x4c>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 800772c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8007730:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800773a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800773e:	f2c0 030f 	movt	r3, #15
 8007742:	ea01 0303 	and.w	r3, r1, r3
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 800774c:	f107 070c 	add.w	r7, r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop

08007758 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b10      	cmp	r3, #16
 8007764:	d11c      	bne.n	80077a0 <FSMC_NANDDeInit+0x48>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8007766:	f04f 0360 	mov.w	r3, #96	; 0x60
 800776a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800776e:	f04f 0218 	mov.w	r2, #24
 8007772:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 8007774:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007778:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800777c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007780:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 8007782:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007786:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800778a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800778e:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8007790:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007794:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007798:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	e01b      	b.n	80077d8 <FSMC_NANDDeInit+0x80>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 80077a0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077a4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80077a8:	f04f 0218 	mov.w	r2, #24
 80077ac:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 80077ae:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077b2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80077b6:	f04f 0240 	mov.w	r2, #64	; 0x40
 80077ba:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 80077bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077c0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80077c4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80077c8:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 80077ca:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077ce:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80077d2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80077d6:	60da      	str	r2, [r3, #12]
  }  
}
 80077d8:	f107 070c 	add.w	r7, r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop

080077e4 <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	f04f 0300 	mov.w	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8007806:	ea42 0203 	orr.w	r2, r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 800780e:	ea42 0203 	orr.w	r2, r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8007816:	ea42 0203 	orr.w	r2, r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	ea4f 2343 	mov.w	r3, r3, lsl #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8007822:	ea42 0203 	orr.w	r2, r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	ea4f 3343 	mov.w	r3, r3, lsl #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 800782e:	ea42 0303 	orr.w	r3, r2, r3
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8007832:	f043 0308 	orr.w	r3, r3, #8
 8007836:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	ea4f 2303 	mov.w	r3, r3, lsl #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007848:	ea42 0203 	orr.w	r2, r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007856:	ea42 0203 	orr.w	r2, r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	ea4f 6303 	mov.w	r3, r3, lsl #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007864:	ea42 0303 	orr.w	r3, r2, r3
 8007868:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	ea4f 2303 	mov.w	r3, r3, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800787a:	ea42 0203 	orr.w	r2, r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007888:	ea42 0203 	orr.w	r2, r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	ea4f 6303 	mov.w	r3, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007896:	ea42 0303 	orr.w	r3, r2, r3
 800789a:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b10      	cmp	r3, #16
 80078a2:	d112      	bne.n	80078ca <FSMC_NANDInit+0xe6>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 80078a4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80078a8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 80078b0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80078b4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 80078bc:	f04f 0360 	mov.w	r3, #96	; 0x60
 80078c0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	60da      	str	r2, [r3, #12]
 80078c8:	e011      	b.n	80078ee <FSMC_NANDInit+0x10a>
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 80078ca:	f04f 0380 	mov.w	r3, #128	; 0x80
 80078ce:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 80078d6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80078da:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 80078e2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80078e6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	60da      	str	r2, [r3, #12]
  }
}
 80078ee:	f107 071c 	add.w	r7, r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr

080078f8 <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f04f 0210 	mov.w	r2, #16
 8007906:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f04f 0200 	mov.w	r2, #0
 8007926:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007940:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800794a:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007954:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800795e:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007968:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007972:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800797c:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007986:	60da      	str	r2, [r3, #12]
}
 8007988:	f107 070c 	add.w	r7, r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop

08007994 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01c      	beq.n	80079e0 <FSMC_NANDCmd+0x4c>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b10      	cmp	r3, #16
 80079aa:	d10c      	bne.n	80079c6 <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 80079ac:	f04f 0360 	mov.w	r3, #96	; 0x60
 80079b0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80079b4:	f04f 0260 	mov.w	r2, #96	; 0x60
 80079b8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	f042 0204 	orr.w	r2, r2, #4
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e030      	b.n	8007a28 <FSMC_NANDCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 80079c6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80079ca:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80079ce:	f04f 0280 	mov.w	r2, #128	; 0x80
 80079d2:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	f042 0204 	orr.w	r2, r2, #4
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e023      	b.n	8007a28 <FSMC_NANDCmd+0x94>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b10      	cmp	r3, #16
 80079e4:	d110      	bne.n	8007a08 <FSMC_NANDCmd+0x74>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 80079e6:	f04f 0260 	mov.w	r2, #96	; 0x60
 80079ea:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80079ee:	f04f 0360 	mov.w	r3, #96	; 0x60
 80079f2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80079f6:	6819      	ldr	r1, [r3, #0]
 80079f8:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80079fc:	f2c0 030f 	movt	r3, #15
 8007a00:	ea01 0303 	and.w	r3, r1, r3
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	e00f      	b.n	8007a28 <FSMC_NANDCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8007a08:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007a0c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007a10:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007a14:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8007a1e:	f2c0 030f 	movt	r3, #15
 8007a22:	ea01 0303 	and.w	r3, r1, r3
 8007a26:	6013      	str	r3, [r2, #0]
    }
  }
}
 8007a28:	f107 070c 	add.w	r7, r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop

08007a34 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d01c      	beq.n	8007a80 <FSMC_NANDECCCmd+0x4c>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d10c      	bne.n	8007a66 <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8007a4c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007a50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007a54:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007a58:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007a5c:	6812      	ldr	r2, [r2, #0]
 8007a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e030      	b.n	8007ac8 <FSMC_NANDECCCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8007a66:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007a6a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007a6e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007a72:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	e023      	b.n	8007ac8 <FSMC_NANDECCCmd+0x94>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b10      	cmp	r3, #16
 8007a84:	d110      	bne.n	8007aa8 <FSMC_NANDECCCmd+0x74>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8007a86:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007a8a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007a8e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007a92:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007a96:	6819      	ldr	r1, [r3, #0]
 8007a98:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8007a9c:	f2c0 030f 	movt	r3, #15
 8007aa0:	ea01 0303 	and.w	r3, r1, r3
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	e00f      	b.n	8007ac8 <FSMC_NANDECCCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8007aa8:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007aac:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007ab0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007ab4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007ab8:	6819      	ldr	r1, [r3, #0]
 8007aba:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8007abe:	f2c0 030f 	movt	r3, #15
 8007ac2:	ea01 0303 	and.w	r3, r1, r3
 8007ac6:	6013      	str	r3, [r2, #0]
    }
  }
}
 8007ac8:	f107 070c 	add.w	r7, r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bc80      	pop	{r7}
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop

08007ad4 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8007adc:	f04f 0300 	mov.w	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d106      	bne.n	8007af6 <FSMC_GetECC+0x22>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8007ae8:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007aec:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e005      	b.n	8007b02 <FSMC_GetECC+0x2e>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8007af6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007afa:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8007b02:	68fb      	ldr	r3, [r7, #12]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	f107 0714 	add.w	r7, r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr

08007b10 <FSMC_PCCARDDeInit>:
  * @brief  Deinitializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8007b14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007b18:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007b1c:	f04f 0218 	mov.w	r2, #24
 8007b20:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8007b22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007b26:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8007b30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007b34:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007b38:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007b3c:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8007b3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007b42:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007b46:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007b4a:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8007b4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007b50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007b54:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007b58:	611a      	str	r2, [r3, #16]
}
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr

08007b60 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8007b68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007b6c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6811      	ldr	r1, [r2, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6852      	ldr	r2, [r2, #4]
 8007b78:	ea4f 2242 	mov.w	r2, r2, lsl #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8007b7c:	ea41 0102 	orr.w	r1, r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6892      	ldr	r2, [r2, #8]
 8007b84:	ea4f 3242 	mov.w	r2, r2, lsl #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8007b88:	ea41 0202 	orr.w	r2, r1, r2
 8007b8c:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8007b90:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007b92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007b96:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	68d2      	ldr	r2, [r2, #12]
 8007b9e:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	68d2      	ldr	r2, [r2, #12]
 8007ba4:	6852      	ldr	r2, [r2, #4]
 8007ba6:	ea4f 2202 	mov.w	r2, r2, lsl #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007baa:	ea41 0102 	orr.w	r1, r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	68d2      	ldr	r2, [r2, #12]
 8007bb2:	6892      	ldr	r2, [r2, #8]
 8007bb4:	ea4f 4202 	mov.w	r2, r2, lsl #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007bb8:	ea41 0102 	orr.w	r1, r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68d2      	ldr	r2, [r2, #12]
 8007bc0:	68d2      	ldr	r2, [r2, #12]
 8007bc2:	ea4f 6202 	mov.w	r2, r2, lsl #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007bc6:	ea41 0202 	orr.w	r2, r1, r2
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007bca:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007bcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007bd0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6912      	ldr	r2, [r2, #16]
 8007bd8:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6912      	ldr	r2, [r2, #16]
 8007bde:	6852      	ldr	r2, [r2, #4]
 8007be0:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007be4:	ea41 0102 	orr.w	r1, r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6912      	ldr	r2, [r2, #16]
 8007bec:	6892      	ldr	r2, [r2, #8]
 8007bee:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007bf2:	ea41 0102 	orr.w	r1, r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6912      	ldr	r2, [r2, #16]
 8007bfa:	68d2      	ldr	r2, [r2, #12]
 8007bfc:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007c00:	ea41 0202 	orr.w	r2, r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007c04:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8007c06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007c0a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6952      	ldr	r2, [r2, #20]
 8007c12:	6811      	ldr	r1, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6952      	ldr	r2, [r2, #20]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8007c1e:	ea41 0102 	orr.w	r1, r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6952      	ldr	r2, [r2, #20]
 8007c26:	6892      	ldr	r2, [r2, #8]
 8007c28:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007c2c:	ea41 0102 	orr.w	r1, r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6952      	ldr	r2, [r2, #20]
 8007c34:	68d2      	ldr	r2, [r2, #12]
 8007c36:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007c3a:	ea41 0202 	orr.w	r2, r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8007c3e:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 8007c40:	f107 070c 	add.w	r7, r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop

08007c4c <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007c74:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007c7e:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007c88:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007c92:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007c9c:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007ca6:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007cb0:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007cba:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007cc4:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007cce:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007cd8:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007ce2:	60da      	str	r2, [r3, #12]
}
 8007ce4:	f107 070c 	add.w	r7, r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop

08007cf0 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00c      	beq.n	8007d1a <FSMC_PCCARDCmd+0x2a>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8007d00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007d04:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007d08:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007d0c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	f042 0204 	orr.w	r2, r2, #4
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	e00f      	b.n	8007d3a <FSMC_PCCARDCmd+0x4a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8007d1a:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007d1e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007d22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007d26:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007d2a:	6819      	ldr	r1, [r3, #0]
 8007d2c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8007d30:	f2c0 030f 	movt	r3, #15
 8007d34:	ea01 0303 	and.w	r3, r1, r3
 8007d38:	6013      	str	r3, [r2, #0]
  }
}
 8007d3a:	f107 070c 	add.w	r7, r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr

08007d44 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d030      	beq.n	8007dba <FSMC_ITConfig+0x76>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b10      	cmp	r3, #16
 8007d5c:	d10d      	bne.n	8007d7a <FSMC_ITConfig+0x36>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8007d5e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007d62:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007d66:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007d6a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007d6e:	6851      	ldr	r1, [r2, #4]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	ea41 0202 	orr.w	r2, r1, r2
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	e055      	b.n	8007e26 <FSMC_ITConfig+0xe2>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d80:	d10d      	bne.n	8007d9e <FSMC_ITConfig+0x5a>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8007d82:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007d86:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007d8a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007d8e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007d92:	6851      	ldr	r1, [r2, #4]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	ea41 0202 	orr.w	r2, r1, r2
 8007d9a:	605a      	str	r2, [r3, #4]
 8007d9c:	e043      	b.n	8007e26 <FSMC_ITConfig+0xe2>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8007d9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007da2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007da6:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007daa:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007dae:	6851      	ldr	r1, [r2, #4]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	ea41 0202 	orr.w	r2, r1, r2
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	e035      	b.n	8007e26 <FSMC_ITConfig+0xe2>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d10f      	bne.n	8007de0 <FSMC_ITConfig+0x9c>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8007dc0:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007dc4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007dc8:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007dcc:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007dd0:	6851      	ldr	r1, [r2, #4]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	ea6f 0202 	mvn.w	r2, r2
 8007dd8:	ea01 0202 	and.w	r2, r1, r2
 8007ddc:	605a      	str	r2, [r3, #4]
 8007dde:	e022      	b.n	8007e26 <FSMC_ITConfig+0xe2>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de6:	d10f      	bne.n	8007e08 <FSMC_ITConfig+0xc4>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8007de8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007dec:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007df0:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007df4:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007df8:	6851      	ldr	r1, [r2, #4]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	ea6f 0202 	mvn.w	r2, r2
 8007e00:	ea01 0202 	and.w	r2, r1, r2
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	e00e      	b.n	8007e26 <FSMC_ITConfig+0xe2>
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8007e08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007e0c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007e10:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007e14:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007e18:	6851      	ldr	r1, [r2, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	ea6f 0202 	mvn.w	r2, r2
 8007e20:	ea01 0202 	and.w	r2, r1, r2
 8007e24:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007e26:	f107 0714 	add.w	r7, r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr

08007e30 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d106      	bne.n	8007e5a <FSMC_GetFlagStatus+0x2a>
  {
    tmpsr = FSMC_Bank2->SR2;
 8007e4c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007e50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	60bb      	str	r3, [r7, #8]
 8007e58:	e010      	b.n	8007e7c <FSMC_GetFlagStatus+0x4c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e60:	d106      	bne.n	8007e70 <FSMC_GetFlagStatus+0x40>
  {
    tmpsr = FSMC_Bank3->SR3;
 8007e62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007e66:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	60bb      	str	r3, [r7, #8]
 8007e6e:	e005      	b.n	8007e7c <FSMC_GetFlagStatus+0x4c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8007e70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007e74:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	ea02 0303 	and.w	r3, r2, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <FSMC_GetFlagStatus+0x60>
  {
    bitstatus = SET;
 8007e88:	f04f 0301 	mov.w	r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]
 8007e8e:	e002      	b.n	8007e96 <FSMC_GetFlagStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
 8007e90:	f04f 0300 	mov.w	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f107 0714 	add.w	r7, r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr

08007ea4 <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b10      	cmp	r3, #16
 8007eb2:	d10f      	bne.n	8007ed4 <FSMC_ClearFlag+0x30>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 8007eb4:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007eb8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007ebc:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007ec0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007ec4:	6851      	ldr	r1, [r2, #4]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	ea6f 0202 	mvn.w	r2, r2
 8007ecc:	ea01 0202 	and.w	r2, r1, r2
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	e022      	b.n	8007f1a <FSMC_ClearFlag+0x76>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eda:	d10f      	bne.n	8007efc <FSMC_ClearFlag+0x58>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8007edc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007ee0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007ee4:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007ee8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007eec:	6851      	ldr	r1, [r2, #4]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	ea6f 0202 	mvn.w	r2, r2
 8007ef4:	ea01 0202 	and.w	r2, r1, r2
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	e00e      	b.n	8007f1a <FSMC_ClearFlag+0x76>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8007efc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007f00:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007f04:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007f08:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007f0c:	6851      	ldr	r1, [r2, #4]
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	ea6f 0202 	mvn.w	r2, r2
 8007f14:	ea01 0202 	and.w	r2, r1, r2
 8007f18:	605a      	str	r2, [r3, #4]
  }
}
 8007f1a:	f107 070c 	add.w	r7, r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr

08007f24 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 8007f34:	f04f 0300 	mov.w	r3, #0
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d106      	bne.n	8007f5a <FSMC_GetITStatus+0x36>
  {
    tmpsr = FSMC_Bank2->SR2;
 8007f4c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007f50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	613b      	str	r3, [r7, #16]
 8007f58:	e010      	b.n	8007f7c <FSMC_GetITStatus+0x58>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f60:	d106      	bne.n	8007f70 <FSMC_GetITStatus+0x4c>
  {
    tmpsr = FSMC_Bank3->SR3;
 8007f62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007f66:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	e005      	b.n	8007f7c <FSMC_GetITStatus+0x58>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8007f70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007f74:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	ea02 0303 	and.w	r3, r2, r3
 8007f84:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	ea02 0303 	and.w	r3, r2, r3
 8007f92:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <FSMC_GetITStatus+0x84>
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <FSMC_GetITStatus+0x84>
  {
    bitstatus = SET;
 8007fa0:	f04f 0301 	mov.w	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
 8007fa6:	e002      	b.n	8007fae <FSMC_GetITStatus+0x8a>
  }
  else
  {
    bitstatus = RESET;
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f107 071c 	add.w	r7, r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr

08007fbc <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d111      	bne.n	8007ff0 <FSMC_ClearITPendingBit+0x34>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 8007fcc:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007fd0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007fd4:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007fd8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007fdc:	6851      	ldr	r1, [r2, #4]
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8007fe4:	ea6f 0202 	mvn.w	r2, r2
 8007fe8:	ea01 0202 	and.w	r2, r1, r2
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	e026      	b.n	800803e <FSMC_ClearITPendingBit+0x82>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff6:	d111      	bne.n	800801c <FSMC_ClearITPendingBit+0x60>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8007ff8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007ffc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008000:	f04f 0280 	mov.w	r2, #128	; 0x80
 8008004:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8008008:	6851      	ldr	r1, [r2, #4]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8008010:	ea6f 0202 	mvn.w	r2, r2
 8008014:	ea01 0202 	and.w	r2, r1, r2
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	e010      	b.n	800803e <FSMC_ClearITPendingBit+0x82>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 800801c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008020:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008024:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8008028:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800802c:	6851      	ldr	r1, [r2, #4]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8008034:	ea6f 0202 	mvn.w	r2, r2
 8008038:	ea01 0202 	and.w	r2, r1, r2
 800803c:	605a      	str	r2, [r3, #4]
  }
}
 800803e:	f107 070c 	add.w	r7, r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800805a:	429a      	cmp	r2, r3
 800805c:	d10c      	bne.n	8008078 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800805e:	f04f 0001 	mov.w	r0, #1
 8008062:	f04f 0101 	mov.w	r1, #1
 8008066:	f002 fbe3 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800806a:	f04f 0001 	mov.w	r0, #1
 800806e:	f04f 0100 	mov.w	r1, #0
 8008072:	f002 fbdd 	bl	800a830 <RCC_AHB1PeriphResetCmd>
 8008076:	e09e      	b.n	80081b6 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800807e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008082:	429a      	cmp	r2, r3
 8008084:	d10c      	bne.n	80080a0 <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8008086:	f04f 0002 	mov.w	r0, #2
 800808a:	f04f 0101 	mov.w	r1, #1
 800808e:	f002 fbcf 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8008092:	f04f 0002 	mov.w	r0, #2
 8008096:	f04f 0100 	mov.w	r1, #0
 800809a:	f002 fbc9 	bl	800a830 <RCC_AHB1PeriphResetCmd>
 800809e:	e08a      	b.n	80081b6 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d10c      	bne.n	80080c8 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80080ae:	f04f 0004 	mov.w	r0, #4
 80080b2:	f04f 0101 	mov.w	r1, #1
 80080b6:	f002 fbbb 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80080ba:	f04f 0004 	mov.w	r0, #4
 80080be:	f04f 0100 	mov.w	r1, #0
 80080c2:	f002 fbb5 	bl	800a830 <RCC_AHB1PeriphResetCmd>
 80080c6:	e076      	b.n	80081b6 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80080ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d10c      	bne.n	80080f0 <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80080d6:	f04f 0008 	mov.w	r0, #8
 80080da:	f04f 0101 	mov.w	r1, #1
 80080de:	f002 fba7 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80080e2:	f04f 0008 	mov.w	r0, #8
 80080e6:	f04f 0100 	mov.w	r1, #0
 80080ea:	f002 fba1 	bl	800a830 <RCC_AHB1PeriphResetCmd>
 80080ee:	e062      	b.n	80081b6 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d10c      	bne.n	8008118 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80080fe:	f04f 0010 	mov.w	r0, #16
 8008102:	f04f 0101 	mov.w	r1, #1
 8008106:	f002 fb93 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800810a:	f04f 0010 	mov.w	r0, #16
 800810e:	f04f 0100 	mov.w	r1, #0
 8008112:	f002 fb8d 	bl	800a830 <RCC_AHB1PeriphResetCmd>
 8008116:	e04e      	b.n	80081b6 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800811e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008122:	429a      	cmp	r2, r3
 8008124:	d10c      	bne.n	8008140 <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8008126:	f04f 0020 	mov.w	r0, #32
 800812a:	f04f 0101 	mov.w	r1, #1
 800812e:	f002 fb7f 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8008132:	f04f 0020 	mov.w	r0, #32
 8008136:	f04f 0100 	mov.w	r1, #0
 800813a:	f002 fb79 	bl	800a830 <RCC_AHB1PeriphResetCmd>
 800813e:	e03a      	b.n	80081b6 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008146:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800814a:	429a      	cmp	r2, r3
 800814c:	d10c      	bne.n	8008168 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800814e:	f04f 0040 	mov.w	r0, #64	; 0x40
 8008152:	f04f 0101 	mov.w	r1, #1
 8008156:	f002 fb6b 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800815a:	f04f 0040 	mov.w	r0, #64	; 0x40
 800815e:	f04f 0100 	mov.w	r1, #0
 8008162:	f002 fb65 	bl	800a830 <RCC_AHB1PeriphResetCmd>
 8008166:	e026      	b.n	80081b6 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800816e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008172:	429a      	cmp	r2, r3
 8008174:	d10c      	bne.n	8008190 <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8008176:	f04f 0080 	mov.w	r0, #128	; 0x80
 800817a:	f04f 0101 	mov.w	r1, #1
 800817e:	f002 fb57 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8008182:	f04f 0080 	mov.w	r0, #128	; 0x80
 8008186:	f04f 0100 	mov.w	r1, #0
 800818a:	f002 fb51 	bl	800a830 <RCC_AHB1PeriphResetCmd>
 800818e:	e012      	b.n	80081b6 <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008196:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800819a:	429a      	cmp	r2, r3
 800819c:	d10b      	bne.n	80081b6 <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800819e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80081a2:	f04f 0101 	mov.w	r1, #1
 80081a6:	f002 fb43 	bl	800a830 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80081aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80081ae:	f04f 0100 	mov.w	r1, #0
 80081b2:	f002 fb3d 	bl	800a830 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 80081b6:	f107 0708 	add.w	r7, r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop

080081c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	e08f      	b.n	8008304 <GPIO_Init+0x144>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f04f 0201 	mov.w	r2, #1
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	ea02 0303 	and.w	r3, r2, r3
 80081fa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	429a      	cmp	r2, r3
 8008202:	d17b      	bne.n	80082fc <GPIO_Init+0x13c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800820e:	f04f 0103 	mov.w	r1, #3
 8008212:	fa01 f303 	lsl.w	r3, r1, r3
 8008216:	ea6f 0303 	mvn.w	r3, r3
 800821a:	ea02 0203 	and.w	r2, r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	791b      	ldrb	r3, [r3, #4]
 800822a:	4619      	mov	r1, r3
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008232:	fa01 f303 	lsl.w	r3, r1, r3
 8008236:	ea42 0203 	orr.w	r2, r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	791b      	ldrb	r3, [r3, #4]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d003      	beq.n	800824e <GPIO_Init+0x8e>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	791b      	ldrb	r3, [r3, #4]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d138      	bne.n	80082c0 <GPIO_Init+0x100>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008258:	f04f 0103 	mov.w	r1, #3
 800825c:	fa01 f303 	lsl.w	r3, r1, r3
 8008260:	ea6f 0303 	mvn.w	r3, r3
 8008264:	ea02 0203 	and.w	r2, r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	795b      	ldrb	r3, [r3, #5]
 8008274:	4619      	mov	r1, r3
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800827c:	fa01 f303 	lsl.w	r3, r1, r3
 8008280:	ea42 0203 	orr.w	r2, r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f04f 0101 	mov.w	r1, #1
 8008294:	fa01 f303 	lsl.w	r3, r1, r3
 8008298:	ea6f 0303 	mvn.w	r3, r3
 800829c:	ea02 0203 	and.w	r2, r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	799b      	ldrb	r3, [r3, #6]
 80082ac:	4619      	mov	r1, r3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	fa01 f303 	lsl.w	r3, r1, r3
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	ea42 0203 	orr.w	r2, r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082cc:	f04f 0103 	mov.w	r1, #3
 80082d0:	fa01 f303 	lsl.w	r3, r1, r3
 80082d4:	ea6f 0303 	mvn.w	r3, r3
 80082d8:	ea02 0203 	and.w	r2, r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	79db      	ldrb	r3, [r3, #7]
 80082e8:	4619      	mov	r1, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082f0:	fa01 f303 	lsl.w	r3, r1, r3
 80082f4:	ea42 0203 	orr.w	r2, r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f103 0301 	add.w	r3, r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b0f      	cmp	r3, #15
 8008308:	f67f af6c 	bls.w	80081e4 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800830c:	f107 071c 	add.w	r7, r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop

08008318 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f04f 0200 	mov.w	r2, #0
 800832e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f04f 0200 	mov.w	r2, #0
 8008336:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	71da      	strb	r2, [r3, #7]
}
 8008348:	f107 070c 	add.w	r7, r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop

08008354 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8008360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008364:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8008366:	887a      	ldrh	r2, [r7, #2]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	ea42 0303 	orr.w	r3, r2, r3
 800836e:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8008376:	887a      	ldrh	r2, [r7, #2]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	60fb      	str	r3, [r7, #12]
}
 800838e:	f107 0714 	add.w	r7, r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr

08008398 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80083a4:	f04f 0300 	mov.w	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	887b      	ldrh	r3, [r7, #2]
 80083b0:	ea02 0303 	and.w	r3, r2, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 80083b8:	f04f 0301 	mov.w	r3, #1
 80083bc:	73fb      	strb	r3, [r7, #15]
 80083be:	e002      	b.n	80083c6 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80083c0:	f04f 0300 	mov.w	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	f107 0714 	add.w	r7, r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	b29b      	uxth	r3, r3
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	f107 070c 	add.w	r7, r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop

080083f0 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	695a      	ldr	r2, [r3, #20]
 8008406:	887b      	ldrh	r3, [r7, #2]
 8008408:	ea02 0303 	and.w	r3, r2, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8008410:	f04f 0301 	mov.w	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
 8008416:	e002      	b.n	800841e <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008420:	4618      	mov	r0, r3
 8008422:	f107 0714 	add.w	r7, r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr

0800842c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	b29b      	uxth	r3, r3
}
 800843a:	4618      	mov	r0, r3
 800843c:	f107 070c 	add.w	r7, r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop

08008448 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	887a      	ldrh	r2, [r7, #2]
 8008458:	831a      	strh	r2, [r3, #24]
}
 800845a:	f107 070c 	add.w	r7, r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	887a      	ldrh	r2, [r7, #2]
 8008474:	835a      	strh	r2, [r3, #26]
}
 8008476:	f107 070c 	add.w	r7, r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr

08008480 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	4613      	mov	r3, r2
 800848a:	460a      	mov	r2, r1
 800848c:	807a      	strh	r2, [r7, #2]
 800848e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8008490:	787b      	ldrb	r3, [r7, #1]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	887a      	ldrh	r2, [r7, #2]
 800849a:	831a      	strh	r2, [r3, #24]
 800849c:	e002      	b.n	80084a4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	887a      	ldrh	r2, [r7, #2]
 80084a2:	835a      	strh	r2, [r3, #26]
  }
}
 80084a4:	f107 070c 	add.w	r7, r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bc80      	pop	{r7}
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop

080084b0 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80084bc:	887a      	ldrh	r2, [r7, #2]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	615a      	str	r2, [r3, #20]
}
 80084c2:	f107 070c 	add.w	r7, r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr

080084cc <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	695a      	ldr	r2, [r3, #20]
 80084dc:	887b      	ldrh	r3, [r7, #2]
 80084de:	ea82 0203 	eor.w	r2, r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	615a      	str	r2, [r3, #20]
}
 80084e6:	f107 070c 	add.w	r7, r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr

080084f0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	460a      	mov	r2, r1
 80084fc:	807a      	strh	r2, [r7, #2]
 80084fe:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8008506:	f04f 0300 	mov.w	r3, #0
 800850a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800850c:	787a      	ldrb	r2, [r7, #1]
 800850e:	887b      	ldrh	r3, [r7, #2]
 8008510:	f003 0307 	and.w	r3, r3, #7
 8008514:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008518:	fa02 f303 	lsl.w	r3, r2, r3
 800851c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800851e:	887b      	ldrh	r3, [r7, #2]
 8008520:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8008524:	b29b      	uxth	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	887b      	ldrh	r3, [r7, #2]
 800852a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800852e:	b29b      	uxth	r3, r3
 8008530:	4619      	mov	r1, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f101 0108 	add.w	r1, r1, #8
 8008538:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800853c:	887b      	ldrh	r3, [r7, #2]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008546:	f04f 000f 	mov.w	r0, #15
 800854a:	fa00 f303 	lsl.w	r3, r0, r3
 800854e:	ea6f 0303 	mvn.w	r3, r3
 8008552:	ea01 0103 	and.w	r1, r1, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f102 0208 	add.w	r2, r2, #8
 800855c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8008560:	887b      	ldrh	r3, [r7, #2]
 8008562:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8008566:	b29b      	uxth	r3, r3
 8008568:	461a      	mov	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f102 0208 	add.w	r2, r2, #8
 8008570:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	ea42 0303 	orr.w	r3, r2, r3
 800857a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800857c:	887b      	ldrh	r3, [r7, #2]
 800857e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f102 0208 	add.w	r2, r2, #8
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8008592:	f107 0714 	add.w	r7, r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	bc80      	pop	{r7}
 800859a:	4770      	bx	lr

0800859c <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 80085a0:	f04f 0020 	mov.w	r0, #32
 80085a4:	f04f 0101 	mov.w	r1, #1
 80085a8:	f002 f96e 	bl	800a888 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 80085ac:	f04f 0020 	mov.w	r0, #32
 80085b0:	f04f 0100 	mov.w	r1, #0
 80085b4:	f002 f968 	bl	800a888 <RCC_AHB2PeriphResetCmd>
}
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 80085c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80085cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085d0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085da:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 80085dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80085e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085e8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80085ec:	6811      	ldr	r1, [r2, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 80085f6:	ea40 0002 	orr.w	r0, r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 80085fe:	ea40 0202 	orr.w	r2, r0, r2
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8008602:	ea41 0202 	orr.w	r2, r1, r2
 8008606:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	d119      	bne.n	8008644 <HASH_Init+0x88>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8008610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008614:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800861c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008626:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8008628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800862c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008634:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008638:	6811      	ldr	r1, [r2, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68d2      	ldr	r2, [r2, #12]
 800863e:	ea41 0202 	orr.w	r2, r1, r2
 8008642:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8008644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008648:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800864c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008650:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	f042 0204 	orr.w	r2, r2, #4
 800865a:	601a      	str	r2, [r3, #0]
}
 800865c:	f107 070c 	add.w	r7, r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop

08008668 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f04f 0200 	mov.w	r2, #0
 8008676:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f04f 0200 	mov.w	r2, #0
 8008686:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	60da      	str	r2, [r3, #12]
}
 8008690:	f107 070c 	add.w	r7, r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	bc80      	pop	{r7}
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop

0800869c <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 80086a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80086a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086ac:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80086b0:	6812      	ldr	r2, [r2, #0]
 80086b2:	f042 0204 	orr.w	r2, r2, #4
 80086b6:	601a      	str	r2, [r3, #0]
}
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 80086ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ce:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80086d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086d6:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80086da:	6892      	ldr	r2, [r2, #8]
 80086dc:	f022 021f 	bic.w	r2, r2, #31
 80086e0:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 80086e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086e6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80086ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086ee:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80086f2:	6891      	ldr	r1, [r2, #8]
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	ea41 0202 	orr.w	r2, r1, r2
 80086fa:	609a      	str	r2, [r3, #8]
}
 80086fc:	f107 070c 	add.w	r7, r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop

08008708 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8008710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008714:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	605a      	str	r2, [r3, #4]
}
 800871c:	f107 070c 	add.w	r7, r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop

08008728 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800872c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008730:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800873a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800873e:	b2db      	uxtb	r3, r3
}
 8008740:	4618      	mov	r0, r3
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr

08008748 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8008750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008754:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 800875e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008762:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008766:	691a      	ldr	r2, [r3, #16]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 800876c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008770:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008774:	695a      	ldr	r2, [r3, #20]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800877a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800877e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 8008788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800878c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008790:	69da      	ldr	r2, [r3, #28]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	611a      	str	r2, [r3, #16]
}
 8008796:	f107 070c 	add.w	r7, r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr

080087a0 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 80087a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80087ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087b0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80087b4:	6892      	ldr	r2, [r2, #8]
 80087b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ba:	609a      	str	r2, [r3, #8]
}
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop

080087c4 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 80087d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087d6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80087da:	6a1a      	ldr	r2, [r3, #32]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 80087e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 80087ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	609a      	str	r2, [r3, #8]
  for(i=0; i<=50;i++)
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
 8008802:	e014      	b.n	800882e <HASH_SaveContext+0x6a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8008804:	7bf8      	ldrb	r0, [r7, #15]
 8008806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800880a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800880e:	7bfa      	ldrb	r2, [r7, #15]
 8008810:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8008814:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	f100 0302 	add.w	r3, r0, #2
 800881e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008822:	440b      	add	r3, r1
 8008824:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	f103 0301 	add.w	r3, r3, #1
 800882c:	73fb      	strb	r3, [r7, #15]
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b32      	cmp	r3, #50	; 0x32
 8008832:	d9e7      	bls.n	8008804 <HASH_SaveContext+0x40>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8008834:	f107 0714 	add.w	r7, r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	bc80      	pop	{r7}
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop

08008840 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8008848:	f04f 0300 	mov.w	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800884e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008852:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 800885c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008860:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	6852      	ldr	r2, [r2, #4]
 8008868:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800886a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800886e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6892      	ldr	r2, [r2, #8]
 8008876:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 8008878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800887c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008884:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	f042 0204 	orr.w	r2, r2, #4
 800888e:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8008890:	f04f 0300 	mov.w	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
 8008896:	e014      	b.n	80088c2 <HASH_RestoreContext+0x82>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8008898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800889c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80088a0:	7bf8      	ldrb	r0, [r7, #15]
 80088a2:	7bfa      	ldrb	r2, [r7, #15]
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	f102 0202 	add.w	r2, r2, #2
 80088aa:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80088ae:	440a      	add	r2, r1
 80088b0:	6851      	ldr	r1, [r2, #4]
 80088b2:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 80088b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	f103 0301 	add.w	r3, r3, #1
 80088c0:	73fb      	strb	r3, [r7, #15]
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	2b32      	cmp	r3, #50	; 0x32
 80088c6:	d9e7      	bls.n	8008898 <HASH_RestoreContext+0x58>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 80088c8:	f107 0714 	add.w	r7, r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop

080088d4 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00c      	beq.n	80088fe <HASH_DMACmd+0x2a>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 80088e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80088ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088f0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	f042 0208 	orr.w	r2, r2, #8
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	e00b      	b.n	8008916 <HASH_DMACmd+0x42>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 80088fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008902:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800890a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800890e:	6812      	ldr	r2, [r2, #0]
 8008910:	f022 0208 	bic.w	r2, r2, #8
 8008914:	601a      	str	r2, [r3, #0]
  }
}
 8008916:	f107 070c 	add.w	r7, r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr

08008920 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	71fa      	strb	r2, [r7, #7]
 800892c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800892e:	79bb      	ldrb	r3, [r7, #6]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00d      	beq.n	8008950 <HASH_ITConfig+0x30>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8008934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008938:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800893c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008940:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008944:	6a11      	ldr	r1, [r2, #32]
 8008946:	79fa      	ldrb	r2, [r7, #7]
 8008948:	ea41 0202 	orr.w	r2, r1, r2
 800894c:	621a      	str	r2, [r3, #32]
 800894e:	e00f      	b.n	8008970 <HASH_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8008950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008954:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800895c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008960:	6a11      	ldr	r1, [r2, #32]
 8008962:	79fa      	ldrb	r2, [r7, #7]
 8008964:	ea6f 0202 	mvn.w	r2, r2
 8008968:	b2d2      	uxtb	r2, r2
 800896a:	ea01 0202 	and.w	r2, r1, r2
 800896e:	621a      	str	r2, [r3, #32]
  }
}
 8008970:	f107 070c 	add.w	r7, r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8008986:	f04f 0300 	mov.w	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 800898c:	f04f 0300 	mov.w	r3, #0
 8008990:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 8008992:	88fb      	ldrh	r3, [r7, #6]
 8008994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <HASH_GetFlagStatus+0x2e>
  {
    tempreg = HASH->CR;
 800899c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60bb      	str	r3, [r7, #8]
 80089a8:	e005      	b.n	80089b6 <HASH_GetFlagStatus+0x3a>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 80089aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ae:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 80089b6:	88fa      	ldrh	r2, [r7, #6]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	ea02 0303 	and.w	r3, r2, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HASH_GetFlagStatus+0x4e>
  {
    /* HASH is set */
    bitstatus = SET;
 80089c2:	f04f 0301 	mov.w	r3, #1
 80089c6:	73fb      	strb	r3, [r7, #15]
 80089c8:	e002      	b.n	80089d0 <HASH_GetFlagStatus+0x54>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 80089ca:	f04f 0300 	mov.w	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	f107 0714 	add.w	r7, r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop

080089e0 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint16_t HASH_FLAG)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 80089ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ee:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80089f2:	88fa      	ldrh	r2, [r7, #6]
 80089f4:	ea6f 0202 	mvn.w	r2, r2
 80089f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80089fa:	f107 070c 	add.w	r7, r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bc80      	pop	{r7}
 8008a02:	4770      	bx	lr

08008a04 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint8_t HASH_IT)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8008a0e:	f04f 0300 	mov.w	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8008a14:	f04f 0300 	mov.w	r3, #0
 8008a18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 8008a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a1e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8008a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a2a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008a2e:	6a1a      	ldr	r2, [r3, #32]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	ea02 0203 	and.w	r2, r2, r3
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	ea02 0303 	and.w	r3, r2, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <HASH_GetITStatus+0x44>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 8008a40:	f04f 0301 	mov.w	r3, #1
 8008a44:	73fb      	strb	r3, [r7, #15]
 8008a46:	e002      	b.n	8008a4e <HASH_GetITStatus+0x4a>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	f107 0714 	add.w	r7, r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr

08008a5c <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint8_t HASH_IT)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 8008a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a6a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008a6e:	79fa      	ldrb	r2, [r7, #7]
 8008a70:	ea6f 0202 	mvn.w	r2, r2
 8008a74:	b2d2      	uxtb	r2, r2
 8008a76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008a78:	f107 070c 	add.w	r7, r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop

08008a84 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8008a84:	b590      	push	{r4, r7, lr}
 8008a86:	b095      	sub	sp, #84	; 0x54
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 8008a96:	f04f 0300 	mov.w	r3, #0
 8008a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __IO uint32_t counter = 0;
 8008a9c:	f04f 0300 	mov.w	r3, #0
 8008aa0:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8008aa2:	f04f 0300 	mov.w	r3, #0
 8008aa6:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatus status = SUCCESS;
 8008aa8:	f04f 0301 	mov.w	r3, #1
 8008aac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint32_t inputaddr  = (uint32_t)Input;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t outputaddr = (uint32_t)Output;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8008aca:	f7ff fd67 	bl	800859c <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8008ace:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008ada:	f04f 0320 	mov.w	r3, #32
 8008ade:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&MD5_HASH_InitStructure);
 8008ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fd69 	bl	80085bc <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8008aea:	8afb      	ldrh	r3, [r7, #22]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff fde6 	bl	80086c0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008afa:	e00c      	b.n	8008b16 <HASH_MD5+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8008afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff fe01 	bl	8008708 <HASH_DataIn>
    inputaddr+=4;
 8008b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b08:	f103 0304 	add.w	r3, r3, #4
 8008b0c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8008b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b10:	f103 0304 	add.w	r3, r3, #4
 8008b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d3ee      	bcc.n	8008afc <HASH_MD5+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8008b1e:	f7ff fe3f 	bl	80087a0 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008b22:	f04f 0008 	mov.w	r0, #8
 8008b26:	f7ff ff29 	bl	800897c <HASH_GetFlagStatus>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	643b      	str	r3, [r7, #64]	; 0x40
    counter++;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f103 0301 	add.w	r3, r3, #1
 8008b34:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3c:	d002      	beq.n	8008b44 <HASH_MD5+0xc0>
 8008b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1ee      	bne.n	8008b22 <HASH_MD5+0x9e>

  if (busystatus != RESET)
 8008b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d004      	beq.n	8008b54 <HASH_MD5+0xd0>
  {
     status = ERROR;
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8008b52:	e02c      	b.n	8008bae <HASH_MD5+0x12a>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8008b54:	f107 0318 	add.w	r3, r7, #24
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff fdf5 	bl	8008748 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8008b5e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f7 fcf4 	bl	8000550 <__REV>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6e:	f103 0304 	add.w	r3, r3, #4
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8008b74:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7f7 fce9 	bl	8000550 <__REV>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b84:	f103 0304 	add.w	r3, r3, #4
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8008b8a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7f7 fcde 	bl	8000550 <__REV>
 8008b94:	4603      	mov	r3, r0
 8008b96:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	f103 0304 	add.w	r3, r3, #4
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8008ba0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7f7 fcd3 	bl	8000550 <__REV>
 8008baa:	4603      	mov	r3, r0
 8008bac:	6023      	str	r3, [r4, #0]
  }
  return status; 
 8008bae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f107 0754 	add.w	r7, r7, #84	; 0x54
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd90      	pop	{r4, r7, pc}

08008bbc <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b097      	sub	sp, #92	; 0x5c
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8008bca:	f04f 0300 	mov.w	r3, #0
 8008bce:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 8008bd0:	f04f 0300 	mov.w	r3, #0
 8008bd4:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	657b      	str	r3, [r7, #84]	; 0x54
  __IO uint32_t counter = 0;
 8008bdc:	f04f 0300 	mov.w	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8008be2:	f04f 0300 	mov.w	r3, #0
 8008be6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 8008be8:	f04f 0301 	mov.w	r3, #1
 8008bec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint32_t keyaddr    = (uint32_t)Key;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t inputaddr  = (uint32_t)Input;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t outputaddr = (uint32_t)Output;
 8008bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bfa:	643b      	str	r3, [r7, #64]	; 0x40

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	f003 0303 	and.w	r3, r3, #3
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	833b      	strh	r3, [r7, #24]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8008c20:	f7ff fcbc 	bl	800859c <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8008c24:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008c28:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8008c2a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008c30:	f04f 0320 	mov.w	r3, #32
 8008c34:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b40      	cmp	r3, #64	; 0x40
 8008c3a:	d903      	bls.n	8008c44 <HMAC_MD5+0x88>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8008c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c42:	e002      	b.n	8008c4a <HMAC_MD5+0x8e>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8008c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff fcb4 	bl	80085bc <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8008c54:	8b3b      	ldrh	r3, [r7, #24]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fd31 	bl	80086c0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8008c5e:	f04f 0300 	mov.w	r3, #0
 8008c62:	657b      	str	r3, [r7, #84]	; 0x54
 8008c64:	e00c      	b.n	8008c80 <HMAC_MD5+0xc4>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8008c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff fd4c 	bl	8008708 <HASH_DataIn>
    keyaddr+=4;
 8008c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c72:	f103 0304 	add.w	r3, r3, #4
 8008c76:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8008c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c7a:	f103 0304 	add.w	r3, r3, #4
 8008c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d3ee      	bcc.n	8008c66 <HMAC_MD5+0xaa>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 8008c88:	f7ff fd8a 	bl	80087a0 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008c8c:	f04f 0008 	mov.w	r0, #8
 8008c90:	f7ff fe74 	bl	800897c <HASH_GetFlagStatus>
 8008c94:	4603      	mov	r3, r0
 8008c96:	647b      	str	r3, [r7, #68]	; 0x44
    counter++;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f103 0301 	add.w	r3, r3, #1
 8008c9e:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca6:	d002      	beq.n	8008cae <HMAC_MD5+0xf2>
 8008ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1ee      	bne.n	8008c8c <HMAC_MD5+0xd0>

  if (busystatus != RESET)
 8008cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <HMAC_MD5+0x102>
  {
     status = ERROR;
 8008cb4:	f04f 0300 	mov.w	r3, #0
 8008cb8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008cbc:	e09e      	b.n	8008dfc <HMAC_MD5+0x240>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8008cbe:	8b7b      	ldrh	r3, [r7, #26]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fcfc 	bl	80086c0 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8008cce:	e00c      	b.n	8008cea <HMAC_MD5+0x12e>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8008cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff fd17 	bl	8008708 <HASH_DataIn>
      inputaddr+=4;
 8008cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cdc:	f103 0304 	add.w	r3, r3, #4
 8008ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8008ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ce4:	f103 0304 	add.w	r3, r3, #4
 8008ce8:	657b      	str	r3, [r7, #84]	; 0x54
 8008cea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d3ee      	bcc.n	8008cd0 <HMAC_MD5+0x114>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8008cf2:	f7ff fd55 	bl	80087a0 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	617b      	str	r3, [r7, #20]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008cfc:	f04f 0008 	mov.w	r0, #8
 8008d00:	f7ff fe3c 	bl	800897c <HASH_GetFlagStatus>
 8008d04:	4603      	mov	r3, r0
 8008d06:	647b      	str	r3, [r7, #68]	; 0x44
       counter++;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f103 0301 	add.w	r3, r3, #1
 8008d0e:	617b      	str	r3, [r7, #20]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d16:	d002      	beq.n	8008d1e <HMAC_MD5+0x162>
 8008d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1ee      	bne.n	8008cfc <HMAC_MD5+0x140>

    if (busystatus != RESET)
 8008d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <HMAC_MD5+0x172>
    {
      status = ERROR;
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008d2c:	e066      	b.n	8008dfc <HMAC_MD5+0x240>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8008d2e:	8b3b      	ldrh	r3, [r7, #24]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fcc4 	bl	80086c0 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      for(i=0; i<Keylen; i+=4)
 8008d3c:	f04f 0300 	mov.w	r3, #0
 8008d40:	657b      	str	r3, [r7, #84]	; 0x54
 8008d42:	e00c      	b.n	8008d5e <HMAC_MD5+0x1a2>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8008d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fcdd 	bl	8008708 <HASH_DataIn>
        keyaddr+=4;
 8008d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d50:	f103 0304 	add.w	r3, r3, #4
 8008d54:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8008d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d58:	f103 0304 	add.w	r3, r3, #4
 8008d5c:	657b      	str	r3, [r7, #84]	; 0x54
 8008d5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d3ee      	bcc.n	8008d44 <HMAC_MD5+0x188>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 8008d66:	f7ff fd1b 	bl	80087a0 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008d70:	f04f 0008 	mov.w	r0, #8
 8008d74:	f7ff fe02 	bl	800897c <HASH_GetFlagStatus>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	647b      	str	r3, [r7, #68]	; 0x44
          counter++;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f103 0301 	add.w	r3, r3, #1
 8008d82:	617b      	str	r3, [r7, #20]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d8a:	d002      	beq.n	8008d92 <HMAC_MD5+0x1d6>
 8008d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1ee      	bne.n	8008d70 <HMAC_MD5+0x1b4>

      if (busystatus != RESET)
 8008d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d004      	beq.n	8008da2 <HMAC_MD5+0x1e6>
      {
         status = ERROR;
 8008d98:	f04f 0300 	mov.w	r3, #0
 8008d9c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008da0:	e02c      	b.n	8008dfc <HMAC_MD5+0x240>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 8008da2:	f107 031c 	add.w	r3, r7, #28
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fcce 	bl	8008748 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8008dac:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7f7 fbcd 	bl	8000550 <__REV>
 8008db6:	4603      	mov	r3, r0
 8008db8:	6023      	str	r3, [r4, #0]
         outputaddr+=4;
 8008dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dbc:	f103 0304 	add.w	r3, r3, #4
 8008dc0:	643b      	str	r3, [r7, #64]	; 0x40
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8008dc2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7f7 fbc2 	bl	8000550 <__REV>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	6023      	str	r3, [r4, #0]
         outputaddr+=4;
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd2:	f103 0304 	add.w	r3, r3, #4
 8008dd6:	643b      	str	r3, [r7, #64]	; 0x40
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8008dd8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7f7 fbb7 	bl	8000550 <__REV>
 8008de2:	4603      	mov	r3, r0
 8008de4:	6023      	str	r3, [r4, #0]
         outputaddr+=4;
 8008de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de8:	f103 0304 	add.w	r3, r3, #4
 8008dec:	643b      	str	r3, [r7, #64]	; 0x40
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8008dee:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f7 fbac 	bl	8000550 <__REV>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	6023      	str	r3, [r4, #0]
      }
    }
  }
  return status;  
 8008dfc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd90      	pop	{r4, r7, pc}
 8008e0a:	bf00      	nop

08008e0c <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8008e0c:	b590      	push	{r4, r7, lr}
 8008e0e:	b095      	sub	sp, #84	; 0x54
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8008e18:	f04f 0300 	mov.w	r3, #0
 8008e1c:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  __IO uint32_t counter = 0;
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8008e2a:	f04f 0300 	mov.w	r3, #0
 8008e2e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatus status = SUCCESS;
 8008e30:	f04f 0301 	mov.w	r3, #1
 8008e34:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint32_t inputaddr  = (uint32_t)Input;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t outputaddr = (uint32_t)Output;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f003 0303 	and.w	r3, r3, #3
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8008e52:	f7ff fba3 	bl	800859c <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008e62:	f04f 0320 	mov.w	r3, #32
 8008e66:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&SHA1_HASH_InitStructure);
 8008e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff fba5 	bl	80085bc <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8008e72:	8afb      	ldrh	r3, [r7, #22]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7ff fc22 	bl	80086c0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8008e7c:	f04f 0300 	mov.w	r3, #0
 8008e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e82:	e00c      	b.n	8008e9e <HASH_SHA1+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8008e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff fc3d 	bl	8008708 <HASH_DataIn>
    inputaddr+=4;
 8008e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e90:	f103 0304 	add.w	r3, r3, #4
 8008e94:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8008e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e98:	f103 0304 	add.w	r3, r3, #4
 8008e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d3ee      	bcc.n	8008e84 <HASH_SHA1+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8008ea6:	f7ff fc7b 	bl	80087a0 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008eaa:	f04f 0008 	mov.w	r0, #8
 8008eae:	f7ff fd65 	bl	800897c <HASH_GetFlagStatus>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	643b      	str	r3, [r7, #64]	; 0x40
    counter++;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f103 0301 	add.w	r3, r3, #1
 8008ebc:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec4:	d002      	beq.n	8008ecc <HASH_SHA1+0xc0>
 8008ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1ee      	bne.n	8008eaa <HASH_SHA1+0x9e>

  if (busystatus != RESET)
 8008ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d004      	beq.n	8008edc <HASH_SHA1+0xd0>
  {
     status = ERROR;
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8008eda:	e037      	b.n	8008f4c <HASH_SHA1+0x140>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 8008edc:	f107 0318 	add.w	r3, r7, #24
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fc31 	bl	8008748 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8008ee6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7f7 fb30 	bl	8000550 <__REV>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef6:	f103 0304 	add.w	r3, r3, #4
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8008efc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7f7 fb25 	bl	8000550 <__REV>
 8008f06:	4603      	mov	r3, r0
 8008f08:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f0c:	f103 0304 	add.w	r3, r3, #4
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8008f12:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f7 fb1a 	bl	8000550 <__REV>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f22:	f103 0304 	add.w	r3, r3, #4
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8008f28:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7f7 fb0f 	bl	8000550 <__REV>
 8008f32:	4603      	mov	r3, r0
 8008f34:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f38:	f103 0304 	add.w	r3, r3, #4
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8008f3e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7f7 fb04 	bl	8000550 <__REV>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	6023      	str	r3, [r4, #0]
  }
  return status;
 8008f4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	f107 0754 	add.w	r7, r7, #84	; 0x54
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd90      	pop	{r4, r7, pc}
 8008f5a:	bf00      	nop

08008f5c <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8008f5c:	b590      	push	{r4, r7, lr}
 8008f5e:	b097      	sub	sp, #92	; 0x5c
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8008f6a:	f04f 0300 	mov.w	r3, #0
 8008f6e:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 8008f70:	f04f 0300 	mov.w	r3, #0
 8008f74:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	657b      	str	r3, [r7, #84]	; 0x54
  __IO uint32_t counter = 0;
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 8008f88:	f04f 0301 	mov.w	r3, #1
 8008f8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint32_t keyaddr    = (uint32_t)Key;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t inputaddr  = (uint32_t)Input;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t outputaddr = (uint32_t)Output;
 8008f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f9a:	643b      	str	r3, [r7, #64]	; 0x40

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8008fc0:	f7ff faec 	bl	800859c <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8008fc4:	f04f 0300 	mov.w	r3, #0
 8008fc8:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8008fca:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008fce:	637b      	str	r3, [r7, #52]	; 0x34
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008fd0:	f04f 0320 	mov.w	r3, #32
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d903      	bls.n	8008fe4 <HMAC_SHA1+0x88>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8008fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe2:	e002      	b.n	8008fea <HMAC_SHA1+0x8e>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8008fea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff fae4 	bl	80085bc <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8008ff4:	8b3b      	ldrh	r3, [r7, #24]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fb61 	bl	80086c0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	657b      	str	r3, [r7, #84]	; 0x54
 8009004:	e00c      	b.n	8009020 <HMAC_SHA1+0xc4>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8009006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fb7c 	bl	8008708 <HASH_DataIn>
    keyaddr+=4;
 8009010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009012:	f103 0304 	add.w	r3, r3, #4
 8009016:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8009018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800901a:	f103 0304 	add.w	r3, r3, #4
 800901e:	657b      	str	r3, [r7, #84]	; 0x54
 8009020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	429a      	cmp	r2, r3
 8009026:	d3ee      	bcc.n	8009006 <HMAC_SHA1+0xaa>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8009028:	f7ff fbba 	bl	80087a0 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800902c:	f04f 0008 	mov.w	r0, #8
 8009030:	f7ff fca4 	bl	800897c <HASH_GetFlagStatus>
 8009034:	4603      	mov	r3, r0
 8009036:	647b      	str	r3, [r7, #68]	; 0x44
    counter++;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f103 0301 	add.w	r3, r3, #1
 800903e:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009046:	d002      	beq.n	800904e <HMAC_SHA1+0xf2>
 8009048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1ee      	bne.n	800902c <HMAC_SHA1+0xd0>

  if (busystatus != RESET)
 800904e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009050:	2b00      	cmp	r3, #0
 8009052:	d004      	beq.n	800905e <HMAC_SHA1+0x102>
  {
     status = ERROR;
 8009054:	f04f 0300 	mov.w	r3, #0
 8009058:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800905c:	e0a9      	b.n	80091b2 <HMAC_SHA1+0x256>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800905e:	8b7b      	ldrh	r3, [r7, #26]
 8009060:	b29b      	uxth	r3, r3
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff fb2c 	bl	80086c0 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8009068:	f04f 0300 	mov.w	r3, #0
 800906c:	657b      	str	r3, [r7, #84]	; 0x54
 800906e:	e00c      	b.n	800908a <HMAC_SHA1+0x12e>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8009070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff fb47 	bl	8008708 <HASH_DataIn>
      inputaddr+=4;
 800907a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907c:	f103 0304 	add.w	r3, r3, #4
 8009080:	64bb      	str	r3, [r7, #72]	; 0x48
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8009082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009084:	f103 0304 	add.w	r3, r3, #4
 8009088:	657b      	str	r3, [r7, #84]	; 0x54
 800908a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	d3ee      	bcc.n	8009070 <HMAC_SHA1+0x114>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8009092:	f7ff fb85 	bl	80087a0 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 8009096:	f04f 0300 	mov.w	r3, #0
 800909a:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800909c:	f04f 0008 	mov.w	r0, #8
 80090a0:	f7ff fc6c 	bl	800897c <HASH_GetFlagStatus>
 80090a4:	4603      	mov	r3, r0
 80090a6:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f103 0301 	add.w	r3, r3, #1
 80090ae:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b6:	d002      	beq.n	80090be <HMAC_SHA1+0x162>
 80090b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1ee      	bne.n	800909c <HMAC_SHA1+0x140>

    if (busystatus != RESET)
 80090be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <HMAC_SHA1+0x172>
    {
      status = ERROR;
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80090cc:	e071      	b.n	80091b2 <HMAC_SHA1+0x256>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80090ce:	8b3b      	ldrh	r3, [r7, #24]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff faf4 	bl	80086c0 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	64fb      	str	r3, [r7, #76]	; 0x4c
      for(i=0; i<Keylen; i+=4)
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	657b      	str	r3, [r7, #84]	; 0x54
 80090e2:	e00c      	b.n	80090fe <HMAC_SHA1+0x1a2>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 80090e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fb0d 	bl	8008708 <HASH_DataIn>
        keyaddr+=4;
 80090ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f0:	f103 0304 	add.w	r3, r3, #4
 80090f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80090f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090f8:	f103 0304 	add.w	r3, r3, #4
 80090fc:	657b      	str	r3, [r7, #84]	; 0x54
 80090fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	429a      	cmp	r2, r3
 8009104:	d3ee      	bcc.n	80090e4 <HMAC_SHA1+0x188>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 8009106:	f7ff fb4b 	bl	80087a0 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8009110:	f04f 0008 	mov.w	r0, #8
 8009114:	f7ff fc32 	bl	800897c <HASH_GetFlagStatus>
 8009118:	4603      	mov	r3, r0
 800911a:	647b      	str	r3, [r7, #68]	; 0x44
        counter++;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f103 0301 	add.w	r3, r3, #1
 8009122:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800912a:	d002      	beq.n	8009132 <HMAC_SHA1+0x1d6>
 800912c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1ee      	bne.n	8009110 <HMAC_SHA1+0x1b4>

      if (busystatus != RESET)
 8009132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <HMAC_SHA1+0x1e6>
      {
        status = ERROR;
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8009140:	e037      	b.n	80091b2 <HMAC_SHA1+0x256>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8009142:	f107 031c 	add.w	r3, r7, #28
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fafe 	bl	8008748 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800914c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4618      	mov	r0, r3
 8009152:	f7f7 f9fd 	bl	8000550 <__REV>
 8009156:	4603      	mov	r3, r0
 8009158:	6023      	str	r3, [r4, #0]
        outputaddr+=4;
 800915a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800915c:	f103 0304 	add.w	r3, r3, #4
 8009160:	643b      	str	r3, [r7, #64]	; 0x40
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8009162:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	4618      	mov	r0, r3
 8009168:	f7f7 f9f2 	bl	8000550 <__REV>
 800916c:	4603      	mov	r3, r0
 800916e:	6023      	str	r3, [r4, #0]
        outputaddr+=4;
 8009170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009172:	f103 0304 	add.w	r3, r3, #4
 8009176:	643b      	str	r3, [r7, #64]	; 0x40
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8009178:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	4618      	mov	r0, r3
 800917e:	f7f7 f9e7 	bl	8000550 <__REV>
 8009182:	4603      	mov	r3, r0
 8009184:	6023      	str	r3, [r4, #0]
        outputaddr+=4;
 8009186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009188:	f103 0304 	add.w	r3, r3, #4
 800918c:	643b      	str	r3, [r7, #64]	; 0x40
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800918e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	4618      	mov	r0, r3
 8009194:	f7f7 f9dc 	bl	8000550 <__REV>
 8009198:	4603      	mov	r3, r0
 800919a:	6023      	str	r3, [r4, #0]
        outputaddr+=4;
 800919c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800919e:	f103 0304 	add.w	r3, r3, #4
 80091a2:	643b      	str	r3, [r7, #64]	; 0x40
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 80091a4:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7f7 f9d1 	bl	8000550 <__REV>
 80091ae:	4603      	mov	r3, r0
 80091b0:	6023      	str	r3, [r4, #0]
      }
    }  
  }
  return status;  
 80091b2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd90      	pop	{r4, r7, pc}

080091c0 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80091ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d10c      	bne.n	80091f0 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80091d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80091da:	f04f 0101 	mov.w	r1, #1
 80091de:	f001 fbab 	bl	800a938 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80091e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80091e6:	f04f 0100 	mov.w	r1, #0
 80091ea:	f001 fba5 	bl	800a938 <RCC_APB1PeriphResetCmd>
 80091ee:	e026      	b.n	800923e <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80091f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d10c      	bne.n	8009218 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80091fe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8009202:	f04f 0101 	mov.w	r1, #1
 8009206:	f001 fb97 	bl	800a938 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800920a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800920e:	f04f 0100 	mov.w	r1, #0
 8009212:	f001 fb91 	bl	800a938 <RCC_APB1PeriphResetCmd>
 8009216:	e012      	b.n	800923e <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800921e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009222:	429a      	cmp	r2, r3
 8009224:	d10b      	bne.n	800923e <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8009226:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800922a:	f04f 0101 	mov.w	r1, #1
 800922e:	f001 fb83 	bl	800a938 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8009232:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009236:	f04f 0100 	mov.w	r1, #0
 800923a:	f001 fb7d 	bl	800a938 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800923e:	f107 0708 	add.w	r7, r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop

08009248 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	; 0x28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8009252:	f04f 0300 	mov.w	r3, #0
 8009256:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009258:	f04f 0300 	mov.w	r3, #0
 800925c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800925e:	f04f 0304 	mov.w	r3, #4
 8009262:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8009264:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8009268:	f2c0 037a 	movt	r3, #122	; 0x7a
 800926c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	889b      	ldrh	r3, [r3, #4]
 8009272:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8009274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009276:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800927a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800927c:	f107 030c 	add.w	r3, r7, #12
 8009280:	4618      	mov	r0, r3
 8009282:	f001 f8a5 	bl	800a3d0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	f64d 6383 	movw	r3, #56963	; 0xde83
 8009290:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8009294:	fba3 1302 	umull	r1, r3, r3, r2
 8009298:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800929c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800929e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80092a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092a2:	ea42 0303 	orr.w	r3, r2, r3
 80092a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80092ac:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f023 0301 	bic.w	r3, r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80092be:	f04f 0300 	mov.w	r3, #0
 80092c2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	f248 63a0 	movw	r3, #34464	; 0x86a0
 80092cc:	f2c0 0301 	movt	r3, #1
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d819      	bhi.n	8009308 <I2C_Init+0xc0>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80092e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d802      	bhi.n	80092f0 <I2C_Init+0xa8>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80092ea:	f04f 0304 	mov.w	r3, #4
 80092ee:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80092f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80092f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092f4:	ea42 0303 	orr.w	r3, r2, r3
 80092f8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80092fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092fc:	f103 0301 	add.w	r3, r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	841a      	strh	r2, [r3, #32]
 8009306:	e04d      	b.n	80093a4 <I2C_Init+0x15c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	88da      	ldrh	r2, [r3, #6]
 800930c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8009310:	429a      	cmp	r2, r3
 8009312:	d10a      	bne.n	800932a <I2C_Init+0xe2>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	4613      	mov	r3, r2
 800931a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800931e:	4413      	add	r3, r2
 8009320:	69fa      	ldr	r2, [r7, #28]
 8009322:	fbb2 f3f3 	udiv	r3, r2, r3
 8009326:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009328:	e010      	b.n	800934c <I2C_Init+0x104>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	4613      	mov	r3, r2
 8009330:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009334:	4413      	add	r3, r2
 8009336:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800933a:	4413      	add	r3, r2
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009342:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8009344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800934a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800934c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800934e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8009352:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8009356:	2b00      	cmp	r3, #0
 8009358:	d103      	bne.n	8009362 <I2C_Init+0x11a>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800935a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800935c:	f043 0301 	orr.w	r3, r3, #1
 8009360:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8009362:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009366:	ea42 0303 	orr.w	r3, r2, r3
 800936a:	b29b      	uxth	r3, r3
 800936c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009374:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8009376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009378:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800937c:	fb02 f203 	mul.w	r2, r2, r3
 8009380:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8009384:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8009388:	fb83 1302 	smull	r1, r3, r3, r2
 800938c:	ea4f 11a3 	mov.w	r1, r3, asr #6
 8009390:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8009394:	ebc3 0301 	rsb	r3, r3, r1
 8009398:	b29b      	uxth	r3, r3
 800939a:	f103 0301 	add.w	r3, r3, #1
 800939e:	b29a      	uxth	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80093a8:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	f043 0301 	orr.w	r3, r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80093c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093c6:	f023 030a 	bic.w	r3, r3, #10
 80093ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	889a      	ldrh	r2, [r3, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	895b      	ldrh	r3, [r3, #10]
 80093d4:	ea42 0303 	orr.w	r3, r2, r3
 80093d8:	b29a      	uxth	r2, r3
 80093da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093dc:	ea42 0303 	orr.w	r3, r2, r3
 80093e0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80093e6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	899a      	ldrh	r2, [r3, #12]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	891b      	ldrh	r3, [r3, #8]
 80093f0:	ea42 0303 	orr.w	r3, r2, r3
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	811a      	strh	r2, [r3, #8]
}
 80093fa:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop

08009404 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009412:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f04f 0200 	mov.w	r2, #0
 800941a:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8009422:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f04f 0200 	mov.w	r2, #0
 800942a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f04f 0200 	mov.w	r2, #0
 8009432:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800943a:	819a      	strh	r2, [r3, #12]
}
 800943c:	f107 070c 	add.w	r7, r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	bc80      	pop	{r7}
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop

08009448 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	f043 0301 	orr.w	r3, r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	e007      	b.n	800947c <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	b29b      	uxth	r3, r3
 8009472:	f023 0301 	bic.w	r3, r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	801a      	strh	r2, [r3, #0]
  }
}
 800947c:	f107 070c 	add.w	r7, r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	bc80      	pop	{r7}
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop

08009488 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d008      	beq.n	80094ac <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	e007      	b.n	80094bc <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	801a      	strh	r2, [r3, #0]
  }
}
 80094bc:	f107 070c 	add.w	r7, r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bc80      	pop	{r7}
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop

080094c8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d008      	beq.n	80094ec <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	801a      	strh	r2, [r3, #0]
 80094ea:	e007      	b.n	80094fc <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	801a      	strh	r2, [r3, #0]
  }
}
 80094fc:	f107 070c 	add.w	r7, r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop

08009508 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	460a      	mov	r2, r1
 8009514:	70fa      	strb	r2, [r7, #3]
 8009516:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8009518:	78bb      	ldrb	r3, [r7, #2]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	f043 0301 	orr.w	r3, r3, #1
 8009524:	70fb      	strb	r3, [r7, #3]
 8009526:	e003      	b.n	8009530 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8009528:	78fb      	ldrb	r3, [r7, #3]
 800952a:	f023 0301 	bic.w	r3, r3, #1
 800952e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	b29a      	uxth	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	821a      	strh	r2, [r3, #16]
}
 8009538:	f107 070c 	add.w	r7, r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	bc80      	pop	{r7}
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop

08009544 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d008      	beq.n	8009568 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29b      	uxth	r3, r3
 800955c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009560:	b29a      	uxth	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	e007      	b.n	8009578 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009572:	b29a      	uxth	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	801a      	strh	r2, [r3, #0]
  }
}
 8009578:	f107 070c 	add.w	r7, r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop

08009584 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8009590:	f04f 0300 	mov.w	r3, #0
 8009594:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	899b      	ldrh	r3, [r3, #12]
 800959a:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800959c:	89fb      	ldrh	r3, [r7, #14]
 800959e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80095a2:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	89fb      	ldrh	r3, [r7, #14]
 80095b0:	ea42 0303 	orr.w	r3, r2, r3
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	89fa      	ldrh	r2, [r7, #14]
 80095bc:	819a      	strh	r2, [r3, #12]
}
 80095be:	f107 0714 	add.w	r7, r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr

080095c8 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d008      	beq.n	80095ec <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	899b      	ldrh	r3, [r3, #12]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	819a      	strh	r2, [r3, #12]
 80095ea:	e007      	b.n	80095fc <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	899b      	ldrh	r3, [r3, #12]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f023 0301 	bic.w	r3, r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	819a      	strh	r2, [r3, #12]
  }
}
 80095fc:	f107 070c 	add.w	r7, r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop

08009608 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d008      	beq.n	800962c <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009624:	b29a      	uxth	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	801a      	strh	r2, [r3, #0]
 800962a:	e007      	b.n	800963c <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	801a      	strh	r2, [r3, #0]
  }
}
 800963c:	f107 070c 	add.w	r7, r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	bc80      	pop	{r7}
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop

08009648 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	b29b      	uxth	r3, r3
 8009660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009668:	b29a      	uxth	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	e009      	b.n	8009684 <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b29b      	uxth	r3, r3
 8009676:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800967a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800967e:	b29a      	uxth	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	801a      	strh	r2, [r3, #0]
  }
}
 8009684:	f107 070c 	add.w	r7, r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop

08009690 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d108      	bne.n	80096b4 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	801a      	strh	r2, [r3, #0]
 80096b2:	e007      	b.n	80096c4 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	801a      	strh	r2, [r3, #0]
  }
}
 80096c4:	f107 070c 	add.w	r7, r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bc80      	pop	{r7}
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop

080096d0 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80096dc:	887b      	ldrh	r3, [r7, #2]
 80096de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e2:	d008      	beq.n	80096f6 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	8b9b      	ldrh	r3, [r3, #28]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	839a      	strh	r2, [r3, #28]
 80096f4:	e007      	b.n	8009706 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	8b9b      	ldrh	r3, [r3, #28]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009700:	b29a      	uxth	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	839a      	strh	r2, [r3, #28]
  }
}
 8009706:	f107 070c 	add.w	r7, r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr

08009710 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800971c:	887b      	ldrh	r3, [r7, #2]
 800971e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009722:	d108      	bne.n	8009736 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	b29b      	uxth	r3, r3
 800972a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800972e:	b29a      	uxth	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	801a      	strh	r2, [r3, #0]
 8009734:	e007      	b.n	8009746 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009740:	b29a      	uxth	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	801a      	strh	r2, [r3, #0]
  }
}
 8009746:	f107 070c 	add.w	r7, r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	bc80      	pop	{r7}
 800974e:	4770      	bx	lr

08009750 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800975c:	887b      	ldrh	r3, [r7, #2]
 800975e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009762:	d108      	bne.n	8009776 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	b29b      	uxth	r3, r3
 800976a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800976e:	b29a      	uxth	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	801a      	strh	r2, [r3, #0]
 8009774:	e007      	b.n	8009786 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29b      	uxth	r3, r3
 800977c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009780:	b29a      	uxth	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	801a      	strh	r2, [r3, #0]
  }
}
 8009786:	f107 070c 	add.w	r7, r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	bc80      	pop	{r7}
 800978e:	4770      	bx	lr

08009790 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d008      	beq.n	80097b4 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	f043 0310 	orr.w	r3, r3, #16
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	801a      	strh	r2, [r3, #0]
 80097b2:	e007      	b.n	80097c4 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	f023 0310 	bic.w	r3, r3, #16
 80097be:	b29a      	uxth	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	801a      	strh	r2, [r3, #0]
  }
}
 80097c4:	f107 070c 	add.w	r7, r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bc80      	pop	{r7}
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop

080097d0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	821a      	strh	r2, [r3, #16]
}
 80097e4:	f107 070c 	add.w	r7, r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bc80      	pop	{r7}
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop

080097f0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	8a1b      	ldrh	r3, [r3, #16]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	b2db      	uxtb	r3, r3
}
 8009800:	4618      	mov	r0, r3
 8009802:	f107 070c 	add.w	r7, r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr

0800980c <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d008      	beq.n	8009830 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	e007      	b.n	8009840 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800983a:	b29a      	uxth	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	801a      	strh	r2, [r3, #0]
  }
}
 8009840:	f107 070c 	add.w	r7, r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	bc80      	pop	{r7}
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop

0800984c <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8009858:	887b      	ldrh	r3, [r7, #2]
 800985a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800985e:	d108      	bne.n	8009872 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	801a      	strh	r2, [r3, #0]
 8009870:	e007      	b.n	8009882 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	b29b      	uxth	r3, r3
 8009878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800987c:	b29a      	uxth	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	801a      	strh	r2, [r3, #0]
  }
}
 8009882:	f107 070c 	add.w	r7, r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	bc80      	pop	{r7}
 800988a:	4770      	bx	lr

0800988c <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009898:	78fb      	ldrb	r3, [r7, #3]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d008      	beq.n	80098b0 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	f043 0320 	orr.w	r3, r3, #32
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	801a      	strh	r2, [r3, #0]
 80098ae:	e007      	b.n	80098c0 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	f023 0320 	bic.w	r3, r3, #32
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	801a      	strh	r2, [r3, #0]
  }
}
 80098c0:	f107 070c 	add.w	r7, r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bc80      	pop	{r7}
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop

080098cc <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8b1b      	ldrh	r3, [r3, #24]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80098de:	b29b      	uxth	r3, r3
 80098e0:	b2db      	uxtb	r3, r3
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	f107 070c 	add.w	r7, r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bc80      	pop	{r7}
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop

080098f0 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d008      	beq.n	8009914 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	889b      	ldrh	r3, [r3, #4]
 8009906:	b29b      	uxth	r3, r3
 8009908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800990c:	b29a      	uxth	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	809a      	strh	r2, [r3, #4]
 8009912:	e007      	b.n	8009924 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	889b      	ldrh	r3, [r3, #4]
 8009918:	b29b      	uxth	r3, r3
 800991a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	809a      	strh	r2, [r3, #4]
  }
}
 8009924:	f107 070c 	add.w	r7, r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	bc80      	pop	{r7}
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop

08009930 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	889b      	ldrh	r3, [r3, #4]
 8009946:	b29b      	uxth	r3, r3
 8009948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800994c:	b29a      	uxth	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	809a      	strh	r2, [r3, #4]
 8009952:	e007      	b.n	8009964 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	889b      	ldrh	r3, [r3, #4]
 8009958:	b29b      	uxth	r3, r3
 800995a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	809a      	strh	r2, [r3, #4]
  }
}
 8009964:	f107 070c 	add.w	r7, r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	bc80      	pop	{r7}
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop

08009970 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800997c:	f04f 0300 	mov.w	r3, #0
 8009980:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8009986:	78fa      	ldrb	r2, [r7, #3]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4413      	add	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
}
 8009994:	4618      	mov	r0, r3
 8009996:	f107 0714 	add.w	r7, r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	bc80      	pop	{r7}
 800999e:	4770      	bx	lr

080099a0 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	4613      	mov	r3, r2
 80099aa:	460a      	mov	r2, r1
 80099ac:	807a      	strh	r2, [r7, #2]
 80099ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80099b0:	787b      	ldrb	r3, [r7, #1]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d009      	beq.n	80099ca <I2C_ITConfig+0x2a>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	889b      	ldrh	r3, [r3, #4]
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	887b      	ldrh	r3, [r7, #2]
 80099be:	ea42 0303 	orr.w	r3, r2, r3
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	809a      	strh	r2, [r3, #4]
 80099c8:	e00b      	b.n	80099e2 <I2C_ITConfig+0x42>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	889b      	ldrh	r3, [r3, #4]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	887b      	ldrh	r3, [r7, #2]
 80099d2:	ea6f 0303 	mvn.w	r3, r3
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	ea02 0303 	and.w	r3, r2, r3
 80099dc:	b29a      	uxth	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	809a      	strh	r2, [r3, #4]
  }
}
 80099e2:	f107 070c 	add.w	r7, r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bc80      	pop	{r7}
 80099ea:	4770      	bx	lr

080099ec <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80099f6:	f04f 0300 	mov.w	r3, #0
 80099fa:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80099fc:	f04f 0300 	mov.w	r3, #0
 8009a00:	60fb      	str	r3, [r7, #12]
 8009a02:	f04f 0300 	mov.w	r3, #0
 8009a06:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8009a08:	f04f 0300 	mov.w	r3, #0
 8009a0c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8a9b      	ldrh	r3, [r3, #20]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	8b1b      	ldrh	r3, [r3, #24]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8009a24:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	ea42 0303 	orr.w	r3, r2, r3
 8009a2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a32:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	ea02 0203 	and.w	r2, r2, r3
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d103      	bne.n	8009a4a <I2C_CheckEvent+0x5e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8009a42:	f04f 0301 	mov.w	r3, #1
 8009a46:	75fb      	strb	r3, [r7, #23]
 8009a48:	e002      	b.n	8009a50 <I2C_CheckEvent+0x64>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	f107 071c 	add.w	r7, r7, #28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bc80      	pop	{r7}
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop

08009a60 <I2C_GetLastEvent>:
  *         in stm32f2xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8009a68:	f04f 0300 	mov.w	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8009a6e:	f04f 0300 	mov.w	r3, #0
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	f04f 0300 	mov.w	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	8a9b      	ldrh	r3, [r3, #20]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	8b1b      	ldrh	r3, [r3, #24]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	ea42 0303 	orr.w	r3, r2, r3
 8009a9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a9e:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8009aa0:	697b      	ldr	r3, [r7, #20]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f107 071c 	add.w	r7, r7, #28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop

08009ab0 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8009aba:	f04f 0300 	mov.w	r3, #0
 8009abe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8009ac0:	f04f 0300 	mov.w	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	f04f 0300 	mov.w	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8009ad6:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ade:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f103 0314 	add.w	r3, r3, #20
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	e007      	b.n	8009b00 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009af6:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f103 0318 	add.w	r3, r3, #24
 8009afe:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	ea02 0303 	and.w	r3, r2, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <I2C_GetFlagStatus+0x66>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8009b0e:	f04f 0301 	mov.w	r3, #1
 8009b12:	75fb      	strb	r3, [r7, #23]
 8009b14:	e002      	b.n	8009b1c <I2C_GetFlagStatus+0x6c>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f107 071c 	add.w	r7, r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bc80      	pop	{r7}
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop

08009b2c <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b42:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	ea6f 0303 	mvn.w	r3, r3
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	829a      	strh	r2, [r3, #20]
}
 8009b52:	f107 0714 	add.w	r7, r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr

08009b5c <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8009b66:	f04f 0300 	mov.w	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8009b6c:	f04f 0300 	mov.w	r3, #0
 8009b70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009b78:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	889b      	ldrh	r3, [r3, #4]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	ea02 0303 	and.w	r3, r2, r3
 8009b86:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b8e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	8a9b      	ldrh	r3, [r3, #20]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	461a      	mov	r2, r3
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	ea02 0303 	and.w	r3, r2, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d006      	beq.n	8009bb0 <I2C_GetITStatus+0x54>
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <I2C_GetITStatus+0x54>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8009ba8:	f04f 0301 	mov.w	r3, #1
 8009bac:	73fb      	strb	r3, [r7, #15]
 8009bae:	e002      	b.n	8009bb6 <I2C_GetITStatus+0x5a>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8009bb0:	f04f 0300 	mov.w	r3, #0
 8009bb4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f107 0714 	add.w	r7, r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr

08009bc4 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8009bce:	f04f 0300 	mov.w	r3, #0
 8009bd2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009bda:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	ea6f 0303 	mvn.w	r3, r3
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	829a      	strh	r2, [r3, #20]
}
 8009bea:	f107 0714 	add.w	r7, r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bc80      	pop	{r7}
 8009bf2:	4770      	bx	lr

08009bf4 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8009bfe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009c02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	601a      	str	r2, [r3, #0]
}
 8009c0a:	f107 070c 	add.w	r7, r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bc80      	pop	{r7}
 8009c12:	4770      	bx	lr

08009c14 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8009c1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009c22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c26:	79fa      	ldrb	r2, [r7, #7]
 8009c28:	605a      	str	r2, [r3, #4]
}
 8009c2a:	f107 070c 	add.w	r7, r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr

08009c34 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8009c3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009c42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c46:	88fa      	ldrh	r2, [r7, #6]
 8009c48:	609a      	str	r2, [r3, #8]
}
 8009c4a:	f107 070c 	add.w	r7, r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr

08009c54 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 8009c58:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009c5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c60:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009c64:	601a      	str	r2, [r3, #0]
}
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr

08009c6c <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 8009c70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009c74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c78:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009c7c:	601a      	str	r2, [r3, #0]
}
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr

08009c84 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8009c8e:	f04f 0300 	mov.w	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8009c94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009c98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	88fb      	ldrh	r3, [r7, #6]
 8009ca0:	ea02 0303 	and.w	r3, r2, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <IWDG_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 8009ca8:	f04f 0301 	mov.w	r3, #1
 8009cac:	73fb      	strb	r3, [r7, #15]
 8009cae:	e002      	b.n	8009cb6 <IWDG_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 8009cb0:	f04f 0300 	mov.w	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f107 0714 	add.w	r7, r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bc80      	pop	{r7}
 8009cc2:	4770      	bx	lr

08009cc4 <__WFI>:

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	bf30      	wfi
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bc80      	pop	{r7}
 8009cce:	4770      	bx	lr

08009cd0 <__WFE>:
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 8009cd0:	b480      	push	{r7}
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	bf20      	wfe
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc80      	pop	{r7}
 8009cda:	4770      	bx	lr

08009cdc <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8009ce0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009ce4:	f04f 0101 	mov.w	r1, #1
 8009ce8:	f000 fe26 	bl	800a938 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8009cec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009cf0:	f04f 0100 	mov.w	r1, #0
 8009cf4:	f000 fe20 	bl	800a938 <RCC_APB1PeriphResetCmd>
}
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8009d06:	f04f 0320 	mov.w	r3, #32
 8009d0a:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8009d0e:	79fa      	ldrb	r2, [r7, #7]
 8009d10:	601a      	str	r2, [r3, #0]
}
 8009d12:	f107 070c 	add.w	r7, r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bc80      	pop	{r7}
 8009d1a:	4770      	bx	lr

08009d1c <PWR_PVDLevelConfig>:
  *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
  * @note   Refer to the electrical characteristics of you device datasheet for more details. 
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8009d2a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009d2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009d3c:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	ea42 0303 	orr.w	r3, r2, r3
 8009d46:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8009d48:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009d4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	f107 0714 	add.w	r7, r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bc80      	pop	{r7}
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop

08009d60 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8009d6a:	f04f 0310 	mov.w	r3, #16
 8009d6e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8009d72:	79fa      	ldrb	r2, [r7, #7]
 8009d74:	601a      	str	r2, [r3, #0]
}
 8009d76:	f107 070c 	add.w	r7, r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bc80      	pop	{r7}
 8009d7e:	4770      	bx	lr

08009d80 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8009d8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009d8e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8009d92:	79fa      	ldrb	r2, [r7, #7]
 8009d94:	601a      	str	r2, [r3, #0]
}
 8009d96:	f107 070c 	add.w	r7, r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bc80      	pop	{r7}
 8009d9e:	4770      	bx	lr

08009da0 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8009daa:	f04f 03a4 	mov.w	r3, #164	; 0xa4
 8009dae:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8009db2:	79fa      	ldrb	r2, [r7, #7]
 8009db4:	601a      	str	r2, [r3, #0]
}
 8009db6:	f107 070c 	add.w	r7, r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bc80      	pop	{r7}
 8009dbe:	4770      	bx	lr

08009dc0 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8009dca:	f04f 0324 	mov.w	r3, #36	; 0x24
 8009dce:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8009dd2:	79fa      	ldrb	r2, [r7, #7]
 8009dd4:	601a      	str	r2, [r3, #0]
}
 8009dd6:	f107 070c 	add.w	r7, r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bc80      	pop	{r7}
 8009dde:	4770      	bx	lr

08009de0 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8009dec:	f04f 0300 	mov.w	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8009df2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009df6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f023 0303 	bic.w	r3, r3, #3
 8009e04:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	ea42 0303 	orr.w	r3, r2, r3
 8009e0e:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8009e10:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009e14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8009e1c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8009e20:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8009e24:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8009e28:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8009e2c:	6912      	ldr	r2, [r2, #16]
 8009e2e:	f042 0204 	orr.w	r2, r2, #4
 8009e32:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d102      	bne.n	8009e40 <PWR_EnterSTOPMode+0x60>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8009e3a:	f7ff ff43 	bl	8009cc4 <__WFI>
 8009e3e:	e001      	b.n	8009e44 <PWR_EnterSTOPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8009e40:	f7ff ff46 	bl	8009cd0 <__WFE>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8009e44:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8009e48:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8009e4c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8009e50:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8009e54:	6912      	ldr	r2, [r2, #16]
 8009e56:	f022 0204 	bic.w	r2, r2, #4
 8009e5a:	611a      	str	r2, [r3, #16]
}
 8009e5c:	f107 0710 	add.w	r7, r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8009e68:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009e6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e70:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8009e74:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	f042 0204 	orr.w	r2, r2, #4
 8009e7e:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8009e80:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009e84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009e88:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8009e8c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	f042 0202 	orr.w	r2, r2, #2
 8009e96:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8009e98:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8009e9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8009ea0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8009ea4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8009ea8:	6912      	ldr	r2, [r2, #16]
 8009eaa:	f042 0204 	orr.w	r2, r2, #4
 8009eae:	611a      	str	r2, [r3, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009eb0:	f7ff ff08 	bl	8009cc4 <__WFI>
}
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <PWR_GetFlagStatus>:
  *                  when the device wakes up from Standby mode or by a system reset 
  *                  or power reset.  
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8009ec6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009eca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	ea02 0303 	and.w	r3, r2, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <PWR_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8009eda:	f04f 0301 	mov.w	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
 8009ee0:	e002      	b.n	8009ee8 <PWR_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	f107 0714 	add.w	r7, r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bc80      	pop	{r7}
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop

08009ef8 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8009f00:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009f04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009f08:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8009f0c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009f10:	6811      	ldr	r1, [r2, #0]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8009f18:	ea41 0202 	orr.w	r2, r1, r2
 8009f1c:	601a      	str	r2, [r3, #0]
}
 8009f1e:	f107 070c 	add.w	r7, r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bc80      	pop	{r7}
 8009f26:	4770      	bx	lr

08009f28 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009f2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f34:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	f042 0201 	orr.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009f44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009f52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f62:	6812      	ldr	r2, [r2, #0]
 8009f64:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8009f68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009f6c:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009f6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f76:	f243 0210 	movw	r2, #12304	; 0x3010
 8009f7a:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8009f7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009f80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f96:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009f98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	60da      	str	r2, [r3, #12]
}
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bc80      	pop	{r7}
 8009faa:	4770      	bx	lr

08009fac <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8009fb6:	f643 0302 	movw	r3, #14338	; 0x3802
 8009fba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009fbe:	f04f 0200 	mov.w	r2, #0
 8009fc2:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8009fc4:	f643 0302 	movw	r3, #14338	; 0x3802
 8009fc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009fcc:	79fa      	ldrb	r2, [r7, #7]
 8009fce:	701a      	strb	r2, [r3, #0]
}
 8009fd0:	f107 070c 	add.w	r7, r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bc80      	pop	{r7}
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop

08009fdc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8009fe2:	f04f 0300 	mov.w	r3, #0
 8009fe6:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8009fee:	f04f 0300 	mov.w	r3, #0
 8009ff2:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8009ff4:	f04f 0031 	mov.w	r0, #49	; 0x31
 8009ff8:	f000 fe04 	bl	800ac04 <RCC_GetFlagStatus>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	f103 0301 	add.w	r3, r3, #1
 800a006:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a00e:	d002      	beq.n	800a016 <RCC_WaitForHSEStartUp+0x3a>
 800a010:	79bb      	ldrb	r3, [r7, #6]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d0ee      	beq.n	8009ff4 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800a016:	f04f 0031 	mov.w	r0, #49	; 0x31
 800a01a:	f000 fdf3 	bl	800ac04 <RCC_GetFlagStatus>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 800a024:	f04f 0301 	mov.w	r3, #1
 800a028:	71fb      	strb	r3, [r7, #7]
 800a02a:	e002      	b.n	800a032 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 800a02c:	f04f 0300 	mov.w	r3, #0
 800a030:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800a032:	79fb      	ldrb	r3, [r7, #7]
}
 800a034:	4618      	mov	r0, r3
 800a036:	f107 0708 	add.w	r7, r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop

0800a040 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800a050:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a054:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a062:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	ea42 0303 	orr.w	r3, r2, r3
 800a070:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800a072:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a076:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	601a      	str	r2, [r3, #0]
}
 800a07e:	f107 0714 	add.w	r7, r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	bc80      	pop	{r7}
 800a086:	4770      	bx	lr

0800a088 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800a092:	f04f 0300 	mov.w	r3, #0
 800a096:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800a09a:	79fa      	ldrb	r2, [r7, #7]
 800a09c:	601a      	str	r2, [r3, #0]
}
 800a09e:	f107 070c 	add.w	r7, r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bc80      	pop	{r7}
 800a0a6:	4770      	bx	lr

0800a0a8 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800a0b2:	f643 0370 	movw	r3, #14448	; 0x3870
 800a0b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a0ba:	f04f 0200 	mov.w	r2, #0
 800a0be:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800a0c0:	f643 0370 	movw	r3, #14448	; 0x3870
 800a0c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a0c8:	f04f 0200 	mov.w	r2, #0
 800a0cc:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d002      	beq.n	800a0da <RCC_LSEConfig+0x32>
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d008      	beq.n	800a0ea <RCC_LSEConfig+0x42>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 800a0d8:	e00f      	b.n	800a0fa <RCC_LSEConfig+0x52>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800a0da:	f643 0370 	movw	r3, #14448	; 0x3870
 800a0de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a0e2:	f04f 0201 	mov.w	r2, #1
 800a0e6:	701a      	strb	r2, [r3, #0]
      break;
 800a0e8:	e007      	b.n	800a0fa <RCC_LSEConfig+0x52>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800a0ea:	f643 0370 	movw	r3, #14448	; 0x3870
 800a0ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a0f2:	f04f 0205 	mov.w	r2, #5
 800a0f6:	701a      	strb	r2, [r3, #0]
      break;
 800a0f8:	bf00      	nop
    default:
      break;
  }
}
 800a0fa:	f107 070c 	add.w	r7, r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bc80      	pop	{r7}
 800a102:	4770      	bx	lr

0800a104 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800a10e:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800a112:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800a116:	79fa      	ldrb	r2, [r7, #7]
 800a118:	601a      	str	r2, [r3, #0]
}
 800a11a:	f107 070c 	add.w	r7, r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	bc80      	pop	{r7}
 800a122:	4770      	bx	lr

0800a124 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800a132:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a136:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	ea4f 1182 	mov.w	r1, r2, lsl #6
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	ea41 0102 	orr.w	r1, r1, r2
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a14c:	f102 32ff 	add.w	r2, r2, #4294967295
 800a150:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800a154:	ea41 0102 	orr.w	r1, r1, r2
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	ea41 0102 	orr.w	r1, r1, r2
                 (PLLQ << 24);
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800a164:	ea41 0202 	orr.w	r2, r1, r2
 800a168:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800a16a:	f107 0714 	add.w	r7, r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr

0800a174 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800a17e:	f04f 0360 	mov.w	r3, #96	; 0x60
 800a182:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800a186:	79fa      	ldrb	r2, [r7, #7]
 800a188:	601a      	str	r2, [r3, #0]
}
 800a18a:	f107 070c 	add.w	r7, r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	bc80      	pop	{r7}
 800a192:	4770      	bx	lr

0800a194 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800a19e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a1a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	ea4f 1182 	mov.w	r1, r2, lsl #6
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	ea4f 7202 	mov.w	r2, r2, lsl #28
 800a1b2:	ea41 0202 	orr.w	r2, r1, r2
 800a1b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a1ba:	f107 070c 	add.w	r7, r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800a1ce:	f04f 0368 	mov.w	r3, #104	; 0x68
 800a1d2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800a1d6:	79fa      	ldrb	r2, [r7, #7]
 800a1d8:	601a      	str	r2, [r3, #0]
}
 800a1da:	f107 070c 	add.w	r7, r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bc80      	pop	{r7}
 800a1e2:	4770      	bx	lr

0800a1e4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800a1ee:	f04f 034c 	mov.w	r3, #76	; 0x4c
 800a1f2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800a1f6:	79fa      	ldrb	r2, [r7, #7]
 800a1f8:	601a      	str	r2, [r3, #0]
}
 800a1fa:	f107 070c 	add.w	r7, r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bc80      	pop	{r7}
 800a202:	4770      	bx	lr

0800a204 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a20e:	f04f 0300 	mov.w	r3, #0
 800a212:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800a214:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a218:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800a226:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	ea42 0303 	orr.w	r3, r2, r3
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	ea42 0303 	orr.w	r3, r2, r3
 800a236:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800a238:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a23c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	609a      	str	r2, [r3, #8]
}
 800a244:	f107 0714 	add.w	r7, r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	bc80      	pop	{r7}
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop

0800a250 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a25a:	f04f 0300 	mov.w	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800a260:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a264:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a272:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	ea42 0303 	orr.w	r3, r2, r3
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	ea42 0303 	orr.w	r3, r2, r3
 800a282:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800a284:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a288:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	609a      	str	r2, [r3, #8]
}
 800a290:	f107 0714 	add.w	r7, r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop

0800a29c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800a2aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a2ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f023 0303 	bic.w	r3, r3, #3
 800a2bc:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	ea42 0303 	orr.w	r3, r2, r3
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800a2c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a2cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	609a      	str	r2, [r3, #8]
}
 800a2d4:	f107 0714 	add.w	r7, r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bc80      	pop	{r7}
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop

0800a2e0 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800a2e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a2e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	f003 030c 	and.w	r3, r3, #12
 800a2f4:	b2db      	uxtb	r3, r3
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop

0800a300 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a308:	f04f 0300 	mov.w	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800a30e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a312:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a320:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	ea42 0303 	orr.w	r3, r2, r3
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800a32c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a330:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	609a      	str	r2, [r3, #8]
}
 800a338:	f107 0714 	add.w	r7, r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop

0800a344 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a34c:	f04f 0300 	mov.w	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800a352:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a356:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a364:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	ea42 0303 	orr.w	r3, r2, r3
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800a370:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a374:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	609a      	str	r2, [r3, #8]
}
 800a37c:	f107 0714 	add.w	r7, r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	bc80      	pop	{r7}
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop

0800a388 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a390:	f04f 0300 	mov.w	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800a396:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a39a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a3a8:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	ea42 0303 	orr.w	r3, r2, r3
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800a3b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a3bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	609a      	str	r2, [r3, #8]
}
 800a3c4:	f107 0714 	add.w	r7, r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop

0800a3d0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b089      	sub	sp, #36	; 0x24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800a3d8:	f04f 0300 	mov.w	r3, #0
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	f04f 0300 	mov.w	r3, #0
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	f04f 0300 	mov.w	r3, #0
 800a3e8:	61fb      	str	r3, [r7, #28]
 800a3ea:	f04f 0302 	mov.w	r3, #2
 800a3ee:	613b      	str	r3, [r7, #16]
 800a3f0:	f04f 0300 	mov.w	r3, #0
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	f04f 0302 	mov.w	r3, #2
 800a3fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800a3fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a400:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f003 030c 	and.w	r3, r3, #12
 800a40a:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d00a      	beq.n	800a428 <RCC_GetClocksFreq+0x58>
 800a412:	2b08      	cmp	r3, #8
 800a414:	d00f      	beq.n	800a436 <RCC_GetClocksFreq+0x66>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d162      	bne.n	800a4e0 <RCC_GetClocksFreq+0x110>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800a420:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800a424:	6013      	str	r3, [r2, #0]
      break;
 800a426:	e062      	b.n	800a4ee <RCC_GetClocksFreq+0x11e>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	f647 0340 	movw	r3, #30784	; 0x7840
 800a42e:	f2c0 137d 	movt	r3, #381	; 0x17d
 800a432:	6013      	str	r3, [r2, #0]
      break;
 800a434:	e05b      	b.n	800a4ee <RCC_GetClocksFreq+0x11e>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800a436:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a43a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a444:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800a448:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a44a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a44e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a458:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d015      	beq.n	800a48c <RCC_GetClocksFreq+0xbc>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800a460:	f647 0340 	movw	r3, #30784	; 0x7840
 800a464:	f2c0 137d 	movt	r3, #381	; 0x17d
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a46e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a472:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a476:	6859      	ldr	r1, [r3, #4]
 800a478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a47c:	ea01 0303 	and.w	r3, r1, r3
 800a480:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800a484:	fb03 f302 	mul.w	r3, r3, r2
 800a488:	61fb      	str	r3, [r7, #28]
 800a48a:	e014      	b.n	800a4b6 <RCC_GetClocksFreq+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800a48c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800a490:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	fbb3 f2f2 	udiv	r2, r3, r2
 800a49a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a49e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a4a2:	6859      	ldr	r1, [r3, #4]
 800a4a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a4a8:	ea01 0303 	and.w	r3, r1, r3
 800a4ac:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800a4b0:	fb03 f302 	mul.w	r3, r3, r2
 800a4b4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800a4b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a4ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4c4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a4c8:	f103 0301 	add.w	r3, r3, #1
 800a4cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4d0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800a4d2:	69fa      	ldr	r2, [r7, #28]
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
      break;
 800a4de:	e006      	b.n	800a4ee <RCC_GetClocksFreq+0x11e>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800a4e6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800a4ea:	6013      	str	r3, [r2, #0]
      break;
 800a4ec:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800a4ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a4f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800a504:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800a506:	f240 0328 	movw	r3, #40	; 0x28
 800a50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	4413      	add	r3, r2
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	fa22 f203 	lsr.w	r2, r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800a526:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a52a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800a534:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800a53c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800a53e:	f240 0328 	movw	r3, #40	; 0x28
 800a542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a546:	69ba      	ldr	r2, [r7, #24]
 800a548:	4413      	add	r3, r2
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	fa22 f203 	lsr.w	r2, r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800a55e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a562:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a56c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800a574:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800a576:	f240 0328 	movw	r3, #40	; 0x28
 800a57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a57e:	69ba      	ldr	r2, [r7, #24]
 800a580:	4413      	add	r3, r2
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	fa22 f203 	lsr.w	r2, r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	60da      	str	r2, [r3, #12]
}
 800a596:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr

0800a5a0 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a5a8:	f04f 0300 	mov.w	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5b8:	d118      	bne.n	800a5ec <RCC_RTCCLKConfig+0x4c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800a5ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a5be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a5cc:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a5d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	ea42 0303 	orr.w	r3, r2, r3
 800a5de:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800a5e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a5e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800a5ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a5f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a5f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a5f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a5fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800a604:	ea4f 5212 	mov.w	r2, r2, lsr #20
 800a608:	ea41 0202 	orr.w	r2, r1, r2
 800a60c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a60e:	f107 0714 	add.w	r7, r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr

0800a618 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800a622:	f640 633c 	movw	r3, #3644	; 0xe3c
 800a626:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800a62a:	79fa      	ldrb	r2, [r7, #7]
 800a62c:	601a      	str	r2, [r3, #0]
}
 800a62e:	f107 070c 	add.w	r7, r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	bc80      	pop	{r7}
 800a636:	4770      	bx	lr

0800a638 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800a642:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 800a646:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800a64a:	79fa      	ldrb	r2, [r7, #7]
 800a64c:	601a      	str	r2, [r3, #0]
}
 800a64e:	f107 070c 	add.w	r7, r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	bc80      	pop	{r7}
 800a656:	4770      	bx	lr

0800a658 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800a660:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 800a664:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]
}
 800a66c:	f107 070c 	add.w	r7, r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	bc80      	pop	{r7}
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop

0800a678 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a684:	78fb      	ldrb	r3, [r7, #3]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00d      	beq.n	800a6a6 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800a68a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a68e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a692:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a696:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a69a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	ea41 0202 	orr.w	r2, r1, r2
 800a6a2:	631a      	str	r2, [r3, #48]	; 0x30
 800a6a4:	e00e      	b.n	800a6c4 <RCC_AHB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800a6a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a6aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a6ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a6b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a6b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	ea6f 0202 	mvn.w	r2, r2
 800a6be:	ea01 0202 	and.w	r2, r1, r2
 800a6c2:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800a6c4:	f107 070c 	add.w	r7, r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bc80      	pop	{r7}
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop

0800a6d0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a6dc:	78fb      	ldrb	r3, [r7, #3]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00d      	beq.n	800a6fe <RCC_AHB2PeriphClockCmd+0x2e>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800a6e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a6e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a6ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a6ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a6f2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	ea41 0202 	orr.w	r2, r1, r2
 800a6fa:	635a      	str	r2, [r3, #52]	; 0x34
 800a6fc:	e00e      	b.n	800a71c <RCC_AHB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800a6fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a702:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a706:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a70a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a70e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	ea6f 0202 	mvn.w	r2, r2
 800a716:	ea01 0202 	and.w	r2, r1, r2
 800a71a:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800a71c:	f107 070c 	add.w	r7, r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	bc80      	pop	{r7}
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop

0800a728 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00d      	beq.n	800a756 <RCC_AHB3PeriphClockCmd+0x2e>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800a73a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a73e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a742:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a746:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a74a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	ea41 0202 	orr.w	r2, r1, r2
 800a752:	639a      	str	r2, [r3, #56]	; 0x38
 800a754:	e00e      	b.n	800a774 <RCC_AHB3PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800a756:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a75a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a75e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a762:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a766:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	ea6f 0202 	mvn.w	r2, r2
 800a76e:	ea01 0202 	and.w	r2, r1, r2
 800a772:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800a774:	f107 070c 	add.w	r7, r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	bc80      	pop	{r7}
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop

0800a780 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00d      	beq.n	800a7ae <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800a792:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a796:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a79a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a79e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a7a2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	ea41 0202 	orr.w	r2, r1, r2
 800a7aa:	641a      	str	r2, [r3, #64]	; 0x40
 800a7ac:	e00e      	b.n	800a7cc <RCC_APB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800a7ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a7b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a7b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a7ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a7be:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	ea6f 0202 	mvn.w	r2, r2
 800a7c6:	ea01 0202 	and.w	r2, r1, r2
 800a7ca:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800a7cc:	f107 070c 	add.w	r7, r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bc80      	pop	{r7}
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop

0800a7d8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800a7ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a7ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a7f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a7f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a7fa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	ea41 0202 	orr.w	r2, r1, r2
 800a802:	645a      	str	r2, [r3, #68]	; 0x44
 800a804:	e00e      	b.n	800a824 <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800a806:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a80a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a80e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a812:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a816:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	ea6f 0202 	mvn.w	r2, r2
 800a81e:	ea01 0202 	and.w	r2, r1, r2
 800a822:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800a824:	f107 070c 	add.w	r7, r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	bc80      	pop	{r7}
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop

0800a830 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00d      	beq.n	800a85e <RCC_AHB1PeriphResetCmd+0x2e>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800a842:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a846:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a84a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a84e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a852:	6911      	ldr	r1, [r2, #16]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	ea41 0202 	orr.w	r2, r1, r2
 800a85a:	611a      	str	r2, [r3, #16]
 800a85c:	e00e      	b.n	800a87c <RCC_AHB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800a85e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a862:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a866:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a86a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a86e:	6911      	ldr	r1, [r2, #16]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	ea6f 0202 	mvn.w	r2, r2
 800a876:	ea01 0202 	and.w	r2, r1, r2
 800a87a:	611a      	str	r2, [r3, #16]
  }
}
 800a87c:	f107 070c 	add.w	r7, r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	bc80      	pop	{r7}
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop

0800a888 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a894:	78fb      	ldrb	r3, [r7, #3]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00d      	beq.n	800a8b6 <RCC_AHB2PeriphResetCmd+0x2e>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800a89a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a89e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a8a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a8a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a8aa:	6951      	ldr	r1, [r2, #20]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	ea41 0202 	orr.w	r2, r1, r2
 800a8b2:	615a      	str	r2, [r3, #20]
 800a8b4:	e00e      	b.n	800a8d4 <RCC_AHB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800a8b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a8ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a8be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a8c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a8c6:	6951      	ldr	r1, [r2, #20]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	ea6f 0202 	mvn.w	r2, r2
 800a8ce:	ea01 0202 	and.w	r2, r1, r2
 800a8d2:	615a      	str	r2, [r3, #20]
  }
}
 800a8d4:	f107 070c 	add.w	r7, r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop

0800a8e0 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a8ec:	78fb      	ldrb	r3, [r7, #3]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00d      	beq.n	800a90e <RCC_AHB3PeriphResetCmd+0x2e>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800a8f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a8f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a8fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a8fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a902:	6991      	ldr	r1, [r2, #24]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	ea41 0202 	orr.w	r2, r1, r2
 800a90a:	619a      	str	r2, [r3, #24]
 800a90c:	e00e      	b.n	800a92c <RCC_AHB3PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800a90e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a912:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a916:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a91a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a91e:	6991      	ldr	r1, [r2, #24]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	ea6f 0202 	mvn.w	r2, r2
 800a926:	ea01 0202 	and.w	r2, r1, r2
 800a92a:	619a      	str	r2, [r3, #24]
  }
}
 800a92c:	f107 070c 	add.w	r7, r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	bc80      	pop	{r7}
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop

0800a938 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	460b      	mov	r3, r1
 800a942:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00d      	beq.n	800a966 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800a94a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a94e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a952:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a956:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a95a:	6a11      	ldr	r1, [r2, #32]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	ea41 0202 	orr.w	r2, r1, r2
 800a962:	621a      	str	r2, [r3, #32]
 800a964:	e00e      	b.n	800a984 <RCC_APB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800a966:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a96a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a96e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a972:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a976:	6a11      	ldr	r1, [r2, #32]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	ea6f 0202 	mvn.w	r2, r2
 800a97e:	ea01 0202 	and.w	r2, r1, r2
 800a982:	621a      	str	r2, [r3, #32]
  }
}
 800a984:	f107 070c 	add.w	r7, r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	bc80      	pop	{r7}
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop

0800a990 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a99c:	78fb      	ldrb	r3, [r7, #3]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800a9a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a9a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a9aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a9ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a9b2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	ea41 0202 	orr.w	r2, r1, r2
 800a9ba:	625a      	str	r2, [r3, #36]	; 0x24
 800a9bc:	e00e      	b.n	800a9dc <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800a9be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a9c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a9c6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a9ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a9ce:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	ea6f 0202 	mvn.w	r2, r2
 800a9d6:	ea01 0202 	and.w	r2, r1, r2
 800a9da:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a9dc:	f107 070c 	add.w	r7, r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bc80      	pop	{r7}
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop

0800a9e8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00d      	beq.n	800aa16 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800a9fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a9fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aa02:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800aa06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800aa0a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	ea41 0202 	orr.w	r2, r1, r2
 800aa12:	651a      	str	r2, [r3, #80]	; 0x50
 800aa14:	e00e      	b.n	800aa34 <RCC_AHB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800aa16:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800aa1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aa1e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800aa22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800aa26:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	ea6f 0202 	mvn.w	r2, r2
 800aa2e:	ea01 0202 	and.w	r2, r1, r2
 800aa32:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800aa34:	f107 070c 	add.w	r7, r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bc80      	pop	{r7}
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop

0800aa40 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00d      	beq.n	800aa6e <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800aa52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800aa56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aa5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800aa5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800aa62:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	ea41 0202 	orr.w	r2, r1, r2
 800aa6a:	655a      	str	r2, [r3, #84]	; 0x54
 800aa6c:	e00e      	b.n	800aa8c <RCC_AHB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800aa6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800aa72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aa76:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800aa7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800aa7e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	ea6f 0202 	mvn.w	r2, r2
 800aa86:	ea01 0202 	and.w	r2, r1, r2
 800aa8a:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800aa8c:	f107 070c 	add.w	r7, r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bc80      	pop	{r7}
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop

0800aa98 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00d      	beq.n	800aac6 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800aaaa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800aaae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aab2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800aab6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800aaba:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	ea41 0202 	orr.w	r2, r1, r2
 800aac2:	659a      	str	r2, [r3, #88]	; 0x58
 800aac4:	e00e      	b.n	800aae4 <RCC_AHB3PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800aac6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800aaca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aace:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800aad2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800aad6:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	ea6f 0202 	mvn.w	r2, r2
 800aade:	ea01 0202 	and.w	r2, r1, r2
 800aae2:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800aae4:	f107 070c 	add.w	r7, r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bc80      	pop	{r7}
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop

0800aaf0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800aafc:	78fb      	ldrb	r3, [r7, #3]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00d      	beq.n	800ab1e <RCC_APB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800ab02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ab06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ab0a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ab0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ab12:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	ea41 0202 	orr.w	r2, r1, r2
 800ab1a:	661a      	str	r2, [r3, #96]	; 0x60
 800ab1c:	e00e      	b.n	800ab3c <RCC_APB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800ab1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ab22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ab26:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ab2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ab2e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	ea6f 0202 	mvn.w	r2, r2
 800ab36:	ea01 0202 	and.w	r2, r1, r2
 800ab3a:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800ab3c:	f107 070c 	add.w	r7, r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bc80      	pop	{r7}
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop

0800ab48 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ab54:	78fb      	ldrb	r3, [r7, #3]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00d      	beq.n	800ab76 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800ab5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ab5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ab62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ab66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ab6a:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	ea41 0202 	orr.w	r2, r1, r2
 800ab72:	665a      	str	r2, [r3, #100]	; 0x64
 800ab74:	e00e      	b.n	800ab94 <RCC_APB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800ab76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ab7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ab7e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ab82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ab86:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	ea6f 0202 	mvn.w	r2, r2
 800ab8e:	ea01 0202 	and.w	r2, r1, r2
 800ab92:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800ab94:	f107 070c 	add.w	r7, r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bc80      	pop	{r7}
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop

0800aba0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	71fa      	strb	r2, [r7, #7]
 800abac:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800abae:	79bb      	ldrb	r3, [r7, #6]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00f      	beq.n	800abd4 <RCC_ITConfig+0x34>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800abb4:	f643 030d 	movw	r3, #14349	; 0x380d
 800abb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800abbc:	f643 020d 	movw	r2, #14349	; 0x380d
 800abc0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800abc4:	7812      	ldrb	r2, [r2, #0]
 800abc6:	b2d1      	uxtb	r1, r2
 800abc8:	79fa      	ldrb	r2, [r7, #7]
 800abca:	ea41 0202 	orr.w	r2, r1, r2
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	701a      	strb	r2, [r3, #0]
 800abd2:	e011      	b.n	800abf8 <RCC_ITConfig+0x58>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800abd4:	f643 030d 	movw	r3, #14349	; 0x380d
 800abd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800abdc:	f643 020d 	movw	r2, #14349	; 0x380d
 800abe0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800abe4:	7812      	ldrb	r2, [r2, #0]
 800abe6:	b2d1      	uxtb	r1, r2
 800abe8:	79fa      	ldrb	r2, [r7, #7]
 800abea:	ea6f 0202 	mvn.w	r2, r2
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	ea01 0202 	and.w	r2, r1, r2
 800abf4:	b2d2      	uxtb	r2, r2
 800abf6:	701a      	strb	r2, [r3, #0]
  }
}
 800abf8:	f107 070c 	add.w	r7, r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bc80      	pop	{r7}
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop

0800ac04 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800ac0e:	f04f 0300 	mov.w	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800ac14:	f04f 0300 	mov.w	r3, #0
 800ac18:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d106      	bne.n	800ac3e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 800ac30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ac34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	e00f      	b.n	800ac5e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d106      	bne.n	800ac52 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800ac44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ac48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ac4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4e:	617b      	str	r3, [r7, #20]
 800ac50:	e005      	b.n	800ac5e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800ac52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ac56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ac5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac5c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800ac5e:	79fb      	ldrb	r3, [r7, #7]
 800ac60:	f003 031f 	and.w	r3, r3, #31
 800ac64:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d003      	beq.n	800ac80 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 800ac78:	f04f 0301 	mov.w	r3, #1
 800ac7c:	74fb      	strb	r3, [r7, #19]
 800ac7e:	e002      	b.n	800ac86 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800ac86:	7cfb      	ldrb	r3, [r7, #19]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f107 071c 	add.w	r7, r7, #28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bc80      	pop	{r7}
 800ac92:	4770      	bx	lr

0800ac94 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800ac98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ac9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800aca0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800aca4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800aca8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800acaa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800acae:	675a      	str	r2, [r3, #116]	; 0x74
}
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bc80      	pop	{r7}
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop

0800acb8 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800acc2:	f04f 0300 	mov.w	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800acc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800accc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800acd0:	68da      	ldr	r2, [r3, #12]
 800acd2:	79fb      	ldrb	r3, [r7, #7]
 800acd4:	ea02 0303 	and.w	r3, r2, r3
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <RCC_GetITStatus+0x2c>
  {
    bitstatus = SET;
 800acdc:	f04f 0301 	mov.w	r3, #1
 800ace0:	73fb      	strb	r3, [r7, #15]
 800ace2:	e002      	b.n	800acea <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 800ace4:	f04f 0300 	mov.w	r3, #0
 800ace8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800acea:	7bfb      	ldrb	r3, [r7, #15]
}
 800acec:	4618      	mov	r0, r3
 800acee:	f107 0714 	add.w	r7, r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bc80      	pop	{r7}
 800acf6:	4770      	bx	lr

0800acf8 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800ad02:	f643 030e 	movw	r3, #14350	; 0x380e
 800ad06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ad0a:	79fa      	ldrb	r2, [r7, #7]
 800ad0c:	701a      	strb	r2, [r3, #0]
}
 800ad0e:	f107 070c 	add.w	r7, r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bc80      	pop	{r7}
 800ad16:	4770      	bx	lr

0800ad18 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800ad1c:	f04f 0040 	mov.w	r0, #64	; 0x40
 800ad20:	f04f 0101 	mov.w	r1, #1
 800ad24:	f7ff fdb0 	bl	800a888 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800ad28:	f04f 0040 	mov.w	r0, #64	; 0x40
 800ad2c:	f04f 0100 	mov.w	r1, #0
 800ad30:	f7ff fdaa 	bl	800a888 <RCC_AHB2PeriphResetCmd>
}
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00c      	beq.n	800ad62 <RNG_Cmd+0x2a>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800ad48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad4c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ad50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad54:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800ad58:	6812      	ldr	r2, [r2, #0]
 800ad5a:	f042 0204 	orr.w	r2, r2, #4
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	e00b      	b.n	800ad7a <RNG_Cmd+0x42>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 800ad62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad66:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ad6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad6e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800ad72:	6812      	ldr	r2, [r2, #0]
 800ad74:	f022 0204 	bic.w	r2, r2, #4
 800ad78:	601a      	str	r2, [r3, #0]
  }
}
 800ad7a:	f107 070c 	add.w	r7, r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bc80      	pop	{r7}
 800ad82:	4770      	bx	lr

0800ad84 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 800ad88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad8c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ad90:	689b      	ldr	r3, [r3, #8]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bc80      	pop	{r7}
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop

0800ad9c <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00c      	beq.n	800adc6 <RNG_ITConfig+0x2a>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800adac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adb0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800adb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adb8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800adbc:	6812      	ldr	r2, [r2, #0]
 800adbe:	f042 0208 	orr.w	r2, r2, #8
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	e00b      	b.n	800adde <RNG_ITConfig+0x42>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 800adc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adca:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800adce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800add2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800add6:	6812      	ldr	r2, [r2, #0]
 800add8:	f022 0208 	bic.w	r2, r2, #8
 800addc:	601a      	str	r2, [r3, #0]
  }
}
 800adde:	f107 070c 	add.w	r7, r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bc80      	pop	{r7}
 800ade6:	4770      	bx	lr

0800ade8 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800adf2:	f04f 0300 	mov.w	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800adf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adfc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	79fb      	ldrb	r3, [r7, #7]
 800ae04:	ea02 0303 	and.w	r3, r2, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <RNG_GetFlagStatus+0x2c>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800ae0c:	f04f 0301 	mov.w	r3, #1
 800ae10:	73fb      	strb	r3, [r7, #15]
 800ae12:	e002      	b.n	800ae1a <RNG_GetFlagStatus+0x32>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 800ae14:	f04f 0300 	mov.w	r3, #0
 800ae18:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f107 0714 	add.w	r7, r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bc80      	pop	{r7}
 800ae26:	4770      	bx	lr

0800ae28 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800ae32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae36:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ae3a:	79fa      	ldrb	r2, [r7, #7]
 800ae3c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800ae40:	ea6f 0202 	mvn.w	r2, r2
 800ae44:	605a      	str	r2, [r3, #4]
}
 800ae46:	f107 070c 	add.w	r7, r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bc80      	pop	{r7}
 800ae4e:	4770      	bx	lr

0800ae50 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800ae60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae64:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	79fb      	ldrb	r3, [r7, #7]
 800ae6c:	ea02 0303 	and.w	r3, r2, r3
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <RNG_GetITStatus+0x2c>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800ae74:	f04f 0301 	mov.w	r3, #1
 800ae78:	73fb      	strb	r3, [r7, #15]
 800ae7a:	e002      	b.n	800ae82 <RNG_GetITStatus+0x32>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800ae7c:	f04f 0300 	mov.w	r3, #0
 800ae80:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	f107 0714 	add.w	r7, r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bc80      	pop	{r7}
 800ae8e:	4770      	bx	lr

0800ae90 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800ae9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae9e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aea2:	79fa      	ldrb	r2, [r7, #7]
 800aea4:	ea6f 0202 	mvn.w	r2, r2
 800aea8:	b2d2      	uxtb	r2, r2
 800aeaa:	605a      	str	r2, [r3, #4]
}
 800aeac:	f107 070c 	add.w	r7, r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bc80      	pop	{r7}
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop

0800aeb8 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 800aec4:	f04f 0300 	mov.w	r3, #0
 800aec8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800aeca:	f04f 0300 	mov.w	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aed0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aed4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aed8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800aedc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800aede:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aee2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aee6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800aeea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800aeec:	f000 f936 	bl	800b15c <RTC_EnterInitMode>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d103      	bne.n	800aefe <RTC_DeInit+0x46>
  {
    status = ERROR;
 800aef6:	f04f 0300 	mov.w	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]
 800aefc:	e084      	b.n	800b008 <RTC_DeInit+0x150>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800aefe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af06:	f04f 0200 	mov.w	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 800af0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af14:	f242 1201 	movw	r2, #8449	; 0x2101
 800af18:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800af1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af22:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800af26:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800af2a:	6892      	ldr	r2, [r2, #8]
 800af2c:	f002 0207 	and.w	r2, r2, #7
 800af30:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800af32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f003 0304 	and.w	r3, r3, #4
 800af40:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f103 0301 	add.w	r3, r3, #1
 800af48:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af50:	d002      	beq.n	800af58 <RTC_DeInit+0xa0>
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0ec      	beq.n	800af32 <RTC_DeInit+0x7a>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800af58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d103      	bne.n	800af72 <RTC_DeInit+0xba>
    {
      status = ERROR;
 800af6a:	f04f 0300 	mov.w	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
 800af70:	e04a      	b.n	800b008 <RTC_DeInit+0x150>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800af72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af84:	f04f 0200 	mov.w	r2, #0
 800af88:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800af8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af96:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800af98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afa0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800afa4:	f2c0 027f 	movt	r2, #127	; 0x7f
 800afa8:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800afaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afb2:	f04f 0200 	mov.w	r2, #0
 800afb6:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800afb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afc0:	f04f 0200 	mov.w	r2, #0
 800afc4:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800afc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	621a      	str	r2, [r3, #32]
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800afd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 800afe2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afe6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afea:	f04f 0200 	mov.w	r2, #0
 800afee:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800aff0:	f000 f910 	bl	800b214 <RTC_WaitForSynchro>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d103      	bne.n	800b002 <RTC_DeInit+0x14a>
      {
        status = ERROR;
 800affa:	f04f 0300 	mov.w	r3, #0
 800affe:	73fb      	strb	r3, [r7, #15]
 800b000:	e002      	b.n	800b008 <RTC_DeInit+0x150>
      }
      else
      {
        status = SUCCESS;      
 800b002:	f04f 0301 	mov.w	r3, #1
 800b006:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800b008:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b00c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b010:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b014:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b016:	7bfb      	ldrb	r3, [r7, #15]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	f107 0710 	add.w	r7, r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop

0800b024 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800b02c:	f04f 0300 	mov.w	r3, #0
 800b030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b032:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b036:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b03a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b03e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b040:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b044:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b048:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b04c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800b04e:	f000 f885 	bl	800b15c <RTC_EnterInitMode>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d103      	bne.n	800b060 <RTC_Init+0x3c>
  {
    status = ERROR;
 800b058:	f04f 0300 	mov.w	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]
 800b05e:	e035      	b.n	800b0cc <RTC_Init+0xa8>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800b060:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b064:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b068:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b06c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b070:	6892      	ldr	r2, [r2, #8]
 800b072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b076:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800b078:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b07c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b080:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b084:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b088:	6891      	ldr	r1, [r2, #8]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	6812      	ldr	r2, [r2, #0]
 800b08e:	ea41 0202 	orr.w	r2, r1, r2
 800b092:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 800b094:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b098:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	6892      	ldr	r2, [r2, #8]
 800b0a0:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800b0a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0aa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b0ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b0b2:	6911      	ldr	r1, [r2, #16]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	6852      	ldr	r2, [r2, #4]
 800b0b8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800b0bc:	ea41 0202 	orr.w	r2, r1, r2
 800b0c0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800b0c2:	f000 f895 	bl	800b1f0 <RTC_ExitInitMode>

    status = SUCCESS;    
 800b0c6:	f04f 0301 	mov.w	r3, #1
 800b0ca:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b0cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0d4:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b0d8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f107 0710 	add.w	r7, r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop

0800b0e8 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f04f 0200 	mov.w	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f04f 027f 	mov.w	r2, #127	; 0x7f
 800b0fe:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b106:	609a      	str	r2, [r3, #8]
}
 800b108:	f107 070c 	add.w	r7, r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bc80      	pop	{r7}
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop

0800b114 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d007      	beq.n	800b134 <RTC_WriteProtectionCmd+0x20>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800b124:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b128:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b12c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b130:	625a      	str	r2, [r3, #36]	; 0x24
 800b132:	e00d      	b.n	800b150 <RTC_WriteProtectionCmd+0x3c>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 800b134:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b138:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b13c:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b140:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 800b142:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b146:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b14a:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b14e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b150:	f107 070c 	add.w	r7, r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop

0800b15c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800b162:	f04f 0300 	mov.w	r3, #0
 800b166:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800b168:	f04f 0300 	mov.w	r3, #0
 800b16c:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800b16e:	f04f 0300 	mov.w	r3, #0
 800b172:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b174:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b178:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b182:	2b00      	cmp	r3, #0
 800b184:	d12a      	bne.n	800b1dc <RTC_EnterInitMode+0x80>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800b186:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b18a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b18e:	f04f 32ff 	mov.w	r2, #4294967295
 800b192:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800b194:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b198:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1a2:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f103 0301 	add.w	r3, r3, #1
 800b1aa:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1b2:	d002      	beq.n	800b1ba <RTC_EnterInitMode+0x5e>
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0ec      	beq.n	800b194 <RTC_EnterInitMode+0x38>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800b1ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1be:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d003      	beq.n	800b1d4 <RTC_EnterInitMode+0x78>
    {
      status = SUCCESS;
 800b1cc:	f04f 0301 	mov.w	r3, #1
 800b1d0:	73fb      	strb	r3, [r7, #15]
 800b1d2:	e006      	b.n	800b1e2 <RTC_EnterInitMode+0x86>
    }
    else
    {
      status = ERROR;
 800b1d4:	f04f 0300 	mov.w	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
 800b1da:	e002      	b.n	800b1e2 <RTC_EnterInitMode+0x86>
    }        
  }
  else
  {
    status = SUCCESS;  
 800b1dc:	f04f 0301 	mov.w	r3, #1
 800b1e0:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f107 0714 	add.w	r7, r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr

0800b1f0 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800b1f0:	b480      	push	{r7}
 800b1f2:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800b1f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1fc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b200:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b204:	68d2      	ldr	r2, [r2, #12]
 800b206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b20a:	60da      	str	r2, [r3, #12]
}
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bc80      	pop	{r7}
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop

0800b214 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 800b21a:	f04f 0300 	mov.w	r3, #0
 800b21e:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800b220:	f04f 0300 	mov.w	r3, #0
 800b224:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800b226:	f04f 0300 	mov.w	r3, #0
 800b22a:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b22c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b230:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b234:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b238:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b23a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b23e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b242:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b246:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800b248:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b24c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b250:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b254:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b258:	68d2      	ldr	r2, [r2, #12]
 800b25a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b25e:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800b260:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b264:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	f003 0320 	and.w	r3, r3, #32
 800b26e:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f103 0301 	add.w	r3, r3, #1
 800b276:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b27e:	d002      	beq.n	800b286 <RTC_WaitForSynchro+0x72>
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0ec      	beq.n	800b260 <RTC_WaitForSynchro+0x4c>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800b286:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b28a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f003 0320 	and.w	r3, r3, #32
 800b294:	2b00      	cmp	r3, #0
 800b296:	d003      	beq.n	800b2a0 <RTC_WaitForSynchro+0x8c>
  {
    status = SUCCESS;
 800b298:	f04f 0301 	mov.w	r3, #1
 800b29c:	73fb      	strb	r3, [r7, #15]
 800b29e:	e002      	b.n	800b2a6 <RTC_WaitForSynchro+0x92>
  }
  else
  {
    status = ERROR;
 800b2a0:	f04f 0300 	mov.w	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b2a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2ae:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b2b2:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f107 0714 	add.w	r7, r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bc80      	pop	{r7}
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop

0800b2c4 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800b2ce:	f04f 0300 	mov.w	r3, #0
 800b2d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b2d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2dc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b2e0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b2e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2ea:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b2ee:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800b2f0:	f7ff ff34 	bl	800b15c <RTC_EnterInitMode>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d103      	bne.n	800b302 <RTC_RefClockCmd+0x3e>
  {
    status = ERROR;
 800b2fa:	f04f 0300 	mov.w	r3, #0
 800b2fe:	73fb      	strb	r3, [r7, #15]
 800b300:	e020      	b.n	800b344 <RTC_RefClockCmd+0x80>
  } 
  else
  {  
    if (NewState != DISABLE)
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00c      	beq.n	800b322 <RTC_RefClockCmd+0x5e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800b308:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b30c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b310:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b314:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b318:	6892      	ldr	r2, [r2, #8]
 800b31a:	f042 0210 	orr.w	r2, r2, #16
 800b31e:	609a      	str	r2, [r3, #8]
 800b320:	e00b      	b.n	800b33a <RTC_RefClockCmd+0x76>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800b322:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b326:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b32a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b32e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b332:	6892      	ldr	r2, [r2, #8]
 800b334:	f022 0210 	bic.w	r2, r2, #16
 800b338:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800b33a:	f7ff ff59 	bl	800b1f0 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800b33e:	f04f 0301 	mov.w	r3, #1
 800b342:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800b344:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b348:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b34c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b350:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 800b352:	7bfb      	ldrb	r3, [r7, #15]
}
 800b354:	4618      	mov	r0, r3
 800b356:	f107 0710 	add.w	r7, r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop

0800b360 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800b360:	b590      	push	{r4, r7, lr}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b36a:	f04f 0300 	mov.w	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800b370:	f04f 0300 	mov.w	r3, #0
 800b374:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10d      	bne.n	800b398 <RTC_SetTime+0x38>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b37c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b380:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d119      	bne.n	800b3c2 <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	f04f 0200 	mov.w	r2, #0
 800b394:	70da      	strb	r2, [r3, #3]
 800b396:	e014      	b.n	800b3c2 <RTC_SetTime+0x62>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b398:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b39c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d007      	beq.n	800b3ba <RTC_SetTime+0x5a>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 f918 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	e003      	b.n	800b3c2 <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d015      	beq.n	800b3f4 <RTC_SetTime+0x94>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	ea4f 4203 	mov.w	r2, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	785b      	ldrb	r3, [r3, #1]
 800b3d4:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800b3d8:	ea42 0203 	orr.w	r2, r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800b3e0:	ea42 0203 	orr.w	r2, r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	78db      	ldrb	r3, [r3, #3]
 800b3e8:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800b3ec:	ea42 0303 	orr.w	r3, r2, r3
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	e020      	b.n	800b436 <RTC_SetTime+0xd6>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f001 f8d1 	bl	800c5a0 <RTC_ByteToBcd2>
 800b3fe:	4603      	mov	r3, r0
 800b400:	ea4f 4403 	mov.w	r4, r3, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	785b      	ldrb	r3, [r3, #1]
 800b408:	4618      	mov	r0, r3
 800b40a:	f001 f8c9 	bl	800c5a0 <RTC_ByteToBcd2>
 800b40e:	4603      	mov	r3, r0
 800b410:	ea4f 2303 	mov.w	r3, r3, lsl #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800b414:	ea44 0403 	orr.w	r4, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	789b      	ldrb	r3, [r3, #2]
 800b41c:	4618      	mov	r0, r3
 800b41e:	f001 f8bf 	bl	800c5a0 <RTC_ByteToBcd2>
 800b422:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800b424:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	78db      	ldrb	r3, [r3, #3]
 800b42c:	ea4f 4303 	mov.w	r3, r3, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800b430:	ea42 0303 	orr.w	r3, r2, r3
 800b434:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b436:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b43a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b43e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b442:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b444:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b448:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b44c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b450:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800b452:	f7ff fe83 	bl	800b15c <RTC_EnterInitMode>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d103      	bne.n	800b464 <RTC_SetTime+0x104>
  {
    status = ERROR;
 800b45c:	f04f 0300 	mov.w	r3, #0
 800b460:	72fb      	strb	r3, [r7, #11]
 800b462:	e019      	b.n	800b498 <RTC_SetTime+0x138>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b464:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b468:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b46c:	68f9      	ldr	r1, [r7, #12]
 800b46e:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800b472:	f2c0 037f 	movt	r3, #127	; 0x7f
 800b476:	ea01 0303 	and.w	r3, r1, r3
 800b47a:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800b47c:	f7ff feb8 	bl	800b1f0 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800b480:	f7ff fec8 	bl	800b214 <RTC_WaitForSynchro>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d103      	bne.n	800b492 <RTC_SetTime+0x132>
    {
      status = ERROR;
 800b48a:	f04f 0300 	mov.w	r3, #0
 800b48e:	72fb      	strb	r3, [r7, #11]
 800b490:	e002      	b.n	800b498 <RTC_SetTime+0x138>
    }
    else
    {
      status = SUCCESS;
 800b492:	f04f 0301 	mov.w	r3, #1
 800b496:	72fb      	strb	r3, [r7, #11]
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b498:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b49c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b4a0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b4a4:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800b4a6:	7afb      	ldrb	r3, [r7, #11]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f107 0714 	add.w	r7, r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd90      	pop	{r4, r7, pc}
 800b4b2:	bf00      	nop

0800b4b4 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f04f 0200 	mov.w	r2, #0
 800b4c2:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f04f 0200 	mov.w	r2, #0
 800b4ca:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f04f 0200 	mov.w	r2, #0
 800b4d2:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	709a      	strb	r2, [r3, #2]
}
 800b4dc:	f107 070c 	add.w	r7, r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bc80      	pop	{r7}
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop

0800b4e8 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4f2:	f04f 0300 	mov.w	r3, #0
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800b4f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b4fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800b506:	f2c0 037f 	movt	r3, #127	; 0x7f
 800b50a:	ea02 0303 	and.w	r3, r2, r3
 800b50e:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b516:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800b526:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b544:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d11a      	bne.n	800b58a <RTC_GetTime+0xa2>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 f843 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b55e:	4603      	mov	r3, r0
 800b560:	461a      	mov	r2, r3
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	785b      	ldrb	r3, [r3, #1]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f001 f83a 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	789b      	ldrb	r3, [r3, #2]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 f831 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	709a      	strb	r2, [r3, #2]
  }
}
 800b58a:	f107 0710 	add.w	r7, r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop

0800b594 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b59e:	f04f 0300 	mov.w	r3, #0
 800b5a2:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10f      	bne.n	800b5d0 <RTC_SetDate+0x3c>
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	785b      	ldrb	r3, [r3, #1]
 800b5b4:	f003 0310 	and.w	r3, r3, #16
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d009      	beq.n	800b5d0 <RTC_SetDate+0x3c>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	785b      	ldrb	r3, [r3, #1]
 800b5c0:	f023 0310 	bic.w	r3, r3, #16
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	f103 030a 	add.w	r3, r3, #10
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00d      	beq.n	800b5f2 <RTC_SetDate+0x5e>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	785b      	ldrb	r3, [r3, #1]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f001 f802 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	789b      	ldrb	r3, [r3, #2]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fffb 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d015      	beq.n	800b624 <RTC_SetDate+0x90>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	78db      	ldrb	r3, [r3, #3]
 800b5fc:	ea4f 4203 	mov.w	r2, r3, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	785b      	ldrb	r3, [r3, #1]
 800b604:	ea4f 2303 	mov.w	r3, r3, lsl #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800b608:	ea42 0203 	orr.w	r2, r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800b610:	ea42 0203 	orr.w	r2, r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	ea4f 3343 	mov.w	r3, r3, lsl #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800b61c:	ea42 0303 	orr.w	r3, r2, r3
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	e020      	b.n	800b666 <RTC_SetDate+0xd2>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	78db      	ldrb	r3, [r3, #3]
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 ffb9 	bl	800c5a0 <RTC_ByteToBcd2>
 800b62e:	4603      	mov	r3, r0
 800b630:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	785b      	ldrb	r3, [r3, #1]
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 ffb1 	bl	800c5a0 <RTC_ByteToBcd2>
 800b63e:	4603      	mov	r3, r0
 800b640:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800b644:	ea44 0403 	orr.w	r4, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	789b      	ldrb	r3, [r3, #2]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 ffa7 	bl	800c5a0 <RTC_ByteToBcd2>
 800b652:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800b654:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	ea4f 3343 	mov.w	r3, r3, lsl #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800b660:	ea42 0303 	orr.w	r3, r2, r3
 800b664:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b666:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b66a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b66e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b672:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b674:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b678:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b67c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b680:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800b682:	f7ff fd6b 	bl	800b15c <RTC_EnterInitMode>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d103      	bne.n	800b694 <RTC_SetDate+0x100>
  {
    status = ERROR;
 800b68c:	f04f 0300 	mov.w	r3, #0
 800b690:	72fb      	strb	r3, [r7, #11]
 800b692:	e017      	b.n	800b6c4 <RTC_SetDate+0x130>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800b694:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b698:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b6a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b6a6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800b6a8:	f7ff fda2 	bl	800b1f0 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800b6ac:	f7ff fdb2 	bl	800b214 <RTC_WaitForSynchro>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d103      	bne.n	800b6be <RTC_SetDate+0x12a>
    {
      status = ERROR;
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	72fb      	strb	r3, [r7, #11]
 800b6bc:	e002      	b.n	800b6c4 <RTC_SetDate+0x130>
    }
    else
    {
      status = SUCCESS;
 800b6be:	f04f 0301 	mov.w	r3, #1
 800b6c2:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800b6c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b6c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b6cc:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b6d0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b6d2:	7afb      	ldrb	r3, [r7, #11]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f107 0714 	add.w	r7, r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd90      	pop	{r4, r7, pc}
 800b6de:	bf00      	nop

0800b6e0 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f04f 0201 	mov.w	r2, #1
 800b6ee:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f04f 0201 	mov.w	r2, #1
 800b6f6:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f04f 0201 	mov.w	r2, #1
 800b6fe:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f04f 0200 	mov.w	r2, #0
 800b706:	70da      	strb	r2, [r3, #3]
}
 800b708:	f107 070c 	add.w	r7, r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bc80      	pop	{r7}
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop

0800b714 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b71e:	f04f 0300 	mov.w	r3, #0
 800b722:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800b724:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b728:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b732:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b736:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b73e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b742:	b2da      	uxtb	r2, r3
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800b74e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b752:	b2da      	uxtb	r2, r3
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b760:	b2da      	uxtb	r2, r3
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b76c:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800b770:	b2da      	uxtb	r2, r3
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d11e      	bne.n	800b7ba <RTC_GetDate+0xa6>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	78db      	ldrb	r3, [r3, #3]
 800b780:	4618      	mov	r0, r3
 800b782:	f000 ff2f 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b786:	4603      	mov	r3, r0
 800b788:	461a      	mov	r2, r3
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	785b      	ldrb	r3, [r3, #1]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 ff26 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b798:	4603      	mov	r3, r0
 800b79a:	461a      	mov	r2, r3
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	789b      	ldrb	r3, [r3, #2]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 ff1d 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	709a      	strb	r2, [r3, #2]
    RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	781a      	ldrb	r2, [r3, #0]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	701a      	strb	r2, [r3, #0]
  }
}
 800b7ba:	f107 0710 	add.w	r7, r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop

0800b7c4 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800b7c4:	b590      	push	{r4, r7, lr}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b7d0:	f04f 0300 	mov.w	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10d      	bne.n	800b7f8 <RTC_SetAlarm+0x34>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b7dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b7e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d12c      	bne.n	800b848 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f04f 0200 	mov.w	r2, #0
 800b7f4:	70da      	strb	r2, [r3, #3]
 800b7f6:	e027      	b.n	800b848 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b7f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b7fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b806:	2b00      	cmp	r3, #0
 800b808:	d007      	beq.n	800b81a <RTC_SetAlarm+0x56>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 fee8 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b814:	4603      	mov	r3, r0
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	e003      	b.n	800b822 <RTC_SetAlarm+0x5e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f04f 0200 	mov.w	r2, #0
 800b820:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d107      	bne.n	800b83a <RTC_SetAlarm+0x76>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	7b1b      	ldrb	r3, [r3, #12]
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 fed8 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b834:	4603      	mov	r3, r0
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	e006      	b.n	800b848 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	7b1b      	ldrb	r3, [r3, #12]
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 fed0 	bl	800c5e4 <RTC_Bcd2ToByte>
 800b844:	4603      	mov	r3, r0
 800b846:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d023      	beq.n	800b896 <RTC_SetAlarm+0xd2>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	ea4f 4203 	mov.w	r2, r3, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	785b      	ldrb	r3, [r3, #1]
 800b85a:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b85e:	ea42 0203 	orr.w	r2, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800b866:	ea42 0203 	orr.w	r2, r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	78db      	ldrb	r3, [r3, #3]
 800b86e:	ea4f 4303 	mov.w	r3, r3, lsl #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800b872:	ea42 0203 	orr.w	r2, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	7b1b      	ldrb	r3, [r3, #12]
 800b87a:	ea4f 6303 	mov.w	r3, r3, lsl #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800b87e:	ea42 0203 	orr.w	r2, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800b886:	ea42 0203 	orr.w	r2, r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b88e:	ea42 0303 	orr.w	r3, r2, r3
 800b892:	617b      	str	r3, [r7, #20]
 800b894:	e032      	b.n	800b8fc <RTC_SetAlarm+0x138>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 fe80 	bl	800c5a0 <RTC_ByteToBcd2>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	785b      	ldrb	r3, [r3, #1]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 fe78 	bl	800c5a0 <RTC_ByteToBcd2>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b8b6:	ea44 0403 	orr.w	r4, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	789b      	ldrb	r3, [r3, #2]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 fe6e 	bl	800c5a0 <RTC_ByteToBcd2>
 800b8c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800b8c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	78db      	ldrb	r3, [r3, #3]
 800b8ce:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800b8d2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	7b1b      	ldrb	r3, [r3, #12]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 fe60 	bl	800c5a0 <RTC_ByteToBcd2>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	ea4f 6303 	mov.w	r3, r3, lsl #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800b8e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800b8ee:	ea42 0203 	orr.w	r2, r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b8f6:	ea42 0303 	orr.w	r3, r2, r3
 800b8fa:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b8fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b900:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b904:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b908:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b90a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b90e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b912:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b91e:	d106      	bne.n	800b92e <RTC_SetAlarm+0x16a>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800b920:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b924:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	61da      	str	r2, [r3, #28]
 800b92c:	e005      	b.n	800b93a <RTC_SetAlarm+0x176>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800b92e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b932:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800b93a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b93e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b942:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b946:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b948:	f107 071c 	add.w	r7, r7, #28
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}

0800b950 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f04f 0200 	mov.w	r2, #0
 800b95e:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f04f 0200 	mov.w	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f04f 0200 	mov.w	r2, #0
 800b96e:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f04f 0200 	mov.w	r2, #0
 800b976:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f04f 0200 	mov.w	r2, #0
 800b97e:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f04f 0201 	mov.w	r2, #1
 800b986:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f04f 0200 	mov.w	r2, #0
 800b98e:	605a      	str	r2, [r3, #4]
}
 800b990:	f107 070c 	add.w	r7, r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	bc80      	pop	{r7}
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop

0800b99c <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b9a8:	f04f 0300 	mov.w	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9b4:	d106      	bne.n	800b9c4 <RTC_GetAlarm+0x28>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800b9b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b9ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	617b      	str	r3, [r7, #20]
 800b9c2:	e005      	b.n	800b9d0 <RTC_GetAlarm+0x34>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800b9c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b9c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b9d6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800b9e6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9f8:	b2da      	uxtb	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba04:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800ba14:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d123      	bne.n	800ba80 <RTC_GetAlarm+0xe4>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 fdd1 	bl	800c5e4 <RTC_Bcd2ToByte>
 800ba42:	4603      	mov	r3, r0
 800ba44:	461a      	mov	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 fdc8 	bl	800c5e4 <RTC_Bcd2ToByte>
 800ba54:	4603      	mov	r3, r0
 800ba56:	461a      	mov	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	789b      	ldrb	r3, [r3, #2]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f000 fdbf 	bl	800c5e4 <RTC_Bcd2ToByte>
 800ba66:	4603      	mov	r3, r0
 800ba68:	461a      	mov	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	7b1b      	ldrb	r3, [r3, #12]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fdb6 	bl	800c5e4 <RTC_Bcd2ToByte>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	731a      	strb	r2, [r3, #12]
  }  
}
 800ba80:	f107 0718 	add.w	r7, r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800ba94:	f04f 0300 	mov.w	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800ba9a:	f04f 0300 	mov.w	r3, #0
 800ba9e:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800baa0:	f04f 0300 	mov.w	r3, #0
 800baa4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800baa6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800baaa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800baae:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bab2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bab4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bab8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800babc:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bac0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d010      	beq.n	800baea <RTC_AlarmCmd+0x62>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800bac8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bacc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bad0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bad4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bad8:	6891      	ldr	r1, [r2, #8]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	ea41 0202 	orr.w	r2, r1, r2
 800bae0:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 800bae2:	f04f 0301 	mov.w	r3, #1
 800bae6:	75fb      	strb	r3, [r7, #23]
 800bae8:	e037      	b.n	800bb5a <RTC_AlarmCmd+0xd2>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800baea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800baee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800baf2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800baf6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bafa:	6891      	ldr	r1, [r2, #8]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	ea6f 0202 	mvn.w	r2, r2
 800bb02:	ea01 0202 	and.w	r2, r1, r2
 800bb06:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800bb08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800bb18:	ea02 0303 	and.w	r3, r2, r3
 800bb1c:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f103 0301 	add.w	r3, r3, #1
 800bb24:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb2c:	d002      	beq.n	800bb34 <RTC_AlarmCmd+0xac>
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0e9      	beq.n	800bb08 <RTC_AlarmCmd+0x80>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800bb34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb3c:	68da      	ldr	r2, [r3, #12]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800bb44:	ea02 0303 	and.w	r3, r2, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d103      	bne.n	800bb54 <RTC_AlarmCmd+0xcc>
    {
      status = ERROR;
 800bb4c:	f04f 0300 	mov.w	r3, #0
 800bb50:	75fb      	strb	r3, [r7, #23]
 800bb52:	e002      	b.n	800bb5a <RTC_AlarmCmd+0xd2>
    } 
    else
    {
      status = SUCCESS;
 800bb54:	f04f 0301 	mov.w	r3, #1
 800bb58:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800bb5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb62:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800bb66:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f107 071c 	add.w	r7, r7, #28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bc80      	pop	{r7}
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop

0800bb78 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800bb80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb88:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bb8c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bb8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb96:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bb9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800bb9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bba0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bba4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bba8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bbac:	6892      	ldr	r2, [r2, #8]
 800bbae:	f022 0207 	bic.w	r2, r2, #7
 800bbb2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800bbb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bbb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bbbc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bbc0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bbc4:	6891      	ldr	r1, [r2, #8]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	ea41 0202 	orr.w	r2, r1, r2
 800bbcc:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800bbce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bbd2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bbd6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800bbda:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bbdc:	f107 070c 	add.w	r7, r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bc80      	pop	{r7}
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop

0800bbe8 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800bbf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bbf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bbf8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bbfc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bbfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc06:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bc0a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800bc0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800bc18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc20:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800bc24:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bc26:	f107 070c 	add.w	r7, r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bc80      	pop	{r7}
 800bc2e:	4770      	bx	lr

0800bc30 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800bc30:	b480      	push	{r7}
 800bc32:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800bc34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800bc42:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bc80      	pop	{r7}
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop

0800bc50 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800bc5a:	f04f 0300 	mov.w	r3, #0
 800bc5e:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800bc60:	f04f 0300 	mov.w	r3, #0
 800bc64:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800bc66:	f04f 0300 	mov.w	r3, #0
 800bc6a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800bc6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc74:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bc78:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bc7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc82:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bc86:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800bc88:	79fb      	ldrb	r3, [r7, #7]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00f      	beq.n	800bcae <RTC_WakeUpCmd+0x5e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800bc8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc96:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bc9a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bc9e:	6892      	ldr	r2, [r2, #8]
 800bca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bca4:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 800bca6:	f04f 0301 	mov.w	r3, #1
 800bcaa:	75fb      	strb	r3, [r7, #23]
 800bcac:	e02e      	b.n	800bd0c <RTC_WakeUpCmd+0xbc>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800bcae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bcb2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bcb6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bcba:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bcbe:	6892      	ldr	r2, [r2, #8]
 800bcc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcc4:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800bcc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bcca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f103 0301 	add.w	r3, r3, #1
 800bcdc:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce4:	d002      	beq.n	800bcec <RTC_WakeUpCmd+0x9c>
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0ec      	beq.n	800bcc6 <RTC_WakeUpCmd+0x76>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800bcec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bcf0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	f003 0304 	and.w	r3, r3, #4
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d103      	bne.n	800bd06 <RTC_WakeUpCmd+0xb6>
    {
      status = ERROR;
 800bcfe:	f04f 0300 	mov.w	r3, #0
 800bd02:	75fb      	strb	r3, [r7, #23]
 800bd04:	e002      	b.n	800bd0c <RTC_WakeUpCmd+0xbc>
    }
    else
    {
      status = SUCCESS;
 800bd06:	f04f 0301 	mov.w	r3, #1
 800bd0a:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800bd0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd14:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800bd18:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f107 071c 	add.w	r7, r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bc80      	pop	{r7}
 800bd26:	4770      	bx	lr

0800bd28 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800bd32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd3a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bd3e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bd40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd48:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bd4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800bd4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd56:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bd5a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bd5e:	6892      	ldr	r2, [r2, #8]
 800bd60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bd64:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800bd66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd6e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bd72:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bd76:	6891      	ldr	r1, [r2, #8]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	ea40 0202 	orr.w	r2, r0, r2
 800bd80:	ea41 0202 	orr.w	r2, r1, r2
 800bd84:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800bd86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd8a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd8e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800bd92:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bd94:	f107 070c 	add.w	r7, r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bc80      	pop	{r7}
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop

0800bda0 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800bda4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bda8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bc80      	pop	{r7}
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop

0800bdbc <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800bdc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bdca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bdce:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bdd2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bdd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bdd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bddc:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bde0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800bde2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bde6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bdea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bdee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bdf2:	6892      	ldr	r2, [r2, #8]
 800bdf4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800bdf8:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800bdfa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bdfe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800be02:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800be06:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800be0a:	6891      	ldr	r1, [r2, #8]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	ea40 0202 	orr.w	r2, r0, r2
 800be14:	ea41 0202 	orr.w	r2, r1, r2
 800be18:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800be1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800be1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800be22:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800be26:	625a      	str	r2, [r3, #36]	; 0x24
}
 800be28:	f107 070c 	add.w	r7, r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bc80      	pop	{r7}
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop

0800be34 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800be3e:	f04f 0300 	mov.w	r3, #0
 800be42:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800be44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800be48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800be4c:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800be50:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800be52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800be56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800be5a:	f04f 0253 	mov.w	r2, #83	; 0x53
 800be5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800be60:	f7ff f97c 	bl	800b15c <RTC_EnterInitMode>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d103      	bne.n	800be72 <RTC_CoarseCalibConfig+0x3e>
  {
    status = ERROR;
 800be6a:	f04f 0300 	mov.w	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
 800be70:	e00d      	b.n	800be8e <RTC_CoarseCalibConfig+0x5a>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800be72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800be76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	ea41 0202 	orr.w	r2, r1, r2
 800be82:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800be84:	f7ff f9b4 	bl	800b1f0 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800be88:	f04f 0301 	mov.w	r3, #1
 800be8c:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800be8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800be92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800be96:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800be9a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	f107 0710 	add.w	r7, r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800beb2:	f04f 0300 	mov.w	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800beb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bebc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bec0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bec4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bec6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800beca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bece:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bed2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800bed4:	f7ff f942 	bl	800b15c <RTC_EnterInitMode>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d103      	bne.n	800bee6 <RTC_CoarseCalibCmd+0x3e>
  {
    status =  ERROR;
 800bede:	f04f 0300 	mov.w	r3, #0
 800bee2:	73fb      	strb	r3, [r7, #15]
 800bee4:	e020      	b.n	800bf28 <RTC_CoarseCalibCmd+0x80>
  }
  else
  {
    if (NewState != DISABLE)
 800bee6:	79fb      	ldrb	r3, [r7, #7]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00c      	beq.n	800bf06 <RTC_CoarseCalibCmd+0x5e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800beec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bef0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bef4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bef8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800befc:	6892      	ldr	r2, [r2, #8]
 800befe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf02:	609a      	str	r2, [r3, #8]
 800bf04:	e00b      	b.n	800bf1e <RTC_CoarseCalibCmd+0x76>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800bf06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bf0e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bf12:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bf16:	6892      	ldr	r2, [r2, #8]
 800bf18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf1c:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800bf1e:	f7ff f967 	bl	800b1f0 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800bf22:	f04f 0301 	mov.w	r3, #1
 800bf26:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800bf28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bf30:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800bf34:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f107 0710 	add.w	r7, r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop

0800bf44 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800bf4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bf56:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bf5a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bf5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bf64:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bf68:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00c      	beq.n	800bf8a <RTC_CalibOutputCmd+0x46>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800bf70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bf78:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bf7c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bf80:	6892      	ldr	r2, [r2, #8]
 800bf82:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800bf86:	609a      	str	r2, [r3, #8]
 800bf88:	e00b      	b.n	800bfa2 <RTC_CalibOutputCmd+0x5e>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800bf8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bf92:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bf96:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bf9a:	6892      	ldr	r2, [r2, #8]
 800bf9c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bfa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800bfa2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bfa6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bfaa:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800bfae:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bfb0:	f107 070c 	add.w	r7, r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bc80      	pop	{r7}
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop

0800bfbc <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800bfc8:	f04f 0300 	mov.w	r3, #0
 800bfcc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bfce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bfd2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfdc:	f023 0308 	bic.w	r3, r3, #8
 800bfe0:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800bfe2:	78fb      	ldrb	r3, [r7, #3]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d007      	beq.n	800bff8 <RTC_TimeStampCmd+0x3c>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	ea42 0303 	orr.w	r3, r2, r3
 800bff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bff4:	60fb      	str	r3, [r7, #12]
 800bff6:	e004      	b.n	800c002 <RTC_TimeStampCmd+0x46>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	ea42 0303 	orr.w	r3, r2, r3
 800c000:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800c002:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c006:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c00a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c00e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800c010:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c014:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c018:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c01c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800c01e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c022:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800c02a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c02e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c032:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c036:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c038:	f107 0714 	add.w	r7, r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bc80      	pop	{r7}
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop

0800c044 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800c050:	f04f 0300 	mov.w	r3, #0
 800c054:	617b      	str	r3, [r7, #20]
 800c056:	f04f 0300 	mov.w	r3, #0
 800c05a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800c05c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c060:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c066:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800c06a:	f2c0 037f 	movt	r3, #127	; 0x7f
 800c06e:	ea02 0303 	and.w	r3, r2, r3
 800c072:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800c074:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c078:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c082:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c086:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800c08e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c092:	b2da      	uxtb	r2, r3
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800c09e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b0:	b2da      	uxtb	r2, r3
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0bc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f04f 0200 	mov.w	r2, #0
 800c0cc:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800c0d4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c0f2:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d135      	bne.n	800c16e <RTC_GetTimeStamp+0x12a>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	4618      	mov	r0, r3
 800c108:	f000 fa6c 	bl	800c5e4 <RTC_Bcd2ToByte>
 800c10c:	4603      	mov	r3, r0
 800c10e:	461a      	mov	r2, r3
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	785b      	ldrb	r3, [r3, #1]
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 fa63 	bl	800c5e4 <RTC_Bcd2ToByte>
 800c11e:	4603      	mov	r3, r0
 800c120:	461a      	mov	r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	789b      	ldrb	r3, [r3, #2]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f000 fa5a 	bl	800c5e4 <RTC_Bcd2ToByte>
 800c130:	4603      	mov	r3, r0
 800c132:	461a      	mov	r2, r3
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	785b      	ldrb	r3, [r3, #1]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 fa51 	bl	800c5e4 <RTC_Bcd2ToByte>
 800c142:	4603      	mov	r3, r0
 800c144:	461a      	mov	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	789b      	ldrb	r3, [r3, #2]
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 fa48 	bl	800c5e4 <RTC_Bcd2ToByte>
 800c154:	4603      	mov	r3, r0
 800c156:	461a      	mov	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	4618      	mov	r0, r3
 800c162:	f000 fa3f 	bl	800c5e4 <RTC_Bcd2ToByte>
 800c166:	4603      	mov	r3, r0
 800c168:	461a      	mov	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	701a      	strb	r2, [r3, #0]
  }
}
 800c16e:	f107 0718 	add.w	r7, r7, #24
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop

0800c178 <RTC_TamperTriggerConfig>:
  *            @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
  *            @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.                         
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d111      	bne.n	800c1ac <RTC_TamperTriggerConfig+0x34>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800c188:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c18c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c190:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c194:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c198:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c1a0:	ea6f 0202 	mvn.w	r2, r2
 800c1a4:	ea01 0202 	and.w	r2, r1, r2
 800c1a8:	641a      	str	r2, [r3, #64]	; 0x40
 800c1aa:	e00e      	b.n	800c1ca <RTC_TamperTriggerConfig+0x52>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800c1ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c1b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c1b4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c1b8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c1bc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c1c4:	ea41 0202 	orr.w	r2, r1, r2
 800c1c8:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800c1ca:	f107 070c 	add.w	r7, r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bc80      	pop	{r7}
 800c1d2:	4770      	bx	lr

0800c1d4 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00d      	beq.n	800c202 <RTC_TamperCmd+0x2e>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800c1e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c1ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c1ee:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c1f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c1f6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	ea41 0202 	orr.w	r2, r1, r2
 800c1fe:	641a      	str	r2, [r3, #64]	; 0x40
 800c200:	e00e      	b.n	800c220 <RTC_TamperCmd+0x4c>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800c202:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c206:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c20a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c20e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c212:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	ea6f 0202 	mvn.w	r2, r2
 800c21a:	ea01 0202 	and.w	r2, r1, r2
 800c21e:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800c220:	f107 070c 	add.w	r7, r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	bc80      	pop	{r7}
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop

0800c22c <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800c236:	f04f 0300 	mov.w	r3, #0
 800c23a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800c23c:	f642 0350 	movw	r3, #10320	; 0x2850
 800c240:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c244:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4413      	add	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	601a      	str	r2, [r3, #0]
}
 800c258:	f107 0714 	add.w	r7, r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bc80      	pop	{r7}
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop

0800c264 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800c26c:	f04f 0300 	mov.w	r3, #0
 800c270:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800c272:	f642 0350 	movw	r3, #10320	; 0x2850
 800c276:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c27a:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	4413      	add	r3, r2
 800c286:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	f107 0714 	add.w	r7, r7, #20
 800c292:	46bd      	mov	sp, r7
 800c294:	bc80      	pop	{r7}
 800c296:	4770      	bx	lr

0800c298 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800c2a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c2a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c2a8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c2ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c2b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c2b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c2b6:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800c2b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c2bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c2c0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c2c4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c2c8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	ea41 0202 	orr.w	r2, r1, r2
 800c2d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c2d2:	f107 070c 	add.w	r7, r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bc80      	pop	{r7}
 800c2da:	4770      	bx	lr

0800c2dc <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800c2e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c2e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c2ec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c2f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c2f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c2f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c2fa:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800c2fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c300:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c304:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c308:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c30c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	ea41 0202 	orr.w	r2, r1, r2
 800c314:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c316:	f107 070c 	add.w	r7, r7, #12
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bc80      	pop	{r7}
 800c31e:	4770      	bx	lr

0800c320 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800c328:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c32c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c330:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c334:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c338:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c33a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c33e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800c340:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c344:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c348:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c34c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c350:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	ea41 0202 	orr.w	r2, r1, r2
 800c358:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c35a:	f107 070c 	add.w	r7, r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	bc80      	pop	{r7}
 800c362:	4770      	bx	lr

0800c364 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800c370:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c374:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c378:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c37c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800c37e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c382:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c386:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c38a:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800c38c:	78fb      	ldrb	r3, [r7, #3]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d01e      	beq.n	800c3d0 <RTC_ITConfig+0x6c>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800c392:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c396:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c39a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c39e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c3a2:	6891      	ldr	r1, [r2, #8]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	f022 0204 	bic.w	r2, r2, #4
 800c3aa:	ea41 0202 	orr.w	r2, r1, r2
 800c3ae:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800c3b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c3b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c3b8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c3bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c3c0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	f002 0204 	and.w	r2, r2, #4
 800c3c8:	ea41 0202 	orr.w	r2, r1, r2
 800c3cc:	641a      	str	r2, [r3, #64]	; 0x40
 800c3ce:	e021      	b.n	800c414 <RTC_ITConfig+0xb0>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800c3d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c3d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c3d8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c3dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c3e0:	6891      	ldr	r1, [r2, #8]
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	f022 0204 	bic.w	r2, r2, #4
 800c3e8:	ea6f 0202 	mvn.w	r2, r2
 800c3ec:	ea01 0202 	and.w	r2, r1, r2
 800c3f0:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800c3f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c3f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c3fa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c3fe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c402:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	f002 0204 	and.w	r2, r2, #4
 800c40a:	ea6f 0202 	mvn.w	r2, r2
 800c40e:	ea01 0202 	and.w	r2, r1, r2
 800c412:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800c414:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c418:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c41c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c420:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c422:	f107 070c 	add.w	r7, r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	bc80      	pop	{r7}
 800c42a:	4770      	bx	lr

0800c42c <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800c434:	f04f 0300 	mov.w	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800c43a:	f04f 0300 	mov.w	r3, #0
 800c43e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800c440:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c444:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c448:	68da      	ldr	r2, [r3, #12]
 800c44a:	f643 7377 	movw	r3, #16247	; 0x3f77
 800c44e:	ea02 0303 	and.w	r3, r2, r3
 800c452:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	ea02 0303 	and.w	r3, r2, r3
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d003      	beq.n	800c468 <RTC_GetFlagStatus+0x3c>
  {
    bitstatus = SET;
 800c460:	f04f 0301 	mov.w	r3, #1
 800c464:	73fb      	strb	r3, [r7, #15]
 800c466:	e002      	b.n	800c46e <RTC_GetFlagStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
 800c468:	f04f 0300 	mov.w	r3, #0
 800c46c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c470:	4618      	mov	r0, r3
 800c472:	f107 0714 	add.w	r7, r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	bc80      	pop	{r7}
 800c47a:	4770      	bx	lr

0800c47c <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800c484:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c488:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800c492:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c49a:	ea6f 0102 	mvn.w	r1, r2
 800c49e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c4a2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c4a6:	68d2      	ldr	r2, [r2, #12]
 800c4a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c4ac:	ea41 0202 	orr.w	r2, r1, r2
 800c4b0:	60da      	str	r2, [r3, #12]
}
 800c4b2:	f107 070c 	add.w	r7, r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bc80      	pop	{r7}
 800c4ba:	4770      	bx	lr

0800c4bc <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b087      	sub	sp, #28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800c4c4:	f04f 0300 	mov.w	r3, #0
 800c4c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800c4ca:	f04f 0300 	mov.w	r3, #0
 800c4ce:	613b      	str	r3, [r7, #16]
 800c4d0:	f04f 0300 	mov.w	r3, #0
 800c4d4:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800c4d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c4da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e0:	f003 0304 	and.w	r3, r3, #4
 800c4e4:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800c4e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c4ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	ea02 0203 	and.w	r2, r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	ea4f 31d3 	mov.w	r1, r3, lsr #15
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	ea01 0303 	and.w	r3, r1, r3
 800c502:	ea42 0303 	orr.w	r3, r2, r3
 800c506:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800c508:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c50c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c510:	68da      	ldr	r2, [r3, #12]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c518:	ea02 0303 	and.w	r3, r2, r3
 800c51c:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00a      	beq.n	800c53a <RTC_GetITStatus+0x7e>
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800c52a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <RTC_GetITStatus+0x7e>
  {
    bitstatus = SET;
 800c532:	f04f 0301 	mov.w	r3, #1
 800c536:	75fb      	strb	r3, [r7, #23]
 800c538:	e002      	b.n	800c540 <RTC_GetITStatus+0x84>
  }
  else
  {
    bitstatus = RESET;
 800c53a:	f04f 0300 	mov.w	r3, #0
 800c53e:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800c540:	7dfb      	ldrb	r3, [r7, #23]
}
 800c542:	4618      	mov	r0, r3
 800c544:	f107 071c 	add.w	r7, r7, #28
 800c548:	46bd      	mov	sp, r7
 800c54a:	bc80      	pop	{r7}
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop

0800c550 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c558:	f04f 0300 	mov.w	r3, #0
 800c55c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c564:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800c566:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c56a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800c574:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c57c:	ea6f 0102 	mvn.w	r1, r2
 800c580:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c584:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c588:	68d2      	ldr	r2, [r2, #12]
 800c58a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c58e:	ea41 0202 	orr.w	r2, r1, r2
 800c592:	60da      	str	r2, [r3, #12]
}
 800c594:	f107 0714 	add.w	r7, r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	bc80      	pop	{r7}
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop

0800c5a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800c5aa:	f04f 0300 	mov.w	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800c5b0:	e007      	b.n	800c5c2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
 800c5b4:	f103 0301 	add.w	r3, r3, #1
 800c5b8:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	f1a3 030a 	sub.w	r3, r3, #10
 800c5c0:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	2b09      	cmp	r3, #9
 800c5c6:	d8f4      	bhi.n	800c5b2 <RTC_ByteToBcd2+0x12>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	79fb      	ldrb	r3, [r7, #7]
 800c5d2:	ea42 0303 	orr.w	r3, r2, r3
 800c5d6:	b2db      	uxtb	r3, r3
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f107 0714 	add.w	r7, r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bc80      	pop	{r7}
 800c5e2:	4770      	bx	lr

0800c5e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800c5ee:	f04f 0300 	mov.w	r3, #0
 800c5f2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c602:	4413      	add	r3, r2
 800c604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c608:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800c60a:	79fb      	ldrb	r3, [r7, #7]
 800c60c:	f003 030f 	and.w	r3, r3, #15
 800c610:	b2da      	uxtb	r2, r3
 800c612:	7bfb      	ldrb	r3, [r7, #15]
 800c614:	4413      	add	r3, r2
 800c616:	b2db      	uxtb	r3, r3
}
 800c618:	4618      	mov	r0, r3
 800c61a:	f107 0714 	add.w	r7, r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	bc80      	pop	{r7}
 800c622:	4770      	bx	lr

0800c624 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800c628:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c62c:	f04f 0101 	mov.w	r1, #1
 800c630:	f7fe f9ae 	bl	800a990 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800c634:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c638:	f04f 0100 	mov.w	r1, #0
 800c63c:	f7fe f9a8 	bl	800a990 <RCC_APB2PeriphResetCmd>
}
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c64c:	f04f 0300 	mov.w	r3, #0
 800c650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800c652:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c656:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 800c664:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c668:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	7d1b      	ldrb	r3, [r3, #20]
 800c66e:	461a      	mov	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	ea42 0203 	orr.w	r2, r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800c67c:	ea42 0203 	orr.w	r2, r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	ea42 0203 	orr.w	r2, r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800c68c:	ea42 0203 	orr.w	r2, r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	ea42 0303 	orr.w	r3, r2, r3
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	ea42 0303 	orr.w	r3, r2, r3
 800c69e:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800c6a0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c6a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	605a      	str	r2, [r3, #4]
}
 800c6ac:	f107 0714 	add.w	r7, r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bc80      	pop	{r7}
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop

0800c6b8 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f04f 0200 	mov.w	r2, #0
 800c6c6:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f04f 0200 	mov.w	r2, #0
 800c6ce:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f04f 0200 	mov.w	r2, #0
 800c6d6:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f04f 0200 	mov.w	r2, #0
 800c6de:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f04f 0200 	mov.w	r2, #0
 800c6e6:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	611a      	str	r2, [r3, #16]
}
 800c6f0:	f107 070c 	add.w	r7, r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bc80      	pop	{r7}
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop

0800c6fc <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800c706:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800c70a:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c70e:	79fa      	ldrb	r2, [r7, #7]
 800c710:	601a      	str	r2, [r3, #0]
}
 800c712:	f107 070c 	add.w	r7, r7, #12
 800c716:	46bd      	mov	sp, r7
 800c718:	bc80      	pop	{r7}
 800c71a:	4770      	bx	lr

0800c71c <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER &= PWR_PWRCTRL_MASK;
 800c724:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c728:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c72c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800c730:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c734:	6812      	ldr	r2, [r2, #0]
 800c736:	f022 0203 	bic.w	r2, r2, #3
 800c73a:	601a      	str	r2, [r3, #0]
  SDIO->POWER |= SDIO_PowerState;
 800c73c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c740:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c744:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800c748:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c74c:	6811      	ldr	r1, [r2, #0]
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	ea41 0202 	orr.w	r2, r1, r2
 800c754:	601a      	str	r2, [r3, #0]
}
 800c756:	f107 070c 	add.w	r7, r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bc80      	pop	{r7}
 800c75e:	4770      	bx	lr

0800c760 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800c760:	b480      	push	{r7}
 800c762:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800c764:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c768:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 0303 	and.w	r3, r3, #3
}
 800c772:	4618      	mov	r0, r3
 800c774:	46bd      	mov	sp, r7
 800c776:	bc80      	pop	{r7}
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop

0800c77c <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c784:	f04f 0300 	mov.w	r3, #0
 800c788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800c78a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c78e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800c798:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c79c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c7aa:	f023 030f 	bic.w	r3, r3, #15
 800c7ae:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	ea42 0203 	orr.w	r2, r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	ea42 0203 	orr.w	r2, r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	ea42 0303 	orr.w	r3, r2, r3
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	ea42 0303 	orr.w	r3, r2, r3
 800c7d2:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800c7d4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c7d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	60da      	str	r2, [r3, #12]
}
 800c7e0:	f107 0714 	add.w	r7, r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bc80      	pop	{r7}
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop

0800c7ec <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f04f 0200 	mov.w	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f04f 0200 	mov.w	r2, #0
 800c802:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f04f 0200 	mov.w	r2, #0
 800c80a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f04f 0200 	mov.w	r2, #0
 800c812:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f04f 0200 	mov.w	r2, #0
 800c81a:	611a      	str	r2, [r3, #16]
}
 800c81c:	f107 070c 	add.w	r7, r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	bc80      	pop	{r7}
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop

0800c828 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800c828:	b480      	push	{r7}
 800c82a:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800c82c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c830:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	b2db      	uxtb	r3, r3
}
 800c838:	4618      	mov	r0, r3
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bc80      	pop	{r7}
 800c83e:	4770      	bx	lr

0800c840 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800c848:	f04f 0300 	mov.w	r3, #0
 800c84c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	f642 4314 	movw	r3, #11284	; 0x2c14
 800c854:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c858:	4413      	add	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
}
 800c860:	4618      	mov	r0, r3
 800c862:	f107 0714 	add.w	r7, r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	bc80      	pop	{r7}
 800c86a:	4770      	bx	lr

0800c86c <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c874:	f04f 0300 	mov.w	r3, #0
 800c878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800c87a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c87e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	6812      	ldr	r2, [r2, #0]
 800c886:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800c888:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c88c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	6852      	ldr	r2, [r2, #4]
 800c894:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800c896:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c89a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800c8a8:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689a      	ldr	r2, [r3, #8]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	ea42 0203 	orr.w	r2, r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	ea42 0203 	orr.w	r2, r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	ea42 0303 	orr.w	r3, r2, r3
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	ea42 0303 	orr.w	r3, r2, r3
 800c8cc:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800c8ce:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c8d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c8da:	f107 0714 	add.w	r7, r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bc80      	pop	{r7}
 800c8e2:	4770      	bx	lr

0800c8e4 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f2:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f04f 0200 	mov.w	r2, #0
 800c8fa:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f04f 0200 	mov.w	r2, #0
 800c902:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f04f 0200 	mov.w	r2, #0
 800c90a:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f04f 0200 	mov.w	r2, #0
 800c912:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f04f 0200 	mov.w	r2, #0
 800c91a:	615a      	str	r2, [r3, #20]
}
 800c91c:	f107 070c 	add.w	r7, r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	bc80      	pop	{r7}
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop

0800c928 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800c928:	b480      	push	{r7}
 800c92a:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800c92c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c930:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800c936:	4618      	mov	r0, r3
 800c938:	46bd      	mov	sp, r7
 800c93a:	bc80      	pop	{r7}
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop

0800c940 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800c940:	b480      	push	{r7}
 800c942:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800c944:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c948:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c950:	4618      	mov	r0, r3
 800c952:	46bd      	mov	sp, r7
 800c954:	bc80      	pop	{r7}
 800c956:	4770      	bx	lr

0800c958 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800c960:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c964:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c96e:	f107 070c 	add.w	r7, r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	bc80      	pop	{r7}
 800c976:	4770      	bx	lr

0800c978 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800c978:	b480      	push	{r7}
 800c97a:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800c97c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c980:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800c986:	4618      	mov	r0, r3
 800c988:	46bd      	mov	sp, r7
 800c98a:	bc80      	pop	{r7}
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop

0800c990 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	4603      	mov	r3, r0
 800c998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800c99a:	f248 53a0 	movw	r3, #34208	; 0x85a0
 800c99e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c9a2:	79fa      	ldrb	r2, [r7, #7]
 800c9a4:	601a      	str	r2, [r3, #0]
}
 800c9a6:	f107 070c 	add.w	r7, r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bc80      	pop	{r7}
 800c9ae:	4770      	bx	lr

0800c9b0 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800c9ba:	f248 53a4 	movw	r3, #34212	; 0x85a4
 800c9be:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c9c2:	79fa      	ldrb	r2, [r7, #7]
 800c9c4:	601a      	str	r2, [r3, #0]
}
 800c9c6:	f107 070c 	add.w	r7, r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bc80      	pop	{r7}
 800c9ce:	4770      	bx	lr

0800c9d0 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800c9d8:	f248 53a8 	movw	r3, #34216	; 0x85a8
 800c9dc:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	601a      	str	r2, [r3, #0]
}
 800c9e4:	f107 070c 	add.w	r7, r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bc80      	pop	{r7}
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop

0800c9f0 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800c9fa:	f248 53ac 	movw	r3, #34220	; 0x85ac
 800c9fe:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ca02:	79fa      	ldrb	r2, [r7, #7]
 800ca04:	601a      	str	r2, [r3, #0]
}
 800ca06:	f107 070c 	add.w	r7, r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bc80      	pop	{r7}
 800ca0e:	4770      	bx	lr

0800ca10 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800ca1a:	f248 13ac 	movw	r3, #33196	; 0x81ac
 800ca1e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ca22:	79fa      	ldrb	r2, [r7, #7]
 800ca24:	601a      	str	r2, [r3, #0]
}
 800ca26:	f107 070c 	add.w	r7, r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bc80      	pop	{r7}
 800ca2e:	4770      	bx	lr

0800ca30 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800ca3a:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800ca3e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ca42:	79fa      	ldrb	r2, [r7, #7]
 800ca44:	601a      	str	r2, [r3, #0]
}
 800ca46:	f107 070c 	add.w	r7, r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bc80      	pop	{r7}
 800ca4e:	4770      	bx	lr

0800ca50 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800ca5a:	f248 13b4 	movw	r3, #33204	; 0x81b4
 800ca5e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ca62:	79fa      	ldrb	r2, [r7, #7]
 800ca64:	f002 0201 	and.w	r2, r2, #1
 800ca68:	2a00      	cmp	r2, #0
 800ca6a:	bf14      	ite	ne
 800ca6c:	2200      	movne	r2, #0
 800ca6e:	2201      	moveq	r2, #1
 800ca70:	601a      	str	r2, [r3, #0]
}
 800ca72:	f107 070c 	add.w	r7, r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bc80      	pop	{r7}
 800ca7a:	4770      	bx	lr

0800ca7c <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	4603      	mov	r3, r0
 800ca84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800ca86:	f248 13b8 	movw	r3, #33208	; 0x81b8
 800ca8a:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ca8e:	79fa      	ldrb	r2, [r7, #7]
 800ca90:	601a      	str	r2, [r3, #0]
}
 800ca92:	f107 070c 	add.w	r7, r7, #12
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bc80      	pop	{r7}
 800ca9a:	4770      	bx	lr

0800ca9c <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	4603      	mov	r3, r0
 800caa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800caa6:	f248 538c 	movw	r3, #34188	; 0x858c
 800caaa:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800caae:	79fa      	ldrb	r2, [r7, #7]
 800cab0:	601a      	str	r2, [r3, #0]
}
 800cab2:	f107 070c 	add.w	r7, r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bc80      	pop	{r7}
 800caba:	4770      	bx	lr

0800cabc <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cac8:	78fb      	ldrb	r3, [r7, #3]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00d      	beq.n	800caea <SDIO_ITConfig+0x2e>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800cace:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800cad2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cad6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800cada:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800cade:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	ea41 0202 	orr.w	r2, r1, r2
 800cae6:	63da      	str	r2, [r3, #60]	; 0x3c
 800cae8:	e00e      	b.n	800cb08 <SDIO_ITConfig+0x4c>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800caea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800caee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800caf2:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800caf6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800cafa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	ea6f 0202 	mvn.w	r2, r2
 800cb02:	ea01 0202 	and.w	r2, r1, r2
 800cb06:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800cb08:	f107 070c 	add.w	r7, r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bc80      	pop	{r7}
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop

0800cb14 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800cb1c:	f04f 0300 	mov.w	r3, #0
 800cb20:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800cb22:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800cb26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cb2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	ea02 0303 	and.w	r3, r2, r3
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d003      	beq.n	800cb3e <SDIO_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800cb36:	f04f 0301 	mov.w	r3, #1
 800cb3a:	73fb      	strb	r3, [r7, #15]
 800cb3c:	e002      	b.n	800cb44 <SDIO_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800cb3e:	f04f 0300 	mov.w	r3, #0
 800cb42:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	f107 0714 	add.w	r7, r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bc80      	pop	{r7}
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop

0800cb54 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800cb5c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800cb60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	639a      	str	r2, [r3, #56]	; 0x38
}
 800cb68:	f107 070c 	add.w	r7, r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bc80      	pop	{r7}
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop

0800cb74 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800cb7c:	f04f 0300 	mov.w	r3, #0
 800cb80:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800cb82:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800cb86:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cb8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	ea02 0303 	and.w	r3, r2, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <SDIO_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800cb96:	f04f 0301 	mov.w	r3, #1
 800cb9a:	73fb      	strb	r3, [r7, #15]
 800cb9c:	e002      	b.n	800cba4 <SDIO_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800cb9e:	f04f 0300 	mov.w	r3, #0
 800cba2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	f107 0714 	add.w	r7, r7, #20
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bc80      	pop	{r7}
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop

0800cbb4 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800cbbc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800cbc0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	639a      	str	r2, [r3, #56]	; 0x38
}
 800cbc8:	f107 070c 	add.w	r7, r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bc80      	pop	{r7}
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop

0800cbd4 <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode.   
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800cbe2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d10c      	bne.n	800cc04 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800cbea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cbee:	f04f 0101 	mov.w	r1, #1
 800cbf2:	f7fd fecd 	bl	800a990 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800cbf6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cbfa:	f04f 0100 	mov.w	r1, #0
 800cbfe:	f7fd fec7 	bl	800a990 <RCC_APB2PeriphResetCmd>
 800cc02:	e026      	b.n	800cc52 <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cc0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d10c      	bne.n	800cc2c <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800cc12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cc16:	f04f 0101 	mov.w	r1, #1
 800cc1a:	f7fd fe8d 	bl	800a938 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800cc1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cc22:	f04f 0100 	mov.w	r1, #0
 800cc26:	f7fd fe87 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800cc2a:	e012      	b.n	800cc52 <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d10b      	bne.n	800cc52 <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800cc3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cc3e:	f04f 0101 	mov.w	r1, #1
 800cc42:	f7fd fe79 	bl	800a938 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800cc46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cc4a:	f04f 0100 	mov.w	r1, #0
 800cc4e:	f7fd fe73 	bl	800a938 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800cc52:	f107 0708 	add.w	r7, r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop

0800cc5c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800cc66:	f04f 0300 	mov.w	r3, #0
 800cc6a:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	881b      	ldrh	r3, [r3, #0]
 800cc70:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800cc72:	89fb      	ldrh	r3, [r7, #14]
 800cc74:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800cc78:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	881a      	ldrh	r2, [r3, #0]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	885b      	ldrh	r3, [r3, #2]
 800cc82:	ea42 0303 	orr.w	r3, r2, r3
 800cc86:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800cc8c:	ea42 0303 	orr.w	r3, r2, r3
 800cc90:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800cc96:	ea42 0303 	orr.w	r3, r2, r3
 800cc9a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800cca0:	ea42 0303 	orr.w	r3, r2, r3
 800cca4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ccaa:	ea42 0303 	orr.w	r3, r2, r3
 800ccae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ccb4:	ea42 0303 	orr.w	r3, r2, r3
 800ccb8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ccbe:	ea42 0303 	orr.w	r3, r2, r3
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	89fb      	ldrh	r3, [r7, #14]
 800ccc6:	ea42 0303 	orr.w	r3, r2, r3
 800ccca:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	89fa      	ldrh	r2, [r7, #14]
 800ccd0:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8b9b      	ldrh	r3, [r3, #28]
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	8a1a      	ldrh	r2, [r3, #16]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	821a      	strh	r2, [r3, #16]
}
 800ccea:	f107 0714 	add.w	r7, r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bc80      	pop	{r7}
 800ccf2:	4770      	bx	lr

0800ccf4 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b08b      	sub	sp, #44	; 0x2c
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800ccfe:	f04f 0300 	mov.w	r3, #0
 800cd02:	837b      	strh	r3, [r7, #26]
 800cd04:	f04f 0302 	mov.w	r3, #2
 800cd08:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd0a:	f04f 0300 	mov.w	r3, #0
 800cd0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cd10:	f04f 0301 	mov.w	r3, #1
 800cd14:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800cd16:	f04f 0300 	mov.w	r3, #0
 800cd1a:	61fb      	str	r3, [r7, #28]
 800cd1c:	f04f 0300 	mov.w	r3, #0
 800cd20:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800cd22:	f04f 0300 	mov.w	r3, #0
 800cd26:	613b      	str	r3, [r7, #16]
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	f04f 0300 	mov.w	r3, #0
 800cd32:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	8b9b      	ldrh	r3, [r3, #28]
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800cd3e:	f023 031f 	bic.w	r3, r3, #31
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f04f 0202 	mov.w	r2, #2
 800cd4e:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	8b9b      	ldrh	r3, [r3, #28]
 800cd54:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d106      	bne.n	800cd6c <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 800cd5e:	f04f 0300 	mov.w	r3, #0
 800cd62:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800cd64:	f04f 0302 	mov.w	r3, #2
 800cd68:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd6a:	e09c      	b.n	800cea6 <I2S_Init+0x1b2>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	889b      	ldrh	r3, [r3, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d103      	bne.n	800cd7c <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800cd74:	f04f 0301 	mov.w	r3, #1
 800cd78:	847b      	strh	r3, [r7, #34]	; 0x22
 800cd7a:	e002      	b.n	800cd82 <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800cd7c:	f04f 0302 	mov.w	r3, #2
 800cd80:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800cd82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cd86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00b      	beq.n	800cdac <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800cd94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cd98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cd9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cda0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cda4:	6892      	ldr	r2, [r2, #8]
 800cda6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800cdaa:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800cdac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cdb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cdb4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800cdb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cdbc:	ea02 0303 	and.w	r3, r2, r3
 800cdc0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800cdc4:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800cdc8:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800cdcc:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800cdce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cdd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cdd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdda:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cdde:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800cde2:	f003 0307 	and.w	r3, r3, #7
 800cde6:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800cde8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cdec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdf6:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800cdf8:	f647 0340 	movw	r3, #30784	; 0x7840
 800cdfc:	f2c0 137d 	movt	r3, #381	; 0x17d
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	fb02 f203 	mul.w	r2, r2, r3
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce12:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	88db      	ldrh	r3, [r3, #6]
 800ce18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce1c:	d113      	bne.n	800ce46 <I2S_Init+0x152>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800ce24:	4613      	mov	r3, r2
 800ce26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce30:	461a      	mov	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	f103 0305 	add.w	r3, r3, #5
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	61fb      	str	r3, [r7, #28]
 800ce44:	e015      	b.n	800ce72 <I2S_Init+0x17e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800ce46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce48:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce52:	4613      	mov	r3, r2
 800ce54:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ce58:	4413      	add	r3, r2
 800ce5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce5e:	461a      	mov	r2, r3
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	f103 0305 	add.w	r3, r3, #5
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800ce72:	69fa      	ldr	r2, [r7, #28]
 800ce74:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800ce78:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800ce7c:	fba3 1302 	umull	r1, r3, r3, r2
 800ce80:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800ce84:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800ce90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce92:	69fa      	ldr	r2, [r7, #28]
 800ce94:	ebc3 0302 	rsb	r3, r3, r2
 800ce98:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800ce9c:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800ce9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cea0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800cea4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800cea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d902      	bls.n	800ceb2 <I2S_Init+0x1be>
 800ceac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ceae:	2bff      	cmp	r3, #255	; 0xff
 800ceb0:	d905      	bls.n	800cebe <I2S_Init+0x1ca>
  {
    /* Set the default values */
    i2sdiv = 2;
 800ceb2:	f04f 0302 	mov.w	r3, #2
 800ceb6:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800ceb8:	f04f 0300 	mov.w	r3, #0
 800cebc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	88da      	ldrh	r2, [r3, #6]
 800cec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec4:	ea42 0303 	orr.w	r3, r2, r3
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cecc:	ea42 0303 	orr.w	r3, r2, r3
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	8859      	ldrh	r1, [r3, #2]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800cee6:	ea40 0303 	orr.w	r3, r0, r3
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	ea41 0303 	orr.w	r3, r1, r3
 800cef0:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800cef2:	ea42 0303 	orr.w	r3, r2, r3
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	8b7b      	ldrh	r3, [r7, #26]
 800cefa:	ea42 0303 	orr.w	r3, r2, r3
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cf04:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	8b7a      	ldrh	r2, [r7, #26]
 800cf0a:	839a      	strh	r2, [r3, #28]
}
 800cf0c:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bc80      	pop	{r7}
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop

0800cf18 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f04f 0200 	mov.w	r2, #0
 800cf26:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f04f 0200 	mov.w	r2, #0
 800cf2e:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f04f 0200 	mov.w	r2, #0
 800cf36:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f04f 0200 	mov.w	r2, #0
 800cf3e:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f04f 0200 	mov.w	r2, #0
 800cf46:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f04f 0200 	mov.w	r2, #0
 800cf4e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f04f 0200 	mov.w	r2, #0
 800cf56:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f04f 0200 	mov.w	r2, #0
 800cf5e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f04f 0207 	mov.w	r2, #7
 800cf66:	821a      	strh	r2, [r3, #16]
}
 800cf68:	f107 070c 	add.w	r7, r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bc80      	pop	{r7}
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop

0800cf74 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f04f 0200 	mov.w	r2, #0
 800cf8a:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f04f 0200 	mov.w	r2, #0
 800cf92:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f04f 0200 	mov.w	r2, #0
 800cf9a:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f04f 0202 	mov.w	r2, #2
 800cfa2:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f04f 0200 	mov.w	r2, #0
 800cfaa:	819a      	strh	r2, [r3, #12]
}
 800cfac:	f107 070c 	add.w	r7, r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bc80      	pop	{r7}
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop

0800cfb8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d008      	beq.n	800cfdc <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	801a      	strh	r2, [r3, #0]
 800cfda:	e007      	b.n	800cfec <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	801a      	strh	r2, [r3, #0]
  }
}
 800cfec:	f107 070c 	add.w	r7, r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bc80      	pop	{r7}
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop

0800cff8 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	460b      	mov	r3, r1
 800d002:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d004:	78fb      	ldrb	r3, [r7, #3]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d008      	beq.n	800d01c <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	8b9b      	ldrh	r3, [r3, #28]
 800d00e:	b29b      	uxth	r3, r3
 800d010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	839a      	strh	r2, [r3, #28]
 800d01a:	e007      	b.n	800d02c <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8b9b      	ldrh	r3, [r3, #28]
 800d020:	b29b      	uxth	r3, r3
 800d022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d026:	b29a      	uxth	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	839a      	strh	r2, [r3, #28]
  }
}
 800d02c:	f107 070c 	add.w	r7, r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	bc80      	pop	{r7}
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop

0800d038 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d04e:	b29a      	uxth	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	b29a      	uxth	r2, r3
 800d05a:	887b      	ldrh	r3, [r7, #2]
 800d05c:	ea42 0303 	orr.w	r3, r2, r3
 800d060:	b29a      	uxth	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	801a      	strh	r2, [r3, #0]
}
 800d066:	f107 070c 	add.w	r7, r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bc80      	pop	{r7}
 800d06e:	4770      	bx	lr

0800d070 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	460b      	mov	r3, r1
 800d07a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800d07c:	887b      	ldrh	r3, [r7, #2]
 800d07e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d082:	d108      	bne.n	800d096 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	b29b      	uxth	r3, r3
 800d08a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d08e:	b29a      	uxth	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	801a      	strh	r2, [r3, #0]
 800d094:	e007      	b.n	800d0a6 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	801a      	strh	r2, [r3, #0]
  }
}
 800d0a6:	f107 070c 	add.w	r7, r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bc80      	pop	{r7}
 800d0ae:	4770      	bx	lr

0800d0b0 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800d0bc:	887a      	ldrh	r2, [r7, #2]
 800d0be:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d008      	beq.n	800d0d8 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	801a      	strh	r2, [r3, #0]
 800d0d6:	e007      	b.n	800d0e8 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	881b      	ldrh	r3, [r3, #0]
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	801a      	strh	r2, [r3, #0]
  }
}
 800d0e8:	f107 070c 	add.w	r7, r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bc80      	pop	{r7}
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop

0800d0f4 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d100:	78fb      	ldrb	r3, [r7, #3]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d008      	beq.n	800d118 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	889b      	ldrh	r3, [r3, #4]
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	f043 0304 	orr.w	r3, r3, #4
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	809a      	strh	r2, [r3, #4]
 800d116:	e007      	b.n	800d128 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	889b      	ldrh	r3, [r3, #4]
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	f023 0304 	bic.w	r3, r3, #4
 800d122:	b29a      	uxth	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	809a      	strh	r2, [r3, #4]
  }
}
 800d128:	f107 070c 	add.w	r7, r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bc80      	pop	{r7}
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop

0800d134 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	460b      	mov	r3, r1
 800d13e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d140:	78fb      	ldrb	r3, [r7, #3]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d008      	beq.n	800d158 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	889b      	ldrh	r3, [r3, #4]
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	f043 0310 	orr.w	r3, r3, #16
 800d150:	b29a      	uxth	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	809a      	strh	r2, [r3, #4]
 800d156:	e007      	b.n	800d168 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	889b      	ldrh	r3, [r3, #4]
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	f023 0310 	bic.w	r3, r3, #16
 800d162:	b29a      	uxth	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	809a      	strh	r2, [r3, #4]
  }
}
 800d168:	f107 070c 	add.w	r7, r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bc80      	pop	{r7}
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop

0800d174 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	899b      	ldrh	r3, [r3, #12]
 800d180:	b29b      	uxth	r3, r3
}
 800d182:	4618      	mov	r0, r3
 800d184:	f107 070c 	add.w	r7, r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	bc80      	pop	{r7}
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop

0800d190 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	887a      	ldrh	r2, [r7, #2]
 800d1a0:	819a      	strh	r2, [r3, #12]
}
 800d1a2:	f107 070c 	add.w	r7, r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bc80      	pop	{r7}
 800d1aa:	4770      	bx	lr

0800d1ac <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d1b8:	78fb      	ldrb	r3, [r7, #3]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d008      	beq.n	800d1d0 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	881b      	ldrh	r3, [r3, #0]
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	801a      	strh	r2, [r3, #0]
 800d1ce:	e007      	b.n	800d1e0 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	881b      	ldrh	r3, [r3, #0]
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	801a      	strh	r2, [r3, #0]
  }
}
 800d1e0:	f107 070c 	add.w	r7, r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bc80      	pop	{r7}
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop

0800d1ec <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	801a      	strh	r2, [r3, #0]
}
 800d204:	f107 070c 	add.w	r7, r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	bc80      	pop	{r7}
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop

0800d210 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800d21c:	f04f 0300 	mov.w	r3, #0
 800d220:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800d222:	78fb      	ldrb	r3, [r7, #3]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d003      	beq.n	800d230 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	8b1b      	ldrh	r3, [r3, #24]
 800d22c:	81fb      	strh	r3, [r7, #14]
 800d22e:	e002      	b.n	800d236 <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	8a9b      	ldrh	r3, [r3, #20]
 800d234:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800d236:	89fb      	ldrh	r3, [r7, #14]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	f107 0714 	add.w	r7, r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	bc80      	pop	{r7}
 800d242:	4770      	bx	lr

0800d244 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	8a1b      	ldrh	r3, [r3, #16]
 800d250:	b29b      	uxth	r3, r3
}
 800d252:	4618      	mov	r0, r3
 800d254:	f107 070c 	add.w	r7, r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	bc80      	pop	{r7}
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop

0800d260 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	4613      	mov	r3, r2
 800d26a:	460a      	mov	r2, r1
 800d26c:	807a      	strh	r2, [r7, #2]
 800d26e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800d270:	787b      	ldrb	r3, [r7, #1]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d009      	beq.n	800d28a <SPI_I2S_DMACmd+0x2a>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	889b      	ldrh	r3, [r3, #4]
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	887b      	ldrh	r3, [r7, #2]
 800d27e:	ea42 0303 	orr.w	r3, r2, r3
 800d282:	b29a      	uxth	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	809a      	strh	r2, [r3, #4]
 800d288:	e00b      	b.n	800d2a2 <SPI_I2S_DMACmd+0x42>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	889b      	ldrh	r3, [r3, #4]
 800d28e:	b29a      	uxth	r2, r3
 800d290:	887b      	ldrh	r3, [r7, #2]
 800d292:	ea6f 0303 	mvn.w	r3, r3
 800d296:	b29b      	uxth	r3, r3
 800d298:	ea02 0303 	and.w	r3, r2, r3
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	809a      	strh	r2, [r3, #4]
  }
}
 800d2a2:	f107 070c 	add.w	r7, r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bc80      	pop	{r7}
 800d2aa:	4770      	bx	lr

0800d2ac <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	460a      	mov	r2, r1
 800d2b8:	70fa      	strb	r2, [r7, #3]
 800d2ba:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800d2bc:	f04f 0300 	mov.w	r3, #0
 800d2c0:	81fb      	strh	r3, [r7, #14]
 800d2c2:	f04f 0300 	mov.w	r3, #0
 800d2c6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800d2d2:	89fb      	ldrh	r3, [r7, #14]
 800d2d4:	f04f 0201 	mov.w	r2, #1
 800d2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2dc:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800d2de:	78bb      	ldrb	r3, [r7, #2]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d009      	beq.n	800d2f8 <SPI_I2S_ITConfig+0x4c>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	889b      	ldrh	r3, [r3, #4]
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	89bb      	ldrh	r3, [r7, #12]
 800d2ec:	ea42 0303 	orr.w	r3, r2, r3
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	809a      	strh	r2, [r3, #4]
 800d2f6:	e00b      	b.n	800d310 <SPI_I2S_ITConfig+0x64>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	889b      	ldrh	r3, [r3, #4]
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	89bb      	ldrh	r3, [r7, #12]
 800d300:	ea6f 0303 	mvn.w	r3, r3
 800d304:	b29b      	uxth	r3, r3
 800d306:	ea02 0303 	and.w	r3, r2, r3
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	809a      	strh	r2, [r3, #4]
  }
}
 800d310:	f107 0714 	add.w	r7, r7, #20
 800d314:	46bd      	mov	sp, r7
 800d316:	bc80      	pop	{r7}
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop

0800d31c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	460b      	mov	r3, r1
 800d326:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800d328:	f04f 0300 	mov.w	r3, #0
 800d32c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	891b      	ldrh	r3, [r3, #8]
 800d332:	b29a      	uxth	r2, r3
 800d334:	887b      	ldrh	r3, [r7, #2]
 800d336:	ea02 0303 	and.w	r3, r2, r3
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d003      	beq.n	800d348 <SPI_I2S_GetFlagStatus+0x2c>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800d340:	f04f 0301 	mov.w	r3, #1
 800d344:	73fb      	strb	r3, [r7, #15]
 800d346:	e002      	b.n	800d34e <SPI_I2S_GetFlagStatus+0x32>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800d348:	f04f 0300 	mov.w	r3, #0
 800d34c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d350:	4618      	mov	r0, r3
 800d352:	f107 0714 	add.w	r7, r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	bc80      	pop	{r7}
 800d35a:	4770      	bx	lr

0800d35c <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800d368:	887b      	ldrh	r3, [r7, #2]
 800d36a:	ea6f 0303 	mvn.w	r3, r3
 800d36e:	b29a      	uxth	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	811a      	strh	r2, [r3, #8]
}
 800d374:	f107 070c 	add.w	r7, r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	bc80      	pop	{r7}
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop

0800d380 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800d38c:	f04f 0300 	mov.w	r3, #0
 800d390:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800d392:	f04f 0300 	mov.w	r3, #0
 800d396:	81bb      	strh	r3, [r7, #12]
 800d398:	f04f 0300 	mov.w	r3, #0
 800d39c:	817b      	strh	r3, [r7, #10]
 800d39e:	f04f 0300 	mov.w	r3, #0
 800d3a2:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800d3a4:	78fb      	ldrb	r3, [r7, #3]
 800d3a6:	f003 030f 	and.w	r3, r3, #15
 800d3aa:	f04f 0201 	mov.w	r2, #1
 800d3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d3b2:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800d3b4:	78fb      	ldrb	r3, [r7, #3]
 800d3b6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800d3be:	897b      	ldrh	r3, [r7, #10]
 800d3c0:	f04f 0201 	mov.w	r2, #1
 800d3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c8:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	889b      	ldrh	r3, [r3, #4]
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	897b      	ldrh	r3, [r7, #10]
 800d3d2:	ea02 0303 	and.w	r3, r2, r3
 800d3d6:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	891b      	ldrh	r3, [r3, #8]
 800d3dc:	b29a      	uxth	r2, r3
 800d3de:	89bb      	ldrh	r3, [r7, #12]
 800d3e0:	ea02 0303 	and.w	r3, r2, r3
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d006      	beq.n	800d3f8 <SPI_I2S_GetITStatus+0x78>
 800d3ea:	893b      	ldrh	r3, [r7, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d003      	beq.n	800d3f8 <SPI_I2S_GetITStatus+0x78>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800d3f0:	f04f 0301 	mov.w	r3, #1
 800d3f4:	73fb      	strb	r3, [r7, #15]
 800d3f6:	e002      	b.n	800d3fe <SPI_I2S_GetITStatus+0x7e>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800d3f8:	f04f 0300 	mov.w	r3, #0
 800d3fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800d3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d400:	4618      	mov	r0, r3
 800d402:	f107 0714 	add.w	r7, r7, #20
 800d406:	46bd      	mov	sp, r7
 800d408:	bc80      	pop	{r7}
 800d40a:	4770      	bx	lr

0800d40c <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800d418:	f04f 0300 	mov.w	r3, #0
 800d41c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800d41e:	78fb      	ldrb	r3, [r7, #3]
 800d420:	f003 030f 	and.w	r3, r3, #15
 800d424:	f04f 0201 	mov.w	r2, #1
 800d428:	fa02 f303 	lsl.w	r3, r2, r3
 800d42c:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800d42e:	89fb      	ldrh	r3, [r7, #14]
 800d430:	ea6f 0303 	mvn.w	r3, r3
 800d434:	b29a      	uxth	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	811a      	strh	r2, [r3, #8]
}
 800d43a:	f107 0714 	add.w	r7, r7, #20
 800d43e:	46bd      	mov	sp, r7
 800d440:	bc80      	pop	{r7}
 800d442:	4770      	bx	lr

0800d444 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800d448:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d44c:	f04f 0101 	mov.w	r1, #1
 800d450:	f7fd fa9e 	bl	800a990 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800d454:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d458:	f04f 0100 	mov.w	r1, #0
 800d45c:	f7fd fa98 	bl	800a990 <RCC_APB2PeriphResetCmd>
}
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <SYSCFG_MemoryRemapConfig>:
  *         registers. 
  *        
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800d46e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d472:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d476:	79fa      	ldrb	r2, [r7, #7]
 800d478:	601a      	str	r2, [r3, #0]
}
 800d47a:	f107 070c 	add.w	r7, r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	bc80      	pop	{r7}
 800d482:	4770      	bx	lr

0800d484 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4602      	mov	r2, r0
 800d48c:	460b      	mov	r3, r1
 800d48e:	71fa      	strb	r2, [r7, #7]
 800d490:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800d492:	f04f 0300 	mov.w	r3, #0
 800d496:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800d498:	79bb      	ldrb	r3, [r7, #6]
 800d49a:	f003 0303 	and.w	r3, r3, #3
 800d49e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d4a2:	f04f 020f 	mov.w	r2, #15
 800d4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4aa:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800d4ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d4b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d4b4:	79ba      	ldrb	r2, [r7, #6]
 800d4b6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d4ba:	b2d2      	uxtb	r2, r2
 800d4bc:	4610      	mov	r0, r2
 800d4be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800d4c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800d4c6:	79b9      	ldrb	r1, [r7, #6]
 800d4c8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800d4cc:	b2c9      	uxtb	r1, r1
 800d4ce:	f101 0102 	add.w	r1, r1, #2
 800d4d2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	ea6f 0202 	mvn.w	r2, r2
 800d4dc:	ea01 0102 	and.w	r1, r1, r2
 800d4e0:	f100 0202 	add.w	r2, r0, #2
 800d4e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800d4e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d4ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d4f0:	79ba      	ldrb	r2, [r7, #6]
 800d4f2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800d4f6:	b2d2      	uxtb	r2, r2
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800d4fe:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800d502:	79b9      	ldrb	r1, [r7, #6]
 800d504:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800d508:	b2c9      	uxtb	r1, r1
 800d50a:	f101 0102 	add.w	r1, r1, #2
 800d50e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d512:	f897 c007 	ldrb.w	ip, [r7, #7]
 800d516:	79ba      	ldrb	r2, [r7, #6]
 800d518:	f002 0203 	and.w	r2, r2, #3
 800d51c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800d520:	fa0c f202 	lsl.w	r2, ip, r2
 800d524:	ea41 0102 	orr.w	r1, r1, r2
 800d528:	f100 0202 	add.w	r2, r0, #2
 800d52c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800d530:	f107 0714 	add.w	r7, r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	bc80      	pop	{r7}
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop

0800d53c <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800d544:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 800d548:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	601a      	str	r2, [r3, #0]
}
 800d550:	f107 070c 	add.w	r7, r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	bc80      	pop	{r7}
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop

0800d55c <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	4603      	mov	r3, r0
 800d564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800d566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d56a:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800d56e:	79fa      	ldrb	r2, [r7, #7]
 800d570:	601a      	str	r2, [r3, #0]
}
 800d572:	f107 070c 	add.w	r7, r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	bc80      	pop	{r7}
 800d57a:	4770      	bx	lr

0800d57c <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800d582:	f04f 0300 	mov.w	r3, #0
 800d586:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800d588:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d58c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d590:	6a1b      	ldr	r3, [r3, #32]
 800d592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 800d59a:	f04f 0301 	mov.w	r3, #1
 800d59e:	71fb      	strb	r3, [r7, #7]
 800d5a0:	e002      	b.n	800d5a8 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800d5a2:	f04f 0300 	mov.w	r3, #0
 800d5a6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800d5a8:	79fb      	ldrb	r3, [r7, #7]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f107 070c 	add.w	r7, r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bc80      	pop	{r7}
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop

0800d5b8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	f04f 0300 	mov.w	r3, #0
 800d5c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d10c      	bne.n	800d5e8 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800d5ce:	f04f 0001 	mov.w	r0, #1
 800d5d2:	f04f 0101 	mov.w	r1, #1
 800d5d6:	f7fd f9db 	bl	800a990 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800d5da:	f04f 0001 	mov.w	r0, #1
 800d5de:	f04f 0100 	mov.w	r1, #0
 800d5e2:	f7fd f9d5 	bl	800a990 <RCC_APB2PeriphResetCmd>
 800d5e6:	e0ff      	b.n	800d7e8 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ee:	d10c      	bne.n	800d60a <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800d5f0:	f04f 0001 	mov.w	r0, #1
 800d5f4:	f04f 0101 	mov.w	r1, #1
 800d5f8:	f7fd f99e 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800d5fc:	f04f 0001 	mov.w	r0, #1
 800d600:	f04f 0100 	mov.w	r1, #0
 800d604:	f7fd f998 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800d608:	e0ee      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d610:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d614:	429a      	cmp	r2, r3
 800d616:	d10c      	bne.n	800d632 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800d618:	f04f 0002 	mov.w	r0, #2
 800d61c:	f04f 0101 	mov.w	r1, #1
 800d620:	f7fd f98a 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800d624:	f04f 0002 	mov.w	r0, #2
 800d628:	f04f 0100 	mov.w	r1, #0
 800d62c:	f7fd f984 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800d630:	e0da      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d638:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d10c      	bne.n	800d65a <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800d640:	f04f 0004 	mov.w	r0, #4
 800d644:	f04f 0101 	mov.w	r1, #1
 800d648:	f7fd f976 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800d64c:	f04f 0004 	mov.w	r0, #4
 800d650:	f04f 0100 	mov.w	r1, #0
 800d654:	f7fd f970 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800d658:	e0c6      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d660:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d664:	429a      	cmp	r2, r3
 800d666:	d10c      	bne.n	800d682 <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800d668:	f04f 0008 	mov.w	r0, #8
 800d66c:	f04f 0101 	mov.w	r1, #1
 800d670:	f7fd f962 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800d674:	f04f 0008 	mov.w	r0, #8
 800d678:	f04f 0100 	mov.w	r1, #0
 800d67c:	f7fd f95c 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800d680:	e0b2      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d688:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d10c      	bne.n	800d6aa <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800d690:	f04f 0010 	mov.w	r0, #16
 800d694:	f04f 0101 	mov.w	r1, #1
 800d698:	f7fd f94e 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800d69c:	f04f 0010 	mov.w	r0, #16
 800d6a0:	f04f 0100 	mov.w	r1, #0
 800d6a4:	f7fd f948 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800d6a8:	e09e      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d6b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d10c      	bne.n	800d6d2 <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800d6b8:	f04f 0020 	mov.w	r0, #32
 800d6bc:	f04f 0101 	mov.w	r1, #1
 800d6c0:	f7fd f93a 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800d6c4:	f04f 0020 	mov.w	r0, #32
 800d6c8:	f04f 0100 	mov.w	r1, #0
 800d6cc:	f7fd f934 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800d6d0:	e08a      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d10c      	bne.n	800d6fa <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800d6e0:	f04f 0002 	mov.w	r0, #2
 800d6e4:	f04f 0101 	mov.w	r1, #1
 800d6e8:	f7fd f952 	bl	800a990 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800d6ec:	f04f 0002 	mov.w	r0, #2
 800d6f0:	f04f 0100 	mov.w	r1, #0
 800d6f4:	f7fd f94c 	bl	800a990 <RCC_APB2PeriphResetCmd>
 800d6f8:	e076      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d700:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d704:	429a      	cmp	r2, r3
 800d706:	d10c      	bne.n	800d722 <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800d708:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d70c:	f04f 0101 	mov.w	r1, #1
 800d710:	f7fd f93e 	bl	800a990 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800d714:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d718:	f04f 0100 	mov.w	r1, #0
 800d71c:	f7fd f938 	bl	800a990 <RCC_APB2PeriphResetCmd>
 800d720:	e062      	b.n	800d7e8 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800d728:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d10c      	bne.n	800d74a <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800d730:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d734:	f04f 0101 	mov.w	r1, #1
 800d738:	f7fd f92a 	bl	800a990 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800d73c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d740:	f04f 0100 	mov.w	r1, #0
 800d744:	f7fd f924 	bl	800a990 <RCC_APB2PeriphResetCmd>
 800d748:	e04e      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800d750:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d754:	429a      	cmp	r2, r3
 800d756:	d10c      	bne.n	800d772 <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800d758:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d75c:	f04f 0101 	mov.w	r1, #1
 800d760:	f7fd f916 	bl	800a990 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800d764:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d768:	f04f 0100 	mov.w	r1, #0
 800d76c:	f7fd f910 	bl	800a990 <RCC_APB2PeriphResetCmd>
 800d770:	e03a      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d778:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d10c      	bne.n	800d79a <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800d780:	f04f 0040 	mov.w	r0, #64	; 0x40
 800d784:	f04f 0101 	mov.w	r1, #1
 800d788:	f7fd f8d6 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800d78c:	f04f 0040 	mov.w	r0, #64	; 0x40
 800d790:	f04f 0100 	mov.w	r1, #0
 800d794:	f7fd f8d0 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800d798:	e026      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d7a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d10c      	bne.n	800d7c2 <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800d7a8:	f04f 0080 	mov.w	r0, #128	; 0x80
 800d7ac:	f04f 0101 	mov.w	r1, #1
 800d7b0:	f7fd f8c2 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800d7b4:	f04f 0080 	mov.w	r0, #128	; 0x80
 800d7b8:	f04f 0100 	mov.w	r1, #0
 800d7bc:	f7fd f8bc 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800d7c0:	e012      	b.n	800d7e8 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d10b      	bne.n	800d7e8 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800d7d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d7d4:	f04f 0101 	mov.w	r1, #1
 800d7d8:	f7fd f8ae 	bl	800a938 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800d7dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d7e0:	f04f 0100 	mov.w	r1, #0
 800d7e4:	f7fd f8a8 	bl	800a938 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800d7e8:	f107 0708 	add.w	r7, r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800d7fa:	f04f 0300 	mov.w	r3, #0
 800d7fe:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	881b      	ldrh	r3, [r3, #0]
 800d804:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	f04f 0300 	mov.w	r3, #0
 800d80c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d810:	429a      	cmp	r2, r3
 800d812:	d01f      	beq.n	800d854 <TIM_TimeBaseInit+0x64>
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d81a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d81e:	429a      	cmp	r2, r3
 800d820:	d018      	beq.n	800d854 <TIM_TimeBaseInit+0x64>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d828:	d014      	beq.n	800d854 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d830:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d834:	429a      	cmp	r2, r3
 800d836:	d00d      	beq.n	800d854 <TIM_TimeBaseInit+0x64>
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d83e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d842:	429a      	cmp	r2, r3
 800d844:	d006      	beq.n	800d854 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d84c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d850:	429a      	cmp	r2, r3
 800d852:	d109      	bne.n	800d868 <TIM_TimeBaseInit+0x78>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800d854:	89fb      	ldrh	r3, [r7, #14]
 800d856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d85a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	885a      	ldrh	r2, [r3, #2]
 800d860:	89fb      	ldrh	r3, [r7, #14]
 800d862:	ea42 0303 	orr.w	r3, r2, r3
 800d866:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d86e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d872:	429a      	cmp	r2, r3
 800d874:	d010      	beq.n	800d898 <TIM_TimeBaseInit+0xa8>
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d87c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d880:	429a      	cmp	r2, r3
 800d882:	d009      	beq.n	800d898 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800d884:	89fb      	ldrh	r3, [r7, #14]
 800d886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d88a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	891a      	ldrh	r2, [r3, #8]
 800d890:	89fb      	ldrh	r3, [r7, #14]
 800d892:	ea42 0303 	orr.w	r3, r2, r3
 800d896:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	89fa      	ldrh	r2, [r7, #14]
 800d89c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	685a      	ldr	r2, [r3, #4]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	881a      	ldrh	r2, [r3, #0]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	f04f 0300 	mov.w	r3, #0
 800d8b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d006      	beq.n	800d8ca <TIM_TimeBaseInit+0xda>
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d104      	bne.n	800d8d4 <TIM_TimeBaseInit+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	7a9b      	ldrb	r3, [r3, #10]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f04f 0201 	mov.w	r2, #1
 800d8da:	829a      	strh	r2, [r3, #20]
}
 800d8dc:	f107 0714 	add.w	r7, r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bc80      	pop	{r7}
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop

0800d8e8 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f6:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f04f 0200 	mov.w	r2, #0
 800d8fe:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f04f 0200 	mov.w	r2, #0
 800d906:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f04f 0200 	mov.w	r2, #0
 800d90e:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f04f 0200 	mov.w	r2, #0
 800d916:	729a      	strb	r2, [r3, #10]
}
 800d918:	f107 070c 	add.w	r7, r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bc80      	pop	{r7}
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop

0800d924 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	4613      	mov	r3, r2
 800d92e:	460a      	mov	r2, r1
 800d930:	807a      	strh	r2, [r7, #2]
 800d932:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	887a      	ldrh	r2, [r7, #2]
 800d938:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	883a      	ldrh	r2, [r7, #0]
 800d93e:	829a      	strh	r2, [r3, #20]
}
 800d940:	f107 070c 	add.w	r7, r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	bc80      	pop	{r7}
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop

0800d94c <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	460b      	mov	r3, r1
 800d956:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800d958:	f04f 0300 	mov.w	r3, #0
 800d95c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d964:	89fb      	ldrh	r3, [r7, #14]
 800d966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d96a:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800d96c:	89fa      	ldrh	r2, [r7, #14]
 800d96e:	887b      	ldrh	r3, [r7, #2]
 800d970:	ea42 0303 	orr.w	r3, r2, r3
 800d974:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	89fa      	ldrh	r2, [r7, #14]
 800d97a:	801a      	strh	r2, [r3, #0]
}
 800d97c:	f107 0714 	add.w	r7, r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	bc80      	pop	{r7}
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop

0800d988 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d998:	f107 070c 	add.w	r7, r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bc80      	pop	{r7}
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop

0800d9a4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d9b4:	f107 070c 	add.w	r7, r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bc80      	pop	{r7}
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop

0800d9c0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f107 070c 	add.w	r7, r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bc80      	pop	{r7}
 800d9d6:	4770      	bx	lr

0800d9d8 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9e4:	b29b      	uxth	r3, r3
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f107 070c 	add.w	r7, r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bc80      	pop	{r7}
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop

0800d9f4 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800da00:	78fb      	ldrb	r3, [r7, #3]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d008      	beq.n	800da18 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	f043 0302 	orr.w	r3, r3, #2
 800da10:	b29a      	uxth	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	801a      	strh	r2, [r3, #0]
 800da16:	e007      	b.n	800da28 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	881b      	ldrh	r3, [r3, #0]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	f023 0302 	bic.w	r3, r3, #2
 800da22:	b29a      	uxth	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	801a      	strh	r2, [r3, #0]
  }
}
 800da28:	f107 070c 	add.w	r7, r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bc80      	pop	{r7}
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop

0800da34 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	460b      	mov	r3, r1
 800da3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800da40:	887b      	ldrh	r3, [r7, #2]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d008      	beq.n	800da58 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	f043 0304 	orr.w	r3, r3, #4
 800da50:	b29a      	uxth	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	801a      	strh	r2, [r3, #0]
 800da56:	e007      	b.n	800da68 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	f023 0304 	bic.w	r3, r3, #4
 800da62:	b29a      	uxth	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	801a      	strh	r2, [r3, #0]
  }
}
 800da68:	f107 070c 	add.w	r7, r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bc80      	pop	{r7}
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop

0800da74 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	460b      	mov	r3, r1
 800da7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800da80:	78fb      	ldrb	r3, [r7, #3]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d008      	beq.n	800da98 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da90:	b29a      	uxth	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	801a      	strh	r2, [r3, #0]
 800da96:	e007      	b.n	800daa8 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	881b      	ldrh	r3, [r3, #0]
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	801a      	strh	r2, [r3, #0]
  }
}
 800daa8:	f107 070c 	add.w	r7, r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	bc80      	pop	{r7}
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop

0800dab4 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	f023 0308 	bic.w	r3, r3, #8
 800daca:	b29a      	uxth	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	881b      	ldrh	r3, [r3, #0]
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	887b      	ldrh	r3, [r7, #2]
 800dad8:	ea42 0303 	orr.w	r3, r2, r3
 800dadc:	b29a      	uxth	r2, r3
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	801a      	strh	r2, [r3, #0]
}
 800dae2:	f107 070c 	add.w	r7, r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bc80      	pop	{r7}
 800daea:	4770      	bx	lr

0800daec <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	887b      	ldrh	r3, [r7, #2]
 800db10:	ea42 0303 	orr.w	r3, r2, r3
 800db14:	b29a      	uxth	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	801a      	strh	r2, [r3, #0]
}
 800db1a:	f107 070c 	add.w	r7, r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	bc80      	pop	{r7}
 800db22:	4770      	bx	lr

0800db24 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800db30:	78fb      	ldrb	r3, [r7, #3]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d008      	beq.n	800db48 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	f043 0301 	orr.w	r3, r3, #1
 800db40:	b29a      	uxth	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	801a      	strh	r2, [r3, #0]
 800db46:	e007      	b.n	800db58 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	f023 0301 	bic.w	r3, r3, #1
 800db52:	b29a      	uxth	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	801a      	strh	r2, [r3, #0]
  }
}
 800db58:	f107 070c 	add.w	r7, r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bc80      	pop	{r7}
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop

0800db64 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800db64:	b480      	push	{r7}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800db6e:	f04f 0300 	mov.w	r3, #0
 800db72:	817b      	strh	r3, [r7, #10]
 800db74:	f04f 0300 	mov.w	r3, #0
 800db78:	81fb      	strh	r3, [r7, #14]
 800db7a:	f04f 0300 	mov.w	r3, #0
 800db7e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	8c1b      	ldrh	r3, [r3, #32]
 800db84:	b29b      	uxth	r3, r3
 800db86:	f023 0301 	bic.w	r3, r3, #1
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	8c1b      	ldrh	r3, [r3, #32]
 800db94:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	889b      	ldrh	r3, [r3, #4]
 800db9a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	8b1b      	ldrh	r3, [r3, #24]
 800dba0:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800dba2:	897b      	ldrh	r3, [r7, #10]
 800dba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dba8:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800dbaa:	897b      	ldrh	r3, [r7, #10]
 800dbac:	f023 0303 	bic.w	r3, r3, #3
 800dbb0:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	881a      	ldrh	r2, [r3, #0]
 800dbb6:	897b      	ldrh	r3, [r7, #10]
 800dbb8:	ea42 0303 	orr.w	r3, r2, r3
 800dbbc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800dbbe:	89fb      	ldrh	r3, [r7, #14]
 800dbc0:	f023 0302 	bic.w	r3, r3, #2
 800dbc4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	899a      	ldrh	r2, [r3, #12]
 800dbca:	89fb      	ldrh	r3, [r7, #14]
 800dbcc:	ea42 0303 	orr.w	r3, r2, r3
 800dbd0:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	885a      	ldrh	r2, [r3, #2]
 800dbd6:	89fb      	ldrh	r3, [r7, #14]
 800dbd8:	ea42 0303 	orr.w	r3, r2, r3
 800dbdc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	f04f 0300 	mov.w	r3, #0
 800dbe4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d006      	beq.n	800dbfa <TIM_OC1Init+0x96>
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbf2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d127      	bne.n	800dc4a <TIM_OC1Init+0xe6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800dbfa:	89fb      	ldrh	r3, [r7, #14]
 800dbfc:	f023 0308 	bic.w	r3, r3, #8
 800dc00:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	89da      	ldrh	r2, [r3, #14]
 800dc06:	89fb      	ldrh	r3, [r7, #14]
 800dc08:	ea42 0303 	orr.w	r3, r2, r3
 800dc0c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800dc0e:	89fb      	ldrh	r3, [r7, #14]
 800dc10:	f023 0304 	bic.w	r3, r3, #4
 800dc14:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	889a      	ldrh	r2, [r3, #4]
 800dc1a:	89fb      	ldrh	r3, [r7, #14]
 800dc1c:	ea42 0303 	orr.w	r3, r2, r3
 800dc20:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800dc22:	89bb      	ldrh	r3, [r7, #12]
 800dc24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc28:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800dc2a:	89bb      	ldrh	r3, [r7, #12]
 800dc2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc30:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	8a1a      	ldrh	r2, [r3, #16]
 800dc36:	89bb      	ldrh	r3, [r7, #12]
 800dc38:	ea42 0303 	orr.w	r3, r2, r3
 800dc3c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	8a5a      	ldrh	r2, [r3, #18]
 800dc42:	89bb      	ldrh	r3, [r7, #12]
 800dc44:	ea42 0303 	orr.w	r3, r2, r3
 800dc48:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	89ba      	ldrh	r2, [r7, #12]
 800dc4e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	897a      	ldrh	r2, [r7, #10]
 800dc54:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	689a      	ldr	r2, [r3, #8]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	89fa      	ldrh	r2, [r7, #14]
 800dc62:	841a      	strh	r2, [r3, #32]
}
 800dc64:	f107 0714 	add.w	r7, r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bc80      	pop	{r7}
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop

0800dc70 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800dc7a:	f04f 0300 	mov.w	r3, #0
 800dc7e:	817b      	strh	r3, [r7, #10]
 800dc80:	f04f 0300 	mov.w	r3, #0
 800dc84:	81fb      	strh	r3, [r7, #14]
 800dc86:	f04f 0300 	mov.w	r3, #0
 800dc8a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	8c1b      	ldrh	r3, [r3, #32]
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	f023 0310 	bic.w	r3, r3, #16
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	8c1b      	ldrh	r3, [r3, #32]
 800dca0:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	889b      	ldrh	r3, [r3, #4]
 800dca6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	8b1b      	ldrh	r3, [r3, #24]
 800dcac:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800dcae:	897b      	ldrh	r3, [r7, #10]
 800dcb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcb4:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800dcb6:	897b      	ldrh	r3, [r7, #10]
 800dcb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcbc:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	881b      	ldrh	r3, [r3, #0]
 800dcc2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	897b      	ldrh	r3, [r7, #10]
 800dcca:	ea42 0303 	orr.w	r3, r2, r3
 800dcce:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800dcd0:	89fb      	ldrh	r3, [r7, #14]
 800dcd2:	f023 0320 	bic.w	r3, r3, #32
 800dcd6:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	899b      	ldrh	r3, [r3, #12]
 800dcdc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	89fb      	ldrh	r3, [r7, #14]
 800dce4:	ea42 0303 	orr.w	r3, r2, r3
 800dce8:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	885b      	ldrh	r3, [r3, #2]
 800dcee:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	89fb      	ldrh	r3, [r7, #14]
 800dcf6:	ea42 0303 	orr.w	r3, r2, r3
 800dcfa:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	f04f 0300 	mov.w	r3, #0
 800dd02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d006      	beq.n	800dd18 <TIM_OC2Init+0xa8>
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d133      	bne.n	800dd80 <TIM_OC2Init+0x110>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800dd18:	89fb      	ldrh	r3, [r7, #14]
 800dd1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd1e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	89db      	ldrh	r3, [r3, #14]
 800dd24:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	89fb      	ldrh	r3, [r7, #14]
 800dd2c:	ea42 0303 	orr.w	r3, r2, r3
 800dd30:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800dd32:	89fb      	ldrh	r3, [r7, #14]
 800dd34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd38:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	889b      	ldrh	r3, [r3, #4]
 800dd3e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	89fb      	ldrh	r3, [r7, #14]
 800dd46:	ea42 0303 	orr.w	r3, r2, r3
 800dd4a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800dd4c:	89bb      	ldrh	r3, [r7, #12]
 800dd4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd52:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800dd54:	89bb      	ldrh	r3, [r7, #12]
 800dd56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd5a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	8a1b      	ldrh	r3, [r3, #16]
 800dd60:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	89bb      	ldrh	r3, [r7, #12]
 800dd68:	ea42 0303 	orr.w	r3, r2, r3
 800dd6c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	8a5b      	ldrh	r3, [r3, #18]
 800dd72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	89bb      	ldrh	r3, [r7, #12]
 800dd7a:	ea42 0303 	orr.w	r3, r2, r3
 800dd7e:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	89ba      	ldrh	r2, [r7, #12]
 800dd84:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	897a      	ldrh	r2, [r7, #10]
 800dd8a:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	689a      	ldr	r2, [r3, #8]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	89fa      	ldrh	r2, [r7, #14]
 800dd98:	841a      	strh	r2, [r3, #32]
}
 800dd9a:	f107 0714 	add.w	r7, r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bc80      	pop	{r7}
 800dda2:	4770      	bx	lr

0800dda4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800ddae:	f04f 0300 	mov.w	r3, #0
 800ddb2:	817b      	strh	r3, [r7, #10]
 800ddb4:	f04f 0300 	mov.w	r3, #0
 800ddb8:	81fb      	strh	r3, [r7, #14]
 800ddba:	f04f 0300 	mov.w	r3, #0
 800ddbe:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	8c1b      	ldrh	r3, [r3, #32]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	8c1b      	ldrh	r3, [r3, #32]
 800ddd4:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	889b      	ldrh	r3, [r3, #4]
 800ddda:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	8b9b      	ldrh	r3, [r3, #28]
 800dde0:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800dde2:	897b      	ldrh	r3, [r7, #10]
 800dde4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dde8:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800ddea:	897b      	ldrh	r3, [r7, #10]
 800ddec:	f023 0303 	bic.w	r3, r3, #3
 800ddf0:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	881a      	ldrh	r2, [r3, #0]
 800ddf6:	897b      	ldrh	r3, [r7, #10]
 800ddf8:	ea42 0303 	orr.w	r3, r2, r3
 800ddfc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800ddfe:	89fb      	ldrh	r3, [r7, #14]
 800de00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de04:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	899b      	ldrh	r3, [r3, #12]
 800de0a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800de0e:	b29a      	uxth	r2, r3
 800de10:	89fb      	ldrh	r3, [r7, #14]
 800de12:	ea42 0303 	orr.w	r3, r2, r3
 800de16:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	885b      	ldrh	r3, [r3, #2]
 800de1c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800de20:	b29a      	uxth	r2, r3
 800de22:	89fb      	ldrh	r3, [r7, #14]
 800de24:	ea42 0303 	orr.w	r3, r2, r3
 800de28:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	f04f 0300 	mov.w	r3, #0
 800de30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800de34:	429a      	cmp	r2, r3
 800de36:	d006      	beq.n	800de46 <TIM_OC3Init+0xa2>
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de3e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800de42:	429a      	cmp	r2, r3
 800de44:	d133      	bne.n	800deae <TIM_OC3Init+0x10a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800de46:	89fb      	ldrh	r3, [r7, #14]
 800de48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de4c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	89db      	ldrh	r3, [r3, #14]
 800de52:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800de56:	b29a      	uxth	r2, r3
 800de58:	89fb      	ldrh	r3, [r7, #14]
 800de5a:	ea42 0303 	orr.w	r3, r2, r3
 800de5e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800de60:	89fb      	ldrh	r3, [r7, #14]
 800de62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de66:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	889b      	ldrh	r3, [r3, #4]
 800de6c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800de70:	b29a      	uxth	r2, r3
 800de72:	89fb      	ldrh	r3, [r7, #14]
 800de74:	ea42 0303 	orr.w	r3, r2, r3
 800de78:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800de7a:	89bb      	ldrh	r3, [r7, #12]
 800de7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de80:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800de82:	89bb      	ldrh	r3, [r7, #12]
 800de84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de88:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	8a1b      	ldrh	r3, [r3, #16]
 800de8e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800de92:	b29a      	uxth	r2, r3
 800de94:	89bb      	ldrh	r3, [r7, #12]
 800de96:	ea42 0303 	orr.w	r3, r2, r3
 800de9a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	8a5b      	ldrh	r3, [r3, #18]
 800dea0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	89bb      	ldrh	r3, [r7, #12]
 800dea8:	ea42 0303 	orr.w	r3, r2, r3
 800deac:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	89ba      	ldrh	r2, [r7, #12]
 800deb2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	897a      	ldrh	r2, [r7, #10]
 800deb8:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	689a      	ldr	r2, [r3, #8]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	89fa      	ldrh	r2, [r7, #14]
 800dec6:	841a      	strh	r2, [r3, #32]
}
 800dec8:	f107 0714 	add.w	r7, r7, #20
 800decc:	46bd      	mov	sp, r7
 800dece:	bc80      	pop	{r7}
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop

0800ded4 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800dede:	f04f 0300 	mov.w	r3, #0
 800dee2:	81bb      	strh	r3, [r7, #12]
 800dee4:	f04f 0300 	mov.w	r3, #0
 800dee8:	817b      	strh	r3, [r7, #10]
 800deea:	f04f 0300 	mov.w	r3, #0
 800deee:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	8c1b      	ldrh	r3, [r3, #32]
 800def4:	b29b      	uxth	r3, r3
 800def6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800defa:	b29a      	uxth	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	8c1b      	ldrh	r3, [r3, #32]
 800df04:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	889b      	ldrh	r3, [r3, #4]
 800df0a:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	8b9b      	ldrh	r3, [r3, #28]
 800df10:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800df12:	89bb      	ldrh	r3, [r7, #12]
 800df14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df18:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800df1a:	89bb      	ldrh	r3, [r7, #12]
 800df1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df20:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	881b      	ldrh	r3, [r3, #0]
 800df26:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	89bb      	ldrh	r3, [r7, #12]
 800df2e:	ea42 0303 	orr.w	r3, r2, r3
 800df32:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800df34:	897b      	ldrh	r3, [r7, #10]
 800df36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df3a:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	899b      	ldrh	r3, [r3, #12]
 800df40:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800df44:	b29a      	uxth	r2, r3
 800df46:	897b      	ldrh	r3, [r7, #10]
 800df48:	ea42 0303 	orr.w	r3, r2, r3
 800df4c:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	885b      	ldrh	r3, [r3, #2]
 800df52:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800df56:	b29a      	uxth	r2, r3
 800df58:	897b      	ldrh	r3, [r7, #10]
 800df5a:	ea42 0303 	orr.w	r3, r2, r3
 800df5e:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	f04f 0300 	mov.w	r3, #0
 800df66:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d006      	beq.n	800df7c <TIM_OC4Init+0xa8>
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df74:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800df78:	429a      	cmp	r2, r3
 800df7a:	d10c      	bne.n	800df96 <TIM_OC4Init+0xc2>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800df7c:	89fb      	ldrh	r3, [r7, #14]
 800df7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df82:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	8a1b      	ldrh	r3, [r3, #16]
 800df88:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	89fb      	ldrh	r3, [r7, #14]
 800df90:	ea42 0303 	orr.w	r3, r2, r3
 800df94:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	89fa      	ldrh	r2, [r7, #14]
 800df9a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	89ba      	ldrh	r2, [r7, #12]
 800dfa0:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	689a      	ldr	r2, [r3, #8]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	897a      	ldrh	r2, [r7, #10]
 800dfae:	841a      	strh	r2, [r3, #32]
}
 800dfb0:	f107 0714 	add.w	r7, r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bc80      	pop	{r7}
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop

0800dfbc <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f04f 0200 	mov.w	r2, #0
 800dfca:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f04f 0200 	mov.w	r2, #0
 800dfd2:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f04f 0200 	mov.w	r2, #0
 800dfda:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f04f 0200 	mov.w	r2, #0
 800dfe2:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f04f 0200 	mov.w	r2, #0
 800dfea:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f04f 0200 	mov.w	r2, #0
 800dff2:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f04f 0200 	mov.w	r2, #0
 800dffa:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f04f 0200 	mov.w	r2, #0
 800e002:	825a      	strh	r2, [r3, #18]
}
 800e004:	f107 070c 	add.w	r7, r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	bc80      	pop	{r7}
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop

0800e010 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800e010:	b480      	push	{r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	4613      	mov	r3, r2
 800e01a:	460a      	mov	r2, r1
 800e01c:	807a      	strh	r2, [r7, #2]
 800e01e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800e020:	f04f 0300 	mov.w	r3, #0
 800e024:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800e026:	f04f 0300 	mov.w	r3, #0
 800e02a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f103 0318 	add.w	r3, r3, #24
 800e036:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800e038:	887b      	ldrh	r3, [r7, #2]
 800e03a:	f04f 0201 	mov.w	r2, #1
 800e03e:	fa02 f303 	lsl.w	r3, r2, r3
 800e042:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	8c1b      	ldrh	r3, [r3, #32]
 800e048:	b29a      	uxth	r2, r3
 800e04a:	897b      	ldrh	r3, [r7, #10]
 800e04c:	ea6f 0303 	mvn.w	r3, r3
 800e050:	b29b      	uxth	r3, r3
 800e052:	ea02 0303 	and.w	r3, r2, r3
 800e056:	b29a      	uxth	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800e05c:	887b      	ldrh	r3, [r7, #2]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d002      	beq.n	800e068 <TIM_SelectOCxM+0x58>
 800e062:	887b      	ldrh	r3, [r7, #2]
 800e064:	2b08      	cmp	r3, #8
 800e066:	d116      	bne.n	800e096 <TIM_SelectOCxM+0x86>
  {
    tmp += (TIM_Channel>>1);
 800e068:	887b      	ldrh	r3, [r7, #2]
 800e06a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800e06e:	b29b      	uxth	r3, r3
 800e070:	68fa      	ldr	r2, [r7, #12]
 800e072:	4413      	add	r3, r2
 800e074:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6819      	ldr	r1, [r3, #0]
 800e07c:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800e080:	ea01 0303 	and.w	r3, r1, r3
 800e084:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	6811      	ldr	r1, [r2, #0]
 800e08c:	883a      	ldrh	r2, [r7, #0]
 800e08e:	ea41 0202 	orr.w	r2, r1, r2
 800e092:	601a      	str	r2, [r3, #0]
 800e094:	e01b      	b.n	800e0ce <TIM_SelectOCxM+0xbe>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800e096:	887b      	ldrh	r3, [r7, #2]
 800e098:	f1a3 0304 	sub.w	r3, r3, #4
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6819      	ldr	r1, [r3, #0]
 800e0b0:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800e0b4:	ea01 0303 	and.w	r3, r1, r3
 800e0b8:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	6811      	ldr	r1, [r2, #0]
 800e0c0:	883a      	ldrh	r2, [r7, #0]
 800e0c2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e0c6:	b292      	uxth	r2, r2
 800e0c8:	ea41 0202 	orr.w	r2, r1, r2
 800e0cc:	601a      	str	r2, [r3, #0]
  }
}
 800e0ce:	f107 0714 	add.w	r7, r7, #20
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bc80      	pop	{r7}
 800e0d6:	4770      	bx	lr

0800e0d8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 800e0e8:	f107 070c 	add.w	r7, r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bc80      	pop	{r7}
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop

0800e0f4 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	683a      	ldr	r2, [r7, #0]
 800e102:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e104:	f107 070c 	add.w	r7, r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	bc80      	pop	{r7}
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop

0800e110 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e120:	f107 070c 	add.w	r7, r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	bc80      	pop	{r7}
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop

0800e12c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e13c:	f107 070c 	add.w	r7, r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	bc80      	pop	{r7}
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop

0800e148 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	460b      	mov	r3, r1
 800e152:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800e154:	f04f 0300 	mov.w	r3, #0
 800e158:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8b1b      	ldrh	r3, [r3, #24]
 800e15e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800e160:	89fb      	ldrh	r3, [r7, #14]
 800e162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e166:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800e168:	89fa      	ldrh	r2, [r7, #14]
 800e16a:	887b      	ldrh	r3, [r7, #2]
 800e16c:	ea42 0303 	orr.w	r3, r2, r3
 800e170:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	89fa      	ldrh	r2, [r7, #14]
 800e176:	831a      	strh	r2, [r3, #24]
}
 800e178:	f107 0714 	add.w	r7, r7, #20
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bc80      	pop	{r7}
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop

0800e184 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	460b      	mov	r3, r1
 800e18e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800e190:	f04f 0300 	mov.w	r3, #0
 800e194:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	8b1b      	ldrh	r3, [r3, #24]
 800e19a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800e19c:	89fb      	ldrh	r3, [r7, #14]
 800e19e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1a2:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800e1a4:	887b      	ldrh	r3, [r7, #2]
 800e1a6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	89fb      	ldrh	r3, [r7, #14]
 800e1ae:	ea42 0303 	orr.w	r3, r2, r3
 800e1b2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	89fa      	ldrh	r2, [r7, #14]
 800e1b8:	831a      	strh	r2, [r3, #24]
}
 800e1ba:	f107 0714 	add.w	r7, r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bc80      	pop	{r7}
 800e1c2:	4770      	bx	lr

0800e1c4 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800e1d0:	f04f 0300 	mov.w	r3, #0
 800e1d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	8b9b      	ldrh	r3, [r3, #28]
 800e1da:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800e1dc:	89fb      	ldrh	r3, [r7, #14]
 800e1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1e2:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800e1e4:	89fa      	ldrh	r2, [r7, #14]
 800e1e6:	887b      	ldrh	r3, [r7, #2]
 800e1e8:	ea42 0303 	orr.w	r3, r2, r3
 800e1ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	89fa      	ldrh	r2, [r7, #14]
 800e1f2:	839a      	strh	r2, [r3, #28]
}
 800e1f4:	f107 0714 	add.w	r7, r7, #20
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bc80      	pop	{r7}
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop

0800e200 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	460b      	mov	r3, r1
 800e20a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800e20c:	f04f 0300 	mov.w	r3, #0
 800e210:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	8b9b      	ldrh	r3, [r3, #28]
 800e216:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800e218:	89fb      	ldrh	r3, [r7, #14]
 800e21a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e21e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800e220:	887b      	ldrh	r3, [r7, #2]
 800e222:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e226:	b29a      	uxth	r2, r3
 800e228:	89fb      	ldrh	r3, [r7, #14]
 800e22a:	ea42 0303 	orr.w	r3, r2, r3
 800e22e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	89fa      	ldrh	r2, [r7, #14]
 800e234:	839a      	strh	r2, [r3, #28]
}
 800e236:	f107 0714 	add.w	r7, r7, #20
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bc80      	pop	{r7}
 800e23e:	4770      	bx	lr

0800e240 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	460b      	mov	r3, r1
 800e24a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800e24c:	f04f 0300 	mov.w	r3, #0
 800e250:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	8b1b      	ldrh	r3, [r3, #24]
 800e256:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800e258:	89fb      	ldrh	r3, [r7, #14]
 800e25a:	f023 0308 	bic.w	r3, r3, #8
 800e25e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800e260:	89fa      	ldrh	r2, [r7, #14]
 800e262:	887b      	ldrh	r3, [r7, #2]
 800e264:	ea42 0303 	orr.w	r3, r2, r3
 800e268:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	89fa      	ldrh	r2, [r7, #14]
 800e26e:	831a      	strh	r2, [r3, #24]
}
 800e270:	f107 0714 	add.w	r7, r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	bc80      	pop	{r7}
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop

0800e27c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800e288:	f04f 0300 	mov.w	r3, #0
 800e28c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	8b1b      	ldrh	r3, [r3, #24]
 800e292:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800e294:	89fb      	ldrh	r3, [r7, #14]
 800e296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e29a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800e29c:	887b      	ldrh	r3, [r7, #2]
 800e29e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	89fb      	ldrh	r3, [r7, #14]
 800e2a6:	ea42 0303 	orr.w	r3, r2, r3
 800e2aa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	89fa      	ldrh	r2, [r7, #14]
 800e2b0:	831a      	strh	r2, [r3, #24]
}
 800e2b2:	f107 0714 	add.w	r7, r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bc80      	pop	{r7}
 800e2ba:	4770      	bx	lr

0800e2bc <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800e2c8:	f04f 0300 	mov.w	r3, #0
 800e2cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	8b9b      	ldrh	r3, [r3, #28]
 800e2d2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800e2d4:	89fb      	ldrh	r3, [r7, #14]
 800e2d6:	f023 0308 	bic.w	r3, r3, #8
 800e2da:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800e2dc:	89fa      	ldrh	r2, [r7, #14]
 800e2de:	887b      	ldrh	r3, [r7, #2]
 800e2e0:	ea42 0303 	orr.w	r3, r2, r3
 800e2e4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	89fa      	ldrh	r2, [r7, #14]
 800e2ea:	839a      	strh	r2, [r3, #28]
}
 800e2ec:	f107 0714 	add.w	r7, r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bc80      	pop	{r7}
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop

0800e2f8 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	460b      	mov	r3, r1
 800e302:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800e304:	f04f 0300 	mov.w	r3, #0
 800e308:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	8b9b      	ldrh	r3, [r3, #28]
 800e30e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800e310:	89fb      	ldrh	r3, [r7, #14]
 800e312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e316:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800e318:	887b      	ldrh	r3, [r7, #2]
 800e31a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e31e:	b29a      	uxth	r2, r3
 800e320:	89fb      	ldrh	r3, [r7, #14]
 800e322:	ea42 0303 	orr.w	r3, r2, r3
 800e326:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	89fa      	ldrh	r2, [r7, #14]
 800e32c:	839a      	strh	r2, [r3, #28]
}
 800e32e:	f107 0714 	add.w	r7, r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	bc80      	pop	{r7}
 800e336:	4770      	bx	lr

0800e338 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800e344:	f04f 0300 	mov.w	r3, #0
 800e348:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	8b1b      	ldrh	r3, [r3, #24]
 800e34e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800e350:	89fb      	ldrh	r3, [r7, #14]
 800e352:	f023 0304 	bic.w	r3, r3, #4
 800e356:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800e358:	89fa      	ldrh	r2, [r7, #14]
 800e35a:	887b      	ldrh	r3, [r7, #2]
 800e35c:	ea42 0303 	orr.w	r3, r2, r3
 800e360:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	89fa      	ldrh	r2, [r7, #14]
 800e366:	831a      	strh	r2, [r3, #24]
}
 800e368:	f107 0714 	add.w	r7, r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bc80      	pop	{r7}
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop

0800e374 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800e380:	f04f 0300 	mov.w	r3, #0
 800e384:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	8b1b      	ldrh	r3, [r3, #24]
 800e38a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800e38c:	89fb      	ldrh	r3, [r7, #14]
 800e38e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e392:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800e394:	887b      	ldrh	r3, [r7, #2]
 800e396:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	89fb      	ldrh	r3, [r7, #14]
 800e39e:	ea42 0303 	orr.w	r3, r2, r3
 800e3a2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	89fa      	ldrh	r2, [r7, #14]
 800e3a8:	831a      	strh	r2, [r3, #24]
}
 800e3aa:	f107 0714 	add.w	r7, r7, #20
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bc80      	pop	{r7}
 800e3b2:	4770      	bx	lr

0800e3b4 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b085      	sub	sp, #20
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800e3c0:	f04f 0300 	mov.w	r3, #0
 800e3c4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	8b9b      	ldrh	r3, [r3, #28]
 800e3ca:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800e3cc:	89fb      	ldrh	r3, [r7, #14]
 800e3ce:	f023 0304 	bic.w	r3, r3, #4
 800e3d2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800e3d4:	89fa      	ldrh	r2, [r7, #14]
 800e3d6:	887b      	ldrh	r3, [r7, #2]
 800e3d8:	ea42 0303 	orr.w	r3, r2, r3
 800e3dc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	89fa      	ldrh	r2, [r7, #14]
 800e3e2:	839a      	strh	r2, [r3, #28]
}
 800e3e4:	f107 0714 	add.w	r7, r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bc80      	pop	{r7}
 800e3ec:	4770      	bx	lr
 800e3ee:	bf00      	nop

0800e3f0 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800e3fc:	f04f 0300 	mov.w	r3, #0
 800e400:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	8b9b      	ldrh	r3, [r3, #28]
 800e406:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800e408:	89fb      	ldrh	r3, [r7, #14]
 800e40a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e40e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800e410:	887b      	ldrh	r3, [r7, #2]
 800e412:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e416:	b29a      	uxth	r2, r3
 800e418:	89fb      	ldrh	r3, [r7, #14]
 800e41a:	ea42 0303 	orr.w	r3, r2, r3
 800e41e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	89fa      	ldrh	r2, [r7, #14]
 800e424:	839a      	strh	r2, [r3, #28]
}
 800e426:	f107 0714 	add.w	r7, r7, #20
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bc80      	pop	{r7}
 800e42e:	4770      	bx	lr

0800e430 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800e43c:	f04f 0300 	mov.w	r3, #0
 800e440:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8b1b      	ldrh	r3, [r3, #24]
 800e446:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800e448:	89fb      	ldrh	r3, [r7, #14]
 800e44a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e44e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800e450:	89fa      	ldrh	r2, [r7, #14]
 800e452:	887b      	ldrh	r3, [r7, #2]
 800e454:	ea42 0303 	orr.w	r3, r2, r3
 800e458:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	89fa      	ldrh	r2, [r7, #14]
 800e45e:	831a      	strh	r2, [r3, #24]
}
 800e460:	f107 0714 	add.w	r7, r7, #20
 800e464:	46bd      	mov	sp, r7
 800e466:	bc80      	pop	{r7}
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop

0800e46c <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	460b      	mov	r3, r1
 800e476:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800e478:	f04f 0300 	mov.w	r3, #0
 800e47c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	8b1b      	ldrh	r3, [r3, #24]
 800e482:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800e484:	89fb      	ldrh	r3, [r7, #14]
 800e486:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e48a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e48e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800e490:	887b      	ldrh	r3, [r7, #2]
 800e492:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e496:	b29a      	uxth	r2, r3
 800e498:	89fb      	ldrh	r3, [r7, #14]
 800e49a:	ea42 0303 	orr.w	r3, r2, r3
 800e49e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	89fa      	ldrh	r2, [r7, #14]
 800e4a4:	831a      	strh	r2, [r3, #24]
}
 800e4a6:	f107 0714 	add.w	r7, r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bc80      	pop	{r7}
 800e4ae:	4770      	bx	lr

0800e4b0 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800e4bc:	f04f 0300 	mov.w	r3, #0
 800e4c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	8b9b      	ldrh	r3, [r3, #28]
 800e4c6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800e4c8:	89fb      	ldrh	r3, [r7, #14]
 800e4ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4ce:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800e4d0:	89fa      	ldrh	r2, [r7, #14]
 800e4d2:	887b      	ldrh	r3, [r7, #2]
 800e4d4:	ea42 0303 	orr.w	r3, r2, r3
 800e4d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	89fa      	ldrh	r2, [r7, #14]
 800e4de:	839a      	strh	r2, [r3, #28]
}
 800e4e0:	f107 0714 	add.w	r7, r7, #20
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bc80      	pop	{r7}
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop

0800e4ec <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800e4f8:	f04f 0300 	mov.w	r3, #0
 800e4fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	8b9b      	ldrh	r3, [r3, #28]
 800e502:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800e504:	89fb      	ldrh	r3, [r7, #14]
 800e506:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e50a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e50e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800e510:	887b      	ldrh	r3, [r7, #2]
 800e512:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e516:	b29a      	uxth	r2, r3
 800e518:	89fb      	ldrh	r3, [r7, #14]
 800e51a:	ea42 0303 	orr.w	r3, r2, r3
 800e51e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	89fa      	ldrh	r2, [r7, #14]
 800e524:	839a      	strh	r2, [r3, #28]
}
 800e526:	f107 0714 	add.w	r7, r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bc80      	pop	{r7}
 800e52e:	4770      	bx	lr

0800e530 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800e53c:	f04f 0300 	mov.w	r3, #0
 800e540:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	8c1b      	ldrh	r3, [r3, #32]
 800e546:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800e548:	89fb      	ldrh	r3, [r7, #14]
 800e54a:	f023 0302 	bic.w	r3, r3, #2
 800e54e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800e550:	89fa      	ldrh	r2, [r7, #14]
 800e552:	887b      	ldrh	r3, [r7, #2]
 800e554:	ea42 0303 	orr.w	r3, r2, r3
 800e558:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	89fa      	ldrh	r2, [r7, #14]
 800e55e:	841a      	strh	r2, [r3, #32]
}
 800e560:	f107 0714 	add.w	r7, r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	bc80      	pop	{r7}
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop

0800e56c <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800e578:	f04f 0300 	mov.w	r3, #0
 800e57c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	8c1b      	ldrh	r3, [r3, #32]
 800e582:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800e584:	89fb      	ldrh	r3, [r7, #14]
 800e586:	f023 0308 	bic.w	r3, r3, #8
 800e58a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800e58c:	89fa      	ldrh	r2, [r7, #14]
 800e58e:	887b      	ldrh	r3, [r7, #2]
 800e590:	ea42 0303 	orr.w	r3, r2, r3
 800e594:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	89fa      	ldrh	r2, [r7, #14]
 800e59a:	841a      	strh	r2, [r3, #32]
}
 800e59c:	f107 0714 	add.w	r7, r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bc80      	pop	{r7}
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop

0800e5a8 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800e5b4:	f04f 0300 	mov.w	r3, #0
 800e5b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	8c1b      	ldrh	r3, [r3, #32]
 800e5be:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800e5c0:	89fb      	ldrh	r3, [r7, #14]
 800e5c2:	f023 0320 	bic.w	r3, r3, #32
 800e5c6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800e5c8:	887b      	ldrh	r3, [r7, #2]
 800e5ca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	89fb      	ldrh	r3, [r7, #14]
 800e5d2:	ea42 0303 	orr.w	r3, r2, r3
 800e5d6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	89fa      	ldrh	r2, [r7, #14]
 800e5dc:	841a      	strh	r2, [r3, #32]
}
 800e5de:	f107 0714 	add.w	r7, r7, #20
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bc80      	pop	{r7}
 800e5e6:	4770      	bx	lr

0800e5e8 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800e5f4:	f04f 0300 	mov.w	r3, #0
 800e5f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	8c1b      	ldrh	r3, [r3, #32]
 800e5fe:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800e600:	89fb      	ldrh	r3, [r7, #14]
 800e602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e606:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800e608:	887b      	ldrh	r3, [r7, #2]
 800e60a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e60e:	b29a      	uxth	r2, r3
 800e610:	89fb      	ldrh	r3, [r7, #14]
 800e612:	ea42 0303 	orr.w	r3, r2, r3
 800e616:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	89fa      	ldrh	r2, [r7, #14]
 800e61c:	841a      	strh	r2, [r3, #32]
}
 800e61e:	f107 0714 	add.w	r7, r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	bc80      	pop	{r7}
 800e626:	4770      	bx	lr

0800e628 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	460b      	mov	r3, r1
 800e632:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800e634:	f04f 0300 	mov.w	r3, #0
 800e638:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	8c1b      	ldrh	r3, [r3, #32]
 800e63e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800e640:	89fb      	ldrh	r3, [r7, #14]
 800e642:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e646:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800e648:	887b      	ldrh	r3, [r7, #2]
 800e64a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e64e:	b29a      	uxth	r2, r3
 800e650:	89fb      	ldrh	r3, [r7, #14]
 800e652:	ea42 0303 	orr.w	r3, r2, r3
 800e656:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	89fa      	ldrh	r2, [r7, #14]
 800e65c:	841a      	strh	r2, [r3, #32]
}
 800e65e:	f107 0714 	add.w	r7, r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	bc80      	pop	{r7}
 800e666:	4770      	bx	lr

0800e668 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800e668:	b480      	push	{r7}
 800e66a:	b085      	sub	sp, #20
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	460b      	mov	r3, r1
 800e672:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800e674:	f04f 0300 	mov.w	r3, #0
 800e678:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	8c1b      	ldrh	r3, [r3, #32]
 800e67e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800e680:	89fb      	ldrh	r3, [r7, #14]
 800e682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e686:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800e688:	887b      	ldrh	r3, [r7, #2]
 800e68a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e68e:	b29a      	uxth	r2, r3
 800e690:	89fb      	ldrh	r3, [r7, #14]
 800e692:	ea42 0303 	orr.w	r3, r2, r3
 800e696:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	89fa      	ldrh	r2, [r7, #14]
 800e69c:	841a      	strh	r2, [r3, #32]
}
 800e69e:	f107 0714 	add.w	r7, r7, #20
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bc80      	pop	{r7}
 800e6a6:	4770      	bx	lr

0800e6a8 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800e6b4:	f04f 0300 	mov.w	r3, #0
 800e6b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	8c1b      	ldrh	r3, [r3, #32]
 800e6be:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800e6c0:	89fb      	ldrh	r3, [r7, #14]
 800e6c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e6c6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800e6c8:	887b      	ldrh	r3, [r7, #2]
 800e6ca:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	89fb      	ldrh	r3, [r7, #14]
 800e6d2:	ea42 0303 	orr.w	r3, r2, r3
 800e6d6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	89fa      	ldrh	r2, [r7, #14]
 800e6dc:	841a      	strh	r2, [r3, #32]
}
 800e6de:	f107 0714 	add.w	r7, r7, #20
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bc80      	pop	{r7}
 800e6e6:	4770      	bx	lr

0800e6e8 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	460a      	mov	r2, r1
 800e6f4:	807a      	strh	r2, [r7, #2]
 800e6f6:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800e6f8:	f04f 0300 	mov.w	r3, #0
 800e6fc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800e6fe:	887b      	ldrh	r3, [r7, #2]
 800e700:	f04f 0201 	mov.w	r2, #1
 800e704:	fa02 f303 	lsl.w	r3, r2, r3
 800e708:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	8c1b      	ldrh	r3, [r3, #32]
 800e70e:	b29a      	uxth	r2, r3
 800e710:	89fb      	ldrh	r3, [r7, #14]
 800e712:	ea6f 0303 	mvn.w	r3, r3
 800e716:	b29b      	uxth	r3, r3
 800e718:	ea02 0303 	and.w	r3, r2, r3
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	8c1b      	ldrh	r3, [r3, #32]
 800e726:	b29a      	uxth	r2, r3
 800e728:	8839      	ldrh	r1, [r7, #0]
 800e72a:	887b      	ldrh	r3, [r7, #2]
 800e72c:	fa01 f303 	lsl.w	r3, r1, r3
 800e730:	b29b      	uxth	r3, r3
 800e732:	ea42 0303 	orr.w	r3, r2, r3
 800e736:	b29a      	uxth	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	841a      	strh	r2, [r3, #32]
}
 800e73c:	f107 0714 	add.w	r7, r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	bc80      	pop	{r7}
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop

0800e748 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	4613      	mov	r3, r2
 800e752:	460a      	mov	r2, r1
 800e754:	807a      	strh	r2, [r7, #2]
 800e756:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800e758:	f04f 0300 	mov.w	r3, #0
 800e75c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800e75e:	887b      	ldrh	r3, [r7, #2]
 800e760:	f04f 0204 	mov.w	r2, #4
 800e764:	fa02 f303 	lsl.w	r3, r2, r3
 800e768:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	8c1b      	ldrh	r3, [r3, #32]
 800e76e:	b29a      	uxth	r2, r3
 800e770:	89fb      	ldrh	r3, [r7, #14]
 800e772:	ea6f 0303 	mvn.w	r3, r3
 800e776:	b29b      	uxth	r3, r3
 800e778:	ea02 0303 	and.w	r3, r2, r3
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	8c1b      	ldrh	r3, [r3, #32]
 800e786:	b29a      	uxth	r2, r3
 800e788:	8839      	ldrh	r1, [r7, #0]
 800e78a:	887b      	ldrh	r3, [r7, #2]
 800e78c:	fa01 f303 	lsl.w	r3, r1, r3
 800e790:	b29b      	uxth	r3, r3
 800e792:	ea42 0303 	orr.w	r3, r2, r3
 800e796:	b29a      	uxth	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	841a      	strh	r2, [r3, #32]
}
 800e79c:	f107 0714 	add.w	r7, r7, #20
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bc80      	pop	{r7}
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop

0800e7a8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10f      	bne.n	800e7da <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800e7be:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e7c0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800e7c2:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e7c4:	891b      	ldrh	r3, [r3, #8]
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 fcde 	bl	800f188 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	88db      	ldrh	r3, [r3, #6]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	f000 f8ec 	bl	800e9b0 <TIM_SetIC1Prescaler>
 800e7d8:	e036      	b.n	800e848 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	2b04      	cmp	r3, #4
 800e7e0:	d10f      	bne.n	800e802 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800e7e6:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e7e8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800e7ea:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e7ec:	891b      	ldrh	r3, [r3, #8]
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f000 fd0c 	bl	800f20c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	88db      	ldrh	r3, [r3, #6]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	f000 f8f4 	bl	800e9e8 <TIM_SetIC2Prescaler>
 800e800:	e022      	b.n	800e848 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	881b      	ldrh	r3, [r3, #0]
 800e806:	2b08      	cmp	r3, #8
 800e808:	d10f      	bne.n	800e82a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800e80e:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800e810:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800e812:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800e814:	891b      	ldrh	r3, [r3, #8]
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 fd4a 	bl	800f2b0 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	88db      	ldrh	r3, [r3, #6]
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	4619      	mov	r1, r3
 800e824:	f000 f900 	bl	800ea28 <TIM_SetIC3Prescaler>
 800e828:	e00e      	b.n	800e848 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800e82e:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e830:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800e832:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800e834:	891b      	ldrh	r3, [r3, #8]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fd84 	bl	800f344 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	88db      	ldrh	r3, [r3, #6]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	4619      	mov	r1, r3
 800e844:	f000 f90c 	bl	800ea60 <TIM_SetIC4Prescaler>
  }
}
 800e848:	f107 0708 	add.w	r7, r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f04f 0200 	mov.w	r2, #0
 800e85e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f04f 0200 	mov.w	r2, #0
 800e866:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f04f 0201 	mov.w	r2, #1
 800e86e:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f04f 0200 	mov.w	r2, #0
 800e876:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f04f 0200 	mov.w	r2, #0
 800e87e:	811a      	strh	r2, [r3, #8]
}
 800e880:	f107 070c 	add.w	r7, r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	bc80      	pop	{r7}
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop

0800e88c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800e896:	f04f 0300 	mov.w	r3, #0
 800e89a:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800e89c:	f04f 0301 	mov.w	r3, #1
 800e8a0:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	885b      	ldrh	r3, [r3, #2]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d103      	bne.n	800e8b2 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800e8aa:	f04f 0302 	mov.w	r3, #2
 800e8ae:	81fb      	strh	r3, [r7, #14]
 800e8b0:	e002      	b.n	800e8b8 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800e8b2:	f04f 0300 	mov.w	r3, #0
 800e8b6:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	889b      	ldrh	r3, [r3, #4]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d103      	bne.n	800e8c8 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800e8c0:	f04f 0302 	mov.w	r3, #2
 800e8c4:	81bb      	strh	r3, [r7, #12]
 800e8c6:	e002      	b.n	800e8ce <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800e8c8:	f04f 0301 	mov.w	r3, #1
 800e8cc:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d11c      	bne.n	800e910 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	8859      	ldrh	r1, [r3, #2]
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800e8de:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800e8e0:	891b      	ldrh	r3, [r3, #8]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 fc50 	bl	800f188 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	88db      	ldrh	r3, [r3, #6]
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	f000 f85e 	bl	800e9b0 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	891b      	ldrh	r3, [r3, #8]
 800e8f8:	89f9      	ldrh	r1, [r7, #14]
 800e8fa:	89ba      	ldrh	r2, [r7, #12]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 fc85 	bl	800f20c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	88db      	ldrh	r3, [r3, #6]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	4619      	mov	r1, r3
 800e90a:	f000 f86d 	bl	800e9e8 <TIM_SetIC2Prescaler>
 800e90e:	e01b      	b.n	800e948 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	8859      	ldrh	r1, [r3, #2]
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800e918:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800e91a:	891b      	ldrh	r3, [r3, #8]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 fc75 	bl	800f20c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	88db      	ldrh	r3, [r3, #6]
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	4619      	mov	r1, r3
 800e92a:	f000 f85d 	bl	800e9e8 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	891b      	ldrh	r3, [r3, #8]
 800e932:	89f9      	ldrh	r1, [r7, #14]
 800e934:	89ba      	ldrh	r2, [r7, #12]
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 fc26 	bl	800f188 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	88db      	ldrh	r3, [r3, #6]
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	4619      	mov	r1, r3
 800e944:	f000 f834 	bl	800e9b0 <TIM_SetIC1Prescaler>
  }
}
 800e948:	f107 0710 	add.w	r7, r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	f107 070c 	add.w	r7, r7, #12
 800e962:	46bd      	mov	sp, r7
 800e964:	bc80      	pop	{r7}
 800e966:	4770      	bx	lr

0800e968 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800e974:	4618      	mov	r0, r3
 800e976:	f107 070c 	add.w	r7, r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bc80      	pop	{r7}
 800e97e:	4770      	bx	lr

0800e980 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	f107 070c 	add.w	r7, r7, #12
 800e992:	46bd      	mov	sp, r7
 800e994:	bc80      	pop	{r7}
 800e996:	4770      	bx	lr

0800e998 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f107 070c 	add.w	r7, r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bc80      	pop	{r7}
 800e9ae:	4770      	bx	lr

0800e9b0 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	8b1b      	ldrh	r3, [r3, #24]
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	f023 030c 	bic.w	r3, r3, #12
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	8b1b      	ldrh	r3, [r3, #24]
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	887b      	ldrh	r3, [r7, #2]
 800e9d4:	ea42 0303 	orr.w	r3, r2, r3
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	831a      	strh	r2, [r3, #24]
}
 800e9de:	f107 070c 	add.w	r7, r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bc80      	pop	{r7}
 800e9e6:	4770      	bx	lr

0800e9e8 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	8b1b      	ldrh	r3, [r3, #24]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	8b1b      	ldrh	r3, [r3, #24]
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	887b      	ldrh	r3, [r7, #2]
 800ea0c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	ea42 0303 	orr.w	r3, r2, r3
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	831a      	strh	r2, [r3, #24]
}
 800ea1c:	f107 070c 	add.w	r7, r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bc80      	pop	{r7}
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop

0800ea28 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	460b      	mov	r3, r1
 800ea32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	8b9b      	ldrh	r3, [r3, #28]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	f023 030c 	bic.w	r3, r3, #12
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	8b9b      	ldrh	r3, [r3, #28]
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	887b      	ldrh	r3, [r7, #2]
 800ea4c:	ea42 0303 	orr.w	r3, r2, r3
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	839a      	strh	r2, [r3, #28]
}
 800ea56:	f107 070c 	add.w	r7, r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bc80      	pop	{r7}
 800ea5e:	4770      	bx	lr

0800ea60 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	8b9b      	ldrh	r3, [r3, #28]
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	8b9b      	ldrh	r3, [r3, #28]
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	887b      	ldrh	r3, [r7, #2]
 800ea84:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	ea42 0303 	orr.w	r3, r2, r3
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	839a      	strh	r2, [r3, #28]
}
 800ea94:	f107 070c 	add.w	r7, r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bc80      	pop	{r7}
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop

0800eaa0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	881a      	ldrh	r2, [r3, #0]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	885b      	ldrh	r3, [r3, #2]
 800eab2:	ea42 0303 	orr.w	r3, r2, r3
 800eab6:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800eabc:	ea42 0303 	orr.w	r3, r2, r3
 800eac0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800eac6:	ea42 0303 	orr.w	r3, r2, r3
 800eaca:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800ead0:	ea42 0303 	orr.w	r3, r2, r3
 800ead4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800eada:	ea42 0303 	orr.w	r3, r2, r3
 800eade:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800eae4:	ea42 0303 	orr.w	r3, r2, r3
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800eaf0:	f107 070c 	add.w	r7, r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bc80      	pop	{r7}
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop

0800eafc <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f04f 0200 	mov.w	r2, #0
 800eb0a:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f04f 0200 	mov.w	r2, #0
 800eb12:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f04f 0200 	mov.w	r2, #0
 800eb1a:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f04f 0200 	mov.w	r2, #0
 800eb22:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f04f 0200 	mov.w	r2, #0
 800eb2a:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f04f 0200 	mov.w	r2, #0
 800eb32:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f04f 0200 	mov.w	r2, #0
 800eb3a:	819a      	strh	r2, [r3, #12]
}
 800eb3c:	f107 070c 	add.w	r7, r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bc80      	pop	{r7}
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop

0800eb48 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	460b      	mov	r3, r1
 800eb52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800eb54:	78fb      	ldrb	r3, [r7, #3]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00c      	beq.n	800eb74 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800eb72:	e00b      	b.n	800eb8c <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800eb80:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 800eb8c:	f107 070c 	add.w	r7, r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bc80      	pop	{r7}
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop

0800eb98 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800eba4:	78fb      	ldrb	r3, [r7, #3]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d008      	beq.n	800ebbc <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	889b      	ldrh	r3, [r3, #4]
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	f043 0304 	orr.w	r3, r3, #4
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	809a      	strh	r2, [r3, #4]
 800ebba:	e007      	b.n	800ebcc <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	889b      	ldrh	r3, [r3, #4]
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	f023 0304 	bic.w	r3, r3, #4
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	809a      	strh	r2, [r3, #4]
  }
}
 800ebcc:	f107 070c 	add.w	r7, r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bc80      	pop	{r7}
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop

0800ebd8 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ebe4:	78fb      	ldrb	r3, [r7, #3]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d008      	beq.n	800ebfc <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	889b      	ldrh	r3, [r3, #4]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	f043 0301 	orr.w	r3, r3, #1
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	809a      	strh	r2, [r3, #4]
 800ebfa:	e007      	b.n	800ec0c <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	889b      	ldrh	r3, [r3, #4]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	f023 0301 	bic.w	r3, r3, #1
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	809a      	strh	r2, [r3, #4]
  }
}
 800ec0c:	f107 070c 	add.w	r7, r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bc80      	pop	{r7}
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop

0800ec18 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800ec18:	b480      	push	{r7}
 800ec1a:	b083      	sub	sp, #12
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	4613      	mov	r3, r2
 800ec22:	460a      	mov	r2, r1
 800ec24:	807a      	strh	r2, [r7, #2]
 800ec26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ec28:	787b      	ldrb	r3, [r7, #1]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d009      	beq.n	800ec42 <TIM_ITConfig+0x2a>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	899b      	ldrh	r3, [r3, #12]
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	887b      	ldrh	r3, [r7, #2]
 800ec36:	ea42 0303 	orr.w	r3, r2, r3
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	819a      	strh	r2, [r3, #12]
 800ec40:	e00b      	b.n	800ec5a <TIM_ITConfig+0x42>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	899b      	ldrh	r3, [r3, #12]
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	887b      	ldrh	r3, [r7, #2]
 800ec4a:	ea6f 0303 	mvn.w	r3, r3
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	ea02 0303 	and.w	r3, r2, r3
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	819a      	strh	r2, [r3, #12]
  }
}
 800ec5a:	f107 070c 	add.w	r7, r7, #12
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bc80      	pop	{r7}
 800ec62:	4770      	bx	lr

0800ec64 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	887a      	ldrh	r2, [r7, #2]
 800ec74:	829a      	strh	r2, [r3, #20]
}
 800ec76:	f107 070c 	add.w	r7, r7, #12
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bc80      	pop	{r7}
 800ec7e:	4770      	bx	lr

0800ec80 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800ec8c:	f04f 0300 	mov.w	r3, #0
 800ec90:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	8a1b      	ldrh	r3, [r3, #16]
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	887b      	ldrh	r3, [r7, #2]
 800ec9a:	ea02 0303 	and.w	r3, r2, r3
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d003      	beq.n	800ecac <TIM_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 800eca4:	f04f 0301 	mov.w	r3, #1
 800eca8:	73fb      	strb	r3, [r7, #15]
 800ecaa:	e002      	b.n	800ecb2 <TIM_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 800ecac:	f04f 0300 	mov.w	r3, #0
 800ecb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ecb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f107 0714 	add.w	r7, r7, #20
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bc80      	pop	{r7}
 800ecbe:	4770      	bx	lr

0800ecc0 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	460b      	mov	r3, r1
 800ecca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800eccc:	887b      	ldrh	r3, [r7, #2]
 800ecce:	ea6f 0303 	mvn.w	r3, r3
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	821a      	strh	r2, [r3, #16]
}
 800ecd8:	f107 070c 	add.w	r7, r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bc80      	pop	{r7}
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop

0800ece4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	460b      	mov	r3, r1
 800ecee:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800ecf0:	f04f 0300 	mov.w	r3, #0
 800ecf4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800ecf6:	f04f 0300 	mov.w	r3, #0
 800ecfa:	81bb      	strh	r3, [r7, #12]
 800ecfc:	f04f 0300 	mov.w	r3, #0
 800ed00:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	8a1b      	ldrh	r3, [r3, #16]
 800ed06:	b29a      	uxth	r2, r3
 800ed08:	887b      	ldrh	r3, [r7, #2]
 800ed0a:	ea02 0303 	and.w	r3, r2, r3
 800ed0e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	899b      	ldrh	r3, [r3, #12]
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	887b      	ldrh	r3, [r7, #2]
 800ed18:	ea02 0303 	and.w	r3, r2, r3
 800ed1c:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800ed1e:	89bb      	ldrh	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d006      	beq.n	800ed32 <TIM_GetITStatus+0x4e>
 800ed24:	897b      	ldrh	r3, [r7, #10]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d003      	beq.n	800ed32 <TIM_GetITStatus+0x4e>
  {
    bitstatus = SET;
 800ed2a:	f04f 0301 	mov.w	r3, #1
 800ed2e:	73fb      	strb	r3, [r7, #15]
 800ed30:	e002      	b.n	800ed38 <TIM_GetITStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 800ed32:	f04f 0300 	mov.w	r3, #0
 800ed36:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f107 0714 	add.w	r7, r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bc80      	pop	{r7}
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop

0800ed48 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800ed54:	887b      	ldrh	r3, [r7, #2]
 800ed56:	ea6f 0303 	mvn.w	r3, r3
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	821a      	strh	r2, [r3, #16]
}
 800ed60:	f107 070c 	add.w	r7, r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bc80      	pop	{r7}
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop

0800ed6c <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	4613      	mov	r3, r2
 800ed76:	460a      	mov	r2, r1
 800ed78:	807a      	strh	r2, [r7, #2]
 800ed7a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800ed7c:	887a      	ldrh	r2, [r7, #2]
 800ed7e:	883b      	ldrh	r3, [r7, #0]
 800ed80:	ea42 0303 	orr.w	r3, r2, r3
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800ed8c:	f107 070c 	add.w	r7, r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bc80      	pop	{r7}
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop

0800ed98 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	4613      	mov	r3, r2
 800eda2:	460a      	mov	r2, r1
 800eda4:	807a      	strh	r2, [r7, #2]
 800eda6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800eda8:	787b      	ldrb	r3, [r7, #1]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d009      	beq.n	800edc2 <TIM_DMACmd+0x2a>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	899b      	ldrh	r3, [r3, #12]
 800edb2:	b29a      	uxth	r2, r3
 800edb4:	887b      	ldrh	r3, [r7, #2]
 800edb6:	ea42 0303 	orr.w	r3, r2, r3
 800edba:	b29a      	uxth	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	819a      	strh	r2, [r3, #12]
 800edc0:	e00b      	b.n	800edda <TIM_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	899b      	ldrh	r3, [r3, #12]
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	887b      	ldrh	r3, [r7, #2]
 800edca:	ea6f 0303 	mvn.w	r3, r3
 800edce:	b29b      	uxth	r3, r3
 800edd0:	ea02 0303 	and.w	r3, r2, r3
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	819a      	strh	r2, [r3, #12]
  }
}
 800edda:	f107 070c 	add.w	r7, r7, #12
 800edde:	46bd      	mov	sp, r7
 800ede0:	bc80      	pop	{r7}
 800ede2:	4770      	bx	lr

0800ede4 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	460b      	mov	r3, r1
 800edee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d008      	beq.n	800ee08 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	889b      	ldrh	r3, [r3, #4]
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	f043 0308 	orr.w	r3, r3, #8
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	809a      	strh	r2, [r3, #4]
 800ee06:	e007      	b.n	800ee18 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	889b      	ldrh	r3, [r3, #4]
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	f023 0308 	bic.w	r3, r3, #8
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	809a      	strh	r2, [r3, #4]
  }
}
 800ee18:	f107 070c 	add.w	r7, r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bc80      	pop	{r7}
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop

0800ee24 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	891b      	ldrh	r3, [r3, #8]
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	f023 0307 	bic.w	r3, r3, #7
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	811a      	strh	r2, [r3, #8]
}
 800ee3c:	f107 070c 	add.w	r7, r7, #12
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bc80      	pop	{r7}
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop

0800ee48 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800ee54:	887b      	ldrh	r3, [r7, #2]
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	4619      	mov	r1, r3
 800ee5a:	f000 f87d 	bl	800ef58 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	891b      	ldrh	r3, [r3, #8]
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	f043 0307 	orr.w	r3, r3, #7
 800ee68:	b29a      	uxth	r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	811a      	strh	r2, [r3, #8]
}
 800ee6e:	f107 0708 	add.w	r7, r7, #8
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop

0800ee78 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	8179      	strh	r1, [r7, #10]
 800ee82:	813a      	strh	r2, [r7, #8]
 800ee84:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800ee86:	897b      	ldrh	r3, [r7, #10]
 800ee88:	2b60      	cmp	r3, #96	; 0x60
 800ee8a:	d108      	bne.n	800ee9e <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800ee8c:	893a      	ldrh	r2, [r7, #8]
 800ee8e:	88fb      	ldrh	r3, [r7, #6]
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	4611      	mov	r1, r2
 800ee94:	f04f 0201 	mov.w	r2, #1
 800ee98:	f000 f9b8 	bl	800f20c <TI2_Config>
 800ee9c:	e007      	b.n	800eeae <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800ee9e:	893a      	ldrh	r2, [r7, #8]
 800eea0:	88fb      	ldrh	r3, [r7, #6]
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	4611      	mov	r1, r2
 800eea6:	f04f 0201 	mov.w	r2, #1
 800eeaa:	f000 f96d 	bl	800f188 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800eeae:	897b      	ldrh	r3, [r7, #10]
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	f000 f850 	bl	800ef58 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	891b      	ldrh	r3, [r3, #8]
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	f043 0307 	orr.w	r3, r3, #7
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	811a      	strh	r2, [r3, #8]
}
 800eec8:	f107 0710 	add.w	r7, r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b086      	sub	sp, #24
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	8179      	strh	r1, [r7, #10]
 800eeda:	813a      	strh	r2, [r7, #8]
 800eedc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800eede:	f04f 0300 	mov.w	r3, #0
 800eee2:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800eee4:	8979      	ldrh	r1, [r7, #10]
 800eee6:	893a      	ldrh	r2, [r7, #8]
 800eee8:	88fb      	ldrh	r3, [r7, #6]
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f000 f8a6 	bl	800f03c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	891b      	ldrh	r3, [r3, #8]
 800eef4:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800eef6:	8afb      	ldrh	r3, [r7, #22]
 800eef8:	f023 0307 	bic.w	r3, r3, #7
 800eefc:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800eefe:	8afb      	ldrh	r3, [r7, #22]
 800ef00:	f043 0307 	orr.w	r3, r3, #7
 800ef04:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800ef06:	8afb      	ldrh	r3, [r7, #22]
 800ef08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef0c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800ef0e:	8afb      	ldrh	r3, [r7, #22]
 800ef10:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800ef14:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	8afa      	ldrh	r2, [r7, #22]
 800ef1a:	811a      	strh	r2, [r3, #8]
}
 800ef1c:	f107 0718 	add.w	r7, r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	8179      	strh	r1, [r7, #10]
 800ef2e:	813a      	strh	r2, [r7, #8]
 800ef30:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800ef32:	8979      	ldrh	r1, [r7, #10]
 800ef34:	893a      	ldrh	r2, [r7, #8]
 800ef36:	88fb      	ldrh	r3, [r7, #6]
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f000 f87f 	bl	800f03c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	891b      	ldrh	r3, [r3, #8]
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	811a      	strh	r2, [r3, #8]
}
 800ef4e:	f107 0710 	add.w	r7, r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop

0800ef58 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	460b      	mov	r3, r1
 800ef62:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800ef64:	f04f 0300 	mov.w	r3, #0
 800ef68:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	891b      	ldrh	r3, [r3, #8]
 800ef6e:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800ef70:	89fb      	ldrh	r3, [r7, #14]
 800ef72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef76:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800ef78:	89fa      	ldrh	r2, [r7, #14]
 800ef7a:	887b      	ldrh	r3, [r7, #2]
 800ef7c:	ea42 0303 	orr.w	r3, r2, r3
 800ef80:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	89fa      	ldrh	r2, [r7, #14]
 800ef86:	811a      	strh	r2, [r3, #8]
}
 800ef88:	f107 0714 	add.w	r7, r7, #20
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bc80      	pop	{r7}
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop

0800ef94 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	889b      	ldrh	r3, [r3, #4]
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efaa:	b29a      	uxth	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	889b      	ldrh	r3, [r3, #4]
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	887b      	ldrh	r3, [r7, #2]
 800efb8:	ea42 0303 	orr.w	r3, r2, r3
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	809a      	strh	r2, [r3, #4]
}
 800efc2:	f107 070c 	add.w	r7, r7, #12
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bc80      	pop	{r7}
 800efca:	4770      	bx	lr

0800efcc <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	460b      	mov	r3, r1
 800efd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	891b      	ldrh	r3, [r3, #8]
 800efdc:	b29b      	uxth	r3, r3
 800efde:	f023 0307 	bic.w	r3, r3, #7
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	891b      	ldrh	r3, [r3, #8]
 800efec:	b29a      	uxth	r2, r3
 800efee:	887b      	ldrh	r3, [r7, #2]
 800eff0:	ea42 0303 	orr.w	r3, r2, r3
 800eff4:	b29a      	uxth	r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	811a      	strh	r2, [r3, #8]
}
 800effa:	f107 070c 	add.w	r7, r7, #12
 800effe:	46bd      	mov	sp, r7
 800f000:	bc80      	pop	{r7}
 800f002:	4770      	bx	lr

0800f004 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	460b      	mov	r3, r1
 800f00e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	891b      	ldrh	r3, [r3, #8]
 800f014:	b29b      	uxth	r3, r3
 800f016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	891b      	ldrh	r3, [r3, #8]
 800f024:	b29a      	uxth	r2, r3
 800f026:	887b      	ldrh	r3, [r7, #2]
 800f028:	ea42 0303 	orr.w	r3, r2, r3
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	811a      	strh	r2, [r3, #8]
}
 800f032:	f107 070c 	add.w	r7, r7, #12
 800f036:	46bd      	mov	sp, r7
 800f038:	bc80      	pop	{r7}
 800f03a:	4770      	bx	lr

0800f03c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b087      	sub	sp, #28
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	8179      	strh	r1, [r7, #10]
 800f046:	813a      	strh	r2, [r7, #8]
 800f048:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800f04a:	f04f 0300 	mov.w	r3, #0
 800f04e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	891b      	ldrh	r3, [r3, #8]
 800f054:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800f056:	8afb      	ldrh	r3, [r7, #22]
 800f058:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800f05c:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800f05e:	88fb      	ldrh	r3, [r7, #6]
 800f060:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f064:	b29a      	uxth	r2, r3
 800f066:	893b      	ldrh	r3, [r7, #8]
 800f068:	ea42 0303 	orr.w	r3, r2, r3
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	897b      	ldrh	r3, [r7, #10]
 800f070:	ea42 0303 	orr.w	r3, r2, r3
 800f074:	b29a      	uxth	r2, r3
 800f076:	8afb      	ldrh	r3, [r7, #22]
 800f078:	ea42 0303 	orr.w	r3, r2, r3
 800f07c:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	8afa      	ldrh	r2, [r7, #22]
 800f082:	811a      	strh	r2, [r3, #8]
}
 800f084:	f107 071c 	add.w	r7, r7, #28
 800f088:	46bd      	mov	sp, r7
 800f08a:	bc80      	pop	{r7}
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop

0800f090 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800f090:	b480      	push	{r7}
 800f092:	b087      	sub	sp, #28
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	8179      	strh	r1, [r7, #10]
 800f09a:	813a      	strh	r2, [r7, #8]
 800f09c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800f09e:	f04f 0300 	mov.w	r3, #0
 800f0a2:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800f0a4:	f04f 0300 	mov.w	r3, #0
 800f0a8:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800f0aa:	f04f 0300 	mov.w	r3, #0
 800f0ae:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	891b      	ldrh	r3, [r3, #8]
 800f0b4:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	8b1b      	ldrh	r3, [r3, #24]
 800f0ba:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	8c1b      	ldrh	r3, [r3, #32]
 800f0c0:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800f0c2:	8afb      	ldrh	r3, [r7, #22]
 800f0c4:	f023 0307 	bic.w	r3, r3, #7
 800f0c8:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800f0ca:	8afa      	ldrh	r2, [r7, #22]
 800f0cc:	897b      	ldrh	r3, [r7, #10]
 800f0ce:	ea42 0303 	orr.w	r3, r2, r3
 800f0d2:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800f0d4:	8abb      	ldrh	r3, [r7, #20]
 800f0d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0da:	f023 0303 	bic.w	r3, r3, #3
 800f0de:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800f0e0:	8abb      	ldrh	r3, [r7, #20]
 800f0e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0e6:	f043 0301 	orr.w	r3, r3, #1
 800f0ea:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800f0ec:	8a7b      	ldrh	r3, [r7, #18]
 800f0ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f0f2:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800f0f4:	88fb      	ldrh	r3, [r7, #6]
 800f0f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	893b      	ldrh	r3, [r7, #8]
 800f0fe:	ea42 0303 	orr.w	r3, r2, r3
 800f102:	b29a      	uxth	r2, r3
 800f104:	8a7b      	ldrh	r3, [r7, #18]
 800f106:	ea42 0303 	orr.w	r3, r2, r3
 800f10a:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	8afa      	ldrh	r2, [r7, #22]
 800f110:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	8aba      	ldrh	r2, [r7, #20]
 800f116:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	8a7a      	ldrh	r2, [r7, #18]
 800f11c:	841a      	strh	r2, [r3, #32]
}
 800f11e:	f107 071c 	add.w	r7, r7, #28
 800f122:	46bd      	mov	sp, r7
 800f124:	bc80      	pop	{r7}
 800f126:	4770      	bx	lr

0800f128 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800f128:	b480      	push	{r7}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	460b      	mov	r3, r1
 800f132:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f134:	78fb      	ldrb	r3, [r7, #3]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d008      	beq.n	800f14c <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	889b      	ldrh	r3, [r3, #4]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f144:	b29a      	uxth	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	809a      	strh	r2, [r3, #4]
 800f14a:	e007      	b.n	800f15c <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	889b      	ldrh	r3, [r3, #4]
 800f150:	b29b      	uxth	r3, r3
 800f152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f156:	b29a      	uxth	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	809a      	strh	r2, [r3, #4]
  }
}
 800f15c:	f107 070c 	add.w	r7, r7, #12
 800f160:	46bd      	mov	sp, r7
 800f162:	bc80      	pop	{r7}
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop

0800f168 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	887a      	ldrh	r2, [r7, #2]
 800f178:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800f17c:	f107 070c 	add.w	r7, r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	bc80      	pop	{r7}
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop

0800f188 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800f188:	b480      	push	{r7}
 800f18a:	b087      	sub	sp, #28
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	8179      	strh	r1, [r7, #10]
 800f192:	813a      	strh	r2, [r7, #8]
 800f194:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800f196:	f04f 0300 	mov.w	r3, #0
 800f19a:	82fb      	strh	r3, [r7, #22]
 800f19c:	f04f 0300 	mov.w	r3, #0
 800f1a0:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	8c1b      	ldrh	r3, [r3, #32]
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	f023 0301 	bic.w	r3, r3, #1
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	8b1b      	ldrh	r3, [r3, #24]
 800f1b6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	8c1b      	ldrh	r3, [r3, #32]
 800f1bc:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800f1be:	8afb      	ldrh	r3, [r7, #22]
 800f1c0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800f1c4:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800f1c6:	88fb      	ldrh	r3, [r7, #6]
 800f1c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	893b      	ldrh	r3, [r7, #8]
 800f1d0:	ea42 0303 	orr.w	r3, r2, r3
 800f1d4:	b29a      	uxth	r2, r3
 800f1d6:	8afb      	ldrh	r3, [r7, #22]
 800f1d8:	ea42 0303 	orr.w	r3, r2, r3
 800f1dc:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f1de:	8abb      	ldrh	r3, [r7, #20]
 800f1e0:	f023 030a 	bic.w	r3, r3, #10
 800f1e4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800f1e6:	897a      	ldrh	r2, [r7, #10]
 800f1e8:	8abb      	ldrh	r3, [r7, #20]
 800f1ea:	ea42 0303 	orr.w	r3, r2, r3
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	f043 0301 	orr.w	r3, r3, #1
 800f1f4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	8afa      	ldrh	r2, [r7, #22]
 800f1fa:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	8aba      	ldrh	r2, [r7, #20]
 800f200:	841a      	strh	r2, [r3, #32]
}
 800f202:	f107 071c 	add.w	r7, r7, #28
 800f206:	46bd      	mov	sp, r7
 800f208:	bc80      	pop	{r7}
 800f20a:	4770      	bx	lr

0800f20c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b087      	sub	sp, #28
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	8179      	strh	r1, [r7, #10]
 800f216:	813a      	strh	r2, [r7, #8]
 800f218:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800f21a:	f04f 0300 	mov.w	r3, #0
 800f21e:	82fb      	strh	r3, [r7, #22]
 800f220:	f04f 0300 	mov.w	r3, #0
 800f224:	82bb      	strh	r3, [r7, #20]
 800f226:	f04f 0300 	mov.w	r3, #0
 800f22a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	8c1b      	ldrh	r3, [r3, #32]
 800f230:	b29b      	uxth	r3, r3
 800f232:	f023 0310 	bic.w	r3, r3, #16
 800f236:	b29a      	uxth	r2, r3
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	8b1b      	ldrh	r3, [r3, #24]
 800f240:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	8c1b      	ldrh	r3, [r3, #32]
 800f246:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800f248:	897b      	ldrh	r3, [r7, #10]
 800f24a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f24e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800f250:	8afb      	ldrh	r3, [r7, #22]
 800f252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f256:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800f25a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800f25e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800f260:	88fb      	ldrh	r3, [r7, #6]
 800f262:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800f266:	b29a      	uxth	r2, r3
 800f268:	8afb      	ldrh	r3, [r7, #22]
 800f26a:	ea42 0303 	orr.w	r3, r2, r3
 800f26e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800f270:	893b      	ldrh	r3, [r7, #8]
 800f272:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f276:	b29a      	uxth	r2, r3
 800f278:	8afb      	ldrh	r3, [r7, #22]
 800f27a:	ea42 0303 	orr.w	r3, r2, r3
 800f27e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f280:	8abb      	ldrh	r3, [r7, #20]
 800f282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f286:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800f288:	8a7a      	ldrh	r2, [r7, #18]
 800f28a:	8abb      	ldrh	r3, [r7, #20]
 800f28c:	ea42 0303 	orr.w	r3, r2, r3
 800f290:	b29b      	uxth	r3, r3
 800f292:	f043 0310 	orr.w	r3, r3, #16
 800f296:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	8afa      	ldrh	r2, [r7, #22]
 800f29c:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	8aba      	ldrh	r2, [r7, #20]
 800f2a2:	841a      	strh	r2, [r3, #32]
}
 800f2a4:	f107 071c 	add.w	r7, r7, #28
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bc80      	pop	{r7}
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop

0800f2b0 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b087      	sub	sp, #28
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	8179      	strh	r1, [r7, #10]
 800f2ba:	813a      	strh	r2, [r7, #8]
 800f2bc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800f2be:	f04f 0300 	mov.w	r3, #0
 800f2c2:	82fb      	strh	r3, [r7, #22]
 800f2c4:	f04f 0300 	mov.w	r3, #0
 800f2c8:	82bb      	strh	r3, [r7, #20]
 800f2ca:	f04f 0300 	mov.w	r3, #0
 800f2ce:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	8c1b      	ldrh	r3, [r3, #32]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	8b9b      	ldrh	r3, [r3, #28]
 800f2e4:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	8c1b      	ldrh	r3, [r3, #32]
 800f2ea:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800f2ec:	897b      	ldrh	r3, [r7, #10]
 800f2ee:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f2f2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800f2f4:	8afb      	ldrh	r3, [r7, #22]
 800f2f6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800f2fa:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800f2fc:	88fb      	ldrh	r3, [r7, #6]
 800f2fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f302:	b29a      	uxth	r2, r3
 800f304:	893b      	ldrh	r3, [r7, #8]
 800f306:	ea42 0303 	orr.w	r3, r2, r3
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	8afb      	ldrh	r3, [r7, #22]
 800f30e:	ea42 0303 	orr.w	r3, r2, r3
 800f312:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f314:	8abb      	ldrh	r3, [r7, #20]
 800f316:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800f31a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800f31c:	8a7a      	ldrh	r2, [r7, #18]
 800f31e:	8abb      	ldrh	r3, [r7, #20]
 800f320:	ea42 0303 	orr.w	r3, r2, r3
 800f324:	b29b      	uxth	r3, r3
 800f326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f32a:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	8afa      	ldrh	r2, [r7, #22]
 800f330:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	8aba      	ldrh	r2, [r7, #20]
 800f336:	841a      	strh	r2, [r3, #32]
}
 800f338:	f107 071c 	add.w	r7, r7, #28
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bc80      	pop	{r7}
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop

0800f344 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	8179      	strh	r1, [r7, #10]
 800f34e:	813a      	strh	r2, [r7, #8]
 800f350:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800f352:	f04f 0300 	mov.w	r3, #0
 800f356:	82fb      	strh	r3, [r7, #22]
 800f358:	f04f 0300 	mov.w	r3, #0
 800f35c:	82bb      	strh	r3, [r7, #20]
 800f35e:	f04f 0300 	mov.w	r3, #0
 800f362:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	8c1b      	ldrh	r3, [r3, #32]
 800f368:	b29b      	uxth	r3, r3
 800f36a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f36e:	b29a      	uxth	r2, r3
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	8b9b      	ldrh	r3, [r3, #28]
 800f378:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	8c1b      	ldrh	r3, [r3, #32]
 800f37e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800f380:	897b      	ldrh	r3, [r7, #10]
 800f382:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800f386:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800f388:	8afb      	ldrh	r3, [r7, #22]
 800f38a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f38e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800f392:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800f396:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800f398:	893b      	ldrh	r3, [r7, #8]
 800f39a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	8afb      	ldrh	r3, [r7, #22]
 800f3a2:	ea42 0303 	orr.w	r3, r2, r3
 800f3a6:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800f3a8:	88fb      	ldrh	r3, [r7, #6]
 800f3aa:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	8afb      	ldrh	r3, [r7, #22]
 800f3b2:	ea42 0303 	orr.w	r3, r2, r3
 800f3b6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f3b8:	8abb      	ldrh	r3, [r7, #20]
 800f3ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3be:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800f3c2:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800f3c6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800f3c8:	8a7a      	ldrh	r2, [r7, #18]
 800f3ca:	8abb      	ldrh	r3, [r7, #20]
 800f3cc:	ea42 0303 	orr.w	r3, r2, r3
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f3d6:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	8afa      	ldrh	r2, [r7, #22]
 800f3dc:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	8aba      	ldrh	r2, [r7, #20]
 800f3e2:	841a      	strh	r2, [r3, #32]
}
 800f3e4:	f107 071c 	add.w	r7, r7, #28
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bc80      	pop	{r7}
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop

0800f3f0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f3fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f402:	429a      	cmp	r2, r3
 800f404:	d10c      	bne.n	800f420 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800f406:	f04f 0010 	mov.w	r0, #16
 800f40a:	f04f 0101 	mov.w	r1, #1
 800f40e:	f7fb fabf 	bl	800a990 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800f412:	f04f 0010 	mov.w	r0, #16
 800f416:	f04f 0100 	mov.w	r1, #0
 800f41a:	f7fb fab9 	bl	800a990 <RCC_APB2PeriphResetCmd>
 800f41e:	e062      	b.n	800f4e6 <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800f426:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d10c      	bne.n	800f448 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800f42e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f432:	f04f 0101 	mov.w	r1, #1
 800f436:	f7fb fa7f 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800f43a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f43e:	f04f 0100 	mov.w	r1, #0
 800f442:	f7fb fa79 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800f446:	e04e      	b.n	800f4e6 <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800f44e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f452:	429a      	cmp	r2, r3
 800f454:	d10c      	bne.n	800f470 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800f456:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800f45a:	f04f 0101 	mov.w	r1, #1
 800f45e:	f7fb fa6b 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800f462:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800f466:	f04f 0100 	mov.w	r1, #0
 800f46a:	f7fb fa65 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800f46e:	e03a      	b.n	800f4e6 <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800f476:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d10c      	bne.n	800f498 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800f47e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800f482:	f04f 0101 	mov.w	r1, #1
 800f486:	f7fb fa57 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800f48a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800f48e:	f04f 0100 	mov.w	r1, #0
 800f492:	f7fb fa51 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800f496:	e026      	b.n	800f4e6 <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800f49e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d10c      	bne.n	800f4c0 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800f4a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f4aa:	f04f 0101 	mov.w	r1, #1
 800f4ae:	f7fb fa43 	bl	800a938 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800f4b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f4b6:	f04f 0100 	mov.w	r1, #0
 800f4ba:	f7fb fa3d 	bl	800a938 <RCC_APB1PeriphResetCmd>
 800f4be:	e012      	b.n	800f4e6 <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f4c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d10b      	bne.n	800f4e6 <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800f4ce:	f04f 0020 	mov.w	r0, #32
 800f4d2:	f04f 0101 	mov.w	r1, #1
 800f4d6:	f7fb fa5b 	bl	800a990 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800f4da:	f04f 0020 	mov.w	r0, #32
 800f4de:	f04f 0100 	mov.w	r1, #0
 800f4e2:	f7fb fa55 	bl	800a990 <RCC_APB2PeriphResetCmd>
    }
  }
}
 800f4e6:	f107 0708 	add.w	r7, r7, #8
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop

0800f4f0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b08a      	sub	sp, #40	; 0x28
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800f4fa:	f04f 0300 	mov.w	r3, #0
 800f4fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f500:	f04f 0300 	mov.w	r3, #0
 800f504:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800f506:	f04f 0300 	mov.w	r3, #0
 800f50a:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800f50c:	f04f 0300 	mov.w	r3, #0
 800f510:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	8a1b      	ldrh	r3, [r3, #16]
 800f516:	b29b      	uxth	r3, r3
 800f518:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f520:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	88db      	ldrh	r3, [r3, #6]
 800f526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f528:	ea42 0303 	orr.w	r3, r2, r3
 800f52c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	b29a      	uxth	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	899b      	ldrh	r3, [r3, #12]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800f53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f540:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800f544:	f023 030c 	bic.w	r3, r3, #12
 800f548:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	889a      	ldrh	r2, [r3, #4]
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	891b      	ldrh	r3, [r3, #8]
 800f552:	ea42 0303 	orr.w	r3, r2, r3
 800f556:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800f55c:	ea42 0303 	orr.w	r3, r2, r3
 800f560:	b29b      	uxth	r3, r3
 800f562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f564:	ea42 0303 	orr.w	r3, r2, r3
 800f568:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800f56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8a9b      	ldrh	r3, [r3, #20]
 800f576:	b29b      	uxth	r3, r3
 800f578:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f580:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	899b      	ldrh	r3, [r3, #12]
 800f586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f588:	ea42 0303 	orr.w	r3, r2, r3
 800f58c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800f58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f590:	b29a      	uxth	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800f596:	f107 0308 	add.w	r3, r7, #8
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fa ff18 	bl	800a3d0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d006      	beq.n	800f5bc <USART_Init+0xcc>
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f5b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d102      	bne.n	800f5c2 <USART_Init+0xd2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	623b      	str	r3, [r7, #32]
 800f5c0:	e001      	b.n	800f5c6 <USART_Init+0xd6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	899b      	ldrh	r3, [r3, #12]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	b21b      	sxth	r3, r3
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	da0f      	bge.n	800f5f4 <USART_Init+0x104>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800f5d4:	6a3a      	ldr	r2, [r7, #32]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f5dc:	4413      	add	r3, r2
 800f5de:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f5e2:	441a      	add	r2, r3
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5f0:	61fb      	str	r3, [r7, #28]
 800f5f2:	e00e      	b.n	800f612 <USART_Init+0x122>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800f5f4:	6a3a      	ldr	r2, [r7, #32]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f5fc:	4413      	add	r3, r2
 800f5fe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f602:	441a      	add	r2, r3
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f610:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800f612:	69fa      	ldr	r2, [r7, #28]
 800f614:	f248 531f 	movw	r3, #34079	; 0x851f
 800f618:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800f61c:	fba3 1302 	umull	r1, r3, r3, r2
 800f620:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800f624:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f628:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800f62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800f630:	f04f 0264 	mov.w	r2, #100	; 0x64
 800f634:	fb02 f303 	mul.w	r3, r2, r3
 800f638:	69fa      	ldr	r2, [r7, #28]
 800f63a:	ebc3 0302 	rsb	r3, r3, r2
 800f63e:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	899b      	ldrh	r3, [r3, #12]
 800f644:	b29b      	uxth	r3, r3
 800f646:	b29b      	uxth	r3, r3
 800f648:	b21b      	sxth	r3, r3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	da13      	bge.n	800f676 <USART_Init+0x186>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f654:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800f658:	f248 531f 	movw	r3, #34079	; 0x851f
 800f65c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800f660:	fba3 1302 	umull	r1, r3, r3, r2
 800f664:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800f668:	f003 0307 	and.w	r3, r3, #7
 800f66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f66e:	ea42 0303 	orr.w	r3, r2, r3
 800f672:	627b      	str	r3, [r7, #36]	; 0x24
 800f674:	e012      	b.n	800f69c <USART_Init+0x1ac>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f67c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800f680:	f248 531f 	movw	r3, #34079	; 0x851f
 800f684:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800f688:	fba3 1302 	umull	r1, r3, r3, r2
 800f68c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800f690:	f003 030f 	and.w	r3, r3, #15
 800f694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f696:	ea42 0303 	orr.w	r3, r2, r3
 800f69a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	811a      	strh	r2, [r3, #8]
}
 800f6a4:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800f6ba:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f04f 0200 	mov.w	r2, #0
 800f6c2:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f04f 0200 	mov.w	r2, #0
 800f6ca:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f04f 0200 	mov.w	r2, #0
 800f6d2:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f04f 020c 	mov.w	r2, #12
 800f6da:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f04f 0200 	mov.w	r2, #0
 800f6e2:	819a      	strh	r2, [r3, #12]
}
 800f6e4:	f107 070c 	add.w	r7, r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bc80      	pop	{r7}
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop

0800f6f0 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800f6fa:	f04f 0300 	mov.w	r3, #0
 800f6fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	8a1b      	ldrh	r3, [r3, #16]
 800f704:	b29b      	uxth	r3, r3
 800f706:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f70e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	881a      	ldrh	r2, [r3, #0]
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800f718:	ea42 0303 	orr.w	r3, r2, r3
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	889b      	ldrh	r3, [r3, #4]
 800f722:	ea42 0303 	orr.w	r3, r2, r3
 800f726:	b29a      	uxth	r2, r3
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	88db      	ldrh	r3, [r3, #6]
 800f72c:	ea42 0303 	orr.w	r3, r2, r3
 800f730:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	ea42 0303 	orr.w	r3, r2, r3
 800f738:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	821a      	strh	r2, [r3, #16]
}
 800f742:	f107 0714 	add.w	r7, r7, #20
 800f746:	46bd      	mov	sp, r7
 800f748:	bc80      	pop	{r7}
 800f74a:	4770      	bx	lr

0800f74c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f04f 0200 	mov.w	r2, #0
 800f75a:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f04f 0200 	mov.w	r2, #0
 800f762:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f04f 0200 	mov.w	r2, #0
 800f76a:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f04f 0200 	mov.w	r2, #0
 800f772:	80da      	strh	r2, [r3, #6]
}
 800f774:	f107 070c 	add.w	r7, r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	bc80      	pop	{r7}
 800f77c:	4770      	bx	lr
 800f77e:	bf00      	nop

0800f780 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	460b      	mov	r3, r1
 800f78a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f78c:	78fb      	ldrb	r3, [r7, #3]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d008      	beq.n	800f7a4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	899b      	ldrh	r3, [r3, #12]
 800f796:	b29b      	uxth	r3, r3
 800f798:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	819a      	strh	r2, [r3, #12]
 800f7a2:	e007      	b.n	800f7b4 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	899b      	ldrh	r3, [r3, #12]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	819a      	strh	r2, [r3, #12]
  }
}
 800f7b4:	f107 070c 	add.w	r7, r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bc80      	pop	{r7}
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop

0800f7c0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	8b1b      	ldrh	r3, [r3, #24]
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	8b1b      	ldrh	r3, [r3, #24]
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	78fb      	ldrb	r3, [r7, #3]
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	ea42 0303 	orr.w	r3, r2, r3
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	831a      	strh	r2, [r3, #24]
}
 800f7f0:	f107 070c 	add.w	r7, r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bc80      	pop	{r7}
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop

0800f7fc <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	460b      	mov	r3, r1
 800f806:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f808:	78fb      	ldrb	r3, [r7, #3]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00a      	beq.n	800f824 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	899b      	ldrh	r3, [r3, #12]
 800f812:	b29b      	uxth	r3, r3
 800f814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	819a      	strh	r2, [r3, #12]
 800f822:	e009      	b.n	800f838 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	899b      	ldrh	r3, [r3, #12]
 800f828:	b29b      	uxth	r3, r3
 800f82a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800f82e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800f832:	b29a      	uxth	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	819a      	strh	r2, [r3, #12]
  }
}  
 800f838:	f107 070c 	add.w	r7, r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bc80      	pop	{r7}
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop

0800f844 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	460b      	mov	r3, r1
 800f84e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f850:	78fb      	ldrb	r3, [r7, #3]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d008      	beq.n	800f868 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	8a9b      	ldrh	r3, [r3, #20]
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f860:	b29a      	uxth	r2, r3
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	829a      	strh	r2, [r3, #20]
 800f866:	e007      	b.n	800f878 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	8a9b      	ldrh	r3, [r3, #20]
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f872:	b29a      	uxth	r2, r3
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	829a      	strh	r2, [r3, #20]
  }
}
 800f878:	f107 070c 	add.w	r7, r7, #12
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bc80      	pop	{r7}
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop

0800f884 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	460b      	mov	r3, r1
 800f88e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800f890:	887b      	ldrh	r3, [r7, #2]
 800f892:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800f896:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	809a      	strh	r2, [r3, #4]
}
 800f8a0:	f107 070c 	add.w	r7, r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bc80      	pop	{r7}
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop

0800f8ac <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	889b      	ldrh	r3, [r3, #4]
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800f8be:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800f8c2:	b29b      	uxth	r3, r3
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f107 070c 	add.w	r7, r7, #12
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bc80      	pop	{r7}
 800f8ce:	4770      	bx	lr

0800f8d0 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	460b      	mov	r3, r1
 800f8da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	8a1b      	ldrh	r3, [r3, #16]
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	f023 030f 	bic.w	r3, r3, #15
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	8a1b      	ldrh	r3, [r3, #16]
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	78fb      	ldrb	r3, [r7, #3]
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	ea42 0303 	orr.w	r3, r2, r3
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	821a      	strh	r2, [r3, #16]
}
 800f900:	f107 070c 	add.w	r7, r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	bc80      	pop	{r7}
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop

0800f90c <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	460b      	mov	r3, r1
 800f916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800f918:	78fb      	ldrb	r3, [r7, #3]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d008      	beq.n	800f930 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	899b      	ldrh	r3, [r3, #12]
 800f922:	b29b      	uxth	r3, r3
 800f924:	f043 0302 	orr.w	r3, r3, #2
 800f928:	b29a      	uxth	r2, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	819a      	strh	r2, [r3, #12]
 800f92e:	e007      	b.n	800f940 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	899b      	ldrh	r3, [r3, #12]
 800f934:	b29b      	uxth	r3, r3
 800f936:	f023 0302 	bic.w	r3, r3, #2
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	819a      	strh	r2, [r3, #12]
  }
}
 800f940:	f107 070c 	add.w	r7, r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	bc80      	pop	{r7}
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop

0800f94c <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	460b      	mov	r3, r1
 800f956:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	899b      	ldrh	r3, [r3, #12]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f962:	b29a      	uxth	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	899b      	ldrh	r3, [r3, #12]
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	887b      	ldrh	r3, [r7, #2]
 800f970:	ea42 0303 	orr.w	r3, r2, r3
 800f974:	b29a      	uxth	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	819a      	strh	r2, [r3, #12]
}
 800f97a:	f107 070c 	add.w	r7, r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	bc80      	pop	{r7}
 800f982:	4770      	bx	lr

0800f984 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	460b      	mov	r3, r1
 800f98e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	8a1b      	ldrh	r3, [r3, #16]
 800f994:	b29b      	uxth	r3, r3
 800f996:	f023 0320 	bic.w	r3, r3, #32
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	8a1b      	ldrh	r3, [r3, #16]
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	887b      	ldrh	r3, [r7, #2]
 800f9a8:	ea42 0303 	orr.w	r3, r2, r3
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	821a      	strh	r2, [r3, #16]
}
 800f9b2:	f107 070c 	add.w	r7, r7, #12
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bc80      	pop	{r7}
 800f9ba:	4770      	bx	lr

0800f9bc <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f9c8:	78fb      	ldrb	r3, [r7, #3]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d008      	beq.n	800f9e0 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	8a1b      	ldrh	r3, [r3, #16]
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	821a      	strh	r2, [r3, #16]
 800f9de:	e007      	b.n	800f9f0 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	8a1b      	ldrh	r3, [r3, #16]
 800f9e4:	b29b      	uxth	r3, r3
 800f9e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	821a      	strh	r2, [r3, #16]
  }
}
 800f9f0:	f107 070c 	add.w	r7, r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bc80      	pop	{r7}
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop

0800f9fc <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	899b      	ldrh	r3, [r3, #12]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	f043 0301 	orr.w	r3, r3, #1
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	819a      	strh	r2, [r3, #12]
}
 800fa14:	f107 070c 	add.w	r7, r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bc80      	pop	{r7}
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop

0800fa20 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800fa2c:	78fb      	ldrb	r3, [r7, #3]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d008      	beq.n	800fa44 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	8a9b      	ldrh	r3, [r3, #20]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	f043 0308 	orr.w	r3, r3, #8
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	829a      	strh	r2, [r3, #20]
 800fa42:	e007      	b.n	800fa54 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	8a9b      	ldrh	r3, [r3, #20]
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	f023 0308 	bic.w	r3, r3, #8
 800fa4e:	b29a      	uxth	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	829a      	strh	r2, [r3, #20]
  }
}
 800fa54:	f107 070c 	add.w	r7, r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bc80      	pop	{r7}
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop

0800fa60 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	460b      	mov	r3, r1
 800fa6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	8b1b      	ldrh	r3, [r3, #24]
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	8b1b      	ldrh	r3, [r3, #24]
 800fa80:	b29a      	uxth	r2, r3
 800fa82:	78fb      	ldrb	r3, [r7, #3]
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	ea42 0303 	orr.w	r3, r2, r3
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	831a      	strh	r2, [r3, #24]
}
 800fa96:	f107 070c 	add.w	r7, r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bc80      	pop	{r7}
 800fa9e:	4770      	bx	lr

0800faa0 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	460b      	mov	r3, r1
 800faaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800faac:	78fb      	ldrb	r3, [r7, #3]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d008      	beq.n	800fac4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	8a9b      	ldrh	r3, [r3, #20]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	f043 0320 	orr.w	r3, r3, #32
 800fabc:	b29a      	uxth	r2, r3
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	829a      	strh	r2, [r3, #20]
 800fac2:	e007      	b.n	800fad4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	8a9b      	ldrh	r3, [r3, #20]
 800fac8:	b29b      	uxth	r3, r3
 800faca:	f023 0320 	bic.w	r3, r3, #32
 800face:	b29a      	uxth	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	829a      	strh	r2, [r3, #20]
  }
}
 800fad4:	f107 070c 	add.w	r7, r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	bc80      	pop	{r7}
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop

0800fae0 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b083      	sub	sp, #12
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	460b      	mov	r3, r1
 800faea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800faec:	78fb      	ldrb	r3, [r7, #3]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d008      	beq.n	800fb04 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	8a9b      	ldrh	r3, [r3, #20]
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	f043 0310 	orr.w	r3, r3, #16
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	829a      	strh	r2, [r3, #20]
 800fb02:	e007      	b.n	800fb14 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	8a9b      	ldrh	r3, [r3, #20]
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	f023 0310 	bic.w	r3, r3, #16
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	829a      	strh	r2, [r3, #20]
  }
}
 800fb14:	f107 070c 	add.w	r7, r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bc80      	pop	{r7}
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop

0800fb20 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b083      	sub	sp, #12
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	460b      	mov	r3, r1
 800fb2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	8a9b      	ldrh	r3, [r3, #20]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	f023 0304 	bic.w	r3, r3, #4
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	8a9b      	ldrh	r3, [r3, #20]
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	887b      	ldrh	r3, [r7, #2]
 800fb44:	ea42 0303 	orr.w	r3, r2, r3
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	829a      	strh	r2, [r3, #20]
}
 800fb4e:	f107 070c 	add.w	r7, r7, #12
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bc80      	pop	{r7}
 800fb56:	4770      	bx	lr

0800fb58 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	460b      	mov	r3, r1
 800fb62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800fb64:	78fb      	ldrb	r3, [r7, #3]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d008      	beq.n	800fb7c <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	8a9b      	ldrh	r3, [r3, #20]
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	f043 0302 	orr.w	r3, r3, #2
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	829a      	strh	r2, [r3, #20]
 800fb7a:	e007      	b.n	800fb8c <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	8a9b      	ldrh	r3, [r3, #20]
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	f023 0302 	bic.w	r3, r3, #2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	829a      	strh	r2, [r3, #20]
  }
}
 800fb8c:	f107 070c 	add.w	r7, r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bc80      	pop	{r7}
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop

0800fb98 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	4613      	mov	r3, r2
 800fba2:	460a      	mov	r2, r1
 800fba4:	807a      	strh	r2, [r7, #2]
 800fba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800fba8:	787b      	ldrb	r3, [r7, #1]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d009      	beq.n	800fbc2 <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	8a9b      	ldrh	r3, [r3, #20]
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	887b      	ldrh	r3, [r7, #2]
 800fbb6:	ea42 0303 	orr.w	r3, r2, r3
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	829a      	strh	r2, [r3, #20]
 800fbc0:	e00b      	b.n	800fbda <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	8a9b      	ldrh	r3, [r3, #20]
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	887b      	ldrh	r3, [r7, #2]
 800fbca:	ea6f 0303 	mvn.w	r3, r3
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	ea02 0303 	and.w	r3, r2, r3
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	829a      	strh	r2, [r3, #20]
  }
}
 800fbda:	f107 070c 	add.w	r7, r7, #12
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bc80      	pop	{r7}
 800fbe2:	4770      	bx	lr

0800fbe4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b087      	sub	sp, #28
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	4613      	mov	r3, r2
 800fbee:	460a      	mov	r2, r1
 800fbf0:	807a      	strh	r2, [r7, #2]
 800fbf2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800fbf4:	f04f 0300 	mov.w	r3, #0
 800fbf8:	613b      	str	r3, [r7, #16]
 800fbfa:	f04f 0300 	mov.w	r3, #0
 800fbfe:	60fb      	str	r3, [r7, #12]
 800fc00:	f04f 0300 	mov.w	r3, #0
 800fc04:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800fc06:	f04f 0300 	mov.w	r3, #0
 800fc0a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800fc10:	887b      	ldrh	r3, [r7, #2]
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800fc1c:	887b      	ldrh	r3, [r7, #2]
 800fc1e:	f003 031f 	and.w	r3, r3, #31
 800fc22:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f04f 0201 	mov.w	r2, #1
 800fc2a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc2e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d104      	bne.n	800fc40 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f103 030c 	add.w	r3, r3, #12
 800fc3c:	617b      	str	r3, [r7, #20]
 800fc3e:	e00b      	b.n	800fc58 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	d104      	bne.n	800fc50 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f103 0310 	add.w	r3, r3, #16
 800fc4c:	617b      	str	r3, [r7, #20]
 800fc4e:	e003      	b.n	800fc58 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	f103 0314 	add.w	r3, r3, #20
 800fc56:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800fc58:	787b      	ldrb	r3, [r7, #1]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d007      	beq.n	800fc6e <USART_ITConfig+0x8a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	697a      	ldr	r2, [r7, #20]
 800fc62:	6811      	ldr	r1, [r2, #0]
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	ea41 0202 	orr.w	r2, r1, r2
 800fc6a:	601a      	str	r2, [r3, #0]
 800fc6c:	e008      	b.n	800fc80 <USART_ITConfig+0x9c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	6811      	ldr	r1, [r2, #0]
 800fc74:	68ba      	ldr	r2, [r7, #8]
 800fc76:	ea6f 0202 	mvn.w	r2, r2
 800fc7a:	ea01 0202 	and.w	r2, r1, r2
 800fc7e:	601a      	str	r2, [r3, #0]
  }
}
 800fc80:	f107 071c 	add.w	r7, r7, #28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bc80      	pop	{r7}
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop

0800fc8c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	460b      	mov	r3, r1
 800fc96:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800fc98:	f04f 0300 	mov.w	r3, #0
 800fc9c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	881b      	ldrh	r3, [r3, #0]
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	887b      	ldrh	r3, [r7, #2]
 800fca6:	ea02 0303 	and.w	r3, r2, r3
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d003      	beq.n	800fcb8 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 800fcb0:	f04f 0301 	mov.w	r3, #1
 800fcb4:	73fb      	strb	r3, [r7, #15]
 800fcb6:	e002      	b.n	800fcbe <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 800fcb8:	f04f 0300 	mov.w	r3, #0
 800fcbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800fcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f107 0714 	add.w	r7, r7, #20
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bc80      	pop	{r7}
 800fcca:	4770      	bx	lr

0800fccc <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800fcd8:	887b      	ldrh	r3, [r7, #2]
 800fcda:	ea6f 0303 	mvn.w	r3, r3
 800fcde:	b29a      	uxth	r2, r3
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	801a      	strh	r2, [r3, #0]
}
 800fce4:	f107 070c 	add.w	r7, r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bc80      	pop	{r7}
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop

0800fcf0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800fcfc:	f04f 0300 	mov.w	r3, #0
 800fd00:	60fb      	str	r3, [r7, #12]
 800fd02:	f04f 0300 	mov.w	r3, #0
 800fd06:	617b      	str	r3, [r7, #20]
 800fd08:	f04f 0300 	mov.w	r3, #0
 800fd0c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800fd0e:	f04f 0300 	mov.w	r3, #0
 800fd12:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800fd14:	887b      	ldrh	r3, [r7, #2]
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800fd20:	887b      	ldrh	r3, [r7, #2]
 800fd22:	f003 031f 	and.w	r3, r3, #31
 800fd26:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	f04f 0201 	mov.w	r2, #1
 800fd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd32:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d107      	bne.n	800fd4a <USART_GetITStatus+0x5a>
  {
    itmask &= USARTx->CR1;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	899b      	ldrh	r3, [r3, #12]
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	697a      	ldr	r2, [r7, #20]
 800fd42:	ea02 0303 	and.w	r3, r2, r3
 800fd46:	617b      	str	r3, [r7, #20]
 800fd48:	e011      	b.n	800fd6e <USART_GetITStatus+0x7e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d107      	bne.n	800fd60 <USART_GetITStatus+0x70>
  {
    itmask &= USARTx->CR2;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	8a1b      	ldrh	r3, [r3, #16]
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	ea02 0303 	and.w	r3, r2, r3
 800fd5c:	617b      	str	r3, [r7, #20]
 800fd5e:	e006      	b.n	800fd6e <USART_GetITStatus+0x7e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	8a9b      	ldrh	r3, [r3, #20]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	697a      	ldr	r2, [r7, #20]
 800fd68:	ea02 0303 	and.w	r3, r2, r3
 800fd6c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800fd6e:	887b      	ldrh	r3, [r7, #2]
 800fd70:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f04f 0201 	mov.w	r2, #1
 800fd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd82:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	ea02 0303 	and.w	r3, r2, r3
 800fd90:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d006      	beq.n	800fda6 <USART_GetITStatus+0xb6>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <USART_GetITStatus+0xb6>
  {
    bitstatus = SET;
 800fd9e:	f04f 0301 	mov.w	r3, #1
 800fda2:	74fb      	strb	r3, [r7, #19]
 800fda4:	e002      	b.n	800fdac <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
 800fda6:	f04f 0300 	mov.w	r3, #0
 800fdaa:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800fdac:	7cfb      	ldrb	r3, [r7, #19]
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f107 071c 	add.w	r7, r7, #28
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bc80      	pop	{r7}
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop

0800fdbc <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800fdc8:	f04f 0300 	mov.w	r3, #0
 800fdcc:	81fb      	strh	r3, [r7, #14]
 800fdce:	f04f 0300 	mov.w	r3, #0
 800fdd2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800fdd4:	887b      	ldrh	r3, [r7, #2]
 800fdd6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800fdda:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800fddc:	89fb      	ldrh	r3, [r7, #14]
 800fdde:	f04f 0201 	mov.w	r2, #1
 800fde2:	fa02 f303 	lsl.w	r3, r2, r3
 800fde6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800fde8:	89bb      	ldrh	r3, [r7, #12]
 800fdea:	ea6f 0303 	mvn.w	r3, r3
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	801a      	strh	r2, [r3, #0]
}
 800fdf4:	f107 0714 	add.w	r7, r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bc80      	pop	{r7}
 800fdfc:	4770      	bx	lr
 800fdfe:	bf00      	nop

0800fe00 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800fe04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fe08:	f04f 0101 	mov.w	r1, #1
 800fe0c:	f7fa fd94 	bl	800a938 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800fe10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fe14:	f04f 0100 	mov.w	r1, #0
 800fe18:	f7fa fd8e 	bl	800a938 <RCC_APB1PeriphResetCmd>
}
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fe28:	f04f 0300 	mov.w	r3, #0
 800fe2c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 800fe2e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800fe32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800fe3c:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	ea42 0303 	orr.w	r3, r2, r3
 800fe46:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800fe48:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800fe4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	605a      	str	r2, [r3, #4]
}
 800fe54:	f107 0714 	add.w	r7, r7, #20
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bc80      	pop	{r7}
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop

0800fe60 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b085      	sub	sp, #20
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	4603      	mov	r3, r0
 800fe68:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 800fe6a:	f04f 0300 	mov.w	r3, #0
 800fe6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 800fe70:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800fe74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fe7e:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800fe80:	79fb      	ldrb	r3, [r7, #7]
 800fe82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	ea42 0303 	orr.w	r3, r2, r3
 800fe8c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800fe8e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800fe92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fe96:	68fa      	ldr	r2, [r7, #12]
 800fe98:	605a      	str	r2, [r3, #4]
}
 800fe9a:	f107 0714 	add.w	r7, r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bc80      	pop	{r7}
 800fea2:	4770      	bx	lr

0800fea4 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800fea4:	b480      	push	{r7}
 800fea6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800fea8:	f248 03a4 	movw	r3, #32932	; 0x80a4
 800feac:	f2c4 2305 	movt	r3, #16901	; 0x4205
 800feb0:	f04f 0201 	mov.w	r2, #1
 800feb4:	601a      	str	r2, [r3, #0]
}
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bc80      	pop	{r7}
 800feba:	4770      	bx	lr

0800febc <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	4603      	mov	r3, r0
 800fec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800fec6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800feca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fece:	79fa      	ldrb	r2, [r7, #7]
 800fed0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fed4:	601a      	str	r2, [r3, #0]
}
 800fed6:	f107 070c 	add.w	r7, r7, #12
 800feda:	46bd      	mov	sp, r7
 800fedc:	bc80      	pop	{r7}
 800fede:	4770      	bx	lr

0800fee0 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	4603      	mov	r3, r0
 800fee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800feea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800feee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fef2:	79fa      	ldrb	r2, [r7, #7]
 800fef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fef8:	b2d2      	uxtb	r2, r2
 800fefa:	601a      	str	r2, [r3, #0]
}
 800fefc:	f107 070c 	add.w	r7, r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bc80      	pop	{r7}
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop

0800ff08 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800ff0e:	f04f 0300 	mov.w	r3, #0
 800ff12:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800ff14:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ff18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d003      	beq.n	800ff2a <WWDG_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 800ff22:	f04f 0301 	mov.w	r3, #1
 800ff26:	71fb      	strb	r3, [r7, #7]
 800ff28:	e002      	b.n	800ff30 <WWDG_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800ff2a:	f04f 0300 	mov.w	r3, #0
 800ff2e:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800ff30:	79fb      	ldrb	r3, [r7, #7]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	f107 070c 	add.w	r7, r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bc80      	pop	{r7}
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop

0800ff40 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 800ff40:	b480      	push	{r7}
 800ff42:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 800ff44:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ff48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ff4c:	f04f 0200 	mov.w	r2, #0
 800ff50:	609a      	str	r2, [r3, #8]
}
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bc80      	pop	{r7}
 800ff56:	4770      	bx	lr

0800ff58 <__errno>:
 800ff58:	f240 0338 	movw	r3, #56	; 0x38
 800ff5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff60:	6818      	ldr	r0, [r3, #0]
 800ff62:	4770      	bx	lr

0800ff64 <memset>:
 800ff64:	f010 0f03 	tst.w	r0, #3
 800ff68:	4684      	mov	ip, r0
 800ff6a:	b430      	push	{r4, r5}
 800ff6c:	d00e      	beq.n	800ff8c <memset+0x28>
 800ff6e:	2a00      	cmp	r2, #0
 800ff70:	d044      	beq.n	800fffc <memset+0x98>
 800ff72:	3a01      	subs	r2, #1
 800ff74:	b2cc      	uxtb	r4, r1
 800ff76:	4603      	mov	r3, r0
 800ff78:	e002      	b.n	800ff80 <memset+0x1c>
 800ff7a:	2a00      	cmp	r2, #0
 800ff7c:	d03e      	beq.n	800fffc <memset+0x98>
 800ff7e:	3a01      	subs	r2, #1
 800ff80:	f803 4b01 	strb.w	r4, [r3], #1
 800ff84:	f013 0f03 	tst.w	r3, #3
 800ff88:	469c      	mov	ip, r3
 800ff8a:	d1f6      	bne.n	800ff7a <memset+0x16>
 800ff8c:	2a03      	cmp	r2, #3
 800ff8e:	d92d      	bls.n	800ffec <memset+0x88>
 800ff90:	f001 04ff 	and.w	r4, r1, #255	; 0xff
 800ff94:	2a0f      	cmp	r2, #15
 800ff96:	4665      	mov	r5, ip
 800ff98:	bf88      	it	hi
 800ff9a:	4663      	movhi	r3, ip
 800ff9c:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
 800ffa0:	bf88      	it	hi
 800ffa2:	4615      	movhi	r5, r2
 800ffa4:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
 800ffa8:	d910      	bls.n	800ffcc <memset+0x68>
 800ffaa:	3d10      	subs	r5, #16
 800ffac:	601c      	str	r4, [r3, #0]
 800ffae:	605c      	str	r4, [r3, #4]
 800ffb0:	609c      	str	r4, [r3, #8]
 800ffb2:	60dc      	str	r4, [r3, #12]
 800ffb4:	3310      	adds	r3, #16
 800ffb6:	2d0f      	cmp	r5, #15
 800ffb8:	d8f7      	bhi.n	800ffaa <memset+0x46>
 800ffba:	3a10      	subs	r2, #16
 800ffbc:	f022 050f 	bic.w	r5, r2, #15
 800ffc0:	f002 020f 	and.w	r2, r2, #15
 800ffc4:	3510      	adds	r5, #16
 800ffc6:	2a03      	cmp	r2, #3
 800ffc8:	4465      	add	r5, ip
 800ffca:	d90e      	bls.n	800ffea <memset+0x86>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	50ec      	str	r4, [r5, r3]
 800ffd0:	3304      	adds	r3, #4
 800ffd2:	ebc3 0c02 	rsb	ip, r3, r2
 800ffd6:	f1bc 0f03 	cmp.w	ip, #3
 800ffda:	d8f8      	bhi.n	800ffce <memset+0x6a>
 800ffdc:	3a04      	subs	r2, #4
 800ffde:	f022 0303 	bic.w	r3, r2, #3
 800ffe2:	f002 0203 	and.w	r2, r2, #3
 800ffe6:	3304      	adds	r3, #4
 800ffe8:	18ed      	adds	r5, r5, r3
 800ffea:	46ac      	mov	ip, r5
 800ffec:	b132      	cbz	r2, 800fffc <memset+0x98>
 800ffee:	b2c9      	uxtb	r1, r1
 800fff0:	2300      	movs	r3, #0
 800fff2:	f80c 1003 	strb.w	r1, [ip, r3]
 800fff6:	3301      	adds	r3, #1
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d1fa      	bne.n	800fff2 <memset+0x8e>
 800fffc:	bc30      	pop	{r4, r5}
 800fffe:	4770      	bx	lr

08010000 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010000:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010002:	e003      	b.n	801000c <LoopCopyDataInit>

08010004 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010004:	4b0a      	ldr	r3, [pc, #40]	; (8010030 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 8010006:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010008:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801000a:	3104      	adds	r1, #4

0801000c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801000c:	4809      	ldr	r0, [pc, #36]	; (8010034 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 801000e:	4b0a      	ldr	r3, [pc, #40]	; (8010038 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8010010:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010012:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010014:	d3f6      	bcc.n	8010004 <CopyDataInit>
  ldr  r2, =_sbss
 8010016:	4a09      	ldr	r2, [pc, #36]	; (801003c <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 8010018:	e002      	b.n	8010020 <LoopFillZerobss>

0801001a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801001a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801001c:	f842 3b04 	str.w	r3, [r2], #4

08010020 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010020:	4b07      	ldr	r3, [pc, #28]	; (8010040 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8010022:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010024:	d3f9      	bcc.n	801001a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010026:	f7f0 fc01 	bl	800082c <SystemInit>
/* Call the application's entry point.*/
  bl  main
 801002a:	f7f0 f90b 	bl	8000244 <main>
  bx  lr    
 801002e:	4770      	bx	lr
 8010030:	08010084 	.word	0x08010084
 8010034:	20000000 	.word	0x20000000
 8010038:	20000468 	.word	0x20000468
 801003c:	20000468 	.word	0x20000468
 8010040:	20000770 	.word	0x20000770

08010044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010044:	e7fe      	b.n	8010044 <ADC_IRQHandler>
	...

08010048 <GPIO_PIN>:
 8010048:	0200 0000                                   ....

0801004c <GPIO_CLK>:
 801004c:	0002 0000                                   ....

08010050 <COM_USART_CLK>:
 8010050:	0000 0004                                   ....

08010054 <COM_TX_PORT_CLK>:
 8010054:	0008 0000                                   ....

08010058 <COM_RX_PORT_CLK>:
 8010058:	0008 0000                                   ....

0801005c <COM_TX_PIN>:
 801005c:	0100 0000                                   ....

08010060 <COM_RX_PIN>:
 8010060:	0200 0000                                   ....

08010064 <COM_TX_PIN_SOURCE>:
 8010064:	0008 0000                                   ....

08010068 <COM_RX_PIN_SOURCE>:
 8010068:	0009 0000                                   ....

0801006c <COM_TX_AF>:
 801006c:	0007 0000                                   ....

08010070 <COM_RX_AF>:
 8010070:	0007 0000                                   ....

08010074 <Escalator8bit>:
 8010074:	3300 9966 ffcc 0000                         .3f.....

0801007c <_global_impure_ptr>:
 801007c:	0040 2000 0043 0000                         @.. C...
