   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	2
  18              		.thumb
  19              		.thumb_func
  21              	NVIC_SetPriority:
  22              	.LFB20:
  23              		.file 1 "C:\\workspace\\te_stm32f207_simple\\system/core_cm3.h"
   1:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**************************************************************************//**
   2:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @file     core_cm3.h
   3:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @version  V1.30
   5:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @date     30. October 2009
   6:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
   7:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @note
   8:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  10:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @par
  11:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  15:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @par
  16:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  22:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  ******************************************************************************/
  23:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  24:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #ifndef __CM3_CORE_H__
  25:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CM3_CORE_H__
  26:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  27:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  29:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 10: \n
  31:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Error 10: Expecting ';'
  33:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  34:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 530: \n
  35:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     return(__regBasePri); \n
  36:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * . 
  38:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 550: \n
  39:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  42:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 754: \n
  43:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  46:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 750: \n
  47:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  50:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 528: \n
  51:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  54:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 751: \n
  55:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     } InterruptType_Type; \n
  56:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  58:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  60:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
  61:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  62:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -save */
  63:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e10  */
  64:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e530 */
  65:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e550 */
  66:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e754 */
  67:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e750 */
  68:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e528 */
  69:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e751 */
  70:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  71:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  72:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     - CMSIS version number
  75:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     - Cortex-M core registers and bitfields
  76:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     - Cortex-M core peripheral base address
  77:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
  78:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
  79:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  80:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #ifdef __cplusplus
  81:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  extern "C" {
  82:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif 
  83:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  84:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  88:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  90:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  92:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined (__ICCARM__)
  93:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
  95:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  96:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  97:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 100:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 101:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 102:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 103:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 104:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 105:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * IO definitions
 106:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 107:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * define access restrictions to peripheral registers
 108:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 109:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 110:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #ifdef __cplusplus
 111:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #else
 113:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 115:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 118:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 119:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 120:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*******************************************************************************
 121:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *                 Register Abstraction
 122:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  ******************************************************************************/
 123:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  @{
 125:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** */
 126:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 127:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 128:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 131:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 132:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 133:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 134:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }  NVIC_Type;                                               
 148:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 150:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 151:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 154:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 155:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 156:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 157:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } SCB_Type;                                                
 177:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 178:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB CPUID Register Definitions */
 179:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 182:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 185:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 188:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 191:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 195:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 198:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 201:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 204:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 207:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 210:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 213:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 216:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 219:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 222:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 226:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 229:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 233:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 236:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 239:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 242:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 245:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 248:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 251:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB System Control Register Definitions */
 252:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 255:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 258:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 261:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 265:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 268:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 271:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 274:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 277:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 280:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 284:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 287:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 290:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 293:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 296:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 299:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 302:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 305:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 308:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 311:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****                                      
 314:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 317:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 320:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 323:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 327:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 330:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 333:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 337:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 340:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 343:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 347:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 350:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 353:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 356:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 360:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 361:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for SysTick
 363:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 364:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 365:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 366:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 367:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } SysTick_Type;
 372:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 373:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 377:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 380:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 383:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 386:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SysTick Reload Register Definitions */
 387:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 390:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SysTick Current Register Definitions */
 391:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 394:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 398:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 401:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 405:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 406:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 409:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 410:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 411:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 412:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __O  union  
 413:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   {
 414:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } ITM_Type;                                                
 445:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 446:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 450:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 454:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 457:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 460:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 463:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 466:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 469:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 472:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 475:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 479:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 483:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 487:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 491:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 494:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 498:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 499:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Interrupt Type
 501:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 502:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 503:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 504:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 505:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED0;
 506:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #else
 510:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED1;
 511:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 512:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } InterruptType_Type;
 513:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 514:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 518:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 522:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 525:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 529:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 530:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 534:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 535:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 536:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 537:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } MPU_Type;                                                
 549:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 550:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Type Register */
 551:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 554:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 557:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 560:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Control Register */
 561:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 564:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 567:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 570:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Region Number Register */
 571:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 574:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Region Base Address Register */
 575:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 578:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 581:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 584:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 588:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 591:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 594:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 597:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 600:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 603:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 606:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 609:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 612:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 614:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 615:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 616:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Core Debug Register
 618:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 619:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 620:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 621:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 622:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } CoreDebug_Type;
 627:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 628:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Debug Halting Control and Status Register */
 629:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 632:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 635:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 638:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 641:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 644:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 647:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 650:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 653:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 656:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 659:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 662:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 665:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Debug Core Register Selector Register */
 666:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 669:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 672:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 676:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 679:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 682:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 685:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 688:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 691:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 694:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 697:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 700:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 703:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 706:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 709:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 713:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 714:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 722:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 729:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 733:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 734:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 736:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 737:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*******************************************************************************
 738:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *                Hardware Abstraction Layer
 739:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  ******************************************************************************/
 740:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 741:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined ( __CC_ARM   )
 742:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 745:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif defined ( __ICCARM__ )
 746:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 749:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif defined   (  __GNUC__  )
 750:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 753:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif defined   (  __TASKING__  )
 754:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 757:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 758:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 759:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 760:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 762:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ARM armcc specific functions */
 764:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 765:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 768:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __NOP                             __nop
 769:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __WFI                             __wfi
 770:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __WFE                             __wfe
 771:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __SEV                             __sev
 772:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __ISB()                           __isb(0)
 773:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __DSB()                           __dsb(0)
 774:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __DMB()                           __dmb(0)
 775:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __REV                             __rev
 776:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __RBIT                            __rbit
 777:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 784:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 785:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 790:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 791:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 792:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 794:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return ProcessStackPointer
 795:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 796:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the actual process stack pointer
 797:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 798:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_PSP(void);
 799:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 800:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 801:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 803:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 805:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 808:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 810:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 811:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 813:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Main Stack Pointer
 814:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 815:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Cortex processor register
 817:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 818:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_MSP(void);
 819:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 820:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 821:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 823:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 825:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 828:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 830:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 831:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 833:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param   value  value to reverse
 834:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return         reversed value
 835:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 836:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in unsigned short value
 837:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 838:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 840:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 841:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 843:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param   value  value to reverse
 844:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return         reversed value
 845:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 846:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 848:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 850:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 851:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 853:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 854:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 856:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 858:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __CLREX(void);
 859:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 860:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 861:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Base Priority value
 862:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 863:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return BasePriority
 864:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 865:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the base priority register
 866:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 867:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 869:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 870:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Base Priority value
 871:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 872:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  basePri  BasePriority
 873:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 874:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the base priority register
 875:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 876:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 878:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 879:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Priority Mask value
 880:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 881:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return PriMask
 882:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 883:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 885:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 887:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 888:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Priority Mask value
 889:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 890:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param   priMask  PriMask
 891:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 892:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 894:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 896:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 897:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Fault Mask value
 898:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 899:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return FaultMask
 900:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 901:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the fault mask register
 902:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 903:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 905:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 906:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Fault Mask value
 907:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 908:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  faultMask faultMask value
 909:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 910:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the fault mask register
 911:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 912:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 914:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 915:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Control Register value
 916:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * 
 917:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Control value
 918:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 919:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the control register
 920:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 921:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 923:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 924:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Control Register value
 925:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 926:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  control  Control value
 927:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 928:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the control register
 929:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 930:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 932:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 934:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 935:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 937:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 939:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CLREX                           __clrex
 940:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 941:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 942:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Base Priority value
 943:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 944:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return BasePriority
 945:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 946:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the base priority register
 947:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 948:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 950:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return(__regBasePri);
 952:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 953:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 954:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 955:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Base Priority value
 956:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 957:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  basePri  BasePriority
 958:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 959:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the base priority register
 960:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 961:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 963:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 966:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 967:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 968:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Priority Mask value
 969:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 970:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return PriMask
 971:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 972:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 974:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 976:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return(__regPriMask);
 978:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 979:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 980:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 981:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Priority Mask value
 982:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 983:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  priMask  PriMask
 984:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 985:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 987:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 989:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __regPriMask = (priMask);
 991:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 992:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 993:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 994:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Fault Mask value
 995:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 996:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return FaultMask
 997:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 998:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the fault mask register
 999:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1000:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1002:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return(__regFaultMask);
1004:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1005:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1006:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1007:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Fault Mask value
1008:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1009:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  faultMask  faultMask value
1010:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1011:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the fault mask register
1012:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1013:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1015:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1018:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1019:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1020:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Control Register value
1021:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * 
1022:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Control value
1023:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1024:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the control register
1025:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1026:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1028:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return(__regControl);
1030:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1031:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1032:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1033:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Control Register value
1034:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1035:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  control  Control value
1036:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1037:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the control register
1038:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1039:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1041:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __regControl = control;
1043:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1044:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1045:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1047:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1048:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1049:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* IAR iccarm specific functions */
1051:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1052:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1055:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1058:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1064:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1076:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1077:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1078:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1080:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return ProcessStackPointer
1081:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1082:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the actual process stack pointer
1083:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1084:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_PSP(void);
1085:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1086:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1087:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1089:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1091:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1094:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1096:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1097:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1099:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Main Stack Pointer
1100:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1101:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Cortex processor register
1103:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1104:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_MSP(void);
1105:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1106:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1107:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1109:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1111:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1114:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1116:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1117:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1119:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to reverse
1120:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        reversed value
1121:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1122:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in unsigned short value
1123:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1124:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1126:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1127:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse bit order of value
1128:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1129:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to reverse
1130:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        reversed value
1131:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1132:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse bit order of value
1133:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1134:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1136:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1137:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1139:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1140:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1141:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1142:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1144:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1146:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1147:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1149:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1150:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1151:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1152:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1154:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1156:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1157:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1159:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1160:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1161:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1162:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1164:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1166:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1167:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1169:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1170:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1171:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1172:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1173:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1175:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1177:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1178:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1180:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1181:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1182:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1183:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1184:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1186:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1188:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1189:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1191:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1192:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1193:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1194:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1195:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1197:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1199:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1200:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1201:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* GNU gcc specific functions */
1203:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1204:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1207:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1210:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1219:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1220:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1221:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1223:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return ProcessStackPointer
1224:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1225:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the actual process stack pointer
1226:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1227:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_PSP(void);
1228:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1229:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1230:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1232:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1234:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1237:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1239:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1240:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1242:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Main Stack Pointer
1243:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1244:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Cortex processor register
1246:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1247:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_MSP(void);
1248:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1249:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1250:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1252:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1254:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1257:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1259:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1260:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Base Priority value
1261:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1262:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return BasePriority
1263:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1264:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the base priority register
1265:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1266:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1268:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1269:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Base Priority value
1270:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1271:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  basePri  BasePriority
1272:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1273:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the base priority register
1274:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1275:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1277:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1278:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Priority Mask value
1279:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1280:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return PriMask
1281:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1282:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1284:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1286:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1287:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Priority Mask value
1288:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1289:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  priMask  PriMask
1290:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1291:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1293:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1295:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1296:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Fault Mask value
1297:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1298:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return FaultMask
1299:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1300:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the fault mask register
1301:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1302:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1304:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1305:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Fault Mask value
1306:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1307:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  faultMask  faultMask value
1308:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1309:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the fault mask register
1310:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1311:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1313:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1314:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Control Register value
1315:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** * 
1316:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** *  @return Control value
1317:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1318:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the control register
1319:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1320:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1322:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1323:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Control Register value
1324:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1325:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  control  Control value
1326:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1327:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the control register
1328:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1329:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1331:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1332:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1334:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to reverse
1335:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        reversed value
1336:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1337:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in integer value
1338:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1339:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1341:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1342:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1344:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to reverse
1345:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        reversed value
1346:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1347:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in unsigned short value
1348:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1349:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1351:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1352:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1354:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to reverse
1355:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        reversed value
1356:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1357:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1359:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1361:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1362:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse bit order of value
1363:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1364:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to reverse
1365:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        reversed value
1366:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1367:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse bit order of value
1368:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1369:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1371:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1372:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1374:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1375:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1376:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1377:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1379:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1381:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1382:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1384:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1385:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1386:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1387:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1389:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1391:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1392:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1394:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1395:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1396:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1397:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1399:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1401:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1402:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1404:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1405:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1406:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1407:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1408:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1410:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1412:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1413:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1415:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1416:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1417:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1418:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1419:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1421:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1423:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1424:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1426:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1427:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1428:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1429:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1430:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1432:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1434:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1435:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* TASKING carm specific functions */
1437:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1438:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*
1439:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Including the CMSIS ones.
1442:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1443:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1444:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
1445:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1446:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1447:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   Core  Function Interface containing:
1449:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   - Core NVIC Functions
1450:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   - Core SysTick Functions
1451:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   - Core Reset Functions
1452:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** */
1453:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@{*/
1454:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1455:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1457:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1458:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1460:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1462:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1468:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1470:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   uint32_t reg_value;
1471:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   
1473:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   reg_value  =  (reg_value                       |
1476:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1480:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1481:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1482:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1484:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return priority grouping field 
1485:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1486:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1489:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1491:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1493:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1494:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1495:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1497:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1499:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1502:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1504:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1506:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1507:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1508:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * 
1510:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * 
1512:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1515:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1517:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1519:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1520:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1521:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * 
1523:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1526:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1527:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * otherwise it returns 0
1528:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1529:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1531:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1533:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1534:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1535:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * 
1537:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1539:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1542:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1544:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1546:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1547:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1548:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1550:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1552:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1553:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1555:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1557:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1559:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1560:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1561:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1563:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1566:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1567:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * otherwise it returns 0.
1568:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1569:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1571:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1573:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1574:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1575:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1577:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  priority  The priority to set
1579:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1580:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1581:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * number can be positive to specify an external (device specific) 
1582:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1584:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1586:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
  24              		.loc 1 1587 0
  25              		.cfi_startproc
  26              		@ args = 0, pretend = 0, frame = 8
  27              		@ frame_needed = 1, uses_anonymous_args = 0
  28              		@ link register save eliminated.
  29 0000 80B4     		push	{r7}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 83B0     		sub	sp, sp, #12
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
  39 0006 0346     		mov	r3, r0
  40 0008 3960     		str	r1, [r7, #0]
  41 000a FB71     		strb	r3, [r7, #7]
1588:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   if(IRQn < 0) {
  42              		.loc 1 1588 0
  43 000c 97F90730 		ldrsb	r3, [r7, #7]
  44 0010 002B     		cmp	r3, #0
  45 0012 10DA     		bge	.L2
1589:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  46              		.loc 1 1589 0
  47 0014 4FF46D43 		mov	r3, #60672
  48 0018 CEF20003 		movt	r3, 57344
  49 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  50 001e 02F00F02 		and	r2, r2, #15
  51 0022 A2F10401 		sub	r1, r2, #4
  52 0026 3A68     		ldr	r2, [r7, #0]
  53 0028 D2B2     		uxtb	r2, r2
  54 002a 4FEA0212 		lsl	r2, r2, #4
  55 002e D2B2     		uxtb	r2, r2
  56 0030 5B18     		adds	r3, r3, r1
  57 0032 1A76     		strb	r2, [r3, #24]
  58 0034 0DE0     		b	.L1
  59              	.L2:
1590:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   else {
1591:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
  60              		.loc 1 1591 0
  61 0036 4FF46143 		mov	r3, #57600
  62 003a CEF20003 		movt	r3, 57344
  63 003e 97F90710 		ldrsb	r1, [r7, #7]
  64 0042 3A68     		ldr	r2, [r7, #0]
  65 0044 D2B2     		uxtb	r2, r2
  66 0046 4FEA0212 		lsl	r2, r2, #4
  67 004a D2B2     		uxtb	r2, r2
  68 004c 5B18     		adds	r3, r3, r1
  69 004e 83F80023 		strb	r2, [r3, #768]
  70              	.L1:
1592:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
  71              		.loc 1 1592 0
  72 0052 07F10C07 		add	r7, r7, #12
  73 0056 BD46     		mov	sp, r7
  74 0058 80BC     		pop	{r7}
  75 005a 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE20:
  79              		.align	2
  80              		.thumb
  81              		.thumb_func
  83              	SysTick_Config:
  84              	.LFB24:
1593:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1594:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1595:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Read the priority for an interrupt
1596:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1597:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  IRQn      The number of the interrupt for get priority
1598:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return           The priority for the interrupt
1599:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1600:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Read the priority for the specified interrupt. The interrupt 
1601:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * number can be positive to specify an external (device specific) 
1602:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1603:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1604:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The returned priority value is automatically aligned to the implemented
1605:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * priority bits of the microcontroller.
1606:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1607:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1608:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1609:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1610:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1611:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1612:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   if(IRQn < 0) {
1613:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1614:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   else {
1615:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1616:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1617:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1618:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1619:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1620:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Encode the priority for an interrupt
1621:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1622:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  PriorityGroup    The used priority group
1623:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  PreemptPriority  The preemptive priority value (starting from 0)
1624:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  SubPriority      The sub priority value (starting from 0)
1625:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return                  The encoded priority for the interrupt
1626:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1627:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Encode the priority for an interrupt with the given priority group,
1628:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * preemptive priority value and sub priority value.
1629:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * In case of a conflict between priority grouping and available
1630:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1631:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1632:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The returned priority value can be used for NVIC_SetPriority(...) function
1633:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1634:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1635:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1636:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1637:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   uint32_t PreemptPriorityBits;
1638:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   uint32_t SubPriorityBits;
1639:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1640:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1641:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1642:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  
1643:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return (
1644:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1645:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1646:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****          );
1647:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1648:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1649:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1650:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1651:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Decode the priority of an interrupt
1652:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1653:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  Priority           The priority for the interrupt
1654:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  PriorityGroup      The used priority group
1655:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  pPreemptPriority   The preemptive priority value (starting from 0)
1656:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  pSubPriority       The sub priority value (starting from 0)
1657:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1658:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Decode an interrupt priority value with the given priority group to 
1659:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * preemptive priority value and sub priority value.
1660:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * In case of a conflict between priority grouping and available
1661:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1662:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1663:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * The priority value can be retrieved with NVIC_GetPriority(...) function
1664:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1665:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1666:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1667:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1668:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   uint32_t PreemptPriorityBits;
1669:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   uint32_t SubPriorityBits;
1670:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1671:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1672:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1673:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   
1674:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1675:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1676:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1677:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1678:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1679:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1680:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ##################################    SysTick function  ########################################
1681:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1682:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
1683:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1684:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1685:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
1686:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1687:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param   ticks   number of ticks between two interrupts
1688:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return  1 = failed, 0 = successful
1689:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1690:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Initialise the system tick timer and its interrupt and start the
1691:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * system tick timer / counter in free running mode to generate 
1692:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * periodical interrupts.
1693:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1694:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1695:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** { 
  85              		.loc 1 1695 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 8
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89 005c 80B5     		push	{r7, lr}
  90              	.LCFI3:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 14, -4
  93              		.cfi_offset 7, -8
  94 005e 82B0     		sub	sp, sp, #8
  95              	.LCFI4:
  96              		.cfi_def_cfa_offset 16
  97 0060 00AF     		add	r7, sp, #0
  98              	.LCFI5:
  99              		.cfi_def_cfa_register 7
 100 0062 7860     		str	r0, [r7, #4]
1696:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 101              		.loc 1 1696 0
 102 0064 7A68     		ldr	r2, [r7, #4]
 103 0066 6FF07F43 		mvn	r3, #-16777216
 104 006a 9A42     		cmp	r2, r3
 105 006c 02D9     		bls	.L5
 106              		.loc 1 1696 0 is_stmt 0 discriminator 1
 107 006e 4FF00103 		mov	r3, #1
 108 0072 1FE0     		b	.L6
 109              	.L5:
1697:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****                                                                
1698:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 110              		.loc 1 1698 0 is_stmt 1
 111 0074 4EF21003 		movw	r3, #57360
 112 0078 CEF20003 		movt	r3, 57344
 113 007c 7A68     		ldr	r2, [r7, #4]
 114 007e 22F07F42 		bic	r2, r2, #-16777216
 115 0082 02F1FF32 		add	r2, r2, #-1
 116 0086 5A60     		str	r2, [r3, #4]
1699:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 117              		.loc 1 1699 0
 118 0088 4FF0FF30 		mov	r0, #-1
 119 008c 4FF00F01 		mov	r1, #15
 120 0090 FFF7B6FF 		bl	NVIC_SetPriority
1700:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 121              		.loc 1 1700 0
 122 0094 4EF21003 		movw	r3, #57360
 123 0098 CEF20003 		movt	r3, 57344
 124 009c 4FF00002 		mov	r2, #0
 125 00a0 9A60     		str	r2, [r3, #8]
1701:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 126              		.loc 1 1701 0
 127 00a2 4EF21003 		movw	r3, #57360
 128 00a6 CEF20003 		movt	r3, 57344
 129 00aa 4FF00702 		mov	r2, #7
 130 00ae 1A60     		str	r2, [r3, #0]
1702:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   | 
1703:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1704:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return (0);                                                  /* Function successful */
 131              		.loc 1 1704 0
 132 00b0 4FF00003 		mov	r3, #0
 133              	.L6:
1705:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 134              		.loc 1 1705 0
 135 00b4 1846     		mov	r0, r3
 136 00b6 07F10807 		add	r7, r7, #8
 137 00ba BD46     		mov	sp, r7
 138 00bc 80BD     		pop	{r7, pc}
 139              		.cfi_endproc
 140              	.LFE24:
 142              		.comm	ADCConvertedValue,4,4
 143              		.comm	USART_InitStructure,16,4
 144              		.comm	Message,256,4
 145              		.bss
 146              		.align	2
 147              	TimingDelay:
 148 0000 00000000 		.space	4
 149              		.section	.rodata
 150              		.align	2
 151              	.LC0:
 152 0000 0A200D20 		.ascii	"\012 \015 Temperature sensor : \000"
 152      54656D70 
 152      65726174 
 152      75726520 
 152      73656E73 
 153              		.global	__aeabi_ui2d
 154              		.global	__aeabi_dmul
 155              		.global	__aeabi_dsub
 156              		.global	__aeabi_ddiv
 157              		.global	__aeabi_dadd
 158              		.global	__aeabi_d2f
 159              		.global	__aeabi_f2d
 160 001a 0000     		.align	2
 161              	.LC1:
 162 001c 0A200D20 		.ascii	"\012 \015 %.1f\000"
 162      252E3166 
 162      00
 163 0025 000000   		.text
 164 00be 00BF     		.align	2
 165              		.global	main
 166              		.thumb
 167              		.thumb_func
 169              	main:
 170              	.LFB29:
 171              		.file 2 "../main.c"
   1:../main.c     **** 
   2:../main.c     **** /* Includes ------------------------------------------------------------------*/
   3:../main.c     **** #include "main.h"
   4:../main.c     **** 
   5:../main.c     **** 
   6:../main.c     **** /** @addtogroup STM32F2xx_StdPeriph_Examples
   7:../main.c     ****   * @{
   8:../main.c     ****   */
   9:../main.c     **** 
  10:../main.c     **** /** @addtogroup USART_HyperTerminal_Interrupt
  11:../main.c     ****   * @{
  12:../main.c     ****   */
  13:../main.c     **** 
  14:../main.c     **** /* Private typedef -----------------------------------------------------------*/
  15:../main.c     **** /* Private define ------------------------------------------------------------*/
  16:../main.c     **** /* Private macro -------------------------------------------------------------*/
  17:../main.c     **** /* Private variables ---------------------------------------------------------*/
  18:../main.c     **** USART_InitTypeDef USART_InitStructure;
  19:../main.c     **** char Message[256];
  20:../main.c     **** static __IO uint32_t TimingDelay;
  21:../main.c     **** 
  22:../main.c     **** //extern  uint32_t 	ADCConvertedValue;
  23:../main.c     **** 
  24:../main.c     **** /* Private function prototypes -----------------------------------------------*/
  25:../main.c     **** void NVIC_Config(void);
  26:../main.c     **** 
  27:../main.c     **** /* Private functions ---------------------------------------------------------*/
  28:../main.c     **** 
  29:../main.c     **** /**
  30:../main.c     ****   * @brief   Main program
  31:../main.c     ****   * @param  None
  32:../main.c     ****   * @retval None
  33:../main.c     ****   */
  34:../main.c     **** int main(void)
  35:../main.c     **** {
 172              		.loc 2 35 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 32
 175              		@ frame_needed = 1, uses_anonymous_args = 0
 176 00c0 B0B5     		push	{r4, r5, r7, lr}
 177              	.LCFI6:
 178              		.cfi_def_cfa_offset 16
 179              		.cfi_offset 14, -4
 180              		.cfi_offset 7, -8
 181              		.cfi_offset 5, -12
 182              		.cfi_offset 4, -16
 183 00c2 88B0     		sub	sp, sp, #32
 184              	.LCFI7:
 185              		.cfi_def_cfa_offset 48
 186 00c4 00AF     		add	r7, sp, #0
 187              	.LCFI8:
 188              		.cfi_def_cfa_register 7
  36:../main.c     **** 
  37:../main.c     ****   GPIO_InitTypeDef  GPIO_InitStructure;
  38:../main.c     ****   RCC_ClocksTypeDef RCC_Clocks;
  39:../main.c     ****   float temp;
  40:../main.c     **** 
  41:../main.c     ****   /* NVIC configuration */
  42:../main.c     ****   NVIC_Config();
 189              		.loc 2 42 0
 190 00c6 FFF7FEFF 		bl	NVIC_Config
  43:../main.c     **** 
  44:../main.c     **** 
  45:../main.c     ****   /* Enable the SHUTDOWN/PC13 Clock */
  46:../main.c     ****   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 191              		.loc 2 46 0
 192 00ca 4FF00400 		mov	r0, #4
 193 00ce 4FF00101 		mov	r1, #1
 194 00d2 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  47:../main.c     **** 
  48:../main.c     ****   /* Configure the GPIO_LED pin */
  49:../main.c     ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 195              		.loc 2 49 0
 196 00d6 4FF40053 		mov	r3, #8192
 197 00da 7B61     		str	r3, [r7, #20]
  50:../main.c     ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 198              		.loc 2 50 0
 199 00dc 4FF00103 		mov	r3, #1
 200 00e0 3B76     		strb	r3, [r7, #24]
  51:../main.c     ****   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 201              		.loc 2 51 0
 202 00e2 4FF00003 		mov	r3, #0
 203 00e6 BB76     		strb	r3, [r7, #26]
  52:../main.c     ****   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 204              		.loc 2 52 0
 205 00e8 4FF00003 		mov	r3, #0
 206 00ec FB76     		strb	r3, [r7, #27]
  53:../main.c     ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 207              		.loc 2 53 0
 208 00ee 4FF00203 		mov	r3, #2
 209 00f2 7B76     		strb	r3, [r7, #25]
  54:../main.c     ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
 210              		.loc 2 54 0
 211 00f4 07F11403 		add	r3, r7, #20
 212 00f8 4FF40060 		mov	r0, #2048
 213 00fc C4F20200 		movt	r0, 16386
 214 0100 1946     		mov	r1, r3
 215 0102 FFF7FEFF 		bl	GPIO_Init
  55:../main.c     **** 
  56:../main.c     **** 
  57:../main.c     ****   /* Enable the SHUTDOWN/PC13 Clock */
  58:../main.c     ****   GPIO_ResetBits(GPIOC,GPIO_Pin_13);
 216              		.loc 2 58 0
 217 0106 4FF40060 		mov	r0, #2048
 218 010a C4F20200 		movt	r0, 16386
 219 010e 4FF40051 		mov	r1, #8192
 220 0112 FFF7FEFF 		bl	GPIO_ResetBits
  59:../main.c     **** 
  60:../main.c     **** 
  61:../main.c     ****   STM_EVAL_LEDInit(LED1);
 221              		.loc 2 61 0
 222 0116 4FF00000 		mov	r0, #0
 223 011a FFF7FEFF 		bl	STM_EVAL_LEDInit
  62:../main.c     ****   ADC1_ChTempSensor_Init();
 224              		.loc 2 62 0
 225 011e FFF7FEFF 		bl	ADC1_ChTempSensor_Init
  63:../main.c     ****   /* Start ADC1 Software Conversion */
  64:../main.c     ****   ADC_SoftwareStartConv(ADC1);
 226              		.loc 2 64 0
 227 0122 4FF40050 		mov	r0, #8192
 228 0126 C4F20100 		movt	r0, 16385
 229 012a FFF7FEFF 		bl	ADC_SoftwareStartConv
  65:../main.c     **** 
  66:../main.c     ****   TIM6_Config();
 230              		.loc 2 66 0
 231 012e FFF7FEFF 		bl	TIM6_Config
  67:../main.c     **** 
  68:../main.c     ****   DAC_Ch1_EscalatorConfig();
 232              		.loc 2 68 0
 233 0132 FFF7FEFF 		bl	DAC_Ch1_EscalatorConfig
  69:../main.c     **** 
  70:../main.c     ****   RCC_GetClocksFreq(&RCC_Clocks);
 234              		.loc 2 70 0
 235 0136 07F10403 		add	r3, r7, #4
 236 013a 1846     		mov	r0, r3
 237 013c FFF7FEFF 		bl	RCC_GetClocksFreq
  71:../main.c     ****   SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 238              		.loc 2 71 0
 239 0140 BA68     		ldr	r2, [r7, #8]
 240 0142 44F6D353 		movw	r3, #19923
 241 0146 C1F26203 		movt	r3, 4194
 242 014a A3FB0213 		umull	r1, r3, r3, r2
 243 014e 4FEA9313 		lsr	r3, r3, #6
 244 0152 1846     		mov	r0, r3
 245 0154 FFF782FF 		bl	SysTick_Config
  72:../main.c     **** 
  73:../main.c     **** 
  74:../main.c     **** /* USARTx configuration ------------------------------------------------------*/
  75:../main.c     ****   /* USARTx configured as follow:
  76:../main.c     ****         - BaudRate = 9600 baud
  77:../main.c     ****         - Word Length = 8 Bits
  78:../main.c     ****         - Two Stop Bit
  79:../main.c     ****         - Odd parity
  80:../main.c     ****         - Hardware flow control disabled (RTS and CTS signals)
  81:../main.c     ****         - Receive and transmit enabled
  82:../main.c     ****   */
  83:../main.c     ****   USART_InitStructure.USART_BaudRate = 9600;
 246              		.loc 2 83 0
 247 0158 40F20003 		movw	r3, #:lower16:USART_InitStructure
 248 015c C0F20003 		movt	r3, #:upper16:USART_InitStructure
 249 0160 4FF41652 		mov	r2, #9600
 250 0164 1A60     		str	r2, [r3, #0]
  84:../main.c     ****   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 251              		.loc 2 84 0
 252 0166 40F20003 		movw	r3, #:lower16:USART_InitStructure
 253 016a C0F20003 		movt	r3, #:upper16:USART_InitStructure
 254 016e 4FF00002 		mov	r2, #0
 255 0172 9A80     		strh	r2, [r3, #4]	@ movhi
  85:../main.c     ****   USART_InitStructure.USART_StopBits = USART_StopBits_1;
 256              		.loc 2 85 0
 257 0174 40F20003 		movw	r3, #:lower16:USART_InitStructure
 258 0178 C0F20003 		movt	r3, #:upper16:USART_InitStructure
 259 017c 4FF00002 		mov	r2, #0
 260 0180 DA80     		strh	r2, [r3, #6]	@ movhi
  86:../main.c     ****   USART_InitStructure.USART_Parity = USART_Parity_No;
 261              		.loc 2 86 0
 262 0182 40F20003 		movw	r3, #:lower16:USART_InitStructure
 263 0186 C0F20003 		movt	r3, #:upper16:USART_InitStructure
 264 018a 4FF00002 		mov	r2, #0
 265 018e 1A81     		strh	r2, [r3, #8]	@ movhi
  87:../main.c     ****   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 266              		.loc 2 87 0
 267 0190 40F20003 		movw	r3, #:lower16:USART_InitStructure
 268 0194 C0F20003 		movt	r3, #:upper16:USART_InitStructure
 269 0198 4FF00002 		mov	r2, #0
 270 019c 9A81     		strh	r2, [r3, #12]	@ movhi
  88:../main.c     ****   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 271              		.loc 2 88 0
 272 019e 40F20003 		movw	r3, #:lower16:USART_InitStructure
 273 01a2 C0F20003 		movt	r3, #:upper16:USART_InitStructure
 274 01a6 4FF00C02 		mov	r2, #12
 275 01aa 5A81     		strh	r2, [r3, #10]	@ movhi
  89:../main.c     **** 
  90:../main.c     ****   USART3_buffer_Init();
 276              		.loc 2 90 0
 277 01ac FFF7FEFF 		bl	USART3_buffer_Init
  91:../main.c     ****   STM_EVAL_COMInit(COM1, &USART_InitStructure);
 278              		.loc 2 91 0
 279 01b0 4FF00000 		mov	r0, #0
 280 01b4 40F20001 		movw	r1, #:lower16:USART_InitStructure
 281 01b8 C0F20001 		movt	r1, #:upper16:USART_InitStructure
 282 01bc FFF7FEFF 		bl	STM_EVAL_COMInit
  92:../main.c     **** 
  93:../main.c     **** 
  94:../main.c     ****   //USART3_SendChar(0x41);
  95:../main.c     ****   //USART_ITConfig(EVAL_COM1, USART_IT_TC, ENABLE);
  96:../main.c     ****   USART_ITConfig(EVAL_COM1, USART_IT_RXNE, ENABLE);
 283              		.loc 2 96 0
 284 01c0 4FF49040 		mov	r0, #18432
 285 01c4 C4F20000 		movt	r0, 16384
 286 01c8 40F22551 		movw	r1, #1317
 287 01cc 4FF00102 		mov	r2, #1
 288 01d0 FFF7FEFF 		bl	USART_ITConfig
  97:../main.c     ****   USART_ITConfig(EVAL_COM1, USART_IT_TXE, ENABLE);
 289              		.loc 2 97 0
 290 01d4 4FF49040 		mov	r0, #18432
 291 01d8 C4F20000 		movt	r0, 16384
 292 01dc 40F22771 		movw	r1, #1831
 293 01e0 4FF00102 		mov	r2, #1
 294 01e4 FFF7FEFF 		bl	USART_ITConfig
  98:../main.c     **** 
  99:../main.c     **** 
 100:../main.c     **** 
 101:../main.c     **** 	USART3_SendString((char *)Message,sprintf(Message,"\n \r Temperature sensor : "));
 295              		.loc 2 101 0
 296 01e8 40F20002 		movw	r2, #:lower16:Message
 297 01ec C0F20002 		movt	r2, #:upper16:Message
 298 01f0 40F20003 		movw	r3, #:lower16:.LC0
 299 01f4 C0F20003 		movt	r3, #:upper16:.LC0
 300 01f8 1446     		mov	r4, r2
 301 01fa 1D46     		mov	r5, r3
 302 01fc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 303 01fe 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 304 0200 95E80700 		ldmia	r5, {r0, r1, r2}
 305 0204 03C4     		stmia	r4!, {r0, r1}
 306 0206 2280     		strh	r2, [r4, #0]	@ movhi
 307 0208 40F20000 		movw	r0, #:lower16:Message
 308 020c C0F20000 		movt	r0, #:upper16:Message
 309 0210 4FF01901 		mov	r1, #25
 310 0214 FFF7FEFF 		bl	USART3_SendString
 311              	.L8:
 102:../main.c     **** 
 103:../main.c     **** 	//NVIC_EnableIRQ(USART3_IRQn);
 104:../main.c     **** 
 105:../main.c     **** 
 106:../main.c     ****   while (1)
 107:../main.c     ****   {
 108:../main.c     **** 
 109:../main.c     ****    Delay(1000);
 312              		.loc 2 109 0 discriminator 1
 313 0218 4FF47A70 		mov	r0, #1000
 314 021c FFF7FEFF 		bl	Delay
 110:../main.c     **** 
 111:../main.c     ****    STM_EVAL_LEDToggle(LED1);
 315              		.loc 2 111 0 discriminator 1
 316 0220 4FF00000 		mov	r0, #0
 317 0224 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 112:../main.c     **** 
 113:../main.c     **** 
 114:../main.c     ****    temp= (((3.3/4096)*(ADCConvertedValue >> 4))-0.76)/(0.0025)+25;
 318              		.loc 2 114 0 discriminator 1
 319 0228 40F20003 		movw	r3, #:lower16:ADCConvertedValue
 320 022c C0F20003 		movt	r3, #:upper16:ADCConvertedValue
 321 0230 1B68     		ldr	r3, [r3, #0]
 322 0232 4FEA1313 		lsr	r3, r3, #4
 323 0236 1846     		mov	r0, r3
 324 0238 FFF7FEFF 		bl	__aeabi_ui2d
 325 023c 0246     		mov	r2, r0
 326 023e 0B46     		mov	r3, r1
 327 0240 1046     		mov	r0, r2
 328 0242 1946     		mov	r1, r3
 329 0244 22A3     		adr	r3, .L9
 330 0246 D3E90023 		ldrd	r2, [r3]
 331 024a FFF7FEFF 		bl	__aeabi_dmul
 332 024e 0246     		mov	r2, r0
 333 0250 0B46     		mov	r3, r1
 334 0252 1046     		mov	r0, r2
 335 0254 1946     		mov	r1, r3
 336 0256 20A3     		adr	r3, .L9+8
 337 0258 D3E90023 		ldrd	r2, [r3]
 338 025c FFF7FEFF 		bl	__aeabi_dsub
 339 0260 0246     		mov	r2, r0
 340 0262 0B46     		mov	r3, r1
 341 0264 1046     		mov	r0, r2
 342 0266 1946     		mov	r1, r3
 343 0268 1DA3     		adr	r3, .L9+16
 344 026a D3E90023 		ldrd	r2, [r3]
 345 026e FFF7FEFF 		bl	__aeabi_ddiv
 346 0272 0246     		mov	r2, r0
 347 0274 0B46     		mov	r3, r1
 348 0276 1046     		mov	r0, r2
 349 0278 1946     		mov	r1, r3
 350 027a 4FF00002 		mov	r2, #0
 351 027e 4FF08043 		mov	r3, #1073741824
 352 0282 03F56413 		add	r3, r3, #3735552
 353 0286 FFF7FEFF 		bl	__aeabi_dadd
 354 028a 0246     		mov	r2, r0
 355 028c 0B46     		mov	r3, r1
 356 028e 1046     		mov	r0, r2
 357 0290 1946     		mov	r1, r3
 358 0292 FFF7FEFF 		bl	__aeabi_d2f
 359 0296 0346     		mov	r3, r0
 360 0298 FB61     		str	r3, [r7, #28]	@ float
 115:../main.c     **** 
 116:../main.c     ****    USART3_SendString((char *)Message,sprintf(Message,"\n \r %.1f",temp));
 361              		.loc 2 116 0 discriminator 1
 362 029a F869     		ldr	r0, [r7, #28]	@ float
 363 029c FFF7FEFF 		bl	__aeabi_f2d
 364 02a0 0246     		mov	r2, r0
 365 02a2 0B46     		mov	r3, r1
 366 02a4 40F20000 		movw	r0, #:lower16:Message
 367 02a8 C0F20000 		movt	r0, #:upper16:Message
 368 02ac 40F20001 		movw	r1, #:lower16:.LC1
 369 02b0 C0F20001 		movt	r1, #:upper16:.LC1
 370 02b4 FFF7FEFF 		bl	sprintf
 371 02b8 0346     		mov	r3, r0
 372 02ba 40F20000 		movw	r0, #:lower16:Message
 373 02be C0F20000 		movt	r0, #:upper16:Message
 374 02c2 1946     		mov	r1, r3
 375 02c4 FFF7FEFF 		bl	USART3_SendString
 117:../main.c     **** 
 118:../main.c     **** 
 119:../main.c     ****   }
 376              		.loc 2 119 0 discriminator 1
 377 02c8 A6E7     		b	.L8
 378              	.L10:
 379 02ca 00BFAFF3 		.align	3
 379      0080
 380              	.L9:
 381 02d0 66666666 		.word	1717986918
 382 02d4 66664A3F 		.word	1061840486
 383 02d8 52B81E85 		.word	-2061584302
 384 02dc EB51E83F 		.word	1072189931
 385 02e0 7B14AE47 		.word	1202590843
 386 02e4 E17A643F 		.word	1063549665
 387              		.cfi_endproc
 388              	.LFE29:
 390              		.align	2
 391              		.global	NVIC_Config
 392              		.thumb
 393              		.thumb_func
 395              	NVIC_Config:
 396              	.LFB30:
 120:../main.c     **** }
 121:../main.c     **** 
 122:../main.c     **** /**
 123:../main.c     ****   * @brief  Configures the nested vectored interrupt controller.
 124:../main.c     ****   * @param  None
 125:../main.c     ****   * @retval None
 126:../main.c     ****   */
 127:../main.c     **** void NVIC_Config(void)
 128:../main.c     **** {
 397              		.loc 2 128 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 8
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 02e8 80B5     		push	{r7, lr}
 402              	.LCFI9:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 14, -4
 405              		.cfi_offset 7, -8
 406 02ea 82B0     		sub	sp, sp, #8
 407              	.LCFI10:
 408              		.cfi_def_cfa_offset 16
 409 02ec 00AF     		add	r7, sp, #0
 410              	.LCFI11:
 411              		.cfi_def_cfa_register 7
 129:../main.c     ****   NVIC_InitTypeDef NVIC_InitStructure;
 130:../main.c     **** 
 131:../main.c     ****   /* Enable the USARTx Interrupt */
 132:../main.c     ****   NVIC_InitStructure.NVIC_IRQChannel = EVAL_COM1_IRQn;
 412              		.loc 2 132 0
 413 02ee 4FF02703 		mov	r3, #39
 414 02f2 3B71     		strb	r3, [r7, #4]
 133:../main.c     ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 415              		.loc 2 133 0
 416 02f4 4FF00003 		mov	r3, #0
 417 02f8 7B71     		strb	r3, [r7, #5]
 134:../main.c     ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 418              		.loc 2 134 0
 419 02fa 4FF00003 		mov	r3, #0
 420 02fe BB71     		strb	r3, [r7, #6]
 135:../main.c     ****   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 421              		.loc 2 135 0
 422 0300 4FF00103 		mov	r3, #1
 423 0304 FB71     		strb	r3, [r7, #7]
 136:../main.c     ****   NVIC_Init(&NVIC_InitStructure);
 424              		.loc 2 136 0
 425 0306 07F10403 		add	r3, r7, #4
 426 030a 1846     		mov	r0, r3
 427 030c FFF7FEFF 		bl	NVIC_Init
 137:../main.c     **** }
 428              		.loc 2 137 0
 429 0310 07F10807 		add	r7, r7, #8
 430 0314 BD46     		mov	sp, r7
 431 0316 80BD     		pop	{r7, pc}
 432              		.cfi_endproc
 433              	.LFE30:
 435              		.align	2
 436              		.global	Delay
 437              		.thumb
 438              		.thumb_func
 440              	Delay:
 441              	.LFB31:
 138:../main.c     **** 
 139:../main.c     **** /**
 140:../main.c     ****   * @brief  Inserts a delay time.
 141:../main.c     ****   * @param  nTime: specifies the delay time length, in 10 ms.
 142:../main.c     ****   * @retval None
 143:../main.c     ****   */
 144:../main.c     **** void Delay(__IO uint32_t nTime)
 145:../main.c     **** {
 442              		.loc 2 145 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447 0318 80B4     		push	{r7}
 448              	.LCFI12:
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 7, -4
 451 031a 83B0     		sub	sp, sp, #12
 452              	.LCFI13:
 453              		.cfi_def_cfa_offset 16
 454 031c 00AF     		add	r7, sp, #0
 455              	.LCFI14:
 456              		.cfi_def_cfa_register 7
 457 031e 7860     		str	r0, [r7, #4]
 146:../main.c     ****   TimingDelay = nTime;
 458              		.loc 2 146 0
 459 0320 7A68     		ldr	r2, [r7, #4]
 460 0322 40F20003 		movw	r3, #:lower16:TimingDelay
 461 0326 C0F20003 		movt	r3, #:upper16:TimingDelay
 462 032a 1A60     		str	r2, [r3, #0]
 147:../main.c     **** 
 148:../main.c     ****   while(TimingDelay != 0);
 463              		.loc 2 148 0
 464 032c 00BF     		nop
 465              	.L13:
 466              		.loc 2 148 0 is_stmt 0 discriminator 1
 467 032e 40F20003 		movw	r3, #:lower16:TimingDelay
 468 0332 C0F20003 		movt	r3, #:upper16:TimingDelay
 469 0336 1B68     		ldr	r3, [r3, #0]
 470 0338 002B     		cmp	r3, #0
 471 033a F8D1     		bne	.L13
 149:../main.c     **** }
 472              		.loc 2 149 0 is_stmt 1
 473 033c 07F10C07 		add	r7, r7, #12
 474 0340 BD46     		mov	sp, r7
 475 0342 80BC     		pop	{r7}
 476 0344 7047     		bx	lr
 477              		.cfi_endproc
 478              	.LFE31:
 480 0346 00BF     		.align	2
 481              		.global	TimingDelay_Decrement
 482              		.thumb
 483              		.thumb_func
 485              	TimingDelay_Decrement:
 486              	.LFB32:
 150:../main.c     **** 
 151:../main.c     **** /**
 152:../main.c     ****   * @brief  Decrements the TimingDelay variable.
 153:../main.c     ****   * @param  None
 154:../main.c     ****   * @retval None
 155:../main.c     ****   */
 156:../main.c     **** void TimingDelay_Decrement(void)
 157:../main.c     **** {
 487              		.loc 2 157 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492 0348 80B4     		push	{r7}
 493              	.LCFI15:
 494              		.cfi_def_cfa_offset 4
 495              		.cfi_offset 7, -4
 496 034a 00AF     		add	r7, sp, #0
 497              	.LCFI16:
 498              		.cfi_def_cfa_register 7
 158:../main.c     ****   if (TimingDelay != 0x00)
 499              		.loc 2 158 0
 500 034c 40F20003 		movw	r3, #:lower16:TimingDelay
 501 0350 C0F20003 		movt	r3, #:upper16:TimingDelay
 502 0354 1B68     		ldr	r3, [r3, #0]
 503 0356 002B     		cmp	r3, #0
 504 0358 0BD0     		beq	.L14
 159:../main.c     ****   {
 160:../main.c     ****     TimingDelay--;
 505              		.loc 2 160 0
 506 035a 40F20003 		movw	r3, #:lower16:TimingDelay
 507 035e C0F20003 		movt	r3, #:upper16:TimingDelay
 508 0362 1B68     		ldr	r3, [r3, #0]
 509 0364 03F1FF32 		add	r2, r3, #-1
 510 0368 40F20003 		movw	r3, #:lower16:TimingDelay
 511 036c C0F20003 		movt	r3, #:upper16:TimingDelay
 512 0370 1A60     		str	r2, [r3, #0]
 513              	.L14:
 161:../main.c     ****   }
 162:../main.c     **** }
 514              		.loc 2 162 0
 515 0372 BD46     		mov	sp, r7
 516 0374 80BC     		pop	{r7}
 517 0376 7047     		bx	lr
 518              		.cfi_endproc
 519              	.LFE32:
 521              	.Letext0:
 522              		.file 3 "C:\\workspace\\te_stm32f207_simple\\system/stm32f2xx.h"
 523              		.file 4 "c:/cad/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 524              		.file 5 "C:\\workspace\\te_stm32f207_simple\\STM32F2xx_StdPeriph_Driver\\inc/stm32f2xx_gpio.h"
 525              		.file 6 "C:\\workspace\\te_stm32f207_simple\\STM32F2xx_StdPeriph_Driver\\inc/stm32f2xx_rcc.h"
 526              		.file 7 "C:\\workspace\\te_stm32f207_simple\\STM32F2xx_StdPeriph_Driver\\inc/stm32f2xx_usart.h"
 527              		.file 8 "C:\\workspace\\te_stm32f207_simple\\STM32F2xx_StdPeriph_Driver\\inc/misc.h"
 528              		.file 9 "C:\\workspace\\te_stm32f207_simple\\sources/TE_STM32F207.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:17     .text:00000000 $t
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:21     .text:00000000 NVIC_SetPriority
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:83     .text:0000005c SysTick_Config
                            *COM*:00000004 ADCConvertedValue
                            *COM*:00000010 USART_InitStructure
                            *COM*:00000100 Message
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:146    .bss:00000000 $d
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:147    .bss:00000000 TimingDelay
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:150    .rodata:00000000 $d
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:151    .rodata:00000000 .LC0
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:161    .rodata:0000001c .LC1
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:169    .text:000000c0 main
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:395    .text:000002e8 NVIC_Config
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:440    .text:00000318 Delay
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:381    .text:000002d0 $d
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:390    .text:000002e8 $t
C:\Users\IARISC~1\AppData\Local\Temp\ccz3lhVf.s:485    .text:00000348 TimingDelay_Decrement
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_ddiv
__aeabi_dadd
__aeabi_d2f
__aeabi_f2d
RCC_AHB1PeriphClockCmd
GPIO_Init
GPIO_ResetBits
STM_EVAL_LEDInit
ADC1_ChTempSensor_Init
ADC_SoftwareStartConv
TIM6_Config
DAC_Ch1_EscalatorConfig
RCC_GetClocksFreq
USART3_buffer_Init
STM_EVAL_COMInit
USART_ITConfig
USART3_SendString
STM_EVAL_LEDToggle
sprintf
NVIC_Init
