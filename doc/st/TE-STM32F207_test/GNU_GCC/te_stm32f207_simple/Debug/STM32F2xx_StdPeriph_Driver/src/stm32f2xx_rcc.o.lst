   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.data
  18              		.align	2
  21              	APBAHBPrescTable:
  22 0000 00       		.byte	0
  23 0001 00       		.byte	0
  24 0002 00       		.byte	0
  25 0003 00       		.byte	0
  26 0004 01       		.byte	1
  27 0005 02       		.byte	2
  28 0006 03       		.byte	3
  29 0007 04       		.byte	4
  30 0008 01       		.byte	1
  31 0009 02       		.byte	2
  32 000a 03       		.byte	3
  33 000b 04       		.byte	4
  34 000c 06       		.byte	6
  35 000d 07       		.byte	7
  36 000e 08       		.byte	8
  37 000f 09       		.byte	9
  38              		.text
  39              		.align	2
  40              		.global	RCC_DeInit
  41              		.thumb
  42              		.thumb_func
  44              	RCC_DeInit:
  45              	.LFB29:
  46              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c"
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @file    stm32f2xx_rcc.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Peripheral clocks configuration
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Interrupts and flags management
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  @verbatim
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *               
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          ===================================================================
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                               RCC specific features
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          ===================================================================
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *        
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                        
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  @endverbatim
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ******************************************************************************
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @attention
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ******************************************************************************
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #include "stm32f2xx_rcc.h"
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC 
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief RCC driver modules
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */ 
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* --- CR Register ---*/
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of HSION bit */
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define HSION_BitNumber           0x00
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of CSSON bit */
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of PLLON bit */
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* --- CFGR Register ---*/
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* --- BDCR Register ---*/
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of BDRST bit */
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* --- CSR Register ---*/
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Alias word address of LSION bit */
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define LSION_BitNumber           0x00
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* CFGR register bit mask */
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* RCC Flag Mask */
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* BDCR register base address */
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */ 
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @verbatim   
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================  
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      the PLL as System clock source.
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      clock source.
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      The interrupt is linked to the Cortex-M3 NMI (Non-Maskable Interrupt) 
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      exception vector.   
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @endverbatim
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - All interrupts disabled
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - Peripheral clocks
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  None
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_DeInit(void)
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
  47              		.loc 1 197 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 1, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52 0000 80B4     		push	{r7}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 4
  55              		.cfi_offset 7, -4
  56 0002 00AF     		add	r7, sp, #0
  57              	.LCFI1:
  58              		.cfi_def_cfa_register 7
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set HSION bit */
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  59              		.loc 1 199 0
  60 0004 4FF46053 		mov	r3, #14336
  61 0008 C4F20203 		movt	r3, 16386
  62 000c 4FF46052 		mov	r2, #14336
  63 0010 C4F20202 		movt	r2, 16386
  64 0014 1268     		ldr	r2, [r2, #0]
  65 0016 42F00102 		orr	r2, r2, #1
  66 001a 1A60     		str	r2, [r3, #0]
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset CFGR register */
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = 0x00000000;
  67              		.loc 1 202 0
  68 001c 4FF46053 		mov	r3, #14336
  69 0020 C4F20203 		movt	r3, 16386
  70 0024 4FF00002 		mov	r2, #0
  71 0028 9A60     		str	r2, [r3, #8]
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  72              		.loc 1 205 0
  73 002a 4FF46053 		mov	r3, #14336
  74 002e C4F20203 		movt	r3, 16386
  75 0032 4FF46052 		mov	r2, #14336
  76 0036 C4F20202 		movt	r2, 16386
  77 003a 1268     		ldr	r2, [r2, #0]
  78 003c 22F08472 		bic	r2, r2, #17301504
  79 0040 22F48032 		bic	r2, r2, #65536
  80 0044 1A60     		str	r2, [r3, #0]
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset PLLCFGR register */
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  81              		.loc 1 208 0
  82 0046 4FF46053 		mov	r3, #14336
  83 004a C4F20203 		movt	r3, 16386
  84 004e 43F21002 		movw	r2, #12304
  85 0052 C2F20042 		movt	r2, 9216
  86 0056 5A60     		str	r2, [r3, #4]
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset HSEBYP bit */
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  87              		.loc 1 211 0
  88 0058 4FF46053 		mov	r3, #14336
  89 005c C4F20203 		movt	r3, 16386
  90 0060 4FF46052 		mov	r2, #14336
  91 0064 C4F20202 		movt	r2, 16386
  92 0068 1268     		ldr	r2, [r2, #0]
  93 006a 22F48022 		bic	r2, r2, #262144
  94 006e 1A60     		str	r2, [r3, #0]
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Disable all interrupts */
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CIR = 0x00000000;
  95              		.loc 1 214 0
  96 0070 4FF46053 		mov	r3, #14336
  97 0074 C4F20203 		movt	r3, 16386
  98 0078 4FF00002 		mov	r2, #0
  99 007c DA60     		str	r2, [r3, #12]
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 100              		.loc 1 215 0
 101 007e BD46     		mov	sp, r7
 102 0080 80BC     		pop	{r7}
 103 0082 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE29:
 107              		.align	2
 108              		.global	RCC_HSEConfig
 109              		.thumb
 110              		.thumb_func
 112              	RCC_HSEConfig:
 113              	.LFB30:
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         function.    
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 114              		.loc 1 238 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 8
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 0084 80B4     		push	{r7}
 120              	.LCFI2:
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 7, -4
 123 0086 83B0     		sub	sp, sp, #12
 124              	.LCFI3:
 125              		.cfi_def_cfa_offset 16
 126 0088 00AF     		add	r7, sp, #0
 127              	.LCFI4:
 128              		.cfi_def_cfa_register 7
 129 008a 0346     		mov	r3, r0
 130 008c FB71     		strb	r3, [r7, #7]
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 131              		.loc 1 243 0
 132 008e 43F60203 		movw	r3, #14338
 133 0092 C4F20203 		movt	r3, 16386
 134 0096 4FF00002 		mov	r2, #0
 135 009a 1A70     		strb	r2, [r3, #0]
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 136              		.loc 1 246 0
 137 009c 43F60203 		movw	r3, #14338
 138 00a0 C4F20203 		movt	r3, 16386
 139 00a4 FA79     		ldrb	r2, [r7, #7]
 140 00a6 1A70     		strb	r2, [r3, #0]
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 141              		.loc 1 247 0
 142 00a8 07F10C07 		add	r7, r7, #12
 143 00ac BD46     		mov	sp, r7
 144 00ae 80BC     		pop	{r7}
 145 00b0 7047     		bx	lr
 146              		.cfi_endproc
 147              	.LFE30:
 149 00b2 00BF     		.align	2
 150              		.global	RCC_WaitForHSEStartUp
 151              		.thumb
 152              		.thumb_func
 154              	RCC_WaitForHSEStartUp:
 155              	.LFB31:
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f2xx.h file. You can tailor it depending
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  None
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 156              		.loc 1 262 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 8
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 00b4 80B5     		push	{r7, lr}
 161              	.LCFI5:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 14, -4
 164              		.cfi_offset 7, -8
 165 00b6 82B0     		sub	sp, sp, #8
 166              	.LCFI6:
 167              		.cfi_def_cfa_offset 16
 168 00b8 00AF     		add	r7, sp, #0
 169              	.LCFI7:
 170              		.cfi_def_cfa_register 7
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 171              		.loc 1 263 0
 172 00ba 4FF00003 		mov	r3, #0
 173 00be 3B60     		str	r3, [r7, #0]
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ErrorStatus status = ERROR;
 174              		.loc 1 264 0
 175 00c0 4FF00003 		mov	r3, #0
 176 00c4 FB71     		strb	r3, [r7, #7]
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   FlagStatus hsestatus = RESET;
 177              		.loc 1 265 0
 178 00c6 4FF00003 		mov	r3, #0
 179 00ca BB71     		strb	r3, [r7, #6]
 180              	.L5:
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   do
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 181              		.loc 1 269 0 discriminator 1
 182 00cc 4FF03100 		mov	r0, #49
 183 00d0 FFF7FEFF 		bl	RCC_GetFlagStatus
 184 00d4 0346     		mov	r3, r0
 185 00d6 BB71     		strb	r3, [r7, #6]
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     startupcounter++;
 186              		.loc 1 270 0 discriminator 1
 187 00d8 3B68     		ldr	r3, [r7, #0]
 188 00da 03F10103 		add	r3, r3, #1
 189 00de 3B60     		str	r3, [r7, #0]
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 190              		.loc 1 271 0 discriminator 1
 191 00e0 3B68     		ldr	r3, [r7, #0]
 192 00e2 B3F5A06F 		cmp	r3, #1280
 193 00e6 02D0     		beq	.L4
 194 00e8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 195 00ea 002B     		cmp	r3, #0
 196 00ec EED0     		beq	.L5
 197              	.L4:
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 198              		.loc 1 273 0
 199 00ee 4FF03100 		mov	r0, #49
 200 00f2 FFF7FEFF 		bl	RCC_GetFlagStatus
 201 00f6 0346     		mov	r3, r0
 202 00f8 002B     		cmp	r3, #0
 203 00fa 03D0     		beq	.L6
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     status = SUCCESS;
 204              		.loc 1 275 0
 205 00fc 4FF00103 		mov	r3, #1
 206 0100 FB71     		strb	r3, [r7, #7]
 207 0102 02E0     		b	.L7
 208              	.L6:
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     status = ERROR;
 209              		.loc 1 279 0
 210 0104 4FF00003 		mov	r3, #0
 211 0108 FB71     		strb	r3, [r7, #7]
 212              	.L7:
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   return (status);
 213              		.loc 1 281 0
 214 010a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 215              		.loc 1 282 0
 216 010c 1846     		mov	r0, r3
 217 010e 07F10807 		add	r7, r7, #8
 218 0112 BD46     		mov	sp, r7
 219 0114 80BD     		pop	{r7, pc}
 220              		.cfi_endproc
 221              	.LFE31:
 223 0116 00BF     		.align	2
 224              		.global	RCC_AdjustHSICalibrationValue
 225              		.thumb
 226              		.thumb_func
 228              	RCC_AdjustHSICalibrationValue:
 229              	.LFB32:
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 230              		.loc 1 293 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 16
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235 0118 80B4     		push	{r7}
 236              	.LCFI8:
 237              		.cfi_def_cfa_offset 4
 238              		.cfi_offset 7, -4
 239 011a 85B0     		sub	sp, sp, #20
 240              	.LCFI9:
 241              		.cfi_def_cfa_offset 24
 242 011c 00AF     		add	r7, sp, #0
 243              	.LCFI10:
 244              		.cfi_def_cfa_register 7
 245 011e 0346     		mov	r3, r0
 246 0120 FB71     		strb	r3, [r7, #7]
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 247              		.loc 1 294 0
 248 0122 4FF00003 		mov	r3, #0
 249 0126 FB60     		str	r3, [r7, #12]
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CR;
 250              		.loc 1 298 0
 251 0128 4FF46053 		mov	r3, #14336
 252 012c C4F20203 		movt	r3, 16386
 253 0130 1B68     		ldr	r3, [r3, #0]
 254 0132 FB60     		str	r3, [r7, #12]
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 255              		.loc 1 301 0
 256 0134 FB68     		ldr	r3, [r7, #12]
 257 0136 23F0F803 		bic	r3, r3, #248
 258 013a FB60     		str	r3, [r7, #12]
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 259              		.loc 1 304 0
 260 013c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 261 013e 4FEAC303 		lsl	r3, r3, #3
 262 0142 FA68     		ldr	r2, [r7, #12]
 263 0144 1343     		orrs	r3, r3, r2
 264 0146 FB60     		str	r3, [r7, #12]
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CR = tmpreg;
 265              		.loc 1 307 0
 266 0148 4FF46053 		mov	r3, #14336
 267 014c C4F20203 		movt	r3, 16386
 268 0150 FA68     		ldr	r2, [r7, #12]
 269 0152 1A60     		str	r2, [r3, #0]
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 270              		.loc 1 308 0
 271 0154 07F11407 		add	r7, r7, #20
 272 0158 BD46     		mov	sp, r7
 273 015a 80BC     		pop	{r7}
 274 015c 7047     		bx	lr
 275              		.cfi_endproc
 276              	.LFE32:
 278 015e 00BF     		.align	2
 279              		.global	RCC_HSICmd
 280              		.thumb
 281              		.thumb_func
 283              	RCC_HSICmd:
 284              	.LFB33:
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         Security System CSS is enabled).             
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         system clock source.  
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         clock cycles.  
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 285              		.loc 1 329 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 8
 288              		@ frame_needed = 1, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290 0160 80B4     		push	{r7}
 291              	.LCFI11:
 292              		.cfi_def_cfa_offset 4
 293              		.cfi_offset 7, -4
 294 0162 83B0     		sub	sp, sp, #12
 295              	.LCFI12:
 296              		.cfi_def_cfa_offset 16
 297 0164 00AF     		add	r7, sp, #0
 298              	.LCFI13:
 299              		.cfi_def_cfa_register 7
 300 0166 0346     		mov	r3, r0
 301 0168 FB71     		strb	r3, [r7, #7]
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 302              		.loc 1 333 0
 303 016a 4FF00003 		mov	r3, #0
 304 016e C4F24723 		movt	r3, 16967
 305 0172 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 306 0174 1A60     		str	r2, [r3, #0]
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 307              		.loc 1 334 0
 308 0176 07F10C07 		add	r7, r7, #12
 309 017a BD46     		mov	sp, r7
 310 017c 80BC     		pop	{r7}
 311 017e 7047     		bx	lr
 312              		.cfi_endproc
 313              	.LFE33:
 315              		.align	2
 316              		.global	RCC_LSEConfig
 317              		.thumb
 318              		.thumb_func
 320              	RCC_LSEConfig:
 321              	.LFB34:
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         (to be done once after reset).  
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 322              		.loc 1 354 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 8
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327 0180 80B4     		push	{r7}
 328              	.LCFI14:
 329              		.cfi_def_cfa_offset 4
 330              		.cfi_offset 7, -4
 331 0182 83B0     		sub	sp, sp, #12
 332              	.LCFI15:
 333              		.cfi_def_cfa_offset 16
 334 0184 00AF     		add	r7, sp, #0
 335              	.LCFI16:
 336              		.cfi_def_cfa_register 7
 337 0186 0346     		mov	r3, r0
 338 0188 FB71     		strb	r3, [r7, #7]
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset LSEON bit */
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 339              		.loc 1 360 0
 340 018a 43F67003 		movw	r3, #14448
 341 018e C4F20203 		movt	r3, 16386
 342 0192 4FF00002 		mov	r2, #0
 343 0196 1A70     		strb	r2, [r3, #0]
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Reset LSEBYP bit */
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 344              		.loc 1 363 0
 345 0198 43F67003 		movw	r3, #14448
 346 019c C4F20203 		movt	r3, 16386
 347 01a0 4FF00002 		mov	r2, #0
 348 01a4 1A70     		strb	r2, [r3, #0]
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   switch (RCC_LSE)
 349              		.loc 1 366 0
 350 01a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 351 01a8 012B     		cmp	r3, #1
 352 01aa 02D0     		beq	.L12
 353 01ac 042B     		cmp	r3, #4
 354 01ae 08D0     		beq	.L13
 355 01b0 0FE0     		b	.L15
 356              	.L12:
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case RCC_LSE_ON:
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       /* Set LSEON bit */
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 357              		.loc 1 370 0
 358 01b2 43F67003 		movw	r3, #14448
 359 01b6 C4F20203 		movt	r3, 16386
 360 01ba 4FF00102 		mov	r2, #1
 361 01be 1A70     		strb	r2, [r3, #0]
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 362              		.loc 1 371 0
 363 01c0 08E0     		b	.L10
 364              	.L13:
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case RCC_LSE_Bypass:
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 365              		.loc 1 374 0
 366 01c2 43F67003 		movw	r3, #14448
 367 01c6 C4F20203 		movt	r3, 16386
 368 01ca 4FF00502 		mov	r2, #5
 369 01ce 1A70     		strb	r2, [r3, #0]
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 370              		.loc 1 375 0
 371 01d0 00E0     		b	.L10
 372              	.L15:
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     default:
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 373              		.loc 1 377 0
 374 01d2 00BF     		nop
 375              	.L10:
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 376              		.loc 1 379 0
 377 01d4 07F10C07 		add	r7, r7, #12
 378 01d8 BD46     		mov	sp, r7
 379 01da 80BC     		pop	{r7}
 380 01dc 7047     		bx	lr
 381              		.cfi_endproc
 382              	.LFE34:
 384 01de 00BF     		.align	2
 385              		.global	RCC_LSICmd
 386              		.thumb
 387              		.thumb_func
 389              	RCC_LSICmd:
 390              	.LFB35:
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         clock cycles. 
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 391              		.loc 1 394 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 01e0 80B4     		push	{r7}
 397              	.LCFI17:
 398              		.cfi_def_cfa_offset 4
 399              		.cfi_offset 7, -4
 400 01e2 83B0     		sub	sp, sp, #12
 401              	.LCFI18:
 402              		.cfi_def_cfa_offset 16
 403 01e4 00AF     		add	r7, sp, #0
 404              	.LCFI19:
 405              		.cfi_def_cfa_register 7
 406 01e6 0346     		mov	r3, r0
 407 01e8 FB71     		strb	r3, [r7, #7]
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 408              		.loc 1 398 0
 409 01ea 4FF46863 		mov	r3, #3712
 410 01ee C4F24723 		movt	r3, 16967
 411 01f2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 412 01f4 1A60     		str	r2, [r3, #0]
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 413              		.loc 1 399 0
 414 01f6 07F10C07 		add	r7, r7, #12
 415 01fa BD46     		mov	sp, r7
 416 01fc 80BC     		pop	{r7}
 417 01fe 7047     		bx	lr
 418              		.cfi_endproc
 419              	.LFE35:
 421              		.align	2
 422              		.global	RCC_PLLConfig
 423              		.thumb
 424              		.thumb_func
 426              	RCC_PLLConfig:
 427              	.LFB36:
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the System clock frequency.
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         correctly.
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 428              		.loc 1 437 0
 429              		.cfi_startproc
 430              		@ args = 4, pretend = 0, frame = 16
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 433 0200 80B4     		push	{r7}
 434              	.LCFI20:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0202 85B0     		sub	sp, sp, #20
 438              	.LCFI21:
 439              		.cfi_def_cfa_offset 24
 440 0204 00AF     		add	r7, sp, #0
 441              	.LCFI22:
 442              		.cfi_def_cfa_register 7
 443 0206 F860     		str	r0, [r7, #12]
 444 0208 B960     		str	r1, [r7, #8]
 445 020a 7A60     		str	r2, [r7, #4]
 446 020c 3B60     		str	r3, [r7, #0]
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 447              		.loc 1 445 0
 448 020e 4FF46053 		mov	r3, #14336
 449 0212 C4F20203 		movt	r3, 16386
 450 0216 7A68     		ldr	r2, [r7, #4]
 451 0218 4FEA8211 		lsl	r1, r2, #6
 452 021c BA68     		ldr	r2, [r7, #8]
 453 021e 1143     		orrs	r1, r1, r2
 454 0220 3A68     		ldr	r2, [r7, #0]
 455 0222 4FEA5202 		lsr	r2, r2, #1
 456 0226 02F1FF32 		add	r2, r2, #-1
 457 022a 4FEA0242 		lsl	r2, r2, #16
 458 022e 1143     		orrs	r1, r1, r2
 459 0230 FA68     		ldr	r2, [r7, #12]
 460 0232 1143     		orrs	r1, r1, r2
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****                  (PLLQ << 24);
 461              		.loc 1 446 0
 462 0234 BA69     		ldr	r2, [r7, #24]
 463 0236 4FEA0262 		lsl	r2, r2, #24
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 464              		.loc 1 445 0
 465 023a 0A43     		orrs	r2, r2, r1
 466 023c 5A60     		str	r2, [r3, #4]
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 467              		.loc 1 447 0
 468 023e 07F11407 		add	r7, r7, #20
 469 0242 BD46     		mov	sp, r7
 470 0244 80BC     		pop	{r7}
 471 0246 7047     		bx	lr
 472              		.cfi_endproc
 473              	.LFE36:
 475              		.align	2
 476              		.global	RCC_PLLCmd
 477              		.thumb
 478              		.thumb_func
 480              	RCC_PLLCmd:
 481              	.LFB37:
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         be used as system clock source.
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 482              		.loc 1 460 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 8
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 487 0248 80B4     		push	{r7}
 488              	.LCFI23:
 489              		.cfi_def_cfa_offset 4
 490              		.cfi_offset 7, -4
 491 024a 83B0     		sub	sp, sp, #12
 492              	.LCFI24:
 493              		.cfi_def_cfa_offset 16
 494 024c 00AF     		add	r7, sp, #0
 495              	.LCFI25:
 496              		.cfi_def_cfa_register 7
 497 024e 0346     		mov	r3, r0
 498 0250 FB71     		strb	r3, [r7, #7]
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 499              		.loc 1 463 0
 500 0252 4FF06003 		mov	r3, #96
 501 0256 C4F24723 		movt	r3, 16967
 502 025a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 503 025c 1A60     		str	r2, [r3, #0]
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 504              		.loc 1 464 0
 505 025e 07F10C07 		add	r7, r7, #12
 506 0262 BD46     		mov	sp, r7
 507 0264 80BC     		pop	{r7}
 508 0266 7047     		bx	lr
 509              		.cfi_endproc
 510              	.LFE37:
 512              		.align	2
 513              		.global	RCC_PLLI2SConfig
 514              		.thumb
 515              		.thumb_func
 517              	RCC_PLLI2SConfig:
 518              	.LFB38:
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *             
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         on the I2S clock frequency.
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 519              		.loc 1 487 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524 0268 80B4     		push	{r7}
 525              	.LCFI26:
 526              		.cfi_def_cfa_offset 4
 527              		.cfi_offset 7, -4
 528 026a 83B0     		sub	sp, sp, #12
 529              	.LCFI27:
 530              		.cfi_def_cfa_offset 16
 531 026c 00AF     		add	r7, sp, #0
 532              	.LCFI28:
 533              		.cfi_def_cfa_register 7
 534 026e 7860     		str	r0, [r7, #4]
 535 0270 3960     		str	r1, [r7, #0]
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 536              		.loc 1 492 0
 537 0272 4FF46053 		mov	r3, #14336
 538 0276 C4F20203 		movt	r3, 16386
 539 027a 7A68     		ldr	r2, [r7, #4]
 540 027c 4FEA8211 		lsl	r1, r2, #6
 541 0280 3A68     		ldr	r2, [r7, #0]
 542 0282 4FEA0272 		lsl	r2, r2, #28
 543 0286 0A43     		orrs	r2, r2, r1
 544 0288 C3F88420 		str	r2, [r3, #132]
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 545              		.loc 1 493 0
 546 028c 07F10C07 		add	r7, r7, #12
 547 0290 BD46     		mov	sp, r7
 548 0292 80BC     		pop	{r7}
 549 0294 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE38:
 553 0296 00BF     		.align	2
 554              		.global	RCC_PLLI2SCmd
 555              		.thumb
 556              		.thumb_func
 558              	RCC_PLLI2SCmd:
 559              	.LFB39:
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 560              		.loc 1 503 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 8
 563              		@ frame_needed = 1, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565 0298 80B4     		push	{r7}
 566              	.LCFI29:
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 029a 83B0     		sub	sp, sp, #12
 570              	.LCFI30:
 571              		.cfi_def_cfa_offset 16
 572 029c 00AF     		add	r7, sp, #0
 573              	.LCFI31:
 574              		.cfi_def_cfa_register 7
 575 029e 0346     		mov	r3, r0
 576 02a0 FB71     		strb	r3, [r7, #7]
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 577              		.loc 1 506 0
 578 02a2 4FF06803 		mov	r3, #104
 579 02a6 C4F24723 		movt	r3, 16967
 580 02aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 581 02ac 1A60     		str	r2, [r3, #0]
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 582              		.loc 1 507 0
 583 02ae 07F10C07 		add	r7, r7, #12
 584 02b2 BD46     		mov	sp, r7
 585 02b4 80BC     		pop	{r7}
 586 02b6 7047     		bx	lr
 587              		.cfi_endproc
 588              	.LFE39:
 590              		.align	2
 591              		.global	RCC_ClockSecuritySystemCmd
 592              		.thumb
 593              		.thumb_func
 595              	RCC_ClockSecuritySystemCmd:
 596              	.LFB40:
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 597              		.loc 1 521 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 8
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 602 02b8 80B4     		push	{r7}
 603              	.LCFI32:
 604              		.cfi_def_cfa_offset 4
 605              		.cfi_offset 7, -4
 606 02ba 83B0     		sub	sp, sp, #12
 607              	.LCFI33:
 608              		.cfi_def_cfa_offset 16
 609 02bc 00AF     		add	r7, sp, #0
 610              	.LCFI34:
 611              		.cfi_def_cfa_register 7
 612 02be 0346     		mov	r3, r0
 613 02c0 FB71     		strb	r3, [r7, #7]
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 614              		.loc 1 524 0
 615 02c2 4FF04C03 		mov	r3, #76
 616 02c6 C4F24723 		movt	r3, 16967
 617 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 618 02cc 1A60     		str	r2, [r3, #0]
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 619              		.loc 1 525 0
 620 02ce 07F10C07 		add	r7, r7, #12
 621 02d2 BD46     		mov	sp, r7
 622 02d4 80BC     		pop	{r7}
 623 02d6 7047     		bx	lr
 624              		.cfi_endproc
 625              	.LFE40:
 627              		.align	2
 628              		.global	RCC_MCO1Config
 629              		.thumb
 630              		.thumb_func
 632              	RCC_MCO1Config:
 633              	.LFB41:
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 634              		.loc 1 546 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 16
 637              		@ frame_needed = 1, uses_anonymous_args = 0
 638              		@ link register save eliminated.
 639 02d8 80B4     		push	{r7}
 640              	.LCFI35:
 641              		.cfi_def_cfa_offset 4
 642              		.cfi_offset 7, -4
 643 02da 85B0     		sub	sp, sp, #20
 644              	.LCFI36:
 645              		.cfi_def_cfa_offset 24
 646 02dc 00AF     		add	r7, sp, #0
 647              	.LCFI37:
 648              		.cfi_def_cfa_register 7
 649 02de 7860     		str	r0, [r7, #4]
 650 02e0 3960     		str	r1, [r7, #0]
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 651              		.loc 1 547 0
 652 02e2 4FF00003 		mov	r3, #0
 653 02e6 FB60     		str	r3, [r7, #12]
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 654              		.loc 1 553 0
 655 02e8 4FF46053 		mov	r3, #14336
 656 02ec C4F20203 		movt	r3, 16386
 657 02f0 9B68     		ldr	r3, [r3, #8]
 658 02f2 FB60     		str	r3, [r7, #12]
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 659              		.loc 1 556 0
 660 02f4 FB68     		ldr	r3, [r7, #12]
 661 02f6 23F0EC63 		bic	r3, r3, #123731968
 662 02fa FB60     		str	r3, [r7, #12]
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 663              		.loc 1 559 0
 664 02fc 7A68     		ldr	r2, [r7, #4]
 665 02fe 3B68     		ldr	r3, [r7, #0]
 666 0300 1343     		orrs	r3, r3, r2
 667 0302 FA68     		ldr	r2, [r7, #12]
 668 0304 1343     		orrs	r3, r3, r2
 669 0306 FB60     		str	r3, [r7, #12]
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;  
 670              		.loc 1 562 0
 671 0308 4FF46053 		mov	r3, #14336
 672 030c C4F20203 		movt	r3, 16386
 673 0310 FA68     		ldr	r2, [r7, #12]
 674 0312 9A60     		str	r2, [r3, #8]
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 675              		.loc 1 563 0
 676 0314 07F11407 		add	r7, r7, #20
 677 0318 BD46     		mov	sp, r7
 678 031a 80BC     		pop	{r7}
 679 031c 7047     		bx	lr
 680              		.cfi_endproc
 681              	.LFE41:
 683 031e 00BF     		.align	2
 684              		.global	RCC_MCO2Config
 685              		.thumb
 686              		.thumb_func
 688              	RCC_MCO2Config:
 689              	.LFB42:
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 690              		.loc 1 584 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 16
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 695 0320 80B4     		push	{r7}
 696              	.LCFI38:
 697              		.cfi_def_cfa_offset 4
 698              		.cfi_offset 7, -4
 699 0322 85B0     		sub	sp, sp, #20
 700              	.LCFI39:
 701              		.cfi_def_cfa_offset 24
 702 0324 00AF     		add	r7, sp, #0
 703              	.LCFI40:
 704              		.cfi_def_cfa_register 7
 705 0326 7860     		str	r0, [r7, #4]
 706 0328 3960     		str	r1, [r7, #0]
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 707              		.loc 1 585 0
 708 032a 4FF00003 		mov	r3, #0
 709 032e FB60     		str	r3, [r7, #12]
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 710              		.loc 1 591 0
 711 0330 4FF46053 		mov	r3, #14336
 712 0334 C4F20203 		movt	r3, 16386
 713 0338 9B68     		ldr	r3, [r3, #8]
 714 033a FB60     		str	r3, [r7, #12]
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 715              		.loc 1 594 0
 716 033c FB68     		ldr	r3, [r7, #12]
 717 033e 23F07843 		bic	r3, r3, #-134217728
 718 0342 FB60     		str	r3, [r7, #12]
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 719              		.loc 1 597 0
 720 0344 7A68     		ldr	r2, [r7, #4]
 721 0346 3B68     		ldr	r3, [r7, #0]
 722 0348 1343     		orrs	r3, r3, r2
 723 034a FA68     		ldr	r2, [r7, #12]
 724 034c 1343     		orrs	r3, r3, r2
 725 034e FB60     		str	r3, [r7, #12]
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;  
 726              		.loc 1 600 0
 727 0350 4FF46053 		mov	r3, #14336
 728 0354 C4F20203 		movt	r3, 16386
 729 0358 FA68     		ldr	r2, [r7, #12]
 730 035a 9A60     		str	r2, [r3, #8]
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 731              		.loc 1 601 0
 732 035c 07F11407 		add	r7, r7, #20
 733 0360 BD46     		mov	sp, r7
 734 0362 80BC     		pop	{r7}
 735 0364 7047     		bx	lr
 736              		.cfi_endproc
 737              	.LFE42:
 739 0366 00BF     		.align	2
 740              		.global	RCC_SYSCLKConfig
 741              		.thumb
 742              		.thumb_func
 744              	RCC_SYSCLKConfig:
 745              	.LFB43:
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @}
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @verbatim   
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================  
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   APB2 busses clocks.
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      HSE and PLL.
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           functions to configure this clock. 
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****        
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      adapted accordingly:
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @endverbatim
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         currently used as system clock source. 
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 746              		.loc 1 689 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 16
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751 0368 80B4     		push	{r7}
 752              	.LCFI41:
 753              		.cfi_def_cfa_offset 4
 754              		.cfi_offset 7, -4
 755 036a 85B0     		sub	sp, sp, #20
 756              	.LCFI42:
 757              		.cfi_def_cfa_offset 24
 758 036c 00AF     		add	r7, sp, #0
 759              	.LCFI43:
 760              		.cfi_def_cfa_register 7
 761 036e 7860     		str	r0, [r7, #4]
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 762              		.loc 1 690 0
 763 0370 4FF00003 		mov	r3, #0
 764 0374 FB60     		str	r3, [r7, #12]
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 765              		.loc 1 695 0
 766 0376 4FF46053 		mov	r3, #14336
 767 037a C4F20203 		movt	r3, 16386
 768 037e 9B68     		ldr	r3, [r3, #8]
 769 0380 FB60     		str	r3, [r7, #12]
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 770              		.loc 1 698 0
 771 0382 FB68     		ldr	r3, [r7, #12]
 772 0384 23F00303 		bic	r3, r3, #3
 773 0388 FB60     		str	r3, [r7, #12]
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 774              		.loc 1 701 0
 775 038a FA68     		ldr	r2, [r7, #12]
 776 038c 7B68     		ldr	r3, [r7, #4]
 777 038e 1343     		orrs	r3, r3, r2
 778 0390 FB60     		str	r3, [r7, #12]
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;
 779              		.loc 1 704 0
 780 0392 4FF46053 		mov	r3, #14336
 781 0396 C4F20203 		movt	r3, 16386
 782 039a FA68     		ldr	r2, [r7, #12]
 783 039c 9A60     		str	r2, [r3, #8]
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 784              		.loc 1 705 0
 785 039e 07F11407 		add	r7, r7, #20
 786 03a2 BD46     		mov	sp, r7
 787 03a4 80BC     		pop	{r7}
 788 03a6 7047     		bx	lr
 789              		.cfi_endproc
 790              	.LFE43:
 792              		.align	2
 793              		.global	RCC_GetSYSCLKSource
 794              		.thumb
 795              		.thumb_func
 797              	RCC_GetSYSCLKSource:
 798              	.LFB44:
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  None
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         of the following:
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 799              		.loc 1 717 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 1, uses_anonymous_args = 0
 803              		@ link register save eliminated.
 804 03a8 80B4     		push	{r7}
 805              	.LCFI44:
 806              		.cfi_def_cfa_offset 4
 807              		.cfi_offset 7, -4
 808 03aa 00AF     		add	r7, sp, #0
 809              	.LCFI45:
 810              		.cfi_def_cfa_register 7
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 811              		.loc 1 718 0
 812 03ac 4FF46053 		mov	r3, #14336
 813 03b0 C4F20203 		movt	r3, 16386
 814 03b4 9B68     		ldr	r3, [r3, #8]
 815 03b6 DBB2     		uxtb	r3, r3
 816 03b8 03F00C03 		and	r3, r3, #12
 817 03bc DBB2     		uxtb	r3, r3
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 818              		.loc 1 719 0
 819 03be 1846     		mov	r0, r3
 820 03c0 BD46     		mov	sp, r7
 821 03c2 80BC     		pop	{r7}
 822 03c4 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE44:
 826 03c6 00BF     		.align	2
 827              		.global	RCC_HCLKConfig
 828              		.thumb
 829              		.thumb_func
 831              	RCC_HCLKConfig:
 832              	.LFB45:
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         (for more details refer to section above
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the system clock (SYSCLK).
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 833              		.loc 1 742 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 16
 836              		@ frame_needed = 1, uses_anonymous_args = 0
 837              		@ link register save eliminated.
 838 03c8 80B4     		push	{r7}
 839              	.LCFI46:
 840              		.cfi_def_cfa_offset 4
 841              		.cfi_offset 7, -4
 842 03ca 85B0     		sub	sp, sp, #20
 843              	.LCFI47:
 844              		.cfi_def_cfa_offset 24
 845 03cc 00AF     		add	r7, sp, #0
 846              	.LCFI48:
 847              		.cfi_def_cfa_register 7
 848 03ce 7860     		str	r0, [r7, #4]
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 849              		.loc 1 743 0
 850 03d0 4FF00003 		mov	r3, #0
 851 03d4 FB60     		str	r3, [r7, #12]
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 852              		.loc 1 748 0
 853 03d6 4FF46053 		mov	r3, #14336
 854 03da C4F20203 		movt	r3, 16386
 855 03de 9B68     		ldr	r3, [r3, #8]
 856 03e0 FB60     		str	r3, [r7, #12]
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 857              		.loc 1 751 0
 858 03e2 FB68     		ldr	r3, [r7, #12]
 859 03e4 23F0F003 		bic	r3, r3, #240
 860 03e8 FB60     		str	r3, [r7, #12]
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 861              		.loc 1 754 0
 862 03ea FA68     		ldr	r2, [r7, #12]
 863 03ec 7B68     		ldr	r3, [r7, #4]
 864 03ee 1343     		orrs	r3, r3, r2
 865 03f0 FB60     		str	r3, [r7, #12]
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;
 866              		.loc 1 757 0
 867 03f2 4FF46053 		mov	r3, #14336
 868 03f6 C4F20203 		movt	r3, 16386
 869 03fa FA68     		ldr	r2, [r7, #12]
 870 03fc 9A60     		str	r2, [r3, #8]
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 871              		.loc 1 758 0
 872 03fe 07F11407 		add	r7, r7, #20
 873 0402 BD46     		mov	sp, r7
 874 0404 80BC     		pop	{r7}
 875 0406 7047     		bx	lr
 876              		.cfi_endproc
 877              	.LFE45:
 879              		.align	2
 880              		.global	RCC_PCLK1Config
 881              		.thumb
 882              		.thumb_func
 884              	RCC_PCLK1Config:
 885              	.LFB46:
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the AHB clock (HCLK).
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 886              		.loc 1 774 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 16
 889              		@ frame_needed = 1, uses_anonymous_args = 0
 890              		@ link register save eliminated.
 891 0408 80B4     		push	{r7}
 892              	.LCFI49:
 893              		.cfi_def_cfa_offset 4
 894              		.cfi_offset 7, -4
 895 040a 85B0     		sub	sp, sp, #20
 896              	.LCFI50:
 897              		.cfi_def_cfa_offset 24
 898 040c 00AF     		add	r7, sp, #0
 899              	.LCFI51:
 900              		.cfi_def_cfa_register 7
 901 040e 7860     		str	r0, [r7, #4]
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 902              		.loc 1 775 0
 903 0410 4FF00003 		mov	r3, #0
 904 0414 FB60     		str	r3, [r7, #12]
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 905              		.loc 1 780 0
 906 0416 4FF46053 		mov	r3, #14336
 907 041a C4F20203 		movt	r3, 16386
 908 041e 9B68     		ldr	r3, [r3, #8]
 909 0420 FB60     		str	r3, [r7, #12]
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 910              		.loc 1 783 0
 911 0422 FB68     		ldr	r3, [r7, #12]
 912 0424 23F4E053 		bic	r3, r3, #7168
 913 0428 FB60     		str	r3, [r7, #12]
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_HCLK;
 914              		.loc 1 786 0
 915 042a FA68     		ldr	r2, [r7, #12]
 916 042c 7B68     		ldr	r3, [r7, #4]
 917 042e 1343     		orrs	r3, r3, r2
 918 0430 FB60     		str	r3, [r7, #12]
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;
 919              		.loc 1 789 0
 920 0432 4FF46053 		mov	r3, #14336
 921 0436 C4F20203 		movt	r3, 16386
 922 043a FA68     		ldr	r2, [r7, #12]
 923 043c 9A60     		str	r2, [r3, #8]
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 924              		.loc 1 790 0
 925 043e 07F11407 		add	r7, r7, #20
 926 0442 BD46     		mov	sp, r7
 927 0444 80BC     		pop	{r7}
 928 0446 7047     		bx	lr
 929              		.cfi_endproc
 930              	.LFE46:
 932              		.align	2
 933              		.global	RCC_PCLK2Config
 934              		.thumb
 935              		.thumb_func
 937              	RCC_PCLK2Config:
 938              	.LFB47:
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the AHB clock (HCLK).
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 939              		.loc 1 805 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 16
 942              		@ frame_needed = 1, uses_anonymous_args = 0
 943              		@ link register save eliminated.
 944 0448 80B4     		push	{r7}
 945              	.LCFI52:
 946              		.cfi_def_cfa_offset 4
 947              		.cfi_offset 7, -4
 948 044a 85B0     		sub	sp, sp, #20
 949              	.LCFI53:
 950              		.cfi_def_cfa_offset 24
 951 044c 00AF     		add	r7, sp, #0
 952              	.LCFI54:
 953              		.cfi_def_cfa_register 7
 954 044e 7860     		str	r0, [r7, #4]
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 955              		.loc 1 806 0
 956 0450 4FF00003 		mov	r3, #0
 957 0454 FB60     		str	r3, [r7, #12]
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg = RCC->CFGR;
 958              		.loc 1 811 0
 959 0456 4FF46053 		mov	r3, #14336
 960 045a C4F20203 		movt	r3, 16386
 961 045e 9B68     		ldr	r3, [r3, #8]
 962 0460 FB60     		str	r3, [r7, #12]
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 963              		.loc 1 814 0
 964 0462 FB68     		ldr	r3, [r7, #12]
 965 0464 23F46043 		bic	r3, r3, #57344
 966 0468 FB60     		str	r3, [r7, #12]
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 967              		.loc 1 817 0
 968 046a 7B68     		ldr	r3, [r7, #4]
 969 046c 4FEAC303 		lsl	r3, r3, #3
 970 0470 FA68     		ldr	r2, [r7, #12]
 971 0472 1343     		orrs	r3, r3, r2
 972 0474 FB60     		str	r3, [r7, #12]
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Store the new value */
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CFGR = tmpreg;
 973              		.loc 1 820 0
 974 0476 4FF46053 		mov	r3, #14336
 975 047a C4F20203 		movt	r3, 16386
 976 047e FA68     		ldr	r2, [r7, #12]
 977 0480 9A60     		str	r2, [r3, #8]
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 978              		.loc 1 821 0
 979 0482 07F11407 		add	r7, r7, #20
 980 0486 BD46     		mov	sp, r7
 981 0488 80BC     		pop	{r7}
 982 048a 7047     		bx	lr
 983              		.cfi_endproc
 984              	.LFE47:
 986              		.align	2
 987              		.global	RCC_GetClocksFreq
 988              		.thumb
 989              		.thumb_func
 991              	RCC_GetClocksFreq:
 992              	.LFB48:
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * 
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         constant and the selected clock source:
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f2xx.h file (default value
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *               in voltage and temperature.
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f2xx.h file (default value
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                have wrong result.
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         value for HSE crystal.
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *   
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          the clocks frequencies.
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *     
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 993              		.loc 1 857 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 32
 996              		@ frame_needed = 1, uses_anonymous_args = 0
 997              		@ link register save eliminated.
 998 048c 80B4     		push	{r7}
 999              	.LCFI55:
 1000              		.cfi_def_cfa_offset 4
 1001              		.cfi_offset 7, -4
 1002 048e 89B0     		sub	sp, sp, #36
 1003              	.LCFI56:
 1004              		.cfi_def_cfa_offset 40
 1005 0490 00AF     		add	r7, sp, #0
 1006              	.LCFI57:
 1007              		.cfi_def_cfa_register 7
 1008 0492 7860     		str	r0, [r7, #4]
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1009              		.loc 1 858 0
 1010 0494 4FF00003 		mov	r3, #0
 1011 0498 BB61     		str	r3, [r7, #24]
 1012 049a 4FF00003 		mov	r3, #0
 1013 049e 7B61     		str	r3, [r7, #20]
 1014 04a0 4FF00003 		mov	r3, #0
 1015 04a4 FB61     		str	r3, [r7, #28]
 1016 04a6 4FF00203 		mov	r3, #2
 1017 04aa 3B61     		str	r3, [r7, #16]
 1018 04ac 4FF00003 		mov	r3, #0
 1019 04b0 FB60     		str	r3, [r7, #12]
 1020 04b2 4FF00203 		mov	r3, #2
 1021 04b6 BB60     		str	r3, [r7, #8]
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1022              		.loc 1 861 0
 1023 04b8 4FF46053 		mov	r3, #14336
 1024 04bc C4F20203 		movt	r3, 16386
 1025 04c0 9B68     		ldr	r3, [r3, #8]
 1026 04c2 03F00C03 		and	r3, r3, #12
 1027 04c6 BB61     		str	r3, [r7, #24]
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   switch (tmp)
 1028              		.loc 1 863 0
 1029 04c8 BB69     		ldr	r3, [r7, #24]
 1030 04ca 042B     		cmp	r3, #4
 1031 04cc 0AD0     		beq	.L32
 1032 04ce 082B     		cmp	r3, #8
 1033 04d0 0FD0     		beq	.L33
 1034 04d2 002B     		cmp	r3, #0
 1035 04d4 62D1     		bne	.L37
 1036              	.L31:
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1037              		.loc 1 866 0
 1038 04d6 7A68     		ldr	r2, [r7, #4]
 1039 04d8 4FF41053 		mov	r3, #9216
 1040 04dc C0F2F403 		movt	r3, 244
 1041 04e0 1360     		str	r3, [r2, #0]
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 1042              		.loc 1 867 0
 1043 04e2 62E0     		b	.L34
 1044              	.L32:
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1045              		.loc 1 869 0
 1046 04e4 7A68     		ldr	r2, [r7, #4]
 1047 04e6 47F64003 		movw	r3, #30784
 1048 04ea C0F27D13 		movt	r3, 381
 1049 04ee 1360     		str	r3, [r2, #0]
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 1050              		.loc 1 870 0
 1051 04f0 5BE0     		b	.L34
 1052              	.L33:
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****          */    
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1053              		.loc 1 876 0
 1054 04f2 4FF46053 		mov	r3, #14336
 1055 04f6 C4F20203 		movt	r3, 16386
 1056 04fa 5B68     		ldr	r3, [r3, #4]
 1057 04fc 03F48003 		and	r3, r3, #4194304
 1058 0500 4FEA9353 		lsr	r3, r3, #22
 1059 0504 FB60     		str	r3, [r7, #12]
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1060              		.loc 1 877 0
 1061 0506 4FF46053 		mov	r3, #14336
 1062 050a C4F20203 		movt	r3, 16386
 1063 050e 5B68     		ldr	r3, [r3, #4]
 1064 0510 03F03F03 		and	r3, r3, #63
 1065 0514 BB60     		str	r3, [r7, #8]
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       if (pllsource != 0)
 1066              		.loc 1 879 0
 1067 0516 FB68     		ldr	r3, [r7, #12]
 1068 0518 002B     		cmp	r3, #0
 1069 051a 15D0     		beq	.L35
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       {
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         /* HSE used as PLL clock source */
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1070              		.loc 1 882 0
 1071 051c 47F64003 		movw	r3, #30784
 1072 0520 C0F27D13 		movt	r3, 381
 1073 0524 BA68     		ldr	r2, [r7, #8]
 1074 0526 B3FBF2F2 		udiv	r2, r3, r2
 1075 052a 4FF46053 		mov	r3, #14336
 1076 052e C4F20203 		movt	r3, 16386
 1077 0532 5B68     		ldr	r3, [r3, #4]
 1078 0534 1946     		mov	r1, r3
 1079 0536 47F6C073 		movw	r3, #32704
 1080 053a 0B40     		ands	r3, r3, r1
 1081 053c 4FEA9313 		lsr	r3, r3, #6
 1082 0540 03FB02F3 		mul	r3, r3, r2
 1083 0544 FB61     		str	r3, [r7, #28]
 1084 0546 14E0     		b	.L36
 1085              	.L35:
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       }
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       else
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       {
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         /* HSI used as PLL clock source */
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1086              		.loc 1 887 0
 1087 0548 4FF41053 		mov	r3, #9216
 1088 054c C0F2F403 		movt	r3, 244
 1089 0550 BA68     		ldr	r2, [r7, #8]
 1090 0552 B3FBF2F2 		udiv	r2, r3, r2
 1091 0556 4FF46053 		mov	r3, #14336
 1092 055a C4F20203 		movt	r3, 16386
 1093 055e 5B68     		ldr	r3, [r3, #4]
 1094 0560 1946     		mov	r1, r3
 1095 0562 47F6C073 		movw	r3, #32704
 1096 0566 0B40     		ands	r3, r3, r1
 1097 0568 4FEA9313 		lsr	r3, r3, #6
 1098 056c 03FB02F3 		mul	r3, r3, r2
 1099 0570 FB61     		str	r3, [r7, #28]
 1100              	.L36:
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       }
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1101              		.loc 1 890 0
 1102 0572 4FF46053 		mov	r3, #14336
 1103 0576 C4F20203 		movt	r3, 16386
 1104 057a 5B68     		ldr	r3, [r3, #4]
 1105 057c 03F44033 		and	r3, r3, #196608
 1106 0580 4FEA1343 		lsr	r3, r3, #16
 1107 0584 03F10103 		add	r3, r3, #1
 1108 0588 4FEA4303 		lsl	r3, r3, #1
 1109 058c 3B61     		str	r3, [r7, #16]
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1110              		.loc 1 891 0
 1111 058e FA69     		ldr	r2, [r7, #28]
 1112 0590 3B69     		ldr	r3, [r7, #16]
 1113 0592 B2FBF3F2 		udiv	r2, r2, r3
 1114 0596 7B68     		ldr	r3, [r7, #4]
 1115 0598 1A60     		str	r2, [r3, #0]
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 1116              		.loc 1 892 0
 1117 059a 06E0     		b	.L34
 1118              	.L37:
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     default:
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1119              		.loc 1 894 0
 1120 059c 7A68     		ldr	r2, [r7, #4]
 1121 059e 4FF41053 		mov	r3, #9216
 1122 05a2 C0F2F403 		movt	r3, 244
 1123 05a6 1360     		str	r3, [r2, #0]
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****       break;
 1124              		.loc 1 895 0
 1125 05a8 00BF     		nop
 1126              	.L34:
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get HCLK prescaler */
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1127              		.loc 1 900 0
 1128 05aa 4FF46053 		mov	r3, #14336
 1129 05ae C4F20203 		movt	r3, 16386
 1130 05b2 9B68     		ldr	r3, [r3, #8]
 1131 05b4 03F0F003 		and	r3, r3, #240
 1132 05b8 BB61     		str	r3, [r7, #24]
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = tmp >> 4;
 1133              		.loc 1 901 0
 1134 05ba BB69     		ldr	r3, [r7, #24]
 1135 05bc 4FEA1313 		lsr	r3, r3, #4
 1136 05c0 BB61     		str	r3, [r7, #24]
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1137              		.loc 1 902 0
 1138 05c2 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1139 05c6 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1140 05ca BA69     		ldr	r2, [r7, #24]
 1141 05cc 9B18     		adds	r3, r3, r2
 1142 05ce 1B78     		ldrb	r3, [r3, #0]
 1143 05d0 DBB2     		uxtb	r3, r3
 1144 05d2 7B61     		str	r3, [r7, #20]
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* HCLK clock frequency */
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1145              		.loc 1 904 0
 1146 05d4 7B68     		ldr	r3, [r7, #4]
 1147 05d6 1A68     		ldr	r2, [r3, #0]
 1148 05d8 7B69     		ldr	r3, [r7, #20]
 1149 05da 22FA03F2 		lsr	r2, r2, r3
 1150 05de 7B68     		ldr	r3, [r7, #4]
 1151 05e0 5A60     		str	r2, [r3, #4]
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1152              		.loc 1 907 0
 1153 05e2 4FF46053 		mov	r3, #14336
 1154 05e6 C4F20203 		movt	r3, 16386
 1155 05ea 9B68     		ldr	r3, [r3, #8]
 1156 05ec 03F4E053 		and	r3, r3, #7168
 1157 05f0 BB61     		str	r3, [r7, #24]
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = tmp >> 10;
 1158              		.loc 1 908 0
 1159 05f2 BB69     		ldr	r3, [r7, #24]
 1160 05f4 4FEA9323 		lsr	r3, r3, #10
 1161 05f8 BB61     		str	r3, [r7, #24]
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1162              		.loc 1 909 0
 1163 05fa 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1164 05fe C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1165 0602 BA69     		ldr	r2, [r7, #24]
 1166 0604 9B18     		adds	r3, r3, r2
 1167 0606 1B78     		ldrb	r3, [r3, #0]
 1168 0608 DBB2     		uxtb	r3, r3
 1169 060a 7B61     		str	r3, [r7, #20]
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* PCLK1 clock frequency */
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1170              		.loc 1 911 0
 1171 060c 7B68     		ldr	r3, [r7, #4]
 1172 060e 5A68     		ldr	r2, [r3, #4]
 1173 0610 7B69     		ldr	r3, [r7, #20]
 1174 0612 22FA03F2 		lsr	r2, r2, r3
 1175 0616 7B68     		ldr	r3, [r7, #4]
 1176 0618 9A60     		str	r2, [r3, #8]
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1177              		.loc 1 914 0
 1178 061a 4FF46053 		mov	r3, #14336
 1179 061e C4F20203 		movt	r3, 16386
 1180 0622 9B68     		ldr	r3, [r3, #8]
 1181 0624 03F46043 		and	r3, r3, #57344
 1182 0628 BB61     		str	r3, [r7, #24]
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = tmp >> 13;
 1183              		.loc 1 915 0
 1184 062a BB69     		ldr	r3, [r7, #24]
 1185 062c 4FEA5333 		lsr	r3, r3, #13
 1186 0630 BB61     		str	r3, [r7, #24]
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1187              		.loc 1 916 0
 1188 0632 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1189 0636 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1190 063a BA69     		ldr	r2, [r7, #24]
 1191 063c 9B18     		adds	r3, r3, r2
 1192 063e 1B78     		ldrb	r3, [r3, #0]
 1193 0640 DBB2     		uxtb	r3, r3
 1194 0642 7B61     		str	r3, [r7, #20]
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* PCLK2 clock frequency */
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1195              		.loc 1 918 0
 1196 0644 7B68     		ldr	r3, [r7, #4]
 1197 0646 5A68     		ldr	r2, [r3, #4]
 1198 0648 7B69     		ldr	r3, [r7, #20]
 1199 064a 22FA03F2 		lsr	r2, r2, r3
 1200 064e 7B68     		ldr	r3, [r7, #4]
 1201 0650 DA60     		str	r2, [r3, #12]
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1202              		.loc 1 919 0
 1203 0652 07F12407 		add	r7, r7, #36
 1204 0656 BD46     		mov	sp, r7
 1205 0658 80BC     		pop	{r7}
 1206 065a 7047     		bx	lr
 1207              		.cfi_endproc
 1208              	.LFE48:
 1210              		.align	2
 1211              		.global	RCC_RTCCLKConfig
 1212              		.thumb
 1213              		.thumb_func
 1215              	RCC_RTCCLKConfig:
 1216              	.LFB49:
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @}
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @verbatim   
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****                    Peripheral clocks configuration functions
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================  
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @endverbatim
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         a Power On Reset (POR).
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *    
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         RTC clock source).
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *  
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1217              		.loc 1 982 0
 1218              		.cfi_startproc
 1219              		@ args = 0, pretend = 0, frame = 16
 1220              		@ frame_needed = 1, uses_anonymous_args = 0
 1221              		@ link register save eliminated.
 1222 065c 80B4     		push	{r7}
 1223              	.LCFI58:
 1224              		.cfi_def_cfa_offset 4
 1225              		.cfi_offset 7, -4
 1226 065e 85B0     		sub	sp, sp, #20
 1227              	.LCFI59:
 1228              		.cfi_def_cfa_offset 24
 1229 0660 00AF     		add	r7, sp, #0
 1230              	.LCFI60:
 1231              		.cfi_def_cfa_register 7
 1232 0662 7860     		str	r0, [r7, #4]
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmpreg = 0;
 1233              		.loc 1 983 0
 1234 0664 4FF00003 		mov	r3, #0
 1235 0668 FB60     		str	r3, [r7, #12]
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1236              		.loc 1 988 0
 1237 066a 7B68     		ldr	r3, [r7, #4]
 1238 066c 03F44073 		and	r3, r3, #768
 1239 0670 B3F5407F 		cmp	r3, #768
 1240 0674 17D1     		bne	.L39
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     tmpreg = RCC->CFGR;
 1241              		.loc 1 990 0
 1242 0676 4FF46053 		mov	r3, #14336
 1243 067a C4F20203 		movt	r3, 16386
 1244 067e 9B68     		ldr	r3, [r3, #8]
 1245 0680 FB60     		str	r3, [r7, #12]
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1246              		.loc 1 993 0
 1247 0682 FB68     		ldr	r3, [r7, #12]
 1248 0684 23F4F813 		bic	r3, r3, #2031616
 1249 0688 FB60     		str	r3, [r7, #12]
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1250              		.loc 1 996 0
 1251 068a 7B68     		ldr	r3, [r7, #4]
 1252 068c 23F07043 		bic	r3, r3, #-268435456
 1253 0690 23F44073 		bic	r3, r3, #768
 1254 0694 FA68     		ldr	r2, [r7, #12]
 1255 0696 1343     		orrs	r3, r3, r2
 1256 0698 FB60     		str	r3, [r7, #12]
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Store the new value */
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->CFGR = tmpreg;
 1257              		.loc 1 999 0
 1258 069a 4FF46053 		mov	r3, #14336
 1259 069e C4F20203 		movt	r3, 16386
 1260 06a2 FA68     		ldr	r2, [r7, #12]
 1261 06a4 9A60     		str	r2, [r3, #8]
 1262              	.L39:
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Select the RTC clock source */
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1263              		.loc 1 1003 0
 1264 06a6 4FF46053 		mov	r3, #14336
 1265 06aa C4F20203 		movt	r3, 16386
 1266 06ae 4FF46052 		mov	r2, #14336
 1267 06b2 C4F20202 		movt	r2, 16386
 1268 06b6 126F     		ldr	r2, [r2, #112]
 1269 06b8 1146     		mov	r1, r2
 1270 06ba 7A68     		ldr	r2, [r7, #4]
 1271 06bc 4FEA0252 		lsl	r2, r2, #20
 1272 06c0 4FEA1252 		lsr	r2, r2, #20
 1273 06c4 0A43     		orrs	r2, r2, r1
 1274 06c6 1A67     		str	r2, [r3, #112]
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1275              		.loc 1 1004 0
 1276 06c8 07F11407 		add	r7, r7, #20
 1277 06cc BD46     		mov	sp, r7
 1278 06ce 80BC     		pop	{r7}
 1279 06d0 7047     		bx	lr
 1280              		.cfi_endproc
 1281              	.LFE49:
 1283 06d2 00BF     		.align	2
 1284              		.global	RCC_RTCCLKCmd
 1285              		.thumb
 1286              		.thumb_func
 1288              	RCC_RTCCLKCmd:
 1289              	.LFB50:
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1290              		.loc 1 1014 0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 8
 1293              		@ frame_needed = 1, uses_anonymous_args = 0
 1294              		@ link register save eliminated.
 1295 06d4 80B4     		push	{r7}
 1296              	.LCFI61:
 1297              		.cfi_def_cfa_offset 4
 1298              		.cfi_offset 7, -4
 1299 06d6 83B0     		sub	sp, sp, #12
 1300              	.LCFI62:
 1301              		.cfi_def_cfa_offset 16
 1302 06d8 00AF     		add	r7, sp, #0
 1303              	.LCFI63:
 1304              		.cfi_def_cfa_register 7
 1305 06da 0346     		mov	r3, r0
 1306 06dc FB71     		strb	r3, [r7, #7]
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1307              		.loc 1 1018 0
 1308 06de 40F63C63 		movw	r3, #3644
 1309 06e2 C4F24723 		movt	r3, 16967
 1310 06e6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1311 06e8 1A60     		str	r2, [r3, #0]
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1312              		.loc 1 1019 0
 1313 06ea 07F10C07 		add	r7, r7, #12
 1314 06ee BD46     		mov	sp, r7
 1315 06f0 80BC     		pop	{r7}
 1316 06f2 7047     		bx	lr
 1317              		.cfi_endproc
 1318              	.LFE50:
 1320              		.align	2
 1321              		.global	RCC_BackupResetCmd
 1322              		.thumb
 1323              		.thumb_func
 1325              	RCC_BackupResetCmd:
 1326              	.LFB51:
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1327              		.loc 1 1031 0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 8
 1330              		@ frame_needed = 1, uses_anonymous_args = 0
 1331              		@ link register save eliminated.
 1332 06f4 80B4     		push	{r7}
 1333              	.LCFI64:
 1334              		.cfi_def_cfa_offset 4
 1335              		.cfi_offset 7, -4
 1336 06f6 83B0     		sub	sp, sp, #12
 1337              	.LCFI65:
 1338              		.cfi_def_cfa_offset 16
 1339 06f8 00AF     		add	r7, sp, #0
 1340              	.LCFI66:
 1341              		.cfi_def_cfa_register 7
 1342 06fa 0346     		mov	r3, r0
 1343 06fc FB71     		strb	r3, [r7, #7]
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1344              		.loc 1 1034 0
 1345 06fe 4FF46463 		mov	r3, #3648
 1346 0702 C4F24723 		movt	r3, 16967
 1347 0706 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1348 0708 1A60     		str	r2, [r3, #0]
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1349              		.loc 1 1035 0
 1350 070a 07F10C07 		add	r7, r7, #12
 1351 070e BD46     		mov	sp, r7
 1352 0710 80BC     		pop	{r7}
 1353 0712 7047     		bx	lr
 1354              		.cfi_endproc
 1355              	.LFE51:
 1357              		.align	2
 1358              		.global	RCC_I2SCLKConfig
 1359              		.thumb
 1360              		.thumb_func
 1362              	RCC_I2SCLKConfig:
 1363              	.LFB52:
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                                        used as I2S clock source
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1364              		.loc 1 1051 0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 8
 1367              		@ frame_needed = 1, uses_anonymous_args = 0
 1368              		@ link register save eliminated.
 1369 0714 80B4     		push	{r7}
 1370              	.LCFI67:
 1371              		.cfi_def_cfa_offset 4
 1372              		.cfi_offset 7, -4
 1373 0716 83B0     		sub	sp, sp, #12
 1374              	.LCFI68:
 1375              		.cfi_def_cfa_offset 16
 1376 0718 00AF     		add	r7, sp, #0
 1377              	.LCFI69:
 1378              		.cfi_def_cfa_register 7
 1379 071a 7860     		str	r0, [r7, #4]
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1380              		.loc 1 1055 0
 1381 071c 4FF4AE73 		mov	r3, #348
 1382 0720 C4F24723 		movt	r3, 16967
 1383 0724 7A68     		ldr	r2, [r7, #4]
 1384 0726 1A60     		str	r2, [r3, #0]
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1385              		.loc 1 1056 0
 1386 0728 07F10C07 		add	r7, r7, #12
 1387 072c BD46     		mov	sp, r7
 1388 072e 80BC     		pop	{r7}
 1389 0730 7047     		bx	lr
 1390              		.cfi_endproc
 1391              	.LFE52:
 1393 0732 00BF     		.align	2
 1394              		.global	RCC_AHB1PeriphClockCmd
 1395              		.thumb
 1396              		.thumb_func
 1398              	RCC_AHB1PeriphClockCmd:
 1399              	.LFB53:
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it.   
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1400              		.loc 1 1089 0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 8
 1403              		@ frame_needed = 1, uses_anonymous_args = 0
 1404              		@ link register save eliminated.
 1405 0734 80B4     		push	{r7}
 1406              	.LCFI70:
 1407              		.cfi_def_cfa_offset 4
 1408              		.cfi_offset 7, -4
 1409 0736 83B0     		sub	sp, sp, #12
 1410              	.LCFI71:
 1411              		.cfi_def_cfa_offset 16
 1412 0738 00AF     		add	r7, sp, #0
 1413              	.LCFI72:
 1414              		.cfi_def_cfa_register 7
 1415 073a 7860     		str	r0, [r7, #4]
 1416 073c 0B46     		mov	r3, r1
 1417 073e FB70     		strb	r3, [r7, #3]
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1418              		.loc 1 1094 0
 1419 0740 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1420 0742 002B     		cmp	r3, #0
 1421 0744 0DD0     		beq	.L44
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1422              		.loc 1 1096 0
 1423 0746 4FF46053 		mov	r3, #14336
 1424 074a C4F20203 		movt	r3, 16386
 1425 074e 4FF46052 		mov	r2, #14336
 1426 0752 C4F20202 		movt	r2, 16386
 1427 0756 126B     		ldr	r2, [r2, #48]
 1428 0758 1146     		mov	r1, r2
 1429 075a 7A68     		ldr	r2, [r7, #4]
 1430 075c 0A43     		orrs	r2, r2, r1
 1431 075e 1A63     		str	r2, [r3, #48]
 1432 0760 0EE0     		b	.L43
 1433              	.L44:
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1434              		.loc 1 1100 0
 1435 0762 4FF46053 		mov	r3, #14336
 1436 0766 C4F20203 		movt	r3, 16386
 1437 076a 4FF46052 		mov	r2, #14336
 1438 076e C4F20202 		movt	r2, 16386
 1439 0772 126B     		ldr	r2, [r2, #48]
 1440 0774 1146     		mov	r1, r2
 1441 0776 7A68     		ldr	r2, [r7, #4]
 1442 0778 6FEA0202 		mvn	r2, r2
 1443 077c 0A40     		ands	r2, r2, r1
 1444 077e 1A63     		str	r2, [r3, #48]
 1445              	.L43:
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1446              		.loc 1 1102 0
 1447 0780 07F10C07 		add	r7, r7, #12
 1448 0784 BD46     		mov	sp, r7
 1449 0786 80BC     		pop	{r7}
 1450 0788 7047     		bx	lr
 1451              		.cfi_endproc
 1452              	.LFE53:
 1454 078a 00BF     		.align	2
 1455              		.global	RCC_AHB2PeriphClockCmd
 1456              		.thumb
 1457              		.thumb_func
 1459              	RCC_AHB2PeriphClockCmd:
 1460              	.LFB54:
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it. 
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1461              		.loc 1 1121 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 8
 1464              		@ frame_needed = 1, uses_anonymous_args = 0
 1465              		@ link register save eliminated.
 1466 078c 80B4     		push	{r7}
 1467              	.LCFI73:
 1468              		.cfi_def_cfa_offset 4
 1469              		.cfi_offset 7, -4
 1470 078e 83B0     		sub	sp, sp, #12
 1471              	.LCFI74:
 1472              		.cfi_def_cfa_offset 16
 1473 0790 00AF     		add	r7, sp, #0
 1474              	.LCFI75:
 1475              		.cfi_def_cfa_register 7
 1476 0792 7860     		str	r0, [r7, #4]
 1477 0794 0B46     		mov	r3, r1
 1478 0796 FB70     		strb	r3, [r7, #3]
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1479              		.loc 1 1126 0
 1480 0798 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1481 079a 002B     		cmp	r3, #0
 1482 079c 0DD0     		beq	.L47
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1483              		.loc 1 1128 0
 1484 079e 4FF46053 		mov	r3, #14336
 1485 07a2 C4F20203 		movt	r3, 16386
 1486 07a6 4FF46052 		mov	r2, #14336
 1487 07aa C4F20202 		movt	r2, 16386
 1488 07ae 526B     		ldr	r2, [r2, #52]
 1489 07b0 1146     		mov	r1, r2
 1490 07b2 7A68     		ldr	r2, [r7, #4]
 1491 07b4 0A43     		orrs	r2, r2, r1
 1492 07b6 5A63     		str	r2, [r3, #52]
 1493 07b8 0EE0     		b	.L46
 1494              	.L47:
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1495              		.loc 1 1132 0
 1496 07ba 4FF46053 		mov	r3, #14336
 1497 07be C4F20203 		movt	r3, 16386
 1498 07c2 4FF46052 		mov	r2, #14336
 1499 07c6 C4F20202 		movt	r2, 16386
 1500 07ca 526B     		ldr	r2, [r2, #52]
 1501 07cc 1146     		mov	r1, r2
 1502 07ce 7A68     		ldr	r2, [r7, #4]
 1503 07d0 6FEA0202 		mvn	r2, r2
 1504 07d4 0A40     		ands	r2, r2, r1
 1505 07d6 5A63     		str	r2, [r3, #52]
 1506              	.L46:
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1507              		.loc 1 1134 0
 1508 07d8 07F10C07 		add	r7, r7, #12
 1509 07dc BD46     		mov	sp, r7
 1510 07de 80BC     		pop	{r7}
 1511 07e0 7047     		bx	lr
 1512              		.cfi_endproc
 1513              	.LFE54:
 1515 07e2 00BF     		.align	2
 1516              		.global	RCC_AHB3PeriphClockCmd
 1517              		.thumb
 1518              		.thumb_func
 1520              	RCC_AHB3PeriphClockCmd:
 1521              	.LFB55:
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it. 
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1522              		.loc 1 1148 0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 8
 1525              		@ frame_needed = 1, uses_anonymous_args = 0
 1526              		@ link register save eliminated.
 1527 07e4 80B4     		push	{r7}
 1528              	.LCFI76:
 1529              		.cfi_def_cfa_offset 4
 1530              		.cfi_offset 7, -4
 1531 07e6 83B0     		sub	sp, sp, #12
 1532              	.LCFI77:
 1533              		.cfi_def_cfa_offset 16
 1534 07e8 00AF     		add	r7, sp, #0
 1535              	.LCFI78:
 1536              		.cfi_def_cfa_register 7
 1537 07ea 7860     		str	r0, [r7, #4]
 1538 07ec 0B46     		mov	r3, r1
 1539 07ee FB70     		strb	r3, [r7, #3]
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1540              		.loc 1 1153 0
 1541 07f0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1542 07f2 002B     		cmp	r3, #0
 1543 07f4 0DD0     		beq	.L50
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1544              		.loc 1 1155 0
 1545 07f6 4FF46053 		mov	r3, #14336
 1546 07fa C4F20203 		movt	r3, 16386
 1547 07fe 4FF46052 		mov	r2, #14336
 1548 0802 C4F20202 		movt	r2, 16386
 1549 0806 926B     		ldr	r2, [r2, #56]
 1550 0808 1146     		mov	r1, r2
 1551 080a 7A68     		ldr	r2, [r7, #4]
 1552 080c 0A43     		orrs	r2, r2, r1
 1553 080e 9A63     		str	r2, [r3, #56]
 1554 0810 0EE0     		b	.L49
 1555              	.L50:
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1556              		.loc 1 1159 0
 1557 0812 4FF46053 		mov	r3, #14336
 1558 0816 C4F20203 		movt	r3, 16386
 1559 081a 4FF46052 		mov	r2, #14336
 1560 081e C4F20202 		movt	r2, 16386
 1561 0822 926B     		ldr	r2, [r2, #56]
 1562 0824 1146     		mov	r1, r2
 1563 0826 7A68     		ldr	r2, [r7, #4]
 1564 0828 6FEA0202 		mvn	r2, r2
 1565 082c 0A40     		ands	r2, r2, r1
 1566 082e 9A63     		str	r2, [r3, #56]
 1567              	.L49:
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1568              		.loc 1 1161 0
 1569 0830 07F10C07 		add	r7, r7, #12
 1570 0834 BD46     		mov	sp, r7
 1571 0836 80BC     		pop	{r7}
 1572 0838 7047     		bx	lr
 1573              		.cfi_endproc
 1574              	.LFE55:
 1576 083a 00BF     		.align	2
 1577              		.global	RCC_APB1PeriphClockCmd
 1578              		.thumb
 1579              		.thumb_func
 1581              	RCC_APB1PeriphClockCmd:
 1582              	.LFB56:
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it. 
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1583              		.loc 1 1198 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 8
 1586              		@ frame_needed = 1, uses_anonymous_args = 0
 1587              		@ link register save eliminated.
 1588 083c 80B4     		push	{r7}
 1589              	.LCFI79:
 1590              		.cfi_def_cfa_offset 4
 1591              		.cfi_offset 7, -4
 1592 083e 83B0     		sub	sp, sp, #12
 1593              	.LCFI80:
 1594              		.cfi_def_cfa_offset 16
 1595 0840 00AF     		add	r7, sp, #0
 1596              	.LCFI81:
 1597              		.cfi_def_cfa_register 7
 1598 0842 7860     		str	r0, [r7, #4]
 1599 0844 0B46     		mov	r3, r1
 1600 0846 FB70     		strb	r3, [r7, #3]
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1601              		.loc 1 1203 0
 1602 0848 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1603 084a 002B     		cmp	r3, #0
 1604 084c 0DD0     		beq	.L53
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1605              		.loc 1 1205 0
 1606 084e 4FF46053 		mov	r3, #14336
 1607 0852 C4F20203 		movt	r3, 16386
 1608 0856 4FF46052 		mov	r2, #14336
 1609 085a C4F20202 		movt	r2, 16386
 1610 085e 126C     		ldr	r2, [r2, #64]
 1611 0860 1146     		mov	r1, r2
 1612 0862 7A68     		ldr	r2, [r7, #4]
 1613 0864 0A43     		orrs	r2, r2, r1
 1614 0866 1A64     		str	r2, [r3, #64]
 1615 0868 0EE0     		b	.L52
 1616              	.L53:
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1617              		.loc 1 1209 0
 1618 086a 4FF46053 		mov	r3, #14336
 1619 086e C4F20203 		movt	r3, 16386
 1620 0872 4FF46052 		mov	r2, #14336
 1621 0876 C4F20202 		movt	r2, 16386
 1622 087a 126C     		ldr	r2, [r2, #64]
 1623 087c 1146     		mov	r1, r2
 1624 087e 7A68     		ldr	r2, [r7, #4]
 1625 0880 6FEA0202 		mvn	r2, r2
 1626 0884 0A40     		ands	r2, r2, r1
 1627 0886 1A64     		str	r2, [r3, #64]
 1628              	.L52:
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1629              		.loc 1 1211 0
 1630 0888 07F10C07 		add	r7, r7, #12
 1631 088c BD46     		mov	sp, r7
 1632 088e 80BC     		pop	{r7}
 1633 0890 7047     		bx	lr
 1634              		.cfi_endproc
 1635              	.LFE56:
 1637 0892 00BF     		.align	2
 1638              		.global	RCC_APB2PeriphClockCmd
 1639              		.thumb
 1640              		.thumb_func
 1642              	RCC_APB2PeriphClockCmd:
 1643              	.LFB57:
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         using it.
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1644              		.loc 1 1238 0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 8
 1647              		@ frame_needed = 1, uses_anonymous_args = 0
 1648              		@ link register save eliminated.
 1649 0894 80B4     		push	{r7}
 1650              	.LCFI82:
 1651              		.cfi_def_cfa_offset 4
 1652              		.cfi_offset 7, -4
 1653 0896 83B0     		sub	sp, sp, #12
 1654              	.LCFI83:
 1655              		.cfi_def_cfa_offset 16
 1656 0898 00AF     		add	r7, sp, #0
 1657              	.LCFI84:
 1658              		.cfi_def_cfa_register 7
 1659 089a 7860     		str	r0, [r7, #4]
 1660 089c 0B46     		mov	r3, r1
 1661 089e FB70     		strb	r3, [r7, #3]
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1662              		.loc 1 1243 0
 1663 08a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1664 08a2 002B     		cmp	r3, #0
 1665 08a4 0DD0     		beq	.L56
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1666              		.loc 1 1245 0
 1667 08a6 4FF46053 		mov	r3, #14336
 1668 08aa C4F20203 		movt	r3, 16386
 1669 08ae 4FF46052 		mov	r2, #14336
 1670 08b2 C4F20202 		movt	r2, 16386
 1671 08b6 526C     		ldr	r2, [r2, #68]
 1672 08b8 1146     		mov	r1, r2
 1673 08ba 7A68     		ldr	r2, [r7, #4]
 1674 08bc 0A43     		orrs	r2, r2, r1
 1675 08be 5A64     		str	r2, [r3, #68]
 1676 08c0 0EE0     		b	.L55
 1677              	.L56:
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1678              		.loc 1 1249 0
 1679 08c2 4FF46053 		mov	r3, #14336
 1680 08c6 C4F20203 		movt	r3, 16386
 1681 08ca 4FF46052 		mov	r2, #14336
 1682 08ce C4F20202 		movt	r2, 16386
 1683 08d2 526C     		ldr	r2, [r2, #68]
 1684 08d4 1146     		mov	r1, r2
 1685 08d6 7A68     		ldr	r2, [r7, #4]
 1686 08d8 6FEA0202 		mvn	r2, r2
 1687 08dc 0A40     		ands	r2, r2, r1
 1688 08de 5A64     		str	r2, [r3, #68]
 1689              	.L55:
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1690              		.loc 1 1251 0
 1691 08e0 07F10C07 		add	r7, r7, #12
 1692 08e4 BD46     		mov	sp, r7
 1693 08e6 80BC     		pop	{r7}
 1694 08e8 7047     		bx	lr
 1695              		.cfi_endproc
 1696              	.LFE57:
 1698 08ea 00BF     		.align	2
 1699              		.global	RCC_AHB1PeriphResetCmd
 1700              		.thumb
 1701              		.thumb_func
 1703              	RCC_AHB1PeriphResetCmd:
 1704              	.LFB58:
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *                  
1272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1705              		.loc 1 1277 0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 8
 1708              		@ frame_needed = 1, uses_anonymous_args = 0
 1709              		@ link register save eliminated.
 1710 08ec 80B4     		push	{r7}
 1711              	.LCFI85:
 1712              		.cfi_def_cfa_offset 4
 1713              		.cfi_offset 7, -4
 1714 08ee 83B0     		sub	sp, sp, #12
 1715              	.LCFI86:
 1716              		.cfi_def_cfa_offset 16
 1717 08f0 00AF     		add	r7, sp, #0
 1718              	.LCFI87:
 1719              		.cfi_def_cfa_register 7
 1720 08f2 7860     		str	r0, [r7, #4]
 1721 08f4 0B46     		mov	r3, r1
 1722 08f6 FB70     		strb	r3, [r7, #3]
1278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1723              		.loc 1 1282 0
 1724 08f8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1725 08fa 002B     		cmp	r3, #0
 1726 08fc 0DD0     		beq	.L59
1283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1727              		.loc 1 1284 0
 1728 08fe 4FF46053 		mov	r3, #14336
 1729 0902 C4F20203 		movt	r3, 16386
 1730 0906 4FF46052 		mov	r2, #14336
 1731 090a C4F20202 		movt	r2, 16386
 1732 090e 1269     		ldr	r2, [r2, #16]
 1733 0910 1146     		mov	r1, r2
 1734 0912 7A68     		ldr	r2, [r7, #4]
 1735 0914 0A43     		orrs	r2, r2, r1
 1736 0916 1A61     		str	r2, [r3, #16]
 1737 0918 0EE0     		b	.L58
 1738              	.L59:
1285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1739              		.loc 1 1288 0
 1740 091a 4FF46053 		mov	r3, #14336
 1741 091e C4F20203 		movt	r3, 16386
 1742 0922 4FF46052 		mov	r2, #14336
 1743 0926 C4F20202 		movt	r2, 16386
 1744 092a 1269     		ldr	r2, [r2, #16]
 1745 092c 1146     		mov	r1, r2
 1746 092e 7A68     		ldr	r2, [r7, #4]
 1747 0930 6FEA0202 		mvn	r2, r2
 1748 0934 0A40     		ands	r2, r2, r1
 1749 0936 1A61     		str	r2, [r3, #16]
 1750              	.L58:
1289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1751              		.loc 1 1290 0
 1752 0938 07F10C07 		add	r7, r7, #12
 1753 093c BD46     		mov	sp, r7
 1754 093e 80BC     		pop	{r7}
 1755 0940 7047     		bx	lr
 1756              		.cfi_endproc
 1757              	.LFE58:
 1759 0942 00BF     		.align	2
 1760              		.global	RCC_AHB2PeriphResetCmd
 1761              		.thumb
 1762              		.thumb_func
 1764              	RCC_AHB2PeriphResetCmd:
 1765              	.LFB59:
1291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1766              		.loc 1 1306 0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 8
 1769              		@ frame_needed = 1, uses_anonymous_args = 0
 1770              		@ link register save eliminated.
 1771 0944 80B4     		push	{r7}
 1772              	.LCFI88:
 1773              		.cfi_def_cfa_offset 4
 1774              		.cfi_offset 7, -4
 1775 0946 83B0     		sub	sp, sp, #12
 1776              	.LCFI89:
 1777              		.cfi_def_cfa_offset 16
 1778 0948 00AF     		add	r7, sp, #0
 1779              	.LCFI90:
 1780              		.cfi_def_cfa_register 7
 1781 094a 7860     		str	r0, [r7, #4]
 1782 094c 0B46     		mov	r3, r1
 1783 094e FB70     		strb	r3, [r7, #3]
1307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1784              		.loc 1 1311 0
 1785 0950 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1786 0952 002B     		cmp	r3, #0
 1787 0954 0DD0     		beq	.L62
1312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1788              		.loc 1 1313 0
 1789 0956 4FF46053 		mov	r3, #14336
 1790 095a C4F20203 		movt	r3, 16386
 1791 095e 4FF46052 		mov	r2, #14336
 1792 0962 C4F20202 		movt	r2, 16386
 1793 0966 5269     		ldr	r2, [r2, #20]
 1794 0968 1146     		mov	r1, r2
 1795 096a 7A68     		ldr	r2, [r7, #4]
 1796 096c 0A43     		orrs	r2, r2, r1
 1797 096e 5A61     		str	r2, [r3, #20]
 1798 0970 0EE0     		b	.L61
 1799              	.L62:
1314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1800              		.loc 1 1317 0
 1801 0972 4FF46053 		mov	r3, #14336
 1802 0976 C4F20203 		movt	r3, 16386
 1803 097a 4FF46052 		mov	r2, #14336
 1804 097e C4F20202 		movt	r2, 16386
 1805 0982 5269     		ldr	r2, [r2, #20]
 1806 0984 1146     		mov	r1, r2
 1807 0986 7A68     		ldr	r2, [r7, #4]
 1808 0988 6FEA0202 		mvn	r2, r2
 1809 098c 0A40     		ands	r2, r2, r1
 1810 098e 5A61     		str	r2, [r3, #20]
 1811              	.L61:
1318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1812              		.loc 1 1319 0
 1813 0990 07F10C07 		add	r7, r7, #12
 1814 0994 BD46     		mov	sp, r7
 1815 0996 80BC     		pop	{r7}
 1816 0998 7047     		bx	lr
 1817              		.cfi_endproc
 1818              	.LFE59:
 1820 099a 00BF     		.align	2
 1821              		.global	RCC_AHB3PeriphResetCmd
 1822              		.thumb
 1823              		.thumb_func
 1825              	RCC_AHB3PeriphResetCmd:
 1826              	.LFB60:
1320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1827              		.loc 1 1330 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 8
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832 099c 80B4     		push	{r7}
 1833              	.LCFI91:
 1834              		.cfi_def_cfa_offset 4
 1835              		.cfi_offset 7, -4
 1836 099e 83B0     		sub	sp, sp, #12
 1837              	.LCFI92:
 1838              		.cfi_def_cfa_offset 16
 1839 09a0 00AF     		add	r7, sp, #0
 1840              	.LCFI93:
 1841              		.cfi_def_cfa_register 7
 1842 09a2 7860     		str	r0, [r7, #4]
 1843 09a4 0B46     		mov	r3, r1
 1844 09a6 FB70     		strb	r3, [r7, #3]
1331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1845              		.loc 1 1335 0
 1846 09a8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1847 09aa 002B     		cmp	r3, #0
 1848 09ac 0DD0     		beq	.L65
1336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1849              		.loc 1 1337 0
 1850 09ae 4FF46053 		mov	r3, #14336
 1851 09b2 C4F20203 		movt	r3, 16386
 1852 09b6 4FF46052 		mov	r2, #14336
 1853 09ba C4F20202 		movt	r2, 16386
 1854 09be 9269     		ldr	r2, [r2, #24]
 1855 09c0 1146     		mov	r1, r2
 1856 09c2 7A68     		ldr	r2, [r7, #4]
 1857 09c4 0A43     		orrs	r2, r2, r1
 1858 09c6 9A61     		str	r2, [r3, #24]
 1859 09c8 0EE0     		b	.L64
 1860              	.L65:
1338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1861              		.loc 1 1341 0
 1862 09ca 4FF46053 		mov	r3, #14336
 1863 09ce C4F20203 		movt	r3, 16386
 1864 09d2 4FF46052 		mov	r2, #14336
 1865 09d6 C4F20202 		movt	r2, 16386
 1866 09da 9269     		ldr	r2, [r2, #24]
 1867 09dc 1146     		mov	r1, r2
 1868 09de 7A68     		ldr	r2, [r7, #4]
 1869 09e0 6FEA0202 		mvn	r2, r2
 1870 09e4 0A40     		ands	r2, r2, r1
 1871 09e6 9A61     		str	r2, [r3, #24]
 1872              	.L64:
1342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1873              		.loc 1 1343 0
 1874 09e8 07F10C07 		add	r7, r7, #12
 1875 09ec BD46     		mov	sp, r7
 1876 09ee 80BC     		pop	{r7}
 1877 09f0 7047     		bx	lr
 1878              		.cfi_endproc
 1879              	.LFE60:
 1881 09f2 00BF     		.align	2
 1882              		.global	RCC_APB1PeriphResetCmd
 1883              		.thumb
 1884              		.thumb_func
 1886              	RCC_APB1PeriphResetCmd:
 1887              	.LFB61:
1344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1888              		.loc 1 1377 0
 1889              		.cfi_startproc
 1890              		@ args = 0, pretend = 0, frame = 8
 1891              		@ frame_needed = 1, uses_anonymous_args = 0
 1892              		@ link register save eliminated.
 1893 09f4 80B4     		push	{r7}
 1894              	.LCFI94:
 1895              		.cfi_def_cfa_offset 4
 1896              		.cfi_offset 7, -4
 1897 09f6 83B0     		sub	sp, sp, #12
 1898              	.LCFI95:
 1899              		.cfi_def_cfa_offset 16
 1900 09f8 00AF     		add	r7, sp, #0
 1901              	.LCFI96:
 1902              		.cfi_def_cfa_register 7
 1903 09fa 7860     		str	r0, [r7, #4]
 1904 09fc 0B46     		mov	r3, r1
 1905 09fe FB70     		strb	r3, [r7, #3]
1378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1906              		.loc 1 1381 0
 1907 0a00 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1908 0a02 002B     		cmp	r3, #0
 1909 0a04 0DD0     		beq	.L68
1382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1910              		.loc 1 1383 0
 1911 0a06 4FF46053 		mov	r3, #14336
 1912 0a0a C4F20203 		movt	r3, 16386
 1913 0a0e 4FF46052 		mov	r2, #14336
 1914 0a12 C4F20202 		movt	r2, 16386
 1915 0a16 126A     		ldr	r2, [r2, #32]
 1916 0a18 1146     		mov	r1, r2
 1917 0a1a 7A68     		ldr	r2, [r7, #4]
 1918 0a1c 0A43     		orrs	r2, r2, r1
 1919 0a1e 1A62     		str	r2, [r3, #32]
 1920 0a20 0EE0     		b	.L67
 1921              	.L68:
1384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1922              		.loc 1 1387 0
 1923 0a22 4FF46053 		mov	r3, #14336
 1924 0a26 C4F20203 		movt	r3, 16386
 1925 0a2a 4FF46052 		mov	r2, #14336
 1926 0a2e C4F20202 		movt	r2, 16386
 1927 0a32 126A     		ldr	r2, [r2, #32]
 1928 0a34 1146     		mov	r1, r2
 1929 0a36 7A68     		ldr	r2, [r7, #4]
 1930 0a38 6FEA0202 		mvn	r2, r2
 1931 0a3c 0A40     		ands	r2, r2, r1
 1932 0a3e 1A62     		str	r2, [r3, #32]
 1933              	.L67:
1388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1934              		.loc 1 1389 0
 1935 0a40 07F10C07 		add	r7, r7, #12
 1936 0a44 BD46     		mov	sp, r7
 1937 0a46 80BC     		pop	{r7}
 1938 0a48 7047     		bx	lr
 1939              		.cfi_endproc
 1940              	.LFE61:
 1942 0a4a 00BF     		.align	2
 1943              		.global	RCC_APB2PeriphResetCmd
 1944              		.thumb
 1945              		.thumb_func
 1947              	RCC_APB2PeriphResetCmd:
 1948              	.LFB62:
1390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 1949              		.loc 1 1413 0
 1950              		.cfi_startproc
 1951              		@ args = 0, pretend = 0, frame = 8
 1952              		@ frame_needed = 1, uses_anonymous_args = 0
 1953              		@ link register save eliminated.
 1954 0a4c 80B4     		push	{r7}
 1955              	.LCFI97:
 1956              		.cfi_def_cfa_offset 4
 1957              		.cfi_offset 7, -4
 1958 0a4e 83B0     		sub	sp, sp, #12
 1959              	.LCFI98:
 1960              		.cfi_def_cfa_offset 16
 1961 0a50 00AF     		add	r7, sp, #0
 1962              	.LCFI99:
 1963              		.cfi_def_cfa_register 7
 1964 0a52 7860     		str	r0, [r7, #4]
 1965 0a54 0B46     		mov	r3, r1
 1966 0a56 FB70     		strb	r3, [r7, #3]
1414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 1967              		.loc 1 1417 0
 1968 0a58 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1969 0a5a 002B     		cmp	r3, #0
 1970 0a5c 0DD0     		beq	.L71
1418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1971              		.loc 1 1419 0
 1972 0a5e 4FF46053 		mov	r3, #14336
 1973 0a62 C4F20203 		movt	r3, 16386
 1974 0a66 4FF46052 		mov	r2, #14336
 1975 0a6a C4F20202 		movt	r2, 16386
 1976 0a6e 526A     		ldr	r2, [r2, #36]
 1977 0a70 1146     		mov	r1, r2
 1978 0a72 7A68     		ldr	r2, [r7, #4]
 1979 0a74 0A43     		orrs	r2, r2, r1
 1980 0a76 5A62     		str	r2, [r3, #36]
 1981 0a78 0EE0     		b	.L70
 1982              	.L71:
1420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1983              		.loc 1 1423 0
 1984 0a7a 4FF46053 		mov	r3, #14336
 1985 0a7e C4F20203 		movt	r3, 16386
 1986 0a82 4FF46052 		mov	r2, #14336
 1987 0a86 C4F20202 		movt	r2, 16386
 1988 0a8a 526A     		ldr	r2, [r2, #36]
 1989 0a8c 1146     		mov	r1, r2
 1990 0a8e 7A68     		ldr	r2, [r7, #4]
 1991 0a90 6FEA0202 		mvn	r2, r2
 1992 0a94 0A40     		ands	r2, r2, r1
 1993 0a96 5A62     		str	r2, [r3, #36]
 1994              	.L70:
1424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 1995              		.loc 1 1425 0
 1996 0a98 07F10C07 		add	r7, r7, #12
 1997 0a9c BD46     		mov	sp, r7
 1998 0a9e 80BC     		pop	{r7}
 1999 0aa0 7047     		bx	lr
 2000              		.cfi_endproc
 2001              	.LFE62:
 2003 0aa2 00BF     		.align	2
 2004              		.global	RCC_AHB1PeriphClockLPModeCmd
 2005              		.thumb
 2006              		.thumb_func
 2008              	RCC_AHB1PeriphClockLPModeCmd:
 2009              	.LFB63:
1426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         power consumption.
1431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2010              		.loc 1 1459 0
 2011              		.cfi_startproc
 2012              		@ args = 0, pretend = 0, frame = 8
 2013              		@ frame_needed = 1, uses_anonymous_args = 0
 2014              		@ link register save eliminated.
 2015 0aa4 80B4     		push	{r7}
 2016              	.LCFI100:
 2017              		.cfi_def_cfa_offset 4
 2018              		.cfi_offset 7, -4
 2019 0aa6 83B0     		sub	sp, sp, #12
 2020              	.LCFI101:
 2021              		.cfi_def_cfa_offset 16
 2022 0aa8 00AF     		add	r7, sp, #0
 2023              	.LCFI102:
 2024              		.cfi_def_cfa_register 7
 2025 0aaa 7860     		str	r0, [r7, #4]
 2026 0aac 0B46     		mov	r3, r1
 2027 0aae FB70     		strb	r3, [r7, #3]
1460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 2028              		.loc 1 1463 0
 2029 0ab0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2030 0ab2 002B     		cmp	r3, #0
 2031 0ab4 0DD0     		beq	.L74
1464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2032              		.loc 1 1465 0
 2033 0ab6 4FF46053 		mov	r3, #14336
 2034 0aba C4F20203 		movt	r3, 16386
 2035 0abe 4FF46052 		mov	r2, #14336
 2036 0ac2 C4F20202 		movt	r2, 16386
 2037 0ac6 126D     		ldr	r2, [r2, #80]
 2038 0ac8 1146     		mov	r1, r2
 2039 0aca 7A68     		ldr	r2, [r7, #4]
 2040 0acc 0A43     		orrs	r2, r2, r1
 2041 0ace 1A65     		str	r2, [r3, #80]
 2042 0ad0 0EE0     		b	.L73
 2043              	.L74:
1466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 2044              		.loc 1 1469 0
 2045 0ad2 4FF46053 		mov	r3, #14336
 2046 0ad6 C4F20203 		movt	r3, 16386
 2047 0ada 4FF46052 		mov	r2, #14336
 2048 0ade C4F20202 		movt	r2, 16386
 2049 0ae2 126D     		ldr	r2, [r2, #80]
 2050 0ae4 1146     		mov	r1, r2
 2051 0ae6 7A68     		ldr	r2, [r7, #4]
 2052 0ae8 6FEA0202 		mvn	r2, r2
 2053 0aec 0A40     		ands	r2, r2, r1
 2054 0aee 1A65     		str	r2, [r3, #80]
 2055              	.L73:
1470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2056              		.loc 1 1471 0
 2057 0af0 07F10C07 		add	r7, r7, #12
 2058 0af4 BD46     		mov	sp, r7
 2059 0af6 80BC     		pop	{r7}
 2060 0af8 7047     		bx	lr
 2061              		.cfi_endproc
 2062              	.LFE63:
 2064 0afa 00BF     		.align	2
 2065              		.global	RCC_AHB2PeriphClockLPModeCmd
 2066              		.thumb
 2067              		.thumb_func
 2069              	RCC_AHB2PeriphClockLPModeCmd:
 2070              	.LFB64:
1472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *           power consumption.
1477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2071              		.loc 1 1491 0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 8
 2074              		@ frame_needed = 1, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 2076 0afc 80B4     		push	{r7}
 2077              	.LCFI103:
 2078              		.cfi_def_cfa_offset 4
 2079              		.cfi_offset 7, -4
 2080 0afe 83B0     		sub	sp, sp, #12
 2081              	.LCFI104:
 2082              		.cfi_def_cfa_offset 16
 2083 0b00 00AF     		add	r7, sp, #0
 2084              	.LCFI105:
 2085              		.cfi_def_cfa_register 7
 2086 0b02 7860     		str	r0, [r7, #4]
 2087 0b04 0B46     		mov	r3, r1
 2088 0b06 FB70     		strb	r3, [r7, #3]
1492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 2089              		.loc 1 1495 0
 2090 0b08 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2091 0b0a 002B     		cmp	r3, #0
 2092 0b0c 0DD0     		beq	.L77
1496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2093              		.loc 1 1497 0
 2094 0b0e 4FF46053 		mov	r3, #14336
 2095 0b12 C4F20203 		movt	r3, 16386
 2096 0b16 4FF46052 		mov	r2, #14336
 2097 0b1a C4F20202 		movt	r2, 16386
 2098 0b1e 526D     		ldr	r2, [r2, #84]
 2099 0b20 1146     		mov	r1, r2
 2100 0b22 7A68     		ldr	r2, [r7, #4]
 2101 0b24 0A43     		orrs	r2, r2, r1
 2102 0b26 5A65     		str	r2, [r3, #84]
 2103 0b28 0EE0     		b	.L76
 2104              	.L77:
1498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2105              		.loc 1 1501 0
 2106 0b2a 4FF46053 		mov	r3, #14336
 2107 0b2e C4F20203 		movt	r3, 16386
 2108 0b32 4FF46052 		mov	r2, #14336
 2109 0b36 C4F20202 		movt	r2, 16386
 2110 0b3a 526D     		ldr	r2, [r2, #84]
 2111 0b3c 1146     		mov	r1, r2
 2112 0b3e 7A68     		ldr	r2, [r7, #4]
 2113 0b40 6FEA0202 		mvn	r2, r2
 2114 0b44 0A40     		ands	r2, r2, r1
 2115 0b46 5A65     		str	r2, [r3, #84]
 2116              	.L76:
1502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2117              		.loc 1 1503 0
 2118 0b48 07F10C07 		add	r7, r7, #12
 2119 0b4c BD46     		mov	sp, r7
 2120 0b4e 80BC     		pop	{r7}
 2121 0b50 7047     		bx	lr
 2122              		.cfi_endproc
 2123              	.LFE64:
 2125 0b52 00BF     		.align	2
 2126              		.global	RCC_AHB3PeriphClockLPModeCmd
 2127              		.thumb
 2128              		.thumb_func
 2130              	RCC_AHB3PeriphClockLPModeCmd:
 2131              	.LFB65:
1504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         power consumption.
1509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2132              		.loc 1 1518 0
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 8
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136              		@ link register save eliminated.
 2137 0b54 80B4     		push	{r7}
 2138              	.LCFI106:
 2139              		.cfi_def_cfa_offset 4
 2140              		.cfi_offset 7, -4
 2141 0b56 83B0     		sub	sp, sp, #12
 2142              	.LCFI107:
 2143              		.cfi_def_cfa_offset 16
 2144 0b58 00AF     		add	r7, sp, #0
 2145              	.LCFI108:
 2146              		.cfi_def_cfa_register 7
 2147 0b5a 7860     		str	r0, [r7, #4]
 2148 0b5c 0B46     		mov	r3, r1
 2149 0b5e FB70     		strb	r3, [r7, #3]
1519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 2150              		.loc 1 1522 0
 2151 0b60 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2152 0b62 002B     		cmp	r3, #0
 2153 0b64 0DD0     		beq	.L80
1523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2154              		.loc 1 1524 0
 2155 0b66 4FF46053 		mov	r3, #14336
 2156 0b6a C4F20203 		movt	r3, 16386
 2157 0b6e 4FF46052 		mov	r2, #14336
 2158 0b72 C4F20202 		movt	r2, 16386
 2159 0b76 926D     		ldr	r2, [r2, #88]
 2160 0b78 1146     		mov	r1, r2
 2161 0b7a 7A68     		ldr	r2, [r7, #4]
 2162 0b7c 0A43     		orrs	r2, r2, r1
 2163 0b7e 9A65     		str	r2, [r3, #88]
 2164 0b80 0EE0     		b	.L79
 2165              	.L80:
1525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2166              		.loc 1 1528 0
 2167 0b82 4FF46053 		mov	r3, #14336
 2168 0b86 C4F20203 		movt	r3, 16386
 2169 0b8a 4FF46052 		mov	r2, #14336
 2170 0b8e C4F20202 		movt	r2, 16386
 2171 0b92 926D     		ldr	r2, [r2, #88]
 2172 0b94 1146     		mov	r1, r2
 2173 0b96 7A68     		ldr	r2, [r7, #4]
 2174 0b98 6FEA0202 		mvn	r2, r2
 2175 0b9c 0A40     		ands	r2, r2, r1
 2176 0b9e 9A65     		str	r2, [r3, #88]
 2177              	.L79:
1529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2178              		.loc 1 1530 0
 2179 0ba0 07F10C07 		add	r7, r7, #12
 2180 0ba4 BD46     		mov	sp, r7
 2181 0ba6 80BC     		pop	{r7}
 2182 0ba8 7047     		bx	lr
 2183              		.cfi_endproc
 2184              	.LFE65:
 2186 0baa 00BF     		.align	2
 2187              		.global	RCC_APB1PeriphClockLPModeCmd
 2188              		.thumb
 2189              		.thumb_func
 2191              	RCC_APB1PeriphClockLPModeCmd:
 2192              	.LFB66:
1531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         power consumption.
1536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2193              		.loc 1 1568 0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 8
 2196              		@ frame_needed = 1, uses_anonymous_args = 0
 2197              		@ link register save eliminated.
 2198 0bac 80B4     		push	{r7}
 2199              	.LCFI109:
 2200              		.cfi_def_cfa_offset 4
 2201              		.cfi_offset 7, -4
 2202 0bae 83B0     		sub	sp, sp, #12
 2203              	.LCFI110:
 2204              		.cfi_def_cfa_offset 16
 2205 0bb0 00AF     		add	r7, sp, #0
 2206              	.LCFI111:
 2207              		.cfi_def_cfa_register 7
 2208 0bb2 7860     		str	r0, [r7, #4]
 2209 0bb4 0B46     		mov	r3, r1
 2210 0bb6 FB70     		strb	r3, [r7, #3]
1569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 2211              		.loc 1 1572 0
 2212 0bb8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2213 0bba 002B     		cmp	r3, #0
 2214 0bbc 0DD0     		beq	.L83
1573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2215              		.loc 1 1574 0
 2216 0bbe 4FF46053 		mov	r3, #14336
 2217 0bc2 C4F20203 		movt	r3, 16386
 2218 0bc6 4FF46052 		mov	r2, #14336
 2219 0bca C4F20202 		movt	r2, 16386
 2220 0bce 126E     		ldr	r2, [r2, #96]
 2221 0bd0 1146     		mov	r1, r2
 2222 0bd2 7A68     		ldr	r2, [r7, #4]
 2223 0bd4 0A43     		orrs	r2, r2, r1
 2224 0bd6 1A66     		str	r2, [r3, #96]
 2225 0bd8 0EE0     		b	.L82
 2226              	.L83:
1575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2227              		.loc 1 1578 0
 2228 0bda 4FF46053 		mov	r3, #14336
 2229 0bde C4F20203 		movt	r3, 16386
 2230 0be2 4FF46052 		mov	r2, #14336
 2231 0be6 C4F20202 		movt	r2, 16386
 2232 0bea 126E     		ldr	r2, [r2, #96]
 2233 0bec 1146     		mov	r1, r2
 2234 0bee 7A68     		ldr	r2, [r7, #4]
 2235 0bf0 6FEA0202 		mvn	r2, r2
 2236 0bf4 0A40     		ands	r2, r2, r1
 2237 0bf6 1A66     		str	r2, [r3, #96]
 2238              	.L82:
1579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2239              		.loc 1 1580 0
 2240 0bf8 07F10C07 		add	r7, r7, #12
 2241 0bfc BD46     		mov	sp, r7
 2242 0bfe 80BC     		pop	{r7}
 2243 0c00 7047     		bx	lr
 2244              		.cfi_endproc
 2245              	.LFE66:
 2247 0c02 00BF     		.align	2
 2248              		.global	RCC_APB2PeriphClockLPModeCmd
 2249              		.thumb
 2250              		.thumb_func
 2252              	RCC_APB2PeriphClockLPModeCmd:
 2253              	.LFB67:
1581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         power consumption.
1586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2254              		.loc 1 1608 0
 2255              		.cfi_startproc
 2256              		@ args = 0, pretend = 0, frame = 8
 2257              		@ frame_needed = 1, uses_anonymous_args = 0
 2258              		@ link register save eliminated.
 2259 0c04 80B4     		push	{r7}
 2260              	.LCFI112:
 2261              		.cfi_def_cfa_offset 4
 2262              		.cfi_offset 7, -4
 2263 0c06 83B0     		sub	sp, sp, #12
 2264              	.LCFI113:
 2265              		.cfi_def_cfa_offset 16
 2266 0c08 00AF     		add	r7, sp, #0
 2267              	.LCFI114:
 2268              		.cfi_def_cfa_register 7
 2269 0c0a 7860     		str	r0, [r7, #4]
 2270 0c0c 0B46     		mov	r3, r1
 2271 0c0e FB70     		strb	r3, [r7, #3]
1609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 2272              		.loc 1 1612 0
 2273 0c10 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2274 0c12 002B     		cmp	r3, #0
 2275 0c14 0DD0     		beq	.L86
1613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2276              		.loc 1 1614 0
 2277 0c16 4FF46053 		mov	r3, #14336
 2278 0c1a C4F20203 		movt	r3, 16386
 2279 0c1e 4FF46052 		mov	r2, #14336
 2280 0c22 C4F20202 		movt	r2, 16386
 2281 0c26 526E     		ldr	r2, [r2, #100]
 2282 0c28 1146     		mov	r1, r2
 2283 0c2a 7A68     		ldr	r2, [r7, #4]
 2284 0c2c 0A43     		orrs	r2, r2, r1
 2285 0c2e 5A66     		str	r2, [r3, #100]
 2286 0c30 0EE0     		b	.L85
 2287              	.L86:
1615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2288              		.loc 1 1618 0
 2289 0c32 4FF46053 		mov	r3, #14336
 2290 0c36 C4F20203 		movt	r3, 16386
 2291 0c3a 4FF46052 		mov	r2, #14336
 2292 0c3e C4F20202 		movt	r2, 16386
 2293 0c42 526E     		ldr	r2, [r2, #100]
 2294 0c44 1146     		mov	r1, r2
 2295 0c46 7A68     		ldr	r2, [r7, #4]
 2296 0c48 6FEA0202 		mvn	r2, r2
 2297 0c4c 0A40     		ands	r2, r2, r1
 2298 0c4e 5A66     		str	r2, [r3, #100]
 2299              	.L85:
1619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2300              		.loc 1 1620 0
 2301 0c50 07F10C07 		add	r7, r7, #12
 2302 0c54 BD46     		mov	sp, r7
 2303 0c56 80BC     		pop	{r7}
 2304 0c58 7047     		bx	lr
 2305              		.cfi_endproc
 2306              	.LFE67:
 2308 0c5a 00BF     		.align	2
 2309              		.global	RCC_ITConfig
 2310              		.thumb
 2311              		.thumb_func
 2313              	RCC_ITConfig:
 2314              	.LFB68:
1621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @}
1624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  *
1629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @verbatim   
1630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================
1631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****                    Interrupts and flags management functions
1632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****  ===============================================================================  
1633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** @endverbatim
1635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @{
1636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2315              		.loc 1 1653 0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 8
 2318              		@ frame_needed = 1, uses_anonymous_args = 0
 2319              		@ link register save eliminated.
 2320 0c5c 80B4     		push	{r7}
 2321              	.LCFI115:
 2322              		.cfi_def_cfa_offset 4
 2323              		.cfi_offset 7, -4
 2324 0c5e 83B0     		sub	sp, sp, #12
 2325              	.LCFI116:
 2326              		.cfi_def_cfa_offset 16
 2327 0c60 00AF     		add	r7, sp, #0
 2328              	.LCFI117:
 2329              		.cfi_def_cfa_register 7
 2330 0c62 0246     		mov	r2, r0
 2331 0c64 0B46     		mov	r3, r1
 2332 0c66 FA71     		strb	r2, [r7, #7]
 2333 0c68 BB71     		strb	r3, [r7, #6]
1654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (NewState != DISABLE)
 2334              		.loc 1 1657 0
 2335 0c6a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2336 0c6c 002B     		cmp	r3, #0
 2337 0c6e 0ED0     		beq	.L89
1658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2338              		.loc 1 1660 0
 2339 0c70 43F60D03 		movw	r3, #14349
 2340 0c74 C4F20203 		movt	r3, 16386
 2341 0c78 43F60D02 		movw	r2, #14349
 2342 0c7c C4F20202 		movt	r2, 16386
 2343 0c80 1278     		ldrb	r2, [r2, #0]
 2344 0c82 D1B2     		uxtb	r1, r2
 2345 0c84 FA79     		ldrb	r2, [r7, #7]
 2346 0c86 0A43     		orrs	r2, r2, r1
 2347 0c88 D2B2     		uxtb	r2, r2
 2348 0c8a 1A70     		strb	r2, [r3, #0]
 2349 0c8c 10E0     		b	.L88
 2350              	.L89:
1661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2351              		.loc 1 1665 0
 2352 0c8e 43F60D03 		movw	r3, #14349
 2353 0c92 C4F20203 		movt	r3, 16386
 2354 0c96 43F60D02 		movw	r2, #14349
 2355 0c9a C4F20202 		movt	r2, 16386
 2356 0c9e 1278     		ldrb	r2, [r2, #0]
 2357 0ca0 D1B2     		uxtb	r1, r2
 2358 0ca2 FA79     		ldrb	r2, [r7, #7]
 2359 0ca4 6FEA0202 		mvn	r2, r2
 2360 0ca8 D2B2     		uxtb	r2, r2
 2361 0caa 0A40     		ands	r2, r2, r1
 2362 0cac D2B2     		uxtb	r2, r2
 2363 0cae 1A70     		strb	r2, [r3, #0]
 2364              	.L88:
1666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2365              		.loc 1 1667 0
 2366 0cb0 07F10C07 		add	r7, r7, #12
 2367 0cb4 BD46     		mov	sp, r7
 2368 0cb6 80BC     		pop	{r7}
 2369 0cb8 7047     		bx	lr
 2370              		.cfi_endproc
 2371              	.LFE68:
 2373 0cba 00BF     		.align	2
 2374              		.global	RCC_GetFlagStatus
 2375              		.thumb
 2376              		.thumb_func
 2378              	RCC_GetFlagStatus:
 2379              	.LFB69:
1668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
1673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2380              		.loc 1 1689 0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 24
 2383              		@ frame_needed = 1, uses_anonymous_args = 0
 2384              		@ link register save eliminated.
 2385 0cbc 80B4     		push	{r7}
 2386              	.LCFI118:
 2387              		.cfi_def_cfa_offset 4
 2388              		.cfi_offset 7, -4
 2389 0cbe 87B0     		sub	sp, sp, #28
 2390              	.LCFI119:
 2391              		.cfi_def_cfa_offset 32
 2392 0cc0 00AF     		add	r7, sp, #0
 2393              	.LCFI120:
 2394              		.cfi_def_cfa_register 7
 2395 0cc2 0346     		mov	r3, r0
 2396 0cc4 FB71     		strb	r3, [r7, #7]
1690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t tmp = 0;
 2397              		.loc 1 1690 0
 2398 0cc6 4FF00003 		mov	r3, #0
 2399 0cca FB60     		str	r3, [r7, #12]
1691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   uint32_t statusreg = 0;
 2400              		.loc 1 1691 0
 2401 0ccc 4FF00003 		mov	r3, #0
 2402 0cd0 7B61     		str	r3, [r7, #20]
1692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2403              		.loc 1 1692 0
 2404 0cd2 4FF00003 		mov	r3, #0
 2405 0cd6 FB74     		strb	r3, [r7, #19]
1693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get the RCC register index */
1698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2406              		.loc 1 1698 0
 2407 0cd8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2408 0cda 4FEA5313 		lsr	r3, r3, #5
 2409 0cde DBB2     		uxtb	r3, r3
 2410 0ce0 FB60     		str	r3, [r7, #12]
1699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2411              		.loc 1 1699 0
 2412 0ce2 FB68     		ldr	r3, [r7, #12]
 2413 0ce4 012B     		cmp	r3, #1
 2414 0ce6 06D1     		bne	.L92
1700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     statusreg = RCC->CR;
 2415              		.loc 1 1701 0
 2416 0ce8 4FF46053 		mov	r3, #14336
 2417 0cec C4F20203 		movt	r3, 16386
 2418 0cf0 1B68     		ldr	r3, [r3, #0]
 2419 0cf2 7B61     		str	r3, [r7, #20]
 2420 0cf4 0FE0     		b	.L93
 2421              	.L92:
1702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2422              		.loc 1 1703 0
 2423 0cf6 FB68     		ldr	r3, [r7, #12]
 2424 0cf8 022B     		cmp	r3, #2
 2425 0cfa 06D1     		bne	.L94
1704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     statusreg = RCC->BDCR;
 2426              		.loc 1 1705 0
 2427 0cfc 4FF46053 		mov	r3, #14336
 2428 0d00 C4F20203 		movt	r3, 16386
 2429 0d04 1B6F     		ldr	r3, [r3, #112]
 2430 0d06 7B61     		str	r3, [r7, #20]
 2431 0d08 05E0     		b	.L93
 2432              	.L94:
1706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     statusreg = RCC->CSR;
 2433              		.loc 1 1709 0
 2434 0d0a 4FF46053 		mov	r3, #14336
 2435 0d0e C4F20203 		movt	r3, 16386
 2436 0d12 5B6F     		ldr	r3, [r3, #116]
 2437 0d14 7B61     		str	r3, [r7, #20]
 2438              	.L93:
1710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Get the flag position */
1713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2439              		.loc 1 1713 0
 2440 0d16 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2441 0d18 03F01F03 		and	r3, r3, #31
 2442 0d1c FB60     		str	r3, [r7, #12]
1714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2443              		.loc 1 1714 0
 2444 0d1e FB68     		ldr	r3, [r7, #12]
 2445 0d20 7A69     		ldr	r2, [r7, #20]
 2446 0d22 22FA03F3 		lsr	r3, r2, r3
 2447 0d26 03F00103 		and	r3, r3, #1
 2448 0d2a DBB2     		uxtb	r3, r3
 2449 0d2c 002B     		cmp	r3, #0
 2450 0d2e 03D0     		beq	.L95
1715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     bitstatus = SET;
 2451              		.loc 1 1716 0
 2452 0d30 4FF00103 		mov	r3, #1
 2453 0d34 FB74     		strb	r3, [r7, #19]
 2454 0d36 02E0     		b	.L96
 2455              	.L95:
1717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     bitstatus = RESET;
 2456              		.loc 1 1720 0
 2457 0d38 4FF00003 		mov	r3, #0
 2458 0d3c FB74     		strb	r3, [r7, #19]
 2459              	.L96:
1721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Return the flag status */
1723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   return bitstatus;
 2460              		.loc 1 1723 0
 2461 0d3e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2462              		.loc 1 1724 0
 2463 0d40 1846     		mov	r0, r3
 2464 0d42 07F11C07 		add	r7, r7, #28
 2465 0d46 BD46     		mov	sp, r7
 2466 0d48 80BC     		pop	{r7}
 2467 0d4a 7047     		bx	lr
 2468              		.cfi_endproc
 2469              	.LFE69:
 2471              		.align	2
 2472              		.global	RCC_ClearFlag
 2473              		.thumb
 2474              		.thumb_func
 2476              	RCC_ClearFlag:
 2477              	.LFB70:
1725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  None
1731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_ClearFlag(void)
1734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2478              		.loc 1 1734 0
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 0
 2481              		@ frame_needed = 1, uses_anonymous_args = 0
 2482              		@ link register save eliminated.
 2483 0d4c 80B4     		push	{r7}
 2484              	.LCFI121:
 2485              		.cfi_def_cfa_offset 4
 2486              		.cfi_offset 7, -4
 2487 0d4e 00AF     		add	r7, sp, #0
 2488              	.LCFI122:
 2489              		.cfi_def_cfa_register 7
1735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2490              		.loc 1 1736 0
 2491 0d50 4FF46053 		mov	r3, #14336
 2492 0d54 C4F20203 		movt	r3, 16386
 2493 0d58 4FF46052 		mov	r2, #14336
 2494 0d5c C4F20202 		movt	r2, 16386
 2495 0d60 526F     		ldr	r2, [r2, #116]
 2496 0d62 42F08072 		orr	r2, r2, #16777216
 2497 0d66 5A67     		str	r2, [r3, #116]
1737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2498              		.loc 1 1737 0
 2499 0d68 BD46     		mov	sp, r7
 2500 0d6a 80BC     		pop	{r7}
 2501 0d6c 7047     		bx	lr
 2502              		.cfi_endproc
 2503              	.LFE70:
 2505 0d6e 00BF     		.align	2
 2506              		.global	RCC_GetITStatus
 2507              		.thumb
 2508              		.thumb_func
 2510              	RCC_GetITStatus:
 2511              	.LFB71:
1738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be one of the following values:
1743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2512              		.loc 1 1753 0
 2513              		.cfi_startproc
 2514              		@ args = 0, pretend = 0, frame = 16
 2515              		@ frame_needed = 1, uses_anonymous_args = 0
 2516              		@ link register save eliminated.
 2517 0d70 80B4     		push	{r7}
 2518              	.LCFI123:
 2519              		.cfi_def_cfa_offset 4
 2520              		.cfi_offset 7, -4
 2521 0d72 85B0     		sub	sp, sp, #20
 2522              	.LCFI124:
 2523              		.cfi_def_cfa_offset 24
 2524 0d74 00AF     		add	r7, sp, #0
 2525              	.LCFI125:
 2526              		.cfi_def_cfa_register 7
 2527 0d76 0346     		mov	r3, r0
 2528 0d78 FB71     		strb	r3, [r7, #7]
1754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   ITStatus bitstatus = RESET;
 2529              		.loc 1 1754 0
 2530 0d7a 4FF00003 		mov	r3, #0
 2531 0d7e FB73     		strb	r3, [r7, #15]
1755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2532              		.loc 1 1760 0
 2533 0d80 4FF46053 		mov	r3, #14336
 2534 0d84 C4F20203 		movt	r3, 16386
 2535 0d88 DB68     		ldr	r3, [r3, #12]
 2536 0d8a 1A46     		mov	r2, r3
 2537 0d8c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2538 0d8e 1340     		ands	r3, r3, r2
 2539 0d90 002B     		cmp	r3, #0
 2540 0d92 03D0     		beq	.L99
1761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     bitstatus = SET;
 2541              		.loc 1 1762 0
 2542 0d94 4FF00103 		mov	r3, #1
 2543 0d98 FB73     		strb	r3, [r7, #15]
 2544 0d9a 02E0     		b	.L100
 2545              	.L99:
1763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   else
1765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   {
1766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****     bitstatus = RESET;
 2546              		.loc 1 1766 0
 2547 0d9c 4FF00003 		mov	r3, #0
 2548 0da0 FB73     		strb	r3, [r7, #15]
 2549              	.L100:
1767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   }
1768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Return the RCC_IT status */
1769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   return  bitstatus;
 2550              		.loc 1 1769 0
 2551 0da2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2552              		.loc 1 1770 0
 2553 0da4 1846     		mov	r0, r3
 2554 0da6 07F11407 		add	r7, r7, #20
 2555 0daa BD46     		mov	sp, r7
 2556 0dac 80BC     		pop	{r7}
 2557 0dae 7047     		bx	lr
 2558              		.cfi_endproc
 2559              	.LFE71:
 2561              		.align	2
 2562              		.global	RCC_ClearITPendingBit
 2563              		.thumb
 2564              		.thumb_func
 2566              	RCC_ClearITPendingBit:
 2567              	.LFB72:
1771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** /**
1773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   * @retval None
1784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   */
1785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** {
 2568              		.loc 1 1786 0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 8
 2571              		@ frame_needed = 1, uses_anonymous_args = 0
 2572              		@ link register save eliminated.
 2573 0db0 80B4     		push	{r7}
 2574              	.LCFI126:
 2575              		.cfi_def_cfa_offset 4
 2576              		.cfi_offset 7, -4
 2577 0db2 83B0     		sub	sp, sp, #12
 2578              	.LCFI127:
 2579              		.cfi_def_cfa_offset 16
 2580 0db4 00AF     		add	r7, sp, #0
 2581              	.LCFI128:
 2582              		.cfi_def_cfa_register 7
 2583 0db6 0346     		mov	r3, r0
 2584 0db8 FB71     		strb	r3, [r7, #7]
1787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Check the parameters */
1788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** 
1790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****      pending bits */
1792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2585              		.loc 1 1792 0
 2586 0dba 43F60E03 		movw	r3, #14350
 2587 0dbe C4F20203 		movt	r3, 16386
 2588 0dc2 FA79     		ldrb	r2, [r7, #7]
 2589 0dc4 1A70     		strb	r2, [r3, #0]
1793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rcc.c **** }
 2590              		.loc 1 1793 0
 2591 0dc6 07F10C07 		add	r7, r7, #12
 2592 0dca BD46     		mov	sp, r7
 2593 0dcc 80BC     		pop	{r7}
 2594 0dce 7047     		bx	lr
 2595              		.cfi_endproc
 2596              	.LFE72:
 2598              	.Letext0:
 2599              		.file 2 "c:/cad/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 2600              		.file 3 "C:\\workspace\\te_stm32f207_simple\\system/stm32f2xx.h"
 2601              		.file 4 "C:\\workspace\\te_stm32f207_simple\\STM32F2xx_StdPeriph_Driver\\inc/stm32f2xx_rcc.h"
 2602              		.file 5 "C:\\workspace\\te_stm32f207_simple\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_rcc.c
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:18     .data:00000000 $d
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:21     .data:00000000 APBAHBPrescTable
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:39     .text:00000000 $t
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:44     .text:00000000 RCC_DeInit
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:112    .text:00000084 RCC_HSEConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:154    .text:000000b4 RCC_WaitForHSEStartUp
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2378   .text:00000cbc RCC_GetFlagStatus
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:228    .text:00000118 RCC_AdjustHSICalibrationValue
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:283    .text:00000160 RCC_HSICmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:320    .text:00000180 RCC_LSEConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:389    .text:000001e0 RCC_LSICmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:426    .text:00000200 RCC_PLLConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:480    .text:00000248 RCC_PLLCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:517    .text:00000268 RCC_PLLI2SConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:558    .text:00000298 RCC_PLLI2SCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:595    .text:000002b8 RCC_ClockSecuritySystemCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:632    .text:000002d8 RCC_MCO1Config
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:688    .text:00000320 RCC_MCO2Config
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:744    .text:00000368 RCC_SYSCLKConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:797    .text:000003a8 RCC_GetSYSCLKSource
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:831    .text:000003c8 RCC_HCLKConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:884    .text:00000408 RCC_PCLK1Config
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:937    .text:00000448 RCC_PCLK2Config
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:991    .text:0000048c RCC_GetClocksFreq
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1215   .text:0000065c RCC_RTCCLKConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1288   .text:000006d4 RCC_RTCCLKCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1325   .text:000006f4 RCC_BackupResetCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1362   .text:00000714 RCC_I2SCLKConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1398   .text:00000734 RCC_AHB1PeriphClockCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1459   .text:0000078c RCC_AHB2PeriphClockCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1520   .text:000007e4 RCC_AHB3PeriphClockCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1581   .text:0000083c RCC_APB1PeriphClockCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1642   .text:00000894 RCC_APB2PeriphClockCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1703   .text:000008ec RCC_AHB1PeriphResetCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1764   .text:00000944 RCC_AHB2PeriphResetCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1825   .text:0000099c RCC_AHB3PeriphResetCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1886   .text:000009f4 RCC_APB1PeriphResetCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:1947   .text:00000a4c RCC_APB2PeriphResetCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2008   .text:00000aa4 RCC_AHB1PeriphClockLPModeCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2069   .text:00000afc RCC_AHB2PeriphClockLPModeCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2130   .text:00000b54 RCC_AHB3PeriphClockLPModeCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2191   .text:00000bac RCC_APB1PeriphClockLPModeCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2252   .text:00000c04 RCC_APB2PeriphClockLPModeCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2313   .text:00000c5c RCC_ITConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2476   .text:00000d4c RCC_ClearFlag
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2510   .text:00000d70 RCC_GetITStatus
C:\Users\IARISC~1\AppData\Local\Temp\cc7ROIbn.s:2566   .text:00000db0 RCC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
