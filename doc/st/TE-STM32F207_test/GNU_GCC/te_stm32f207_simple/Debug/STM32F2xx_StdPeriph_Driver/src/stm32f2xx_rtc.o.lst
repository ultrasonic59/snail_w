   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	2
  18              		.global	RTC_DeInit
  19              		.thumb
  20              		.thumb_func
  22              	RTC_DeInit:
  23              	.LFB29:
  24              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c"
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @file    stm32f2xx_rtc.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Initialization
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Daylight Saving configuration
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Output pin Configuration
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Coarse Calibration configuration
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - TimeStamp configuration
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Tampers configuration
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Backup Data Registers configuration
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           - Interrupts and flags management
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *  @verbatim
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                               Backup Domain Operating Condition
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          VDD supply is powered off.
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          source.
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            1 - The RTC
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            2 - The LSE oscillator
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          to VDD), the following functions are available:
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                    Backup Domain Reset
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          occurs:
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                RCC_BackupResetCmd().
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                powered off.
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                   Backup Domain Access
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          write accesses. 
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                   RTC Driver: how to use it
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Time and Date configuration
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===========================
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              and RTC_SetDate() functions.
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              functions.
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              hour to the RTC Calendar.    
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Alarm configuration
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          RTC Wakeup configuration
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ========================
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function  
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Outputs configuration
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          =====================
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The RTC has 2 different outputs:
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              and WaKeUp signals.          
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC_OutputConfig() function.                
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFO_CALIB: this output is used to manage the RTC Clock divided 
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              by 64 (512Hz) signal.
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Coarse Calibration configuration
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          =================================
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function  
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          TimeStamp configuration
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          =======================
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function to select the corresponding pin.     
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Tamper configuration
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ====================
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Configure the RTC Tamper trigger using the RTC_TamperConfig() 
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function to select the corresponding pin.   
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          Backup Data Registers configuration
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.  
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *              function.
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * 
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                  RTC and low power modes
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           function.
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           and Standby lowpower modes.
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           or the RTC wakeup events.
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           clock source is LSE or LSI.
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFO_ALARM output
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFO_CALIB output
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFI_TAMPER
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFI_TIMESTAMP
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          ===================================================================
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFI_TAMPER
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            - AFI_TIMESTAMP
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * 
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *  @endverbatim
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ******************************************************************************
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @attention
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ******************************************************************************
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */ 
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #include "stm32f2xx_rtc.h"
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #include "stm32f2xx_rcc.h"
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC 
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief RTC driver modules
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Masks Definition */
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00008000)
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Private_Functions
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */ 
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                  Initialization and Configuration functions
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   synchronization check and reference clock detection enable.
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****        prescaler to a high value to minimize consumption.
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      counting after 4 RTCCLK cycles.
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      (RSF clear and RSF check).
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         registers.       
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
  25              		.loc 1 347 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 16
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 14, -4
  33              		.cfi_offset 7, -8
  34 0002 84B0     		sub	sp, sp, #16
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 24
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  40              		.loc 1 348 0
  41 0006 4FF00003 		mov	r3, #0
  42 000a 7B60     		str	r3, [r7, #4]
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  43              		.loc 1 349 0
  44 000c 4FF00003 		mov	r3, #0
  45 0010 BB60     		str	r3, [r7, #8]
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
  46              		.loc 1 350 0
  47 0012 4FF00003 		mov	r3, #0
  48 0016 FB73     		strb	r3, [r7, #15]
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
  49              		.loc 1 353 0
  50 0018 4FF42053 		mov	r3, #10240
  51 001c C4F20003 		movt	r3, 16384
  52 0020 4FF0CA02 		mov	r2, #202
  53 0024 5A62     		str	r2, [r3, #36]
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
  54              		.loc 1 354 0
  55 0026 4FF42053 		mov	r3, #10240
  56 002a C4F20003 		movt	r3, 16384
  57 002e 4FF05302 		mov	r2, #83
  58 0032 5A62     		str	r2, [r3, #36]
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  59              		.loc 1 357 0
  60 0034 FFF7FEFF 		bl	RTC_EnterInitMode
  61 0038 0346     		mov	r3, r0
  62 003a 002B     		cmp	r3, #0
  63 003c 03D1     		bne	.L2
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
  64              		.loc 1 359 0
  65 003e 4FF00003 		mov	r3, #0
  66 0042 FB73     		strb	r3, [r7, #15]
  67 0044 84E0     		b	.L3
  68              	.L2:
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Reset TR, DR and CR registers */
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  69              		.loc 1 364 0
  70 0046 4FF42053 		mov	r3, #10240
  71 004a C4F20003 		movt	r3, 16384
  72 004e 4FF00002 		mov	r2, #0
  73 0052 1A60     		str	r2, [r3, #0]
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  74              		.loc 1 365 0
  75 0054 4FF42053 		mov	r3, #10240
  76 0058 C4F20003 		movt	r3, 16384
  77 005c 42F20112 		movw	r2, #8449
  78 0060 5A60     		str	r2, [r3, #4]
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  79              		.loc 1 367 0
  80 0062 4FF42053 		mov	r3, #10240
  81 0066 C4F20003 		movt	r3, 16384
  82 006a 4FF42052 		mov	r2, #10240
  83 006e C4F20002 		movt	r2, 16384
  84 0072 9268     		ldr	r2, [r2, #8]
  85 0074 02F00702 		and	r2, r2, #7
  86 0078 9A60     		str	r2, [r3, #8]
  87              	.L5:
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     do
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  88              		.loc 1 372 0 discriminator 1
  89 007a 4FF42053 		mov	r3, #10240
  90 007e C4F20003 		movt	r3, 16384
  91 0082 DB68     		ldr	r3, [r3, #12]
  92 0084 03F00403 		and	r3, r3, #4
  93 0088 BB60     		str	r3, [r7, #8]
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       wutcounter++;  
  94              		.loc 1 373 0 discriminator 1
  95 008a 7B68     		ldr	r3, [r7, #4]
  96 008c 03F10103 		add	r3, r3, #1
  97 0090 7B60     		str	r3, [r7, #4]
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
  98              		.loc 1 374 0 discriminator 1
  99 0092 7B68     		ldr	r3, [r7, #4]
 100 0094 B3F5803F 		cmp	r3, #65536
 101 0098 02D0     		beq	.L4
 102 009a BB68     		ldr	r3, [r7, #8]
 103 009c 002B     		cmp	r3, #0
 104 009e ECD0     		beq	.L5
 105              	.L4:
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 106              		.loc 1 376 0
 107 00a0 4FF42053 		mov	r3, #10240
 108 00a4 C4F20003 		movt	r3, 16384
 109 00a8 DB68     		ldr	r3, [r3, #12]
 110 00aa 03F00403 		and	r3, r3, #4
 111 00ae 002B     		cmp	r3, #0
 112 00b0 03D1     		bne	.L6
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 113              		.loc 1 378 0
 114 00b2 4FF00003 		mov	r3, #0
 115 00b6 FB73     		strb	r3, [r7, #15]
 116 00b8 4AE0     		b	.L3
 117              	.L6:
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Reset all RTC CR register bits */
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 118              		.loc 1 383 0
 119 00ba 4FF42053 		mov	r3, #10240
 120 00be C4F20003 		movt	r3, 16384
 121 00c2 9B68     		ldr	r3, [r3, #8]
 122 00c4 4FF42053 		mov	r3, #10240
 123 00c8 C4F20003 		movt	r3, 16384
 124 00cc 4FF00002 		mov	r2, #0
 125 00d0 9A60     		str	r2, [r3, #8]
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 126              		.loc 1 384 0
 127 00d2 4FF42053 		mov	r3, #10240
 128 00d6 C4F20003 		movt	r3, 16384
 129 00da 4FF6FF72 		movw	r2, #65535
 130 00de 5A61     		str	r2, [r3, #20]
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 131              		.loc 1 385 0
 132 00e0 4FF42053 		mov	r3, #10240
 133 00e4 C4F20003 		movt	r3, 16384
 134 00e8 4FF0FF02 		mov	r2, #255
 135 00ec C0F27F02 		movt	r2, 127
 136 00f0 1A61     		str	r2, [r3, #16]
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 137              		.loc 1 386 0
 138 00f2 4FF42053 		mov	r3, #10240
 139 00f6 C4F20003 		movt	r3, 16384
 140 00fa 4FF00002 		mov	r2, #0
 141 00fe 9A61     		str	r2, [r3, #24]
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 142              		.loc 1 387 0
 143 0100 4FF42053 		mov	r3, #10240
 144 0104 C4F20003 		movt	r3, 16384
 145 0108 4FF00002 		mov	r2, #0
 146 010c DA61     		str	r2, [r3, #28]
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 147              		.loc 1 388 0
 148 010e 4FF42053 		mov	r3, #10240
 149 0112 C4F20003 		movt	r3, 16384
 150 0116 4FF00002 		mov	r2, #0
 151 011a 1A62     		str	r2, [r3, #32]
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 152              		.loc 1 391 0
 153 011c 4FF42053 		mov	r3, #10240
 154 0120 C4F20003 		movt	r3, 16384
 155 0124 4FF00002 		mov	r2, #0
 156 0128 DA60     		str	r2, [r3, #12]
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 157              		.loc 1 394 0
 158 012a 4FF42053 		mov	r3, #10240
 159 012e C4F20003 		movt	r3, 16384
 160 0132 4FF00002 		mov	r2, #0
 161 0136 1A64     		str	r2, [r3, #64]
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 162              		.loc 1 396 0
 163 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 164 013c 0346     		mov	r3, r0
 165 013e 002B     		cmp	r3, #0
 166 0140 03D1     		bne	.L7
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       {
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****         status = ERROR;
 167              		.loc 1 398 0
 168 0142 4FF00003 		mov	r3, #0
 169 0146 FB73     		strb	r3, [r7, #15]
 170 0148 02E0     		b	.L3
 171              	.L7:
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       }
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       else
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       {
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****         status = SUCCESS;      
 172              		.loc 1 402 0
 173 014a 4FF00103 		mov	r3, #1
 174 014e FB73     		strb	r3, [r7, #15]
 175              	.L3:
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       }
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF;  
 176              		.loc 1 408 0
 177 0150 4FF42053 		mov	r3, #10240
 178 0154 C4F20003 		movt	r3, 16384
 179 0158 4FF0FF02 		mov	r2, #255
 180 015c 5A62     		str	r2, [r3, #36]
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 181              		.loc 1 410 0
 182 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 183              		.loc 1 411 0
 184 0160 1846     		mov	r0, r3
 185 0162 07F11007 		add	r7, r7, #16
 186 0166 BD46     		mov	sp, r7
 187 0168 80BD     		pop	{r7, pc}
 188              		.cfi_endproc
 189              	.LFE29:
 191 016a 00BF     		.align	2
 192              		.global	RTC_Init
 193              		.thumb
 194              		.thumb_func
 196              	RTC_Init:
 197              	.LFB30:
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         in RTC_InitStruct.
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialization mode only.  
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 198              		.loc 1 425 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 16
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 016c 80B5     		push	{r7, lr}
 203              	.LCFI3:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 14, -4
 206              		.cfi_offset 7, -8
 207 016e 84B0     		sub	sp, sp, #16
 208              	.LCFI4:
 209              		.cfi_def_cfa_offset 24
 210 0170 00AF     		add	r7, sp, #0
 211              	.LCFI5:
 212              		.cfi_def_cfa_register 7
 213 0172 7860     		str	r0, [r7, #4]
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 214              		.loc 1 426 0
 215 0174 4FF00003 		mov	r3, #0
 216 0178 FB73     		strb	r3, [r7, #15]
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 217              		.loc 1 434 0
 218 017a 4FF42053 		mov	r3, #10240
 219 017e C4F20003 		movt	r3, 16384
 220 0182 4FF0CA02 		mov	r2, #202
 221 0186 5A62     		str	r2, [r3, #36]
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 222              		.loc 1 435 0
 223 0188 4FF42053 		mov	r3, #10240
 224 018c C4F20003 		movt	r3, 16384
 225 0190 4FF05302 		mov	r2, #83
 226 0194 5A62     		str	r2, [r3, #36]
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 227              		.loc 1 438 0
 228 0196 FFF7FEFF 		bl	RTC_EnterInitMode
 229 019a 0346     		mov	r3, r0
 230 019c 002B     		cmp	r3, #0
 231 019e 03D1     		bne	.L9
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 232              		.loc 1 440 0
 233 01a0 4FF00003 		mov	r3, #0
 234 01a4 FB73     		strb	r3, [r7, #15]
 235 01a6 35E0     		b	.L10
 236              	.L9:
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 237              		.loc 1 445 0
 238 01a8 4FF42053 		mov	r3, #10240
 239 01ac C4F20003 		movt	r3, 16384
 240 01b0 4FF42052 		mov	r2, #10240
 241 01b4 C4F20002 		movt	r2, 16384
 242 01b8 9268     		ldr	r2, [r2, #8]
 243 01ba 22F04002 		bic	r2, r2, #64
 244 01be 9A60     		str	r2, [r3, #8]
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set RTC_CR register */
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 245              		.loc 1 447 0
 246 01c0 4FF42053 		mov	r3, #10240
 247 01c4 C4F20003 		movt	r3, 16384
 248 01c8 4FF42052 		mov	r2, #10240
 249 01cc C4F20002 		movt	r2, 16384
 250 01d0 9268     		ldr	r2, [r2, #8]
 251 01d2 1146     		mov	r1, r2
 252 01d4 7A68     		ldr	r2, [r7, #4]
 253 01d6 1268     		ldr	r2, [r2, #0]
 254 01d8 0A43     		orrs	r2, r2, r1
 255 01da 9A60     		str	r2, [r3, #8]
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the RTC PRER */
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 256              		.loc 1 450 0
 257 01dc 4FF42053 		mov	r3, #10240
 258 01e0 C4F20003 		movt	r3, 16384
 259 01e4 7A68     		ldr	r2, [r7, #4]
 260 01e6 9268     		ldr	r2, [r2, #8]
 261 01e8 1A61     		str	r2, [r3, #16]
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 262              		.loc 1 451 0
 263 01ea 4FF42053 		mov	r3, #10240
 264 01ee C4F20003 		movt	r3, 16384
 265 01f2 4FF42052 		mov	r2, #10240
 266 01f6 C4F20002 		movt	r2, 16384
 267 01fa 1269     		ldr	r2, [r2, #16]
 268 01fc 1146     		mov	r1, r2
 269 01fe 7A68     		ldr	r2, [r7, #4]
 270 0200 5268     		ldr	r2, [r2, #4]
 271 0202 4FEA0242 		lsl	r2, r2, #16
 272 0206 0A43     		orrs	r2, r2, r1
 273 0208 1A61     		str	r2, [r3, #16]
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode();
 274              		.loc 1 454 0
 275 020a FFF7FEFF 		bl	RTC_ExitInitMode
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;    
 276              		.loc 1 456 0
 277 020e 4FF00103 		mov	r3, #1
 278 0212 FB73     		strb	r3, [r7, #15]
 279              	.L10:
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 280              		.loc 1 459 0
 281 0214 4FF42053 		mov	r3, #10240
 282 0218 C4F20003 		movt	r3, 16384
 283 021c 4FF0FF02 		mov	r2, #255
 284 0220 5A62     		str	r2, [r3, #36]
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 285              		.loc 1 461 0
 286 0222 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 287              		.loc 1 462 0
 288 0224 1846     		mov	r0, r3
 289 0226 07F11007 		add	r7, r7, #16
 290 022a BD46     		mov	sp, r7
 291 022c 80BD     		pop	{r7, pc}
 292              		.cfi_endproc
 293              	.LFE30:
 295 022e 00BF     		.align	2
 296              		.global	RTC_StructInit
 297              		.thumb
 298              		.thumb_func
 300              	RTC_StructInit:
 301              	.LFB31:
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialized.
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 302              		.loc 1 471 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 8
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307 0230 80B4     		push	{r7}
 308              	.LCFI6:
 309              		.cfi_def_cfa_offset 4
 310              		.cfi_offset 7, -4
 311 0232 83B0     		sub	sp, sp, #12
 312              	.LCFI7:
 313              		.cfi_def_cfa_offset 16
 314 0234 00AF     		add	r7, sp, #0
 315              	.LCFI8:
 316              		.cfi_def_cfa_register 7
 317 0236 7860     		str	r0, [r7, #4]
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 318              		.loc 1 473 0
 319 0238 7B68     		ldr	r3, [r7, #4]
 320 023a 4FF00002 		mov	r2, #0
 321 023e 1A60     		str	r2, [r3, #0]
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 322              		.loc 1 476 0
 323 0240 7B68     		ldr	r3, [r7, #4]
 324 0242 4FF07F02 		mov	r2, #127
 325 0246 5A60     		str	r2, [r3, #4]
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 326              		.loc 1 479 0
 327 0248 7B68     		ldr	r3, [r7, #4]
 328 024a 4FF0FF02 		mov	r2, #255
 329 024e 9A60     		str	r2, [r3, #8]
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 330              		.loc 1 480 0
 331 0250 07F10C07 		add	r7, r7, #12
 332 0254 BD46     		mov	sp, r7
 333 0256 80BC     		pop	{r7}
 334 0258 7047     		bx	lr
 335              		.cfi_endproc
 336              	.LFE31:
 338 025a 00BF     		.align	2
 339              		.global	RTC_WriteProtectionCmd
 340              		.thumb
 341              		.thumb_func
 343              	RTC_WriteProtectionCmd:
 344              	.LFB32:
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the write protection.
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 345              		.loc 1 493 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350 025c 80B4     		push	{r7}
 351              	.LCFI9:
 352              		.cfi_def_cfa_offset 4
 353              		.cfi_offset 7, -4
 354 025e 83B0     		sub	sp, sp, #12
 355              	.LCFI10:
 356              		.cfi_def_cfa_offset 16
 357 0260 00AF     		add	r7, sp, #0
 358              	.LCFI11:
 359              		.cfi_def_cfa_register 7
 360 0262 0346     		mov	r3, r0
 361 0264 FB71     		strb	r3, [r7, #7]
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 362              		.loc 1 497 0
 363 0266 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 364 0268 002B     		cmp	r3, #0
 365 026a 07D0     		beq	.L13
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Enable the write protection for RTC registers */
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->WPR = 0xFF;   
 366              		.loc 1 500 0
 367 026c 4FF42053 		mov	r3, #10240
 368 0270 C4F20003 		movt	r3, 16384
 369 0274 4FF0FF02 		mov	r2, #255
 370 0278 5A62     		str	r2, [r3, #36]
 371 027a 0DE0     		b	.L12
 372              	.L13:
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the write protection for RTC registers */
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->WPR = 0xCA;
 373              		.loc 1 505 0
 374 027c 4FF42053 		mov	r3, #10240
 375 0280 C4F20003 		movt	r3, 16384
 376 0284 4FF0CA02 		mov	r2, #202
 377 0288 5A62     		str	r2, [r3, #36]
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->WPR = 0x53;    
 378              		.loc 1 506 0
 379 028a 4FF42053 		mov	r3, #10240
 380 028e C4F20003 		movt	r3, 16384
 381 0292 4FF05302 		mov	r2, #83
 382 0296 5A62     		str	r2, [r3, #36]
 383              	.L12:
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 384              		.loc 1 508 0
 385 0298 07F10C07 		add	r7, r7, #12
 386 029c BD46     		mov	sp, r7
 387 029e 80BC     		pop	{r7}
 388 02a0 7047     		bx	lr
 389              		.cfi_endproc
 390              	.LFE32:
 392 02a2 00BF     		.align	2
 393              		.global	RTC_EnterInitMode
 394              		.thumb
 395              		.thumb_func
 397              	RTC_EnterInitMode:
 398              	.LFB33:
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 399              		.loc 1 520 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 16
 402              		@ frame_needed = 1, uses_anonymous_args = 0
 403              		@ link register save eliminated.
 404 02a4 80B4     		push	{r7}
 405              	.LCFI12:
 406              		.cfi_def_cfa_offset 4
 407              		.cfi_offset 7, -4
 408 02a6 85B0     		sub	sp, sp, #20
 409              	.LCFI13:
 410              		.cfi_def_cfa_offset 24
 411 02a8 00AF     		add	r7, sp, #0
 412              	.LCFI14:
 413              		.cfi_def_cfa_register 7
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 414              		.loc 1 521 0
 415 02aa 4FF00003 		mov	r3, #0
 416 02ae 7B60     		str	r3, [r7, #4]
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 417              		.loc 1 522 0
 418 02b0 4FF00003 		mov	r3, #0
 419 02b4 FB73     		strb	r3, [r7, #15]
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t initstatus = 0x00;
 420              		.loc 1 523 0
 421 02b6 4FF00003 		mov	r3, #0
 422 02ba BB60     		str	r3, [r7, #8]
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check if the Initialization mode is set */
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 423              		.loc 1 526 0
 424 02bc 4FF42053 		mov	r3, #10240
 425 02c0 C4F20003 		movt	r3, 16384
 426 02c4 DB68     		ldr	r3, [r3, #12]
 427 02c6 03F04003 		and	r3, r3, #64
 428 02ca 002B     		cmp	r3, #0
 429 02cc 2AD1     		bne	.L16
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set the Initialization mode */
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 430              		.loc 1 529 0
 431 02ce 4FF42053 		mov	r3, #10240
 432 02d2 C4F20003 		movt	r3, 16384
 433 02d6 4FF0FF32 		mov	r2, #-1
 434 02da DA60     		str	r2, [r3, #12]
 435              	.L18:
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     do
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 436              		.loc 1 534 0 discriminator 1
 437 02dc 4FF42053 		mov	r3, #10240
 438 02e0 C4F20003 		movt	r3, 16384
 439 02e4 DB68     		ldr	r3, [r3, #12]
 440 02e6 03F04003 		and	r3, r3, #64
 441 02ea BB60     		str	r3, [r7, #8]
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       initcounter++;  
 442              		.loc 1 535 0 discriminator 1
 443 02ec 7B68     		ldr	r3, [r7, #4]
 444 02ee 03F10103 		add	r3, r3, #1
 445 02f2 7B60     		str	r3, [r7, #4]
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 446              		.loc 1 536 0 discriminator 1
 447 02f4 7B68     		ldr	r3, [r7, #4]
 448 02f6 B3F5803F 		cmp	r3, #65536
 449 02fa 02D0     		beq	.L17
 450 02fc BB68     		ldr	r3, [r7, #8]
 451 02fe 002B     		cmp	r3, #0
 452 0300 ECD0     		beq	.L18
 453              	.L17:
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 454              		.loc 1 538 0
 455 0302 4FF42053 		mov	r3, #10240
 456 0306 C4F20003 		movt	r3, 16384
 457 030a DB68     		ldr	r3, [r3, #12]
 458 030c 03F04003 		and	r3, r3, #64
 459 0310 002B     		cmp	r3, #0
 460 0312 03D0     		beq	.L19
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 461              		.loc 1 540 0
 462 0314 4FF00103 		mov	r3, #1
 463 0318 FB73     		strb	r3, [r7, #15]
 464 031a 06E0     		b	.L20
 465              	.L19:
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 466              		.loc 1 544 0
 467 031c 4FF00003 		mov	r3, #0
 468 0320 FB73     		strb	r3, [r7, #15]
 469 0322 02E0     		b	.L20
 470              	.L16:
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }        
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;  
 471              		.loc 1 549 0
 472 0324 4FF00103 		mov	r3, #1
 473 0328 FB73     		strb	r3, [r7, #15]
 474              	.L20:
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (status);  
 475              		.loc 1 552 0
 476 032a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 477              		.loc 1 553 0
 478 032c 1846     		mov	r0, r3
 479 032e 07F11407 		add	r7, r7, #20
 480 0332 BD46     		mov	sp, r7
 481 0334 80BC     		pop	{r7}
 482 0336 7047     		bx	lr
 483              		.cfi_endproc
 484              	.LFE33:
 486              		.align	2
 487              		.global	RTC_ExitInitMode
 488              		.thumb
 489              		.thumb_func
 491              	RTC_ExitInitMode:
 492              	.LFB34:
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_ExitInitMode(void)
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** { 
 493              		.loc 1 565 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497              		@ link register save eliminated.
 498 0338 80B4     		push	{r7}
 499              	.LCFI15:
 500              		.cfi_def_cfa_offset 4
 501              		.cfi_offset 7, -4
 502 033a 00AF     		add	r7, sp, #0
 503              	.LCFI16:
 504              		.cfi_def_cfa_register 7
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Exit Initialization mode */
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 505              		.loc 1 567 0
 506 033c 4FF42053 		mov	r3, #10240
 507 0340 C4F20003 		movt	r3, 16384
 508 0344 4FF42052 		mov	r2, #10240
 509 0348 C4F20002 		movt	r2, 16384
 510 034c D268     		ldr	r2, [r2, #12]
 511 034e 22F08002 		bic	r2, r2, #128
 512 0352 DA60     		str	r2, [r3, #12]
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 513              		.loc 1 568 0
 514 0354 BD46     		mov	sp, r7
 515 0356 80BC     		pop	{r7}
 516 0358 7047     		bx	lr
 517              		.cfi_endproc
 518              	.LFE34:
 520 035a 00BF     		.align	2
 521              		.global	RTC_WaitForSynchro
 522              		.thumb
 523              		.thumb_func
 525              	RTC_WaitForSynchro:
 526              	.LFB35:
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         synchronized with RTC APB clock.
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         the software must first clear the RSF flag. 
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 527              		.loc 1 587 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 16
 530              		@ frame_needed = 1, uses_anonymous_args = 0
 531              		@ link register save eliminated.
 532 035c 80B4     		push	{r7}
 533              	.LCFI17:
 534              		.cfi_def_cfa_offset 4
 535              		.cfi_offset 7, -4
 536 035e 85B0     		sub	sp, sp, #20
 537              	.LCFI18:
 538              		.cfi_def_cfa_offset 24
 539 0360 00AF     		add	r7, sp, #0
 540              	.LCFI19:
 541              		.cfi_def_cfa_register 7
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 542              		.loc 1 588 0
 543 0362 4FF00003 		mov	r3, #0
 544 0366 7B60     		str	r3, [r7, #4]
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 545              		.loc 1 589 0
 546 0368 4FF00003 		mov	r3, #0
 547 036c FB73     		strb	r3, [r7, #15]
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 548              		.loc 1 590 0
 549 036e 4FF00003 		mov	r3, #0
 550 0372 BB60     		str	r3, [r7, #8]
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 551              		.loc 1 593 0
 552 0374 4FF42053 		mov	r3, #10240
 553 0378 C4F20003 		movt	r3, 16384
 554 037c 4FF0CA02 		mov	r2, #202
 555 0380 5A62     		str	r2, [r3, #36]
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 556              		.loc 1 594 0
 557 0382 4FF42053 		mov	r3, #10240
 558 0386 C4F20003 		movt	r3, 16384
 559 038a 4FF05302 		mov	r2, #83
 560 038e 5A62     		str	r2, [r3, #36]
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear RSF flag */
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 561              		.loc 1 597 0
 562 0390 4FF42053 		mov	r3, #10240
 563 0394 C4F20003 		movt	r3, 16384
 564 0398 4FF42052 		mov	r2, #10240
 565 039c C4F20002 		movt	r2, 16384
 566 03a0 D268     		ldr	r2, [r2, #12]
 567 03a2 22F0A002 		bic	r2, r2, #160
 568 03a6 DA60     		str	r2, [r3, #12]
 569              	.L24:
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Wait the registers to be synchronised */
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   do
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 570              		.loc 1 602 0 discriminator 1
 571 03a8 4FF42053 		mov	r3, #10240
 572 03ac C4F20003 		movt	r3, 16384
 573 03b0 DB68     		ldr	r3, [r3, #12]
 574 03b2 03F02003 		and	r3, r3, #32
 575 03b6 BB60     		str	r3, [r7, #8]
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     synchrocounter++;  
 576              		.loc 1 603 0 discriminator 1
 577 03b8 7B68     		ldr	r3, [r7, #4]
 578 03ba 03F10103 		add	r3, r3, #1
 579 03be 7B60     		str	r3, [r7, #4]
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 580              		.loc 1 604 0 discriminator 1
 581 03c0 7B68     		ldr	r3, [r7, #4]
 582 03c2 B3F5004F 		cmp	r3, #32768
 583 03c6 02D0     		beq	.L23
 584 03c8 BB68     		ldr	r3, [r7, #8]
 585 03ca 002B     		cmp	r3, #0
 586 03cc ECD0     		beq	.L24
 587              	.L23:
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 588              		.loc 1 606 0
 589 03ce 4FF42053 		mov	r3, #10240
 590 03d2 C4F20003 		movt	r3, 16384
 591 03d6 DB68     		ldr	r3, [r3, #12]
 592 03d8 03F02003 		and	r3, r3, #32
 593 03dc 002B     		cmp	r3, #0
 594 03de 03D0     		beq	.L25
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;
 595              		.loc 1 608 0
 596 03e0 4FF00103 		mov	r3, #1
 597 03e4 FB73     		strb	r3, [r7, #15]
 598 03e6 02E0     		b	.L26
 599              	.L25:
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 600              		.loc 1 612 0
 601 03e8 4FF00003 		mov	r3, #0
 602 03ec FB73     		strb	r3, [r7, #15]
 603              	.L26:
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }        
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 604              		.loc 1 616 0
 605 03ee 4FF42053 		mov	r3, #10240
 606 03f2 C4F20003 		movt	r3, 16384
 607 03f6 4FF0FF02 		mov	r2, #255
 608 03fa 5A62     		str	r2, [r3, #36]
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (status); 
 609              		.loc 1 618 0
 610 03fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 611              		.loc 1 619 0
 612 03fe 1846     		mov	r0, r3
 613 0400 07F11407 		add	r7, r7, #20
 614 0404 BD46     		mov	sp, r7
 615 0406 80BC     		pop	{r7}
 616 0408 7047     		bx	lr
 617              		.cfi_endproc
 618              	.LFE35:
 620 040a 00BF     		.align	2
 621              		.global	RTC_RefClockCmd
 622              		.thumb
 623              		.thumb_func
 625              	RTC_RefClockCmd:
 626              	.LFB36:
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** { 
 627              		.loc 1 630 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 16
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631 040c 80B5     		push	{r7, lr}
 632              	.LCFI20:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 14, -4
 635              		.cfi_offset 7, -8
 636 040e 84B0     		sub	sp, sp, #16
 637              	.LCFI21:
 638              		.cfi_def_cfa_offset 24
 639 0410 00AF     		add	r7, sp, #0
 640              	.LCFI22:
 641              		.cfi_def_cfa_register 7
 642 0412 0346     		mov	r3, r0
 643 0414 FB71     		strb	r3, [r7, #7]
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 644              		.loc 1 631 0
 645 0416 4FF00003 		mov	r3, #0
 646 041a FB73     		strb	r3, [r7, #15]
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 647              		.loc 1 637 0
 648 041c 4FF42053 		mov	r3, #10240
 649 0420 C4F20003 		movt	r3, 16384
 650 0424 4FF0CA02 		mov	r2, #202
 651 0428 5A62     		str	r2, [r3, #36]
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 652              		.loc 1 638 0
 653 042a 4FF42053 		mov	r3, #10240
 654 042e C4F20003 		movt	r3, 16384
 655 0432 4FF05302 		mov	r2, #83
 656 0436 5A62     		str	r2, [r3, #36]
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 657              		.loc 1 641 0
 658 0438 FFF7FEFF 		bl	RTC_EnterInitMode
 659 043c 0346     		mov	r3, r0
 660 043e 002B     		cmp	r3, #0
 661 0440 03D1     		bne	.L28
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 662              		.loc 1 643 0
 663 0442 4FF00003 		mov	r3, #0
 664 0446 FB73     		strb	r3, [r7, #15]
 665 0448 20E0     		b	.L29
 666              	.L28:
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {  
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if (NewState != DISABLE)
 667              		.loc 1 647 0
 668 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 669 044c 002B     		cmp	r3, #0
 670 044e 0CD0     		beq	.L30
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Enable the RTC reference clock detection */
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 671              		.loc 1 650 0
 672 0450 4FF42053 		mov	r3, #10240
 673 0454 C4F20003 		movt	r3, 16384
 674 0458 4FF42052 		mov	r2, #10240
 675 045c C4F20002 		movt	r2, 16384
 676 0460 9268     		ldr	r2, [r2, #8]
 677 0462 42F01002 		orr	r2, r2, #16
 678 0466 9A60     		str	r2, [r3, #8]
 679 0468 0BE0     		b	.L31
 680              	.L30:
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Disable the RTC reference clock detection */
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 681              		.loc 1 655 0
 682 046a 4FF42053 		mov	r3, #10240
 683 046e C4F20003 		movt	r3, 16384
 684 0472 4FF42052 		mov	r2, #10240
 685 0476 C4F20002 		movt	r2, 16384
 686 047a 9268     		ldr	r2, [r2, #8]
 687 047c 22F01002 		bic	r2, r2, #16
 688 0480 9A60     		str	r2, [r3, #8]
 689              	.L31:
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode();
 690              		.loc 1 658 0
 691 0482 FFF7FEFF 		bl	RTC_ExitInitMode
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;
 692              		.loc 1 660 0
 693 0486 4FF00103 		mov	r3, #1
 694 048a FB73     		strb	r3, [r7, #15]
 695              	.L29:
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF;  
 696              		.loc 1 664 0
 697 048c 4FF42053 		mov	r3, #10240
 698 0490 C4F20003 		movt	r3, 16384
 699 0494 4FF0FF02 		mov	r2, #255
 700 0498 5A62     		str	r2, [r3, #36]
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status; 
 701              		.loc 1 666 0
 702 049a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 703              		.loc 1 667 0
 704 049c 1846     		mov	r0, r3
 705 049e 07F11007 		add	r7, r7, #16
 706 04a2 BD46     		mov	sp, r7
 707 04a4 80BD     		pop	{r7, pc}
 708              		.cfi_endproc
 709              	.LFE36:
 711 04a6 00BF     		.align	2
 712              		.global	RTC_SetTime
 713              		.thumb
 714              		.thumb_func
 716              	RTC_SetTime:
 717              	.LFB37:
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    Time and Date configuration functions
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   (Time and Date).
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Set the RTC current time.
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be  one of the following values:
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                        the time configuration information for the RTC.     
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 718              		.loc 1 701 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 16
 721              		@ frame_needed = 1, uses_anonymous_args = 0
 722 04a8 90B5     		push	{r4, r7, lr}
 723              	.LCFI23:
 724              		.cfi_def_cfa_offset 12
 725              		.cfi_offset 14, -4
 726              		.cfi_offset 7, -8
 727              		.cfi_offset 4, -12
 728 04aa 85B0     		sub	sp, sp, #20
 729              	.LCFI24:
 730              		.cfi_def_cfa_offset 32
 731 04ac 00AF     		add	r7, sp, #0
 732              	.LCFI25:
 733              		.cfi_def_cfa_register 7
 734 04ae 7860     		str	r0, [r7, #4]
 735 04b0 3960     		str	r1, [r7, #0]
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 736              		.loc 1 702 0
 737 04b2 4FF00003 		mov	r3, #0
 738 04b6 FB60     		str	r3, [r7, #12]
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 739              		.loc 1 703 0
 740 04b8 4FF00003 		mov	r3, #0
 741 04bc FB72     		strb	r3, [r7, #11]
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 742              		.loc 1 708 0
 743 04be 7B68     		ldr	r3, [r7, #4]
 744 04c0 002B     		cmp	r3, #0
 745 04c2 0DD1     		bne	.L33
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 746              		.loc 1 710 0
 747 04c4 4FF42053 		mov	r3, #10240
 748 04c8 C4F20003 		movt	r3, 16384
 749 04cc 9B68     		ldr	r3, [r3, #8]
 750 04ce 03F04003 		and	r3, r3, #64
 751 04d2 002B     		cmp	r3, #0
 752 04d4 19D1     		bne	.L34
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 753              		.loc 1 717 0
 754 04d6 3B68     		ldr	r3, [r7, #0]
 755 04d8 4FF00002 		mov	r2, #0
 756 04dc DA70     		strb	r2, [r3, #3]
 757 04de 14E0     		b	.L34
 758              	.L33:
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 759              		.loc 1 725 0
 760 04e0 4FF42053 		mov	r3, #10240
 761 04e4 C4F20003 		movt	r3, 16384
 762 04e8 9B68     		ldr	r3, [r3, #8]
 763 04ea 03F04003 		and	r3, r3, #64
 764 04ee 002B     		cmp	r3, #0
 765 04f0 07D0     		beq	.L35
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 766              		.loc 1 727 0
 767 04f2 3B68     		ldr	r3, [r7, #0]
 768 04f4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 769 04f6 1846     		mov	r0, r3
 770 04f8 01F0FAF8 		bl	RTC_Bcd2ToByte
 771 04fc 0346     		mov	r3, r0
 772 04fe FB60     		str	r3, [r7, #12]
 773 0500 03E0     		b	.L34
 774              	.L35:
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 775              		.loc 1 733 0
 776 0502 3B68     		ldr	r3, [r7, #0]
 777 0504 4FF00002 		mov	r2, #0
 778 0508 DA70     		strb	r2, [r3, #3]
 779              	.L34:
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 780              		.loc 1 741 0
 781 050a 7B68     		ldr	r3, [r7, #4]
 782 050c 002B     		cmp	r3, #0
 783 050e 12D0     		beq	.L36
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 784              		.loc 1 743 0
 785 0510 3B68     		ldr	r3, [r7, #0]
 786 0512 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 787 0514 4FEA0342 		lsl	r2, r3, #16
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 788              		.loc 1 744 0
 789 0518 3B68     		ldr	r3, [r7, #0]
 790 051a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 791 051c 4FEA0323 		lsl	r3, r3, #8
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 792              		.loc 1 743 0
 793 0520 1A43     		orrs	r2, r2, r3
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 794              		.loc 1 745 0
 795 0522 3B68     		ldr	r3, [r7, #0]
 796 0524 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 797              		.loc 1 744 0
 798 0526 1A43     		orrs	r2, r2, r3
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 799              		.loc 1 746 0
 800 0528 3B68     		ldr	r3, [r7, #0]
 801 052a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 802 052c 4FEA0343 		lsl	r3, r3, #16
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 803              		.loc 1 743 0
 804 0530 1343     		orrs	r3, r3, r2
 805 0532 FB60     		str	r3, [r7, #12]
 806 0534 1EE0     		b	.L37
 807              	.L36:
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 808              		.loc 1 750 0
 809 0536 3B68     		ldr	r3, [r7, #0]
 810 0538 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 811 053a 1846     		mov	r0, r3
 812 053c 01F0B6F8 		bl	RTC_ByteToBcd2
 813 0540 0346     		mov	r3, r0
 814 0542 4FEA0344 		lsl	r4, r3, #16
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 815              		.loc 1 751 0
 816 0546 3B68     		ldr	r3, [r7, #0]
 817 0548 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 818 054a 1846     		mov	r0, r3
 819 054c 01F0AEF8 		bl	RTC_ByteToBcd2
 820 0550 0346     		mov	r3, r0
 821 0552 4FEA0323 		lsl	r3, r3, #8
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 822              		.loc 1 750 0
 823 0556 1C43     		orrs	r4, r4, r3
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 824              		.loc 1 752 0
 825 0558 3B68     		ldr	r3, [r7, #0]
 826 055a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 827 055c 1846     		mov	r0, r3
 828 055e 01F0A5F8 		bl	RTC_ByteToBcd2
 829 0562 0346     		mov	r3, r0
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 830              		.loc 1 751 0
 831 0564 44EA0302 		orr	r2, r4, r3
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 832              		.loc 1 753 0
 833 0568 3B68     		ldr	r3, [r7, #0]
 834 056a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 835 056c 4FEA0343 		lsl	r3, r3, #16
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 836              		.loc 1 750 0
 837 0570 1343     		orrs	r3, r3, r2
 838 0572 FB60     		str	r3, [r7, #12]
 839              	.L37:
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 840              		.loc 1 757 0
 841 0574 4FF42053 		mov	r3, #10240
 842 0578 C4F20003 		movt	r3, 16384
 843 057c 4FF0CA02 		mov	r2, #202
 844 0580 5A62     		str	r2, [r3, #36]
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 845              		.loc 1 758 0
 846 0582 4FF42053 		mov	r3, #10240
 847 0586 C4F20003 		movt	r3, 16384
 848 058a 4FF05302 		mov	r2, #83
 849 058e 5A62     		str	r2, [r3, #36]
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 850              		.loc 1 761 0
 851 0590 FFF7FEFF 		bl	RTC_EnterInitMode
 852 0594 0346     		mov	r3, r0
 853 0596 002B     		cmp	r3, #0
 854 0598 03D1     		bne	.L38
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 855              		.loc 1 763 0
 856 059a 4FF00003 		mov	r3, #0
 857 059e FB72     		strb	r3, [r7, #11]
 858 05a0 18E0     		b	.L39
 859              	.L38:
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set the RTC_TR register */
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 860              		.loc 1 768 0
 861 05a2 4FF42052 		mov	r2, #10240
 862 05a6 C4F20002 		movt	r2, 16384
 863 05aa F968     		ldr	r1, [r7, #12]
 864 05ac 47F67F73 		movw	r3, #32639
 865 05b0 C0F27F03 		movt	r3, 127
 866 05b4 0B40     		ands	r3, r3, r1
 867 05b6 1360     		str	r3, [r2, #0]
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode(); 
 868              		.loc 1 771 0
 869 05b8 FFF7FEFF 		bl	RTC_ExitInitMode
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 870              		.loc 1 773 0
 871 05bc FFF7FEFF 		bl	RTC_WaitForSynchro
 872 05c0 0346     		mov	r3, r0
 873 05c2 002B     		cmp	r3, #0
 874 05c4 03D1     		bne	.L40
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 875              		.loc 1 775 0
 876 05c6 4FF00003 		mov	r3, #0
 877 05ca FB72     		strb	r3, [r7, #11]
 878 05cc 02E0     		b	.L39
 879              	.L40:
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 880              		.loc 1 779 0
 881 05ce 4FF00103 		mov	r3, #1
 882 05d2 FB72     		strb	r3, [r7, #11]
 883              	.L39:
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 884              		.loc 1 784 0
 885 05d4 4FF42053 		mov	r3, #10240
 886 05d8 C4F20003 		movt	r3, 16384
 887 05dc 4FF0FF02 		mov	r2, #255
 888 05e0 5A62     		str	r2, [r3, #36]
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 889              		.loc 1 786 0
 890 05e2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 891              		.loc 1 787 0
 892 05e4 1846     		mov	r0, r3
 893 05e6 07F11407 		add	r7, r7, #20
 894 05ea BD46     		mov	sp, r7
 895 05ec 90BD     		pop	{r4, r7, pc}
 896              		.cfi_endproc
 897              	.LFE37:
 899 05ee 00BF     		.align	2
 900              		.global	RTC_TimeStructInit
 901              		.thumb
 902              		.thumb_func
 904              	RTC_TimeStructInit:
 905              	.LFB38:
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialized.
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 906              		.loc 1 797 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 8
 909              		@ frame_needed = 1, uses_anonymous_args = 0
 910              		@ link register save eliminated.
 911 05f0 80B4     		push	{r7}
 912              	.LCFI26:
 913              		.cfi_def_cfa_offset 4
 914              		.cfi_offset 7, -4
 915 05f2 83B0     		sub	sp, sp, #12
 916              	.LCFI27:
 917              		.cfi_def_cfa_offset 16
 918 05f4 00AF     		add	r7, sp, #0
 919              	.LCFI28:
 920              		.cfi_def_cfa_register 7
 921 05f6 7860     		str	r0, [r7, #4]
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Time = 00h:00min:00sec */
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 922              		.loc 1 799 0
 923 05f8 7B68     		ldr	r3, [r7, #4]
 924 05fa 4FF00002 		mov	r2, #0
 925 05fe DA70     		strb	r2, [r3, #3]
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 926              		.loc 1 800 0
 927 0600 7B68     		ldr	r3, [r7, #4]
 928 0602 4FF00002 		mov	r2, #0
 929 0606 1A70     		strb	r2, [r3, #0]
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 930              		.loc 1 801 0
 931 0608 7B68     		ldr	r3, [r7, #4]
 932 060a 4FF00002 		mov	r2, #0
 933 060e 5A70     		strb	r2, [r3, #1]
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 934              		.loc 1 802 0
 935 0610 7B68     		ldr	r3, [r7, #4]
 936 0612 4FF00002 		mov	r2, #0
 937 0616 9A70     		strb	r2, [r3, #2]
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 938              		.loc 1 803 0
 939 0618 07F10C07 		add	r7, r7, #12
 940 061c BD46     		mov	sp, r7
 941 061e 80BC     		pop	{r7}
 942 0620 7047     		bx	lr
 943              		.cfi_endproc
 944              	.LFE38:
 946 0622 00BF     		.align	2
 947              		.global	RTC_GetTime
 948              		.thumb
 949              		.thumb_func
 951              	RTC_GetTime:
 952              	.LFB39:
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Get the RTC current Time.
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be  one of the following values:
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                        contain the returned current time configuration.     
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 953              		.loc 1 816 0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 16
 956              		@ frame_needed = 1, uses_anonymous_args = 0
 957 0624 80B5     		push	{r7, lr}
 958              	.LCFI29:
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 14, -4
 961              		.cfi_offset 7, -8
 962 0626 84B0     		sub	sp, sp, #16
 963              	.LCFI30:
 964              		.cfi_def_cfa_offset 24
 965 0628 00AF     		add	r7, sp, #0
 966              	.LCFI31:
 967              		.cfi_def_cfa_register 7
 968 062a 7860     		str	r0, [r7, #4]
 969 062c 3960     		str	r1, [r7, #0]
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 970              		.loc 1 817 0
 971 062e 4FF00003 		mov	r3, #0
 972 0632 FB60     		str	r3, [r7, #12]
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_TR register */
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 973              		.loc 1 823 0
 974 0634 4FF42053 		mov	r3, #10240
 975 0638 C4F20003 		movt	r3, 16384
 976 063c 1B68     		ldr	r3, [r3, #0]
 977 063e 1A46     		mov	r2, r3
 978 0640 47F67F73 		movw	r3, #32639
 979 0644 C0F27F03 		movt	r3, 127
 980 0648 1340     		ands	r3, r3, r2
 981 064a FB60     		str	r3, [r7, #12]
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 982              		.loc 1 826 0
 983 064c FB68     		ldr	r3, [r7, #12]
 984 064e 03F47C13 		and	r3, r3, #4128768
 985 0652 4FEA1343 		lsr	r3, r3, #16
 986 0656 DAB2     		uxtb	r2, r3
 987 0658 3B68     		ldr	r3, [r7, #0]
 988 065a 1A70     		strb	r2, [r3, #0]
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 989              		.loc 1 827 0
 990 065c FB68     		ldr	r3, [r7, #12]
 991 065e 03F4FE43 		and	r3, r3, #32512
 992 0662 4FEA1323 		lsr	r3, r3, #8
 993 0666 DAB2     		uxtb	r2, r3
 994 0668 3B68     		ldr	r3, [r7, #0]
 995 066a 5A70     		strb	r2, [r3, #1]
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 996              		.loc 1 828 0
 997 066c FB68     		ldr	r3, [r7, #12]
 998 066e DBB2     		uxtb	r3, r3
 999 0670 03F07F03 		and	r3, r3, #127
 1000 0674 DAB2     		uxtb	r2, r3
 1001 0676 3B68     		ldr	r3, [r7, #0]
 1002 0678 9A70     		strb	r2, [r3, #2]
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1003              		.loc 1 829 0
 1004 067a FB68     		ldr	r3, [r7, #12]
 1005 067c 03F48003 		and	r3, r3, #4194304
 1006 0680 4FEA1343 		lsr	r3, r3, #16
 1007 0684 DAB2     		uxtb	r2, r3
 1008 0686 3B68     		ldr	r3, [r7, #0]
 1009 0688 DA70     		strb	r2, [r3, #3]
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1010              		.loc 1 832 0
 1011 068a 7B68     		ldr	r3, [r7, #4]
 1012 068c 002B     		cmp	r3, #0
 1013 068e 1AD1     		bne	.L42
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1014              		.loc 1 835 0
 1015 0690 3B68     		ldr	r3, [r7, #0]
 1016 0692 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1017 0694 1846     		mov	r0, r3
 1018 0696 01F02BF8 		bl	RTC_Bcd2ToByte
 1019 069a 0346     		mov	r3, r0
 1020 069c 1A46     		mov	r2, r3
 1021 069e 3B68     		ldr	r3, [r7, #0]
 1022 06a0 1A70     		strb	r2, [r3, #0]
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1023              		.loc 1 836 0
 1024 06a2 3B68     		ldr	r3, [r7, #0]
 1025 06a4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1026 06a6 1846     		mov	r0, r3
 1027 06a8 01F022F8 		bl	RTC_Bcd2ToByte
 1028 06ac 0346     		mov	r3, r0
 1029 06ae 1A46     		mov	r2, r3
 1030 06b0 3B68     		ldr	r3, [r7, #0]
 1031 06b2 5A70     		strb	r2, [r3, #1]
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1032              		.loc 1 837 0
 1033 06b4 3B68     		ldr	r3, [r7, #0]
 1034 06b6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1035 06b8 1846     		mov	r0, r3
 1036 06ba 01F019F8 		bl	RTC_Bcd2ToByte
 1037 06be 0346     		mov	r3, r0
 1038 06c0 1A46     		mov	r2, r3
 1039 06c2 3B68     		ldr	r3, [r7, #0]
 1040 06c4 9A70     		strb	r2, [r3, #2]
 1041              	.L42:
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1042              		.loc 1 839 0
 1043 06c6 07F11007 		add	r7, r7, #16
 1044 06ca BD46     		mov	sp, r7
 1045 06cc 80BD     		pop	{r7, pc}
 1046              		.cfi_endproc
 1047              	.LFE39:
 1049 06ce 00BF     		.align	2
 1050              		.global	RTC_SetDate
 1051              		.thumb
 1052              		.thumb_func
 1054              	RTC_SetDate:
 1055              	.LFB40:
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Set the RTC current date.
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be  one of the following values:
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                         the date configuration information for the RTC.
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 1056              		.loc 1 854 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 16
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060 06d0 90B5     		push	{r4, r7, lr}
 1061              	.LCFI32:
 1062              		.cfi_def_cfa_offset 12
 1063              		.cfi_offset 14, -4
 1064              		.cfi_offset 7, -8
 1065              		.cfi_offset 4, -12
 1066 06d2 85B0     		sub	sp, sp, #20
 1067              	.LCFI33:
 1068              		.cfi_def_cfa_offset 32
 1069 06d4 00AF     		add	r7, sp, #0
 1070              	.LCFI34:
 1071              		.cfi_def_cfa_register 7
 1072 06d6 7860     		str	r0, [r7, #4]
 1073 06d8 3960     		str	r1, [r7, #0]
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 1074              		.loc 1 855 0
 1075 06da 4FF00003 		mov	r3, #0
 1076 06de FB60     		str	r3, [r7, #12]
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 1077              		.loc 1 856 0
 1078 06e0 4FF00003 		mov	r3, #0
 1079 06e4 FB72     		strb	r3, [r7, #11]
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1080              		.loc 1 861 0
 1081 06e6 7B68     		ldr	r3, [r7, #4]
 1082 06e8 002B     		cmp	r3, #0
 1083 06ea 0FD1     		bne	.L45
 1084              		.loc 1 861 0 is_stmt 0 discriminator 1
 1085 06ec 3B68     		ldr	r3, [r7, #0]
 1086 06ee 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1087 06f0 03F01003 		and	r3, r3, #16
 1088 06f4 002B     		cmp	r3, #0
 1089 06f6 09D0     		beq	.L45
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1090              		.loc 1 863 0 is_stmt 1
 1091 06f8 3B68     		ldr	r3, [r7, #0]
 1092 06fa 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1093 06fc 23F01003 		bic	r3, r3, #16
 1094 0700 DBB2     		uxtb	r3, r3
 1095 0702 03F10A03 		add	r3, r3, #10
 1096 0706 DAB2     		uxtb	r2, r3
 1097 0708 3B68     		ldr	r3, [r7, #0]
 1098 070a 5A70     		strb	r2, [r3, #1]
 1099              	.L45:
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1100              		.loc 1 865 0
 1101 070c 7B68     		ldr	r3, [r7, #4]
 1102 070e 002B     		cmp	r3, #0
 1103 0710 0DD0     		beq	.L46
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1104              		.loc 1 874 0
 1105 0712 3B68     		ldr	r3, [r7, #0]
 1106 0714 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1107 0716 1846     		mov	r0, r3
 1108 0718 00F0EAFF 		bl	RTC_Bcd2ToByte
 1109 071c 0346     		mov	r3, r0
 1110 071e FB60     		str	r3, [r7, #12]
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1111              		.loc 1 876 0
 1112 0720 3B68     		ldr	r3, [r7, #0]
 1113 0722 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1114 0724 1846     		mov	r0, r3
 1115 0726 00F0E3FF 		bl	RTC_Bcd2ToByte
 1116 072a 0346     		mov	r3, r0
 1117 072c FB60     		str	r3, [r7, #12]
 1118              	.L46:
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1119              		.loc 1 882 0
 1120 072e 7B68     		ldr	r3, [r7, #4]
 1121 0730 002B     		cmp	r3, #0
 1122 0732 12D0     		beq	.L47
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1123              		.loc 1 884 0
 1124 0734 3B68     		ldr	r3, [r7, #0]
 1125 0736 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1126 0738 4FEA0342 		lsl	r2, r3, #16
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1127              		.loc 1 885 0
 1128 073c 3B68     		ldr	r3, [r7, #0]
 1129 073e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1130 0740 4FEA0323 		lsl	r3, r3, #8
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1131              		.loc 1 884 0
 1132 0744 1A43     		orrs	r2, r2, r3
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1133              		.loc 1 886 0
 1134 0746 3B68     		ldr	r3, [r7, #0]
 1135 0748 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1136              		.loc 1 885 0
 1137 074a 1A43     		orrs	r2, r2, r3
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1138              		.loc 1 887 0
 1139 074c 3B68     		ldr	r3, [r7, #0]
 1140 074e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1141 0750 4FEA4333 		lsl	r3, r3, #13
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1142              		.loc 1 884 0
 1143 0754 1343     		orrs	r3, r3, r2
 1144 0756 FB60     		str	r3, [r7, #12]
 1145 0758 1EE0     		b	.L48
 1146              	.L47:
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1147              		.loc 1 891 0
 1148 075a 3B68     		ldr	r3, [r7, #0]
 1149 075c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1150 075e 1846     		mov	r0, r3
 1151 0760 00F0A4FF 		bl	RTC_ByteToBcd2
 1152 0764 0346     		mov	r3, r0
 1153 0766 4FEA0344 		lsl	r4, r3, #16
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1154              		.loc 1 892 0
 1155 076a 3B68     		ldr	r3, [r7, #0]
 1156 076c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1157 076e 1846     		mov	r0, r3
 1158 0770 00F09CFF 		bl	RTC_ByteToBcd2
 1159 0774 0346     		mov	r3, r0
 1160 0776 4FEA0323 		lsl	r3, r3, #8
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1161              		.loc 1 891 0
 1162 077a 1C43     		orrs	r4, r4, r3
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1163              		.loc 1 893 0
 1164 077c 3B68     		ldr	r3, [r7, #0]
 1165 077e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1166 0780 1846     		mov	r0, r3
 1167 0782 00F093FF 		bl	RTC_ByteToBcd2
 1168 0786 0346     		mov	r3, r0
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1169              		.loc 1 892 0
 1170 0788 44EA0302 		orr	r2, r4, r3
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1171              		.loc 1 894 0
 1172 078c 3B68     		ldr	r3, [r7, #0]
 1173 078e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1174 0790 4FEA4333 		lsl	r3, r3, #13
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1175              		.loc 1 891 0
 1176 0794 1343     		orrs	r3, r3, r2
 1177 0796 FB60     		str	r3, [r7, #12]
 1178              	.L48:
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 1179              		.loc 1 898 0
 1180 0798 4FF42053 		mov	r3, #10240
 1181 079c C4F20003 		movt	r3, 16384
 1182 07a0 4FF0CA02 		mov	r2, #202
 1183 07a4 5A62     		str	r2, [r3, #36]
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 1184              		.loc 1 899 0
 1185 07a6 4FF42053 		mov	r3, #10240
 1186 07aa C4F20003 		movt	r3, 16384
 1187 07ae 4FF05302 		mov	r2, #83
 1188 07b2 5A62     		str	r2, [r3, #36]
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1189              		.loc 1 902 0
 1190 07b4 FFF7FEFF 		bl	RTC_EnterInitMode
 1191 07b8 0346     		mov	r3, r0
 1192 07ba 002B     		cmp	r3, #0
 1193 07bc 03D1     		bne	.L49
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 1194              		.loc 1 904 0
 1195 07be 4FF00003 		mov	r3, #0
 1196 07c2 FB72     		strb	r3, [r7, #11]
 1197 07c4 17E0     		b	.L50
 1198              	.L49:
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set the RTC_DR register */
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1199              		.loc 1 909 0
 1200 07c6 4FF42053 		mov	r3, #10240
 1201 07ca C4F20003 		movt	r3, 16384
 1202 07ce FA68     		ldr	r2, [r7, #12]
 1203 07d0 22F07F42 		bic	r2, r2, #-16777216
 1204 07d4 22F0C002 		bic	r2, r2, #192
 1205 07d8 5A60     		str	r2, [r3, #4]
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode(); 
 1206              		.loc 1 912 0
 1207 07da FFF7FEFF 		bl	RTC_ExitInitMode
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1208              		.loc 1 914 0
 1209 07de FFF7FEFF 		bl	RTC_WaitForSynchro
 1210 07e2 0346     		mov	r3, r0
 1211 07e4 002B     		cmp	r3, #0
 1212 07e6 03D1     		bne	.L51
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 1213              		.loc 1 916 0
 1214 07e8 4FF00003 		mov	r3, #0
 1215 07ec FB72     		strb	r3, [r7, #11]
 1216 07ee 02E0     		b	.L50
 1217              	.L51:
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 1218              		.loc 1 920 0
 1219 07f0 4FF00103 		mov	r3, #1
 1220 07f4 FB72     		strb	r3, [r7, #11]
 1221              	.L50:
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF;   
 1222              		.loc 1 924 0
 1223 07f6 4FF42053 		mov	r3, #10240
 1224 07fa C4F20003 		movt	r3, 16384
 1225 07fe 4FF0FF02 		mov	r2, #255
 1226 0802 5A62     		str	r2, [r3, #36]
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 1227              		.loc 1 926 0
 1228 0804 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1229              		.loc 1 927 0
 1230 0806 1846     		mov	r0, r3
 1231 0808 07F11407 		add	r7, r7, #20
 1232 080c BD46     		mov	sp, r7
 1233 080e 90BD     		pop	{r4, r7, pc}
 1234              		.cfi_endproc
 1235              	.LFE40:
 1237              		.align	2
 1238              		.global	RTC_DateStructInit
 1239              		.thumb
 1240              		.thumb_func
 1242              	RTC_DateStructInit:
 1243              	.LFB41:
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         (Monday, January 01 xx00).
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         initialized.
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 1244              		.loc 1 937 0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 8
 1247              		@ frame_needed = 1, uses_anonymous_args = 0
 1248              		@ link register save eliminated.
 1249 0810 80B4     		push	{r7}
 1250              	.LCFI35:
 1251              		.cfi_def_cfa_offset 4
 1252              		.cfi_offset 7, -4
 1253 0812 83B0     		sub	sp, sp, #12
 1254              	.LCFI36:
 1255              		.cfi_def_cfa_offset 16
 1256 0814 00AF     		add	r7, sp, #0
 1257              	.LCFI37:
 1258              		.cfi_def_cfa_register 7
 1259 0816 7860     		str	r0, [r7, #4]
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Monday, January 01 xx00 */
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1260              		.loc 1 939 0
 1261 0818 7B68     		ldr	r3, [r7, #4]
 1262 081a 4FF00102 		mov	r2, #1
 1263 081e 1A70     		strb	r2, [r3, #0]
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1264              		.loc 1 940 0
 1265 0820 7B68     		ldr	r3, [r7, #4]
 1266 0822 4FF00102 		mov	r2, #1
 1267 0826 9A70     		strb	r2, [r3, #2]
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1268              		.loc 1 941 0
 1269 0828 7B68     		ldr	r3, [r7, #4]
 1270 082a 4FF00102 		mov	r2, #1
 1271 082e 5A70     		strb	r2, [r3, #1]
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1272              		.loc 1 942 0
 1273 0830 7B68     		ldr	r3, [r7, #4]
 1274 0832 4FF00002 		mov	r2, #0
 1275 0836 DA70     		strb	r2, [r3, #3]
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1276              		.loc 1 943 0
 1277 0838 07F10C07 		add	r7, r7, #12
 1278 083c BD46     		mov	sp, r7
 1279 083e 80BC     		pop	{r7}
 1280 0840 7047     		bx	lr
 1281              		.cfi_endproc
 1282              	.LFE41:
 1284 0842 00BF     		.align	2
 1285              		.global	RTC_GetDate
 1286              		.thumb
 1287              		.thumb_func
 1289              	RTC_GetDate:
 1290              	.LFB42:
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Get the RTC current date. 
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                        contain the returned current date configuration.     
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 1291              		.loc 1 956 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 16
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0844 80B5     		push	{r7, lr}
 1296              	.LCFI38:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 14, -4
 1299              		.cfi_offset 7, -8
 1300 0846 84B0     		sub	sp, sp, #16
 1301              	.LCFI39:
 1302              		.cfi_def_cfa_offset 24
 1303 0848 00AF     		add	r7, sp, #0
 1304              	.LCFI40:
 1305              		.cfi_def_cfa_register 7
 1306 084a 7860     		str	r0, [r7, #4]
 1307 084c 3960     		str	r1, [r7, #0]
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 1308              		.loc 1 957 0
 1309 084e 4FF00003 		mov	r3, #0
 1310 0852 FB60     		str	r3, [r7, #12]
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_TR register */
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1311              		.loc 1 963 0
 1312 0854 4FF42053 		mov	r3, #10240
 1313 0858 C4F20003 		movt	r3, 16384
 1314 085c 5B68     		ldr	r3, [r3, #4]
 1315 085e 23F07F43 		bic	r3, r3, #-16777216
 1316 0862 23F0C003 		bic	r3, r3, #192
 1317 0866 FB60     		str	r3, [r7, #12]
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1318              		.loc 1 966 0
 1319 0868 FB68     		ldr	r3, [r7, #12]
 1320 086a 03F47F03 		and	r3, r3, #16711680
 1321 086e 4FEA1343 		lsr	r3, r3, #16
 1322 0872 DAB2     		uxtb	r2, r3
 1323 0874 3B68     		ldr	r3, [r7, #0]
 1324 0876 DA70     		strb	r2, [r3, #3]
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1325              		.loc 1 967 0
 1326 0878 FB68     		ldr	r3, [r7, #12]
 1327 087a 03F4F853 		and	r3, r3, #7936
 1328 087e 4FEA1323 		lsr	r3, r3, #8
 1329 0882 DAB2     		uxtb	r2, r3
 1330 0884 3B68     		ldr	r3, [r7, #0]
 1331 0886 5A70     		strb	r2, [r3, #1]
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1332              		.loc 1 968 0
 1333 0888 FB68     		ldr	r3, [r7, #12]
 1334 088a DBB2     		uxtb	r3, r3
 1335 088c 03F03F03 		and	r3, r3, #63
 1336 0890 DAB2     		uxtb	r2, r3
 1337 0892 3B68     		ldr	r3, [r7, #0]
 1338 0894 9A70     		strb	r2, [r3, #2]
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1339              		.loc 1 969 0
 1340 0896 FB68     		ldr	r3, [r7, #12]
 1341 0898 03F46043 		and	r3, r3, #57344
 1342 089c 4FEA5333 		lsr	r3, r3, #13
 1343 08a0 DAB2     		uxtb	r2, r3
 1344 08a2 3B68     		ldr	r3, [r7, #0]
 1345 08a4 1A70     		strb	r2, [r3, #0]
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1346              		.loc 1 972 0
 1347 08a6 7B68     		ldr	r3, [r7, #4]
 1348 08a8 002B     		cmp	r3, #0
 1349 08aa 1ED1     		bne	.L53
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1350              		.loc 1 975 0
 1351 08ac 3B68     		ldr	r3, [r7, #0]
 1352 08ae DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1353 08b0 1846     		mov	r0, r3
 1354 08b2 00F01DFF 		bl	RTC_Bcd2ToByte
 1355 08b6 0346     		mov	r3, r0
 1356 08b8 1A46     		mov	r2, r3
 1357 08ba 3B68     		ldr	r3, [r7, #0]
 1358 08bc DA70     		strb	r2, [r3, #3]
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1359              		.loc 1 976 0
 1360 08be 3B68     		ldr	r3, [r7, #0]
 1361 08c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1362 08c2 1846     		mov	r0, r3
 1363 08c4 00F014FF 		bl	RTC_Bcd2ToByte
 1364 08c8 0346     		mov	r3, r0
 1365 08ca 1A46     		mov	r2, r3
 1366 08cc 3B68     		ldr	r3, [r7, #0]
 1367 08ce 5A70     		strb	r2, [r3, #1]
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1368              		.loc 1 977 0
 1369 08d0 3B68     		ldr	r3, [r7, #0]
 1370 08d2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1371 08d4 1846     		mov	r0, r3
 1372 08d6 00F00BFF 		bl	RTC_Bcd2ToByte
 1373 08da 0346     		mov	r3, r0
 1374 08dc 1A46     		mov	r2, r3
 1375 08de 3B68     		ldr	r3, [r7, #0]
 1376 08e0 9A70     		strb	r2, [r3, #2]
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1377              		.loc 1 978 0
 1378 08e2 3B68     		ldr	r3, [r7, #0]
 1379 08e4 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1380 08e6 3B68     		ldr	r3, [r7, #0]
 1381 08e8 1A70     		strb	r2, [r3, #0]
 1382              	.L53:
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1383              		.loc 1 980 0
 1384 08ea 07F11007 		add	r7, r7, #16
 1385 08ee BD46     		mov	sp, r7
 1386 08f0 80BD     		pop	{r7, pc}
 1387              		.cfi_endproc
 1388              	.LFE42:
 1390 08f2 00BF     		.align	2
 1391              		.global	RTC_SetAlarm
 1392              		.thumb
 1393              		.thumb_func
 1395              	RTC_SetAlarm:
 1396              	.LFB43:
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 1397              		.loc 1 1017 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 24
 1400              		@ frame_needed = 1, uses_anonymous_args = 0
 1401 08f4 90B5     		push	{r4, r7, lr}
 1402              	.LCFI41:
 1403              		.cfi_def_cfa_offset 12
 1404              		.cfi_offset 14, -4
 1405              		.cfi_offset 7, -8
 1406              		.cfi_offset 4, -12
 1407 08f6 87B0     		sub	sp, sp, #28
 1408              	.LCFI42:
 1409              		.cfi_def_cfa_offset 40
 1410 08f8 00AF     		add	r7, sp, #0
 1411              	.LCFI43:
 1412              		.cfi_def_cfa_register 7
 1413 08fa F860     		str	r0, [r7, #12]
 1414 08fc B960     		str	r1, [r7, #8]
 1415 08fe 7A60     		str	r2, [r7, #4]
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 1416              		.loc 1 1018 0
 1417 0900 4FF00003 		mov	r3, #0
 1418 0904 7B61     		str	r3, [r7, #20]
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1419              		.loc 1 1026 0
 1420 0906 FB68     		ldr	r3, [r7, #12]
 1421 0908 002B     		cmp	r3, #0
 1422 090a 0DD1     		bne	.L56
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1423              		.loc 1 1028 0
 1424 090c 4FF42053 		mov	r3, #10240
 1425 0910 C4F20003 		movt	r3, 16384
 1426 0914 9B68     		ldr	r3, [r3, #8]
 1427 0916 03F04003 		and	r3, r3, #64
 1428 091a 002B     		cmp	r3, #0
 1429 091c 2CD1     		bne	.L58
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1430              		.loc 1 1035 0
 1431 091e 7B68     		ldr	r3, [r7, #4]
 1432 0920 4FF00002 		mov	r2, #0
 1433 0924 DA70     		strb	r2, [r3, #3]
 1434 0926 27E0     		b	.L58
 1435              	.L56:
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1436              		.loc 1 1052 0
 1437 0928 4FF42053 		mov	r3, #10240
 1438 092c C4F20003 		movt	r3, 16384
 1439 0930 9B68     		ldr	r3, [r3, #8]
 1440 0932 03F04003 		and	r3, r3, #64
 1441 0936 002B     		cmp	r3, #0
 1442 0938 07D0     		beq	.L59
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1443              		.loc 1 1054 0
 1444 093a 7B68     		ldr	r3, [r7, #4]
 1445 093c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1446 093e 1846     		mov	r0, r3
 1447 0940 00F0D6FE 		bl	RTC_Bcd2ToByte
 1448 0944 0346     		mov	r3, r0
 1449 0946 7B61     		str	r3, [r7, #20]
 1450 0948 03E0     		b	.L60
 1451              	.L59:
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1452              		.loc 1 1060 0
 1453 094a 7B68     		ldr	r3, [r7, #4]
 1454 094c 4FF00002 		mov	r2, #0
 1455 0950 DA70     		strb	r2, [r3, #3]
 1456              	.L60:
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1457              		.loc 1 1067 0
 1458 0952 7B68     		ldr	r3, [r7, #4]
 1459 0954 9B68     		ldr	r3, [r3, #8]
 1460 0956 002B     		cmp	r3, #0
 1461 0958 07D1     		bne	.L61
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1462              		.loc 1 1069 0
 1463 095a 7B68     		ldr	r3, [r7, #4]
 1464 095c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1465 095e 1846     		mov	r0, r3
 1466 0960 00F0C6FE 		bl	RTC_Bcd2ToByte
 1467 0964 0346     		mov	r3, r0
 1468 0966 7B61     		str	r3, [r7, #20]
 1469 0968 06E0     		b	.L58
 1470              	.L61:
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1471              		.loc 1 1074 0
 1472 096a 7B68     		ldr	r3, [r7, #4]
 1473 096c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1474 096e 1846     		mov	r0, r3
 1475 0970 00F0BEFE 		bl	RTC_Bcd2ToByte
 1476 0974 0346     		mov	r3, r0
 1477 0976 7B61     		str	r3, [r7, #20]
 1478              	.L58:
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }    
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1479              		.loc 1 1080 0
 1480 0978 FB68     		ldr	r3, [r7, #12]
 1481 097a 002B     		cmp	r3, #0
 1482 097c 1DD0     		beq	.L62
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1483              		.loc 1 1082 0
 1484 097e 7B68     		ldr	r3, [r7, #4]
 1485 0980 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1486 0982 4FEA0342 		lsl	r2, r3, #16
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1487              		.loc 1 1083 0
 1488 0986 7B68     		ldr	r3, [r7, #4]
 1489 0988 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1490 098a 4FEA0323 		lsl	r3, r3, #8
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1491              		.loc 1 1082 0
 1492 098e 1A43     		orrs	r2, r2, r3
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1493              		.loc 1 1084 0
 1494 0990 7B68     		ldr	r3, [r7, #4]
 1495 0992 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1496              		.loc 1 1083 0
 1497 0994 1A43     		orrs	r2, r2, r3
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1498              		.loc 1 1085 0
 1499 0996 7B68     		ldr	r3, [r7, #4]
 1500 0998 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1501 099a 4FEA0343 		lsl	r3, r3, #16
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1502              		.loc 1 1084 0
 1503 099e 1A43     		orrs	r2, r2, r3
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1504              		.loc 1 1086 0
 1505 09a0 7B68     		ldr	r3, [r7, #4]
 1506 09a2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1507 09a4 4FEA0363 		lsl	r3, r3, #24
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1508              		.loc 1 1085 0
 1509 09a8 1A43     		orrs	r2, r2, r3
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1510              		.loc 1 1087 0
 1511 09aa 7B68     		ldr	r3, [r7, #4]
 1512 09ac 9B68     		ldr	r3, [r3, #8]
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1513              		.loc 1 1086 0
 1514 09ae 1A43     		orrs	r2, r2, r3
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1515              		.loc 1 1088 0
 1516 09b0 7B68     		ldr	r3, [r7, #4]
 1517 09b2 5B68     		ldr	r3, [r3, #4]
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1518              		.loc 1 1082 0
 1519 09b4 1343     		orrs	r3, r3, r2
 1520 09b6 7B61     		str	r3, [r7, #20]
 1521 09b8 2FE0     		b	.L63
 1522              	.L62:
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1523              		.loc 1 1092 0
 1524 09ba 7B68     		ldr	r3, [r7, #4]
 1525 09bc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1526 09be 1846     		mov	r0, r3
 1527 09c0 00F074FE 		bl	RTC_ByteToBcd2
 1528 09c4 0346     		mov	r3, r0
 1529 09c6 4FEA0344 		lsl	r4, r3, #16
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1530              		.loc 1 1093 0
 1531 09ca 7B68     		ldr	r3, [r7, #4]
 1532 09cc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1533 09ce 1846     		mov	r0, r3
 1534 09d0 00F06CFE 		bl	RTC_ByteToBcd2
 1535 09d4 0346     		mov	r3, r0
 1536 09d6 4FEA0323 		lsl	r3, r3, #8
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1537              		.loc 1 1092 0
 1538 09da 1C43     		orrs	r4, r4, r3
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1539              		.loc 1 1094 0
 1540 09dc 7B68     		ldr	r3, [r7, #4]
 1541 09de 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1542 09e0 1846     		mov	r0, r3
 1543 09e2 00F063FE 		bl	RTC_ByteToBcd2
 1544 09e6 0346     		mov	r3, r0
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1545              		.loc 1 1093 0
 1546 09e8 44EA0302 		orr	r2, r4, r3
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1547              		.loc 1 1095 0
 1548 09ec 7B68     		ldr	r3, [r7, #4]
 1549 09ee DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1550 09f0 4FEA0343 		lsl	r3, r3, #16
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1551              		.loc 1 1094 0
 1552 09f4 42EA0304 		orr	r4, r2, r3
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1553              		.loc 1 1096 0
 1554 09f8 7B68     		ldr	r3, [r7, #4]
 1555 09fa 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1556 09fc 1846     		mov	r0, r3
 1557 09fe 00F055FE 		bl	RTC_ByteToBcd2
 1558 0a02 0346     		mov	r3, r0
 1559 0a04 4FEA0363 		lsl	r3, r3, #24
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1560              		.loc 1 1095 0
 1561 0a08 44EA0302 		orr	r2, r4, r3
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1562              		.loc 1 1097 0
 1563 0a0c 7B68     		ldr	r3, [r7, #4]
 1564 0a0e 9B68     		ldr	r3, [r3, #8]
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1565              		.loc 1 1096 0
 1566 0a10 1A43     		orrs	r2, r2, r3
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1567              		.loc 1 1098 0
 1568 0a12 7B68     		ldr	r3, [r7, #4]
 1569 0a14 5B68     		ldr	r3, [r3, #4]
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1570              		.loc 1 1092 0
 1571 0a16 1343     		orrs	r3, r3, r2
 1572 0a18 7B61     		str	r3, [r7, #20]
 1573              	.L63:
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 1574              		.loc 1 1102 0
 1575 0a1a 4FF42053 		mov	r3, #10240
 1576 0a1e C4F20003 		movt	r3, 16384
 1577 0a22 4FF0CA02 		mov	r2, #202
 1578 0a26 5A62     		str	r2, [r3, #36]
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 1579              		.loc 1 1103 0
 1580 0a28 4FF42053 		mov	r3, #10240
 1581 0a2c C4F20003 		movt	r3, 16384
 1582 0a30 4FF05302 		mov	r2, #83
 1583 0a34 5A62     		str	r2, [r3, #36]
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the Alarm register */
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1584              		.loc 1 1106 0
 1585 0a36 BB68     		ldr	r3, [r7, #8]
 1586 0a38 B3F5807F 		cmp	r3, #256
 1587 0a3c 06D1     		bne	.L64
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1588              		.loc 1 1108 0
 1589 0a3e 4FF42053 		mov	r3, #10240
 1590 0a42 C4F20003 		movt	r3, 16384
 1591 0a46 7A69     		ldr	r2, [r7, #20]
 1592 0a48 DA61     		str	r2, [r3, #28]
 1593 0a4a 05E0     		b	.L65
 1594              	.L64:
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1595              		.loc 1 1112 0
 1596 0a4c 4FF42053 		mov	r3, #10240
 1597 0a50 C4F20003 		movt	r3, 16384
 1598 0a54 7A69     		ldr	r2, [r7, #20]
 1599 0a56 1A62     		str	r2, [r3, #32]
 1600              	.L65:
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF;   
 1601              		.loc 1 1116 0
 1602 0a58 4FF42053 		mov	r3, #10240
 1603 0a5c C4F20003 		movt	r3, 16384
 1604 0a60 4FF0FF02 		mov	r2, #255
 1605 0a64 5A62     		str	r2, [r3, #36]
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1606              		.loc 1 1117 0
 1607 0a66 07F11C07 		add	r7, r7, #28
 1608 0a6a BD46     		mov	sp, r7
 1609 0a6c 90BD     		pop	{r4, r7, pc}
 1610              		.cfi_endproc
 1611              	.LFE43:
 1613 0a6e 00BF     		.align	2
 1614              		.global	RTC_AlarmStructInit
 1615              		.thumb
 1616              		.thumb_func
 1618              	RTC_AlarmStructInit:
 1619              	.LFB44:
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         all fields are masked).
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         will be initialized.
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 1620              		.loc 1 1128 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 8
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625 0a70 80B4     		push	{r7}
 1626              	.LCFI44:
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 7, -4
 1629 0a72 83B0     		sub	sp, sp, #12
 1630              	.LCFI45:
 1631              		.cfi_def_cfa_offset 16
 1632 0a74 00AF     		add	r7, sp, #0
 1633              	.LCFI46:
 1634              		.cfi_def_cfa_register 7
 1635 0a76 7860     		str	r0, [r7, #4]
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1636              		.loc 1 1130 0
 1637 0a78 7B68     		ldr	r3, [r7, #4]
 1638 0a7a 4FF00002 		mov	r2, #0
 1639 0a7e DA70     		strb	r2, [r3, #3]
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1640              		.loc 1 1131 0
 1641 0a80 7B68     		ldr	r3, [r7, #4]
 1642 0a82 4FF00002 		mov	r2, #0
 1643 0a86 1A70     		strb	r2, [r3, #0]
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1644              		.loc 1 1132 0
 1645 0a88 7B68     		ldr	r3, [r7, #4]
 1646 0a8a 4FF00002 		mov	r2, #0
 1647 0a8e 5A70     		strb	r2, [r3, #1]
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1648              		.loc 1 1133 0
 1649 0a90 7B68     		ldr	r3, [r7, #4]
 1650 0a92 4FF00002 		mov	r2, #0
 1651 0a96 9A70     		strb	r2, [r3, #2]
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1652              		.loc 1 1136 0
 1653 0a98 7B68     		ldr	r3, [r7, #4]
 1654 0a9a 4FF00002 		mov	r2, #0
 1655 0a9e 9A60     		str	r2, [r3, #8]
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1656              		.loc 1 1137 0
 1657 0aa0 7B68     		ldr	r3, [r7, #4]
 1658 0aa2 4FF00102 		mov	r2, #1
 1659 0aa6 1A73     		strb	r2, [r3, #12]
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1660              		.loc 1 1140 0
 1661 0aa8 7B68     		ldr	r3, [r7, #4]
 1662 0aaa 4FF00002 		mov	r2, #0
 1663 0aae 5A60     		str	r2, [r3, #4]
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1664              		.loc 1 1141 0
 1665 0ab0 07F10C07 		add	r7, r7, #12
 1666 0ab4 BD46     		mov	sp, r7
 1667 0ab6 80BC     		pop	{r7}
 1668 0ab8 7047     		bx	lr
 1669              		.cfi_endproc
 1670              	.LFE44:
 1672 0aba 00BF     		.align	2
 1673              		.global	RTC_GetAlarm
 1674              		.thumb
 1675              		.thumb_func
 1677              	RTC_GetAlarm:
 1678              	.LFB45:
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                          contains the output alarm configuration values.     
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 1679              		.loc 1 1158 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 24
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683 0abc 80B5     		push	{r7, lr}
 1684              	.LCFI47:
 1685              		.cfi_def_cfa_offset 8
 1686              		.cfi_offset 14, -4
 1687              		.cfi_offset 7, -8
 1688 0abe 86B0     		sub	sp, sp, #24
 1689              	.LCFI48:
 1690              		.cfi_def_cfa_offset 32
 1691 0ac0 00AF     		add	r7, sp, #0
 1692              	.LCFI49:
 1693              		.cfi_def_cfa_register 7
 1694 0ac2 F860     		str	r0, [r7, #12]
 1695 0ac4 B960     		str	r1, [r7, #8]
 1696 0ac6 7A60     		str	r2, [r7, #4]
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 1697              		.loc 1 1159 0
 1698 0ac8 4FF00003 		mov	r3, #0
 1699 0acc 7B61     		str	r3, [r7, #20]
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1700              		.loc 1 1166 0
 1701 0ace BB68     		ldr	r3, [r7, #8]
 1702 0ad0 B3F5807F 		cmp	r3, #256
 1703 0ad4 06D1     		bne	.L68
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1704              		.loc 1 1168 0
 1705 0ad6 4FF42053 		mov	r3, #10240
 1706 0ada C4F20003 		movt	r3, 16384
 1707 0ade DB69     		ldr	r3, [r3, #28]
 1708 0ae0 7B61     		str	r3, [r7, #20]
 1709 0ae2 05E0     		b	.L69
 1710              	.L68:
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1711              		.loc 1 1172 0
 1712 0ae4 4FF42053 		mov	r3, #10240
 1713 0ae8 C4F20003 		movt	r3, 16384
 1714 0aec 1B6A     		ldr	r3, [r3, #32]
 1715 0aee 7B61     		str	r3, [r7, #20]
 1716              	.L69:
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the structure with the read parameters */
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1717              		.loc 1 1176 0
 1718 0af0 7B69     		ldr	r3, [r7, #20]
 1719 0af2 03F47C13 		and	r3, r3, #4128768
 1720 0af6 4FEA1343 		lsr	r3, r3, #16
 1721 0afa DAB2     		uxtb	r2, r3
 1722 0afc 7B68     		ldr	r3, [r7, #4]
 1723 0afe 1A70     		strb	r2, [r3, #0]
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1724              		.loc 1 1178 0
 1725 0b00 7B69     		ldr	r3, [r7, #20]
 1726 0b02 03F4FE43 		and	r3, r3, #32512
 1727 0b06 4FEA1323 		lsr	r3, r3, #8
 1728 0b0a DAB2     		uxtb	r2, r3
 1729 0b0c 7B68     		ldr	r3, [r7, #4]
 1730 0b0e 5A70     		strb	r2, [r3, #1]
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1731              		.loc 1 1180 0
 1732 0b10 7B69     		ldr	r3, [r7, #20]
 1733 0b12 DBB2     		uxtb	r3, r3
 1734 0b14 03F07F03 		and	r3, r3, #127
 1735 0b18 DAB2     		uxtb	r2, r3
 1736 0b1a 7B68     		ldr	r3, [r7, #4]
 1737 0b1c 9A70     		strb	r2, [r3, #2]
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1738              		.loc 1 1182 0
 1739 0b1e 7B69     		ldr	r3, [r7, #20]
 1740 0b20 03F48003 		and	r3, r3, #4194304
 1741 0b24 4FEA1343 		lsr	r3, r3, #16
 1742 0b28 DAB2     		uxtb	r2, r3
 1743 0b2a 7B68     		ldr	r3, [r7, #4]
 1744 0b2c DA70     		strb	r2, [r3, #3]
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1745              		.loc 1 1183 0
 1746 0b2e 7B69     		ldr	r3, [r7, #20]
 1747 0b30 03F07C53 		and	r3, r3, #1056964608
 1748 0b34 4FEA1363 		lsr	r3, r3, #24
 1749 0b38 DAB2     		uxtb	r2, r3
 1750 0b3a 7B68     		ldr	r3, [r7, #4]
 1751 0b3c 1A73     		strb	r2, [r3, #12]
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1752              		.loc 1 1184 0
 1753 0b3e 7B69     		ldr	r3, [r7, #20]
 1754 0b40 03F08042 		and	r2, r3, #1073741824
 1755 0b44 7B68     		ldr	r3, [r7, #4]
 1756 0b46 9A60     		str	r2, [r3, #8]
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1757              		.loc 1 1185 0
 1758 0b48 7B69     		ldr	r3, [r7, #20]
 1759 0b4a 03F08032 		and	r2, r3, #-2139062144
 1760 0b4e 7B68     		ldr	r3, [r7, #4]
 1761 0b50 5A60     		str	r2, [r3, #4]
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1762              		.loc 1 1187 0
 1763 0b52 FB68     		ldr	r3, [r7, #12]
 1764 0b54 002B     		cmp	r3, #0
 1765 0b56 23D1     		bne	.L67
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1766              		.loc 1 1189 0
 1767 0b58 7B68     		ldr	r3, [r7, #4]
 1768 0b5a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1769 0b5c 1846     		mov	r0, r3
 1770 0b5e 00F0C7FD 		bl	RTC_Bcd2ToByte
 1771 0b62 0346     		mov	r3, r0
 1772 0b64 1A46     		mov	r2, r3
 1773 0b66 7B68     		ldr	r3, [r7, #4]
 1774 0b68 1A70     		strb	r2, [r3, #0]
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1775              		.loc 1 1191 0
 1776 0b6a 7B68     		ldr	r3, [r7, #4]
 1777 0b6c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1778 0b6e 1846     		mov	r0, r3
 1779 0b70 00F0BEFD 		bl	RTC_Bcd2ToByte
 1780 0b74 0346     		mov	r3, r0
 1781 0b76 1A46     		mov	r2, r3
 1782 0b78 7B68     		ldr	r3, [r7, #4]
 1783 0b7a 5A70     		strb	r2, [r3, #1]
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1784              		.loc 1 1193 0
 1785 0b7c 7B68     		ldr	r3, [r7, #4]
 1786 0b7e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1787 0b80 1846     		mov	r0, r3
 1788 0b82 00F0B5FD 		bl	RTC_Bcd2ToByte
 1789 0b86 0346     		mov	r3, r0
 1790 0b88 1A46     		mov	r2, r3
 1791 0b8a 7B68     		ldr	r3, [r7, #4]
 1792 0b8c 9A70     		strb	r2, [r3, #2]
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1793              		.loc 1 1195 0
 1794 0b8e 7B68     		ldr	r3, [r7, #4]
 1795 0b90 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1796 0b92 1846     		mov	r0, r3
 1797 0b94 00F0ACFD 		bl	RTC_Bcd2ToByte
 1798 0b98 0346     		mov	r3, r0
 1799 0b9a 1A46     		mov	r2, r3
 1800 0b9c 7B68     		ldr	r3, [r7, #4]
 1801 0b9e 1A73     		strb	r2, [r3, #12]
 1802              	.L67:
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1803              		.loc 1 1197 0
 1804 0ba0 07F11807 		add	r7, r7, #24
 1805 0ba4 BD46     		mov	sp, r7
 1806 0ba6 80BD     		pop	{r7, pc}
 1807              		.cfi_endproc
 1808              	.LFE45:
 1810              		.align	2
 1811              		.global	RTC_AlarmCmd
 1812              		.thumb
 1813              		.thumb_func
 1815              	RTC_AlarmCmd:
 1816              	.LFB46:
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be any combination of the following values:
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 1817              		.loc 1 1212 0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 24
 1820              		@ frame_needed = 1, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
 1822 0ba8 80B4     		push	{r7}
 1823              	.LCFI50:
 1824              		.cfi_def_cfa_offset 4
 1825              		.cfi_offset 7, -4
 1826 0baa 87B0     		sub	sp, sp, #28
 1827              	.LCFI51:
 1828              		.cfi_def_cfa_offset 32
 1829 0bac 00AF     		add	r7, sp, #0
 1830              	.LCFI52:
 1831              		.cfi_def_cfa_register 7
 1832 0bae 7860     		str	r0, [r7, #4]
 1833 0bb0 0B46     		mov	r3, r1
 1834 0bb2 FB70     		strb	r3, [r7, #3]
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1835              		.loc 1 1213 0
 1836 0bb4 4FF00003 		mov	r3, #0
 1837 0bb8 FB60     		str	r3, [r7, #12]
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1838              		.loc 1 1214 0
 1839 0bba 4FF00003 		mov	r3, #0
 1840 0bbe 3B61     		str	r3, [r7, #16]
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 1841              		.loc 1 1215 0
 1842 0bc0 4FF00003 		mov	r3, #0
 1843 0bc4 FB75     		strb	r3, [r7, #23]
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 1844              		.loc 1 1222 0
 1845 0bc6 4FF42053 		mov	r3, #10240
 1846 0bca C4F20003 		movt	r3, 16384
 1847 0bce 4FF0CA02 		mov	r2, #202
 1848 0bd2 5A62     		str	r2, [r3, #36]
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 1849              		.loc 1 1223 0
 1850 0bd4 4FF42053 		mov	r3, #10240
 1851 0bd8 C4F20003 		movt	r3, 16384
 1852 0bdc 4FF05302 		mov	r2, #83
 1853 0be0 5A62     		str	r2, [r3, #36]
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the Alarm state */
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 1854              		.loc 1 1226 0
 1855 0be2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1856 0be4 002B     		cmp	r3, #0
 1857 0be6 10D0     		beq	.L72
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1858              		.loc 1 1228 0
 1859 0be8 4FF42053 		mov	r3, #10240
 1860 0bec C4F20003 		movt	r3, 16384
 1861 0bf0 4FF42052 		mov	r2, #10240
 1862 0bf4 C4F20002 		movt	r2, 16384
 1863 0bf8 9268     		ldr	r2, [r2, #8]
 1864 0bfa 1146     		mov	r1, r2
 1865 0bfc 7A68     		ldr	r2, [r7, #4]
 1866 0bfe 0A43     		orrs	r2, r2, r1
 1867 0c00 9A60     		str	r2, [r3, #8]
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;    
 1868              		.loc 1 1230 0
 1869 0c02 4FF00103 		mov	r3, #1
 1870 0c06 FB75     		strb	r3, [r7, #23]
 1871 0c08 37E0     		b	.L73
 1872              	.L72:
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   { 
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1873              		.loc 1 1235 0
 1874 0c0a 4FF42053 		mov	r3, #10240
 1875 0c0e C4F20003 		movt	r3, 16384
 1876 0c12 4FF42052 		mov	r2, #10240
 1877 0c16 C4F20002 		movt	r2, 16384
 1878 0c1a 9268     		ldr	r2, [r2, #8]
 1879 0c1c 1146     		mov	r1, r2
 1880 0c1e 7A68     		ldr	r2, [r7, #4]
 1881 0c20 6FEA0202 		mvn	r2, r2
 1882 0c24 0A40     		ands	r2, r2, r1
 1883 0c26 9A60     		str	r2, [r3, #8]
 1884              	.L75:
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     do
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1885              		.loc 1 1240 0 discriminator 1
 1886 0c28 4FF42053 		mov	r3, #10240
 1887 0c2c C4F20003 		movt	r3, 16384
 1888 0c30 DB68     		ldr	r3, [r3, #12]
 1889 0c32 1A46     		mov	r2, r3
 1890 0c34 7B68     		ldr	r3, [r7, #4]
 1891 0c36 4FEA1323 		lsr	r3, r3, #8
 1892 0c3a 1340     		ands	r3, r3, r2
 1893 0c3c 3B61     		str	r3, [r7, #16]
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       alarmcounter++;  
 1894              		.loc 1 1241 0 discriminator 1
 1895 0c3e FB68     		ldr	r3, [r7, #12]
 1896 0c40 03F10103 		add	r3, r3, #1
 1897 0c44 FB60     		str	r3, [r7, #12]
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1898              		.loc 1 1242 0 discriminator 1
 1899 0c46 FB68     		ldr	r3, [r7, #12]
 1900 0c48 B3F5803F 		cmp	r3, #65536
 1901 0c4c 02D0     		beq	.L74
 1902 0c4e 3B69     		ldr	r3, [r7, #16]
 1903 0c50 002B     		cmp	r3, #0
 1904 0c52 E9D0     		beq	.L75
 1905              	.L74:
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 1906              		.loc 1 1244 0
 1907 0c54 4FF42053 		mov	r3, #10240
 1908 0c58 C4F20003 		movt	r3, 16384
 1909 0c5c DB68     		ldr	r3, [r3, #12]
 1910 0c5e 1A46     		mov	r2, r3
 1911 0c60 7B68     		ldr	r3, [r7, #4]
 1912 0c62 4FEA1323 		lsr	r3, r3, #8
 1913 0c66 1340     		ands	r3, r3, r2
 1914 0c68 002B     		cmp	r3, #0
 1915 0c6a 03D1     		bne	.L76
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 1916              		.loc 1 1246 0
 1917 0c6c 4FF00003 		mov	r3, #0
 1918 0c70 FB75     		strb	r3, [r7, #23]
 1919 0c72 02E0     		b	.L73
 1920              	.L76:
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } 
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 1921              		.loc 1 1250 0
 1922 0c74 4FF00103 		mov	r3, #1
 1923 0c78 FB75     		strb	r3, [r7, #23]
 1924              	.L73:
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }        
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 1925              		.loc 1 1255 0
 1926 0c7a 4FF42053 		mov	r3, #10240
 1927 0c7e C4F20003 		movt	r3, 16384
 1928 0c82 4FF0FF02 		mov	r2, #255
 1929 0c86 5A62     		str	r2, [r3, #36]
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 1930              		.loc 1 1257 0
 1931 0c88 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1932              		.loc 1 1258 0
 1933 0c8a 1846     		mov	r0, r3
 1934 0c8c 07F11C07 		add	r7, r7, #28
 1935 0c90 BD46     		mov	sp, r7
 1936 0c92 80BC     		pop	{r7}
 1937 0c94 7047     		bx	lr
 1938              		.cfi_endproc
 1939              	.LFE46:
 1941 0c96 00BF     		.align	2
 1942              		.global	RTC_WakeUpClockConfig
 1943              		.thumb
 1944              		.thumb_func
 1946              	RTC_WakeUpClockConfig:
 1947              	.LFB47:
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                      WakeUp Timer configuration functions
1270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 1948              		.loc 1 1293 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 8
 1951              		@ frame_needed = 1, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
 1953 0c98 80B4     		push	{r7}
 1954              	.LCFI53:
 1955              		.cfi_def_cfa_offset 4
 1956              		.cfi_offset 7, -4
 1957 0c9a 83B0     		sub	sp, sp, #12
 1958              	.LCFI54:
 1959              		.cfi_def_cfa_offset 16
 1960 0c9c 00AF     		add	r7, sp, #0
 1961              	.LCFI55:
 1962              		.cfi_def_cfa_register 7
 1963 0c9e 7860     		str	r0, [r7, #4]
1294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 1964              		.loc 1 1298 0
 1965 0ca0 4FF42053 		mov	r3, #10240
 1966 0ca4 C4F20003 		movt	r3, 16384
 1967 0ca8 4FF0CA02 		mov	r2, #202
 1968 0cac 5A62     		str	r2, [r3, #36]
1299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 1969              		.loc 1 1299 0
 1970 0cae 4FF42053 		mov	r3, #10240
 1971 0cb2 C4F20003 		movt	r3, 16384
 1972 0cb6 4FF05302 		mov	r2, #83
 1973 0cba 5A62     		str	r2, [r3, #36]
1300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1974              		.loc 1 1302 0
 1975 0cbc 4FF42053 		mov	r3, #10240
 1976 0cc0 C4F20003 		movt	r3, 16384
 1977 0cc4 4FF42052 		mov	r2, #10240
 1978 0cc8 C4F20002 		movt	r2, 16384
 1979 0ccc 9268     		ldr	r2, [r2, #8]
 1980 0cce 22F00702 		bic	r2, r2, #7
 1981 0cd2 9A60     		str	r2, [r3, #8]
1303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the clock source */
1305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1982              		.loc 1 1305 0
 1983 0cd4 4FF42053 		mov	r3, #10240
 1984 0cd8 C4F20003 		movt	r3, 16384
 1985 0cdc 4FF42052 		mov	r2, #10240
 1986 0ce0 C4F20002 		movt	r2, 16384
 1987 0ce4 9268     		ldr	r2, [r2, #8]
 1988 0ce6 1146     		mov	r1, r2
 1989 0ce8 7A68     		ldr	r2, [r7, #4]
 1990 0cea 0A43     		orrs	r2, r2, r1
 1991 0cec 9A60     		str	r2, [r3, #8]
1306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 1992              		.loc 1 1308 0
 1993 0cee 4FF42053 		mov	r3, #10240
 1994 0cf2 C4F20003 		movt	r3, 16384
 1995 0cf6 4FF0FF02 		mov	r2, #255
 1996 0cfa 5A62     		str	r2, [r3, #36]
1309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 1997              		.loc 1 1309 0
 1998 0cfc 07F10C07 		add	r7, r7, #12
 1999 0d00 BD46     		mov	sp, r7
 2000 0d02 80BC     		pop	{r7}
 2001 0d04 7047     		bx	lr
 2002              		.cfi_endproc
 2003              	.LFE47:
 2005 0d06 00BF     		.align	2
 2006              		.global	RTC_SetWakeUpCounter
 2007              		.thumb
 2008              		.thumb_func
 2010              	RTC_SetWakeUpCounter:
 2011              	.LFB48:
1310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2012              		.loc 1 1320 0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 8
 2015              		@ frame_needed = 1, uses_anonymous_args = 0
 2016              		@ link register save eliminated.
 2017 0d08 80B4     		push	{r7}
 2018              	.LCFI56:
 2019              		.cfi_def_cfa_offset 4
 2020              		.cfi_offset 7, -4
 2021 0d0a 83B0     		sub	sp, sp, #12
 2022              	.LCFI57:
 2023              		.cfi_def_cfa_offset 16
 2024 0d0c 00AF     		add	r7, sp, #0
 2025              	.LCFI58:
 2026              		.cfi_def_cfa_register 7
 2027 0d0e 7860     		str	r0, [r7, #4]
1321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 2028              		.loc 1 1325 0
 2029 0d10 4FF42053 		mov	r3, #10240
 2030 0d14 C4F20003 		movt	r3, 16384
 2031 0d18 4FF0CA02 		mov	r2, #202
 2032 0d1c 5A62     		str	r2, [r3, #36]
1326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 2033              		.loc 1 1326 0
 2034 0d1e 4FF42053 		mov	r3, #10240
 2035 0d22 C4F20003 		movt	r3, 16384
 2036 0d26 4FF05302 		mov	r2, #83
 2037 0d2a 5A62     		str	r2, [r3, #36]
1327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2038              		.loc 1 1329 0
 2039 0d2c 4FF42053 		mov	r3, #10240
 2040 0d30 C4F20003 		movt	r3, 16384
 2041 0d34 7A68     		ldr	r2, [r7, #4]
 2042 0d36 5A61     		str	r2, [r3, #20]
1330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 2043              		.loc 1 1332 0
 2044 0d38 4FF42053 		mov	r3, #10240
 2045 0d3c C4F20003 		movt	r3, 16384
 2046 0d40 4FF0FF02 		mov	r2, #255
 2047 0d44 5A62     		str	r2, [r3, #36]
1333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2048              		.loc 1 1333 0
 2049 0d46 07F10C07 		add	r7, r7, #12
 2050 0d4a BD46     		mov	sp, r7
 2051 0d4c 80BC     		pop	{r7}
 2052 0d4e 7047     		bx	lr
 2053              		.cfi_endproc
 2054              	.LFE48:
 2056              		.align	2
 2057              		.global	RTC_GetWakeUpCounter
 2058              		.thumb
 2059              		.thumb_func
 2061              	RTC_GetWakeUpCounter:
 2062              	.LFB49:
1334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
1338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2063              		.loc 1 1341 0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 0
 2066              		@ frame_needed = 1, uses_anonymous_args = 0
 2067              		@ link register save eliminated.
 2068 0d50 80B4     		push	{r7}
 2069              	.LCFI59:
 2070              		.cfi_def_cfa_offset 4
 2071              		.cfi_offset 7, -4
 2072 0d52 00AF     		add	r7, sp, #0
 2073              	.LCFI60:
 2074              		.cfi_def_cfa_register 7
1342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the counter value */
1343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2075              		.loc 1 1343 0
 2076 0d54 4FF42053 		mov	r3, #10240
 2077 0d58 C4F20003 		movt	r3, 16384
 2078 0d5c 5B69     		ldr	r3, [r3, #20]
 2079 0d5e 4FEA0343 		lsl	r3, r3, #16
 2080 0d62 4FEA1343 		lsr	r3, r3, #16
1344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2081              		.loc 1 1344 0
 2082 0d66 1846     		mov	r0, r3
 2083 0d68 BD46     		mov	sp, r7
 2084 0d6a 80BC     		pop	{r7}
 2085 0d6c 7047     		bx	lr
 2086              		.cfi_endproc
 2087              	.LFE49:
 2089 0d6e 00BF     		.align	2
 2090              		.global	RTC_WakeUpCmd
 2091              		.thumb
 2092              		.thumb_func
 2094              	RTC_WakeUpCmd:
 2095              	.LFB50:
1345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2096              		.loc 1 1353 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 24
 2099              		@ frame_needed = 1, uses_anonymous_args = 0
 2100              		@ link register save eliminated.
 2101 0d70 80B4     		push	{r7}
 2102              	.LCFI61:
 2103              		.cfi_def_cfa_offset 4
 2104              		.cfi_offset 7, -4
 2105 0d72 87B0     		sub	sp, sp, #28
 2106              	.LCFI62:
 2107              		.cfi_def_cfa_offset 32
 2108 0d74 00AF     		add	r7, sp, #0
 2109              	.LCFI63:
 2110              		.cfi_def_cfa_register 7
 2111 0d76 0346     		mov	r3, r0
 2112 0d78 FB71     		strb	r3, [r7, #7]
1354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2113              		.loc 1 1354 0
 2114 0d7a 4FF00003 		mov	r3, #0
 2115 0d7e FB60     		str	r3, [r7, #12]
1355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2116              		.loc 1 1355 0
 2117 0d80 4FF00003 		mov	r3, #0
 2118 0d84 3B61     		str	r3, [r7, #16]
1356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 2119              		.loc 1 1356 0
 2120 0d86 4FF00003 		mov	r3, #0
 2121 0d8a FB75     		strb	r3, [r7, #23]
1357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 2122              		.loc 1 1362 0
 2123 0d8c 4FF42053 		mov	r3, #10240
 2124 0d90 C4F20003 		movt	r3, 16384
 2125 0d94 4FF0CA02 		mov	r2, #202
 2126 0d98 5A62     		str	r2, [r3, #36]
1363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 2127              		.loc 1 1363 0
 2128 0d9a 4FF42053 		mov	r3, #10240
 2129 0d9e C4F20003 		movt	r3, 16384
 2130 0da2 4FF05302 		mov	r2, #83
 2131 0da6 5A62     		str	r2, [r3, #36]
1364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 2132              		.loc 1 1365 0
 2133 0da8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2134 0daa 002B     		cmp	r3, #0
 2135 0dac 0FD0     		beq	.L81
1366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Enable the Wakeup Timer */
1368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2136              		.loc 1 1368 0
 2137 0dae 4FF42053 		mov	r3, #10240
 2138 0db2 C4F20003 		movt	r3, 16384
 2139 0db6 4FF42052 		mov	r2, #10240
 2140 0dba C4F20002 		movt	r2, 16384
 2141 0dbe 9268     		ldr	r2, [r2, #8]
 2142 0dc0 42F48062 		orr	r2, r2, #1024
 2143 0dc4 9A60     		str	r2, [r3, #8]
1369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;    
 2144              		.loc 1 1369 0
 2145 0dc6 4FF00103 		mov	r3, #1
 2146 0dca FB75     		strb	r3, [r7, #23]
 2147 0dcc 2EE0     		b	.L82
 2148              	.L81:
1370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the Wakeup Timer */
1374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2149              		.loc 1 1374 0
 2150 0dce 4FF42053 		mov	r3, #10240
 2151 0dd2 C4F20003 		movt	r3, 16384
 2152 0dd6 4FF42052 		mov	r2, #10240
 2153 0dda C4F20002 		movt	r2, 16384
 2154 0dde 9268     		ldr	r2, [r2, #8]
 2155 0de0 22F48062 		bic	r2, r2, #1024
 2156 0de4 9A60     		str	r2, [r3, #8]
 2157              	.L84:
1375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     do
1377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2158              		.loc 1 1378 0 discriminator 1
 2159 0de6 4FF42053 		mov	r3, #10240
 2160 0dea C4F20003 		movt	r3, 16384
 2161 0dee DB68     		ldr	r3, [r3, #12]
 2162 0df0 03F00403 		and	r3, r3, #4
 2163 0df4 3B61     		str	r3, [r7, #16]
1379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       wutcounter++;  
 2164              		.loc 1 1379 0 discriminator 1
 2165 0df6 FB68     		ldr	r3, [r7, #12]
 2166 0df8 03F10103 		add	r3, r3, #1
 2167 0dfc FB60     		str	r3, [r7, #12]
1380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2168              		.loc 1 1380 0 discriminator 1
 2169 0dfe FB68     		ldr	r3, [r7, #12]
 2170 0e00 B3F5803F 		cmp	r3, #65536
 2171 0e04 02D0     		beq	.L83
 2172 0e06 3B69     		ldr	r3, [r7, #16]
 2173 0e08 002B     		cmp	r3, #0
 2174 0e0a ECD0     		beq	.L84
 2175              	.L83:
1381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2176              		.loc 1 1382 0
 2177 0e0c 4FF42053 		mov	r3, #10240
 2178 0e10 C4F20003 		movt	r3, 16384
 2179 0e14 DB68     		ldr	r3, [r3, #12]
 2180 0e16 03F00403 		and	r3, r3, #4
 2181 0e1a 002B     		cmp	r3, #0
 2182 0e1c 03D1     		bne	.L85
1383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = ERROR;
 2183              		.loc 1 1384 0
 2184 0e1e 4FF00003 		mov	r3, #0
 2185 0e22 FB75     		strb	r3, [r7, #23]
 2186 0e24 02E0     		b	.L82
 2187              	.L85:
1385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       status = SUCCESS;
 2188              		.loc 1 1388 0
 2189 0e26 4FF00103 		mov	r3, #1
 2190 0e2a FB75     		strb	r3, [r7, #23]
 2191              	.L82:
1389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }    
1390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 2192              		.loc 1 1393 0
 2193 0e2c 4FF42053 		mov	r3, #10240
 2194 0e30 C4F20003 		movt	r3, 16384
 2195 0e34 4FF0FF02 		mov	r2, #255
 2196 0e38 5A62     		str	r2, [r3, #36]
1394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 2197              		.loc 1 1395 0
 2198 0e3a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2199              		.loc 1 1396 0
 2200 0e3c 1846     		mov	r0, r3
 2201 0e3e 07F11C07 		add	r7, r7, #28
 2202 0e42 BD46     		mov	sp, r7
 2203 0e44 80BC     		pop	{r7}
 2204 0e46 7047     		bx	lr
 2205              		.cfi_endproc
 2206              	.LFE50:
 2208              		.align	2
 2209              		.global	RTC_DayLightSavingConfig
 2210              		.thumb
 2211              		.thumb_func
 2213              	RTC_DayLightSavingConfig:
 2214              	.LFB51:
1397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                     Daylight Saving configuration functions
1408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                            in CR register to store the operation.
1424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2215              		.loc 1 1430 0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 8
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219              		@ link register save eliminated.
 2220 0e48 80B4     		push	{r7}
 2221              	.LCFI64:
 2222              		.cfi_def_cfa_offset 4
 2223              		.cfi_offset 7, -4
 2224 0e4a 83B0     		sub	sp, sp, #12
 2225              	.LCFI65:
 2226              		.cfi_def_cfa_offset 16
 2227 0e4c 00AF     		add	r7, sp, #0
 2228              	.LCFI66:
 2229              		.cfi_def_cfa_register 7
 2230 0e4e 7860     		str	r0, [r7, #4]
 2231 0e50 3960     		str	r1, [r7, #0]
1431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 2232              		.loc 1 1436 0
 2233 0e52 4FF42053 		mov	r3, #10240
 2234 0e56 C4F20003 		movt	r3, 16384
 2235 0e5a 4FF0CA02 		mov	r2, #202
 2236 0e5e 5A62     		str	r2, [r3, #36]
1437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 2237              		.loc 1 1437 0
 2238 0e60 4FF42053 		mov	r3, #10240
 2239 0e64 C4F20003 		movt	r3, 16384
 2240 0e68 4FF05302 		mov	r2, #83
 2241 0e6c 5A62     		str	r2, [r3, #36]
1438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the bits to be configured */
1440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2242              		.loc 1 1440 0
 2243 0e6e 4FF42053 		mov	r3, #10240
 2244 0e72 C4F20003 		movt	r3, 16384
 2245 0e76 4FF42052 		mov	r2, #10240
 2246 0e7a C4F20002 		movt	r2, 16384
 2247 0e7e 9268     		ldr	r2, [r2, #8]
 2248 0e80 22F48022 		bic	r2, r2, #262144
 2249 0e84 9A60     		str	r2, [r3, #8]
1441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the RTC_CR register */
1443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2250              		.loc 1 1443 0
 2251 0e86 4FF42053 		mov	r3, #10240
 2252 0e8a C4F20003 		movt	r3, 16384
 2253 0e8e 4FF42052 		mov	r2, #10240
 2254 0e92 C4F20002 		movt	r2, 16384
 2255 0e96 9268     		ldr	r2, [r2, #8]
 2256 0e98 1146     		mov	r1, r2
 2257 0e9a 7868     		ldr	r0, [r7, #4]
 2258 0e9c 3A68     		ldr	r2, [r7, #0]
 2259 0e9e 0243     		orrs	r2, r2, r0
 2260 0ea0 0A43     		orrs	r2, r2, r1
 2261 0ea2 9A60     		str	r2, [r3, #8]
1444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 2262              		.loc 1 1446 0
 2263 0ea4 4FF42053 		mov	r3, #10240
 2264 0ea8 C4F20003 		movt	r3, 16384
 2265 0eac 4FF0FF02 		mov	r2, #255
 2266 0eb0 5A62     		str	r2, [r3, #36]
1447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2267              		.loc 1 1447 0
 2268 0eb2 07F10C07 		add	r7, r7, #12
 2269 0eb6 BD46     		mov	sp, r7
 2270 0eb8 80BC     		pop	{r7}
 2271 0eba 7047     		bx	lr
 2272              		.cfi_endproc
 2273              	.LFE51:
 2275              		.align	2
 2276              		.global	RTC_GetStoreOperation
 2277              		.thumb
 2278              		.thumb_func
 2280              	RTC_GetStoreOperation:
 2281              	.LFB52:
1448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  None
1452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2282              		.loc 1 1457 0
 2283              		.cfi_startproc
 2284              		@ args = 0, pretend = 0, frame = 0
 2285              		@ frame_needed = 1, uses_anonymous_args = 0
 2286              		@ link register save eliminated.
 2287 0ebc 80B4     		push	{r7}
 2288              	.LCFI67:
 2289              		.cfi_def_cfa_offset 4
 2290              		.cfi_offset 7, -4
 2291 0ebe 00AF     		add	r7, sp, #0
 2292              	.LCFI68:
 2293              		.cfi_def_cfa_register 7
1458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2294              		.loc 1 1458 0
 2295 0ec0 4FF42053 		mov	r3, #10240
 2296 0ec4 C4F20003 		movt	r3, 16384
 2297 0ec8 9B68     		ldr	r3, [r3, #8]
 2298 0eca 03F48023 		and	r3, r3, #262144
1459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2299              		.loc 1 1459 0
 2300 0ece 1846     		mov	r0, r3
 2301 0ed0 BD46     		mov	sp, r7
 2302 0ed2 80BC     		pop	{r7}
 2303 0ed4 7047     		bx	lr
 2304              		.cfi_endproc
 2305              	.LFE52:
 2307 0ed6 00BF     		.align	2
 2308              		.global	RTC_OutputConfig
 2309              		.thumb
 2310              		.thumb_func
 2312              	RTC_OutputConfig:
 2313              	.LFB53:
1460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Output pin Configuration function 
1467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                          Output pin Configuration function
1471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following:
1489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2314              		.loc 1 1496 0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 8
 2317              		@ frame_needed = 1, uses_anonymous_args = 0
 2318              		@ link register save eliminated.
 2319 0ed8 80B4     		push	{r7}
 2320              	.LCFI69:
 2321              		.cfi_def_cfa_offset 4
 2322              		.cfi_offset 7, -4
 2323 0eda 83B0     		sub	sp, sp, #12
 2324              	.LCFI70:
 2325              		.cfi_def_cfa_offset 16
 2326 0edc 00AF     		add	r7, sp, #0
 2327              	.LCFI71:
 2328              		.cfi_def_cfa_register 7
 2329 0ede 7860     		str	r0, [r7, #4]
 2330 0ee0 3960     		str	r1, [r7, #0]
1497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 2331              		.loc 1 1502 0
 2332 0ee2 4FF42053 		mov	r3, #10240
 2333 0ee6 C4F20003 		movt	r3, 16384
 2334 0eea 4FF0CA02 		mov	r2, #202
 2335 0eee 5A62     		str	r2, [r3, #36]
1503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 2336              		.loc 1 1503 0
 2337 0ef0 4FF42053 		mov	r3, #10240
 2338 0ef4 C4F20003 		movt	r3, 16384
 2339 0ef8 4FF05302 		mov	r2, #83
 2340 0efc 5A62     		str	r2, [r3, #36]
1504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the bits to be configured */
1506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2341              		.loc 1 1506 0
 2342 0efe 4FF42053 		mov	r3, #10240
 2343 0f02 C4F20003 		movt	r3, 16384
 2344 0f06 4FF42052 		mov	r2, #10240
 2345 0f0a C4F20002 		movt	r2, 16384
 2346 0f0e 9268     		ldr	r2, [r2, #8]
 2347 0f10 22F4E002 		bic	r2, r2, #7340032
 2348 0f14 9A60     		str	r2, [r3, #8]
1507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the output selection and polarity */
1509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2349              		.loc 1 1509 0
 2350 0f16 4FF42053 		mov	r3, #10240
 2351 0f1a C4F20003 		movt	r3, 16384
 2352 0f1e 4FF42052 		mov	r2, #10240
 2353 0f22 C4F20002 		movt	r2, 16384
 2354 0f26 9268     		ldr	r2, [r2, #8]
 2355 0f28 1146     		mov	r1, r2
 2356 0f2a 7868     		ldr	r0, [r7, #4]
 2357 0f2c 3A68     		ldr	r2, [r7, #0]
 2358 0f2e 0243     		orrs	r2, r2, r0
 2359 0f30 0A43     		orrs	r2, r2, r1
 2360 0f32 9A60     		str	r2, [r3, #8]
1510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 2361              		.loc 1 1512 0
 2362 0f34 4FF42053 		mov	r3, #10240
 2363 0f38 C4F20003 		movt	r3, 16384
 2364 0f3c 4FF0FF02 		mov	r2, #255
 2365 0f40 5A62     		str	r2, [r3, #36]
1513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2366              		.loc 1 1513 0
 2367 0f42 07F10C07 		add	r7, r7, #12
 2368 0f46 BD46     		mov	sp, r7
 2369 0f48 80BC     		pop	{r7}
 2370 0f4a 7047     		bx	lr
 2371              		.cfi_endproc
 2372              	.LFE53:
 2374              		.align	2
 2375              		.global	RTC_CoarseCalibConfig
 2376              		.thumb
 2377              		.thumb_func
 2379              	RTC_CoarseCalibConfig:
 2380              	.LFB54:
1514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group7 Coarse Calibration configuration functions
1520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                   Coarse Calibration configuration functions
1525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be  one of the following values:
1535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *    
1539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         sign with a 2-ppm step.
1541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           
1542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         sign with a 4-ppm step.
1544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *           
1545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2381              		.loc 1 1550 0
 2382              		.cfi_startproc
 2383              		@ args = 0, pretend = 0, frame = 16
 2384              		@ frame_needed = 1, uses_anonymous_args = 0
 2385 0f4c 80B5     		push	{r7, lr}
 2386              	.LCFI72:
 2387              		.cfi_def_cfa_offset 8
 2388              		.cfi_offset 14, -4
 2389              		.cfi_offset 7, -8
 2390 0f4e 84B0     		sub	sp, sp, #16
 2391              	.LCFI73:
 2392              		.cfi_def_cfa_offset 24
 2393 0f50 00AF     		add	r7, sp, #0
 2394              	.LCFI74:
 2395              		.cfi_def_cfa_register 7
 2396 0f52 7860     		str	r0, [r7, #4]
 2397 0f54 3960     		str	r1, [r7, #0]
1551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 2398              		.loc 1 1551 0
 2399 0f56 4FF00003 		mov	r3, #0
 2400 0f5a FB73     		strb	r3, [r7, #15]
1552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    
1553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 2401              		.loc 1 1558 0
 2402 0f5c 4FF42053 		mov	r3, #10240
 2403 0f60 C4F20003 		movt	r3, 16384
 2404 0f64 4FF0CA02 		mov	r2, #202
 2405 0f68 5A62     		str	r2, [r3, #36]
1559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 2406              		.loc 1 1559 0
 2407 0f6a 4FF42053 		mov	r3, #10240
 2408 0f6e C4F20003 		movt	r3, 16384
 2409 0f72 4FF05302 		mov	r2, #83
 2410 0f76 5A62     		str	r2, [r3, #36]
1560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
1562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2411              		.loc 1 1562 0
 2412 0f78 FFF7FEFF 		bl	RTC_EnterInitMode
 2413 0f7c 0346     		mov	r3, r0
 2414 0f7e 002B     		cmp	r3, #0
 2415 0f80 03D1     		bne	.L90
1563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = ERROR;
 2416              		.loc 1 1564 0
 2417 0f82 4FF00003 		mov	r3, #0
 2418 0f86 FB73     		strb	r3, [r7, #15]
 2419 0f88 0CE0     		b	.L91
 2420              	.L90:
1565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Set the coarse calibration value */
1569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2421              		.loc 1 1569 0
 2422 0f8a 4FF42053 		mov	r3, #10240
 2423 0f8e C4F20003 		movt	r3, 16384
 2424 0f92 7968     		ldr	r1, [r7, #4]
 2425 0f94 3A68     		ldr	r2, [r7, #0]
 2426 0f96 0A43     		orrs	r2, r2, r1
 2427 0f98 9A61     		str	r2, [r3, #24]
1570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
1571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode();
 2428              		.loc 1 1571 0
 2429 0f9a FFF7FEFF 		bl	RTC_ExitInitMode
1572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;
 2430              		.loc 1 1573 0
 2431 0f9e 4FF00103 		mov	r3, #1
 2432 0fa2 FB73     		strb	r3, [r7, #15]
 2433              	.L91:
1574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 2434              		.loc 1 1577 0
 2435 0fa4 4FF42053 		mov	r3, #10240
 2436 0fa8 C4F20003 		movt	r3, 16384
 2437 0fac 4FF0FF02 		mov	r2, #255
 2438 0fb0 5A62     		str	r2, [r3, #36]
1578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 2439              		.loc 1 1579 0
 2440 0fb2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2441              		.loc 1 1580 0
 2442 0fb4 1846     		mov	r0, r3
 2443 0fb6 07F11007 		add	r7, r7, #16
 2444 0fba BD46     		mov	sp, r7
 2445 0fbc 80BD     		pop	{r7, pc}
 2446              		.cfi_endproc
 2447              	.LFE54:
 2449 0fbe 00BF     		.align	2
 2450              		.global	RTC_CoarseCalibCmd
 2451              		.thumb
 2452              		.thumb_func
 2454              	RTC_CoarseCalibCmd:
 2455              	.LFB55:
1581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2456              		.loc 1 1591 0
 2457              		.cfi_startproc
 2458              		@ args = 0, pretend = 0, frame = 16
 2459              		@ frame_needed = 1, uses_anonymous_args = 0
 2460 0fc0 80B5     		push	{r7, lr}
 2461              	.LCFI75:
 2462              		.cfi_def_cfa_offset 8
 2463              		.cfi_offset 14, -4
 2464              		.cfi_offset 7, -8
 2465 0fc2 84B0     		sub	sp, sp, #16
 2466              	.LCFI76:
 2467              		.cfi_def_cfa_offset 24
 2468 0fc4 00AF     		add	r7, sp, #0
 2469              	.LCFI77:
 2470              		.cfi_def_cfa_register 7
 2471 0fc6 0346     		mov	r3, r0
 2472 0fc8 FB71     		strb	r3, [r7, #7]
1592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ErrorStatus status = ERROR;
 2473              		.loc 1 1592 0
 2474 0fca 4FF00003 		mov	r3, #0
 2475 0fce FB73     		strb	r3, [r7, #15]
1593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 2476              		.loc 1 1598 0
 2477 0fd0 4FF42053 		mov	r3, #10240
 2478 0fd4 C4F20003 		movt	r3, 16384
 2479 0fd8 4FF0CA02 		mov	r2, #202
 2480 0fdc 5A62     		str	r2, [r3, #36]
1599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 2481              		.loc 1 1599 0
 2482 0fde 4FF42053 		mov	r3, #10240
 2483 0fe2 C4F20003 		movt	r3, 16384
 2484 0fe6 4FF05302 		mov	r2, #83
 2485 0fea 5A62     		str	r2, [r3, #36]
1600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Set Initialization mode */
1602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2486              		.loc 1 1602 0
 2487 0fec FFF7FEFF 		bl	RTC_EnterInitMode
 2488 0ff0 0346     		mov	r3, r0
 2489 0ff2 002B     		cmp	r3, #0
 2490 0ff4 03D1     		bne	.L93
1603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status =  ERROR;
 2491              		.loc 1 1604 0
 2492 0ff6 4FF00003 		mov	r3, #0
 2493 0ffa FB73     		strb	r3, [r7, #15]
 2494 0ffc 20E0     		b	.L94
 2495              	.L93:
1605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     if (NewState != DISABLE)
 2496              		.loc 1 1608 0
 2497 0ffe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2498 1000 002B     		cmp	r3, #0
 2499 1002 0CD0     		beq	.L95
1609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     {
1610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Enable the Coarse Calibration */
1611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2500              		.loc 1 1611 0
 2501 1004 4FF42053 		mov	r3, #10240
 2502 1008 C4F20003 		movt	r3, 16384
 2503 100c 4FF42052 		mov	r2, #10240
 2504 1010 C4F20002 		movt	r2, 16384
 2505 1014 9268     		ldr	r2, [r2, #8]
 2506 1016 42F08002 		orr	r2, r2, #128
 2507 101a 9A60     		str	r2, [r3, #8]
 2508 101c 0BE0     		b	.L96
 2509              	.L95:
1612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     else
1614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     { 
1615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       /* Disable the Coarse Calibration */
1616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2510              		.loc 1 1616 0
 2511 101e 4FF42053 		mov	r3, #10240
 2512 1022 C4F20003 		movt	r3, 16384
 2513 1026 4FF42052 		mov	r2, #10240
 2514 102a C4F20002 		movt	r2, 16384
 2515 102e 9268     		ldr	r2, [r2, #8]
 2516 1030 22F08002 		bic	r2, r2, #128
 2517 1034 9A60     		str	r2, [r3, #8]
 2518              	.L96:
1617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     }
1618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Exit Initialization mode */
1619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_ExitInitMode();
 2519              		.loc 1 1619 0
 2520 1036 FFF7FEFF 		bl	RTC_ExitInitMode
1620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     
1621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     status = SUCCESS;
 2521              		.loc 1 1621 0
 2522 103a 4FF00103 		mov	r3, #1
 2523 103e FB73     		strb	r3, [r7, #15]
 2524              	.L94:
1622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   } 
1623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 2525              		.loc 1 1625 0
 2526 1040 4FF42053 		mov	r3, #10240
 2527 1044 C4F20003 		movt	r3, 16384
 2528 1048 4FF0FF02 		mov	r2, #255
 2529 104c 5A62     		str	r2, [r3, #36]
1626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return status;
 2530              		.loc 1 1627 0
 2531 104e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2532              		.loc 1 1628 0
 2533 1050 1846     		mov	r0, r3
 2534 1052 07F11007 		add	r7, r7, #16
 2535 1056 BD46     		mov	sp, r7
 2536 1058 80BD     		pop	{r7, pc}
 2537              		.cfi_endproc
 2538              	.LFE55:
 2540 105a 00BF     		.align	2
 2541              		.global	RTC_CalibOutputCmd
 2542              		.thumb
 2543              		.thumb_func
 2545              	RTC_CalibOutputCmd:
 2546              	.LFB56:
1629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2547              		.loc 1 1637 0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 8
 2550              		@ frame_needed = 1, uses_anonymous_args = 0
 2551              		@ link register save eliminated.
 2552 105c 80B4     		push	{r7}
 2553              	.LCFI78:
 2554              		.cfi_def_cfa_offset 4
 2555              		.cfi_offset 7, -4
 2556 105e 83B0     		sub	sp, sp, #12
 2557              	.LCFI79:
 2558              		.cfi_def_cfa_offset 16
 2559 1060 00AF     		add	r7, sp, #0
 2560              	.LCFI80:
 2561              		.cfi_def_cfa_register 7
 2562 1062 0346     		mov	r3, r0
 2563 1064 FB71     		strb	r3, [r7, #7]
1638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 2564              		.loc 1 1642 0
 2565 1066 4FF42053 		mov	r3, #10240
 2566 106a C4F20003 		movt	r3, 16384
 2567 106e 4FF0CA02 		mov	r2, #202
 2568 1072 5A62     		str	r2, [r3, #36]
1643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 2569              		.loc 1 1643 0
 2570 1074 4FF42053 		mov	r3, #10240
 2571 1078 C4F20003 		movt	r3, 16384
 2572 107c 4FF05302 		mov	r2, #83
 2573 1080 5A62     		str	r2, [r3, #36]
1644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 2574              		.loc 1 1645 0
 2575 1082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2576 1084 002B     		cmp	r3, #0
 2577 1086 0CD0     		beq	.L98
1646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Enable the RTC clock output */
1648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2578              		.loc 1 1648 0
 2579 1088 4FF42053 		mov	r3, #10240
 2580 108c C4F20003 		movt	r3, 16384
 2581 1090 4FF42052 		mov	r2, #10240
 2582 1094 C4F20002 		movt	r2, 16384
 2583 1098 9268     		ldr	r2, [r2, #8]
 2584 109a 42F40002 		orr	r2, r2, #8388608
 2585 109e 9A60     		str	r2, [r3, #8]
 2586 10a0 0BE0     		b	.L99
 2587              	.L98:
1649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   { 
1652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the RTC clock output */
1653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2588              		.loc 1 1653 0
 2589 10a2 4FF42053 		mov	r3, #10240
 2590 10a6 C4F20003 		movt	r3, 16384
 2591 10aa 4FF42052 		mov	r2, #10240
 2592 10ae C4F20002 		movt	r2, 16384
 2593 10b2 9268     		ldr	r2, [r2, #8]
 2594 10b4 22F40002 		bic	r2, r2, #8388608
 2595 10b8 9A60     		str	r2, [r3, #8]
 2596              	.L99:
1654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 2597              		.loc 1 1657 0
 2598 10ba 4FF42053 		mov	r3, #10240
 2599 10be C4F20003 		movt	r3, 16384
 2600 10c2 4FF0FF02 		mov	r2, #255
 2601 10c6 5A62     		str	r2, [r3, #36]
1658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2602              		.loc 1 1658 0
 2603 10c8 07F10C07 		add	r7, r7, #12
 2604 10cc BD46     		mov	sp, r7
 2605 10ce 80BC     		pop	{r7}
 2606 10d0 7047     		bx	lr
 2607              		.cfi_endproc
 2608              	.LFE56:
 2610 10d2 00BF     		.align	2
 2611              		.global	RTC_TimeStampCmd
 2612              		.thumb
 2613              		.thumb_func
 2615              	RTC_TimeStampCmd:
 2616              	.LFB57:
1659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                        TimeStamp configuration functions
1671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         activated.
1682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following:
1683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                    edge of the related pin.
1685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                     falling edge of the related pin.
1687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2617              		.loc 1 1692 0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 16
 2620              		@ frame_needed = 1, uses_anonymous_args = 0
 2621              		@ link register save eliminated.
 2622 10d4 80B4     		push	{r7}
 2623              	.LCFI81:
 2624              		.cfi_def_cfa_offset 4
 2625              		.cfi_offset 7, -4
 2626 10d6 85B0     		sub	sp, sp, #20
 2627              	.LCFI82:
 2628              		.cfi_def_cfa_offset 24
 2629 10d8 00AF     		add	r7, sp, #0
 2630              	.LCFI83:
 2631              		.cfi_def_cfa_register 7
 2632 10da 7860     		str	r0, [r7, #4]
 2633 10dc 0B46     		mov	r3, r1
 2634 10de FB70     		strb	r3, [r7, #3]
1693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 2635              		.loc 1 1693 0
 2636 10e0 4FF00003 		mov	r3, #0
 2637 10e4 FB60     		str	r3, [r7, #12]
1694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 2638              		.loc 1 1700 0
 2639 10e6 4FF42053 		mov	r3, #10240
 2640 10ea C4F20003 		movt	r3, 16384
 2641 10ee 9B68     		ldr	r3, [r3, #8]
 2642 10f0 23F40063 		bic	r3, r3, #2048
 2643 10f4 23F00803 		bic	r3, r3, #8
 2644 10f8 FB60     		str	r3, [r7, #12]
1701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the new configuration */
1703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 2645              		.loc 1 1703 0
 2646 10fa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2647 10fc 002B     		cmp	r3, #0
 2648 10fe 06D0     		beq	.L101
1704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 2649              		.loc 1 1705 0
 2650 1100 7A68     		ldr	r2, [r7, #4]
 2651 1102 FB68     		ldr	r3, [r7, #12]
 2652 1104 1343     		orrs	r3, r3, r2
 2653 1106 43F40063 		orr	r3, r3, #2048
 2654 110a FB60     		str	r3, [r7, #12]
 2655 110c 03E0     		b	.L102
 2656              	.L101:
1706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 2657              		.loc 1 1709 0
 2658 110e FA68     		ldr	r2, [r7, #12]
 2659 1110 7B68     		ldr	r3, [r7, #4]
 2660 1112 1343     		orrs	r3, r3, r2
 2661 1114 FB60     		str	r3, [r7, #12]
 2662              	.L102:
1710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
1713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 2663              		.loc 1 1713 0
 2664 1116 4FF42053 		mov	r3, #10240
 2665 111a C4F20003 		movt	r3, 16384
 2666 111e 4FF0CA02 		mov	r2, #202
 2667 1122 5A62     		str	r2, [r3, #36]
1714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 2668              		.loc 1 1714 0
 2669 1124 4FF42053 		mov	r3, #10240
 2670 1128 C4F20003 		movt	r3, 16384
 2671 112c 4FF05302 		mov	r2, #83
 2672 1130 5A62     		str	r2, [r3, #36]
1715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 2673              		.loc 1 1717 0
 2674 1132 4FF42053 		mov	r3, #10240
 2675 1136 C4F20003 		movt	r3, 16384
 2676 113a FA68     		ldr	r2, [r7, #12]
 2677 113c 9A60     		str	r2, [r3, #8]
1718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
1720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 2678              		.loc 1 1720 0
 2679 113e 4FF42053 		mov	r3, #10240
 2680 1142 C4F20003 		movt	r3, 16384
 2681 1146 4FF0FF02 		mov	r2, #255
 2682 114a 5A62     		str	r2, [r3, #36]
1721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2683              		.loc 1 1721 0
 2684 114c 07F11407 		add	r7, r7, #20
 2685 1150 BD46     		mov	sp, r7
 2686 1152 80BC     		pop	{r7}
 2687 1154 7047     		bx	lr
 2688              		.cfi_endproc
 2689              	.LFE57:
 2691 1156 00BF     		.align	2
 2692              		.global	RTC_GetTimeStamp
 2693              		.thumb
 2694              		.thumb_func
 2696              	RTC_GetTimeStamp:
 2697              	.LFB58:
1722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                             contains the TimeStamp time values. 
1731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                             contains the TimeStamp date values.     
1733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
1736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
1737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2698              		.loc 1 1737 0
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 24
 2701              		@ frame_needed = 1, uses_anonymous_args = 0
 2702 1158 80B5     		push	{r7, lr}
 2703              	.LCFI84:
 2704              		.cfi_def_cfa_offset 8
 2705              		.cfi_offset 14, -4
 2706              		.cfi_offset 7, -8
 2707 115a 86B0     		sub	sp, sp, #24
 2708              	.LCFI85:
 2709              		.cfi_def_cfa_offset 32
 2710 115c 00AF     		add	r7, sp, #0
 2711              	.LCFI86:
 2712              		.cfi_def_cfa_register 7
 2713 115e F860     		str	r0, [r7, #12]
 2714 1160 B960     		str	r1, [r7, #8]
 2715 1162 7A60     		str	r2, [r7, #4]
1738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2716              		.loc 1 1738 0
 2717 1164 4FF00003 		mov	r3, #0
 2718 1168 7B61     		str	r3, [r7, #20]
 2719 116a 4FF00003 		mov	r3, #0
 2720 116e 3B61     		str	r3, [r7, #16]
1739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
1744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 2721              		.loc 1 1744 0
 2722 1170 4FF42053 		mov	r3, #10240
 2723 1174 C4F20003 		movt	r3, 16384
 2724 1178 1B6B     		ldr	r3, [r3, #48]
 2725 117a 1A46     		mov	r2, r3
 2726 117c 47F67F73 		movw	r3, #32639
 2727 1180 C0F27F03 		movt	r3, 127
 2728 1184 1340     		ands	r3, r3, r2
 2729 1186 7B61     		str	r3, [r7, #20]
1745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2730              		.loc 1 1745 0
 2731 1188 4FF42053 		mov	r3, #10240
 2732 118c C4F20003 		movt	r3, 16384
 2733 1190 5B6B     		ldr	r3, [r3, #52]
 2734 1192 23F07F43 		bic	r3, r3, #-16777216
 2735 1196 23F0C003 		bic	r3, r3, #192
 2736 119a 3B61     		str	r3, [r7, #16]
1746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
1748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 2737              		.loc 1 1748 0
 2738 119c 7B69     		ldr	r3, [r7, #20]
 2739 119e 03F47C13 		and	r3, r3, #4128768
 2740 11a2 4FEA1343 		lsr	r3, r3, #16
 2741 11a6 DAB2     		uxtb	r2, r3
 2742 11a8 BB68     		ldr	r3, [r7, #8]
 2743 11aa 1A70     		strb	r2, [r3, #0]
1749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2744              		.loc 1 1749 0
 2745 11ac 7B69     		ldr	r3, [r7, #20]
 2746 11ae 03F4FE43 		and	r3, r3, #32512
 2747 11b2 4FEA1323 		lsr	r3, r3, #8
 2748 11b6 DAB2     		uxtb	r2, r3
 2749 11b8 BB68     		ldr	r3, [r7, #8]
 2750 11ba 5A70     		strb	r2, [r3, #1]
1750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2751              		.loc 1 1750 0
 2752 11bc 7B69     		ldr	r3, [r7, #20]
 2753 11be DBB2     		uxtb	r3, r3
 2754 11c0 03F07F03 		and	r3, r3, #127
 2755 11c4 DAB2     		uxtb	r2, r3
 2756 11c6 BB68     		ldr	r3, [r7, #8]
 2757 11c8 9A70     		strb	r2, [r3, #2]
1751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2758              		.loc 1 1751 0
 2759 11ca 7B69     		ldr	r3, [r7, #20]
 2760 11cc 03F48003 		and	r3, r3, #4194304
 2761 11d0 4FEA1343 		lsr	r3, r3, #16
 2762 11d4 DAB2     		uxtb	r2, r3
 2763 11d6 BB68     		ldr	r3, [r7, #8]
 2764 11d8 DA70     		strb	r2, [r3, #3]
1752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
1754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 2765              		.loc 1 1754 0
 2766 11da 7B68     		ldr	r3, [r7, #4]
 2767 11dc 4FF00002 		mov	r2, #0
 2768 11e0 DA70     		strb	r2, [r3, #3]
1755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2769              		.loc 1 1755 0
 2770 11e2 3B69     		ldr	r3, [r7, #16]
 2771 11e4 03F4F853 		and	r3, r3, #7936
 2772 11e8 4FEA1323 		lsr	r3, r3, #8
 2773 11ec DAB2     		uxtb	r2, r3
 2774 11ee 7B68     		ldr	r3, [r7, #4]
 2775 11f0 5A70     		strb	r2, [r3, #1]
1756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2776              		.loc 1 1756 0
 2777 11f2 3B69     		ldr	r3, [r7, #16]
 2778 11f4 DBB2     		uxtb	r3, r3
 2779 11f6 03F03F03 		and	r3, r3, #63
 2780 11fa DAB2     		uxtb	r2, r3
 2781 11fc 7B68     		ldr	r3, [r7, #4]
 2782 11fe 9A70     		strb	r2, [r3, #2]
1757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2783              		.loc 1 1757 0
 2784 1200 3B69     		ldr	r3, [r7, #16]
 2785 1202 03F46043 		and	r3, r3, #57344
 2786 1206 4FEA5333 		lsr	r3, r3, #13
 2787 120a DAB2     		uxtb	r2, r3
 2788 120c 7B68     		ldr	r3, [r7, #4]
 2789 120e 1A70     		strb	r2, [r3, #0]
1758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the input parameters format */
1760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2790              		.loc 1 1760 0
 2791 1210 FB68     		ldr	r3, [r7, #12]
 2792 1212 002B     		cmp	r3, #0
 2793 1214 35D1     		bne	.L103
1761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
1763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 2794              		.loc 1 1763 0
 2795 1216 BB68     		ldr	r3, [r7, #8]
 2796 1218 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2797 121a 1846     		mov	r0, r3
 2798 121c 00F068FA 		bl	RTC_Bcd2ToByte
 2799 1220 0346     		mov	r3, r0
 2800 1222 1A46     		mov	r2, r3
 2801 1224 BB68     		ldr	r3, [r7, #8]
 2802 1226 1A70     		strb	r2, [r3, #0]
1764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2803              		.loc 1 1764 0
 2804 1228 BB68     		ldr	r3, [r7, #8]
 2805 122a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2806 122c 1846     		mov	r0, r3
 2807 122e 00F05FFA 		bl	RTC_Bcd2ToByte
 2808 1232 0346     		mov	r3, r0
 2809 1234 1A46     		mov	r2, r3
 2810 1236 BB68     		ldr	r3, [r7, #8]
 2811 1238 5A70     		strb	r2, [r3, #1]
1765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2812              		.loc 1 1765 0
 2813 123a BB68     		ldr	r3, [r7, #8]
 2814 123c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2815 123e 1846     		mov	r0, r3
 2816 1240 00F056FA 		bl	RTC_Bcd2ToByte
 2817 1244 0346     		mov	r3, r0
 2818 1246 1A46     		mov	r2, r3
 2819 1248 BB68     		ldr	r3, [r7, #8]
 2820 124a 9A70     		strb	r2, [r3, #2]
1766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
1768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 2821              		.loc 1 1768 0
 2822 124c 7B68     		ldr	r3, [r7, #4]
 2823 124e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2824 1250 1846     		mov	r0, r3
 2825 1252 00F04DFA 		bl	RTC_Bcd2ToByte
 2826 1256 0346     		mov	r3, r0
 2827 1258 1A46     		mov	r2, r3
 2828 125a 7B68     		ldr	r3, [r7, #4]
 2829 125c 5A70     		strb	r2, [r3, #1]
1769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2830              		.loc 1 1769 0
 2831 125e 7B68     		ldr	r3, [r7, #4]
 2832 1260 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2833 1262 1846     		mov	r0, r3
 2834 1264 00F044FA 		bl	RTC_Bcd2ToByte
 2835 1268 0346     		mov	r3, r0
 2836 126a 1A46     		mov	r2, r3
 2837 126c 7B68     		ldr	r3, [r7, #4]
 2838 126e 9A70     		strb	r2, [r3, #2]
1770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2839              		.loc 1 1770 0
 2840 1270 7B68     		ldr	r3, [r7, #4]
 2841 1272 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2842 1274 1846     		mov	r0, r3
 2843 1276 00F03BFA 		bl	RTC_Bcd2ToByte
 2844 127a 0346     		mov	r3, r0
 2845 127c 1A46     		mov	r2, r3
 2846 127e 7B68     		ldr	r3, [r7, #4]
 2847 1280 1A70     		strb	r2, [r3, #0]
 2848              	.L103:
1771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2849              		.loc 1 1772 0
 2850 1282 07F11807 		add	r7, r7, #24
 2851 1286 BD46     		mov	sp, r7
 2852 1288 80BD     		pop	{r7, pc}
 2853              		.cfi_endproc
 2854              	.LFE58:
 2856 128a 00BF     		.align	2
 2857              		.global	RTC_TamperTriggerConfig
 2858              		.thumb
 2859              		.thumb_func
 2861              	RTC_TamperTriggerConfig:
 2862              	.LFB59:
1773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
1779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Tampers configuration functions 
1780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                        Tampers configuration functions
1784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
1792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
1794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
1795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *         stimulates tamper event. 
1796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event
1798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper eve
1799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
1802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2863              		.loc 1 1802 0
 2864              		.cfi_startproc
 2865              		@ args = 0, pretend = 0, frame = 8
 2866              		@ frame_needed = 1, uses_anonymous_args = 0
 2867              		@ link register save eliminated.
 2868 128c 80B4     		push	{r7}
 2869              	.LCFI87:
 2870              		.cfi_def_cfa_offset 4
 2871              		.cfi_offset 7, -4
 2872 128e 83B0     		sub	sp, sp, #12
 2873              	.LCFI88:
 2874              		.cfi_def_cfa_offset 16
 2875 1290 00AF     		add	r7, sp, #0
 2876              	.LCFI89:
 2877              		.cfi_def_cfa_register 7
 2878 1292 7860     		str	r0, [r7, #4]
 2879 1294 3960     		str	r1, [r7, #0]
1803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
1805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
1806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  
1807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 2880              		.loc 1 1807 0
 2881 1296 3B68     		ldr	r3, [r7, #0]
 2882 1298 002B     		cmp	r3, #0
 2883 129a 11D1     		bne	.L106
1808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {  
1809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the RTC_TAFCR register */
1810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2884              		.loc 1 1810 0
 2885 129c 4FF42053 		mov	r3, #10240
 2886 12a0 C4F20003 		movt	r3, 16384
 2887 12a4 4FF42052 		mov	r2, #10240
 2888 12a8 C4F20002 		movt	r2, 16384
 2889 12ac 126C     		ldr	r2, [r2, #64]
 2890 12ae 1146     		mov	r1, r2
 2891 12b0 7A68     		ldr	r2, [r7, #4]
 2892 12b2 4FEA4202 		lsl	r2, r2, #1
 2893 12b6 6FEA0202 		mvn	r2, r2
 2894 12ba 0A40     		ands	r2, r2, r1
 2895 12bc 1A64     		str	r2, [r3, #64]
 2896 12be 0EE0     		b	.L105
 2897              	.L106:
1811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   { 
1814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the RTC_TAFCR register */
1815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 2898              		.loc 1 1815 0
 2899 12c0 4FF42053 		mov	r3, #10240
 2900 12c4 C4F20003 		movt	r3, 16384
 2901 12c8 4FF42052 		mov	r2, #10240
 2902 12cc C4F20002 		movt	r2, 16384
 2903 12d0 126C     		ldr	r2, [r2, #64]
 2904 12d2 1146     		mov	r1, r2
 2905 12d4 7A68     		ldr	r2, [r7, #4]
 2906 12d6 4FEA4202 		lsl	r2, r2, #1
 2907 12da 0A43     		orrs	r2, r2, r1
 2908 12dc 1A64     		str	r2, [r3, #64]
 2909              	.L105:
1816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
1817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2910              		.loc 1 1817 0
 2911 12de 07F10C07 		add	r7, r7, #12
 2912 12e2 BD46     		mov	sp, r7
 2913 12e4 80BC     		pop	{r7}
 2914 12e6 7047     		bx	lr
 2915              		.cfi_endproc
 2916              	.LFE59:
 2918              		.align	2
 2919              		.global	RTC_TamperCmd
 2920              		.thumb
 2921              		.thumb_func
 2923              	RTC_TamperCmd:
 2924              	.LFB60:
1818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
1821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
1823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
1824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
1825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
1828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2925              		.loc 1 1828 0
 2926              		.cfi_startproc
 2927              		@ args = 0, pretend = 0, frame = 8
 2928              		@ frame_needed = 1, uses_anonymous_args = 0
 2929              		@ link register save eliminated.
 2930 12e8 80B4     		push	{r7}
 2931              	.LCFI90:
 2932              		.cfi_def_cfa_offset 4
 2933              		.cfi_offset 7, -4
 2934 12ea 83B0     		sub	sp, sp, #12
 2935              	.LCFI91:
 2936              		.cfi_def_cfa_offset 16
 2937 12ec 00AF     		add	r7, sp, #0
 2938              	.LCFI92:
 2939              		.cfi_def_cfa_register 7
 2940 12ee 7860     		str	r0, [r7, #4]
 2941 12f0 0B46     		mov	r3, r1
 2942 12f2 FB70     		strb	r3, [r7, #3]
1829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
1831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 2943              		.loc 1 1833 0
 2944 12f4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2945 12f6 002B     		cmp	r3, #0
 2946 12f8 0DD0     		beq	.L109
1834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Enable the selected Tamper pin */
1836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2947              		.loc 1 1836 0
 2948 12fa 4FF42053 		mov	r3, #10240
 2949 12fe C4F20003 		movt	r3, 16384
 2950 1302 4FF42052 		mov	r2, #10240
 2951 1306 C4F20002 		movt	r2, 16384
 2952 130a 126C     		ldr	r2, [r2, #64]
 2953 130c 1146     		mov	r1, r2
 2954 130e 7A68     		ldr	r2, [r7, #4]
 2955 1310 0A43     		orrs	r2, r2, r1
 2956 1312 1A64     		str	r2, [r3, #64]
 2957 1314 0EE0     		b	.L108
 2958              	.L109:
1837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
1838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
1839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
1840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Disable the selected Tamper pin */
1841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 2959              		.loc 1 1841 0
 2960 1316 4FF42053 		mov	r3, #10240
 2961 131a C4F20003 		movt	r3, 16384
 2962 131e 4FF42052 		mov	r2, #10240
 2963 1322 C4F20002 		movt	r2, 16384
 2964 1326 126C     		ldr	r2, [r2, #64]
 2965 1328 1146     		mov	r1, r2
 2966 132a 7A68     		ldr	r2, [r7, #4]
 2967 132c 6FEA0202 		mvn	r2, r2
 2968 1330 0A40     		ands	r2, r2, r1
 2969 1332 1A64     		str	r2, [r3, #64]
 2970              	.L108:
1842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }  
1843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 2971              		.loc 1 1843 0
 2972 1334 07F10C07 		add	r7, r7, #12
 2973 1338 BD46     		mov	sp, r7
 2974 133a 80BC     		pop	{r7}
 2975 133c 7047     		bx	lr
 2976              		.cfi_endproc
 2977              	.LFE60:
 2979 133e 00BF     		.align	2
 2980              		.global	RTC_WriteBackupRegister
 2981              		.thumb
 2982              		.thumb_func
 2984              	RTC_WriteBackupRegister:
 2985              	.LFB61:
1844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
1850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
1851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                        Backup Data Registers configuration functions 
1855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
1863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
1864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
1865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                          specify the register.
1866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
1867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
1870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 2986              		.loc 1 1870 0
 2987              		.cfi_startproc
 2988              		@ args = 0, pretend = 0, frame = 16
 2989              		@ frame_needed = 1, uses_anonymous_args = 0
 2990              		@ link register save eliminated.
 2991 1340 80B4     		push	{r7}
 2992              	.LCFI93:
 2993              		.cfi_def_cfa_offset 4
 2994              		.cfi_offset 7, -4
 2995 1342 85B0     		sub	sp, sp, #20
 2996              	.LCFI94:
 2997              		.cfi_def_cfa_offset 24
 2998 1344 00AF     		add	r7, sp, #0
 2999              	.LCFI95:
 3000              		.cfi_def_cfa_register 7
 3001 1346 7860     		str	r0, [r7, #4]
 3002 1348 3960     		str	r1, [r7, #0]
1871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t tmp = 0;
 3003              		.loc 1 1871 0
 3004 134a 4FF00003 		mov	r3, #0
 3005 134e FB60     		str	r3, [r7, #12]
1872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
1875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3006              		.loc 1 1876 0
 3007 1350 42F65003 		movw	r3, #10320
 3008 1354 C4F20003 		movt	r3, 16384
 3009 1358 FB60     		str	r3, [r7, #12]
1877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3010              		.loc 1 1877 0
 3011 135a 7B68     		ldr	r3, [r7, #4]
 3012 135c 4FEA8302 		lsl	r2, r3, #2
 3013 1360 FB68     		ldr	r3, [r7, #12]
 3014 1362 D318     		adds	r3, r2, r3
 3015 1364 FB60     		str	r3, [r7, #12]
1878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Write the specified register */
1880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3016              		.loc 1 1880 0
 3017 1366 FB68     		ldr	r3, [r7, #12]
 3018 1368 3A68     		ldr	r2, [r7, #0]
 3019 136a 1A60     		str	r2, [r3, #0]
1881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3020              		.loc 1 1881 0
 3021 136c 07F11407 		add	r7, r7, #20
 3022 1370 BD46     		mov	sp, r7
 3023 1372 80BC     		pop	{r7}
 3024 1374 7047     		bx	lr
 3025              		.cfi_endproc
 3026              	.LFE61:
 3028 1376 00BF     		.align	2
 3029              		.global	RTC_ReadBackupRegister
 3030              		.thumb
 3031              		.thumb_func
 3033              	RTC_ReadBackupRegister:
 3034              	.LFB62:
1882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
1885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
1886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
1887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                          specify the register.                   
1888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
1891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3035              		.loc 1 1891 0
 3036              		.cfi_startproc
 3037              		@ args = 0, pretend = 0, frame = 16
 3038              		@ frame_needed = 1, uses_anonymous_args = 0
 3039              		@ link register save eliminated.
 3040 1378 80B4     		push	{r7}
 3041              	.LCFI96:
 3042              		.cfi_def_cfa_offset 4
 3043              		.cfi_offset 7, -4
 3044 137a 85B0     		sub	sp, sp, #20
 3045              	.LCFI97:
 3046              		.cfi_def_cfa_offset 24
 3047 137c 00AF     		add	r7, sp, #0
 3048              	.LCFI98:
 3049              		.cfi_def_cfa_register 7
 3050 137e 7860     		str	r0, [r7, #4]
1892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   __IO uint32_t tmp = 0;
 3051              		.loc 1 1892 0
 3052 1380 4FF00003 		mov	r3, #0
 3053 1384 FB60     		str	r3, [r7, #12]
1893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
1896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3054              		.loc 1 1897 0
 3055 1386 42F65003 		movw	r3, #10320
 3056 138a C4F20003 		movt	r3, 16384
 3057 138e FB60     		str	r3, [r7, #12]
1898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3058              		.loc 1 1898 0
 3059 1390 7B68     		ldr	r3, [r7, #4]
 3060 1392 4FEA8302 		lsl	r2, r3, #2
 3061 1396 FB68     		ldr	r3, [r7, #12]
 3062 1398 D318     		adds	r3, r2, r3
 3063 139a FB60     		str	r3, [r7, #12]
1899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Read the specified register */
1901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3064              		.loc 1 1901 0
 3065 139c FB68     		ldr	r3, [r7, #12]
 3066 139e 1B68     		ldr	r3, [r3, #0]
1902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3067              		.loc 1 1902 0
 3068 13a0 1846     		mov	r0, r3
 3069 13a2 07F11407 		add	r7, r7, #20
 3070 13a6 BD46     		mov	sp, r7
 3071 13a8 80BC     		pop	{r7}
 3072 13aa 7047     		bx	lr
 3073              		.cfi_endproc
 3074              	.LFE62:
 3076              		.align	2
 3077              		.global	RTC_TamperPinSelection
 3078              		.thumb
 3079              		.thumb_func
 3081              	RTC_TamperPinSelection:
 3082              	.LFB63:
1903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
1909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
1910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *           configuration functions  
1911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
1915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   functions 
1916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
1919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
1920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
1924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
1925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
1927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
1928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
1931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3083              		.loc 1 1931 0
 3084              		.cfi_startproc
 3085              		@ args = 0, pretend = 0, frame = 8
 3086              		@ frame_needed = 1, uses_anonymous_args = 0
 3087              		@ link register save eliminated.
 3088 13ac 80B4     		push	{r7}
 3089              	.LCFI99:
 3090              		.cfi_def_cfa_offset 4
 3091              		.cfi_offset 7, -4
 3092 13ae 83B0     		sub	sp, sp, #12
 3093              	.LCFI100:
 3094              		.cfi_def_cfa_offset 16
 3095 13b0 00AF     		add	r7, sp, #0
 3096              	.LCFI101:
 3097              		.cfi_def_cfa_register 7
 3098 13b2 7860     		str	r0, [r7, #4]
1932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
1934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3099              		.loc 1 1935 0
 3100 13b4 4FF42053 		mov	r3, #10240
 3101 13b8 C4F20003 		movt	r3, 16384
 3102 13bc 4FF42052 		mov	r2, #10240
 3103 13c0 C4F20002 		movt	r2, 16384
 3104 13c4 126C     		ldr	r2, [r2, #64]
 3105 13c6 22F48032 		bic	r2, r2, #65536
 3106 13ca 1A64     		str	r2, [r3, #64]
1936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3107              		.loc 1 1936 0
 3108 13cc 4FF42053 		mov	r3, #10240
 3109 13d0 C4F20003 		movt	r3, 16384
 3110 13d4 4FF42052 		mov	r2, #10240
 3111 13d8 C4F20002 		movt	r2, 16384
 3112 13dc 126C     		ldr	r2, [r2, #64]
 3113 13de 1146     		mov	r1, r2
 3114 13e0 7A68     		ldr	r2, [r7, #4]
 3115 13e2 0A43     		orrs	r2, r2, r1
 3116 13e4 1A64     		str	r2, [r3, #64]
1937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3117              		.loc 1 1937 0
 3118 13e6 07F10C07 		add	r7, r7, #12
 3119 13ea BD46     		mov	sp, r7
 3120 13ec 80BC     		pop	{r7}
 3121 13ee 7047     		bx	lr
 3122              		.cfi_endproc
 3123              	.LFE63:
 3125              		.align	2
 3126              		.global	RTC_TimeStampPinSelection
 3127              		.thumb
 3128              		.thumb_func
 3130              	RTC_TimeStampPinSelection:
 3131              	.LFB64:
1938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
1941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
1942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
1944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
1945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
1948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3132              		.loc 1 1948 0
 3133              		.cfi_startproc
 3134              		@ args = 0, pretend = 0, frame = 8
 3135              		@ frame_needed = 1, uses_anonymous_args = 0
 3136              		@ link register save eliminated.
 3137 13f0 80B4     		push	{r7}
 3138              	.LCFI102:
 3139              		.cfi_def_cfa_offset 4
 3140              		.cfi_offset 7, -4
 3141 13f2 83B0     		sub	sp, sp, #12
 3142              	.LCFI103:
 3143              		.cfi_def_cfa_offset 16
 3144 13f4 00AF     		add	r7, sp, #0
 3145              	.LCFI104:
 3146              		.cfi_def_cfa_register 7
 3147 13f6 7860     		str	r0, [r7, #4]
1949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
1951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3148              		.loc 1 1952 0
 3149 13f8 4FF42053 		mov	r3, #10240
 3150 13fc C4F20003 		movt	r3, 16384
 3151 1400 4FF42052 		mov	r2, #10240
 3152 1404 C4F20002 		movt	r2, 16384
 3153 1408 126C     		ldr	r2, [r2, #64]
 3154 140a 22F40032 		bic	r2, r2, #131072
 3155 140e 1A64     		str	r2, [r3, #64]
1953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3156              		.loc 1 1953 0
 3157 1410 4FF42053 		mov	r3, #10240
 3158 1414 C4F20003 		movt	r3, 16384
 3159 1418 4FF42052 		mov	r2, #10240
 3160 141c C4F20002 		movt	r2, 16384
 3161 1420 126C     		ldr	r2, [r2, #64]
 3162 1422 1146     		mov	r1, r2
 3163 1424 7A68     		ldr	r2, [r7, #4]
 3164 1426 0A43     		orrs	r2, r2, r1
 3165 1428 1A64     		str	r2, [r3, #64]
1954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3166              		.loc 1 1954 0
 3167 142a 07F10C07 		add	r7, r7, #12
 3168 142e BD46     		mov	sp, r7
 3169 1430 80BC     		pop	{r7}
 3170 1432 7047     		bx	lr
 3171              		.cfi_endproc
 3172              	.LFE64:
 3174              		.align	2
 3175              		.global	RTC_OutputTypeConfig
 3176              		.thumb
 3177              		.thumb_func
 3179              	RTC_OutputTypeConfig:
 3180              	.LFB65:
1955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
1958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
1959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
1960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
1961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                    Open Drain mode.
1962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
1963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *                                    Push Pull mode.    
1964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
1965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
1967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3181              		.loc 1 1967 0
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 8
 3184              		@ frame_needed = 1, uses_anonymous_args = 0
 3185              		@ link register save eliminated.
 3186 1434 80B4     		push	{r7}
 3187              	.LCFI105:
 3188              		.cfi_def_cfa_offset 4
 3189              		.cfi_offset 7, -4
 3190 1436 83B0     		sub	sp, sp, #12
 3191              	.LCFI106:
 3192              		.cfi_def_cfa_offset 16
 3193 1438 00AF     		add	r7, sp, #0
 3194              	.LCFI107:
 3195              		.cfi_def_cfa_register 7
 3196 143a 7860     		str	r0, [r7, #4]
1968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
1969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
1970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
1971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3197              		.loc 1 1971 0
 3198 143c 4FF42053 		mov	r3, #10240
 3199 1440 C4F20003 		movt	r3, 16384
 3200 1444 4FF42052 		mov	r2, #10240
 3201 1448 C4F20002 		movt	r2, 16384
 3202 144c 126C     		ldr	r2, [r2, #64]
 3203 144e 22F48022 		bic	r2, r2, #262144
 3204 1452 1A64     		str	r2, [r3, #64]
1972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3205              		.loc 1 1972 0
 3206 1454 4FF42053 		mov	r3, #10240
 3207 1458 C4F20003 		movt	r3, 16384
 3208 145c 4FF42052 		mov	r2, #10240
 3209 1460 C4F20002 		movt	r2, 16384
 3210 1464 126C     		ldr	r2, [r2, #64]
 3211 1466 1146     		mov	r1, r2
 3212 1468 7A68     		ldr	r2, [r7, #4]
 3213 146a 0A43     		orrs	r2, r2, r1
 3214 146c 1A64     		str	r2, [r3, #64]
1973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3215              		.loc 1 1973 0
 3216 146e 07F10C07 		add	r7, r7, #12
 3217 1472 BD46     		mov	sp, r7
 3218 1474 80BC     		pop	{r7}
 3219 1476 7047     		bx	lr
 3220              		.cfi_endproc
 3221              	.LFE65:
 3223              		.align	2
 3224              		.global	RTC_ITConfig
 3225              		.thumb
 3226              		.thumb_func
 3228              	RTC_ITConfig:
 3229              	.LFB66:
1974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
1976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
1977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
1978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /** @defgroup RTC_Group12 Interrupts and flags management functions
1980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
1981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  *
1982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @verbatim   
1983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================
1984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****                        Interrupts and flags management functions
1985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  ===============================================================================  
1986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
1987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  
1988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
1989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
1990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
1991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
1992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      function.
1993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
1994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
1995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
1996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
1997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
1998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
1999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      function.
2001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      function.
2009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      function.
2017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****      RTC_TimeStampCmd() functions.
2019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** @endverbatim
2021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @{
2022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be any combination of the following values:
2028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
2036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3230              		.loc 1 2038 0
 3231              		.cfi_startproc
 3232              		@ args = 0, pretend = 0, frame = 8
 3233              		@ frame_needed = 1, uses_anonymous_args = 0
 3234              		@ link register save eliminated.
 3235 1478 80B4     		push	{r7}
 3236              	.LCFI108:
 3237              		.cfi_def_cfa_offset 4
 3238              		.cfi_offset 7, -4
 3239 147a 83B0     		sub	sp, sp, #12
 3240              	.LCFI109:
 3241              		.cfi_def_cfa_offset 16
 3242 147c 00AF     		add	r7, sp, #0
 3243              	.LCFI110:
 3244              		.cfi_def_cfa_register 7
 3245 147e 7860     		str	r0, [r7, #4]
 3246 1480 0B46     		mov	r3, r1
 3247 1482 FB70     		strb	r3, [r7, #3]
2039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Disable the write protection for RTC registers */
2044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xCA;
 3248              		.loc 1 2044 0
 3249 1484 4FF42053 		mov	r3, #10240
 3250 1488 C4F20003 		movt	r3, 16384
 3251 148c 4FF0CA02 		mov	r2, #202
 3252 1490 5A62     		str	r2, [r3, #36]
2045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0x53;
 3253              		.loc 1 2045 0
 3254 1492 4FF42053 		mov	r3, #10240
 3255 1496 C4F20003 		movt	r3, 16384
 3256 149a 4FF05302 		mov	r2, #83
 3257 149e 5A62     		str	r2, [r3, #36]
2046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if (NewState != DISABLE)
 3258              		.loc 1 2047 0
 3259 14a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3260 14a2 002B     		cmp	r3, #0
 3261 14a4 1ED0     		beq	.L117
2048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 3262              		.loc 1 2050 0
 3263 14a6 4FF42053 		mov	r3, #10240
 3264 14aa C4F20003 		movt	r3, 16384
 3265 14ae 4FF42052 		mov	r2, #10240
 3266 14b2 C4F20002 		movt	r2, 16384
 3267 14b6 9268     		ldr	r2, [r2, #8]
 3268 14b8 1146     		mov	r1, r2
 3269 14ba 7A68     		ldr	r2, [r7, #4]
 3270 14bc 22F00402 		bic	r2, r2, #4
 3271 14c0 0A43     		orrs	r2, r2, r1
 3272 14c2 9A60     		str	r2, [r3, #8]
2051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 3273              		.loc 1 2052 0
 3274 14c4 4FF42053 		mov	r3, #10240
 3275 14c8 C4F20003 		movt	r3, 16384
 3276 14cc 4FF42052 		mov	r2, #10240
 3277 14d0 C4F20002 		movt	r2, 16384
 3278 14d4 126C     		ldr	r2, [r2, #64]
 3279 14d6 1146     		mov	r1, r2
 3280 14d8 7A68     		ldr	r2, [r7, #4]
 3281 14da 02F00402 		and	r2, r2, #4
 3282 14de 0A43     		orrs	r2, r2, r1
 3283 14e0 1A64     		str	r2, [r3, #64]
 3284 14e2 21E0     		b	.L118
 3285              	.L117:
2053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
2055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 3286              		.loc 1 2057 0
 3287 14e4 4FF42053 		mov	r3, #10240
 3288 14e8 C4F20003 		movt	r3, 16384
 3289 14ec 4FF42052 		mov	r2, #10240
 3290 14f0 C4F20002 		movt	r2, 16384
 3291 14f4 9268     		ldr	r2, [r2, #8]
 3292 14f6 1146     		mov	r1, r2
 3293 14f8 7A68     		ldr	r2, [r7, #4]
 3294 14fa 22F00402 		bic	r2, r2, #4
 3295 14fe 6FEA0202 		mvn	r2, r2
 3296 1502 0A40     		ands	r2, r2, r1
 3297 1504 9A60     		str	r2, [r3, #8]
2058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 3298              		.loc 1 2059 0
 3299 1506 4FF42053 		mov	r3, #10240
 3300 150a C4F20003 		movt	r3, 16384
 3301 150e 4FF42052 		mov	r2, #10240
 3302 1512 C4F20002 		movt	r2, 16384
 3303 1516 126C     		ldr	r2, [r2, #64]
 3304 1518 1146     		mov	r1, r2
 3305 151a 7A68     		ldr	r2, [r7, #4]
 3306 151c 02F00402 		and	r2, r2, #4
 3307 1520 6FEA0202 		mvn	r2, r2
 3308 1524 0A40     		ands	r2, r2, r1
 3309 1526 1A64     		str	r2, [r3, #64]
 3310              	.L118:
2060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Enable the write protection for RTC registers */
2062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->WPR = 0xFF; 
 3311              		.loc 1 2062 0
 3312 1528 4FF42053 		mov	r3, #10240
 3313 152c C4F20003 		movt	r3, 16384
 3314 1530 4FF0FF02 		mov	r2, #255
 3315 1534 5A62     		str	r2, [r3, #36]
2063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3316              		.loc 1 2063 0
 3317 1536 07F10C07 		add	r7, r7, #12
 3318 153a BD46     		mov	sp, r7
 3319 153c 80BC     		pop	{r7}
 3320 153e 7047     		bx	lr
 3321              		.cfi_endproc
 3322              	.LFE66:
 3324              		.align	2
 3325              		.global	RTC_GetFlagStatus
 3326              		.thumb
 3327              		.thumb_func
 3329              	RTC_GetFlagStatus:
 3330              	.LFB67:
2064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
2069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3331              		.loc 1 2084 0
 3332              		.cfi_startproc
 3333              		@ args = 0, pretend = 0, frame = 16
 3334              		@ frame_needed = 1, uses_anonymous_args = 0
 3335              		@ link register save eliminated.
 3336 1540 80B4     		push	{r7}
 3337              	.LCFI111:
 3338              		.cfi_def_cfa_offset 4
 3339              		.cfi_offset 7, -4
 3340 1542 85B0     		sub	sp, sp, #20
 3341              	.LCFI112:
 3342              		.cfi_def_cfa_offset 24
 3343 1544 00AF     		add	r7, sp, #0
 3344              	.LCFI113:
 3345              		.cfi_def_cfa_register 7
 3346 1546 7860     		str	r0, [r7, #4]
2085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   FlagStatus bitstatus = RESET;
 3347              		.loc 1 2085 0
 3348 1548 4FF00003 		mov	r3, #0
 3349 154c FB73     		strb	r3, [r7, #15]
2086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 3350              		.loc 1 2086 0
 3351 154e 4FF00003 		mov	r3, #0
 3352 1552 BB60     		str	r3, [r7, #8]
2087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get all the flags */
2092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 3353              		.loc 1 2092 0
 3354 1554 4FF42053 		mov	r3, #10240
 3355 1558 C4F20003 		movt	r3, 16384
 3356 155c DB68     		ldr	r3, [r3, #12]
 3357 155e 1A46     		mov	r2, r3
 3358 1560 43F67773 		movw	r3, #16247
 3359 1564 1340     		ands	r3, r3, r2
 3360 1566 BB60     		str	r3, [r7, #8]
2093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Return the status of the flag */
2095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 3361              		.loc 1 2095 0
 3362 1568 BA68     		ldr	r2, [r7, #8]
 3363 156a 7B68     		ldr	r3, [r7, #4]
 3364 156c 1340     		ands	r3, r3, r2
 3365 156e 002B     		cmp	r3, #0
 3366 1570 03D0     		beq	.L120
2096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bitstatus = SET;
 3367              		.loc 1 2097 0
 3368 1572 4FF00103 		mov	r3, #1
 3369 1576 FB73     		strb	r3, [r7, #15]
 3370 1578 02E0     		b	.L121
 3371              	.L120:
2098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
2100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bitstatus = RESET;
 3372              		.loc 1 2101 0
 3373 157a 4FF00003 		mov	r3, #0
 3374 157e FB73     		strb	r3, [r7, #15]
 3375              	.L121:
2102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return bitstatus;
 3376              		.loc 1 2103 0
 3377 1580 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3378              		.loc 1 2104 0
 3379 1582 1846     		mov	r0, r3
 3380 1584 07F11407 		add	r7, r7, #20
 3381 1588 BD46     		mov	sp, r7
 3382 158a 80BC     		pop	{r7}
 3383 158c 7047     		bx	lr
 3384              		.cfi_endproc
 3385              	.LFE67:
 3387 158e 00BF     		.align	2
 3388              		.global	RTC_ClearFlag
 3389              		.thumb
 3390              		.thumb_func
 3392              	RTC_ClearFlag:
 3393              	.LFB68:
2105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be any combination of the following values:
2110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
2118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3394              		.loc 1 2120 0
 3395              		.cfi_startproc
 3396              		@ args = 0, pretend = 0, frame = 8
 3397              		@ frame_needed = 1, uses_anonymous_args = 0
 3398              		@ link register save eliminated.
 3399 1590 80B4     		push	{r7}
 3400              	.LCFI114:
 3401              		.cfi_def_cfa_offset 4
 3402              		.cfi_offset 7, -4
 3403 1592 83B0     		sub	sp, sp, #12
 3404              	.LCFI115:
 3405              		.cfi_def_cfa_offset 16
 3406 1594 00AF     		add	r7, sp, #0
 3407              	.LCFI116:
 3408              		.cfi_def_cfa_register 7
 3409 1596 7860     		str	r0, [r7, #4]
2121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 3410              		.loc 1 2125 0
 3411 1598 4FF42053 		mov	r3, #10240
 3412 159c C4F20003 		movt	r3, 16384
 3413 15a0 7A68     		ldr	r2, [r7, #4]
 3414 15a2 4FEA0242 		lsl	r2, r2, #16
 3415 15a6 4FEA1242 		lsr	r2, r2, #16
 3416 15aa 42F08002 		orr	r2, r2, #128
 3417 15ae 6FEA0201 		mvn	r1, r2
 3418 15b2 4FF42052 		mov	r2, #10240
 3419 15b6 C4F20002 		movt	r2, 16384
 3420 15ba D268     		ldr	r2, [r2, #12]
 3421 15bc 02F08002 		and	r2, r2, #128
 3422 15c0 0A43     		orrs	r2, r2, r1
 3423 15c2 DA60     		str	r2, [r3, #12]
2126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3424              		.loc 1 2126 0
 3425 15c4 07F10C07 		add	r7, r7, #12
 3426 15c8 BD46     		mov	sp, r7
 3427 15ca 80BC     		pop	{r7}
 3428 15cc 7047     		bx	lr
 3429              		.cfi_endproc
 3430              	.LFE68:
 3432 15ce 00BF     		.align	2
 3433              		.global	RTC_GetITStatus
 3434              		.thumb
 3435              		.thumb_func
 3437              	RTC_GetITStatus:
 3438              	.LFB69:
2127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be one of the following values:
2132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3439              		.loc 1 2140 0
 3440              		.cfi_startproc
 3441              		@ args = 0, pretend = 0, frame = 24
 3442              		@ frame_needed = 1, uses_anonymous_args = 0
 3443              		@ link register save eliminated.
 3444 15d0 80B4     		push	{r7}
 3445              	.LCFI117:
 3446              		.cfi_def_cfa_offset 4
 3447              		.cfi_offset 7, -4
 3448 15d2 87B0     		sub	sp, sp, #28
 3449              	.LCFI118:
 3450              		.cfi_def_cfa_offset 32
 3451 15d4 00AF     		add	r7, sp, #0
 3452              	.LCFI119:
 3453              		.cfi_def_cfa_register 7
 3454 15d6 7860     		str	r0, [r7, #4]
2141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   ITStatus bitstatus = RESET;
 3455              		.loc 1 2141 0
 3456 15d8 4FF00003 		mov	r3, #0
 3457 15dc FB75     		strb	r3, [r7, #23]
2142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 3458              		.loc 1 2142 0
 3459 15de 4FF00003 		mov	r3, #0
 3460 15e2 3B61     		str	r3, [r7, #16]
 3461 15e4 4FF00003 		mov	r3, #0
 3462 15e8 FB60     		str	r3, [r7, #12]
2143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  
2144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 3463              		.loc 1 2148 0
 3464 15ea 4FF42053 		mov	r3, #10240
 3465 15ee C4F20003 		movt	r3, 16384
 3466 15f2 1B6C     		ldr	r3, [r3, #64]
 3467 15f4 03F00403 		and	r3, r3, #4
 3468 15f8 3B61     		str	r3, [r7, #16]
2149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****  
2150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the Interrupt enable Status */
2151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 3469              		.loc 1 2151 0
 3470 15fa 4FF42053 		mov	r3, #10240
 3471 15fe C4F20003 		movt	r3, 16384
 3472 1602 9B68     		ldr	r3, [r3, #8]
 3473 1604 1A46     		mov	r2, r3
 3474 1606 7B68     		ldr	r3, [r7, #4]
 3475 1608 1A40     		ands	r2, r2, r3
 3476 160a 7B68     		ldr	r3, [r7, #4]
 3477 160c 4FEAD331 		lsr	r1, r3, #15
 3478 1610 3B69     		ldr	r3, [r7, #16]
 3479 1612 0B40     		ands	r3, r3, r1
 3480 1614 1343     		orrs	r3, r3, r2
 3481 1616 FB60     		str	r3, [r7, #12]
2152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the Interrupt pending bit */
2154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 3482              		.loc 1 2154 0
 3483 1618 4FF42053 		mov	r3, #10240
 3484 161c C4F20003 		movt	r3, 16384
 3485 1620 DB68     		ldr	r3, [r3, #12]
 3486 1622 1A46     		mov	r2, r3
 3487 1624 7B68     		ldr	r3, [r7, #4]
 3488 1626 4FEA1313 		lsr	r3, r3, #4
 3489 162a 1340     		ands	r3, r3, r2
 3490 162c 3B61     		str	r3, [r7, #16]
2155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the status of the Interrupt */
2157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 3491              		.loc 1 2157 0
 3492 162e FB68     		ldr	r3, [r7, #12]
 3493 1630 002B     		cmp	r3, #0
 3494 1632 0AD0     		beq	.L124
 3495              		.loc 1 2157 0 is_stmt 0 discriminator 1
 3496 1634 3B69     		ldr	r3, [r7, #16]
 3497 1636 4FEA0343 		lsl	r3, r3, #16
 3498 163a 4FEA1343 		lsr	r3, r3, #16
 3499 163e 002B     		cmp	r3, #0
 3500 1640 03D0     		beq	.L124
2158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bitstatus = SET;
 3501              		.loc 1 2159 0 is_stmt 1
 3502 1642 4FF00103 		mov	r3, #1
 3503 1646 FB75     		strb	r3, [r7, #23]
 3504 1648 02E0     		b	.L125
 3505              	.L124:
2160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   else
2162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bitstatus = RESET;
 3506              		.loc 1 2163 0
 3507 164a 4FF00003 		mov	r3, #0
 3508 164e FB75     		strb	r3, [r7, #23]
 3509              	.L125:
2164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return bitstatus;
 3510              		.loc 1 2165 0
 3511 1650 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3512              		.loc 1 2166 0
 3513 1652 1846     		mov	r0, r3
 3514 1654 07F11C07 		add	r7, r7, #28
 3515 1658 BD46     		mov	sp, r7
 3516 165a 80BC     		pop	{r7}
 3517 165c 7047     		bx	lr
 3518              		.cfi_endproc
 3519              	.LFE69:
 3521 165e 00BF     		.align	2
 3522              		.global	RTC_ClearITPendingBit
 3523              		.thumb
 3524              		.thumb_func
 3526              	RTC_ClearITPendingBit:
 3527              	.LFB70:
2167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *          This parameter can be any combination of the following values:
2172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval None
2178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3528              		.loc 1 2180 0
 3529              		.cfi_startproc
 3530              		@ args = 0, pretend = 0, frame = 16
 3531              		@ frame_needed = 1, uses_anonymous_args = 0
 3532              		@ link register save eliminated.
 3533 1660 80B4     		push	{r7}
 3534              	.LCFI120:
 3535              		.cfi_def_cfa_offset 4
 3536              		.cfi_offset 7, -4
 3537 1662 85B0     		sub	sp, sp, #20
 3538              	.LCFI121:
 3539              		.cfi_def_cfa_offset 24
 3540 1664 00AF     		add	r7, sp, #0
 3541              	.LCFI122:
 3542              		.cfi_def_cfa_register 7
 3543 1666 7860     		str	r0, [r7, #4]
2181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint32_t tmpreg = 0;
 3544              		.loc 1 2181 0
 3545 1668 4FF00003 		mov	r3, #0
 3546 166c FB60     		str	r3, [r7, #12]
2182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Check the parameters */
2184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 3547              		.loc 1 2187 0
 3548 166e 7B68     		ldr	r3, [r7, #4]
 3549 1670 4FEA1313 		lsr	r3, r3, #4
 3550 1674 FB60     		str	r3, [r7, #12]
2188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 3551              		.loc 1 2190 0
 3552 1676 4FF42053 		mov	r3, #10240
 3553 167a C4F20003 		movt	r3, 16384
 3554 167e FA68     		ldr	r2, [r7, #12]
 3555 1680 4FEA0242 		lsl	r2, r2, #16
 3556 1684 4FEA1242 		lsr	r2, r2, #16
 3557 1688 42F08002 		orr	r2, r2, #128
 3558 168c 6FEA0201 		mvn	r1, r2
 3559 1690 4FF42052 		mov	r2, #10240
 3560 1694 C4F20002 		movt	r2, 16384
 3561 1698 D268     		ldr	r2, [r2, #12]
 3562 169a 02F08002 		and	r2, r2, #128
 3563 169e 0A43     		orrs	r2, r2, r1
 3564 16a0 DA60     		str	r2, [r3, #12]
2191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3565              		.loc 1 2191 0
 3566 16a2 07F11407 		add	r7, r7, #20
 3567 16a6 BD46     		mov	sp, r7
 3568 16a8 80BC     		pop	{r7}
 3569 16aa 7047     		bx	lr
 3570              		.cfi_endproc
 3571              	.LFE70:
 3573              		.align	2
 3574              		.thumb
 3575              		.thumb_func
 3577              	RTC_ByteToBcd2:
 3578              	.LFB71:
2192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @}
2195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  Value: Byte to be converted.
2200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval Converted byte
2201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3579              		.loc 1 2203 0
 3580              		.cfi_startproc
 3581              		@ args = 0, pretend = 0, frame = 16
 3582              		@ frame_needed = 1, uses_anonymous_args = 0
 3583              		@ link register save eliminated.
 3584 16ac 80B4     		push	{r7}
 3585              	.LCFI123:
 3586              		.cfi_def_cfa_offset 4
 3587              		.cfi_offset 7, -4
 3588 16ae 85B0     		sub	sp, sp, #20
 3589              	.LCFI124:
 3590              		.cfi_def_cfa_offset 24
 3591 16b0 00AF     		add	r7, sp, #0
 3592              	.LCFI125:
 3593              		.cfi_def_cfa_register 7
 3594 16b2 0346     		mov	r3, r0
 3595 16b4 FB71     		strb	r3, [r7, #7]
2204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint8_t bcdhigh = 0;
 3596              		.loc 1 2204 0
 3597 16b6 4FF00003 		mov	r3, #0
 3598 16ba FB73     		strb	r3, [r7, #15]
2205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   while (Value >= 10)
 3599              		.loc 1 2206 0
 3600 16bc 07E0     		b	.L128
 3601              	.L129:
2207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   {
2208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     bcdhigh++;
 3602              		.loc 1 2208 0
 3603 16be FB7B     		ldrb	r3, [r7, #15]
 3604 16c0 03F10103 		add	r3, r3, #1
 3605 16c4 FB73     		strb	r3, [r7, #15]
2209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****     Value -= 10;
 3606              		.loc 1 2209 0
 3607 16c6 FB79     		ldrb	r3, [r7, #7]
 3608 16c8 A3F10A03 		sub	r3, r3, #10
 3609 16cc FB71     		strb	r3, [r7, #7]
 3610              	.L128:
2206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   while (Value >= 10)
 3611              		.loc 1 2206 0 discriminator 1
 3612 16ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3613 16d0 092B     		cmp	r3, #9
 3614 16d2 F4D8     		bhi	.L129
2210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   }
2211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   
2212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 3615              		.loc 1 2212 0
 3616 16d4 FB7B     		ldrb	r3, [r7, #15]
 3617 16d6 4FEA0313 		lsl	r3, r3, #4
 3618 16da DAB2     		uxtb	r2, r3
 3619 16dc FB79     		ldrb	r3, [r7, #7]
 3620 16de 1343     		orrs	r3, r3, r2
 3621 16e0 DBB2     		uxtb	r3, r3
2213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3622              		.loc 1 2213 0
 3623 16e2 1846     		mov	r0, r3
 3624 16e4 07F11407 		add	r7, r7, #20
 3625 16e8 BD46     		mov	sp, r7
 3626 16ea 80BC     		pop	{r7}
 3627 16ec 7047     		bx	lr
 3628              		.cfi_endproc
 3629              	.LFE71:
 3631 16ee 00BF     		.align	2
 3632              		.thumb
 3633              		.thumb_func
 3635              	RTC_Bcd2ToByte:
 3636              	.LFB72:
2214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** 
2215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** /**
2216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @param  Value: BCD value to be converted.
2218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   * @retval Converted word
2219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   */
2220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** {
 3637              		.loc 1 2221 0
 3638              		.cfi_startproc
 3639              		@ args = 0, pretend = 0, frame = 16
 3640              		@ frame_needed = 1, uses_anonymous_args = 0
 3641              		@ link register save eliminated.
 3642 16f0 80B4     		push	{r7}
 3643              	.LCFI126:
 3644              		.cfi_def_cfa_offset 4
 3645              		.cfi_offset 7, -4
 3646 16f2 85B0     		sub	sp, sp, #20
 3647              	.LCFI127:
 3648              		.cfi_def_cfa_offset 24
 3649 16f4 00AF     		add	r7, sp, #0
 3650              	.LCFI128:
 3651              		.cfi_def_cfa_register 7
 3652 16f6 0346     		mov	r3, r0
 3653 16f8 FB71     		strb	r3, [r7, #7]
2222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   uint8_t tmp = 0;
 3654              		.loc 1 2222 0
 3655 16fa 4FF00003 		mov	r3, #0
 3656 16fe FB73     		strb	r3, [r7, #15]
2223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3657              		.loc 1 2223 0
 3658 1700 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3659 1702 4FEA1313 		lsr	r3, r3, #4
 3660 1706 DBB2     		uxtb	r3, r3
 3661 1708 1A46     		mov	r2, r3
 3662 170a 4FEA8202 		lsl	r2, r2, #2
 3663 170e D318     		adds	r3, r2, r3
 3664 1710 4FEA4303 		lsl	r3, r3, #1
 3665 1714 FB73     		strb	r3, [r7, #15]
2224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 3666              		.loc 1 2224 0
 3667 1716 FB79     		ldrb	r3, [r7, #7]
 3668 1718 03F00F03 		and	r3, r3, #15
 3669 171c DAB2     		uxtb	r2, r3
 3670 171e FB7B     		ldrb	r3, [r7, #15]
 3671 1720 D318     		adds	r3, r2, r3
 3672 1722 DBB2     		uxtb	r3, r3
2225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rtc.c **** }
 3673              		.loc 1 2225 0
 3674 1724 1846     		mov	r0, r3
 3675 1726 07F11407 		add	r7, r7, #20
 3676 172a BD46     		mov	sp, r7
 3677 172c 80BC     		pop	{r7}
 3678 172e 7047     		bx	lr
 3679              		.cfi_endproc
 3680              	.LFE72:
 3682              	.Letext0:
 3683              		.file 2 "c:/cad/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 3684              		.file 3 "C:\\workspace\\te_stm32f207_simple\\system/stm32f2xx.h"
 3685              		.file 4 "C:\\workspace\\te_stm32f207_simple\\STM32F2xx_StdPeriph_Driver\\inc/stm32f2xx_rtc.h"
 3686              		.file 5 "C:\\workspace\\te_stm32f207_simple\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_rtc.c
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:17     .text:00000000 $t
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:22     .text:00000000 RTC_DeInit
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:397    .text:000002a4 RTC_EnterInitMode
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:525    .text:0000035c RTC_WaitForSynchro
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:196    .text:0000016c RTC_Init
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:491    .text:00000338 RTC_ExitInitMode
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:300    .text:00000230 RTC_StructInit
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:343    .text:0000025c RTC_WriteProtectionCmd
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:625    .text:0000040c RTC_RefClockCmd
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:716    .text:000004a8 RTC_SetTime
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3635   .text:000016f0 RTC_Bcd2ToByte
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3577   .text:000016ac RTC_ByteToBcd2
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:904    .text:000005f0 RTC_TimeStructInit
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:951    .text:00000624 RTC_GetTime
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:1054   .text:000006d0 RTC_SetDate
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:1242   .text:00000810 RTC_DateStructInit
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:1289   .text:00000844 RTC_GetDate
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:1395   .text:000008f4 RTC_SetAlarm
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:1618   .text:00000a70 RTC_AlarmStructInit
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:1677   .text:00000abc RTC_GetAlarm
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:1815   .text:00000ba8 RTC_AlarmCmd
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:1946   .text:00000c98 RTC_WakeUpClockConfig
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2010   .text:00000d08 RTC_SetWakeUpCounter
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2061   .text:00000d50 RTC_GetWakeUpCounter
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2094   .text:00000d70 RTC_WakeUpCmd
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2213   .text:00000e48 RTC_DayLightSavingConfig
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2280   .text:00000ebc RTC_GetStoreOperation
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2312   .text:00000ed8 RTC_OutputConfig
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2379   .text:00000f4c RTC_CoarseCalibConfig
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2454   .text:00000fc0 RTC_CoarseCalibCmd
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2545   .text:0000105c RTC_CalibOutputCmd
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2615   .text:000010d4 RTC_TimeStampCmd
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2696   .text:00001158 RTC_GetTimeStamp
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2861   .text:0000128c RTC_TamperTriggerConfig
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2923   .text:000012e8 RTC_TamperCmd
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:2984   .text:00001340 RTC_WriteBackupRegister
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3033   .text:00001378 RTC_ReadBackupRegister
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3081   .text:000013ac RTC_TamperPinSelection
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3130   .text:000013f0 RTC_TimeStampPinSelection
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3179   .text:00001434 RTC_OutputTypeConfig
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3228   .text:00001478 RTC_ITConfig
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3329   .text:00001540 RTC_GetFlagStatus
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3392   .text:00001590 RTC_ClearFlag
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3437   .text:000015d0 RTC_GetITStatus
C:\Users\IARISC~1\AppData\Local\Temp\ccP7Fp75.s:3526   .text:00001660 RTC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
