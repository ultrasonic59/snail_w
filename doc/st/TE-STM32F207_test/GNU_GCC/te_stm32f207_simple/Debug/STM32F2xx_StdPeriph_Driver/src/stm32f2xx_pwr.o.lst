   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	2
  18              		.thumb
  19              		.thumb_func
  21              	__WFI:
  22              	.LFB5:
  23              		.file 1 "C:\\workspace\\te_stm32f207_simple\\system/core_cm3.h"
   1:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**************************************************************************//**
   2:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @file     core_cm3.h
   3:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @version  V1.30
   5:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @date     30. October 2009
   6:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
   7:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @note
   8:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  10:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @par
  11:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  15:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @par
  16:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  22:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  ******************************************************************************/
  23:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  24:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #ifndef __CM3_CORE_H__
  25:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CM3_CORE_H__
  26:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  27:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  29:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 10: \n
  31:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Error 10: Expecting ';'
  33:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  34:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 530: \n
  35:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     return(__regBasePri); \n
  36:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * . 
  38:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 550: \n
  39:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  42:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 754: \n
  43:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  46:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 750: \n
  47:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  50:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 528: \n
  51:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  54:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *   - Error 751: \n
  55:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     } InterruptType_Type; \n
  56:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * .
  58:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
  60:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
  61:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  62:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -save */
  63:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e10  */
  64:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e530 */
  65:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e550 */
  66:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e754 */
  67:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e750 */
  68:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e528 */
  69:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*lint -e751 */
  70:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  71:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  72:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     - CMSIS version number
  75:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     - Cortex-M core registers and bitfields
  76:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     - Cortex-M core peripheral base address
  77:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
  78:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
  79:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  80:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #ifdef __cplusplus
  81:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  extern "C" {
  82:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif 
  83:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  84:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  88:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  90:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  92:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined (__ICCARM__)
  93:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
  95:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  96:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
  97:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 100:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 101:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 102:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 103:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 104:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 105:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * IO definitions
 106:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 107:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * define access restrictions to peripheral registers
 108:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 109:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 110:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #ifdef __cplusplus
 111:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #else
 113:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 115:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 118:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 119:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 120:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*******************************************************************************
 121:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *                 Register Abstraction
 122:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  ******************************************************************************/
 123:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  @{
 125:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** */
 126:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 127:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 128:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 131:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 132:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 133:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 134:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }  NVIC_Type;                                               
 148:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 150:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 151:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 154:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 155:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 156:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 157:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } SCB_Type;                                                
 177:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 178:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB CPUID Register Definitions */
 179:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 182:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 185:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 188:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 191:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 195:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 198:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 201:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 204:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 207:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 210:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 213:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 216:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 219:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 222:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 226:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 229:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 233:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 236:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 239:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 242:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 245:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 248:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 251:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB System Control Register Definitions */
 252:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 255:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 258:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 261:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 265:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 268:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 271:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 274:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 277:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 280:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 284:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 287:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 290:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 293:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 296:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 299:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 302:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 305:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 308:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 311:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****                                      
 314:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 317:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 320:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 323:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 327:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 330:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 333:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 337:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 340:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 343:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 347:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 350:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 353:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 356:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 360:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 361:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for SysTick
 363:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 364:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 365:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 366:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 367:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } SysTick_Type;
 372:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 373:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 377:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 380:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 383:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 386:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SysTick Reload Register Definitions */
 387:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 390:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SysTick Current Register Definitions */
 391:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 394:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 398:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 401:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 405:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 406:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 409:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 410:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 411:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 412:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __O  union  
 413:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   {
 414:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } ITM_Type;                                                
 445:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 446:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 450:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 454:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 457:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 460:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 463:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 466:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 469:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 472:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 475:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 479:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 483:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 487:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 491:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 494:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 498:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 499:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Interrupt Type
 501:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 502:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 503:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 504:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 505:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED0;
 506:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #else
 510:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****        uint32_t RESERVED1;
 511:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 512:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } InterruptType_Type;
 513:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 514:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 518:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 522:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 525:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 529:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 530:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 534:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 535:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 536:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 537:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } MPU_Type;                                                
 549:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 550:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Type Register */
 551:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 554:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 557:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 560:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Control Register */
 561:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 564:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 567:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 570:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Region Number Register */
 571:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 574:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Region Base Address Register */
 575:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 578:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 581:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 584:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 588:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 591:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 594:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 597:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 600:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 603:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 606:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 609:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 612:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 614:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 615:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 616:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   memory mapped structure for Core Debug Register
 618:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   @{
 619:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 620:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** typedef struct
 621:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 622:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** } CoreDebug_Type;
 627:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 628:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Debug Halting Control and Status Register */
 629:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 632:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 635:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 638:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 641:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 644:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 647:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 650:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 653:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 656:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 659:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 662:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 665:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Debug Core Register Selector Register */
 666:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 669:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 672:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 676:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 679:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 682:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 685:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 688:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 691:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 694:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 697:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 700:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 703:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 706:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 709:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 713:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 714:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 722:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 729:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 733:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 734:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 736:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 737:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /*******************************************************************************
 738:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *                Hardware Abstraction Layer
 739:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  ******************************************************************************/
 740:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 741:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined ( __CC_ARM   )
 742:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 745:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif defined ( __ICCARM__ )
 746:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 749:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif defined   (  __GNUC__  )
 750:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 753:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif defined   (  __TASKING__  )
 754:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 757:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif
 758:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 759:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 760:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 762:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* ARM armcc specific functions */
 764:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 765:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 768:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __NOP                             __nop
 769:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __WFI                             __wfi
 770:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __WFE                             __wfe
 771:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __SEV                             __sev
 772:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __ISB()                           __isb(0)
 773:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __DSB()                           __dsb(0)
 774:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __DMB()                           __dmb(0)
 775:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __REV                             __rev
 776:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __RBIT                            __rbit
 777:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 784:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 785:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 790:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 791:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 792:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 794:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return ProcessStackPointer
 795:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 796:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the actual process stack pointer
 797:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 798:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_PSP(void);
 799:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 800:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 801:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 803:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 805:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 808:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 810:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 811:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 813:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Main Stack Pointer
 814:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 815:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Cortex processor register
 817:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 818:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_MSP(void);
 819:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 820:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 821:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 823:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 825:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 828:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 830:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 831:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 833:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param   value  value to reverse
 834:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return         reversed value
 835:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 836:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in unsigned short value
 837:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 838:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 840:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 841:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 843:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param   value  value to reverse
 844:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return         reversed value
 845:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 846:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 848:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 850:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 851:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 853:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 854:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 856:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 858:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __CLREX(void);
 859:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 860:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 861:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Base Priority value
 862:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 863:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return BasePriority
 864:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 865:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the base priority register
 866:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 867:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 869:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 870:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Base Priority value
 871:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 872:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  basePri  BasePriority
 873:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 874:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the base priority register
 875:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 876:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 878:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 879:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Priority Mask value
 880:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 881:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return PriMask
 882:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 883:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 885:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 887:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 888:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Priority Mask value
 889:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 890:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param   priMask  PriMask
 891:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 892:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 894:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 896:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 897:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Fault Mask value
 898:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 899:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return FaultMask
 900:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 901:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the fault mask register
 902:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 903:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 905:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 906:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Fault Mask value
 907:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 908:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  faultMask faultMask value
 909:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 910:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the fault mask register
 911:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 912:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 914:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 915:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Control Register value
 916:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * 
 917:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Control value
 918:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 919:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the control register
 920:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 921:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 923:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 924:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Control Register value
 925:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 926:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  control  Control value
 927:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 928:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the control register
 929:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 930:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 932:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 934:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 935:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 937:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 939:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __CLREX                           __clrex
 940:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 941:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 942:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Base Priority value
 943:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 944:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return BasePriority
 945:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 946:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the base priority register
 947:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 948:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 950:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return(__regBasePri);
 952:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 953:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 954:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 955:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Base Priority value
 956:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 957:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  basePri  BasePriority
 958:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 959:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the base priority register
 960:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 961:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 963:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 966:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 967:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 968:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Priority Mask value
 969:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 970:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return PriMask
 971:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 972:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 974:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 976:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return(__regPriMask);
 978:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 979:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 980:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 981:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Priority Mask value
 982:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 983:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  priMask  PriMask
 984:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 985:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
 987:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
 989:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __regPriMask = (priMask);
 991:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
 992:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
 993:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
 994:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Fault Mask value
 995:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 996:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return FaultMask
 997:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
 998:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the fault mask register
 999:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1000:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1002:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return(__regFaultMask);
1004:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1005:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1006:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1007:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Fault Mask value
1008:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1009:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  faultMask  faultMask value
1010:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1011:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the fault mask register
1012:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1013:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1015:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1018:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1019:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1020:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Control Register value
1021:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * 
1022:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Control value
1023:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1024:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the content of the control register
1025:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1026:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1028:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   return(__regControl);
1030:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1031:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1032:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1033:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Control Register value
1034:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1035:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  control  Control value
1036:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1037:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Set the control register
1038:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1039:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** {
1041:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****   __regControl = control;
1043:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** }
1044:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1045:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1047:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1048:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1049:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* IAR iccarm specific functions */
1051:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1052:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1055:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1058:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1064:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1076:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1077:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1078:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1080:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return ProcessStackPointer
1081:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1082:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the actual process stack pointer
1083:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1084:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_PSP(void);
1085:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1086:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1087:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1089:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1091:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1094:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1096:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1097:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1099:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return Main Stack Pointer
1100:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1101:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Cortex processor register
1103:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1104:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __get_MSP(void);
1105:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1106:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1107:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1109:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1111:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1114:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1116:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1117:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1119:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to reverse
1120:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        reversed value
1121:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1122:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse byte order in unsigned short value
1123:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1124:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1126:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1127:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  Reverse bit order of value
1128:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1129:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to reverse
1130:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        reversed value
1131:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1132:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Reverse bit order of value
1133:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1134:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1136:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1137:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1139:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1140:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1141:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1142:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1144:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1146:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1147:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1149:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1150:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1151:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1152:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1154:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1156:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1157:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1159:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1160:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        value of (*address)
1161:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1162:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1164:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1166:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1167:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1169:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1170:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1171:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1172:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1173:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1175:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1177:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1178:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1180:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1181:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1182:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1183:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1184:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1186:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1188:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /**
1189:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1191:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  value  value to store
1192:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @param  *addr  address pointer
1193:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * @return        successful / failed
1194:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  *
1195:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:C:\workspace\te_stm32f207_simple\system\core_cm3.h ****  */
1197:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1199:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1200:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1201:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** /* GNU gcc specific functions */
1203:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1204:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1207:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** 
1210:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
  24              		.loc 1 1211 0
  25              		.cfi_startproc
  26              		@ args = 0, pretend = 0, frame = 0
  27              		@ frame_needed = 1, uses_anonymous_args = 0
  28              		@ link register save eliminated.
  29 0000 80B4     		push	{r7}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
  36              		.loc 1 1211 0
  37              	@ 1211 "C:\workspace\te_stm32f207_simple\system/core_cm3.h" 1
  38 0004 30BF     		wfi
  39              	@ 0 "" 2
  40              		.thumb
  41 0006 BD46     		mov	sp, r7
  42 0008 80BC     		pop	{r7}
  43 000a 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE5:
  47              		.align	2
  48              		.thumb
  49              		.thumb_func
  51              	__WFE:
  52              	.LFB6:
1212:C:\workspace\te_stm32f207_simple\system\core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
  53              		.loc 1 1212 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 1, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58 000c 80B4     		push	{r7}
  59              	.LCFI2:
  60              		.cfi_def_cfa_offset 4
  61              		.cfi_offset 7, -4
  62 000e 00AF     		add	r7, sp, #0
  63              	.LCFI3:
  64              		.cfi_def_cfa_register 7
  65              		.loc 1 1212 0
  66              	@ 1212 "C:\workspace\te_stm32f207_simple\system/core_cm3.h" 1
  67 0010 20BF     		wfe
  68              	@ 0 "" 2
  69              		.thumb
  70 0012 BD46     		mov	sp, r7
  71 0014 80BC     		pop	{r7}
  72 0016 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE6:
  76              		.align	2
  77              		.global	PWR_DeInit
  78              		.thumb
  79              		.thumb_func
  81              	PWR_DeInit:
  82              	.LFB29:
  83              		.file 2 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c"
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @file    stm32f2xx_pwr.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *           - Backup Domain Access
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *           - PVD configuration
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *           - WakeUp pin configuration
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *           - Backup Regulator configuration
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *           - FLASH Power Down configuration
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *           - Low Power modes configuration
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *           - Flags management
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *               
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   ******************************************************************************
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @attention
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   ******************************************************************************
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */ 
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #include "stm32f2xx_pwr.h"
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #include "stm32f2xx_rcc.h"
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR 
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief PWR driver modules
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */ 
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* --- CR Register ---*/
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Alias word address of DBP bit */
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define DBP_BitNumber            0x08
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Alias word address of PVDE bit */
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define PVDE_BitNumber           0x04
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Alias word address of FPDS bit */
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define FPDS_BitNumber           0x09
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* --- CSR Register ---*/
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Alias word address of EWUP bit */
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define EWUP_BitNumber           0x08
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Alias word address of BRE bit */
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define BRE_BitNumber            0x09
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* CR register bit mask */
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR_Private_Functions
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *  @brief   Backup Domain Access function  
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @verbatim   
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****                             Backup Domain Access function 
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================  
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   write accesses. 
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @endverbatim
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  None
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_DeInit(void)
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
  84              		.loc 2 116 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88 0018 80B5     		push	{r7, lr}
  89              	.LCFI4:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 14, -4
  92              		.cfi_offset 7, -8
  93 001a 00AF     		add	r7, sp, #0
  94              	.LCFI5:
  95              		.cfi_def_cfa_register 7
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  96              		.loc 2 117 0
  97 001c 4FF08050 		mov	r0, #268435456
  98 0020 4FF00101 		mov	r1, #1
  99 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 100              		.loc 2 118 0
 101 0028 4FF08050 		mov	r0, #268435456
 102 002c 4FF00001 		mov	r1, #0
 103 0030 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 104              		.loc 2 119 0
 105 0034 80BD     		pop	{r7, pc}
 106              		.cfi_endproc
 107              	.LFE29:
 109 0036 00BF     		.align	2
 110              		.global	PWR_BackupAccessCmd
 111              		.thumb
 112              		.thumb_func
 114              	PWR_BackupAccessCmd:
 115              	.LFB30:
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *         backup data registers and backup SRAM).
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 116              		.loc 2 131 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 8
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0038 80B4     		push	{r7}
 122              	.LCFI6:
 123              		.cfi_def_cfa_offset 4
 124              		.cfi_offset 7, -4
 125 003a 83B0     		sub	sp, sp, #12
 126              	.LCFI7:
 127              		.cfi_def_cfa_offset 16
 128 003c 00AF     		add	r7, sp, #0
 129              	.LCFI8:
 130              		.cfi_def_cfa_register 7
 131 003e 0346     		mov	r3, r0
 132 0040 FB71     		strb	r3, [r7, #7]
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 133              		.loc 2 135 0
 134 0042 4FF02003 		mov	r3, #32
 135 0046 C4F20E23 		movt	r3, 16910
 136 004a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 137 004c 1A60     		str	r2, [r3, #0]
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 138              		.loc 2 136 0
 139 004e 07F10C07 		add	r7, r7, #12
 140 0052 BD46     		mov	sp, r7
 141 0054 80BC     		pop	{r7}
 142 0056 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE30:
 146              		.align	2
 147              		.global	PWR_PVDLevelConfig
 148              		.thumb
 149              		.thumb_func
 151              	PWR_PVDLevelConfig:
 152              	.LFB31:
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @}
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *  @brief   PVD configuration functions 
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @verbatim   
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****                            PVD configuration functions
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================  
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - The PVD is stopped in Standby mode.
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @endverbatim
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          This parameter can be one of the following values:
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_PVDLevel_0: PVD detection level set to 2.0V
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_PVDLevel_1: PVD detection level set to 2.2V
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_PVDLevel_5: PVD detection level set to 2.8V
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_PVDLevel_6: PVD detection level set to 2.9V
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @note   Refer to the electrical characteristics of you device datasheet for more details. 
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 153              		.loc 2 177 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 16
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158 0058 80B4     		push	{r7}
 159              	.LCFI9:
 160              		.cfi_def_cfa_offset 4
 161              		.cfi_offset 7, -4
 162 005a 85B0     		sub	sp, sp, #20
 163              	.LCFI10:
 164              		.cfi_def_cfa_offset 24
 165 005c 00AF     		add	r7, sp, #0
 166              	.LCFI11:
 167              		.cfi_def_cfa_register 7
 168 005e 7860     		str	r0, [r7, #4]
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   uint32_t tmpreg = 0;
 169              		.loc 2 178 0
 170 0060 4FF00003 		mov	r3, #0
 171 0064 FB60     		str	r3, [r7, #12]
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   tmpreg = PWR->CR;
 172              		.loc 2 183 0
 173 0066 4FF4E043 		mov	r3, #28672
 174 006a C4F20003 		movt	r3, 16384
 175 006e 1B68     		ldr	r3, [r3, #0]
 176 0070 FB60     		str	r3, [r7, #12]
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Clear PLS[7:5] bits */
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 177              		.loc 2 186 0
 178 0072 FB68     		ldr	r3, [r7, #12]
 179 0074 23F0E003 		bic	r3, r3, #224
 180 0078 FB60     		str	r3, [r7, #12]
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 181              		.loc 2 189 0
 182 007a FA68     		ldr	r2, [r7, #12]
 183 007c 7B68     		ldr	r3, [r7, #4]
 184 007e 1343     		orrs	r3, r3, r2
 185 0080 FB60     		str	r3, [r7, #12]
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Store the new value */
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   PWR->CR = tmpreg;
 186              		.loc 2 192 0
 187 0082 4FF4E043 		mov	r3, #28672
 188 0086 C4F20003 		movt	r3, 16384
 189 008a FA68     		ldr	r2, [r7, #12]
 190 008c 1A60     		str	r2, [r3, #0]
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 191              		.loc 2 193 0
 192 008e 07F11407 		add	r7, r7, #20
 193 0092 BD46     		mov	sp, r7
 194 0094 80BC     		pop	{r7}
 195 0096 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE31:
 199              		.align	2
 200              		.global	PWR_PVDCmd
 201              		.thumb
 202              		.thumb_func
 204              	PWR_PVDCmd:
 205              	.LFB32:
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  NewState: new state of the PVD.
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 206              		.loc 2 202 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211 0098 80B4     		push	{r7}
 212              	.LCFI12:
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 7, -4
 215 009a 83B0     		sub	sp, sp, #12
 216              	.LCFI13:
 217              		.cfi_def_cfa_offset 16
 218 009c 00AF     		add	r7, sp, #0
 219              	.LCFI14:
 220              		.cfi_def_cfa_register 7
 221 009e 0346     		mov	r3, r0
 222 00a0 FB71     		strb	r3, [r7, #7]
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 223              		.loc 2 206 0
 224 00a2 4FF01003 		mov	r3, #16
 225 00a6 C4F20E23 		movt	r3, 16910
 226 00aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 227 00ac 1A60     		str	r2, [r3, #0]
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 228              		.loc 2 207 0
 229 00ae 07F10C07 		add	r7, r7, #12
 230 00b2 BD46     		mov	sp, r7
 231 00b4 80BC     		pop	{r7}
 232 00b6 7047     		bx	lr
 233              		.cfi_endproc
 234              	.LFE32:
 236              		.align	2
 237              		.global	PWR_WakeUpPinCmd
 238              		.thumb
 239              		.thumb_func
 241              	PWR_WakeUpPinCmd:
 242              	.LFB33:
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @}
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @verbatim   
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****                     WakeUp pin configuration functions
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================  
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @endverbatim
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 243              		.loc 2 236 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 8
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247              		@ link register save eliminated.
 248 00b8 80B4     		push	{r7}
 249              	.LCFI15:
 250              		.cfi_def_cfa_offset 4
 251              		.cfi_offset 7, -4
 252 00ba 83B0     		sub	sp, sp, #12
 253              	.LCFI16:
 254              		.cfi_def_cfa_offset 16
 255 00bc 00AF     		add	r7, sp, #0
 256              	.LCFI17:
 257              		.cfi_def_cfa_register 7
 258 00be 0346     		mov	r3, r0
 259 00c0 FB71     		strb	r3, [r7, #7]
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */  
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 260              		.loc 2 240 0
 261 00c2 4FF0A003 		mov	r3, #160
 262 00c6 C4F20E23 		movt	r3, 16910
 263 00ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 264 00cc 1A60     		str	r2, [r3, #0]
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 265              		.loc 2 241 0
 266 00ce 07F10C07 		add	r7, r7, #12
 267 00d2 BD46     		mov	sp, r7
 268 00d4 80BC     		pop	{r7}
 269 00d6 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE33:
 273              		.align	2
 274              		.global	PWR_BackupRegulatorCmd
 275              		.thumb
 276              		.thumb_func
 278              	PWR_BackupRegulatorCmd:
 279              	.LFB34:
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @}
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR_Group4 Backup Regulator configuration functions
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *  @brief   Backup Regulator configuration functions 
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @verbatim   
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****                     Backup Regulator configuration functions
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================  
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    ready or not. 
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    save battery life.
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @endverbatim
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 280              		.loc 2 284 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 8
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 285 00d8 80B4     		push	{r7}
 286              	.LCFI18:
 287              		.cfi_def_cfa_offset 4
 288              		.cfi_offset 7, -4
 289 00da 83B0     		sub	sp, sp, #12
 290              	.LCFI19:
 291              		.cfi_def_cfa_offset 16
 292 00dc 00AF     		add	r7, sp, #0
 293              	.LCFI20:
 294              		.cfi_def_cfa_register 7
 295 00de 0346     		mov	r3, r0
 296 00e0 FB71     		strb	r3, [r7, #7]
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 297              		.loc 2 288 0
 298 00e2 4FF0A403 		mov	r3, #164
 299 00e6 C4F20E23 		movt	r3, 16910
 300 00ea FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 301 00ec 1A60     		str	r2, [r3, #0]
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 302              		.loc 2 289 0
 303 00ee 07F10C07 		add	r7, r7, #12
 304 00f2 BD46     		mov	sp, r7
 305 00f4 80BC     		pop	{r7}
 306 00f6 7047     		bx	lr
 307              		.cfi_endproc
 308              	.LFE34:
 310              		.align	2
 311              		.global	PWR_FlashPowerDownCmd
 312              		.thumb
 313              		.thumb_func
 315              	PWR_FlashPowerDownCmd:
 316              	.LFB35:
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @}
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *  @brief   FLASH Power Down configuration functions 
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @verbatim   
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****                      FLASH Power Down configuration functions
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================  
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @endverbatim
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 317              		.loc 2 319 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 8
 320              		@ frame_needed = 1, uses_anonymous_args = 0
 321              		@ link register save eliminated.
 322 00f8 80B4     		push	{r7}
 323              	.LCFI21:
 324              		.cfi_def_cfa_offset 4
 325              		.cfi_offset 7, -4
 326 00fa 83B0     		sub	sp, sp, #12
 327              	.LCFI22:
 328              		.cfi_def_cfa_offset 16
 329 00fc 00AF     		add	r7, sp, #0
 330              	.LCFI23:
 331              		.cfi_def_cfa_register 7
 332 00fe 0346     		mov	r3, r0
 333 0100 FB71     		strb	r3, [r7, #7]
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 334              		.loc 2 323 0
 335 0102 4FF02403 		mov	r3, #36
 336 0106 C4F20E23 		movt	r3, 16910
 337 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 338 010c 1A60     		str	r2, [r3, #0]
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 339              		.loc 2 324 0
 340 010e 07F10C07 		add	r7, r7, #12
 341 0112 BD46     		mov	sp, r7
 342 0114 80BC     		pop	{r7}
 343 0116 7047     		bx	lr
 344              		.cfi_endproc
 345              	.LFE35:
 347              		.align	2
 348              		.global	PWR_EnterSTOPMode
 349              		.thumb
 350              		.thumb_func
 352              	PWR_EnterSTOPMode:
 353              	.LFB36:
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @}
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @verbatim   
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****                     Low Power modes configuration functions
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================  
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   The devices feature 3 low-power modes:
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    - Sleep mode: Cortex-M3 core stopped, peripherals kept running.
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    Sleep mode
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    ===========
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     - Entry:
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     - Exit:
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    Stop mode
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    ==========
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    are preserved.
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     - Entry:
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     - Exit:
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    Standby mode
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    ============
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    on the Cortex-M3 deepsleep mode, with the voltage regulator disabled. 
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    circuitry.
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    The voltage regulator is OFF.
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     - Entry:
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     - Exit:
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    =====================================
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      ----------------------------------------
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          and RTC_AlarmCmd() functions.
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        is necessary to:
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          function
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          functions.
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      -------------------------------------------
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          and RTC_AlarmCmd() functions.
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        is necessary to:
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          function
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          functions.
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @endverbatim
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Enters STOP mode.
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *   
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *         is higher although the startup time is reduced.           
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *     
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          This parameter can be one of the following values:
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          This parameter can be one of the following values:
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 354              		.loc 2 459 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 16
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 0118 80B5     		push	{r7, lr}
 359              	.LCFI24:
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 14, -4
 362              		.cfi_offset 7, -8
 363 011a 84B0     		sub	sp, sp, #16
 364              	.LCFI25:
 365              		.cfi_def_cfa_offset 24
 366 011c 00AF     		add	r7, sp, #0
 367              	.LCFI26:
 368              		.cfi_def_cfa_register 7
 369 011e 7860     		str	r0, [r7, #4]
 370 0120 0B46     		mov	r3, r1
 371 0122 FB70     		strb	r3, [r7, #3]
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   uint32_t tmpreg = 0;
 372              		.loc 2 460 0
 373 0124 4FF00003 		mov	r3, #0
 374 0128 FB60     		str	r3, [r7, #12]
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   tmpreg = PWR->CR;
 375              		.loc 2 467 0
 376 012a 4FF4E043 		mov	r3, #28672
 377 012e C4F20003 		movt	r3, 16384
 378 0132 1B68     		ldr	r3, [r3, #0]
 379 0134 FB60     		str	r3, [r7, #12]
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 380              		.loc 2 469 0
 381 0136 FB68     		ldr	r3, [r7, #12]
 382 0138 23F00303 		bic	r3, r3, #3
 383 013c FB60     		str	r3, [r7, #12]
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   tmpreg |= PWR_Regulator;
 384              		.loc 2 472 0
 385 013e FA68     		ldr	r2, [r7, #12]
 386 0140 7B68     		ldr	r3, [r7, #4]
 387 0142 1343     		orrs	r3, r3, r2
 388 0144 FB60     		str	r3, [r7, #12]
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Store the new value */
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   PWR->CR = tmpreg;
 389              		.loc 2 475 0
 390 0146 4FF4E043 		mov	r3, #28672
 391 014a C4F20003 		movt	r3, 16384
 392 014e FA68     		ldr	r2, [r7, #12]
 393 0150 1A60     		str	r2, [r3, #0]
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 394              		.loc 2 478 0
 395 0152 4FF46D43 		mov	r3, #60672
 396 0156 CEF20003 		movt	r3, 57344
 397 015a 4FF46D42 		mov	r2, #60672
 398 015e CEF20002 		movt	r2, 57344
 399 0162 1269     		ldr	r2, [r2, #16]
 400 0164 42F00402 		orr	r2, r2, #4
 401 0168 1A61     		str	r2, [r3, #16]
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 402              		.loc 2 481 0
 403 016a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 404 016c 012B     		cmp	r3, #1
 405 016e 02D1     		bne	.L11
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   {   
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     /* Request Wait For Interrupt */
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     __WFI();
 406              		.loc 2 484 0
 407 0170 FFF746FF 		bl	__WFI
 408 0174 01E0     		b	.L12
 409              	.L11:
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   }
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   else
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   {
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     /* Request Wait For Event */
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     __WFE();
 410              		.loc 2 489 0
 411 0176 FFF749FF 		bl	__WFE
 412              	.L12:
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   }
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 413              		.loc 2 492 0
 414 017a 4FF46D43 		mov	r3, #60672
 415 017e CEF20003 		movt	r3, 57344
 416 0182 4FF46D42 		mov	r2, #60672
 417 0186 CEF20002 		movt	r2, 57344
 418 018a 1269     		ldr	r2, [r2, #16]
 419 018c 22F00402 		bic	r2, r2, #4
 420 0190 1A61     		str	r2, [r3, #16]
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 421              		.loc 2 493 0
 422 0192 07F11007 		add	r7, r7, #16
 423 0196 BD46     		mov	sp, r7
 424 0198 80BD     		pop	{r7, pc}
 425              		.cfi_endproc
 426              	.LFE36:
 428 019a 00BF     		.align	2
 429              		.global	PWR_EnterSTANDBYMode
 430              		.thumb
 431              		.thumb_func
 433              	PWR_EnterSTANDBYMode:
 434              	.LFB37:
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Enters STANDBY mode.
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          - Reset pad (still available) 
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  None
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 435              		.loc 2 507 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439 019c 80B5     		push	{r7, lr}
 440              	.LCFI27:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 14, -4
 443              		.cfi_offset 7, -8
 444 019e 00AF     		add	r7, sp, #0
 445              	.LCFI28:
 446              		.cfi_def_cfa_register 7
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Clear Wakeup flag */
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 447              		.loc 2 509 0
 448 01a0 4FF4E043 		mov	r3, #28672
 449 01a4 C4F20003 		movt	r3, 16384
 450 01a8 4FF4E042 		mov	r2, #28672
 451 01ac C4F20002 		movt	r2, 16384
 452 01b0 1268     		ldr	r2, [r2, #0]
 453 01b2 42F00402 		orr	r2, r2, #4
 454 01b6 1A60     		str	r2, [r3, #0]
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Select STANDBY mode */
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 455              		.loc 2 512 0
 456 01b8 4FF4E043 		mov	r3, #28672
 457 01bc C4F20003 		movt	r3, 16384
 458 01c0 4FF4E042 		mov	r2, #28672
 459 01c4 C4F20002 		movt	r2, 16384
 460 01c8 1268     		ldr	r2, [r2, #0]
 461 01ca 42F00202 		orr	r2, r2, #2
 462 01ce 1A60     		str	r2, [r3, #0]
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 463              		.loc 2 515 0
 464 01d0 4FF46D43 		mov	r3, #60672
 465 01d4 CEF20003 		movt	r3, 57344
 466 01d8 4FF46D42 		mov	r2, #60672
 467 01dc CEF20002 		movt	r2, 57344
 468 01e0 1269     		ldr	r2, [r2, #16]
 469 01e2 42F00402 		orr	r2, r2, #4
 470 01e6 1A61     		str	r2, [r3, #16]
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #if defined ( __CC_ARM   )
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   __force_stores();
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** #endif
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Request Wait For Interrupt */
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   __WFI();
 471              		.loc 2 522 0
 472 01e8 FFF70AFF 		bl	__WFI
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 473              		.loc 2 523 0
 474 01ec 80BD     		pop	{r7, pc}
 475              		.cfi_endproc
 476              	.LFE37:
 478 01ee 00BF     		.align	2
 479              		.global	PWR_GetFlagStatus
 480              		.thumb
 481              		.thumb_func
 483              	PWR_GetFlagStatus:
 484              	.LFB38:
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @}
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *  @brief   Flags management functions 
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  *
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @verbatim   
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****                            Flags management functions
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****  ===============================================================================  
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** @endverbatim
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @{
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          This parameter can be one of the following values:
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  resumed from StandBy mode.    
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  until the PVDE bit is set.
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *                  or power reset.  
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 485              		.loc 2 562 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 16
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490 01f0 80B4     		push	{r7}
 491              	.LCFI29:
 492              		.cfi_def_cfa_offset 4
 493              		.cfi_offset 7, -4
 494 01f2 85B0     		sub	sp, sp, #20
 495              	.LCFI30:
 496              		.cfi_def_cfa_offset 24
 497 01f4 00AF     		add	r7, sp, #0
 498              	.LCFI31:
 499              		.cfi_def_cfa_register 7
 500 01f6 7860     		str	r0, [r7, #4]
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   FlagStatus bitstatus = RESET;
 501              		.loc 2 563 0
 502 01f8 4FF00003 		mov	r3, #0
 503 01fc FB73     		strb	r3, [r7, #15]
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 504              		.loc 2 568 0
 505 01fe 4FF4E043 		mov	r3, #28672
 506 0202 C4F20003 		movt	r3, 16384
 507 0206 5B68     		ldr	r3, [r3, #4]
 508 0208 1A46     		mov	r2, r3
 509 020a 7B68     		ldr	r3, [r7, #4]
 510 020c 1340     		ands	r3, r3, r2
 511 020e 002B     		cmp	r3, #0
 512 0210 03D0     		beq	.L15
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   {
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     bitstatus = SET;
 513              		.loc 2 570 0
 514 0212 4FF00103 		mov	r3, #1
 515 0216 FB73     		strb	r3, [r7, #15]
 516 0218 02E0     		b	.L16
 517              	.L15:
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   }
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   else
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   {
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****     bitstatus = RESET;
 518              		.loc 2 574 0
 519 021a 4FF00003 		mov	r3, #0
 520 021e FB73     		strb	r3, [r7, #15]
 521              	.L16:
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   }
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Return the flag status */
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   return bitstatus;
 522              		.loc 2 577 0
 523 0220 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 524              		.loc 2 578 0
 525 0222 1846     		mov	r0, r3
 526 0224 07F11407 		add	r7, r7, #20
 527 0228 BD46     		mov	sp, r7
 528 022a 80BC     		pop	{r7}
 529 022c 7047     		bx	lr
 530              		.cfi_endproc
 531              	.LFE38:
 533 022e 00BF     		.align	2
 534              		.global	PWR_ClearFlag
 535              		.thumb
 536              		.thumb_func
 538              	PWR_ClearFlag:
 539              	.LFB39:
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** 
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** /**
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *          This parameter can be one of the following values:
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   * @retval None
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   */
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** {
 540              		.loc 2 589 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 8
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 545 0230 80B4     		push	{r7}
 546              	.LCFI32:
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 7, -4
 549 0232 83B0     		sub	sp, sp, #12
 550              	.LCFI33:
 551              		.cfi_def_cfa_offset 16
 552 0234 00AF     		add	r7, sp, #0
 553              	.LCFI34:
 554              		.cfi_def_cfa_register 7
 555 0236 7860     		str	r0, [r7, #4]
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   /* Check the parameters */
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****          
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 556              		.loc 2 593 0
 557 0238 4FF4E043 		mov	r3, #28672
 558 023c C4F20003 		movt	r3, 16384
 559 0240 4FF4E042 		mov	r2, #28672
 560 0244 C4F20002 		movt	r2, 16384
 561 0248 1268     		ldr	r2, [r2, #0]
 562 024a 1146     		mov	r1, r2
 563 024c 7A68     		ldr	r2, [r7, #4]
 564 024e 4FEA8202 		lsl	r2, r2, #2
 565 0252 0A43     		orrs	r2, r2, r1
 566 0254 1A60     		str	r2, [r3, #0]
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_pwr.c **** }
 567              		.loc 2 594 0
 568 0256 07F10C07 		add	r7, r7, #12
 569 025a BD46     		mov	sp, r7
 570 025c 80BC     		pop	{r7}
 571 025e 7047     		bx	lr
 572              		.cfi_endproc
 573              	.LFE39:
 575              	.Letext0:
 576              		.file 3 "c:/cad/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 577              		.file 4 "C:\\workspace\\te_stm32f207_simple\\system/stm32f2xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_pwr.c
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:17     .text:00000000 $t
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:21     .text:00000000 __WFI
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:51     .text:0000000c __WFE
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:81     .text:00000018 PWR_DeInit
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:114    .text:00000038 PWR_BackupAccessCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:151    .text:00000058 PWR_PVDLevelConfig
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:204    .text:00000098 PWR_PVDCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:241    .text:000000b8 PWR_WakeUpPinCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:278    .text:000000d8 PWR_BackupRegulatorCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:315    .text:000000f8 PWR_FlashPowerDownCmd
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:352    .text:00000118 PWR_EnterSTOPMode
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:433    .text:0000019c PWR_EnterSTANDBYMode
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:483    .text:000001f0 PWR_GetFlagStatus
C:\Users\IARISC~1\AppData\Local\Temp\cc1Ne4mc.s:538    .text:00000230 PWR_ClearFlag
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
