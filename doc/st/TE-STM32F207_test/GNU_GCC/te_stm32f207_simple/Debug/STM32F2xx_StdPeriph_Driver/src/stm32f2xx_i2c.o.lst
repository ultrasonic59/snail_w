   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f2xx_i2c.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	2
  18              		.global	I2C_DeInit
  19              		.thumb
  20              		.thumb_func
  22              	I2C_DeInit:
  23              	.LFB29:
  24              		.file 1 "../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c"
   1:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
   2:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ******************************************************************************
   3:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @file    stm32f2xx_i2c.c
   4:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @author  MCD Application Team
   5:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @version V1.0.0
   6:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @date    18-April-2011
   7:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - Initialization and Configuration
  10:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - Data transfers
  11:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - PEC management
  12:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - DMA transfers management
  13:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           
  15:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *  @verbatim
  16:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *    
  17:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          ===================================================================
  18:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                                 How to use this driver
  19:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          ===================================================================
  20:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  23:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  26:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *        
  37:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  40:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                function.
  48:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              - For SMBus Mode: 
  52:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  55:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  58:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          7. When using the DMA mode 
  59:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * 
  65:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * 
  67:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *             transfers. 
  69:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  70:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *  @endverbatim
  71:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *  
  72:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ******************************************************************************
  73:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @attention
  74:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  75:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *
  82:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ******************************************************************************  
  84:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */ 
  85:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
  86:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #include "stm32f2xx_i2c.h"
  88:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #include "stm32f2xx_rcc.h"
  89:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
  90:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
  91:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
  92:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
  93:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
  94:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C 
  95:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief I2C driver modules
  96:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
  97:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */ 
  98:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
  99:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                    Initialization and Configuration functions
 121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
  25              		.loc 1 133 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 14, -4
  33              		.cfi_offset 7, -8
  34 0002 82B0     		sub	sp, sp, #8
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
 134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2Cx == I2C1)
  41              		.loc 1 137 0
  42 0008 7A68     		ldr	r2, [r7, #4]
  43 000a 4FF4A843 		mov	r3, #21504
  44 000e C4F20003 		movt	r3, 16384
  45 0012 9A42     		cmp	r2, r3
  46 0014 0CD1     		bne	.L2
 138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable I2C1 reset state */
 140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  47              		.loc 1 140 0
  48 0016 4FF40010 		mov	r0, #2097152
  49 001a 4FF00101 		mov	r1, #1
  50 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Release I2C1 from reset state */
 142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  51              		.loc 1 142 0
  52 0022 4FF40010 		mov	r0, #2097152
  53 0026 4FF00001 		mov	r1, #0
  54 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  55 002e 26E0     		b	.L1
  56              	.L2:
 143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else if (I2Cx == I2C2)
  57              		.loc 1 144 0
  58 0030 7A68     		ldr	r2, [r7, #4]
  59 0032 4FF4B043 		mov	r3, #22528
  60 0036 C4F20003 		movt	r3, 16384
  61 003a 9A42     		cmp	r2, r3
  62 003c 0CD1     		bne	.L4
 145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable I2C2 reset state */
 147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  63              		.loc 1 147 0
  64 003e 4FF48000 		mov	r0, #4194304
  65 0042 4FF00101 		mov	r1, #1
  66 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Release I2C2 from reset state */
 149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  67              		.loc 1 149 0
  68 004a 4FF48000 		mov	r0, #4194304
  69 004e 4FF00001 		mov	r1, #0
  70 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  71 0056 12E0     		b	.L1
  72              	.L4:
 150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else 
 152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     if (I2Cx == I2C3)
  73              		.loc 1 153 0
  74 0058 7A68     		ldr	r2, [r7, #4]
  75 005a 4FF4B843 		mov	r3, #23552
  76 005e C4F20003 		movt	r3, 16384
  77 0062 9A42     		cmp	r2, r3
  78 0064 0BD1     		bne	.L1
 154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Enable I2C3 reset state */
 156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  79              		.loc 1 156 0
  80 0066 4FF40000 		mov	r0, #8388608
  81 006a 4FF00101 		mov	r1, #1
  82 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Release I2C3 from reset state */
 158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  83              		.loc 1 158 0
  84 0072 4FF40000 		mov	r0, #8388608
  85 0076 4FF00001 		mov	r1, #0
  86 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  87              	.L1:
 159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
  88              		.loc 1 161 0
  89 007e 07F10807 		add	r7, r7, #8
  90 0082 BD46     		mov	sp, r7
  91 0084 80BD     		pop	{r7, pc}
  92              		.cfi_endproc
  93              	.LFE29:
  95 0086 00BF     		.align	2
  96              		.global	I2C_Init
  97              		.thumb
  98              		.thumb_func
 100              	I2C_Init:
 101              	.LFB30:
 162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           
 167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           
 170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 102              		.loc 1 176 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 40
 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106 0088 80B5     		push	{r7, lr}
 107              	.LCFI3:
 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 14, -4
 110              		.cfi_offset 7, -8
 111 008a 8AB0     		sub	sp, sp, #40
 112              	.LCFI4:
 113              		.cfi_def_cfa_offset 48
 114 008c 00AF     		add	r7, sp, #0
 115              	.LCFI5:
 116              		.cfi_def_cfa_register 7
 117 008e 7860     		str	r0, [r7, #4]
 118 0090 3960     		str	r1, [r7, #0]
 177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 119              		.loc 1 177 0
 120 0092 4FF00003 		mov	r3, #0
 121 0096 FB84     		strh	r3, [r7, #38]	@ movhi
 122 0098 4FF00003 		mov	r3, #0
 123 009c 7B84     		strh	r3, [r7, #34]	@ movhi
 178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint16_t result = 0x04;
 124              		.loc 1 178 0
 125 009e 4FF00403 		mov	r3, #4
 126 00a2 BB84     		strh	r3, [r7, #36]	@ movhi
 179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t pclk1 = 8000000;
 127              		.loc 1 179 0
 128 00a4 4FF49053 		mov	r3, #4608
 129 00a8 C0F27A03 		movt	r3, 122
 130 00ac FB61     		str	r3, [r7, #28]
 180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg = I2Cx->CR2;
 131              		.loc 1 192 0
 132 00ae 7B68     		ldr	r3, [r7, #4]
 133 00b0 9B88     		ldrh	r3, [r3, #4]	@ movhi
 134 00b2 FB84     		strh	r3, [r7, #38]	@ movhi
 193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 135              		.loc 1 194 0
 136 00b4 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 137 00b6 23F03F03 		bic	r3, r3, #63
 138 00ba FB84     		strh	r3, [r7, #38]	@ movhi
 195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get pclk1 frequency value */
 196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 139              		.loc 1 196 0
 140 00bc 07F10C03 		add	r3, r7, #12
 141 00c0 1846     		mov	r0, r3
 142 00c2 FFF7FEFF 		bl	RCC_GetClocksFreq
 197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 143              		.loc 1 197 0
 144 00c6 7B69     		ldr	r3, [r7, #20]
 145 00c8 FB61     		str	r3, [r7, #28]
 198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 146              		.loc 1 199 0
 147 00ca FA69     		ldr	r2, [r7, #28]
 148 00cc 4DF68363 		movw	r3, #56963
 149 00d0 C4F21B33 		movt	r3, 17179
 150 00d4 A3FB0213 		umull	r1, r3, r3, r2
 151 00d8 4FEA9343 		lsr	r3, r3, #18
 152 00dc 7B84     		strh	r3, [r7, #34]	@ movhi
 200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg |= freqrange;
 153              		.loc 1 200 0
 154 00de FA8C     		ldrh	r2, [r7, #38]	@ movhi
 155 00e0 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 156 00e2 1343     		orrs	r3, r3, r2
 157 00e4 FB84     		strh	r3, [r7, #38]	@ movhi
 201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 158              		.loc 1 202 0
 159 00e6 7B68     		ldr	r3, [r7, #4]
 160 00e8 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 161 00ea 9A80     		strh	r2, [r3, #4]	@ movhi
 203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 162              		.loc 1 206 0
 163 00ec 7B68     		ldr	r3, [r7, #4]
 164 00ee 1B88     		ldrh	r3, [r3, #0]	@ movhi
 165 00f0 9BB2     		uxth	r3, r3
 166 00f2 23F00103 		bic	r3, r3, #1
 167 00f6 9AB2     		uxth	r2, r3
 168 00f8 7B68     		ldr	r3, [r7, #4]
 169 00fa 1A80     		strh	r2, [r3, #0]	@ movhi
 207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Reset tmpreg value */
 208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg = 0;
 170              		.loc 1 209 0
 171 00fc 4FF00003 		mov	r3, #0
 172 0100 FB84     		strh	r3, [r7, #38]	@ movhi
 210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Configure speed in standard mode */
 212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 173              		.loc 1 212 0
 174 0102 3B68     		ldr	r3, [r7, #0]
 175 0104 1A68     		ldr	r2, [r3, #0]
 176 0106 48F2A063 		movw	r3, #34464
 177 010a C0F20103 		movt	r3, 1
 178 010e 9A42     		cmp	r2, r3
 179 0110 18D8     		bhi	.L6
 213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Standard mode speed calculate */
 215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 180              		.loc 1 215 0
 181 0112 3B68     		ldr	r3, [r7, #0]
 182 0114 1B68     		ldr	r3, [r3, #0]
 183 0116 4FEA4303 		lsl	r3, r3, #1
 184 011a FA69     		ldr	r2, [r7, #28]
 185 011c B2FBF3F3 		udiv	r3, r2, r3
 186 0120 BB84     		strh	r3, [r7, #36]	@ movhi
 216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     if (result < 0x04)
 187              		.loc 1 217 0
 188 0122 BB8C     		ldrh	r3, [r7, #36]
 189 0124 032B     		cmp	r3, #3
 190 0126 02D8     		bhi	.L7
 218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Set minimum allowed value */
 220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result = 0x04;  
 191              		.loc 1 220 0
 192 0128 4FF00403 		mov	r3, #4
 193 012c BB84     		strh	r3, [r7, #36]	@ movhi
 194              	.L7:
 221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set speed value for standard mode */
 223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     tmpreg |= result;	  
 195              		.loc 1 223 0
 196 012e FA8C     		ldrh	r2, [r7, #38]	@ movhi
 197 0130 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 198 0132 1343     		orrs	r3, r3, r2
 199 0134 FB84     		strh	r3, [r7, #38]	@ movhi
 224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 200              		.loc 1 225 0
 201 0136 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 202 0138 03F10103 		add	r3, r3, #1
 203 013c 9AB2     		uxth	r2, r3
 204 013e 7B68     		ldr	r3, [r7, #4]
 205 0140 1A84     		strh	r2, [r3, #32]	@ movhi
 206 0142 4BE0     		b	.L8
 207              	.L6:
 226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Configure speed in fast mode */
 228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 208              		.loc 1 232 0
 209 0144 3B68     		ldr	r3, [r7, #0]
 210 0146 DA88     		ldrh	r2, [r3, #6]
 211 0148 4BF6FF73 		movw	r3, #49151
 212 014c 9A42     		cmp	r2, r3
 213 014e 0AD1     		bne	.L9
 233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 214              		.loc 1 235 0
 215 0150 3B68     		ldr	r3, [r7, #0]
 216 0152 1A68     		ldr	r2, [r3, #0]
 217 0154 1346     		mov	r3, r2
 218 0156 4FEA4303 		lsl	r3, r3, #1
 219 015a 9B18     		adds	r3, r3, r2
 220 015c FA69     		ldr	r2, [r7, #28]
 221 015e B2FBF3F3 		udiv	r3, r2, r3
 222 0162 BB84     		strh	r3, [r7, #36]	@ movhi
 223 0164 10E0     		b	.L10
 224              	.L9:
 236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 225              		.loc 1 240 0
 226 0166 3B68     		ldr	r3, [r7, #0]
 227 0168 1A68     		ldr	r2, [r3, #0]
 228 016a 1346     		mov	r3, r2
 229 016c 4FEA8303 		lsl	r3, r3, #2
 230 0170 9B18     		adds	r3, r3, r2
 231 0172 4FEA8302 		lsl	r2, r3, #2
 232 0176 9B18     		adds	r3, r3, r2
 233 0178 FA69     		ldr	r2, [r7, #28]
 234 017a B2FBF3F3 		udiv	r3, r2, r3
 235 017e BB84     		strh	r3, [r7, #36]	@ movhi
 241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Set DUTY bit */
 242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 236              		.loc 1 242 0
 237 0180 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 238 0182 43F48043 		orr	r3, r3, #16384
 239 0186 BB84     		strh	r3, [r7, #36]	@ movhi
 240              	.L10:
 243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 241              		.loc 1 246 0
 242 0188 BB8C     		ldrh	r3, [r7, #36]
 243 018a 4FEA0353 		lsl	r3, r3, #20
 244 018e 4FEA1353 		lsr	r3, r3, #20
 245 0192 002B     		cmp	r3, #0
 246 0194 03D1     		bne	.L11
 247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     {
 248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       /* Set minimum allowed value */
 249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       result |= (uint16_t)0x0001;  
 247              		.loc 1 249 0
 248 0196 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 249 0198 43F00103 		orr	r3, r3, #1
 250 019c BB84     		strh	r3, [r7, #36]	@ movhi
 251              	.L11:
 250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     }
 251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 252              		.loc 1 252 0
 253 019e BA8C     		ldrh	r2, [r7, #36]	@ movhi
 254 01a0 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 255 01a2 1343     		orrs	r3, r3, r2
 256 01a4 9BB2     		uxth	r3, r3
 257 01a6 6FEA4343 		mvn	r3, r3, lsl #17
 258 01aa 6FEA5343 		mvn	r3, r3, lsr #17
 259 01ae FB84     		strh	r3, [r7, #38]	@ movhi
 253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 260              		.loc 1 254 0
 261 01b0 7B8C     		ldrh	r3, [r7, #34]
 262 01b2 4FF49672 		mov	r2, #300
 263 01b6 02FB03F2 		mul	r2, r2, r3
 264 01ba 44F6D353 		movw	r3, #19923
 265 01be C1F26203 		movt	r3, 4194
 266 01c2 83FB0213 		smull	r1, r3, r3, r2
 267 01c6 4FEAA311 		asr	r1, r3, #6
 268 01ca 4FEAE273 		asr	r3, r2, #31
 269 01ce CB1A     		subs	r3, r1, r3
 270 01d0 9BB2     		uxth	r3, r3
 271 01d2 03F10103 		add	r3, r3, #1
 272 01d6 9AB2     		uxth	r2, r3
 273 01d8 7B68     		ldr	r3, [r7, #4]
 274 01da 1A84     		strh	r2, [r3, #32]	@ movhi
 275              	.L8:
 255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Write to I2Cx CCR */
 258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CCR = tmpreg;
 276              		.loc 1 258 0
 277 01dc 7B68     		ldr	r3, [r7, #4]
 278 01de FA8C     		ldrh	r2, [r7, #38]	@ movhi
 279 01e0 9A83     		strh	r2, [r3, #28]	@ movhi
 259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 280              		.loc 1 260 0
 281 01e2 7B68     		ldr	r3, [r7, #4]
 282 01e4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 283 01e6 9BB2     		uxth	r3, r3
 284 01e8 43F00103 		orr	r3, r3, #1
 285 01ec 9AB2     		uxth	r2, r3
 286 01ee 7B68     		ldr	r3, [r7, #4]
 287 01f0 1A80     		strh	r2, [r3, #0]	@ movhi
 261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg = I2Cx->CR1;
 288              		.loc 1 264 0
 289 01f2 7B68     		ldr	r3, [r7, #4]
 290 01f4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 291 01f6 FB84     		strh	r3, [r7, #38]	@ movhi
 265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 292              		.loc 1 266 0
 293 01f8 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 294 01fa 23F48063 		bic	r3, r3, #1024
 295 01fe 23F00A03 		bic	r3, r3, #10
 296 0202 FB84     		strh	r3, [r7, #38]	@ movhi
 267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 297              		.loc 1 270 0
 298 0204 3B68     		ldr	r3, [r7, #0]
 299 0206 9A88     		ldrh	r2, [r3, #4]
 300 0208 3B68     		ldr	r3, [r7, #0]
 301 020a 5B89     		ldrh	r3, [r3, #10]
 302 020c 1343     		orrs	r3, r3, r2
 303 020e 9AB2     		uxth	r2, r3
 304 0210 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 305 0212 1343     		orrs	r3, r3, r2
 306 0214 FB84     		strh	r3, [r7, #38]	@ movhi
 271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 307              		.loc 1 272 0
 308 0216 7B68     		ldr	r3, [r7, #4]
 309 0218 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 310 021a 1A80     		strh	r2, [r3, #0]	@ movhi
 273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 311              		.loc 1 276 0
 312 021c 3B68     		ldr	r3, [r7, #0]
 313 021e 9A89     		ldrh	r2, [r3, #12]
 314 0220 3B68     		ldr	r3, [r7, #0]
 315 0222 1B89     		ldrh	r3, [r3, #8]
 316 0224 1343     		orrs	r3, r3, r2
 317 0226 9AB2     		uxth	r2, r3
 318 0228 7B68     		ldr	r3, [r7, #4]
 319 022a 1A81     		strh	r2, [r3, #8]	@ movhi
 277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 320              		.loc 1 277 0
 321 022c 07F12807 		add	r7, r7, #40
 322 0230 BD46     		mov	sp, r7
 323 0232 80BD     		pop	{r7, pc}
 324              		.cfi_endproc
 325              	.LFE30:
 327              		.align	2
 328              		.global	I2C_StructInit
 329              		.thumb
 330              		.thumb_func
 332              	I2C_StructInit:
 333              	.LFB31:
 278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 334              		.loc 1 285 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 8
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0234 80B4     		push	{r7}
 340              	.LCFI6:
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0236 83B0     		sub	sp, sp, #12
 344              	.LCFI7:
 345              		.cfi_def_cfa_offset 16
 346 0238 00AF     		add	r7, sp, #0
 347              	.LCFI8:
 348              		.cfi_def_cfa_register 7
 349 023a 7860     		str	r0, [r7, #4]
 286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 350              		.loc 1 288 0
 351 023c 7B68     		ldr	r3, [r7, #4]
 352 023e 41F28832 		movw	r2, #5000
 353 0242 1A60     		str	r2, [r3, #0]
 289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 354              		.loc 1 290 0
 355 0244 7B68     		ldr	r3, [r7, #4]
 356 0246 4FF00002 		mov	r2, #0
 357 024a 9A80     		strh	r2, [r3, #4]	@ movhi
 291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 358              		.loc 1 292 0
 359 024c 7B68     		ldr	r3, [r7, #4]
 360 024e 4BF6FF72 		movw	r2, #49151
 361 0252 DA80     		strh	r2, [r3, #6]	@ movhi
 293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 362              		.loc 1 294 0
 363 0254 7B68     		ldr	r3, [r7, #4]
 364 0256 4FF00002 		mov	r2, #0
 365 025a 1A81     		strh	r2, [r3, #8]	@ movhi
 295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 366              		.loc 1 296 0
 367 025c 7B68     		ldr	r3, [r7, #4]
 368 025e 4FF00002 		mov	r2, #0
 369 0262 5A81     		strh	r2, [r3, #10]	@ movhi
 297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 370              		.loc 1 298 0
 371 0264 7B68     		ldr	r3, [r7, #4]
 372 0266 4FF48042 		mov	r2, #16384
 373 026a 9A81     		strh	r2, [r3, #12]	@ movhi
 299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 374              		.loc 1 299 0
 375 026c 07F10C07 		add	r7, r7, #12
 376 0270 BD46     		mov	sp, r7
 377 0272 80BC     		pop	{r7}
 378 0274 7047     		bx	lr
 379              		.cfi_endproc
 380              	.LFE31:
 382 0276 00BF     		.align	2
 383              		.global	I2C_Cmd
 384              		.thumb
 385              		.thumb_func
 387              	I2C_Cmd:
 388              	.LFB32:
 300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 389              		.loc 1 309 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 8
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394 0278 80B4     		push	{r7}
 395              	.LCFI9:
 396              		.cfi_def_cfa_offset 4
 397              		.cfi_offset 7, -4
 398 027a 83B0     		sub	sp, sp, #12
 399              	.LCFI10:
 400              		.cfi_def_cfa_offset 16
 401 027c 00AF     		add	r7, sp, #0
 402              	.LCFI11:
 403              		.cfi_def_cfa_register 7
 404 027e 7860     		str	r0, [r7, #4]
 405 0280 0B46     		mov	r3, r1
 406 0282 FB70     		strb	r3, [r7, #3]
 310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 407              		.loc 1 313 0
 408 0284 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 409 0286 002B     		cmp	r3, #0
 410 0288 08D0     		beq	.L14
 314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 411              		.loc 1 316 0
 412 028a 7B68     		ldr	r3, [r7, #4]
 413 028c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 414 028e 9BB2     		uxth	r3, r3
 415 0290 43F00103 		orr	r3, r3, #1
 416 0294 9AB2     		uxth	r2, r3
 417 0296 7B68     		ldr	r3, [r7, #4]
 418 0298 1A80     		strh	r2, [r3, #0]	@ movhi
 419 029a 07E0     		b	.L13
 420              	.L14:
 317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 421              		.loc 1 321 0
 422 029c 7B68     		ldr	r3, [r7, #4]
 423 029e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 424 02a0 9BB2     		uxth	r3, r3
 425 02a2 23F00103 		bic	r3, r3, #1
 426 02a6 9AB2     		uxth	r2, r3
 427 02a8 7B68     		ldr	r3, [r7, #4]
 428 02aa 1A80     		strh	r2, [r3, #0]	@ movhi
 429              	.L13:
 322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 430              		.loc 1 323 0
 431 02ac 07F10C07 		add	r7, r7, #12
 432 02b0 BD46     		mov	sp, r7
 433 02b2 80BC     		pop	{r7}
 434 02b4 7047     		bx	lr
 435              		.cfi_endproc
 436              	.LFE32:
 438 02b6 00BF     		.align	2
 439              		.global	I2C_GenerateSTART
 440              		.thumb
 441              		.thumb_func
 443              	I2C_GenerateSTART:
 444              	.LFB33:
 324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 445              		.loc 1 333 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 8
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450 02b8 80B4     		push	{r7}
 451              	.LCFI12:
 452              		.cfi_def_cfa_offset 4
 453              		.cfi_offset 7, -4
 454 02ba 83B0     		sub	sp, sp, #12
 455              	.LCFI13:
 456              		.cfi_def_cfa_offset 16
 457 02bc 00AF     		add	r7, sp, #0
 458              	.LCFI14:
 459              		.cfi_def_cfa_register 7
 460 02be 7860     		str	r0, [r7, #4]
 461 02c0 0B46     		mov	r3, r1
 462 02c2 FB70     		strb	r3, [r7, #3]
 334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 463              		.loc 1 337 0
 464 02c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 465 02c6 002B     		cmp	r3, #0
 466 02c8 08D0     		beq	.L17
 338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Generate a START condition */
 340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 467              		.loc 1 340 0
 468 02ca 7B68     		ldr	r3, [r7, #4]
 469 02cc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 470 02ce 9BB2     		uxth	r3, r3
 471 02d0 43F48073 		orr	r3, r3, #256
 472 02d4 9AB2     		uxth	r2, r3
 473 02d6 7B68     		ldr	r3, [r7, #4]
 474 02d8 1A80     		strh	r2, [r3, #0]	@ movhi
 475 02da 07E0     		b	.L16
 476              	.L17:
 341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the START condition generation */
 345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 477              		.loc 1 345 0
 478 02dc 7B68     		ldr	r3, [r7, #4]
 479 02de 1B88     		ldrh	r3, [r3, #0]	@ movhi
 480 02e0 9BB2     		uxth	r3, r3
 481 02e2 23F48073 		bic	r3, r3, #256
 482 02e6 9AB2     		uxth	r2, r3
 483 02e8 7B68     		ldr	r3, [r7, #4]
 484 02ea 1A80     		strh	r2, [r3, #0]	@ movhi
 485              	.L16:
 346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 486              		.loc 1 347 0
 487 02ec 07F10C07 		add	r7, r7, #12
 488 02f0 BD46     		mov	sp, r7
 489 02f2 80BC     		pop	{r7}
 490 02f4 7047     		bx	lr
 491              		.cfi_endproc
 492              	.LFE33:
 494 02f6 00BF     		.align	2
 495              		.global	I2C_GenerateSTOP
 496              		.thumb
 497              		.thumb_func
 499              	I2C_GenerateSTOP:
 500              	.LFB34:
 348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 501              		.loc 1 357 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 8
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506 02f8 80B4     		push	{r7}
 507              	.LCFI15:
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 02fa 83B0     		sub	sp, sp, #12
 511              	.LCFI16:
 512              		.cfi_def_cfa_offset 16
 513 02fc 00AF     		add	r7, sp, #0
 514              	.LCFI17:
 515              		.cfi_def_cfa_register 7
 516 02fe 7860     		str	r0, [r7, #4]
 517 0300 0B46     		mov	r3, r1
 518 0302 FB70     		strb	r3, [r7, #3]
 358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 519              		.loc 1 361 0
 520 0304 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 521 0306 002B     		cmp	r3, #0
 522 0308 08D0     		beq	.L20
 362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Generate a STOP condition */
 364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 523              		.loc 1 364 0
 524 030a 7B68     		ldr	r3, [r7, #4]
 525 030c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 526 030e 9BB2     		uxth	r3, r3
 527 0310 43F40073 		orr	r3, r3, #512
 528 0314 9AB2     		uxth	r2, r3
 529 0316 7B68     		ldr	r3, [r7, #4]
 530 0318 1A80     		strh	r2, [r3, #0]	@ movhi
 531 031a 07E0     		b	.L19
 532              	.L20:
 365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the STOP condition generation */
 369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 533              		.loc 1 369 0
 534 031c 7B68     		ldr	r3, [r7, #4]
 535 031e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 536 0320 9BB2     		uxth	r3, r3
 537 0322 23F40073 		bic	r3, r3, #512
 538 0326 9AB2     		uxth	r2, r3
 539 0328 7B68     		ldr	r3, [r7, #4]
 540 032a 1A80     		strh	r2, [r3, #0]	@ movhi
 541              	.L19:
 370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 542              		.loc 1 371 0
 543 032c 07F10C07 		add	r7, r7, #12
 544 0330 BD46     		mov	sp, r7
 545 0332 80BC     		pop	{r7}
 546 0334 7047     		bx	lr
 547              		.cfi_endproc
 548              	.LFE34:
 550 0336 00BF     		.align	2
 551              		.global	I2C_Send7bitAddress
 552              		.thumb
 553              		.thumb_func
 555              	I2C_Send7bitAddress:
 556              	.LFB35:
 372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         or a Receiver. 
 379:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values
 380:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 383:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 384:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 557              		.loc 1 385 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 8
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562 0338 80B4     		push	{r7}
 563              	.LCFI18:
 564              		.cfi_def_cfa_offset 4
 565              		.cfi_offset 7, -4
 566 033a 83B0     		sub	sp, sp, #12
 567              	.LCFI19:
 568              		.cfi_def_cfa_offset 16
 569 033c 00AF     		add	r7, sp, #0
 570              	.LCFI20:
 571              		.cfi_def_cfa_register 7
 572 033e 7860     		str	r0, [r7, #4]
 573 0340 1346     		mov	r3, r2
 574 0342 0A46     		mov	r2, r1
 575 0344 FA70     		strb	r2, [r7, #3]
 576 0346 BB70     		strb	r3, [r7, #2]
 386:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 387:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 577              		.loc 1 390 0
 578 0348 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 579 034a 002B     		cmp	r3, #0
 580 034c 04D0     		beq	.L23
 391:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 392:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Set the address bit0 for read */
 393:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 581              		.loc 1 393 0
 582 034e FB78     		ldrb	r3, [r7, #3]
 583 0350 43F00103 		orr	r3, r3, #1
 584 0354 FB70     		strb	r3, [r7, #3]
 585 0356 03E0     		b	.L24
 586              	.L23:
 394:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 395:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 396:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 397:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Reset the address bit0 for write */
 398:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 587              		.loc 1 398 0
 588 0358 FB78     		ldrb	r3, [r7, #3]
 589 035a 23F00103 		bic	r3, r3, #1
 590 035e FB70     		strb	r3, [r7, #3]
 591              	.L24:
 399:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 400:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Send the address */
 401:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->DR = Address;
 592              		.loc 1 401 0
 593 0360 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 594 0362 9AB2     		uxth	r2, r3
 595 0364 7B68     		ldr	r3, [r7, #4]
 596 0366 1A82     		strh	r2, [r3, #16]	@ movhi
 402:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 597              		.loc 1 402 0
 598 0368 07F10C07 		add	r7, r7, #12
 599 036c BD46     		mov	sp, r7
 600 036e 80BC     		pop	{r7}
 601 0370 7047     		bx	lr
 602              		.cfi_endproc
 603              	.LFE35:
 605 0372 00BF     		.align	2
 606              		.global	I2C_AcknowledgeConfig
 607              		.thumb
 608              		.thumb_func
 610              	I2C_AcknowledgeConfig:
 611              	.LFB36:
 403:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 404:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 405:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 410:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 411:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 612              		.loc 1 412 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 8
 615              		@ frame_needed = 1, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 617 0374 80B4     		push	{r7}
 618              	.LCFI21:
 619              		.cfi_def_cfa_offset 4
 620              		.cfi_offset 7, -4
 621 0376 83B0     		sub	sp, sp, #12
 622              	.LCFI22:
 623              		.cfi_def_cfa_offset 16
 624 0378 00AF     		add	r7, sp, #0
 625              	.LCFI23:
 626              		.cfi_def_cfa_register 7
 627 037a 7860     		str	r0, [r7, #4]
 628 037c 0B46     		mov	r3, r1
 629 037e FB70     		strb	r3, [r7, #3]
 413:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 414:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 630              		.loc 1 416 0
 631 0380 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 632 0382 002B     		cmp	r3, #0
 633 0384 08D0     		beq	.L26
 417:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 418:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the acknowledgement */
 419:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 634              		.loc 1 419 0
 635 0386 7B68     		ldr	r3, [r7, #4]
 636 0388 1B88     		ldrh	r3, [r3, #0]	@ movhi
 637 038a 9BB2     		uxth	r3, r3
 638 038c 43F48063 		orr	r3, r3, #1024
 639 0390 9AB2     		uxth	r2, r3
 640 0392 7B68     		ldr	r3, [r7, #4]
 641 0394 1A80     		strh	r2, [r3, #0]	@ movhi
 642 0396 07E0     		b	.L25
 643              	.L26:
 420:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 421:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 422:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 423:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the acknowledgement */
 424:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 644              		.loc 1 424 0
 645 0398 7B68     		ldr	r3, [r7, #4]
 646 039a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 647 039c 9BB2     		uxth	r3, r3
 648 039e 23F48063 		bic	r3, r3, #1024
 649 03a2 9AB2     		uxth	r2, r3
 650 03a4 7B68     		ldr	r3, [r7, #4]
 651 03a6 1A80     		strh	r2, [r3, #0]	@ movhi
 652              	.L25:
 425:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 426:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 653              		.loc 1 426 0
 654 03a8 07F10C07 		add	r7, r7, #12
 655 03ac BD46     		mov	sp, r7
 656 03ae 80BC     		pop	{r7}
 657 03b0 7047     		bx	lr
 658              		.cfi_endproc
 659              	.LFE36:
 661 03b2 00BF     		.align	2
 662              		.global	I2C_OwnAddress2Config
 663              		.thumb
 664              		.thumb_func
 666              	I2C_OwnAddress2Config:
 667              	.LFB37:
 427:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 428:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 429:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None.
 433:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 434:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 668              		.loc 1 435 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 16
 671              		@ frame_needed = 1, uses_anonymous_args = 0
 672              		@ link register save eliminated.
 673 03b4 80B4     		push	{r7}
 674              	.LCFI24:
 675              		.cfi_def_cfa_offset 4
 676              		.cfi_offset 7, -4
 677 03b6 85B0     		sub	sp, sp, #20
 678              	.LCFI25:
 679              		.cfi_def_cfa_offset 24
 680 03b8 00AF     		add	r7, sp, #0
 681              	.LCFI26:
 682              		.cfi_def_cfa_register 7
 683 03ba 7860     		str	r0, [r7, #4]
 684 03bc 0B46     		mov	r3, r1
 685 03be FB70     		strb	r3, [r7, #3]
 436:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint16_t tmpreg = 0;
 686              		.loc 1 436 0
 687 03c0 4FF00003 		mov	r3, #0
 688 03c4 FB81     		strh	r3, [r7, #14]	@ movhi
 437:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 438:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 439:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 441:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the old register value */
 442:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 689              		.loc 1 442 0
 690 03c6 7B68     		ldr	r3, [r7, #4]
 691 03c8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 692 03ca FB81     		strh	r3, [r7, #14]	@ movhi
 443:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 444:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 693              		.loc 1 445 0
 694 03cc FB89     		ldrh	r3, [r7, #14]	@ movhi
 695 03ce 23F0FE03 		bic	r3, r3, #254
 696 03d2 FB81     		strh	r3, [r7, #14]	@ movhi
 446:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 447:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 697              		.loc 1 448 0
 698 03d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 699 03d6 9BB2     		uxth	r3, r3
 700 03d8 03F0FE03 		and	r3, r3, #254
 701 03dc 9AB2     		uxth	r2, r3
 702 03de FB89     		ldrh	r3, [r7, #14]
 703 03e0 1343     		orrs	r3, r3, r2
 704 03e2 9BB2     		uxth	r3, r3
 705 03e4 FB81     		strh	r3, [r7, #14]	@ movhi
 449:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 450:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Store the new register value */
 451:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 706              		.loc 1 451 0
 707 03e6 7B68     		ldr	r3, [r7, #4]
 708 03e8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 709 03ea 9A81     		strh	r2, [r3, #12]	@ movhi
 452:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 710              		.loc 1 452 0
 711 03ec 07F11407 		add	r7, r7, #20
 712 03f0 BD46     		mov	sp, r7
 713 03f2 80BC     		pop	{r7}
 714 03f4 7047     		bx	lr
 715              		.cfi_endproc
 716              	.LFE37:
 718 03f6 00BF     		.align	2
 719              		.global	I2C_DualAddressCmd
 720              		.thumb
 721              		.thumb_func
 723              	I2C_DualAddressCmd:
 724              	.LFB38:
 453:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 454:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 455:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 460:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 461:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 725              		.loc 1 462 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 8
 728              		@ frame_needed = 1, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 730 03f8 80B4     		push	{r7}
 731              	.LCFI27:
 732              		.cfi_def_cfa_offset 4
 733              		.cfi_offset 7, -4
 734 03fa 83B0     		sub	sp, sp, #12
 735              	.LCFI28:
 736              		.cfi_def_cfa_offset 16
 737 03fc 00AF     		add	r7, sp, #0
 738              	.LCFI29:
 739              		.cfi_def_cfa_register 7
 740 03fe 7860     		str	r0, [r7, #4]
 741 0400 0B46     		mov	r3, r1
 742 0402 FB70     		strb	r3, [r7, #3]
 463:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 464:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 743              		.loc 1 466 0
 744 0404 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 745 0406 002B     		cmp	r3, #0
 746 0408 08D0     		beq	.L30
 467:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 468:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable dual addressing mode */
 469:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 747              		.loc 1 469 0
 748 040a 7B68     		ldr	r3, [r7, #4]
 749 040c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 750 040e 9BB2     		uxth	r3, r3
 751 0410 43F00103 		orr	r3, r3, #1
 752 0414 9AB2     		uxth	r2, r3
 753 0416 7B68     		ldr	r3, [r7, #4]
 754 0418 9A81     		strh	r2, [r3, #12]	@ movhi
 755 041a 07E0     		b	.L29
 756              	.L30:
 470:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 471:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 472:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 473:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable dual addressing mode */
 474:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 757              		.loc 1 474 0
 758 041c 7B68     		ldr	r3, [r7, #4]
 759 041e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 760 0420 9BB2     		uxth	r3, r3
 761 0422 23F00103 		bic	r3, r3, #1
 762 0426 9AB2     		uxth	r2, r3
 763 0428 7B68     		ldr	r3, [r7, #4]
 764 042a 9A81     		strh	r2, [r3, #12]	@ movhi
 765              	.L29:
 475:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 476:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 766              		.loc 1 476 0
 767 042c 07F10C07 		add	r7, r7, #12
 768 0430 BD46     		mov	sp, r7
 769 0432 80BC     		pop	{r7}
 770 0434 7047     		bx	lr
 771              		.cfi_endproc
 772              	.LFE38:
 774 0436 00BF     		.align	2
 775              		.global	I2C_GeneralCallCmd
 776              		.thumb
 777              		.thumb_func
 779              	I2C_GeneralCallCmd:
 780              	.LFB39:
 477:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 478:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 479:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 484:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 485:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 781              		.loc 1 486 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 8
 784              		@ frame_needed = 1, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 786 0438 80B4     		push	{r7}
 787              	.LCFI30:
 788              		.cfi_def_cfa_offset 4
 789              		.cfi_offset 7, -4
 790 043a 83B0     		sub	sp, sp, #12
 791              	.LCFI31:
 792              		.cfi_def_cfa_offset 16
 793 043c 00AF     		add	r7, sp, #0
 794              	.LCFI32:
 795              		.cfi_def_cfa_register 7
 796 043e 7860     		str	r0, [r7, #4]
 797 0440 0B46     		mov	r3, r1
 798 0442 FB70     		strb	r3, [r7, #3]
 487:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 488:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 799              		.loc 1 490 0
 800 0444 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 801 0446 002B     		cmp	r3, #0
 802 0448 08D0     		beq	.L33
 491:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 492:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable generall call */
 493:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 803              		.loc 1 493 0
 804 044a 7B68     		ldr	r3, [r7, #4]
 805 044c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 806 044e 9BB2     		uxth	r3, r3
 807 0450 43F04003 		orr	r3, r3, #64
 808 0454 9AB2     		uxth	r2, r3
 809 0456 7B68     		ldr	r3, [r7, #4]
 810 0458 1A80     		strh	r2, [r3, #0]	@ movhi
 811 045a 07E0     		b	.L32
 812              	.L33:
 494:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 495:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 496:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 497:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable generall call */
 498:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 813              		.loc 1 498 0
 814 045c 7B68     		ldr	r3, [r7, #4]
 815 045e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 816 0460 9BB2     		uxth	r3, r3
 817 0462 23F04003 		bic	r3, r3, #64
 818 0466 9AB2     		uxth	r2, r3
 819 0468 7B68     		ldr	r3, [r7, #4]
 820 046a 1A80     		strh	r2, [r3, #0]	@ movhi
 821              	.L32:
 499:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 500:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 822              		.loc 1 500 0
 823 046c 07F10C07 		add	r7, r7, #12
 824 0470 BD46     		mov	sp, r7
 825 0472 80BC     		pop	{r7}
 826 0474 7047     		bx	lr
 827              		.cfi_endproc
 828              	.LFE39:
 830 0476 00BF     		.align	2
 831              		.global	I2C_SoftwareResetCmd
 832              		.thumb
 833              		.thumb_func
 835              	I2C_SoftwareResetCmd:
 836              	.LFB40:
 501:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 502:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 503:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 510:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 511:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 837              		.loc 1 512 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 8
 840              		@ frame_needed = 1, uses_anonymous_args = 0
 841              		@ link register save eliminated.
 842 0478 80B4     		push	{r7}
 843              	.LCFI33:
 844              		.cfi_def_cfa_offset 4
 845              		.cfi_offset 7, -4
 846 047a 83B0     		sub	sp, sp, #12
 847              	.LCFI34:
 848              		.cfi_def_cfa_offset 16
 849 047c 00AF     		add	r7, sp, #0
 850              	.LCFI35:
 851              		.cfi_def_cfa_register 7
 852 047e 7860     		str	r0, [r7, #4]
 853 0480 0B46     		mov	r3, r1
 854 0482 FB70     		strb	r3, [r7, #3]
 513:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 514:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 855              		.loc 1 516 0
 856 0484 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 857 0486 002B     		cmp	r3, #0
 858 0488 0AD0     		beq	.L36
 517:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 518:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Peripheral under reset */
 519:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 859              		.loc 1 519 0
 860 048a 7B68     		ldr	r3, [r7, #4]
 861 048c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 862 048e 9BB2     		uxth	r3, r3
 863 0490 6FEA4343 		mvn	r3, r3, lsl #17
 864 0494 6FEA5343 		mvn	r3, r3, lsr #17
 865 0498 9AB2     		uxth	r2, r3
 866 049a 7B68     		ldr	r3, [r7, #4]
 867 049c 1A80     		strh	r2, [r3, #0]	@ movhi
 868 049e 09E0     		b	.L35
 869              	.L36:
 520:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 521:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 522:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 523:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Peripheral not under reset */
 524:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 870              		.loc 1 524 0
 871 04a0 7B68     		ldr	r3, [r7, #4]
 872 04a2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 873 04a4 9BB2     		uxth	r3, r3
 874 04a6 4FEA4343 		lsl	r3, r3, #17
 875 04aa 4FEA5343 		lsr	r3, r3, #17
 876 04ae 9AB2     		uxth	r2, r3
 877 04b0 7B68     		ldr	r3, [r7, #4]
 878 04b2 1A80     		strh	r2, [r3, #0]	@ movhi
 879              	.L35:
 525:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 526:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 880              		.loc 1 526 0
 881 04b4 07F10C07 		add	r7, r7, #12
 882 04b8 BD46     		mov	sp, r7
 883 04ba 80BC     		pop	{r7}
 884 04bc 7047     		bx	lr
 885              		.cfi_endproc
 886              	.LFE40:
 888 04be 00BF     		.align	2
 889              		.global	I2C_StretchClockCmd
 890              		.thumb
 891              		.thumb_func
 893              	I2C_StretchClockCmd:
 894              	.LFB41:
 527:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 528:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 529:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 534:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 535:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 895              		.loc 1 536 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 8
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899              		@ link register save eliminated.
 900 04c0 80B4     		push	{r7}
 901              	.LCFI36:
 902              		.cfi_def_cfa_offset 4
 903              		.cfi_offset 7, -4
 904 04c2 83B0     		sub	sp, sp, #12
 905              	.LCFI37:
 906              		.cfi_def_cfa_offset 16
 907 04c4 00AF     		add	r7, sp, #0
 908              	.LCFI38:
 909              		.cfi_def_cfa_register 7
 910 04c6 7860     		str	r0, [r7, #4]
 911 04c8 0B46     		mov	r3, r1
 912 04ca FB70     		strb	r3, [r7, #3]
 537:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 538:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState == DISABLE)
 913              		.loc 1 540 0
 914 04cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 915 04ce 002B     		cmp	r3, #0
 916 04d0 08D1     		bne	.L39
 541:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 542:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 917              		.loc 1 543 0
 918 04d2 7B68     		ldr	r3, [r7, #4]
 919 04d4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 920 04d6 9BB2     		uxth	r3, r3
 921 04d8 43F08003 		orr	r3, r3, #128
 922 04dc 9AB2     		uxth	r2, r3
 923 04de 7B68     		ldr	r3, [r7, #4]
 924 04e0 1A80     		strh	r2, [r3, #0]	@ movhi
 925 04e2 07E0     		b	.L38
 926              	.L39:
 544:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 545:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 546:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 547:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 927              		.loc 1 548 0
 928 04e4 7B68     		ldr	r3, [r7, #4]
 929 04e6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 930 04e8 9BB2     		uxth	r3, r3
 931 04ea 23F08003 		bic	r3, r3, #128
 932 04ee 9AB2     		uxth	r2, r3
 933 04f0 7B68     		ldr	r3, [r7, #4]
 934 04f2 1A80     		strh	r2, [r3, #0]	@ movhi
 935              	.L38:
 549:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 550:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 936              		.loc 1 550 0
 937 04f4 07F10C07 		add	r7, r7, #12
 938 04f8 BD46     		mov	sp, r7
 939 04fa 80BC     		pop	{r7}
 940 04fc 7047     		bx	lr
 941              		.cfi_endproc
 942              	.LFE41:
 944 04fe 00BF     		.align	2
 945              		.global	I2C_FastModeDutyCycleConfig
 946              		.thumb
 947              		.thumb_func
 949              	I2C_FastModeDutyCycleConfig:
 950              	.LFB42:
 551:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 552:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 553:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 557:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 560:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 561:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 951              		.loc 1 562 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 8
 954              		@ frame_needed = 1, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956 0500 80B4     		push	{r7}
 957              	.LCFI39:
 958              		.cfi_def_cfa_offset 4
 959              		.cfi_offset 7, -4
 960 0502 83B0     		sub	sp, sp, #12
 961              	.LCFI40:
 962              		.cfi_def_cfa_offset 16
 963 0504 00AF     		add	r7, sp, #0
 964              	.LCFI41:
 965              		.cfi_def_cfa_register 7
 966 0506 7860     		str	r0, [r7, #4]
 967 0508 0B46     		mov	r3, r1
 968 050a 7B80     		strh	r3, [r7, #2]	@ movhi
 563:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 564:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 969              		.loc 1 566 0
 970 050c 7B88     		ldrh	r3, [r7, #2]
 971 050e B3F5804F 		cmp	r3, #16384
 972 0512 08D0     		beq	.L42
 567:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 568:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 973              		.loc 1 569 0
 974 0514 7B68     		ldr	r3, [r7, #4]
 975 0516 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 976 0518 9BB2     		uxth	r3, r3
 977 051a 23F48043 		bic	r3, r3, #16384
 978 051e 9AB2     		uxth	r2, r3
 979 0520 7B68     		ldr	r3, [r7, #4]
 980 0522 9A83     		strh	r2, [r3, #28]	@ movhi
 981 0524 07E0     		b	.L41
 982              	.L42:
 570:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 571:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 572:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 573:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 983              		.loc 1 574 0
 984 0526 7B68     		ldr	r3, [r7, #4]
 985 0528 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 986 052a 9BB2     		uxth	r3, r3
 987 052c 43F48043 		orr	r3, r3, #16384
 988 0530 9AB2     		uxth	r2, r3
 989 0532 7B68     		ldr	r3, [r7, #4]
 990 0534 9A83     		strh	r2, [r3, #28]	@ movhi
 991              	.L41:
 575:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 576:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 992              		.loc 1 576 0
 993 0536 07F10C07 		add	r7, r7, #12
 994 053a BD46     		mov	sp, r7
 995 053c 80BC     		pop	{r7}
 996 053e 7047     		bx	lr
 997              		.cfi_endproc
 998              	.LFE42:
 1000              		.align	2
 1001              		.global	I2C_NACKPositionConfig
 1002              		.thumb
 1003              		.thumb_func
 1005              	I2C_NACKPositionConfig:
 1006              	.LFB43:
 577:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 578:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 579:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 588:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                                        received byte.  
 590:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                                           received byte.
 592:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            
 593:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            
 597:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 598:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 599:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1007              		.loc 1 600 0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 8
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011              		@ link register save eliminated.
 1012 0540 80B4     		push	{r7}
 1013              	.LCFI42:
 1014              		.cfi_def_cfa_offset 4
 1015              		.cfi_offset 7, -4
 1016 0542 83B0     		sub	sp, sp, #12
 1017              	.LCFI43:
 1018              		.cfi_def_cfa_offset 16
 1019 0544 00AF     		add	r7, sp, #0
 1020              	.LCFI44:
 1021              		.cfi_def_cfa_register 7
 1022 0546 7860     		str	r0, [r7, #4]
 1023 0548 0B46     		mov	r3, r1
 1024 054a 7B80     		strh	r3, [r7, #2]	@ movhi
 601:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 602:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
 605:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the input parameter */
 606:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 1025              		.loc 1 606 0
 1026 054c 7B88     		ldrh	r3, [r7, #2]
 1027 054e B3F5006F 		cmp	r3, #2048
 1028 0552 08D1     		bne	.L45
 607:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 608:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 1029              		.loc 1 609 0
 1030 0554 7B68     		ldr	r3, [r7, #4]
 1031 0556 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1032 0558 9BB2     		uxth	r3, r3
 1033 055a 43F40063 		orr	r3, r3, #2048
 1034 055e 9AB2     		uxth	r2, r3
 1035 0560 7B68     		ldr	r3, [r7, #4]
 1036 0562 1A80     		strh	r2, [r3, #0]	@ movhi
 1037 0564 07E0     		b	.L44
 1038              	.L45:
 610:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 611:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 612:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 613:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 1039              		.loc 1 614 0
 1040 0566 7B68     		ldr	r3, [r7, #4]
 1041 0568 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1042 056a 9BB2     		uxth	r3, r3
 1043 056c 23F40063 		bic	r3, r3, #2048
 1044 0570 9AB2     		uxth	r2, r3
 1045 0572 7B68     		ldr	r3, [r7, #4]
 1046 0574 1A80     		strh	r2, [r3, #0]	@ movhi
 1047              	.L44:
 615:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 616:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1048              		.loc 1 616 0
 1049 0576 07F10C07 		add	r7, r7, #12
 1050 057a BD46     		mov	sp, r7
 1051 057c 80BC     		pop	{r7}
 1052 057e 7047     		bx	lr
 1053              		.cfi_endproc
 1054              	.LFE43:
 1056              		.align	2
 1057              		.global	I2C_SMBusAlertConfig
 1058              		.thumb
 1059              		.thumb_func
 1061              	I2C_SMBusAlertConfig:
 1062              	.LFB44:
 617:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 618:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 619:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 623:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 626:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 627:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1063              		.loc 1 628 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 8
 1066              		@ frame_needed = 1, uses_anonymous_args = 0
 1067              		@ link register save eliminated.
 1068 0580 80B4     		push	{r7}
 1069              	.LCFI45:
 1070              		.cfi_def_cfa_offset 4
 1071              		.cfi_offset 7, -4
 1072 0582 83B0     		sub	sp, sp, #12
 1073              	.LCFI46:
 1074              		.cfi_def_cfa_offset 16
 1075 0584 00AF     		add	r7, sp, #0
 1076              	.LCFI47:
 1077              		.cfi_def_cfa_register 7
 1078 0586 7860     		str	r0, [r7, #4]
 1079 0588 0B46     		mov	r3, r1
 1080 058a 7B80     		strh	r3, [r7, #2]	@ movhi
 629:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 630:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 1081              		.loc 1 632 0
 1082 058c 7B88     		ldrh	r3, [r7, #2]
 1083 058e B3F5005F 		cmp	r3, #8192
 1084 0592 08D1     		bne	.L48
 633:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 634:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 1085              		.loc 1 635 0
 1086 0594 7B68     		ldr	r3, [r7, #4]
 1087 0596 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1088 0598 9BB2     		uxth	r3, r3
 1089 059a 43F40053 		orr	r3, r3, #8192
 1090 059e 9AB2     		uxth	r2, r3
 1091 05a0 7B68     		ldr	r3, [r7, #4]
 1092 05a2 1A80     		strh	r2, [r3, #0]	@ movhi
 1093 05a4 07E0     		b	.L47
 1094              	.L48:
 636:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 637:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 638:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 639:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 1095              		.loc 1 640 0
 1096 05a6 7B68     		ldr	r3, [r7, #4]
 1097 05a8 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1098 05aa 9BB2     		uxth	r3, r3
 1099 05ac 23F40053 		bic	r3, r3, #8192
 1100 05b0 9AB2     		uxth	r2, r3
 1101 05b2 7B68     		ldr	r3, [r7, #4]
 1102 05b4 1A80     		strh	r2, [r3, #0]	@ movhi
 1103              	.L47:
 641:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 642:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1104              		.loc 1 642 0
 1105 05b6 07F10C07 		add	r7, r7, #12
 1106 05ba BD46     		mov	sp, r7
 1107 05bc 80BC     		pop	{r7}
 1108 05be 7047     		bx	lr
 1109              		.cfi_endproc
 1110              	.LFE44:
 1112              		.align	2
 1113              		.global	I2C_ARPCmd
 1114              		.thumb
 1115              		.thumb_func
 1117              	I2C_ARPCmd:
 1118              	.LFB45:
 643:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 644:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 645:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 650:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 651:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1119              		.loc 1 652 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 8
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123              		@ link register save eliminated.
 1124 05c0 80B4     		push	{r7}
 1125              	.LCFI48:
 1126              		.cfi_def_cfa_offset 4
 1127              		.cfi_offset 7, -4
 1128 05c2 83B0     		sub	sp, sp, #12
 1129              	.LCFI49:
 1130              		.cfi_def_cfa_offset 16
 1131 05c4 00AF     		add	r7, sp, #0
 1132              	.LCFI50:
 1133              		.cfi_def_cfa_register 7
 1134 05c6 7860     		str	r0, [r7, #4]
 1135 05c8 0B46     		mov	r3, r1
 1136 05ca FB70     		strb	r3, [r7, #3]
 653:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 654:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 1137              		.loc 1 656 0
 1138 05cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1139 05ce 002B     		cmp	r3, #0
 1140 05d0 08D0     		beq	.L51
 657:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 658:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 1141              		.loc 1 659 0
 1142 05d2 7B68     		ldr	r3, [r7, #4]
 1143 05d4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1144 05d6 9BB2     		uxth	r3, r3
 1145 05d8 43F01003 		orr	r3, r3, #16
 1146 05dc 9AB2     		uxth	r2, r3
 1147 05de 7B68     		ldr	r3, [r7, #4]
 1148 05e0 1A80     		strh	r2, [r3, #0]	@ movhi
 1149 05e2 07E0     		b	.L50
 1150              	.L51:
 660:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 661:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 662:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 663:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 1151              		.loc 1 664 0
 1152 05e4 7B68     		ldr	r3, [r7, #4]
 1153 05e6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1154 05e8 9BB2     		uxth	r3, r3
 1155 05ea 23F01003 		bic	r3, r3, #16
 1156 05ee 9AB2     		uxth	r2, r3
 1157 05f0 7B68     		ldr	r3, [r7, #4]
 1158 05f2 1A80     		strh	r2, [r3, #0]	@ movhi
 1159              	.L50:
 665:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 666:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1160              		.loc 1 666 0
 1161 05f4 07F10C07 		add	r7, r7, #12
 1162 05f8 BD46     		mov	sp, r7
 1163 05fa 80BC     		pop	{r7}
 1164 05fc 7047     		bx	lr
 1165              		.cfi_endproc
 1166              	.LFE45:
 1168 05fe 00BF     		.align	2
 1169              		.global	I2C_SendData
 1170              		.thumb
 1171              		.thumb_func
 1173              	I2C_SendData:
 1174              	.LFB46:
 667:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 668:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @}
 669:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 670:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 671:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   Data transfers functions 
 673:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 674:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 675:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 676:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                         Data transfers functions
 677:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 678:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 679:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 680:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 681:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 682:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 683:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 684:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 688:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 689:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1175              		.loc 1 690 0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 8
 1178              		@ frame_needed = 1, uses_anonymous_args = 0
 1179              		@ link register save eliminated.
 1180 0600 80B4     		push	{r7}
 1181              	.LCFI51:
 1182              		.cfi_def_cfa_offset 4
 1183              		.cfi_offset 7, -4
 1184 0602 83B0     		sub	sp, sp, #12
 1185              	.LCFI52:
 1186              		.cfi_def_cfa_offset 16
 1187 0604 00AF     		add	r7, sp, #0
 1188              	.LCFI53:
 1189              		.cfi_def_cfa_register 7
 1190 0606 7860     		str	r0, [r7, #4]
 1191 0608 0B46     		mov	r3, r1
 1192 060a FB70     		strb	r3, [r7, #3]
 691:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 692:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->DR = Data;
 1193              		.loc 1 694 0
 1194 060c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1195 060e 9AB2     		uxth	r2, r3
 1196 0610 7B68     		ldr	r3, [r7, #4]
 1197 0612 1A82     		strh	r2, [r3, #16]	@ movhi
 695:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1198              		.loc 1 695 0
 1199 0614 07F10C07 		add	r7, r7, #12
 1200 0618 BD46     		mov	sp, r7
 1201 061a 80BC     		pop	{r7}
 1202 061c 7047     		bx	lr
 1203              		.cfi_endproc
 1204              	.LFE46:
 1206 061e 00BF     		.align	2
 1207              		.global	I2C_ReceiveData
 1208              		.thumb
 1209              		.thumb_func
 1211              	I2C_ReceiveData:
 1212              	.LFB47:
 696:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 697:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 698:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The value of the received data.
 701:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 702:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1213              		.loc 1 703 0
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 8
 1216              		@ frame_needed = 1, uses_anonymous_args = 0
 1217              		@ link register save eliminated.
 1218 0620 80B4     		push	{r7}
 1219              	.LCFI54:
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 7, -4
 1222 0622 83B0     		sub	sp, sp, #12
 1223              	.LCFI55:
 1224              		.cfi_def_cfa_offset 16
 1225 0624 00AF     		add	r7, sp, #0
 1226              	.LCFI56:
 1227              		.cfi_def_cfa_register 7
 1228 0626 7860     		str	r0, [r7, #4]
 704:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 705:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the data in the DR register */
 707:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 1229              		.loc 1 707 0
 1230 0628 7B68     		ldr	r3, [r7, #4]
 1231 062a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1232 062c 9BB2     		uxth	r3, r3
 1233 062e DBB2     		uxtb	r3, r3
 708:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1234              		.loc 1 708 0
 1235 0630 1846     		mov	r0, r3
 1236 0632 07F10C07 		add	r7, r7, #12
 1237 0636 BD46     		mov	sp, r7
 1238 0638 80BC     		pop	{r7}
 1239 063a 7047     		bx	lr
 1240              		.cfi_endproc
 1241              	.LFE47:
 1243              		.align	2
 1244              		.global	I2C_TransmitPEC
 1245              		.thumb
 1246              		.thumb_func
 1248              	I2C_TransmitPEC:
 1249              	.LFB48:
 709:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 710:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 711:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @}
 712:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 713:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 714:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   PEC management functions 
 716:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 717:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 718:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 719:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                          PEC management functions
 720:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 721:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 722:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 723:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 724:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 725:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 726:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 727:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 732:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 733:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1250              		.loc 1 734 0
 1251              		.cfi_startproc
 1252              		@ args = 0, pretend = 0, frame = 8
 1253              		@ frame_needed = 1, uses_anonymous_args = 0
 1254              		@ link register save eliminated.
 1255 063c 80B4     		push	{r7}
 1256              	.LCFI57:
 1257              		.cfi_def_cfa_offset 4
 1258              		.cfi_offset 7, -4
 1259 063e 83B0     		sub	sp, sp, #12
 1260              	.LCFI58:
 1261              		.cfi_def_cfa_offset 16
 1262 0640 00AF     		add	r7, sp, #0
 1263              	.LCFI59:
 1264              		.cfi_def_cfa_register 7
 1265 0642 7860     		str	r0, [r7, #4]
 1266 0644 0B46     		mov	r3, r1
 1267 0646 FB70     		strb	r3, [r7, #3]
 735:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 736:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 1268              		.loc 1 738 0
 1269 0648 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1270 064a 002B     		cmp	r3, #0
 1271 064c 08D0     		beq	.L56
 739:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 740:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 1272              		.loc 1 741 0
 1273 064e 7B68     		ldr	r3, [r7, #4]
 1274 0650 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1275 0652 9BB2     		uxth	r3, r3
 1276 0654 43F48053 		orr	r3, r3, #4096
 1277 0658 9AB2     		uxth	r2, r3
 1278 065a 7B68     		ldr	r3, [r7, #4]
 1279 065c 1A80     		strh	r2, [r3, #0]	@ movhi
 1280 065e 07E0     		b	.L55
 1281              	.L56:
 742:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 743:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 744:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 745:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 1282              		.loc 1 746 0
 1283 0660 7B68     		ldr	r3, [r7, #4]
 1284 0662 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1285 0664 9BB2     		uxth	r3, r3
 1286 0666 23F48053 		bic	r3, r3, #4096
 1287 066a 9AB2     		uxth	r2, r3
 1288 066c 7B68     		ldr	r3, [r7, #4]
 1289 066e 1A80     		strh	r2, [r3, #0]	@ movhi
 1290              	.L55:
 747:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 748:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1291              		.loc 1 748 0
 1292 0670 07F10C07 		add	r7, r7, #12
 1293 0674 BD46     		mov	sp, r7
 1294 0676 80BC     		pop	{r7}
 1295 0678 7047     		bx	lr
 1296              		.cfi_endproc
 1297              	.LFE48:
 1299 067a 00BF     		.align	2
 1300              		.global	I2C_PECPositionConfig
 1301              		.thumb
 1302              		.thumb_func
 1304              	I2C_PECPositionConfig:
 1305              	.LFB49:
 749:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 750:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 751:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 755:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *       
 758:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          is intended to used in I2C mode.
 761:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                
 762:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 763:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 764:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1306              		.loc 1 765 0
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 8
 1309              		@ frame_needed = 1, uses_anonymous_args = 0
 1310              		@ link register save eliminated.
 1311 067c 80B4     		push	{r7}
 1312              	.LCFI60:
 1313              		.cfi_def_cfa_offset 4
 1314              		.cfi_offset 7, -4
 1315 067e 83B0     		sub	sp, sp, #12
 1316              	.LCFI61:
 1317              		.cfi_def_cfa_offset 16
 1318 0680 00AF     		add	r7, sp, #0
 1319              	.LCFI62:
 1320              		.cfi_def_cfa_register 7
 1321 0682 7860     		str	r0, [r7, #4]
 1322 0684 0B46     		mov	r3, r1
 1323 0686 7B80     		strh	r3, [r7, #2]	@ movhi
 766:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 767:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 1324              		.loc 1 769 0
 1325 0688 7B88     		ldrh	r3, [r7, #2]
 1326 068a B3F5006F 		cmp	r3, #2048
 1327 068e 08D1     		bne	.L59
 770:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 771:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 1328              		.loc 1 772 0
 1329 0690 7B68     		ldr	r3, [r7, #4]
 1330 0692 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1331 0694 9BB2     		uxth	r3, r3
 1332 0696 43F40063 		orr	r3, r3, #2048
 1333 069a 9AB2     		uxth	r2, r3
 1334 069c 7B68     		ldr	r3, [r7, #4]
 1335 069e 1A80     		strh	r2, [r3, #0]	@ movhi
 1336 06a0 07E0     		b	.L58
 1337              	.L59:
 773:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 774:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 775:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 776:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 1338              		.loc 1 777 0
 1339 06a2 7B68     		ldr	r3, [r7, #4]
 1340 06a4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1341 06a6 9BB2     		uxth	r3, r3
 1342 06a8 23F40063 		bic	r3, r3, #2048
 1343 06ac 9AB2     		uxth	r2, r3
 1344 06ae 7B68     		ldr	r3, [r7, #4]
 1345 06b0 1A80     		strh	r2, [r3, #0]	@ movhi
 1346              	.L58:
 778:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 779:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1347              		.loc 1 779 0
 1348 06b2 07F10C07 		add	r7, r7, #12
 1349 06b6 BD46     		mov	sp, r7
 1350 06b8 80BC     		pop	{r7}
 1351 06ba 7047     		bx	lr
 1352              		.cfi_endproc
 1353              	.LFE49:
 1355              		.align	2
 1356              		.global	I2C_CalculatePEC
 1357              		.thumb
 1358              		.thumb_func
 1360              	I2C_CalculatePEC:
 1361              	.LFB50:
 780:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 781:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 782:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 787:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 788:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1362              		.loc 1 789 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 8
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366              		@ link register save eliminated.
 1367 06bc 80B4     		push	{r7}
 1368              	.LCFI63:
 1369              		.cfi_def_cfa_offset 4
 1370              		.cfi_offset 7, -4
 1371 06be 83B0     		sub	sp, sp, #12
 1372              	.LCFI64:
 1373              		.cfi_def_cfa_offset 16
 1374 06c0 00AF     		add	r7, sp, #0
 1375              	.LCFI65:
 1376              		.cfi_def_cfa_register 7
 1377 06c2 7860     		str	r0, [r7, #4]
 1378 06c4 0B46     		mov	r3, r1
 1379 06c6 FB70     		strb	r3, [r7, #3]
 790:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 791:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 1380              		.loc 1 793 0
 1381 06c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1382 06ca 002B     		cmp	r3, #0
 1383 06cc 08D0     		beq	.L62
 794:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 795:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 1384              		.loc 1 796 0
 1385 06ce 7B68     		ldr	r3, [r7, #4]
 1386 06d0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1387 06d2 9BB2     		uxth	r3, r3
 1388 06d4 43F02003 		orr	r3, r3, #32
 1389 06d8 9AB2     		uxth	r2, r3
 1390 06da 7B68     		ldr	r3, [r7, #4]
 1391 06dc 1A80     		strh	r2, [r3, #0]	@ movhi
 1392 06de 07E0     		b	.L61
 1393              	.L62:
 797:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 798:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 799:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 800:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 1394              		.loc 1 801 0
 1395 06e0 7B68     		ldr	r3, [r7, #4]
 1396 06e2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1397 06e4 9BB2     		uxth	r3, r3
 1398 06e6 23F02003 		bic	r3, r3, #32
 1399 06ea 9AB2     		uxth	r2, r3
 1400 06ec 7B68     		ldr	r3, [r7, #4]
 1401 06ee 1A80     		strh	r2, [r3, #0]	@ movhi
 1402              	.L61:
 802:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 803:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1403              		.loc 1 803 0
 1404 06f0 07F10C07 		add	r7, r7, #12
 1405 06f4 BD46     		mov	sp, r7
 1406 06f6 80BC     		pop	{r7}
 1407 06f8 7047     		bx	lr
 1408              		.cfi_endproc
 1409              	.LFE50:
 1411 06fa 00BF     		.align	2
 1412              		.global	I2C_GetPEC
 1413              		.thumb
 1414              		.thumb_func
 1416              	I2C_GetPEC:
 1417              	.LFB51:
 804:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 805:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 806:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The PEC value.
 809:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 810:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1418              		.loc 1 811 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 8
 1421              		@ frame_needed = 1, uses_anonymous_args = 0
 1422              		@ link register save eliminated.
 1423 06fc 80B4     		push	{r7}
 1424              	.LCFI66:
 1425              		.cfi_def_cfa_offset 4
 1426              		.cfi_offset 7, -4
 1427 06fe 83B0     		sub	sp, sp, #12
 1428              	.LCFI67:
 1429              		.cfi_def_cfa_offset 16
 1430 0700 00AF     		add	r7, sp, #0
 1431              	.LCFI68:
 1432              		.cfi_def_cfa_register 7
 1433 0702 7860     		str	r0, [r7, #4]
 812:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 813:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 1434              		.loc 1 815 0
 1435 0704 7B68     		ldr	r3, [r7, #4]
 1436 0706 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1437 0708 9BB2     		uxth	r3, r3
 1438 070a 4FEA1323 		lsr	r3, r3, #8
 1439 070e 9BB2     		uxth	r3, r3
 1440 0710 DBB2     		uxtb	r3, r3
 816:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1441              		.loc 1 816 0
 1442 0712 1846     		mov	r0, r3
 1443 0714 07F10C07 		add	r7, r7, #12
 1444 0718 BD46     		mov	sp, r7
 1445 071a 80BC     		pop	{r7}
 1446 071c 7047     		bx	lr
 1447              		.cfi_endproc
 1448              	.LFE51:
 1450 071e 00BF     		.align	2
 1451              		.global	I2C_DMACmd
 1452              		.thumb
 1453              		.thumb_func
 1455              	I2C_DMACmd:
 1456              	.LFB52:
 817:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 818:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 819:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @}
 820:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 821:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 822:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 825:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 826:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 827:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                          DMA transfers management functions
 828:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 829:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   requests.
 831:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
 832:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 833:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 834:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 835:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 836:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 837:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 842:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 843:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1457              		.loc 1 844 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 8
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461              		@ link register save eliminated.
 1462 0720 80B4     		push	{r7}
 1463              	.LCFI69:
 1464              		.cfi_def_cfa_offset 4
 1465              		.cfi_offset 7, -4
 1466 0722 83B0     		sub	sp, sp, #12
 1467              	.LCFI70:
 1468              		.cfi_def_cfa_offset 16
 1469 0724 00AF     		add	r7, sp, #0
 1470              	.LCFI71:
 1471              		.cfi_def_cfa_register 7
 1472 0726 7860     		str	r0, [r7, #4]
 1473 0728 0B46     		mov	r3, r1
 1474 072a FB70     		strb	r3, [r7, #3]
 845:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 846:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 1475              		.loc 1 848 0
 1476 072c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1477 072e 002B     		cmp	r3, #0
 1478 0730 08D0     		beq	.L66
 849:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 850:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 1479              		.loc 1 851 0
 1480 0732 7B68     		ldr	r3, [r7, #4]
 1481 0734 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1482 0736 9BB2     		uxth	r3, r3
 1483 0738 43F40063 		orr	r3, r3, #2048
 1484 073c 9AB2     		uxth	r2, r3
 1485 073e 7B68     		ldr	r3, [r7, #4]
 1486 0740 9A80     		strh	r2, [r3, #4]	@ movhi
 1487 0742 07E0     		b	.L65
 1488              	.L66:
 852:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 853:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 854:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 855:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 1489              		.loc 1 856 0
 1490 0744 7B68     		ldr	r3, [r7, #4]
 1491 0746 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1492 0748 9BB2     		uxth	r3, r3
 1493 074a 23F40063 		bic	r3, r3, #2048
 1494 074e 9AB2     		uxth	r2, r3
 1495 0750 7B68     		ldr	r3, [r7, #4]
 1496 0752 9A80     		strh	r2, [r3, #4]	@ movhi
 1497              	.L65:
 857:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 858:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1498              		.loc 1 858 0
 1499 0754 07F10C07 		add	r7, r7, #12
 1500 0758 BD46     		mov	sp, r7
 1501 075a 80BC     		pop	{r7}
 1502 075c 7047     		bx	lr
 1503              		.cfi_endproc
 1504              	.LFE52:
 1506 075e 00BF     		.align	2
 1507              		.global	I2C_DMALastTransferCmd
 1508              		.thumb
 1509              		.thumb_func
 1511              	I2C_DMALastTransferCmd:
 1512              	.LFB53:
 859:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 860:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 861:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
 866:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 867:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1513              		.loc 1 868 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 8
 1516              		@ frame_needed = 1, uses_anonymous_args = 0
 1517              		@ link register save eliminated.
 1518 0760 80B4     		push	{r7}
 1519              	.LCFI72:
 1520              		.cfi_def_cfa_offset 4
 1521              		.cfi_offset 7, -4
 1522 0762 83B0     		sub	sp, sp, #12
 1523              	.LCFI73:
 1524              		.cfi_def_cfa_offset 16
 1525 0764 00AF     		add	r7, sp, #0
 1526              	.LCFI74:
 1527              		.cfi_def_cfa_register 7
 1528 0766 7860     		str	r0, [r7, #4]
 1529 0768 0B46     		mov	r3, r1
 1530 076a FB70     		strb	r3, [r7, #3]
 869:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
 870:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 1531              		.loc 1 872 0
 1532 076c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1533 076e 002B     		cmp	r3, #0
 1534 0770 08D0     		beq	.L69
 873:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 874:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1535              		.loc 1 875 0
 1536 0772 7B68     		ldr	r3, [r7, #4]
 1537 0774 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1538 0776 9BB2     		uxth	r3, r3
 1539 0778 43F48053 		orr	r3, r3, #4096
 1540 077c 9AB2     		uxth	r2, r3
 1541 077e 7B68     		ldr	r3, [r7, #4]
 1542 0780 9A80     		strh	r2, [r3, #4]	@ movhi
 1543 0782 07E0     		b	.L68
 1544              	.L69:
 876:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 877:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
 878:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
 879:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1545              		.loc 1 880 0
 1546 0784 7B68     		ldr	r3, [r7, #4]
 1547 0786 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1548 0788 9BB2     		uxth	r3, r3
 1549 078a 23F48053 		bic	r3, r3, #4096
 1550 078e 9AB2     		uxth	r2, r3
 1551 0790 7B68     		ldr	r3, [r7, #4]
 1552 0792 9A80     		strh	r2, [r3, #4]	@ movhi
 1553              	.L68:
 881:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
 882:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1554              		.loc 1 882 0
 1555 0794 07F10C07 		add	r7, r7, #12
 1556 0798 BD46     		mov	sp, r7
 1557 079a 80BC     		pop	{r7}
 1558 079c 7047     		bx	lr
 1559              		.cfi_endproc
 1560              	.LFE53:
 1562 079e 00BF     		.align	2
 1563              		.global	I2C_ReadRegister
 1564              		.thumb
 1565              		.thumb_func
 1567              	I2C_ReadRegister:
 1568              	.LFB54:
 883:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 884:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 885:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @}
 886:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 887:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 888:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  *
 891:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @verbatim   
 892:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 893:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                 Interrupts, events and flags management functions
 894:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
 895:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 900:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
 901:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================   
 903:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   depending on the application requirements and constraints:
 905:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****          
 906:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****    
 907:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      -----------------------------------------------------------
 909:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         (can be the combination of one or more flags).
 911:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 914:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - When to use
 915:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                manual (RM0033).
 918:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 920:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - Limitations
 921:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                the communication hold or corrupted real state. 
 924:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****          
 927:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      @note 
 928:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              and return to correct  communication status.
 937:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              
 938:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  
 939:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      -------------------------------------------------------------------- 
 941:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 945:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - When to use
 946:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                function.
 949:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                the library (stm32f2xx_i2c.h) or to custom values defined by user.
 951:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                same time.
 953:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                like I2C_CheckEvent() function.
 957:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 958:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - Limitations
 959:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - User may need to define his own events.
 960:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                (and ignores error flags).
 963:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       
 964:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  
 965:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      -----------------------------------------------------------------------
 967:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****      
 968:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
 971:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - When to use
 972:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                phase.
 974:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                events are monitored through multiple flags).
 976:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****           - Limitations: 
 977:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                one single event.
 982:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  
 983:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****    stm32f2xx_i2c.h file.
 985:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****        
 986:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** @endverbatim
 987:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @{
 988:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
 989:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****    
 990:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
 991:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
 994:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The value of the read register.
1004:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1005:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1569              		.loc 1 1006 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 16
 1572              		@ frame_needed = 1, uses_anonymous_args = 0
 1573              		@ link register save eliminated.
 1574 07a0 80B4     		push	{r7}
 1575              	.LCFI75:
 1576              		.cfi_def_cfa_offset 4
 1577              		.cfi_offset 7, -4
 1578 07a2 85B0     		sub	sp, sp, #20
 1579              	.LCFI76:
 1580              		.cfi_def_cfa_offset 24
 1581 07a4 00AF     		add	r7, sp, #0
 1582              	.LCFI77:
 1583              		.cfi_def_cfa_register 7
 1584 07a6 7860     		str	r0, [r7, #4]
 1585 07a8 0B46     		mov	r3, r1
 1586 07aa FB70     		strb	r3, [r7, #3]
1007:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   __IO uint32_t tmp = 0;
 1587              		.loc 1 1007 0
 1588 07ac 4FF00003 		mov	r3, #0
 1589 07b0 FB60     		str	r3, [r7, #12]
1008:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1009:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1010:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1013:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1590              		.loc 1 1013 0
 1591 07b2 7B68     		ldr	r3, [r7, #4]
 1592 07b4 FB60     		str	r3, [r7, #12]
1014:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   tmp += I2C_Register;
 1593              		.loc 1 1014 0
 1594 07b6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1595 07b8 FB68     		ldr	r3, [r7, #12]
 1596 07ba D318     		adds	r3, r2, r3
 1597 07bc FB60     		str	r3, [r7, #12]
1015:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1016:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the selected register value */
1017:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1598              		.loc 1 1017 0
 1599 07be FB68     		ldr	r3, [r7, #12]
 1600 07c0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1601 07c2 9BB2     		uxth	r3, r3
1018:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1602              		.loc 1 1018 0
 1603 07c4 1846     		mov	r0, r3
 1604 07c6 07F11407 		add	r7, r7, #20
 1605 07ca BD46     		mov	sp, r7
 1606 07cc 80BC     		pop	{r7}
 1607 07ce 7047     		bx	lr
 1608              		.cfi_endproc
 1609              	.LFE54:
 1611              		.align	2
 1612              		.global	I2C_ITConfig
 1613              		.thumb
 1614              		.thumb_func
 1616              	I2C_ITConfig:
 1617              	.LFB55:
1019:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1020:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1021:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
1031:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1032:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1618              		.loc 1 1033 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 8
 1621              		@ frame_needed = 1, uses_anonymous_args = 0
 1622              		@ link register save eliminated.
 1623 07d0 80B4     		push	{r7}
 1624              	.LCFI78:
 1625              		.cfi_def_cfa_offset 4
 1626              		.cfi_offset 7, -4
 1627 07d2 83B0     		sub	sp, sp, #12
 1628              	.LCFI79:
 1629              		.cfi_def_cfa_offset 16
 1630 07d4 00AF     		add	r7, sp, #0
 1631              	.LCFI80:
 1632              		.cfi_def_cfa_register 7
 1633 07d6 7860     		str	r0, [r7, #4]
 1634 07d8 1346     		mov	r3, r2
 1635 07da 0A46     		mov	r2, r1	@ movhi
 1636 07dc 7A80     		strh	r2, [r7, #2]	@ movhi
 1637 07de 7B70     		strb	r3, [r7, #1]
1034:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1035:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1039:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (NewState != DISABLE)
 1638              		.loc 1 1039 0
 1639 07e0 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1640 07e2 002B     		cmp	r3, #0
 1641 07e4 08D0     		beq	.L73
1040:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1041:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1642              		.loc 1 1042 0
 1643 07e6 7B68     		ldr	r3, [r7, #4]
 1644 07e8 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1645 07ea 9AB2     		uxth	r2, r3
 1646 07ec 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1647 07ee 1343     		orrs	r3, r3, r2
 1648 07f0 9AB2     		uxth	r2, r3
 1649 07f2 7B68     		ldr	r3, [r7, #4]
 1650 07f4 9A80     		strh	r2, [r3, #4]	@ movhi
 1651 07f6 0AE0     		b	.L72
 1652              	.L73:
1043:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1044:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1045:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1046:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1653              		.loc 1 1047 0
 1654 07f8 7B68     		ldr	r3, [r7, #4]
 1655 07fa 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1656 07fc 9AB2     		uxth	r2, r3
 1657 07fe 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1658 0800 6FEA0303 		mvn	r3, r3
 1659 0804 9BB2     		uxth	r3, r3
 1660 0806 1340     		ands	r3, r3, r2
 1661 0808 9AB2     		uxth	r2, r3
 1662 080a 7B68     		ldr	r3, [r7, #4]
 1663 080c 9A80     		strh	r2, [r3, #4]	@ movhi
 1664              	.L72:
1048:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1049:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1665              		.loc 1 1049 0
 1666 080e 07F10C07 		add	r7, r7, #12
 1667 0812 BD46     		mov	sp, r7
 1668 0814 80BC     		pop	{r7}
 1669 0816 7047     		bx	lr
 1670              		.cfi_endproc
 1671              	.LFE55:
 1673              		.align	2
 1674              		.global	I2C_CheckEvent
 1675              		.thumb
 1676              		.thumb_func
 1678              	I2C_CheckEvent:
 1679              	.LFB56:
1050:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1051:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*
1052:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
1053:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                           1. Basic state monitoring                    
1054:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
1055:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  */
1056:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1057:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1058:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         as parameter.
1060:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
1063:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *     
1084:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         in stm32f2xx_i2c.h file.
1086:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *    
1087:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1091:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1680              		.loc 1 1092 0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 24
 1683              		@ frame_needed = 1, uses_anonymous_args = 0
 1684              		@ link register save eliminated.
 1685 0818 80B4     		push	{r7}
 1686              	.LCFI81:
 1687              		.cfi_def_cfa_offset 4
 1688              		.cfi_offset 7, -4
 1689 081a 87B0     		sub	sp, sp, #28
 1690              	.LCFI82:
 1691              		.cfi_def_cfa_offset 32
 1692 081c 00AF     		add	r7, sp, #0
 1693              	.LCFI83:
 1694              		.cfi_def_cfa_register 7
 1695 081e 7860     		str	r0, [r7, #4]
 1696 0820 3960     		str	r1, [r7, #0]
1093:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t lastevent = 0;
 1697              		.loc 1 1093 0
 1698 0822 4FF00003 		mov	r3, #0
 1699 0826 3B61     		str	r3, [r7, #16]
1094:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1700              		.loc 1 1094 0
 1701 0828 4FF00003 		mov	r3, #0
 1702 082c FB60     		str	r3, [r7, #12]
 1703 082e 4FF00003 		mov	r3, #0
 1704 0832 BB60     		str	r3, [r7, #8]
1095:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ErrorStatus status = ERROR;
 1705              		.loc 1 1095 0
 1706 0834 4FF00003 		mov	r3, #0
 1707 0838 FB75     		strb	r3, [r7, #23]
1096:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1097:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1098:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1101:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Read the I2Cx status register */
1102:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag1 = I2Cx->SR1;
 1708              		.loc 1 1102 0
 1709 083a 7B68     		ldr	r3, [r7, #4]
 1710 083c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1711 083e 9BB2     		uxth	r3, r3
 1712 0840 FB60     		str	r3, [r7, #12]
1103:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag2 = I2Cx->SR2;
 1713              		.loc 1 1103 0
 1714 0842 7B68     		ldr	r3, [r7, #4]
 1715 0844 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1716 0846 9BB2     		uxth	r3, r3
 1717 0848 BB60     		str	r3, [r7, #8]
1104:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag2 = flag2 << 16;
 1718              		.loc 1 1104 0
 1719 084a BB68     		ldr	r3, [r7, #8]
 1720 084c 4FEA0343 		lsl	r3, r3, #16
 1721 0850 BB60     		str	r3, [r7, #8]
1105:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1106:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1722              		.loc 1 1107 0
 1723 0852 FA68     		ldr	r2, [r7, #12]
 1724 0854 BB68     		ldr	r3, [r7, #8]
 1725 0856 1343     		orrs	r3, r3, r2
 1726 0858 23F07F43 		bic	r3, r3, #-16777216
 1727 085c 3B61     		str	r3, [r7, #16]
1108:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1109:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1728              		.loc 1 1110 0
 1729 085e 3A69     		ldr	r2, [r7, #16]
 1730 0860 3B68     		ldr	r3, [r7, #0]
 1731 0862 1A40     		ands	r2, r2, r3
 1732 0864 3B68     		ldr	r3, [r7, #0]
 1733 0866 9A42     		cmp	r2, r3
 1734 0868 03D1     		bne	.L76
1111:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1112:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     status = SUCCESS;
 1735              		.loc 1 1113 0
 1736 086a 4FF00103 		mov	r3, #1
 1737 086e FB75     		strb	r3, [r7, #23]
 1738 0870 02E0     		b	.L77
 1739              	.L76:
1114:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1115:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1116:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1117:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     status = ERROR;
 1740              		.loc 1 1118 0
 1741 0872 4FF00003 		mov	r3, #0
 1742 0876 FB75     		strb	r3, [r7, #23]
 1743              	.L77:
1119:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1120:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return status */
1121:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return status;
 1744              		.loc 1 1121 0
 1745 0878 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1122:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1746              		.loc 1 1122 0
 1747 087a 1846     		mov	r0, r3
 1748 087c 07F11C07 		add	r7, r7, #28
 1749 0880 BD46     		mov	sp, r7
 1750 0882 80BC     		pop	{r7}
 1751 0884 7047     		bx	lr
 1752              		.cfi_endproc
 1753              	.LFE56:
 1755 0886 00BF     		.align	2
 1756              		.global	I2C_GetLastEvent
 1757              		.thumb
 1758              		.thumb_func
 1760              	I2C_GetLastEvent:
 1761              	.LFB57:
1123:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1124:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*
1125:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
1126:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                           2. Advanced state monitoring                   
1127:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
1128:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  */
1129:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1130:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1131:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *     
1134:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *         in stm32f2xx_i2c.h file.
1136:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *    
1137:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The last event
1138:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1139:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1762              		.loc 1 1140 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 24
 1765              		@ frame_needed = 1, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 1767 0888 80B4     		push	{r7}
 1768              	.LCFI84:
 1769              		.cfi_def_cfa_offset 4
 1770              		.cfi_offset 7, -4
 1771 088a 87B0     		sub	sp, sp, #28
 1772              	.LCFI85:
 1773              		.cfi_def_cfa_offset 32
 1774 088c 00AF     		add	r7, sp, #0
 1775              	.LCFI86:
 1776              		.cfi_def_cfa_register 7
 1777 088e 7860     		str	r0, [r7, #4]
1141:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t lastevent = 0;
 1778              		.loc 1 1141 0
 1779 0890 4FF00003 		mov	r3, #0
 1780 0894 7B61     		str	r3, [r7, #20]
1142:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1781              		.loc 1 1142 0
 1782 0896 4FF00003 		mov	r3, #0
 1783 089a 3B61     		str	r3, [r7, #16]
 1784 089c 4FF00003 		mov	r3, #0
 1785 08a0 FB60     		str	r3, [r7, #12]
1143:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1144:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1145:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1147:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Read the I2Cx status register */
1148:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag1 = I2Cx->SR1;
 1786              		.loc 1 1148 0
 1787 08a2 7B68     		ldr	r3, [r7, #4]
 1788 08a4 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1789 08a6 9BB2     		uxth	r3, r3
 1790 08a8 3B61     		str	r3, [r7, #16]
1149:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag2 = I2Cx->SR2;
 1791              		.loc 1 1149 0
 1792 08aa 7B68     		ldr	r3, [r7, #4]
 1793 08ac 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1794 08ae 9BB2     		uxth	r3, r3
 1795 08b0 FB60     		str	r3, [r7, #12]
1150:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flag2 = flag2 << 16;
 1796              		.loc 1 1150 0
 1797 08b2 FB68     		ldr	r3, [r7, #12]
 1798 08b4 4FEA0343 		lsl	r3, r3, #16
 1799 08b8 FB60     		str	r3, [r7, #12]
1151:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1152:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1800              		.loc 1 1153 0
 1801 08ba 3A69     		ldr	r2, [r7, #16]
 1802 08bc FB68     		ldr	r3, [r7, #12]
 1803 08be 1343     		orrs	r3, r3, r2
 1804 08c0 23F07F43 		bic	r3, r3, #-16777216
 1805 08c4 7B61     		str	r3, [r7, #20]
1154:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1155:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return status */
1156:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return lastevent;
 1806              		.loc 1 1156 0
 1807 08c6 7B69     		ldr	r3, [r7, #20]
1157:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1808              		.loc 1 1157 0
 1809 08c8 1846     		mov	r0, r3
 1810 08ca 07F11C07 		add	r7, r7, #28
 1811 08ce BD46     		mov	sp, r7
 1812 08d0 80BC     		pop	{r7}
 1813 08d2 7047     		bx	lr
 1814              		.cfi_endproc
 1815              	.LFE57:
 1817              		.align	2
 1818              		.global	I2C_GetFlagStatus
 1819              		.thumb
 1820              		.thumb_func
 1822              	I2C_GetFlagStatus:
 1823              	.LFB58:
1158:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1159:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /*
1160:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================
1161:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  ===============================================================================  
1163:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****  */
1164:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1165:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1166:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
1170:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1194:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1824              		.loc 1 1195 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 24
 1827              		@ frame_needed = 1, uses_anonymous_args = 0
 1828              		@ link register save eliminated.
 1829 08d4 80B4     		push	{r7}
 1830              	.LCFI87:
 1831              		.cfi_def_cfa_offset 4
 1832              		.cfi_offset 7, -4
 1833 08d6 87B0     		sub	sp, sp, #28
 1834              	.LCFI88:
 1835              		.cfi_def_cfa_offset 32
 1836 08d8 00AF     		add	r7, sp, #0
 1837              	.LCFI89:
 1838              		.cfi_def_cfa_register 7
 1839 08da 7860     		str	r0, [r7, #4]
 1840 08dc 3960     		str	r1, [r7, #0]
1196:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   FlagStatus bitstatus = RESET;
 1841              		.loc 1 1196 0
 1842 08de 4FF00003 		mov	r3, #0
 1843 08e2 FB75     		strb	r3, [r7, #23]
1197:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1844              		.loc 1 1197 0
 1845 08e4 4FF00003 		mov	r3, #0
 1846 08e8 3B61     		str	r3, [r7, #16]
 1847 08ea 4FF00003 		mov	r3, #0
 1848 08ee FB60     		str	r3, [r7, #12]
1198:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1199:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1200:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1203:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1849              		.loc 1 1204 0
 1850 08f0 7B68     		ldr	r3, [r7, #4]
 1851 08f2 FB60     		str	r3, [r7, #12]
1205:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1206:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Read flag register index */
1207:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1852              		.loc 1 1207 0
 1853 08f4 3B68     		ldr	r3, [r7, #0]
 1854 08f6 4FEA1373 		lsr	r3, r3, #28
 1855 08fa 3B61     		str	r3, [r7, #16]
1208:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1209:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1856              		.loc 1 1210 0
 1857 08fc 3B68     		ldr	r3, [r7, #0]
 1858 08fe 23F07F43 		bic	r3, r3, #-16777216
 1859 0902 3B60     		str	r3, [r7, #0]
1211:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1212:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if(i2creg != 0)
 1860              		.loc 1 1212 0
 1861 0904 3B69     		ldr	r3, [r7, #16]
 1862 0906 002B     		cmp	r3, #0
 1863 0908 04D0     		beq	.L80
1213:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1214:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     i2cxbase += 0x14;
 1864              		.loc 1 1215 0
 1865 090a FB68     		ldr	r3, [r7, #12]
 1866 090c 03F11403 		add	r3, r3, #20
 1867 0910 FB60     		str	r3, [r7, #12]
 1868 0912 07E0     		b	.L81
 1869              	.L80:
1216:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1217:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1218:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1219:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1870              		.loc 1 1220 0
 1871 0914 3B68     		ldr	r3, [r7, #0]
 1872 0916 4FEA1343 		lsr	r3, r3, #16
 1873 091a 3B60     		str	r3, [r7, #0]
1221:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     i2cxbase += 0x18;
 1874              		.loc 1 1222 0
 1875 091c FB68     		ldr	r3, [r7, #12]
 1876 091e 03F11803 		add	r3, r3, #24
 1877 0922 FB60     		str	r3, [r7, #12]
 1878              	.L81:
1223:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1224:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1225:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1879              		.loc 1 1225 0
 1880 0924 FB68     		ldr	r3, [r7, #12]
 1881 0926 1A68     		ldr	r2, [r3, #0]
 1882 0928 3B68     		ldr	r3, [r7, #0]
 1883 092a 1340     		ands	r3, r3, r2
 1884 092c 002B     		cmp	r3, #0
 1885 092e 03D0     		beq	.L82
1226:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1227:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C_FLAG is set */
1228:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     bitstatus = SET;
 1886              		.loc 1 1228 0
 1887 0930 4FF00103 		mov	r3, #1
 1888 0934 FB75     		strb	r3, [r7, #23]
 1889 0936 02E0     		b	.L83
 1890              	.L82:
1229:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1230:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1231:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1232:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C_FLAG is reset */
1233:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     bitstatus = RESET;
 1891              		.loc 1 1233 0
 1892 0938 4FF00003 		mov	r3, #0
 1893 093c FB75     		strb	r3, [r7, #23]
 1894              	.L83:
1234:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1235:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1236:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return  bitstatus;
 1895              		.loc 1 1237 0
 1896 093e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1238:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1897              		.loc 1 1238 0
 1898 0940 1846     		mov	r0, r3
 1899 0942 07F11C07 		add	r7, r7, #28
 1900 0946 BD46     		mov	sp, r7
 1901 0948 80BC     		pop	{r7}
 1902 094a 7047     		bx	lr
 1903              		.cfi_endproc
 1904              	.LFE58:
 1906              		.align	2
 1907              		.global	I2C_ClearFlag
 1908              		.thumb
 1909              		.thumb_func
 1911              	I2C_ClearFlag:
 1912              	.LFB59:
1239:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1240:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1241:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *   
1253:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          second byte of the address in DR register.
1259:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          register (I2C_SendData()).
1268:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *  
1269:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
1270:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1271:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1913              		.loc 1 1272 0
 1914              		.cfi_startproc
 1915              		@ args = 0, pretend = 0, frame = 16
 1916              		@ frame_needed = 1, uses_anonymous_args = 0
 1917              		@ link register save eliminated.
 1918 094c 80B4     		push	{r7}
 1919              	.LCFI90:
 1920              		.cfi_def_cfa_offset 4
 1921              		.cfi_offset 7, -4
 1922 094e 85B0     		sub	sp, sp, #20
 1923              	.LCFI91:
 1924              		.cfi_def_cfa_offset 24
 1925 0950 00AF     		add	r7, sp, #0
 1926              	.LCFI92:
 1927              		.cfi_def_cfa_register 7
 1928 0952 7860     		str	r0, [r7, #4]
 1929 0954 3960     		str	r1, [r7, #0]
1273:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t flagpos = 0;
 1930              		.loc 1 1273 0
 1931 0956 4FF00003 		mov	r3, #0
 1932 095a FB60     		str	r3, [r7, #12]
1274:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1275:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2C flag position */
1278:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 1933              		.loc 1 1278 0
 1934 095c 3B68     		ldr	r3, [r7, #0]
 1935 095e 23F07F43 		bic	r3, r3, #-16777216
 1936 0962 FB60     		str	r3, [r7, #12]
1279:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear the selected I2C flag */
1280:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1937              		.loc 1 1280 0
 1938 0964 FB68     		ldr	r3, [r7, #12]
 1939 0966 9BB2     		uxth	r3, r3
 1940 0968 6FEA0303 		mvn	r3, r3
 1941 096c 9AB2     		uxth	r2, r3
 1942 096e 7B68     		ldr	r3, [r7, #4]
 1943 0970 9A82     		strh	r2, [r3, #20]	@ movhi
1281:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 1944              		.loc 1 1281 0
 1945 0972 07F11407 		add	r7, r7, #20
 1946 0976 BD46     		mov	sp, r7
 1947 0978 80BC     		pop	{r7}
 1948 097a 7047     		bx	lr
 1949              		.cfi_endproc
 1950              	.LFE59:
 1952              		.align	2
 1953              		.global	I2C_GetITStatus
 1954              		.thumb
 1955              		.thumb_func
 1957              	I2C_GetITStatus:
 1958              	.LFB60:
1282:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1283:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1284:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be one of the following values:
1288:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1305:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 1959              		.loc 1 1306 0
 1960              		.cfi_startproc
 1961              		@ args = 0, pretend = 0, frame = 16
 1962              		@ frame_needed = 1, uses_anonymous_args = 0
 1963              		@ link register save eliminated.
 1964 097c 80B4     		push	{r7}
 1965              	.LCFI93:
 1966              		.cfi_def_cfa_offset 4
 1967              		.cfi_offset 7, -4
 1968 097e 85B0     		sub	sp, sp, #20
 1969              	.LCFI94:
 1970              		.cfi_def_cfa_offset 24
 1971 0980 00AF     		add	r7, sp, #0
 1972              	.LCFI95:
 1973              		.cfi_def_cfa_register 7
 1974 0982 7860     		str	r0, [r7, #4]
 1975 0984 3960     		str	r1, [r7, #0]
1307:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   ITStatus bitstatus = RESET;
 1976              		.loc 1 1307 0
 1977 0986 4FF00003 		mov	r3, #0
 1978 098a FB73     		strb	r3, [r7, #15]
1308:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t enablestatus = 0;
 1979              		.loc 1 1308 0
 1980 098c 4FF00003 		mov	r3, #0
 1981 0990 BB60     		str	r3, [r7, #8]
1309:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1310:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1311:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1314:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1982              		.loc 1 1315 0
 1983 0992 3B68     		ldr	r3, [r7, #0]
 1984 0994 03F0E063 		and	r3, r3, #117440512
 1985 0998 4FEA1342 		lsr	r2, r3, #16
 1986 099c 7B68     		ldr	r3, [r7, #4]
 1987 099e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1988 09a0 9BB2     		uxth	r3, r3
 1989 09a2 1340     		ands	r3, r3, r2
 1990 09a4 BB60     		str	r3, [r7, #8]
1316:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   
1317:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 1991              		.loc 1 1318 0
 1992 09a6 3B68     		ldr	r3, [r7, #0]
 1993 09a8 23F07F43 		bic	r3, r3, #-16777216
 1994 09ac 3B60     		str	r3, [r7, #0]
1319:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1320:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 1995              		.loc 1 1321 0
 1996 09ae 7B68     		ldr	r3, [r7, #4]
 1997 09b0 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1998 09b2 9BB2     		uxth	r3, r3
 1999 09b4 1A46     		mov	r2, r3
 2000 09b6 3B68     		ldr	r3, [r7, #0]
 2001 09b8 1340     		ands	r3, r3, r2
 2002 09ba 002B     		cmp	r3, #0
 2003 09bc 06D0     		beq	.L86
 2004              		.loc 1 1321 0 is_stmt 0 discriminator 1
 2005 09be BB68     		ldr	r3, [r7, #8]
 2006 09c0 002B     		cmp	r3, #0
 2007 09c2 03D0     		beq	.L86
1322:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1323:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C_IT is set */
1324:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     bitstatus = SET;
 2008              		.loc 1 1324 0 is_stmt 1
 2009 09c4 4FF00103 		mov	r3, #1
 2010 09c8 FB73     		strb	r3, [r7, #15]
 2011 09ca 02E0     		b	.L87
 2012              	.L86:
1325:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1326:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   else
1327:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   {
1328:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     /* I2C_IT is reset */
1329:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****     bitstatus = RESET;
 2013              		.loc 1 1329 0
 2014 09cc 4FF00003 		mov	r3, #0
 2015 09d0 FB73     		strb	r3, [r7, #15]
 2016              	.L87:
1330:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   }
1331:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Return the I2C_IT status */
1332:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   return  bitstatus;
 2017              		.loc 1 1332 0
 2018 09d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1333:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 2019              		.loc 1 1333 0
 2020 09d4 1846     		mov	r0, r3
 2021 09d6 07F11407 		add	r7, r7, #20
 2022 09da BD46     		mov	sp, r7
 2023 09dc 80BC     		pop	{r7}
 2024 09de 7047     		bx	lr
 2025              		.cfi_endproc
 2026              	.LFE60:
 2028              		.align	2
 2029              		.global	I2C_ClearITPendingBit
 2030              		.thumb
 2031              		.thumb_func
 2033              	I2C_ClearITPendingBit:
 2034              	.LFB61:
1334:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1335:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** /**
1336:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * 
1348:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   * @retval None
1364:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   */
1365:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** {
 2035              		.loc 1 1366 0
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 16
 2038              		@ frame_needed = 1, uses_anonymous_args = 0
 2039              		@ link register save eliminated.
 2040 09e0 80B4     		push	{r7}
 2041              	.LCFI96:
 2042              		.cfi_def_cfa_offset 4
 2043              		.cfi_offset 7, -4
 2044 09e2 85B0     		sub	sp, sp, #20
 2045              	.LCFI97:
 2046              		.cfi_def_cfa_offset 24
 2047 09e4 00AF     		add	r7, sp, #0
 2048              	.LCFI98:
 2049              		.cfi_def_cfa_register 7
 2050 09e6 7860     		str	r0, [r7, #4]
 2051 09e8 3960     		str	r1, [r7, #0]
1367:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   uint32_t flagpos = 0;
 2052              		.loc 1 1367 0
 2053 09ea 4FF00003 		mov	r3, #0
 2054 09ee FB60     		str	r3, [r7, #12]
1368:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Check the parameters */
1369:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1372:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Get the I2C flag position */
1373:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 2055              		.loc 1 1373 0
 2056 09f0 3B68     		ldr	r3, [r7, #0]
 2057 09f2 23F07F43 		bic	r3, r3, #-16777216
 2058 09f6 FB60     		str	r3, [r7, #12]
1374:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** 
1375:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   /* Clear the selected I2C flag */
1376:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 2059              		.loc 1 1376 0
 2060 09f8 FB68     		ldr	r3, [r7, #12]
 2061 09fa 9BB2     		uxth	r3, r3
 2062 09fc 6FEA0303 		mvn	r3, r3
 2063 0a00 9AB2     		uxth	r2, r3
 2064 0a02 7B68     		ldr	r3, [r7, #4]
 2065 0a04 9A82     		strh	r2, [r3, #20]	@ movhi
1377:../STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c **** }
 2066              		.loc 1 1377 0
 2067 0a06 07F11407 		add	r7, r7, #20
 2068 0a0a BD46     		mov	sp, r7
 2069 0a0c 80BC     		pop	{r7}
 2070 0a0e 7047     		bx	lr
 2071              		.cfi_endproc
 2072              	.LFE61:
 2074              	.Letext0:
 2075              		.file 2 "c:/cad/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 2076              		.file 3 "C:\\workspace\\te_stm32f207_simple\\system/stm32f2xx.h"
 2077              		.file 4 "C:\\workspace\\te_stm32f207_simple\\STM32F2xx_StdPeriph_Driver\\inc/stm32f2xx_rcc.h"
 2078              		.file 5 "C:\\workspace\\te_stm32f207_simple\\STM32F2xx_StdPeriph_Driver\\inc/stm32f2xx_i2c.h"
 2079              		.file 6 "C:\\workspace\\te_stm32f207_simple\\system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_i2c.c
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:17     .text:00000000 $t
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:22     .text:00000000 I2C_DeInit
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:100    .text:00000088 I2C_Init
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:332    .text:00000234 I2C_StructInit
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:387    .text:00000278 I2C_Cmd
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:443    .text:000002b8 I2C_GenerateSTART
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:499    .text:000002f8 I2C_GenerateSTOP
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:555    .text:00000338 I2C_Send7bitAddress
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:610    .text:00000374 I2C_AcknowledgeConfig
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:666    .text:000003b4 I2C_OwnAddress2Config
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:723    .text:000003f8 I2C_DualAddressCmd
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:779    .text:00000438 I2C_GeneralCallCmd
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:835    .text:00000478 I2C_SoftwareResetCmd
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:893    .text:000004c0 I2C_StretchClockCmd
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:949    .text:00000500 I2C_FastModeDutyCycleConfig
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1005   .text:00000540 I2C_NACKPositionConfig
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1061   .text:00000580 I2C_SMBusAlertConfig
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1117   .text:000005c0 I2C_ARPCmd
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1173   .text:00000600 I2C_SendData
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1211   .text:00000620 I2C_ReceiveData
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1248   .text:0000063c I2C_TransmitPEC
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1304   .text:0000067c I2C_PECPositionConfig
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1360   .text:000006bc I2C_CalculatePEC
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1416   .text:000006fc I2C_GetPEC
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1455   .text:00000720 I2C_DMACmd
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1511   .text:00000760 I2C_DMALastTransferCmd
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1567   .text:000007a0 I2C_ReadRegister
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1616   .text:000007d0 I2C_ITConfig
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1678   .text:00000818 I2C_CheckEvent
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1760   .text:00000888 I2C_GetLastEvent
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1822   .text:000008d4 I2C_GetFlagStatus
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1911   .text:0000094c I2C_ClearFlag
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:1957   .text:0000097c I2C_GetITStatus
C:\Users\IARISC~1\AppData\Local\Temp\cctjAS4x.s:2033   .text:000009e0 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
