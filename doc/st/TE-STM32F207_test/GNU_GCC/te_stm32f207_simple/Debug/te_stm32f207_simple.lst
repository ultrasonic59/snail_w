
te_stm32f207_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014bfc  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000008f4  20000000  08014d84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000003ac  200008f4  08015678  000208f4  2**2
                  ALLOC
  4 ._user_heap_stack 00000200  20000ca0  08015a24  000208f4  2**0
                  ALLOC
  5 .ARM.attributes 0000002f  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001cc8d  00000000  00000000  00020923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000516a  00000000  00000000  0003d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001186e  00000000  00000000  0004271a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000808  00000000  00000000  00053f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000e423  00000000  00000000  00054790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00bdb919  00000000  00000000  00062bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00007b14  00000000  00000000  00c3e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00c45fe0  2**0
                  CONTENTS, READONLY
 14 .debug_frame  0000509c  00000000  00000000  00c45ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000368  00000000  00000000  00c4b090  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	6039      	str	r1, [r7, #0]
 8000192:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	da10      	bge.n	80001be <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 800019c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80001a0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001a4:	79fa      	ldrb	r2, [r7, #7]
 80001a6:	f002 020f 	and.w	r2, r2, #15
 80001aa:	f1a2 0104 	sub.w	r1, r2, #4
 80001ae:	683a      	ldr	r2, [r7, #0]
 80001b0:	b2d2      	uxtb	r2, r2
 80001b2:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80001b6:	b2d2      	uxtb	r2, r2
 80001b8:	185b      	adds	r3, r3, r1
 80001ba:	761a      	strb	r2, [r3, #24]
 80001bc:	e00d      	b.n	80001da <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80001be:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80001c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001c6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80001ca:	683a      	ldr	r2, [r7, #0]
 80001cc:	b2d2      	uxtb	r2, r2
 80001ce:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80001d2:	b2d2      	uxtb	r2, r2
 80001d4:	185b      	adds	r3, r3, r1
 80001d6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80001da:	f107 070c 	add.w	r7, r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d902      	bls.n	80001fc <SysTick_Config+0x18>
 80001f6:	f04f 0301 	mov.w	r3, #1
 80001fa:	e01f      	b.n	800023c <SysTick_Config+0x58>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001fc:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000200:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800020a:	f102 32ff 	add.w	r2, r2, #4294967295
 800020e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000210:	f04f 30ff 	mov.w	r0, #4294967295
 8000214:	f04f 010f 	mov.w	r1, #15
 8000218:	f7ff ffb6 	bl	8000188 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800021c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000220:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000224:	f04f 0200 	mov.w	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 800022a:	f24e 0310 	movw	r3, #57360	; 0xe010
 800022e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000232:	f04f 0207 	mov.w	r2, #7
 8000236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000238:	f04f 0300 	mov.w	r3, #0
}
 800023c:	4618      	mov	r0, r3
 800023e:	f107 0708 	add.w	r7, r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop

08000248 <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000248:	b5b0      	push	{r4, r5, r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_ClocksTypeDef RCC_Clocks;
  float temp;

  /* NVIC configuration */
  NVIC_Config();
 800024e:	f000 f90f 	bl	8000470 <NVIC_Config>


  /* Enable the SHUTDOWN/PC13 Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000252:	f04f 0004 	mov.w	r0, #4
 8000256:	f04f 0101 	mov.w	r1, #1
 800025a:	f009 fe63 	bl	8009f24 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800025e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000262:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000264:	f04f 0301 	mov.w	r3, #1
 8000268:	763b      	strb	r3, [r7, #24]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800026a:	f04f 0300 	mov.w	r3, #0
 800026e:	76bb      	strb	r3, [r7, #26]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000270:	f04f 0300 	mov.w	r3, #0
 8000274:	76fb      	strb	r3, [r7, #27]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000276:	f04f 0302 	mov.w	r3, #2
 800027a:	767b      	strb	r3, [r7, #25]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000284:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000288:	4619      	mov	r1, r3
 800028a:	f007 fc0d 	bl	8007aa8 <GPIO_Init>


  /* Enable the SHUTDOWN/PC13 Clock */
  GPIO_ResetBits(GPIOC,GPIO_Pin_13);
 800028e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000292:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029a:	f007 fd55 	bl	8007d48 <GPIO_ResetBits>


  STM_EVAL_LEDInit(LED1);
 800029e:	f04f 0000 	mov.w	r0, #0
 80002a2:	f000 fe05 	bl	8000eb0 <STM_EVAL_LEDInit>
  ADC1_ChTempSensor_Init();
 80002a6:	f000 fd51 	bl	8000d4c <ADC1_ChTempSensor_Init>
  /* Start ADC1 Software Conversion */
  ADC_SoftwareStartConv(ADC1);
 80002aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80002ae:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002b2:	f001 fc0f 	bl	8001ad4 <ADC_SoftwareStartConv>

  TIM6_Config();
 80002b6:	f000 fd11 	bl	8000cdc <TIM6_Config>

  DAC_Ch1_EscalatorConfig();
 80002ba:	f000 fcc9 	bl	8000c50 <DAC_Ch1_EscalatorConfig>

  RCC_GetClocksFreq(&RCC_Clocks);
 80002be:	f107 0304 	add.w	r3, r7, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f009 fcda 	bl	8009c7c <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80002ce:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80002d2:	fba3 1302 	umull	r1, r3, r3, r2
 80002d6:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff82 	bl	80001e4 <SysTick_Config>
        - Two Stop Bit
        - Odd parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 9600;
 80002e0:	f640 4350 	movw	r3, #3152	; 0xc50
 80002e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002ec:	601a      	str	r2, [r3, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80002ee:	f640 4350 	movw	r3, #3152	; 0xc50
 80002f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002f6:	f04f 0200 	mov.w	r2, #0
 80002fa:	809a      	strh	r2, [r3, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80002fc:	f640 4350 	movw	r3, #3152	; 0xc50
 8000300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000304:	f04f 0200 	mov.w	r2, #0
 8000308:	80da      	strh	r2, [r3, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 800030a:	f640 4350 	movw	r3, #3152	; 0xc50
 800030e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000312:	f04f 0200 	mov.w	r2, #0
 8000316:	811a      	strh	r2, [r3, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000318:	f640 4350 	movw	r3, #3152	; 0xc50
 800031c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000320:	f04f 0200 	mov.w	r2, #0
 8000324:	819a      	strh	r2, [r3, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000326:	f640 4350 	movw	r3, #3152	; 0xc50
 800032a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800032e:	f04f 020c 	mov.w	r2, #12
 8000332:	815a      	strh	r2, [r3, #10]

  USART3_buffer_Init();
 8000334:	f000 ffb8 	bl	80012a8 <USART3_buffer_Init>
  STM_EVAL_COMInit(COM1, &USART_InitStructure);
 8000338:	f04f 0000 	mov.w	r0, #0
 800033c:	f640 4150 	movw	r1, #3152	; 0xc50
 8000340:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000344:	f000 fe42 	bl	8000fcc <STM_EVAL_COMInit>


  //USART3_SendChar(0x41);
  //USART_ITConfig(EVAL_COM1, USART_IT_TC, ENABLE);
  USART_ITConfig(EVAL_COM1, USART_IT_RXNE, ENABLE);
 8000348:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800034c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000350:	f240 5125 	movw	r1, #1317	; 0x525
 8000354:	f04f 0201 	mov.w	r2, #1
 8000358:	f00e ffde 	bl	800f318 <USART_ITConfig>
  USART_ITConfig(EVAL_COM1, USART_IT_TXE, ENABLE);
 800035c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000360:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000364:	f240 7127 	movw	r1, #1831	; 0x727
 8000368:	f04f 0201 	mov.w	r2, #1
 800036c:	f00e ffd4 	bl	800f318 <USART_ITConfig>



	USART3_SendString((char *)Message,sprintf(Message,"\n \r Temperature sensor : "));
 8000370:	f640 3250 	movw	r2, #2896	; 0xb50
 8000374:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000378:	f644 3354 	movw	r3, #19284	; 0x4b54
 800037c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000380:	4614      	mov	r4, r2
 8000382:	461d      	mov	r5, r3
 8000384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800038c:	c403      	stmia	r4!, {r0, r1}
 800038e:	8022      	strh	r2, [r4, #0]
 8000390:	f640 3050 	movw	r0, #2896	; 0xb50
 8000394:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000398:	f04f 0119 	mov.w	r1, #25
 800039c:	f001 f824 	bl	80013e8 <USART3_SendString>


  while (1)
  {

   Delay(1000);
 80003a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a4:	f000 f87c 	bl	80004a0 <Delay>

   STM_EVAL_LEDToggle(LED1);
 80003a8:	f04f 0000 	mov.w	r0, #0
 80003ac:	f000 fdea 	bl	8000f84 <STM_EVAL_LEDToggle>


   temp= (((3.3/4096)*(ADCConvertedValue >> 4))-0.76)/(0.0025)+25;
 80003b0:	f640 334c 	movw	r3, #2892	; 0xb4c
 80003b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80003be:	4618      	mov	r0, r3
 80003c0:	f00f fa9e 	bl	800f900 <__aeabi_ui2d>
 80003c4:	4602      	mov	r2, r0
 80003c6:	460b      	mov	r3, r1
 80003c8:	4610      	mov	r0, r2
 80003ca:	4619      	mov	r1, r3
 80003cc:	a322      	add	r3, pc, #136	; (adr r3, 8000458 <main+0x210>)
 80003ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003d2:	f00f fb0b 	bl	800f9ec <__aeabi_dmul>
 80003d6:	4602      	mov	r2, r0
 80003d8:	460b      	mov	r3, r1
 80003da:	4610      	mov	r0, r2
 80003dc:	4619      	mov	r1, r3
 80003de:	a320      	add	r3, pc, #128	; (adr r3, 8000460 <main+0x218>)
 80003e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e4:	f00f f94e 	bl	800f684 <__aeabi_dsub>
 80003e8:	4602      	mov	r2, r0
 80003ea:	460b      	mov	r3, r1
 80003ec:	4610      	mov	r0, r2
 80003ee:	4619      	mov	r1, r3
 80003f0:	a31d      	add	r3, pc, #116	; (adr r3, 8000468 <main+0x220>)
 80003f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003f6:	f00f fc23 	bl	800fc40 <__aeabi_ddiv>
 80003fa:	4602      	mov	r2, r0
 80003fc:	460b      	mov	r3, r1
 80003fe:	4610      	mov	r0, r2
 8000400:	4619      	mov	r1, r3
 8000402:	f04f 0200 	mov.w	r2, #0
 8000406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040a:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
 800040e:	f00f f93b 	bl	800f688 <__adddf3>
 8000412:	4602      	mov	r2, r0
 8000414:	460b      	mov	r3, r1
 8000416:	4610      	mov	r0, r2
 8000418:	4619      	mov	r1, r3
 800041a:	f00f fcf9 	bl	800fe10 <__aeabi_d2f>
 800041e:	4603      	mov	r3, r0
 8000420:	61fb      	str	r3, [r7, #28]

   USART3_SendString((char *)Message,sprintf(Message,"\n \r %.1f",temp));
 8000422:	69f8      	ldr	r0, [r7, #28]
 8000424:	f00f fa8e 	bl	800f944 <__aeabi_f2d>
 8000428:	4602      	mov	r2, r0
 800042a:	460b      	mov	r3, r1
 800042c:	f640 3050 	movw	r0, #2896	; 0xb50
 8000430:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000434:	f644 3170 	movw	r1, #19312	; 0x4b70
 8000438:	f6c0 0101 	movt	r1, #2049	; 0x801
 800043c:	f00f fdaa 	bl	800ff94 <sprintf>
 8000440:	4603      	mov	r3, r0
 8000442:	f640 3050 	movw	r0, #2896	; 0xb50
 8000446:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800044a:	4619      	mov	r1, r3
 800044c:	f000 ffcc 	bl	80013e8 <USART3_SendString>


  }
 8000450:	e7a6      	b.n	80003a0 <main+0x158>
 8000452:	bf00      	nop
 8000454:	f3af 8000 	nop.w
 8000458:	66666666 	.word	0x66666666
 800045c:	3f4a6666 	.word	0x3f4a6666
 8000460:	851eb852 	.word	0x851eb852
 8000464:	3fe851eb 	.word	0x3fe851eb
 8000468:	47ae147b 	.word	0x47ae147b
 800046c:	3f647ae1 	.word	0x3f647ae1

08000470 <NVIC_Config>:
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval None
  */
void NVIC_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the USARTx Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = EVAL_COM1_IRQn;
 8000476:	f04f 0327 	mov.w	r3, #39	; 0x27
 800047a:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000482:	f04f 0300 	mov.w	r3, #0
 8000486:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000488:	f04f 0301 	mov.w	r3, #1
 800048c:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 800048e:	f107 0304 	add.w	r3, r7, #4
 8000492:	4618      	mov	r0, r3
 8000494:	f000 ffd6 	bl	8001444 <NVIC_Init>
}
 8000498:	f107 0708 	add.w	r7, r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in 10 ms.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	f640 03f4 	movw	r3, #2292	; 0x8f4
 80004ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004b2:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 80004b4:	bf00      	nop
 80004b6:	f640 03f4 	movw	r3, #2292	; 0x8f4
 80004ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d1f8      	bne.n	80004b6 <Delay+0x16>
}
 80004c4:	f107 070c 	add.w	r7, r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 80004d4:	f640 03f4 	movw	r3, #2292	; 0x8f4
 80004d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d00b      	beq.n	80004fa <TimingDelay_Decrement+0x2a>
  {
    TimingDelay--;
 80004e2:	f640 03f4 	movw	r3, #2292	; 0x8f4
 80004e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f103 32ff 	add.w	r2, r3, #4294967295
 80004f0:	f640 03f4 	movw	r3, #2292	; 0x8f4
 80004f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f8:	601a      	str	r2, [r3, #0]
  }
}
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
 8000500:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
 8000504:	f3ef 8409 	mrs	r4, PSP
 8000508:	4620      	mov	r0, r4
 800050a:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 800050c:	4623      	mov	r3, r4
}
 800050e:	4618      	mov	r0, r3

08000510 <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
 8000510:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
 8000512:	f383 8809 	msr	PSP, r3
 8000516:	4770      	bx	lr

08000518 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
 8000518:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
 800051c:	f3ef 8408 	mrs	r4, MSP
 8000520:	4620      	mov	r0, r4
 8000522:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 8000524:	4623      	mov	r3, r4
}
 8000526:	4618      	mov	r0, r3

08000528 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
 8000528:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
 800052a:	f383 8808 	msr	MSP, r3
 800052e:	4770      	bx	lr

08000530 <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
 8000530:	b490      	push	{r4, r7}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8000536:	f04f 0300 	mov.w	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800053c:	f3ef 8412 	mrs	r4, BASEPRI_MASK
 8000540:	607c      	str	r4, [r7, #4]
  return(result);
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	4618      	mov	r0, r3
 8000546:	f107 0708 	add.w	r7, r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bc90      	pop	{r4, r7}
 800054e:	4770      	bx	lr

08000550 <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f383 8811 	msr	BASEPRI, r3
}
 800055e:	f107 070c 	add.w	r7, r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
 8000568:	b490      	push	{r4, r7}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  uint32_t result=0;
 800056e:	f04f 0300 	mov.w	r3, #0
 8000572:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000574:	f3ef 8410 	mrs	r4, PRIMASK
 8000578:	607c      	str	r4, [r7, #4]
  return(result);
 800057a:	687b      	ldr	r3, [r7, #4]
}
 800057c:	4618      	mov	r0, r3
 800057e:	f107 0708 	add.w	r7, r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bc90      	pop	{r4, r7}
 8000586:	4770      	bx	lr

08000588 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f383 8810 	msr	PRIMASK, r3
}
 8000596:	f107 070c 	add.w	r7, r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
 80005a0:	b490      	push	{r4, r7}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  uint32_t result=0;
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 80005ac:	f3ef 8413 	mrs	r4, FAULTMASK
 80005b0:	607c      	str	r4, [r7, #4]
  return(result);
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	f107 0708 	add.w	r7, r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc90      	pop	{r4, r7}
 80005be:	4770      	bx	lr

080005c0 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f383 8813 	msr	FAULTMASK, r3
}
 80005ce:	f107 070c 	add.w	r7, r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
 80005d8:	b490      	push	{r4, r7}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  uint32_t result=0;
 80005de:	f04f 0300 	mov.w	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80005e4:	f3ef 8414 	mrs	r4, CONTROL
 80005e8:	607c      	str	r4, [r7, #4]
  return(result);
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	f107 0708 	add.w	r7, r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc90      	pop	{r4, r7}
 80005f6:	4770      	bx	lr

080005f8 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f383 8814 	msr	CONTROL, r3
}
 8000606:	f107 070c 	add.w	r7, r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
 8000610:	b490      	push	{r4, r7}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8000618:	f04f 0300 	mov.w	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	ba1c      	rev	r4, r3
 8000622:	60fc      	str	r4, [r7, #12]
  return(result);
 8000624:	68fb      	ldr	r3, [r7, #12]
}
 8000626:	4618      	mov	r0, r3
 8000628:	f107 0710 	add.w	r7, r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bc90      	pop	{r4, r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
 8000634:	b490      	push	{r4, r7}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 800063e:	f04f 0300 	mov.w	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	ba5c      	rev16	r4, r3
 8000648:	60fc      	str	r4, [r7, #12]
  return(result);
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	f107 0710 	add.w	r7, r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bc90      	pop	{r4, r7}
 8000656:	4770      	bx	lr

08000658 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
 8000658:	b490      	push	{r4, r7}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 8000662:	f04f 0300 	mov.w	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	badc      	revsh	r4, r3
 800066c:	60fc      	str	r4, [r7, #12]
  return(result);
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	f107 0710 	add.w	r7, r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bc90      	pop	{r4, r7}
 800067a:	4770      	bx	lr

0800067c <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
 800067c:	b490      	push	{r4, r7}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8000684:	f04f 0300 	mov.w	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	fa93 f4a3 	rbit	r4, r3
 8000690:	60fc      	str	r4, [r7, #12]
   return(result);
 8000692:	68fb      	ldr	r3, [r7, #12]
}
 8000694:	4618      	mov	r0, r3
 8000696:	f107 0710 	add.w	r7, r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bc90      	pop	{r4, r7}
 800069e:	4770      	bx	lr

080006a0 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
 80006a0:	b490      	push	{r4, r7}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
 80006a8:	f04f 0300 	mov.w	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	e8d3 4f4f 	ldrexb	r4, [r3]
 80006b4:	73fc      	strb	r4, [r7, #15]
   return(result);
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	f107 0710 	add.w	r7, r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc90      	pop	{r4, r7}
 80006c2:	4770      	bx	lr

080006c4 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
 80006c4:	b490      	push	{r4, r7}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
 80006cc:	f04f 0300 	mov.w	r3, #0
 80006d0:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	e8d3 4f5f 	ldrexh	r4, [r3]
 80006d8:	81fc      	strh	r4, [r7, #14]
   return(result);
 80006da:	89fb      	ldrh	r3, [r7, #14]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	f107 0710 	add.w	r7, r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc90      	pop	{r4, r7}
 80006e6:	4770      	bx	lr

080006e8 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
 80006e8:	b490      	push	{r4, r7}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
 80006f0:	f04f 0300 	mov.w	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	e853 4f00 	ldrex	r4, [r3]
 80006fc:	60fc      	str	r4, [r7, #12]
   return(result);
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	4618      	mov	r0, r3
 8000702:	f107 0710 	add.w	r7, r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bc90      	pop	{r4, r7}
 800070a:	4770      	bx	lr

0800070c <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
 800070c:	b490      	push	{r4, r7}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	e8c3 2f44 	strexb	r4, r2, [r3]
 8000726:	60fc      	str	r4, [r7, #12]
   return(result);
 8000728:	68fb      	ldr	r3, [r7, #12]
}
 800072a:	4618      	mov	r0, r3
 800072c:	f107 0710 	add.w	r7, r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bc90      	pop	{r4, r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
 8000738:	b490      	push	{r4, r7}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	88fa      	ldrh	r2, [r7, #6]
 800074e:	e8c3 2f54 	strexh	r4, r2, [r3]
 8000752:	60fc      	str	r4, [r7, #12]
   return(result);
 8000754:	68fb      	ldr	r3, [r7, #12]
}
 8000756:	4618      	mov	r0, r3
 8000758:	f107 0710 	add.w	r7, r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bc90      	pop	{r4, r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
 8000764:	b490      	push	{r4, r7}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	e843 2400 	strex	r4, r2, [r3]
 800077c:	60fc      	str	r4, [r7, #12]
   return(result);
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	f107 0710 	add.w	r7, r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bc90      	pop	{r4, r7}
 800078a:	4770      	bx	lr
 800078c:	08014d84 	.word	0x08014d84
 8000790:	20000000 	.word	0x20000000
 8000794:	200008f4 	.word	0x200008f4
 8000798:	200008f4 	.word	0x200008f4
 800079c:	20000ca0 	.word	0x20000ca0

080007a0 <_read_r>:
#include <sys/types.h>

/***************************************************************************/

int _read_r (struct _reent *r, int file, char * ptr, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	603b      	str	r3, [r7, #0]
  r = r;
  file = file;
  ptr = ptr;
  len = len;
  
  errno = EINVAL;
 80007ae:	f00f fb7f 	bl	800feb0 <__errno>
 80007b2:	4603      	mov	r3, r0
 80007b4:	f04f 0216 	mov.w	r2, #22
 80007b8:	601a      	str	r2, [r3, #0]
  return -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007be:	4618      	mov	r0, r3
 80007c0:	f107 0710 	add.w	r7, r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_lseek_r>:

/***************************************************************************/

int _lseek_r (struct _reent *r, int file, int ptr, int dir)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
  r = r;
  file = file;
  ptr = ptr;
  dir = dir;
  
  return 0;
 80007d6:	f04f 0300 	mov.w	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	f107 0714 	add.w	r7, r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop

080007e8 <_write_r>:

/***************************************************************************/

int _write_r (struct _reent *r, int file, char * ptr, int len)
{  
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]

    uart_putc(ptr[index]);
  }  
#endif   
  
  return len;
 80007f6:	683b      	ldr	r3, [r7, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	f107 0714 	add.w	r7, r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <_close_r>:

/***************************************************************************/

int _close_r (struct _reent *r, int file)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  return 0;
 800080e:	f04f 0300 	mov.w	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	f107 070c 	add.w	r7, r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <_sbrk_r>:

/* Register name faking - works in collusion with the linker.  */
register char * stack_ptr asm ("sp");

caddr_t _sbrk_r (struct _reent *r, int incr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  extern char   end asm ("end"); /* Defined by the linker.  */
  static char * heap_end;
  char *        prev_heap_end;

  if (heap_end == NULL)
 800082a:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800082e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d108      	bne.n	800084a <_sbrk_r+0x2a>
    heap_end = & end;
 8000838:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800083c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000840:	f640 42a0 	movw	r2, #3232	; 0xca0
 8000844:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000848:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 800084a:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800084e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60fb      	str	r3, [r7, #12]
  
  if (heap_end + incr > stack_ptr)
 8000856:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800085a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	18d2      	adds	r2, r2, r3
 8000864:	466b      	mov	r3, sp
 8000866:	429a      	cmp	r2, r3
 8000868:	d908      	bls.n	800087c <_sbrk_r+0x5c>

      _write (1, "_sbrk: Heap and stack collision\n", 32);
      
      abort ();
#else
      errno = ENOMEM;
 800086a:	f00f fb21 	bl	800feb0 <__errno>
 800086e:	4603      	mov	r3, r0
 8000870:	f04f 020c 	mov.w	r2, #12
 8000874:	601a      	str	r2, [r3, #0]
      return (caddr_t) -1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	e00c      	b.n	8000896 <_sbrk_r+0x76>
#endif
  }
  
  heap_end += incr;
 800087c:	f640 03f8 	movw	r3, #2296	; 0x8f8
 8000880:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	18d2      	adds	r2, r2, r3
 800088a:	f640 03f8 	movw	r3, #2296	; 0x8f8
 800088e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000892:	601a      	str	r2, [r3, #0]

  return (caddr_t) prev_heap_end;
 8000894:	68fb      	ldr	r3, [r7, #12]
}
 8000896:	4618      	mov	r0, r3
 8000898:	f107 0710 	add.w	r7, r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_fstat_r>:

/***************************************************************************/

int _fstat_r (struct _reent *r, int file, struct stat * st)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  r = r; 
  file = file;
   
  memset (st, 0, sizeof (* st));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	461a      	mov	r2, r3
 80008b0:	f04f 033c 	mov.w	r3, #60	; 0x3c
 80008b4:	4610      	mov	r0, r2
 80008b6:	f04f 0100 	mov.w	r1, #0
 80008ba:	461a      	mov	r2, r3
 80008bc:	f00f fafe 	bl	800febc <memset>
  st->st_mode = S_IFCHR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c6:	605a      	str	r2, [r3, #4]
  return 0;
 80008c8:	f04f 0300 	mov.w	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	f107 0710 	add.w	r7, r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop

080008d8 <_isatty_r>:

/***************************************************************************/

int _isatty_r(struct _reent *r, int fd)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  r = r;
  fd = fd;
   
  return 1;
 80008e2:	f04f 0301 	mov.w	r3, #1
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	f107 070c 	add.w	r7, r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000900:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000904:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000908:	6812      	ldr	r2, [r2, #0]
 800090a:	f042 0201 	orr.w	r2, r2, #1
 800090e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000910:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000914:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000918:	f04f 0200 	mov.w	r2, #0
 800091c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800091e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000922:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000926:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800092a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000934:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000938:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800093a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800093e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000942:	f243 0210 	movw	r2, #12304	; 0x3010
 8000946:	f2c2 4200 	movt	r2, #9216	; 0x2400
 800094a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800094c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000950:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000954:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000958:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800095c:	6812      	ldr	r2, [r2, #0]
 800095e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000962:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000964:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000968:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000972:	f000 f8c3 	bl	8000afc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000976:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800097a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800097e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000982:	609a      	str	r2, [r3, #8]
#endif
}
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop

08000988 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	f04f 0302 	mov.w	r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	f04f 0302 	mov.w	r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f003 030c 	and.w	r3, r3, #12
 80009ba:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d00d      	beq.n	80009de <SystemCoreClockUpdate+0x56>
 80009c2:	2b08      	cmp	r3, #8
 80009c4:	d015      	beq.n	80009f2 <SystemCoreClockUpdate+0x6a>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d16b      	bne.n	8000aa2 <SystemCoreClockUpdate+0x11a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80009ca:	f240 0300 	movw	r3, #0
 80009ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009d2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80009d6:	f2c0 02f4 	movt	r2, #244	; 0xf4
 80009da:	601a      	str	r2, [r3, #0]
      break;
 80009dc:	e06b      	b.n	8000ab6 <SystemCoreClockUpdate+0x12e>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80009de:	f240 0300 	movw	r3, #0
 80009e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009e6:	f647 0240 	movw	r2, #30784	; 0x7840
 80009ea:	f2c0 127d 	movt	r2, #381	; 0x17d
 80009ee:	601a      	str	r2, [r3, #0]
      break;
 80009f0:	e061      	b.n	8000ab6 <SystemCoreClockUpdate+0x12e>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80009f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a00:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000a04:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a14:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d015      	beq.n	8000a48 <SystemCoreClockUpdate+0xc0>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a1c:	f647 0340 	movw	r3, #30784	; 0x7840
 8000a20:	f2c0 137d 	movt	r3, #381	; 0x17d
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000a3a:	400b      	ands	r3, r1
 8000a3c:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000a40:	fb03 f302 	mul.w	r3, r3, r2
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e014      	b.n	8000a72 <SystemCoreClockUpdate+0xea>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a48:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000a4c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000a66:	400b      	ands	r3, r1
 8000a68:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000a6c:	fb03 f302 	mul.w	r3, r3, r2
 8000a70:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a80:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000a84:	f103 0301 	add.w	r3, r3, #1
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a96:	f240 0300 	movw	r3, #0
 8000a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a9e:	601a      	str	r2, [r3, #0]
      break;
 8000aa0:	e009      	b.n	8000ab6 <SystemCoreClockUpdate+0x12e>
    default:
      SystemCoreClock = HSI_VALUE;
 8000aa2:	f240 0300 	movw	r3, #0
 8000aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aaa:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000aae:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000ab2:	601a      	str	r2, [r3, #0]
      break;
 8000ab4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000ab6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ac4:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8000ac8:	f240 0304 	movw	r3, #4
 8000acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ad0:	5c9b      	ldrb	r3, [r3, r2]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000ad6:	f240 0300 	movw	r3, #0
 8000ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	fa22 f203 	lsr.w	r2, r2, r3
 8000ae6:	f240 0300 	movw	r3, #0
 8000aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	f107 071c 	add.w	r7, r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b16:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b1e:	6812      	ldr	r2, [r2, #0]
 8000b20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b24:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b26:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f103 0301 	add.w	r3, r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d103      	bne.n	8000b4c <SetSysClock+0x50>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b4a:	d1ec      	bne.n	8000b26 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b5e:	f04f 0301 	mov.w	r3, #1
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	e002      	b.n	8000b6c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d169      	bne.n	8000c46 <SetSysClock+0x14a>
  {
    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b7a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b82:	6892      	ldr	r2, [r2, #8]
 8000b84:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000b86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b8e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b96:	6892      	ldr	r2, [r2, #8]
 8000b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b9c:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000b9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ba2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ba6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000baa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bae:	6892      	ldr	r2, [r2, #8]
 8000bb0:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000bb4:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000bb6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bbe:	f643 4219 	movw	r2, #15385	; 0x3c19
 8000bc2:	f2c0 5240 	movt	r2, #1344	; 0x540
 8000bc6:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000bc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000bde:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000be0:	bf00      	nop
 8000be2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000be6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f6      	beq.n	8000be2 <SetSysClock+0xe6>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
 8000bf4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000bf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bfc:	f240 7203 	movw	r2, #1795	; 0x703
 8000c00:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c0a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c12:	6892      	ldr	r2, [r2, #8]
 8000c14:	f022 0203 	bic.w	r2, r2, #3
 8000c18:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c22:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c2a:	6892      	ldr	r2, [r2, #8]
 8000c2c:	f042 0202 	orr.w	r2, r2, #2
 8000c30:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000c32:	bf00      	nop
 8000c34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d1f6      	bne.n	8000c34 <SetSysClock+0x138>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000c46:	f107 070c 	add.w	r7, r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <DAC_Ch1_EscalatorConfig>:
uint32_t 	ADCConvertedValue;

const uint8_t Escalator8bit[6] = {0x0, 0x33, 0x66, 0x99, 0xCC, 0xFF};


void DAC_Ch1_EscalatorConfig(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0

	DAC_InitTypeDef  DAC_InitStructure;


	/* DMA1 clock and GPIOA clock enable (to be used with DAC) */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 8000c56:	f04f 0001 	mov.w	r0, #1
 8000c5a:	f2c0 0020 	movt	r0, #32
 8000c5e:	f04f 0101 	mov.w	r1, #1
 8000c62:	f009 f95f 	bl	8009f24 <RCC_AHB1PeriphClockCmd>

	/* DAC Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8000c66:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000c6a:	f04f 0101 	mov.w	r1, #1
 8000c6e:	f009 f9dd 	bl	800a02c <RCC_APB1PeriphClockCmd>

	/* DAC channel 1 & 2 (DAC_OUT1 = PA.4)(DAC_OUT2 = PA.5) configuration */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; // | GPIO_Pin_5;
 8000c72:	f04f 0310 	mov.w	r3, #16
 8000c76:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000c78:	f04f 0303 	mov.w	r3, #3
 8000c7c:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000c7e:	f04f 0300 	mov.w	r3, #0
 8000c82:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c90:	4619      	mov	r1, r3
 8000c92:	f006 ff09 	bl	8007aa8 <GPIO_Init>

	 /* DAC channel2 Configuration */
	  DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
 8000c96:	f04f 0304 	mov.w	r3, #4
 8000c9a:	603b      	str	r3, [r7, #0]
	  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_Noise;//;DAC_WaveGeneration_Triangle;//
 8000c9c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000ca0:	607b      	str	r3, [r7, #4]
	  DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude = DAC_TriangleAmplitude_4095;
 8000ca2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000ca6:	60bb      	str	r3, [r7, #8]
	  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
	  DAC_Init(DAC_Channel_1, &DAC_InitStructure);
 8000cae:	463b      	mov	r3, r7
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f004 f867 	bl	8004d88 <DAC_Init>

	  /* Enable DAC Channel2 */
	  DAC_Cmd(DAC_Channel_1, ENABLE);
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	f04f 0101 	mov.w	r1, #1
 8000cc2:	f004 f8b5 	bl	8004e30 <DAC_Cmd>

	  /* Set DAC channel2 DHR12RD register */
	  DAC_SetChannel1Data(DAC_Align_12b_R, 0x2000);
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cce:	f004 f973 	bl	8004fb8 <DAC_SetChannel1Data>


}
 8000cd2:	f107 0718 	add.w	r7, r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop

08000cdc <TIM6_Config>:


void TIM6_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
  TIM_TimeBaseInitTypeDef    TIM_TimeBaseStructure;
  /* TIM6 Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000ce2:	f04f 0010 	mov.w	r0, #16
 8000ce6:	f04f 0101 	mov.w	r1, #1
 8000cea:	f009 f99f 	bl	800a02c <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8000cee:	f107 0304 	add.w	r3, r7, #4
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00c fa06 	bl	800d104 <TIM_TimeBaseStructInit>
  TIM_TimeBaseStructure.TIM_Period = 0x0F;
 8000cf8:	f04f 030f 	mov.w	r3, #15
 8000cfc:	60bb      	str	r3, [r7, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	80bb      	strh	r3, [r7, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	81bb      	strh	r3, [r7, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	80fb      	strh	r3, [r7, #6]
  TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 8000d10:	f107 0304 	add.w	r3, r7, #4
 8000d14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d18:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f00c f977 	bl	800d010 <TIM_TimeBaseInit>

  /* TIM6 TRGO selection */
  TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
 8000d22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d26:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000d2a:	f04f 0120 	mov.w	r1, #32
 8000d2e:	f00d fcf3 	bl	800e718 <TIM_SelectOutputTrigger>

  /* TIM6 enable counter */
  TIM_Cmd(TIM6, ENABLE);
 8000d32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d36:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000d3a:	f04f 0101 	mov.w	r1, #1
 8000d3e:	f00c fafd 	bl	800d33c <TIM_Cmd>
}
 8000d42:	f107 0710 	add.w	r7, r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop

08000d4c <ADC1_ChTempSensor_Init>:


void ADC1_ChTempSensor_Init(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b09a      	sub	sp, #104	; 0x68
 8000d50:	af00      	add	r7, sp, #0
	  DMA_InitTypeDef       DMA_InitStructure;

	  void ADC_DeInit(void);

	  /* Enable peripheral clocks *************************************************/
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8000d52:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000d56:	f04f 0101 	mov.w	r1, #1
 8000d5a:	f009 f8e3 	bl	8009f24 <RCC_AHB1PeriphClockCmd>
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000d5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d62:	f04f 0101 	mov.w	r1, #1
 8000d66:	f009 f98d 	bl	800a084 <RCC_APB2PeriphClockCmd>

	  /* DMA2_Stream0 channel0 configuration **************************************/
	  DMA_DeInit(DMA2_Stream0);
 8000d6a:	f246 4010 	movw	r0, #25616	; 0x6410
 8000d6e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d72:	f004 fd73 	bl	800585c <DMA_DeInit>
	  DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
	  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC1_DR_ADDRESS;
 8000d7c:	f242 034c 	movw	r3, #8268	; 0x204c
 8000d80:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d84:	60bb      	str	r3, [r7, #8]
	  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADCConvertedValue;
 8000d86:	f640 334c 	movw	r3, #2892	; 0xb4c
 8000d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d8e:	60fb      	str	r3, [r7, #12]
	  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
	  DMA_InitStructure.DMA_BufferSize = 1;
 8000d96:	f04f 0301 	mov.w	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
	  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
	  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
	  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dac:	623b      	str	r3, [r7, #32]
	  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
	  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
	  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
	  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8000dc6:	f04f 0301 	mov.w	r3, #1
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
	  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
	  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 8000dd8:	f107 0304 	add.w	r3, r7, #4
 8000ddc:	f246 4010 	movw	r0, #25616	; 0x6410
 8000de0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000de4:	4619      	mov	r1, r3
 8000de6:	f004 fe5b 	bl	8005aa0 <DMA_Init>
	  /* DMA2_Stream0 enable */
	  DMA_Cmd(DMA2_Stream0, ENABLE);
 8000dea:	f246 4010 	movw	r0, #25616	; 0x6410
 8000dee:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000df2:	f04f 0101 	mov.w	r1, #1
 8000df6:	f004 fef1 	bl	8005bdc <DMA_Cmd>

	  /* ADC Common Init **********************************************************/
	  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	643b      	str	r3, [r7, #64]	; 0x40
	  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	647b      	str	r3, [r7, #68]	; 0x44
	  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000e06:	f04f 0300 	mov.w	r3, #0
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
	  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
	  ADC_CommonInit(&ADC_CommonInitStructure);
 8000e12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fc80 	bl	800171c <ADC_CommonInit>

	  /* ADC1 Init ****************************************************************/
	  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	653b      	str	r3, [r7, #80]	; 0x50
	  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8000e2a:	f04f 0301 	mov.w	r3, #1
 8000e2e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	65bb      	str	r3, [r7, #88]	; 0x58
	  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	663b      	str	r3, [r7, #96]	; 0x60
	  ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000e3e:	f04f 0301 	mov.w	r3, #1
 8000e42:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	  ADC_Init(ADC1, &ADC_InitStructure);
 8000e46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e4e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e52:	4619      	mov	r1, r3
 8000e54:	f000 fbe0 	bl	8001618 <ADC_Init>

	  /* Enable ADC1 DMA */
	  ADC_DMACmd(ADC1, ENABLE);
 8000e58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e5c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e60:	f04f 0101 	mov.w	r1, #1
 8000e64:	f000 fef6 	bl	8001c54 <ADC_DMACmd>

	  /* ADC1 regular channel18 (VBAT) configuration ******************************/
	  ADC_RegularChannelConfig(ADC1, ADC_Channel_TempSensor, 1, ADC_SampleTime_15Cycles);
 8000e68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e6c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e70:	f04f 0110 	mov.w	r1, #16
 8000e74:	f04f 0201 	mov.w	r2, #1
 8000e78:	f04f 0301 	mov.w	r3, #1
 8000e7c:	f000 fd4c 	bl	8001918 <ADC_RegularChannelConfig>

	  /* Enable VBAT channel */
	  ADC_TempSensorVrefintCmd(ENABLE);
 8000e80:	f04f 0001 	mov.w	r0, #1
 8000e84:	f000 fcfc 	bl	8001880 <ADC_TempSensorVrefintCmd>

	  /* Enable DMA request after last transfer (Single-ADC mode) */
	  ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8000e88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e8c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000e90:	f04f 0101 	mov.w	r1, #1
 8000e94:	f000 fefa 	bl	8001c8c <ADC_DMARequestAfterLastTransferCmd>

	  /* Enable ADC1 **************************************************************/
	  ADC_Cmd(ADC1, ENABLE);
 8000e98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e9c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000ea0:	f04f 0101 	mov.w	r1, #1
 8000ea4:	f000 fc82 	bl	80017ac <ADC_Cmd>


}
 8000ea8:	f107 0768 	add.w	r7, r7, #104	; 0x68
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <STM_EVAL_LEDInit>:


void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	f644 3380 	movw	r3, #19328	; 0x4b80
 8000ec0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f04f 0101 	mov.w	r1, #1
 8000ece:	f009 f829 	bl	8009f24 <RCC_AHB1PeriphClockCmd>


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	f644 337c 	movw	r3, #19324	; 0x4b7c
 8000ed8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000edc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ee2:	f04f 0301 	mov.w	r3, #1
 8000ee6:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000eee:	f04f 0301 	mov.w	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ef4:	f04f 0302 	mov.w	r3, #2
 8000ef8:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	f240 0314 	movw	r3, #20
 8000f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f006 fdca 	bl	8007aa8 <GPIO_Init>
}
 8000f14:	f107 0710 	add.w	r7, r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	f240 0314 	movw	r3, #20
 8000f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f34:	79f9      	ldrb	r1, [r7, #7]
 8000f36:	f644 337c 	movw	r3, #19324	; 0x4b7c
 8000f3a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000f3e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f42:	8313      	strh	r3, [r2, #24]
}
 8000f44:	f107 070c 	add.w	r7, r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	f240 0314 	movw	r3, #20
 8000f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f68:	79f9      	ldrb	r1, [r7, #7]
 8000f6a:	f644 337c 	movw	r3, #19324	; 0x4b7c
 8000f6e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000f72:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f76:	8353      	strh	r3, [r2, #26]
}
 8000f78:	f107 070c 	add.w	r7, r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	f240 0314 	movw	r3, #20
 8000f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f9c:	79f9      	ldrb	r1, [r7, #7]
 8000f9e:	f240 0314 	movw	r3, #20
 8000fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4619      	mov	r1, r3
 8000fae:	79f8      	ldrb	r0, [r7, #7]
 8000fb0:	f644 337c 	movw	r3, #19324	; 0x4b7c
 8000fb4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000fb8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8000fbc:	404b      	eors	r3, r1
 8000fbe:	6153      	str	r3, [r2, #20]
}
 8000fc0:	f107 070c 	add.w	r7, r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <STM_EVAL_COMInit>:


void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	f644 3388 	movw	r3, #19336	; 0x4b88
 8000fde:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000fe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fe6:	79f9      	ldrb	r1, [r7, #7]
 8000fe8:	f644 338c 	movw	r3, #19340	; 0x4b8c
 8000fec:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f04f 0101 	mov.w	r1, #1
 8000ffc:	f008 ff92 	bl	8009f24 <RCC_AHB1PeriphClockCmd>

  if (COM == COM1)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10b      	bne.n	800101e <STM_EVAL_COMInit+0x52>
  {
    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	f644 3384 	movw	r3, #19332	; 0x4b84
 800100c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	4618      	mov	r0, r3
 8001016:	f04f 0101 	mov.w	r1, #1
 800101a:	f009 f807 	bl	800a02c <RCC_APB1PeriphClockCmd>
  }

  /* Connect PXx to USARTx_Tx*/
  GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	f240 031c 	movw	r3, #28
 8001024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	f644 3398 	movw	r3, #19352	; 0x4b98
 8001032:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001036:	5c9b      	ldrb	r3, [r3, r2]
 8001038:	461a      	mov	r2, r3
 800103a:	79f8      	ldrb	r0, [r7, #7]
 800103c:	f644 33a0 	movw	r3, #19360	; 0x4ba0
 8001040:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001044:	5c1b      	ldrb	r3, [r3, r0]
 8001046:	4608      	mov	r0, r1
 8001048:	4611      	mov	r1, r2
 800104a:	461a      	mov	r2, r3
 800104c:	f006 fec2 	bl	8007dd4 <GPIO_PinAFConfig>

  /* Connect PXx to USARTx_Rx*/
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	f240 0320 	movw	r3, #32
 8001056:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800105a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	f644 339c 	movw	r3, #19356	; 0x4b9c
 8001064:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001068:	5c9b      	ldrb	r3, [r3, r2]
 800106a:	461a      	mov	r2, r3
 800106c:	79f8      	ldrb	r0, [r7, #7]
 800106e:	f644 33a4 	movw	r3, #19364	; 0x4ba4
 8001072:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001076:	5c1b      	ldrb	r3, [r3, r0]
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	f006 fea9 	bl	8007dd4 <GPIO_PinAFConfig>

  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001088:	f04f 0301 	mov.w	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800108e:	f04f 0302 	mov.w	r3, #2
 8001092:	733b      	strb	r3, [r7, #12]

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	f644 3390 	movw	r3, #19344	; 0x4b90
 800109a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800109e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80010a4:	f04f 0302 	mov.w	r3, #2
 80010a8:	737b      	strb	r3, [r7, #13]
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	f240 031c 	movw	r3, #28
 80010b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f006 fcf2 	bl	8007aa8 <GPIO_Init>

  /* Configure USART Rx as alternate function  */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80010c4:	f04f 0302 	mov.w	r3, #2
 80010c8:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	f644 3394 	movw	r3, #19348	; 0x4b94
 80010d0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80010d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	f240 0320 	movw	r3, #32
 80010e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f006 fcda 	bl	8007aa8 <GPIO_Init>

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	f240 0318 	movw	r3, #24
 80010fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	4618      	mov	r0, r3
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	f00d fda1 	bl	800ec4c <USART_Init>
    
  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	f240 0318 	movw	r3, #24
 8001110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	4618      	mov	r0, r3
 800111a:	f04f 0101 	mov.w	r1, #1
 800111e:	f00d fed1 	bl	800eec4 <USART_Cmd>
}
 8001122:	f107 0710 	add.w	r7, r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop

0800112c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
}
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800113c:	e7fe      	b.n	800113c <HardFault_Handler+0x4>
 800113e:	bf00      	nop

08001140 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>
 8001146:	bf00      	nop

08001148 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800114c:	e7fe      	b.n	800114c <BusFault_Handler+0x4>
 800114e:	bf00      	nop

08001150 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>
 8001156:	bf00      	nop

08001158 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
}
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
}
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
}
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8001180:	f7ff f9a6 	bl	80004d0 <TimingDelay_Decrement>
}
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop

08001188 <USART3_IRQHandler>:
  * @brief  This function handles USARTx global interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHANDLER(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
	  volatile unsigned int IIR;
	  struct buf_st *p;

	    IIR = USART3->SR;
 800118e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001192:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	603b      	str	r3, [r7, #0]
	    if (IIR & USART_FLAG_RXNE) {                  // read interrupt
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d02e      	beq.n	8001204 <USART3_IRQHandler+0x7c>
	      USART3->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
 80011a6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80011aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80011ae:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80011b2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f022 0220 	bic.w	r2, r2, #32
 80011be:	b292      	uxth	r2, r2
 80011c0:	801a      	strh	r2, [r3, #0]

	      p = &rbuf;
 80011c2:	f640 03fc 	movw	r3, #2300	; 0x8fc
 80011c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011ca:	607b      	str	r3, [r7, #4]

	      if (((p->in - p->out) & ~(RBUF_SIZE-1)) == 0) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d112      	bne.n	8001204 <USART3_IRQHandler+0x7c>
	        p->buf [p->in & (RBUF_SIZE-1)] = (USART3->DR & 0x1FF);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b2d9      	uxtb	r1, r3
 80011e4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80011e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	185b      	adds	r3, r3, r1
 80011f6:	721a      	strb	r2, [r3, #8]
	        p->in++;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f103 0201 	add.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	601a      	str	r2, [r3, #0]
	      }
	    }

	    if (IIR & USART_FLAG_TXE) {
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	2b00      	cmp	r3, #0
 800120c:	d046      	beq.n	800129c <USART3_IRQHandler+0x114>
	      USART3->SR &= ~USART_FLAG_TXE;	          // clear interrupt
 800120e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001212:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001216:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800121a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800121e:	8812      	ldrh	r2, [r2, #0]
 8001220:	b292      	uxth	r2, r2
 8001222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001226:	b292      	uxth	r2, r2
 8001228:	801a      	strh	r2, [r3, #0]

	      p = &tbuf;
 800122a:	f640 2304 	movw	r3, #2564	; 0xa04
 800122e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001232:	607b      	str	r3, [r7, #4]

	      if (p->in != p->out) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	d018      	beq.n	8001272 <USART3_IRQHandler+0xea>
	        USART3->DR = (p->buf [p->out & (TBUF_SIZE-1)] & 0x1FF);
 8001240:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001244:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6852      	ldr	r2, [r2, #4]
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	188a      	adds	r2, r1, r2
 8001252:	7a12      	ldrb	r2, [r2, #8]
 8001254:	809a      	strh	r2, [r3, #4]
	        p->out++;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f103 0201 	add.w	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	605a      	str	r2, [r3, #4]
	        tx_restart = 0;
 8001262:	f240 0324 	movw	r3, #36	; 0x24
 8001266:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e014      	b.n	800129c <USART3_IRQHandler+0x114>
	      }
	      else {
	        tx_restart = 1;
 8001272:	f240 0324 	movw	r3, #36	; 0x24
 8001276:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800127a:	f04f 0201 	mov.w	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
			USART3->CR1 &= ~USART_FLAG_TXE;		      // disable TX interrupt if nothing to send
 8001280:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001284:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001288:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800128c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001290:	8992      	ldrh	r2, [r2, #12]
 8001292:	b292      	uxth	r2, r2
 8001294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001298:	b292      	uxth	r2, r2
 800129a:	819a      	strh	r2, [r3, #12]

	      }
	    }
}
 800129c:	f107 070c 	add.w	r7, r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <USART3_buffer_Init>:

/*------------------------------------------------------------------------------
  buffer_Init
  initialize the buffers
 *------------------------------------------------------------------------------*/
void USART3_buffer_Init (void) {
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  tbuf.in = 0;                                    // Clear com buffer indexes
 80012ac:	f640 2304 	movw	r3, #2564	; 0xa04
 80012b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
  tbuf.out = 0;
 80012ba:	f640 2304 	movw	r3, #2564	; 0xa04
 80012be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  tx_restart = 1;
 80012c8:	f240 0324 	movw	r3, #36	; 0x24
 80012cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012d0:	f04f 0201 	mov.w	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

  rbuf.in = 0;
 80012d6:	f640 03fc 	movw	r3, #2300	; 0x8fc
 80012da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
  rbuf.out = 0;
 80012e4:	f640 03fc 	movw	r3, #2300	; 0x8fc
 80012e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
}
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <USART3_SendChar>:

/*------------------------------------------------------------------------------
  SenChar
  transmit a character
 *------------------------------------------------------------------------------*/
int USART3_SendChar (int c) {
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  struct buf_st *p = &tbuf;
 8001300:	f640 2304 	movw	r3, #2564	; 0xa04
 8001304:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001308:	60fb      	str	r3, [r7, #12]

                                                  // If the buffer is full, return an error value
  if (SIO_TBUFLEN >= TBUF_SIZE)
 800130a:	f640 2304 	movw	r3, #2564	; 0xa04
 800130e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29a      	uxth	r2, r3
 8001316:	f640 2304 	movw	r3, #2564	; 0xa04
 800131a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	b29b      	uxth	r3, r3
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	2bff      	cmp	r3, #255	; 0xff
 8001328:	d902      	bls.n	8001330 <USART3_SendChar+0x38>
    return (-1);
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e02b      	b.n	8001388 <USART3_SendChar+0x90>

  p->buf [p->in & (TBUF_SIZE - 1)] = c;           // Add data to the transmit buffer.
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	68f9      	ldr	r1, [r7, #12]
 800133c:	18cb      	adds	r3, r1, r3
 800133e:	721a      	strb	r2, [r3, #8]
  p->in++;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f103 0201 	add.w	r2, r3, #1
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	601a      	str	r2, [r3, #0]

  if (tx_restart) {                               // If transmit interrupt is disabled, enable it
 800134c:	f240 0324 	movw	r3, #36	; 0x24
 8001350:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d014      	beq.n	8001384 <USART3_SendChar+0x8c>
    tx_restart = 0;
 800135a:	f240 0324 	movw	r3, #36	; 0x24
 800135e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
	USART3->CR1 |= USART_FLAG_TXE;		          // enable TX interrupt
 8001368:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800136c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001370:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8001374:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001378:	8992      	ldrh	r2, [r2, #12]
 800137a:	b292      	uxth	r2, r2
 800137c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001380:	b292      	uxth	r2, r2
 8001382:	819a      	strh	r2, [r3, #12]
  }

  return (0);
 8001384:	f04f 0300 	mov.w	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	f107 0714 	add.w	r7, r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <USART3_GetKey>:

/*------------------------------------------------------------------------------
  GetKey
  receive a character
 *------------------------------------------------------------------------------*/
int USART3_GetKey (void) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  struct buf_st *p = &rbuf;
 800139a:	f640 03fc 	movw	r3, #2300	; 0x8fc
 800139e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013a2:	607b      	str	r3, [r7, #4]

  if (SIO_RBUFLEN == 0)
 80013a4:	f640 03fc 	movw	r3, #2300	; 0x8fc
 80013a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f640 03fc 	movw	r3, #2300	; 0x8fc
 80013b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	429a      	cmp	r2, r3
 80013be:	d102      	bne.n	80013c6 <USART3_GetKey+0x32>
    return (-1);
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	e009      	b.n	80013da <USART3_GetKey+0x46>

  return (p->buf [(p->out++) & (RBUF_SIZE - 1)]);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	b2d3      	uxtb	r3, r2
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	18cb      	adds	r3, r1, r3
 80013d0:	7a1b      	ldrb	r3, [r3, #8]
 80013d2:	f102 0101 	add.w	r1, r2, #1
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6051      	str	r1, [r2, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	f107 070c 	add.w	r7, r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <USART3_SendString>:




void USART3_SendString(char *mass,int size) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]

	while (size > 0) {
 80013f2:	e00c      	b.n	800140e <USART3_SendString+0x26>
		USART3_SendChar((int )*mass++);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	f102 0201 	add.w	r2, r2, #1
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff79 	bl	80012f8 <USART3_SendChar>
	size--;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f103 33ff 	add.w	r3, r3, #4294967295
 800140c:	603b      	str	r3, [r7, #0]



void USART3_SendString(char *mass,int size) {

	while (size > 0) {
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	dcef      	bgt.n	80013f4 <USART3_SendString+0xc>
		USART3_SendChar((int )*mass++);
	size--;
	}
}
 8001414:	f107 0708 	add.w	r7, r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001424:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001428:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8001432:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001436:	60da      	str	r2, [r3, #12]
}
 8001438:	f107 070c 	add.w	r7, r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	73bb      	strb	r3, [r7, #14]
 8001458:	f04f 030f 	mov.w	r3, #15
 800145c:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	78db      	ldrb	r3, [r3, #3]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d045      	beq.n	80014f2 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001466:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800146a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	ea6f 0303 	mvn.w	r3, r3
 8001474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001478:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800147c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	f1c3 0304 	rsb	r3, r3, #4
 8001484:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001486:	7b7a      	ldrb	r2, [r7, #13]
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	fa42 f303 	asr.w	r3, r2, r3
 800148e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	461a      	mov	r2, r3
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	789a      	ldrb	r2, [r3, #2]
 80014a2:	7b7b      	ldrb	r3, [r7, #13]
 80014a4:	4013      	ands	r3, r2
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80014b4:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80014b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80014ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	189b      	adds	r3, r3, r2
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014ca:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80014ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80014da:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	7809      	ldrb	r1, [r1, #0]
 80014e0:	f001 011f 	and.w	r1, r1, #31
 80014e4:	f04f 0001 	mov.w	r0, #1
 80014e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80014f0:	e014      	b.n	800151c <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80014f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	7812      	ldrb	r2, [r2, #0]
 80014fe:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001502:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	7809      	ldrb	r1, [r1, #0]
 8001508:	f001 011f 	and.w	r1, r1, #31
 800150c:	f04f 0001 	mov.w	r0, #1
 8001510:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001514:	f102 0220 	add.w	r2, r2, #32
 8001518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800151c:	f107 0714 	add.w	r7, r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001532:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001536:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8001540:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
}
 800154a:	f107 070c 	add.w	r7, r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	71fa      	strb	r2, [r7, #7]
 8001560:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001562:	79bb      	ldrb	r3, [r7, #6]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00d      	beq.n	8001584 <NVIC_SystemLPConfig+0x30>
  {
    SCB->SCR |= LowPowerMode;
 8001568:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800156c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001570:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001574:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001578:	6912      	ldr	r2, [r2, #16]
 800157a:	4611      	mov	r1, r2
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	430a      	orrs	r2, r1
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	e00e      	b.n	80015a2 <NVIC_SystemLPConfig+0x4e>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001584:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001588:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800158c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001590:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001594:	6912      	ldr	r2, [r2, #16]
 8001596:	4611      	mov	r1, r2
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	ea6f 0202 	mvn.w	r2, r2
 800159e:	400a      	ands	r2, r1
 80015a0:	611a      	str	r2, [r3, #16]
  }
}
 80015a2:	f107 070c 	add.w	r7, r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d10c      	bne.n	80015d4 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80015ba:	f24e 0310 	movw	r3, #57360	; 0xe010
 80015be:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80015c2:	f24e 0210 	movw	r2, #57360	; 0xe010
 80015c6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	f042 0204 	orr.w	r2, r2, #4
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e00b      	b.n	80015ec <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80015d4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80015d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80015dc:	f24e 0210 	movw	r2, #57360	; 0xe010
 80015e0:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	f022 0204 	bic.w	r2, r2, #4
 80015ea:	601a      	str	r2, [r3, #0]
  }
}
 80015ec:	f107 070c 	add.w	r7, r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80015fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001600:	f04f 0101 	mov.w	r1, #1
 8001604:	f008 fe1a 	bl	800a23c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8001608:	f44f 7080 	mov.w	r0, #256	; 0x100
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	f008 fe14 	bl	800a23c <RCC_APB2PeriphResetCmd>
}
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop

08001618 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800163a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800163e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	791b      	ldrb	r3, [r3, #4]
 8001644:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800164c:	4313      	orrs	r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 8001666:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 800166a:	4013      	ands	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001676:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800167c:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	795b      	ldrb	r3, [r3, #5]
 8001682:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001686:	4313      	orrs	r3, r2
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80016a0:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	7d1b      	ldrb	r3, [r3, #20]
 80016a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016c4:	f107 0714 	add.w	r7, r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f04f 0201 	mov.w	r2, #1
 800170e:	751a      	strb	r2, [r3, #20]
}
 8001710:	f107 070c 	add.w	r7, r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop

0800171c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800172a:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800172e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800173c:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800174c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001752:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001758:	4313      	orrs	r3, r2
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8001760:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001764:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	605a      	str	r2, [r3, #4]
}
 800176c:	f107 0714 	add.w	r7, r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
}
 80017a0:	f107 070c 	add.w	r7, r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	e005      	b.n	80017d8 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 0201 	bic.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
  }
}
 80017d8:	f107 070c 	add.w	r7, r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop

080017e4 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001804:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
}
 8001814:	f107 0714 	add.w	r7, r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop

08001820 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	460a      	mov	r2, r1
 800182c:	807a      	strh	r2, [r7, #2]
 800182e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8001830:	887a      	ldrh	r2, [r7, #2]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8001836:	883a      	ldrh	r2, [r7, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800183c:	f107 070c 	add.w	r7, r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f023 031f 	bic.w	r3, r3, #31
 8001866:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	605a      	str	r2, [r3, #4]
}
 8001876:	f107 0714 	add.w	r7, r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00c      	beq.n	80018aa <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8001890:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001894:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001898:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800189c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80018a0:	6852      	ldr	r2, [r2, #4]
 80018a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	e00b      	b.n	80018c2 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80018aa:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80018ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018b2:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80018b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80018ba:	6852      	ldr	r2, [r2, #4]
 80018bc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80018c0:	605a      	str	r2, [r3, #4]
  }
}
 80018c2:	f107 070c 	add.w	r7, r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <ADC_VBATCmd+0x2a>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80018dc:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80018e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018e4:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80018e8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80018ec:	6852      	ldr	r2, [r2, #4]
 80018ee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	e00b      	b.n	800190e <ADC_VBATCmd+0x42>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80018f6:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80018fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018fe:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8001902:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001906:	6852      	ldr	r2, [r2, #4]
 8001908:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800190c:	605a      	str	r2, [r3, #4]
  }
}
 800190e:	f107 070c 	add.w	r7, r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	70f9      	strb	r1, [r7, #3]
 8001922:	70ba      	strb	r2, [r7, #2]
 8001924:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d927      	bls.n	8001988 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	4613      	mov	r3, r2
 8001942:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001946:	189b      	adds	r3, r3, r2
 8001948:	f1a3 031e 	sub.w	r3, r3, #30
 800194c:	f04f 0207 	mov.w	r2, #7
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	ea6f 0303 	mvn.w	r3, r3
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001962:	7879      	ldrb	r1, [r7, #1]
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	4613      	mov	r3, r2
 8001968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800196c:	189b      	adds	r3, r3, r2
 800196e:	f1a3 031e 	sub.w	r3, r3, #30
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	e022      	b.n	80019ce <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	4613      	mov	r3, r2
 8001992:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001996:	189b      	adds	r3, r3, r2
 8001998:	f04f 0207 	mov.w	r2, #7
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	ea6f 0303 	mvn.w	r3, r3
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80019ae:	7879      	ldrb	r1, [r7, #1]
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	4613      	mov	r3, r2
 80019b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80019b8:	189b      	adds	r3, r3, r2
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80019ce:	78bb      	ldrb	r3, [r7, #2]
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d827      	bhi.n	8001a24 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80019da:	78bb      	ldrb	r3, [r7, #2]
 80019dc:	f103 32ff 	add.w	r2, r3, #4294967295
 80019e0:	4613      	mov	r3, r2
 80019e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	f04f 021f 	mov.w	r2, #31
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	ea6f 0303 	mvn.w	r3, r3
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80019fe:	78f9      	ldrb	r1, [r7, #3]
 8001a00:	78bb      	ldrb	r3, [r7, #2]
 8001a02:	f103 32ff 	add.w	r2, r3, #4294967295
 8001a06:	4613      	mov	r3, r2
 8001a08:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a0c:	189b      	adds	r3, r3, r2
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
 8001a22:	e051      	b.n	8001ac8 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8001a24:	78bb      	ldrb	r3, [r7, #2]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d827      	bhi.n	8001a7a <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8001a30:	78ba      	ldrb	r2, [r7, #2]
 8001a32:	4613      	mov	r3, r2
 8001a34:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a38:	189b      	adds	r3, r3, r2
 8001a3a:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8001a3e:	f04f 021f 	mov.w	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	ea6f 0303 	mvn.w	r3, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001a54:	78f9      	ldrb	r1, [r7, #3]
 8001a56:	78ba      	ldrb	r2, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a5e:	189b      	adds	r3, r3, r2
 8001a60:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
 8001a78:	e026      	b.n	8001ac8 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8001a80:	78ba      	ldrb	r2, [r7, #2]
 8001a82:	4613      	mov	r3, r2
 8001a84:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a88:	189b      	adds	r3, r3, r2
 8001a8a:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8001a8e:	f04f 021f 	mov.w	r2, #31
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	ea6f 0303 	mvn.w	r3, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001aa4:	78f9      	ldrb	r1, [r7, #3]
 8001aa6:	78ba      	ldrb	r2, [r7, #2]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001aae:	189b      	adds	r3, r3, r2
 8001ab0:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8001ac8:	f107 0714 	add.w	r7, r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop

08001ad4 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
}
 8001ae8:	f107 070c 	add.w	r7, r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop

08001af4 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8001b0e:	f04f 0301 	mov.w	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e002      	b.n	8001b1c <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f107 0714 	add.w	r7, r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	e005      	b.n	8001b58 <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
  }
}
 8001b58:	f107 070c 	add.w	r7, r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	e005      	b.n	8001b90 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 0202 	bic.w	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
  }
}
 8001b90:	f107 070c 	add.w	r7, r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop

08001b9c <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001bc0:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f103 33ff 	add.w	r3, r3, #4294967295
 8001bc8:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	ea4f 3343 	mov.w	r3, r3, lsl #13
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
}
 8001bdc:	f107 0714 	add.w	r7, r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	e005      	b.n	8001c14 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	605a      	str	r2, [r3, #4]
  }
}
 8001c14:	f107 070c 	add.w	r7, r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2c:	b29b      	uxth	r3, r3
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f107 070c 	add.w	r7, r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop

08001c3c <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8001c40:	f242 3308 	movw	r3, #8968	; 0x2308
 8001c44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c48:	681b      	ldr	r3, [r3, #0]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop

08001c54 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e005      	b.n	8001c80 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
  }
}
 8001c80:	f107 070c 	add.w	r7, r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop

08001c8c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	e005      	b.n	8001cb8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
  }
}
 8001cb8:	f107 070c 	add.w	r7, r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop

08001cc4 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8001cd4:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001cd8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001cdc:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8001ce0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001ce4:	6852      	ldr	r2, [r2, #4]
 8001ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	e00b      	b.n	8001d06 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x42>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8001cee:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001cf2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001cf6:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8001cfa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001cfe:	6852      	ldr	r2, [r2, #4]
 8001d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d04:	605a      	str	r2, [r3, #4]
  }
}
 8001d06:	f107 070c 	add.w	r7, r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	70f9      	strb	r1, [r7, #3]
 8001d1a:	70ba      	strb	r2, [r7, #2]
 8001d1c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	d927      	bls.n	8001d86 <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001d44:	189b      	adds	r3, r3, r2
 8001d46:	f1a3 031e 	sub.w	r3, r3, #30
 8001d4a:	f04f 0207 	mov.w	r2, #7
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	ea6f 0303 	mvn.w	r3, r3
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8001d60:	7879      	ldrb	r1, [r7, #1]
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	4613      	mov	r3, r2
 8001d66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	f1a3 031e 	sub.w	r3, r3, #30
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	e022      	b.n	8001dcc <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001d94:	189b      	adds	r3, r3, r2
 8001d96:	f04f 0207 	mov.w	r2, #7
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	ea6f 0303 	mvn.w	r3, r3
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001dac:	7879      	ldrb	r1, [r7, #1]
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	4613      	mov	r3, r2
 8001db2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001db6:	189b      	adds	r3, r3, r2
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001dd8:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8001ddc:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	ea6f 0303 	mvn.w	r3, r3
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	78bb      	ldrb	r3, [r7, #2]
 8001dea:	18d3      	adds	r3, r2, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f103 0303 	add.w	r3, r3, #3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4613      	mov	r3, r2
 8001df8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001dfc:	189b      	adds	r3, r3, r2
 8001dfe:	f04f 021f 	mov.w	r2, #31
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	ea6f 0303 	mvn.w	r3, r3
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4013      	ands	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001e14:	78f9      	ldrb	r1, [r7, #3]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	ea6f 0303 	mvn.w	r3, r3
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f103 0303 	add.w	r3, r3, #3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4613      	mov	r3, r2
 8001e30:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e34:	189b      	adds	r3, r3, r2
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e4a:	f107 071c 	add.w	r7, r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001e78:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001e80:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e94:	f107 0714 	add.w	r7, r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	460a      	mov	r2, r1
 8001eac:	70fa      	strb	r2, [r7, #3]
 8001eae:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	18d3      	adds	r3, r2, r3
 8001ec0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	883a      	ldrh	r2, [r7, #0]
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	f107 0714 	add.w	r7, r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001ef0:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	609a      	str	r2, [r3, #8]
}
 8001f00:	f107 0714 	add.w	r7, r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop

08001f0c <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f28:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	609a      	str	r2, [r3, #8]
}
 8001f38:	f107 0714 	add.w	r7, r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
}
 8001f58:	f107 070c 	add.w	r7, r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop

08001f64 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8001f7e:	f04f 0301 	mov.w	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e002      	b.n	8001f8c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f107 0714 	add.w	r7, r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	e005      	b.n	8001fc8 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	605a      	str	r2, [r3, #4]
  }
}
 8001fc8:	f107 070c 	add.w	r7, r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	e005      	b.n	8002000 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	605a      	str	r2, [r3, #4]
  }
}
 8002000:	f107 070c 	add.w	r7, r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	18d3      	adds	r3, r2, r3
 8002028:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800202c:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	f107 0714 	add.w	r7, r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	460a      	mov	r2, r1
 800204c:	807a      	strh	r2, [r7, #2]
 800204e:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f04f 0201 	mov.w	r2, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <ADC_ITConfig+0x3e>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	e008      	b.n	8002090 <ADC_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	ea6f 0303 	mvn.w	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	605a      	str	r2, [r3, #4]
  }
}
 8002090:	f107 0714 	add.w	r7, r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop

0800209c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80020bc:	f04f 0301 	mov.w	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e002      	b.n	80020ca <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	f107 0714 	add.w	r7, r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	ea6f 0203 	mvn.w	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	f107 070c 	add.w	r7, r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800211c:	b29b      	uxth	r3, r3
 800211e:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	461a      	mov	r2, r3
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f04f 0101 	mov.w	r1, #1
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	4013      	ands	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <ADC_GetITStatus+0x5a>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <ADC_GetITStatus+0x5a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 800214a:	f04f 0301 	mov.w	r3, #1
 800214e:	75fb      	strb	r3, [r7, #23]
 8002150:	e002      	b.n	8002158 <ADC_GetITStatus+0x60>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8002158:	7dfb      	ldrb	r3, [r7, #23]
}
 800215a:	4618      	mov	r0, r3
 800215c:	f107 071c 	add.w	r7, r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop

08002168 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	ea6f 0203 	mvn.w	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
}                    
 800218e:	f107 0714 	add.w	r7, r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80021a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10c      	bne.n	80021c8 <CAN_DeInit+0x30>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 80021ae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80021b2:	f04f 0101 	mov.w	r1, #1
 80021b6:	f008 f815 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80021ba:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	f008 f80f 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 80021c6:	e00b      	b.n	80021e0 <CAN_DeInit+0x48>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80021c8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80021cc:	f04f 0101 	mov.w	r1, #1
 80021d0:	f008 f808 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80021d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	f008 f802 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
  }
}
 80021e0:	f107 0708 	add.w	r7, r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0202 	bic.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002216:	e003      	b.n	8002220 <CAN_Init+0x38>
  {
    wait_ack++;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f103 0301 	add.w	r3, r3, #1
 800221e:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <CAN_Init+0x4e>
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002232:	429a      	cmp	r2, r3
 8002234:	d1f0      	bne.n	8002218 <CAN_Init+0x30>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	e0a7      	b.n	800239a <CAN_Init+0x1b2>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	799b      	ldrb	r3, [r3, #6]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d106      	bne.n	8002260 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e005      	b.n	800226c <CAN_Init+0x84>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	79db      	ldrb	r3, [r3, #7]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d106      	bne.n	8002282 <CAN_Init+0x9a>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e005      	b.n	800228e <CAN_Init+0xa6>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	7a1b      	ldrb	r3, [r3, #8]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d106      	bne.n	80022a4 <CAN_Init+0xbc>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e005      	b.n	80022b0 <CAN_Init+0xc8>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 0220 	bic.w	r2, r3, #32
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	7a5b      	ldrb	r3, [r3, #9]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d106      	bne.n	80022c6 <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_NART;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f043 0210 	orr.w	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e005      	b.n	80022d2 <CAN_Init+0xea>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0210 	bic.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	7a9b      	ldrb	r3, [r3, #10]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d106      	bne.n	80022e8 <CAN_Init+0x100>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f043 0208 	orr.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e005      	b.n	80022f4 <CAN_Init+0x10c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 0208 	bic.w	r2, r3, #8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	7adb      	ldrb	r3, [r3, #11]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d106      	bne.n	800230a <CAN_Init+0x122>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f043 0204 	orr.w	r2, r3, #4
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e005      	b.n	8002316 <CAN_Init+0x12e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 0204 	bic.w	r2, r3, #4
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	789b      	ldrb	r3, [r3, #2]
 800231a:	ea4f 7283 	mov.w	r2, r3, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	78db      	ldrb	r3, [r3, #3]
 8002322:	ea4f 6303 	mov.w	r3, r3, lsl #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002326:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	ea4f 4303 	mov.w	r3, r3, lsl #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8002330:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	795b      	ldrb	r3, [r3, #5]
 8002336:	ea4f 5303 	mov.w	r3, r3, lsl #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800233a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	f103 33ff 	add.w	r3, r3, #4294967295

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8002344:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0201 	bic.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800235c:	e003      	b.n	8002366 <CAN_Init+0x17e>
   {
     wait_ack++;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f103 0301 	add.w	r3, r3, #1
 8002364:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <CAN_Init+0x196>
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237a:	429a      	cmp	r2, r3
 800237c:	d1ef      	bne.n	800235e <CAN_Init+0x176>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <CAN_Init+0x1ac>
    {
      InitStatus = CAN_InitStatus_Failed;
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e002      	b.n	800239a <CAN_Init+0x1b2>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8002394:	f04f 0301 	mov.w	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	f107 0714 	add.w	r7, r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7a9b      	ldrb	r3, [r3, #10]
 80023ba:	f04f 0201 	mov.w	r2, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80023c4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80023c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023cc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80023d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80023d4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80023e0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80023e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023e8:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80023ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80023f0:	f8d2 221c 	ldr.w	r2, [r2, #540]	; 0x21c
 80023f4:	4611      	mov	r1, r2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	ea6f 0202 	mvn.w	r2, r2
 80023fc:	400a      	ands	r2, r1
 80023fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7b1b      	ldrb	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d134      	bne.n	8002474 <CAN_FilterInit+0xcc>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 800240a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800240e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002412:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002416:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800241a:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 800241e:	4611      	mov	r1, r2
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	ea6f 0202 	mvn.w	r2, r2
 8002426:	400a      	ands	r2, r1
 8002428:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800242c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002430:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	88c9      	ldrh	r1, [r1, #6]
 800243c:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8002444:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002446:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800244a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800244e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002452:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	8889      	ldrh	r1, [r1, #4]
 800245e:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002466:	4301      	orrs	r1, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002468:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800246c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002470:	18d3      	adds	r3, r2, r3
 8002472:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7b1b      	ldrb	r3, [r3, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d132      	bne.n	80024e2 <CAN_FilterInit+0x13a>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800247c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002480:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002484:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002488:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800248c:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8002490:	4611      	mov	r1, r2
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	430a      	orrs	r2, r1
 8002496:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800249a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800249e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	8809      	ldrh	r1, [r1, #0]
 80024aa:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80024b2:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80024b4:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80024b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80024bc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80024c0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	8889      	ldrh	r1, [r1, #4]
 80024cc:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80024d4:	4301      	orrs	r1, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80024d6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80024da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80024de:	18d3      	adds	r3, r2, r3
 80024e0:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7adb      	ldrb	r3, [r3, #11]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d111      	bne.n	800250e <CAN_FilterInit+0x166>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80024ea:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80024ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024f2:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80024f6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80024fa:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80024fe:	4611      	mov	r1, r2
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	ea6f 0202 	mvn.w	r2, r2
 8002506:	400a      	ands	r2, r1
 8002508:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800250c:	e00e      	b.n	800252c <CAN_FilterInit+0x184>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 800250e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002512:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002516:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800251a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800251e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002522:	4611      	mov	r1, r2
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	430a      	orrs	r2, r1
 8002528:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	891b      	ldrh	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d110      	bne.n	8002556 <CAN_FilterInit+0x1ae>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8002534:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002538:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800253c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002540:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002544:	f8d2 2214 	ldr.w	r2, [r2, #532]	; 0x214
 8002548:	4611      	mov	r1, r2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	ea6f 0202 	mvn.w	r2, r2
 8002550:	400a      	ands	r2, r1
 8002552:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	891b      	ldrh	r3, [r3, #8]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10e      	bne.n	800257c <CAN_FilterInit+0x1d4>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800255e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002562:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002566:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800256a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800256e:	f8d2 2214 	ldr.w	r2, [r2, #532]	; 0x214
 8002572:	4611      	mov	r1, r2
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	430a      	orrs	r2, r1
 8002578:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7b5b      	ldrb	r3, [r3, #13]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d10e      	bne.n	80025a2 <CAN_FilterInit+0x1fa>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8002584:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002588:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800258c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002590:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002594:	f8d2 221c 	ldr.w	r2, [r2, #540]	; 0x21c
 8002598:	4611      	mov	r1, r2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	430a      	orrs	r2, r1
 800259e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80025a2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80025a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80025aa:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80025ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80025b2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80025be:	f107 0714 	add.w	r7, r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f04f 0203 	mov.w	r2, #3
 8002616:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f04f 0202 	mov.w	r2, #2
 800261e:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f04f 0201 	mov.w	r2, #1
 8002626:	801a      	strh	r2, [r3, #0]
}
 8002628:	f107 070c 	add.w	r7, r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop

08002634 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800263e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002642:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002646:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800264a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800264e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 800265a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800265e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002662:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002666:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800266a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800266e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002672:	f022 020e 	bic.w	r2, r2, #14
 8002676:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 800267a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800267e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002682:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002686:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800268a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800268e:	4611      	mov	r1, r2
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002696:	430a      	orrs	r2, r1
 8002698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800269c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80026a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80026a4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80026a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80026ac:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80026b8:	f107 070c 	add.w	r7, r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop

080026c4 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e005      	b.n	80026f0 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	601a      	str	r2, [r3, #0]
  }
}
 80026f0:	f107 070c 	add.w	r7, r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01e      	beq.n	800274c <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002720:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8002730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800274a:	e01d      	b.n	8002788 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800275e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800276e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800277e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8002788:	f107 070c 	add.w	r7, r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop

08002794 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <CAN_Transmit+0x24>
  {
    transmit_mailbox = 0;
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e016      	b.n	80027e6 <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <CAN_Transmit+0x38>
  {
    transmit_mailbox = 1;
 80027c4:	f04f 0301 	mov.w	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e00c      	b.n	80027e6 <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <CAN_Transmit+0x4c>
  {
    transmit_mailbox = 2;
 80027d8:	f04f 0302 	mov.w	r3, #2
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e002      	b.n	80027e6 <CAN_Transmit+0x52>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 80027e0:	f04f 0304 	mov.w	r3, #4
 80027e4:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	f000 80bd 	beq.w	8002968 <CAN_Transmit+0x1d4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	f102 0218 	add.w	r2, r2, #24
 80027f8:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80027fc:	188a      	adds	r2, r1, r2
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	f002 0201 	and.w	r2, r2, #1
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	f103 0318 	add.w	r3, r3, #24
 800280a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800280e:	18cb      	adds	r3, r1, r3
 8002810:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	7a1b      	ldrb	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d119      	bne.n	800284e <CAN_Transmit+0xba>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	f102 0218 	add.w	r2, r2, #24
 8002824:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002828:	188a      	adds	r2, r1, r2
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	4611      	mov	r1, r2
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	ea4f 5042 	mov.w	r0, r2, lsl #21
                                                  TxMessage->RTR);
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800283a:	4302      	orrs	r2, r0
 800283c:	430a      	orrs	r2, r1
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	f103 0318 	add.w	r3, r3, #24
 8002844:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002848:	18cb      	adds	r3, r1, r3
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e01b      	b.n	8002886 <CAN_Transmit+0xf2>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f102 0218 	add.w	r2, r2, #24
 8002858:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800285c:	188a      	adds	r2, r1, r2
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	4611      	mov	r1, r2
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6852      	ldr	r2, [r2, #4]
 8002866:	ea4f 00c2 	mov.w	r0, r2, lsl #3
                                                  TxMessage->IDE | \
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800286e:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 8002874:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8002876:	430a      	orrs	r2, r1
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	f103 0318 	add.w	r3, r3, #24
 800287e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002882:	18cb      	adds	r3, r1, r3
 8002884:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	7a9b      	ldrb	r3, [r3, #10]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	b2da      	uxtb	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	f102 0218 	add.w	r2, r2, #24
 800289e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80028a2:	188a      	adds	r2, r1, r2
 80028a4:	6852      	ldr	r2, [r2, #4]
 80028a6:	f022 020f 	bic.w	r2, r2, #15
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	f103 0318 	add.w	r3, r3, #24
 80028b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80028b4:	18cb      	adds	r3, r1, r3
 80028b6:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	f102 0218 	add.w	r2, r2, #24
 80028c2:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80028c6:	188a      	adds	r2, r1, r2
 80028c8:	6852      	ldr	r2, [r2, #4]
 80028ca:	4611      	mov	r1, r2
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	7a92      	ldrb	r2, [r2, #10]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f103 0318 	add.w	r3, r3, #24
 80028d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80028dc:	18cb      	adds	r3, r1, r3
 80028de:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	7b92      	ldrb	r2, [r2, #14]
 80028e6:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	7b52      	ldrb	r2, [r2, #13]
 80028ee:	ea4f 4202 	mov.w	r2, r2, lsl #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80028f2:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	7b12      	ldrb	r2, [r2, #12]
 80028f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80028fc:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8002902:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800290a:	18cb      	adds	r3, r1, r3
 800290c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002910:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	7c92      	ldrb	r2, [r2, #18]
 8002918:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	7c52      	ldrb	r2, [r2, #17]
 8002920:	ea4f 4202 	mov.w	r2, r2, lsl #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002924:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	7c12      	ldrb	r2, [r2, #16]
 800292a:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800292e:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8002934:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800293c:	18cb      	adds	r3, r1, r3
 800293e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002942:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	f102 0218 	add.w	r2, r2, #24
 800294e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002952:	188a      	adds	r2, r1, r2
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f103 0318 	add.w	r3, r3, #24
 8002960:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002964:	18cb      	adds	r3, r1, r3
 8002966:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	f107 0714 	add.w	r7, r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop

08002978 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d00d      	beq.n	80029ac <CAN_TransmitStatus+0x34>
 8002990:	2b02      	cmp	r3, #2
 8002992:	d015      	beq.n	80029c0 <CAN_TransmitStatus+0x48>
 8002994:	2b00      	cmp	r3, #0
 8002996:	d11d      	bne.n	80029d4 <CAN_TransmitStatus+0x5c>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	461a      	mov	r2, r3
 800299e:	f04f 0303 	mov.w	r3, #3
 80029a2:	f2c0 4300 	movt	r3, #1024	; 0x400
 80029a6:	4013      	ands	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
      break;
 80029aa:	e017      	b.n	80029dc <CAN_TransmitStatus+0x64>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80029ba:	4013      	ands	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
      break;
 80029be:	e00d      	b.n	80029dc <CAN_TransmitStatus+0x64>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	461a      	mov	r2, r3
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	f2c1 0303 	movt	r3, #4099	; 0x1003
 80029ce:	4013      	ands	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
      break;
 80029d2:	e003      	b.n	80029dc <CAN_TransmitStatus+0x64>
    default:
      state = CAN_TxStatus_Failed;
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
      break;
 80029da:	bf00      	nop
  }
  switch (state)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029e2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02f      	beq.n	8002a4a <CAN_TransmitStatus+0xd2>
 80029ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ee:	f6c0 0200 	movt	r2, #2048	; 0x800
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d80e      	bhi.n	8002a14 <CAN_TransmitStatus+0x9c>
 80029f6:	f04f 0201 	mov.w	r2, #1
 80029fa:	f2c0 4200 	movt	r2, #1024	; 0x400
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01f      	beq.n	8002a42 <CAN_TransmitStatus+0xca>
 8002a02:	f04f 0203 	mov.w	r2, #3
 8002a06:	f2c0 4200 	movt	r2, #1024	; 0x400
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d025      	beq.n	8002a5a <CAN_TransmitStatus+0xe2>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d013      	beq.n	8002a3a <CAN_TransmitStatus+0xc2>
 8002a12:	e02e      	b.n	8002a72 <CAN_TransmitStatus+0xfa>
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f2c1 0201 	movt	r2, #4097	; 0x1001
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d018      	beq.n	8002a52 <CAN_TransmitStatus+0xda>
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f2c1 0203 	movt	r2, #4099	; 0x1003
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d01e      	beq.n	8002a6a <CAN_TransmitStatus+0xf2>
 8002a2c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a30:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d014      	beq.n	8002a62 <CAN_TransmitStatus+0xea>
 8002a38:	e01b      	b.n	8002a72 <CAN_TransmitStatus+0xfa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8002a3a:	f04f 0302 	mov.w	r3, #2
 8002a3e:	60fb      	str	r3, [r7, #12]
      break;
 8002a40:	e01b      	b.n	8002a7a <CAN_TransmitStatus+0x102>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
      break;
 8002a48:	e017      	b.n	8002a7a <CAN_TransmitStatus+0x102>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
      break;
 8002a50:	e013      	b.n	8002a7a <CAN_TransmitStatus+0x102>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
      break;
 8002a58:	e00f      	b.n	8002a7a <CAN_TransmitStatus+0x102>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8002a5a:	f04f 0301 	mov.w	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
      break;
 8002a60:	e00b      	b.n	8002a7a <CAN_TransmitStatus+0x102>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8002a62:	f04f 0301 	mov.w	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
      break;
 8002a68:	e007      	b.n	8002a7a <CAN_TransmitStatus+0x102>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8002a6a:	f04f 0301 	mov.w	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
      break;
 8002a70:	e003      	b.n	8002a7a <CAN_TransmitStatus+0x102>
    default: state = CAN_TxStatus_Failed;
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
      break;
 8002a78:	bf00      	nop
  }
  return (uint8_t) state;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	b2db      	uxtb	r3, r3
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f107 0714 	add.w	r7, r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop

08002a8c <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d00a      	beq.n	8002ab4 <CAN_CancelTransmit+0x28>
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d00f      	beq.n	8002ac2 <CAN_CancelTransmit+0x36>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d114      	bne.n	8002ad0 <CAN_CancelTransmit+0x44>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
      break;
 8002ab2:	e00e      	b.n	8002ad2 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
      break;
 8002ac0:	e007      	b.n	8002ad2 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	609a      	str	r2, [r3, #8]
      break;
 8002ace:	e000      	b.n	8002ad2 <CAN_CancelTransmit+0x46>
    default:
      break;
 8002ad0:	bf00      	nop
  }
}
 8002ad2:	f107 070c 	add.w	r7, r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8002aea:	7afb      	ldrb	r3, [r7, #11]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	f103 031b 	add.w	r3, r3, #27
 8002af2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002af6:	18d3      	adds	r3, r2, r3
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7a1b      	ldrb	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10c      	bne.n	8002b28 <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	f103 031b 	add.w	r3, r3, #27
 8002b16:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b1a:	18d3      	adds	r3, r2, r3
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	ea4f 5253 	mov.w	r2, r3, lsr #21
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e00b      	b.n	8002b40 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	f103 031b 	add.w	r3, r3, #27
 8002b30:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b34:	18d3      	adds	r3, r2, r3
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	f103 031b 	add.w	r3, r3, #27
 8002b48:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b4c:	18d3      	adds	r3, r2, r3
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f103 031b 	add.w	r3, r3, #27
 8002b64:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b68:	18d3      	adds	r3, r2, r3
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f103 031b 	add.w	r3, r3, #27
 8002b80:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b84:	18d3      	adds	r3, r2, r3
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b9a:	18d3      	adds	r3, r2, r3
 8002b9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002bb0:	18d3      	adds	r3, r2, r3
 8002bb2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002bca:	18d3      	adds	r3, r2, r3
 8002bcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002be4:	18d3      	adds	r3, r2, r3
 8002be6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002bfe:	18d3      	adds	r3, r2, r3
 8002c00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c2e:	18d3      	adds	r3, r2, r3
 8002c30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8002c40:	7afb      	ldrb	r3, [r7, #11]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c48:	18d3      	adds	r3, r2, r3
 8002c4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002c5a:	7afb      	ldrb	r3, [r7, #11]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <CAN_Receive+0x192>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	e005      	b.n	8002c7a <CAN_Receive+0x19e>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	611a      	str	r2, [r3, #16]
  }
}
 8002c7a:	f107 0714 	add.w	r7, r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e005      	b.n	8002cb0 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	611a      	str	r2, [r3, #16]
  }
}
 8002cb0:	f107 070c 	add.w	r7, r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop

08002cbc <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <CAN_MessagePending+0x26>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e00c      	b.n	8002cfc <CAN_MessagePending+0x40>
  }
  else if (FIFONumber == CAN_FIFO1)
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <CAN_MessagePending+0x3a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e002      	b.n	8002cfc <CAN_MessagePending+0x40>
  }
  else
  {
    message_pending = 0;
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f107 0714 	add.w	r7, r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop

08002d0c <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 8002d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d123      	bne.n	8002d72 <CAN_OperatingModeRequest+0x66>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 0303 	bic.w	r3, r3, #3
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8002d3a:	e003      	b.n	8002d44 <CAN_OperatingModeRequest+0x38>
    {
      timeout--;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d42:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d002      	beq.n	8002d56 <CAN_OperatingModeRequest+0x4a>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f2      	bne.n	8002d3c <CAN_OperatingModeRequest+0x30>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d003      	beq.n	8002d6a <CAN_OperatingModeRequest+0x5e>
    {
      status = CAN_ModeStatus_Failed;
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e052      	b.n	8002e10 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002d6a:	f04f 0301 	mov.w	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e04e      	b.n	8002e10 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d121      	bne.n	8002dbc <CAN_OperatingModeRequest+0xb0>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 0203 	bic.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8002d84:	e003      	b.n	8002d8e <CAN_OperatingModeRequest+0x82>
    {
      timeout--;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d8c:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <CAN_OperatingModeRequest+0x94>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f2      	bne.n	8002d86 <CAN_OperatingModeRequest+0x7a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <CAN_OperatingModeRequest+0xa8>
    {
      status = CAN_ModeStatus_Failed;
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	e02d      	b.n	8002e10 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002db4:	f04f 0301 	mov.w	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e029      	b.n	8002e10 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d123      	bne.n	8002e0a <CAN_OperatingModeRequest+0xfe>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	f043 0202 	orr.w	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8002dd2:	e003      	b.n	8002ddc <CAN_OperatingModeRequest+0xd0>
    {
      timeout--;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8002dda:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d002      	beq.n	8002dee <CAN_OperatingModeRequest+0xe2>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f2      	bne.n	8002dd4 <CAN_OperatingModeRequest+0xc8>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d003      	beq.n	8002e02 <CAN_OperatingModeRequest+0xf6>
    {
      status = CAN_ModeStatus_Failed;
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e006      	b.n	8002e10 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002e02:	f04f 0301 	mov.w	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e002      	b.n	8002e10 <CAN_OperatingModeRequest+0x104>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	f107 0714 	add.w	r7, r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	f043 0202 	orr.w	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d102      	bne.n	8002e50 <CAN_Sleep+0x30>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 8002e4a:	f04f 0301 	mov.w	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	f107 0714 	add.w	r7, r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop

08002e60 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 8002e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e6c:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 0202 	bic.w	r2, r3, #2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8002e80:	e003      	b.n	8002e8a <CAN_WakeUp+0x2a>
  {
   wait_slak--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e88:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <CAN_WakeUp+0x3c>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f2      	bne.n	8002e82 <CAN_WakeUp+0x22>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <CAN_WakeUp+0x4e>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8002ea8:	f04f 0301 	mov.w	r3, #1
 8002eac:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8002eae:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f107 0714 	add.w	r7, r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed4:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f107 0714 	add.w	r7, r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8002efa:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	f107 0714 	add.w	r7, r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop

08002f0c <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f22:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002f26:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f107 0714 	add.w	r7, r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	615a      	str	r2, [r3, #20]
 8002f5a:	e008      	b.n	8002f6e <CAN_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	ea6f 0303 	mvn.w	r3, r3
 8002f68:	401a      	ands	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	615a      	str	r2, [r3, #20]
  }
}
 8002f6e:	f107 0714 	add.w	r7, r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d012      	beq.n	8002fb8 <CAN_GetFlagStatus+0x40>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	461a      	mov	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fa0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <CAN_GetFlagStatus+0x38>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002fa8:	f04f 0301 	mov.w	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e05d      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	e059      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d012      	beq.n	8002fe8 <CAN_GetFlagStatus+0x70>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <CAN_GetFlagStatus+0x68>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002fd8:	f04f 0301 	mov.w	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	e045      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	e041      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <CAN_GetFlagStatus+0xa0>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003000:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <CAN_GetFlagStatus+0x98>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8003008:	f04f 0301 	mov.w	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e02d      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e029      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <CAN_GetFlagStatus+0xd0>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	461a      	mov	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4013      	ands	r3, r2
 800302c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003030:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <CAN_GetFlagStatus+0xc8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8003038:	f04f 0301 	mov.w	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e015      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
 8003046:	e011      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	461a      	mov	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	4013      	ands	r3, r2
 8003052:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003056:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <CAN_GetFlagStatus+0xee>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800305e:	f04f 0301 	mov.w	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e002      	b.n	800306c <CAN_GetFlagStatus+0xf4>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	f107 0714 	add.w	r7, r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop

0800307c <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8003092:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 8003096:	429a      	cmp	r2, r3
 8003098:	d104      	bne.n	80030a4 <CAN_ClearFlag+0x28>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	619a      	str	r2, [r3, #24]
 80030a2:	e023      	b.n	80030ec <CAN_ClearFlag+0x70>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030ae:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <CAN_ClearFlag+0x46>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	e014      	b.n	80030ec <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <CAN_ClearFlag+0x58>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	611a      	str	r2, [r3, #16]
 80030d2:	e00b      	b.n	80030ec <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <CAN_ClearFlag+0x6a>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	e002      	b.n	80030ec <CAN_ClearFlag+0x70>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	605a      	str	r2, [r3, #4]
    }
  }
}
 80030ec:	f107 0714 	add.w	r7, r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop

080030f8 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	461a      	mov	r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80c4 	beq.w	80032a0 <CAN_GetITStatus+0x1a8>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d06b      	beq.n	80031f6 <CAN_GetITStatus+0xfe>
 800311e:	2b40      	cmp	r3, #64	; 0x40
 8003120:	d80f      	bhi.n	8003142 <CAN_GetITStatus+0x4a>
 8003122:	2b04      	cmp	r3, #4
 8003124:	d03f      	beq.n	80031a6 <CAN_GetITStatus+0xae>
 8003126:	2b04      	cmp	r3, #4
 8003128:	d804      	bhi.n	8003134 <CAN_GetITStatus+0x3c>
 800312a:	2b01      	cmp	r3, #1
 800312c:	d025      	beq.n	800317a <CAN_GetITStatus+0x82>
 800312e:	2b02      	cmp	r3, #2
 8003130:	d02f      	beq.n	8003192 <CAN_GetITStatus+0x9a>
 8003132:	e0b1      	b.n	8003298 <CAN_GetITStatus+0x1a0>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d04a      	beq.n	80031ce <CAN_GetITStatus+0xd6>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d052      	beq.n	80031e2 <CAN_GetITStatus+0xea>
 800313c:	2b08      	cmp	r3, #8
 800313e:	d03c      	beq.n	80031ba <CAN_GetITStatus+0xc2>
 8003140:	e0aa      	b.n	8003298 <CAN_GetITStatus+0x1a0>
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003146:	f000 8092 	beq.w	800326e <CAN_GetITStatus+0x176>
 800314a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314e:	d809      	bhi.n	8003164 <CAN_GetITStatus+0x6c>
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d077      	beq.n	8003246 <CAN_GetITStatus+0x14e>
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315a:	d07e      	beq.n	800325a <CAN_GetITStatus+0x162>
 800315c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003160:	d067      	beq.n	8003232 <CAN_GetITStatus+0x13a>
 8003162:	e099      	b.n	8003298 <CAN_GetITStatus+0x1a0>
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d04f      	beq.n	800320a <CAN_GetITStatus+0x112>
 800316a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800316e:	d056      	beq.n	800321e <CAN_GetITStatus+0x126>
 8003170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003174:	f000 8085 	beq.w	8003282 <CAN_GetITStatus+0x18a>
 8003178:	e08e      	b.n	8003298 <CAN_GetITStatus+0x1a0>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4618      	mov	r0, r3
 8003180:	f240 1101 	movw	r1, #257	; 0x101
 8003184:	f2c0 0101 	movt	r1, #1
 8003188:	f000 f912 	bl	80033b0 <CheckITStatus>
 800318c:	4603      	mov	r3, r0
 800318e:	73fb      	strb	r3, [r7, #15]
        break;
 8003190:	e089      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4618      	mov	r0, r3
 8003198:	f04f 0103 	mov.w	r1, #3
 800319c:	f000 f908 	bl	80033b0 <CheckITStatus>
 80031a0:	4603      	mov	r3, r0
 80031a2:	73fb      	strb	r3, [r7, #15]
        break;
 80031a4:	e07f      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f04f 0108 	mov.w	r1, #8
 80031b0:	f000 f8fe 	bl	80033b0 <CheckITStatus>
 80031b4:	4603      	mov	r3, r0
 80031b6:	73fb      	strb	r3, [r7, #15]
        break;
 80031b8:	e075      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	f04f 0110 	mov.w	r1, #16
 80031c4:	f000 f8f4 	bl	80033b0 <CheckITStatus>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]
        break;
 80031cc:	e06b      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f04f 0103 	mov.w	r1, #3
 80031d8:	f000 f8ea 	bl	80033b0 <CheckITStatus>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]
        break;
 80031e0:	e061      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f04f 0108 	mov.w	r1, #8
 80031ec:	f000 f8e0 	bl	80033b0 <CheckITStatus>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]
        break;
 80031f4:	e057      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f04f 0110 	mov.w	r1, #16
 8003200:	f000 f8d6 	bl	80033b0 <CheckITStatus>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]
        break;
 8003208:	e04d      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4618      	mov	r0, r3
 8003210:	f04f 0108 	mov.w	r1, #8
 8003214:	f000 f8cc 	bl	80033b0 <CheckITStatus>
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]
        break;
 800321c:	e043      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	f04f 0110 	mov.w	r1, #16
 8003228:	f000 f8c2 	bl	80033b0 <CheckITStatus>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]
        break;
 8003230:	e039      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	4618      	mov	r0, r3
 8003238:	f04f 0101 	mov.w	r1, #1
 800323c:	f000 f8b8 	bl	80033b0 <CheckITStatus>
 8003240:	4603      	mov	r3, r0
 8003242:	73fb      	strb	r3, [r7, #15]
        break;
 8003244:	e02f      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	4618      	mov	r0, r3
 800324c:	f04f 0102 	mov.w	r1, #2
 8003250:	f000 f8ae 	bl	80033b0 <CheckITStatus>
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]
        break;
 8003258:	e025      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4618      	mov	r0, r3
 8003260:	f04f 0104 	mov.w	r1, #4
 8003264:	f000 f8a4 	bl	80033b0 <CheckITStatus>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]
        break;
 800326c:	e01b      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	4618      	mov	r0, r3
 8003274:	f04f 0170 	mov.w	r1, #112	; 0x70
 8003278:	f000 f89a 	bl	80033b0 <CheckITStatus>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]
        break;
 8003280:	e011      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	f04f 0104 	mov.w	r1, #4
 800328c:	f000 f890 	bl	80033b0 <CheckITStatus>
 8003290:	4603      	mov	r3, r0
 8003292:	73fb      	strb	r3, [r7, #15]
        break;
 8003294:	bf00      	nop
 8003296:	e006      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
        break;
 800329e:	e002      	b.n	80032a6 <CAN_GetITStatus+0x1ae>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	f107 0710 	add.w	r7, r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop

080032b4 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c4:	d04c      	beq.n	8003360 <CAN_ClearITPendingBit+0xac>
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ca:	d80d      	bhi.n	80032e8 <CAN_ClearITPendingBit+0x34>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d02e      	beq.n	800332e <CAN_ClearITPendingBit+0x7a>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d804      	bhi.n	80032de <CAN_ClearITPendingBit+0x2a>
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d01e      	beq.n	8003316 <CAN_ClearITPendingBit+0x62>
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d023      	beq.n	8003324 <CAN_ClearITPendingBit+0x70>
 80032dc:	e061      	b.n	80033a2 <CAN_ClearITPendingBit+0xee>
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d02a      	beq.n	8003338 <CAN_ClearITPendingBit+0x84>
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d02d      	beq.n	8003342 <CAN_ClearITPendingBit+0x8e>
 80032e6:	e05c      	b.n	80033a2 <CAN_ClearITPendingBit+0xee>
 80032e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ec:	d047      	beq.n	800337e <CAN_ClearITPendingBit+0xca>
 80032ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f2:	d806      	bhi.n	8003302 <CAN_ClearITPendingBit+0x4e>
 80032f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f8:	d037      	beq.n	800336a <CAN_ClearITPendingBit+0xb6>
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d039      	beq.n	8003374 <CAN_ClearITPendingBit+0xc0>
 8003300:	e04f      	b.n	80033a2 <CAN_ClearITPendingBit+0xee>
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d021      	beq.n	800334c <CAN_ClearITPendingBit+0x98>
 8003308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800330c:	d023      	beq.n	8003356 <CAN_ClearITPendingBit+0xa2>
 800330e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003312:	d03d      	beq.n	8003390 <CAN_ClearITPendingBit+0xdc>
 8003314:	e045      	b.n	80033a2 <CAN_ClearITPendingBit+0xee>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	f240 1301 	movw	r3, #257	; 0x101
 800331c:	f2c0 0301 	movt	r3, #1
 8003320:	6093      	str	r3, [r2, #8]
      break;
 8003322:	e03f      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f04f 0208 	mov.w	r2, #8
 800332a:	60da      	str	r2, [r3, #12]
      break;
 800332c:	e03a      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f04f 0210 	mov.w	r2, #16
 8003334:	60da      	str	r2, [r3, #12]
      break;
 8003336:	e035      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f04f 0208 	mov.w	r2, #8
 800333e:	611a      	str	r2, [r3, #16]
      break;
 8003340:	e030      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f04f 0210 	mov.w	r2, #16
 8003348:	611a      	str	r2, [r3, #16]
      break;
 800334a:	e02b      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f04f 0208 	mov.w	r2, #8
 8003352:	605a      	str	r2, [r3, #4]
      break;
 8003354:	e026      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f04f 0210 	mov.w	r2, #16
 800335c:	605a      	str	r2, [r3, #4]
      break;
 800335e:	e021      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f04f 0204 	mov.w	r2, #4
 8003366:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 8003368:	e01c      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f04f 0204 	mov.w	r2, #4
 8003370:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8003372:	e017      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f04f 0204 	mov.w	r2, #4
 800337a:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 800337c:	e012      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f04f 0204 	mov.w	r2, #4
 800338c:	605a      	str	r2, [r3, #4]
      break;
 800338e:	e009      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f04f 0204 	mov.w	r2, #4
 800339e:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 80033a0:	e000      	b.n	80033a4 <CAN_ClearITPendingBit+0xf0>
    default:
       break;
 80033a2:	bf00      	nop
   }
}
 80033a4:	f107 070c 	add.w	r7, r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop

080033b0 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <CheckITStatus+0x22>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 80033ca:	f04f 0301 	mov.w	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e002      	b.n	80033d8 <CheckITStatus+0x28>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	f107 0714 	add.w	r7, r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop

080033e8 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 80033ec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80033f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033f4:	f04f 0201 	mov.w	r2, #1
 80033f8:	609a      	str	r2, [r3, #8]
}
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8003408:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800340c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8003414:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800341c:	681b      	ldr	r3, [r3, #0]
}
 800341e:	4618      	mov	r0, r3
 8003420:	f107 070c 	add.w	r7, r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop

0800342c <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e00e      	b.n	8003462 <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 8003444:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	188a      	adds	r2, r1, r2
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f103 0301 	add.w	r3, r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d3ec      	bcc.n	8003444 <CRC_CalcBlockCRC+0x18>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 800346a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800346e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	f107 0714 	add.w	r7, r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8003484:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800348c:	681b      	ldr	r3, [r3, #0]
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop

08003498 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 80034a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034aa:	79fa      	ldrb	r2, [r7, #7]
 80034ac:	711a      	strb	r2, [r3, #4]
}
 80034ae:	f107 070c 	add.w	r7, r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 80034bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034c4:	791b      	ldrb	r3, [r3, #4]
 80034c6:	b2db      	uxtb	r3, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 80034d4:	f04f 0010 	mov.w	r0, #16
 80034d8:	f04f 0101 	mov.w	r1, #1
 80034dc:	f006 fe2a 	bl	800a134 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 80034e0:	f04f 0010 	mov.w	r0, #16
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	f006 fe24 	bl	800a134 <RCC_AHB2PeriphResetCmd>
}
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop

080034f0 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800350e:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4611      	mov	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	8852      	ldrh	r2, [r2, #2]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003542:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	4611      	mov	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	8892      	ldrh	r2, [r2, #4]
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	885b      	ldrh	r3, [r3, #2]
 8003564:	2b20      	cmp	r3, #32
 8003566:	d00b      	beq.n	8003580 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	885b      	ldrh	r3, [r3, #2]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 800356c:	2b28      	cmp	r3, #40	; 0x28
 800356e:	d007      	beq.n	8003580 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8003574:	2b30      	cmp	r3, #48	; 0x30
 8003576:	d003      	beq.n	8003580 <CRYP_Init+0x90>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 800357c:	2b38      	cmp	r3, #56	; 0x38
 800357e:	d119      	bne.n	80035b4 <CRYP_Init+0xc4>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003596:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	4611      	mov	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	88d2      	ldrh	r2, [r2, #6]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	f022 0204 	bic.w	r2, r2, #4
 80035ca:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	4611      	mov	r1, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	8812      	ldrh	r2, [r2, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]
}
 80035e8:	f107 070c 	add.w	r7, r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop

080035f4 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	801a      	strh	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	805a      	strh	r2, [r3, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	80da      	strh	r2, [r3, #6]
}
 800361c:	f107 070c 	add.w	r7, r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop

08003628 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6852      	ldr	r2, [r2, #4]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6892      	ldr	r2, [r2, #8]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68d2      	ldr	r2, [r2, #12]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6912      	ldr	r2, [r2, #16]
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6952      	ldr	r2, [r2, #20]
 8003682:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6992      	ldr	r2, [r2, #24]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	69d2      	ldr	r2, [r2, #28]
 800369e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80036a0:	f107 070c 	add.w	r7, r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop

080036ac <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	61da      	str	r2, [r3, #28]
}
 80036f4:	f107 070c 	add.w	r7, r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6852      	ldr	r2, [r2, #4]
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68d2      	ldr	r2, [r2, #12]
 800373e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003740:	f107 070c 	add.w	r7, r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop

0800374c <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	60da      	str	r2, [r3, #12]
}
 8003774:	f107 070c 	add.w	r7, r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop

08003780 <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800379a:	601a      	str	r2, [r3, #0]
}
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop

080037a4 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <CRYP_Cmd+0x2a>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e00b      	b.n	80037e6 <CRYP_Cmd+0x42>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e4:	601a      	str	r2, [r3, #0]
  }
}
 80037e6:	f107 070c 	add.w	r7, r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	f107 070c 	add.w	r7, r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop

08003810 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800381c:	68db      	ldr	r3, [r3, #12]
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop

08003828 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003854:	6912      	ldr	r2, [r2, #16]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <CRYP_SaveContext+0x4e>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 800386e:	f04f 0311 	mov.w	r3, #17
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e002      	b.n	800387c <CRYP_SaveContext+0x54>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8003876:	f04f 0315 	mov.w	r3, #21
 800387a:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	461a      	mov	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	4013      	ands	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
    timeout++;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f103 0301 	add.w	r3, r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800389c:	429a      	cmp	r2, r3
 800389e:	d002      	beq.n	80038a6 <CRYP_SaveContext+0x7e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d1ea      	bne.n	800387c <CRYP_SaveContext+0x54>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	461a      	mov	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d003      	beq.n	80038c2 <CRYP_SaveContext+0x9a>
  {
    status = ERROR;
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	74fb      	strb	r3, [r7, #19]
 80038c0:	e063      	b.n	800398a <CRYP_SaveContext+0x162>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80038d2:	6912      	ldr	r2, [r2, #16]
 80038d4:	f022 0202 	bic.w	r2, r2, #2
 80038d8:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f0:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 727f 	and.w	r2, r3, #1020	; 0x3fc
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	461a      	mov	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392e:	461a      	mov	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	461a      	mov	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8003984:	f04f 0301 	mov.w	r3, #1
 8003988:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 800398a:	7cfb      	ldrb	r3, [r7, #19]
}
 800398c:	4618      	mov	r0, r3
 800398e:	f107 071c 	add.w	r7, r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6952      	ldr	r2, [r2, #20]
 80039ba:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6992      	ldr	r2, [r2, #24]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	69d2      	ldr	r2, [r2, #28]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6a12      	ldr	r2, [r2, #32]
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6852      	ldr	r2, [r2, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6892      	ldr	r2, [r2, #8]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68d2      	ldr	r2, [r2, #12]
 8003a46:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6912      	ldr	r2, [r2, #16]
 8003a54:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6c:	601a      	str	r2, [r3, #0]
}
 8003a6e:	f107 070c 	add.w	r7, r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	71fa      	strb	r2, [r7, #7]
 8003a84:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a86:	79bb      	ldrb	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <CRYP_DMACmd+0x30>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003a9c:	6912      	ldr	r2, [r2, #16]
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	79fa      	ldrb	r2, [r7, #7]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	e00f      	b.n	8003ac8 <CRYP_DMACmd+0x50>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003ab8:	6912      	ldr	r2, [r2, #16]
 8003aba:	4611      	mov	r1, r2
 8003abc:	79fa      	ldrb	r2, [r7, #7]
 8003abe:	ea6f 0202 	mvn.w	r2, r2
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	611a      	str	r2, [r3, #16]
  }
}
 8003ac8:	f107 070c 	add.w	r7, r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop

08003ad4 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	71fa      	strb	r2, [r7, #7]
 8003ae0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ae2:	79bb      	ldrb	r3, [r7, #6]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <CRYP_ITConfig+0x30>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003af8:	6952      	ldr	r2, [r2, #20]
 8003afa:	4611      	mov	r1, r2
 8003afc:	79fa      	ldrb	r2, [r7, #7]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	615a      	str	r2, [r3, #20]
 8003b02:	e00f      	b.n	8003b24 <CRYP_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8003b14:	6952      	ldr	r2, [r2, #20]
 8003b16:	4611      	mov	r1, r2
 8003b18:	79fa      	ldrb	r2, [r7, #7]
 8003b1a:	ea6f 0202 	mvn.w	r2, r2
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	400a      	ands	r2, r1
 8003b22:	615a      	str	r2, [r3, #20]
  }
}
 8003b24:	f107 070c 	add.w	r7, r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <CRYP_GetITStatus+0x2c>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8003b54:	f04f 0301 	mov.w	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e002      	b.n	8003b62 <CRYP_GetITStatus+0x32>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	f107 0714 	add.w	r7, r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <CRYP_GetFlagStatus+0x2e>
  {
    tempreg = CRYP->RISR;
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	e005      	b.n	8003baa <CRYP_GetFlagStatus+0x3a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 8003baa:	79fa      	ldrb	r2, [r7, #7]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <CRYP_GetFlagStatus+0x4c>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8003bb4:	f04f 0301 	mov.w	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
 8003bba:	e002      	b.n	8003bc2 <CRYP_GetFlagStatus+0x52>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f107 0714 	add.w	r7, r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b097      	sub	sp, #92	; 0x5c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	4613      	mov	r3, r2
 8003be0:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 8003bee:	f04f 0301 	mov.w	r3, #1
 8003bf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint32_t keyaddr    = (uint32_t)Key;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t inputaddr  = (uint32_t)Input;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t outputaddr = (uint32_t)Output;
 8003bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8003c08:	f107 0318 	add.w	r3, r7, #24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fd4d 	bl	80036ac <CRYP_KeyStructInit>

  switch(Keysize)
 8003c12:	89bb      	ldrh	r3, [r7, #12]
 8003c14:	2bc0      	cmp	r3, #192	; 0xc0
 8003c16:	d031      	beq.n	8003c7c <CRYP_AES_ECB+0xac>
 8003c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1c:	d070      	beq.n	8003d00 <CRYP_AES_ECB+0x130>
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	f040 80c6 	bne.w	8003db0 <CRYP_AES_ECB+0x1e0>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fc fcee 	bl	8000610 <__REV>
 8003c34:	4603      	mov	r3, r0
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	f103 0304 	add.w	r3, r3, #4
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fc fce3 	bl	8000610 <__REV>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c50:	f103 0304 	add.w	r3, r3, #4
 8003c54:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fc fcd8 	bl	8000610 <__REV>
 8003c60:	4603      	mov	r3, r0
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c66:	f103 0304 	add.w	r3, r3, #4
 8003c6a:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fc fccd 	bl	8000610 <__REV>
 8003c76:	4603      	mov	r3, r0
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8003c7a:	e09a      	b.n	8003db2 <CRYP_AES_ECB+0x1e2>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8003c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c80:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fcc2 	bl	8000610 <__REV>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8003c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c92:	f103 0304 	add.w	r3, r3, #4
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fcb7 	bl	8000610 <__REV>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8003ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca8:	f103 0304 	add.w	r3, r3, #4
 8003cac:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fc fcac 	bl	8000610 <__REV>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8003cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbe:	f103 0304 	add.w	r3, r3, #4
 8003cc2:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fca1 	bl	8000610 <__REV>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8003cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd4:	f103 0304 	add.w	r3, r3, #4
 8003cd8:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fc96 	bl	8000610 <__REV>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cea:	f103 0304 	add.w	r3, r3, #4
 8003cee:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fc fc8b 	bl	8000610 <__REV>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8003cfe:	e058      	b.n	8003db2 <CRYP_AES_ECB+0x1e2>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8003d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d04:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8003d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc80 	bl	8000610 <__REV>
 8003d10:	4603      	mov	r3, r0
 8003d12:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8003d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d16:	f103 0304 	add.w	r3, r3, #4
 8003d1a:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8003d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fc fc75 	bl	8000610 <__REV>
 8003d26:	4603      	mov	r3, r0
 8003d28:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2c:	f103 0304 	add.w	r3, r3, #4
 8003d30:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fc6a 	bl	8000610 <__REV>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8003d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d42:	f103 0304 	add.w	r3, r3, #4
 8003d46:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fc5f 	bl	8000610 <__REV>
 8003d52:	4603      	mov	r3, r0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8003d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d58:	f103 0304 	add.w	r3, r3, #4
 8003d5c:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fc54 	bl	8000610 <__REV>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	f103 0304 	add.w	r3, r3, #4
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fc fc49 	bl	8000610 <__REV>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8003d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d84:	f103 0304 	add.w	r3, r3, #4
 8003d88:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc fc3e 	bl	8000610 <__REV>
 8003d94:	4603      	mov	r3, r0
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	f103 0304 	add.w	r3, r3, #4
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc fc33 	bl	8000610 <__REV>
 8003daa:	4603      	mov	r3, r0
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8003dae:	e000      	b.n	8003db2 <CRYP_AES_ECB+0x1e2>
    default:
    break;
 8003db0:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d135      	bne.n	8003e24 <CRYP_AES_ECB+0x254>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8003db8:	f7ff fce2 	bl	8003780 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003dbc:	f04f 0304 	mov.w	r3, #4
 8003dc0:	873b      	strh	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8003dc2:	f04f 0338 	mov.w	r3, #56	; 0x38
 8003dc6:	877b      	strh	r3, [r7, #58]	; 0x3a
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    CRYP_Init(&AES_CRYP_InitStructure);
 8003dce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fb8c 	bl	80034f0 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fc23 	bl	8003628 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8003de2:	f04f 0001 	mov.w	r0, #1
 8003de6:	f7ff fcdd 	bl	80037a4 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003dea:	f04f 0010 	mov.w	r0, #16
 8003dee:	f7ff febf 	bl	8003b70 <CRYP_GetFlagStatus>
 8003df2:	4603      	mov	r3, r0
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f103 0301 	add.w	r3, r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e04:	d002      	beq.n	8003e0c <CRYP_AES_ECB+0x23c>
 8003e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ee      	bne.n	8003dea <CRYP_AES_ECB+0x21a>

    if (busystatus != RESET)
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <CRYP_AES_ECB+0x24c>
   {
       status = ERROR;
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003e1a:	e00b      	b.n	8003e34 <CRYP_AES_ECB+0x264>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003e1c:	f04f 0304 	mov.w	r3, #4
 8003e20:	873b      	strh	r3, [r7, #56]	; 0x38
 8003e22:	e007      	b.n	8003e34 <CRYP_AES_ECB+0x264>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003e24:	f107 0318 	add.w	r3, r7, #24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fbfd 	bl	8003628 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8003e34:	f04f 0320 	mov.w	r3, #32
 8003e38:	877b      	strh	r3, [r7, #58]	; 0x3a
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003e3a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003e3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&AES_CRYP_InitStructure);
 8003e40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fb53 	bl	80034f0 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8003e4a:	f7ff fc99 	bl	8003780 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8003e4e:	f04f 0001 	mov.w	r0, #1
 8003e52:	f7ff fca7 	bl	80037a4 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e5c:	e067      	b.n	8003f2e <CRYP_AES_ECB+0x35e>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fcc4 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8003e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6a:	f103 0304 	add.w	r3, r3, #4
 8003e6e:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fcbb 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8003e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7c:	f103 0304 	add.w	r3, r3, #4
 8003e80:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fcb2 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8003e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e8e:	f103 0304 	add.w	r3, r3, #4
 8003e92:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fca9 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8003e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea0:	f103 0304 	add.w	r3, r3, #4
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50

    /* Wait until the complete message has been processed */
    counter = 0;
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003eac:	f04f 0010 	mov.w	r0, #16
 8003eb0:	f7ff fe5e 	bl	8003b70 <CRYP_GetFlagStatus>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f103 0301 	add.w	r3, r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec6:	d002      	beq.n	8003ece <CRYP_AES_ECB+0x2fe>
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ee      	bne.n	8003eac <CRYP_AES_ECB+0x2dc>

    if (busystatus != RESET)
 8003ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <CRYP_AES_ECB+0x30e>
   {
       status = ERROR;
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003edc:	e023      	b.n	8003f26 <CRYP_AES_ECB+0x356>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003ede:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003ee0:	f7ff fc96 	bl	8003810 <CRYP_DataOut>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eea:	f103 0304 	add.w	r3, r3, #4
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003ef0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003ef2:	f7ff fc8d 	bl	8003810 <CRYP_DataOut>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efc:	f103 0304 	add.w	r3, r3, #4
 8003f00:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003f02:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003f04:	f7ff fc84 	bl	8003810 <CRYP_DataOut>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0e:	f103 0304 	add.w	r3, r3, #4
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8003f14:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003f16:	f7ff fc7b 	bl	8003810 <CRYP_DataOut>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f20:	f103 0304 	add.w	r3, r3, #4
 8003f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f28:	f103 0310 	add.w	r3, r3, #16
 8003f2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d203      	bcs.n	8003f3e <CRYP_AES_ECB+0x36e>
 8003f36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d18f      	bne.n	8003e5e <CRYP_AES_ECB+0x28e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f7ff fc2f 	bl	80037a4 <CRYP_Cmd>

  return status; 
 8003f46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}

08003f54 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b09b      	sub	sp, #108	; 0x6c
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	4602      	mov	r2, r0
 8003f60:	73fa      	strb	r2, [r7, #15]
 8003f62:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8003f70:	f04f 0301 	mov.w	r3, #1
 8003f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8003f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f7e:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8003f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8003f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fb89 	bl	80036ac <CRYP_KeyStructInit>

  switch(Keysize)
 8003f9a:	89bb      	ldrh	r3, [r7, #12]
 8003f9c:	2bc0      	cmp	r3, #192	; 0xc0
 8003f9e:	d032      	beq.n	8004006 <CRYP_AES_CBC+0xb2>
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa4:	d072      	beq.n	800408c <CRYP_AES_CBC+0x138>
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	f040 80c9 	bne.w	800413e <CRYP_AES_CBC+0x1ea>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fc fb29 	bl	8000610 <__REV>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc4:	f103 0304 	add.w	r3, r3, #4
 8003fc8:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fb1e 	bl	8000610 <__REV>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8003fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fda:	f103 0304 	add.w	r3, r3, #4
 8003fde:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fb13 	bl	8000610 <__REV>
 8003fea:	4603      	mov	r3, r0
 8003fec:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8003fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff0:	f103 0304 	add.w	r3, r3, #4
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fc fb08 	bl	8000610 <__REV>
 8004000:	4603      	mov	r3, r0
 8004002:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8004004:	e09c      	b.n	8004140 <CRYP_AES_CBC+0x1ec>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8004006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800400a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800400e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fafc 	bl	8000610 <__REV>
 8004018:	4603      	mov	r3, r0
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800401c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401e:	f103 0304 	add.w	r3, r3, #4
 8004022:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc faf1 	bl	8000610 <__REV>
 800402e:	4603      	mov	r3, r0
 8004030:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8004032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004034:	f103 0304 	add.w	r3, r3, #4
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800403a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fae6 	bl	8000610 <__REV>
 8004044:	4603      	mov	r3, r0
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8004048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404a:	f103 0304 	add.w	r3, r3, #4
 800404e:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fadb 	bl	8000610 <__REV>
 800405a:	4603      	mov	r3, r0
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800405e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004060:	f103 0304 	add.w	r3, r3, #4
 8004064:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fad0 	bl	8000610 <__REV>
 8004070:	4603      	mov	r3, r0
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8004074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004076:	f103 0304 	add.w	r3, r3, #4
 800407a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800407c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fc fac5 	bl	8000610 <__REV>
 8004086:	4603      	mov	r3, r0
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800408a:	e059      	b.n	8004140 <CRYP_AES_CBC+0x1ec>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800408c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004090:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8004094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7fc fab9 	bl	8000610 <__REV>
 800409e:	4603      	mov	r3, r0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80040a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a4:	f103 0304 	add.w	r3, r3, #4
 80040a8:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc faae 	bl	8000610 <__REV>
 80040b4:	4603      	mov	r3, r0
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80040b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ba:	f103 0304 	add.w	r3, r3, #4
 80040be:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80040c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc faa3 	bl	8000610 <__REV>
 80040ca:	4603      	mov	r3, r0
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80040ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d0:	f103 0304 	add.w	r3, r3, #4
 80040d4:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc fa98 	bl	8000610 <__REV>
 80040e0:	4603      	mov	r3, r0
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80040e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e6:	f103 0304 	add.w	r3, r3, #4
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80040ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fc fa8d 	bl	8000610 <__REV>
 80040f6:	4603      	mov	r3, r0
 80040f8:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80040fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fc:	f103 0304 	add.w	r3, r3, #4
 8004100:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc fa82 	bl	8000610 <__REV>
 800410c:	4603      	mov	r3, r0
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8004110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004112:	f103 0304 	add.w	r3, r3, #4
 8004116:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc fa77 	bl	8000610 <__REV>
 8004122:	4603      	mov	r3, r0
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8004126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004128:	f103 0304 	add.w	r3, r3, #4
 800412c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800412e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc fa6c 	bl	8000610 <__REV>
 8004138:	4603      	mov	r3, r0
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800413c:	e000      	b.n	8004140 <CRYP_AES_CBC+0x1ec>
    default:
    break;
 800413e:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fc fa63 	bl	8000610 <__REV>
 800414a:	4603      	mov	r3, r0
 800414c:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 800414e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004150:	f103 0304 	add.w	r3, r3, #4
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8004156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc fa58 	bl	8000610 <__REV>
 8004160:	4603      	mov	r3, r0
 8004162:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 8004164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004166:	f103 0304 	add.w	r3, r3, #4
 800416a:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 800416c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc fa4d 	bl	8000610 <__REV>
 8004176:	4603      	mov	r3, r0
 8004178:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 800417a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417c:	f103 0304 	add.w	r3, r3, #4
 8004180:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8004182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc fa42 	bl	8000610 <__REV>
 800418c:	4603      	mov	r3, r0
 800418e:	623b      	str	r3, [r7, #32]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d139      	bne.n	800420a <CRYP_AES_CBC+0x2b6>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8004196:	f7ff faf3 	bl	8003780 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800419a:	f04f 0304 	mov.w	r3, #4
 800419e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80041a2:	f04f 0338 	mov.w	r3, #56	; 0x38
 80041a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    CRYP_Init(&AES_CRYP_InitStructure);
 80041b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f99a 	bl	80034f0 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80041bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fa31 	bl	8003628 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80041c6:	f04f 0001 	mov.w	r0, #1
 80041ca:	f7ff faeb 	bl	80037a4 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80041ce:	f04f 0010 	mov.w	r0, #16
 80041d2:	f7ff fccd 	bl	8003b70 <CRYP_GetFlagStatus>
 80041d6:	4603      	mov	r3, r0
 80041d8:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f103 0301 	add.w	r3, r3, #1
 80041e0:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d002      	beq.n	80041f0 <CRYP_AES_CBC+0x29c>
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ee      	bne.n	80041ce <CRYP_AES_CBC+0x27a>

    if (busystatus != RESET)
 80041f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <CRYP_AES_CBC+0x2ac>
   {
       status = ERROR;
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80041fe:	e00d      	b.n	800421c <CRYP_AES_CBC+0x2c8>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004200:	f04f 0304 	mov.w	r3, #4
 8004204:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004208:	e008      	b.n	800421c <CRYP_AES_CBC+0x2c8>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800420a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fa0a 	bl	8003628 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 800421c:	f04f 0328 	mov.w	r3, #40	; 0x28
 8004220:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004224:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004228:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 800422c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff f95d 	bl	80034f0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fa60 	bl	8003700 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8004240:	f7ff fa9e 	bl	8003780 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004244:	f04f 0001 	mov.w	r0, #1
 8004248:	f7ff faac 	bl	80037a4 <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	65bb      	str	r3, [r7, #88]	; 0x58
 8004252:	e067      	b.n	8004324 <CRYP_AES_CBC+0x3d0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fac9 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 800425e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004260:	f103 0304 	add.w	r3, r3, #4
 8004264:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fac0 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004270:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004272:	f103 0304 	add.w	r3, r3, #4
 8004276:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fab7 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004284:	f103 0304 	add.w	r3, r3, #4
 8004288:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800428a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff faae 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004296:	f103 0304 	add.w	r3, r3, #4
 800429a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Wait until the complete message has been processed */
    counter = 0;
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80042a2:	f04f 0010 	mov.w	r0, #16
 80042a6:	f7ff fc63 	bl	8003b70 <CRYP_GetFlagStatus>
 80042aa:	4603      	mov	r3, r0
 80042ac:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f103 0301 	add.w	r3, r3, #1
 80042b4:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d002      	beq.n	80042c4 <CRYP_AES_CBC+0x370>
 80042be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ee      	bne.n	80042a2 <CRYP_AES_CBC+0x34e>

    if (busystatus != RESET)
 80042c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <CRYP_AES_CBC+0x380>
   {
       status = ERROR;
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80042d2:	e023      	b.n	800431c <CRYP_AES_CBC+0x3c8>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80042d4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80042d6:	f7ff fa9b 	bl	8003810 <CRYP_DataOut>
 80042da:	4603      	mov	r3, r0
 80042dc:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80042de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e0:	f103 0304 	add.w	r3, r3, #4
 80042e4:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80042e6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80042e8:	f7ff fa92 	bl	8003810 <CRYP_DataOut>
 80042ec:	4603      	mov	r3, r0
 80042ee:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80042f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f2:	f103 0304 	add.w	r3, r3, #4
 80042f6:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80042f8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80042fa:	f7ff fa89 	bl	8003810 <CRYP_DataOut>
 80042fe:	4603      	mov	r3, r0
 8004300:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004304:	f103 0304 	add.w	r3, r3, #4
 8004308:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800430a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800430c:	f7ff fa80 	bl	8003810 <CRYP_DataOut>
 8004310:	4603      	mov	r3, r0
 8004312:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004316:	f103 0304 	add.w	r3, r3, #4
 800431a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800431c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800431e:	f103 0310 	add.w	r3, r3, #16
 8004322:	65bb      	str	r3, [r7, #88]	; 0x58
 8004324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004328:	429a      	cmp	r2, r3
 800432a:	d203      	bcs.n	8004334 <CRYP_AES_CBC+0x3e0>
 800432c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004330:	2b00      	cmp	r3, #0
 8004332:	d18f      	bne.n	8004254 <CRYP_AES_CBC+0x300>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f7ff fa34 	bl	80037a4 <CRYP_Cmd>

  return status;
 800433c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004340:	4618      	mov	r0, r3
 8004342:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 8004346:	46bd      	mov	sp, r7
 8004348:	bd90      	pop	{r4, r7, pc}
 800434a:	bf00      	nop

0800434c <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b09b      	sub	sp, #108	; 0x6c
 8004350:	af00      	add	r7, sp, #0
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	4602      	mov	r2, r0
 8004358:	73fa      	strb	r2, [r7, #15]
 800435a:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8004368:	f04f 0301 	mov.w	r3, #1
 800436c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8004374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004376:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8004378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800437c:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8004388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff f98d 	bl	80036ac <CRYP_KeyStructInit>

  switch(Keysize)
 8004392:	89bb      	ldrh	r3, [r7, #12]
 8004394:	2bc0      	cmp	r3, #192	; 0xc0
 8004396:	d032      	beq.n	80043fe <CRYP_AES_CTR+0xb2>
 8004398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439c:	d072      	beq.n	8004484 <CRYP_AES_CTR+0x138>
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	f040 80c9 	bne.w	8004536 <CRYP_AES_CTR+0x1ea>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80043ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc f92d 	bl	8000610 <__REV>
 80043b6:	4603      	mov	r3, r0
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80043ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043bc:	f103 0304 	add.w	r3, r3, #4
 80043c0:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80043c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc f922 	bl	8000610 <__REV>
 80043cc:	4603      	mov	r3, r0
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80043d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d2:	f103 0304 	add.w	r3, r3, #4
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80043d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc f917 	bl	8000610 <__REV>
 80043e2:	4603      	mov	r3, r0
 80043e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80043e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e8:	f103 0304 	add.w	r3, r3, #4
 80043ec:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80043ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc f90c 	bl	8000610 <__REV>
 80043f8:	4603      	mov	r3, r0
 80043fa:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80043fc:	e09c      	b.n	8004538 <CRYP_AES_CTR+0x1ec>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80043fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004402:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fc f900 	bl	8000610 <__REV>
 8004410:	4603      	mov	r3, r0
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8004414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004416:	f103 0304 	add.w	r3, r3, #4
 800441a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800441c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc f8f5 	bl	8000610 <__REV>
 8004426:	4603      	mov	r3, r0
 8004428:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800442a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800442c:	f103 0304 	add.w	r3, r3, #4
 8004430:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc f8ea 	bl	8000610 <__REV>
 800443c:	4603      	mov	r3, r0
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8004440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004442:	f103 0304 	add.w	r3, r3, #4
 8004446:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc f8df 	bl	8000610 <__REV>
 8004452:	4603      	mov	r3, r0
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8004456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004458:	f103 0304 	add.w	r3, r3, #4
 800445c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800445e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc f8d4 	bl	8000610 <__REV>
 8004468:	4603      	mov	r3, r0
 800446a:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800446c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446e:	f103 0304 	add.w	r3, r3, #4
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7fc f8c9 	bl	8000610 <__REV>
 800447e:	4603      	mov	r3, r0
 8004480:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8004482:	e059      	b.n	8004538 <CRYP_AES_CTR+0x1ec>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8004484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004488:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 800448c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc f8bd 	bl	8000610 <__REV>
 8004496:	4603      	mov	r3, r0
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 800449a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449c:	f103 0304 	add.w	r3, r3, #4
 80044a0:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80044a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc f8b2 	bl	8000610 <__REV>
 80044ac:	4603      	mov	r3, r0
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80044b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b2:	f103 0304 	add.w	r3, r3, #4
 80044b6:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80044b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fc f8a7 	bl	8000610 <__REV>
 80044c2:	4603      	mov	r3, r0
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80044c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c8:	f103 0304 	add.w	r3, r3, #4
 80044cc:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80044ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc f89c 	bl	8000610 <__REV>
 80044d8:	4603      	mov	r3, r0
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80044dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044de:	f103 0304 	add.w	r3, r3, #4
 80044e2:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80044e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc f891 	bl	8000610 <__REV>
 80044ee:	4603      	mov	r3, r0
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80044f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f4:	f103 0304 	add.w	r3, r3, #4
 80044f8:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fc f886 	bl	8000610 <__REV>
 8004504:	4603      	mov	r3, r0
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8004508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450a:	f103 0304 	add.w	r3, r3, #4
 800450e:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc f87b 	bl	8000610 <__REV>
 800451a:	4603      	mov	r3, r0
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800451e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004520:	f103 0304 	add.w	r3, r3, #4
 8004524:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc f870 	bl	8000610 <__REV>
 8004530:	4603      	mov	r3, r0
 8004532:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8004534:	e000      	b.n	8004538 <CRYP_AES_CTR+0x1ec>
    default:
    break;
 8004536:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fc f867 	bl	8000610 <__REV>
 8004542:	4603      	mov	r3, r0
 8004544:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	f103 0304 	add.w	r3, r3, #4
 800454c:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc f85c 	bl	8000610 <__REV>
 8004558:	4603      	mov	r3, r0
 800455a:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 800455c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455e:	f103 0304 	add.w	r3, r3, #4
 8004562:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fc f851 	bl	8000610 <__REV>
 800456e:	4603      	mov	r3, r0
 8004570:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	f103 0304 	add.w	r3, r3, #4
 8004578:	64fb      	str	r3, [r7, #76]	; 0x4c
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 800457a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc f846 	bl	8000610 <__REV>
 8004584:	4603      	mov	r3, r0
 8004586:	623b      	str	r3, [r7, #32]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8004588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff f84b 	bl	8003628 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <CRYP_AES_CTR+0x256>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004598:	f04f 0304 	mov.w	r3, #4
 800459c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045a0:	e003      	b.n	80045aa <CRYP_AES_CTR+0x25e>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 80045aa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80045ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80045b2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80045b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 80045ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe ff96 	bl	80034f0 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff f899 	bl	8003700 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80045ce:	f7ff f8d7 	bl	8003780 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80045d2:	f04f 0001 	mov.w	r0, #1
 80045d6:	f7ff f8e5 	bl	80037a4 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e0:	e067      	b.n	80046b2 <CRYP_AES_CTR+0x366>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80045e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f902 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 80045ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ee:	f103 0304 	add.w	r3, r3, #4
 80045f2:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80045f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff f8f9 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 80045fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004600:	f103 0304 	add.w	r3, r3, #4
 8004604:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f8f0 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004612:	f103 0304 	add.w	r3, r3, #4
 8004616:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff f8e7 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004624:	f103 0304 	add.w	r3, r3, #4
 8004628:	663b      	str	r3, [r7, #96]	; 0x60
    /* Wait until the complete message has been processed */
    counter = 0;
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004630:	f04f 0010 	mov.w	r0, #16
 8004634:	f7ff fa9c 	bl	8003b70 <CRYP_GetFlagStatus>
 8004638:	4603      	mov	r3, r0
 800463a:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f103 0301 	add.w	r3, r3, #1
 8004642:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d002      	beq.n	8004652 <CRYP_AES_CTR+0x306>
 800464c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1ee      	bne.n	8004630 <CRYP_AES_CTR+0x2e4>

    if (busystatus != RESET)
 8004652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <CRYP_AES_CTR+0x316>
   {
       status = ERROR;
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004660:	e023      	b.n	80046aa <CRYP_AES_CTR+0x35e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004662:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004664:	f7ff f8d4 	bl	8003810 <CRYP_DataOut>
 8004668:	4603      	mov	r3, r0
 800466a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800466c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466e:	f103 0304 	add.w	r3, r3, #4
 8004672:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004674:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004676:	f7ff f8cb 	bl	8003810 <CRYP_DataOut>
 800467a:	4603      	mov	r3, r0
 800467c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800467e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004680:	f103 0304 	add.w	r3, r3, #4
 8004684:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004686:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004688:	f7ff f8c2 	bl	8003810 <CRYP_DataOut>
 800468c:	4603      	mov	r3, r0
 800468e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004692:	f103 0304 	add.w	r3, r3, #4
 8004696:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004698:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800469a:	f7ff f8b9 	bl	8003810 <CRYP_DataOut>
 800469e:	4603      	mov	r3, r0
 80046a0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80046a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a4:	f103 0304 	add.w	r3, r3, #4
 80046a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80046aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ac:	f103 0310 	add.w	r3, r3, #16
 80046b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80046b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d203      	bcs.n	80046c2 <CRYP_AES_CTR+0x376>
 80046ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d18f      	bne.n	80045e2 <CRYP_AES_CTR+0x296>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f7ff f86d 	bl	80037a4 <CRYP_Cmd>

  return status;
 80046ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd90      	pop	{r4, r7, pc}

080046d8 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b097      	sub	sp, #92	; 0x5c
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 80046f4:	f04f 0301 	mov.w	r3, #1
 80046f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint32_t keyaddr    = (uint32_t)Key;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t inputaddr  = (uint32_t)Input;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t outputaddr = (uint32_t)Output;
 8004704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800470e:	f107 0318 	add.w	r3, r7, #24
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe ffca 	bl	80036ac <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d103      	bne.n	8004726 <CRYP_DES_ECB+0x4e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	873b      	strh	r3, [r7, #56]	; 0x38
 8004724:	e002      	b.n	800472c <CRYP_DES_ECB+0x54>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8004726:	f04f 0304 	mov.w	r3, #4
 800472a:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 800472c:	f04f 0310 	mov.w	r3, #16
 8004730:	877b      	strh	r3, [r7, #58]	; 0x3a
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004732:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004736:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&DES_CRYP_InitStructure);
 8004738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe fed7 	bl	80034f0 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fb ff62 	bl	8000610 <__REV>
 800474c:	4603      	mov	r3, r0
 800474e:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8004750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004752:	f103 0304 	add.w	r3, r3, #4
 8004756:	643b      	str	r3, [r7, #64]	; 0x40
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7fb ff57 	bl	8000610 <__REV>
 8004762:	4603      	mov	r3, r0
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8004766:	f107 0318 	add.w	r3, r7, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe ff5c 	bl	8003628 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004770:	f7ff f806 	bl	8003780 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004774:	f04f 0001 	mov.w	r0, #1
 8004778:	f7ff f814 	bl	80037a4 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	64bb      	str	r3, [r7, #72]	; 0x48
 8004782:	e043      	b.n	800480c <CRYP_DES_ECB+0x134>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff f831 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 800478e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004790:	f103 0304 	add.w	r3, r3, #4
 8004794:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff f828 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 80047a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a2:	f103 0304 	add.w	r3, r3, #4
 80047a6:	653b      	str	r3, [r7, #80]	; 0x50

/* Wait until the complete message has been processed */
    counter = 0;
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80047ae:	f04f 0010 	mov.w	r0, #16
 80047b2:	f7ff f9dd 	bl	8003b70 <CRYP_GetFlagStatus>
 80047b6:	4603      	mov	r3, r0
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f103 0301 	add.w	r3, r3, #1
 80047c0:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d002      	beq.n	80047d0 <CRYP_DES_ECB+0xf8>
 80047ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ee      	bne.n	80047ae <CRYP_DES_ECB+0xd6>

    if (busystatus != RESET)
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <CRYP_DES_ECB+0x108>
   {
       status = ERROR;
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80047de:	e011      	b.n	8004804 <CRYP_DES_ECB+0x12c>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80047e0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80047e2:	f7ff f815 	bl	8003810 <CRYP_DataOut>
 80047e6:	4603      	mov	r3, r0
 80047e8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80047ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ec:	f103 0304 	add.w	r3, r3, #4
 80047f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80047f2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80047f4:	f7ff f80c 	bl	8003810 <CRYP_DataOut>
 80047f8:	4603      	mov	r3, r0
 80047fa:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80047fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fe:	f103 0304 	add.w	r3, r3, #4
 8004802:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004806:	f103 0308 	add.w	r3, r3, #8
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
 800480c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d203      	bcs.n	800481c <CRYP_DES_ECB+0x144>
 8004814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1b3      	bne.n	8004784 <CRYP_DES_ECB+0xac>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800481c:	f04f 0000 	mov.w	r0, #0
 8004820:	f7fe ffc0 	bl	80037a4 <CRYP_Cmd>

  return status; 
 8004824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004828:	4618      	mov	r0, r3
 800482a:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	bf00      	nop

08004834 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b09b      	sub	sp, #108	; 0x6c
 8004838:	af00      	add	r7, sp, #0
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8004850:	f04f 0301 	mov.w	r3, #1
 8004854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8004860:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004862:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800486e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe ff1a 	bl	80036ac <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d104      	bne.n	8004888 <CRYP_DES_CBC+0x54>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004886:	e003      	b.n	8004890 <CRYP_DES_CBC+0x5c>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8004888:	f04f 0304 	mov.w	r3, #4
 800488c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 8004890:	f04f 0318 	mov.w	r3, #24
 8004894:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004898:	f04f 0380 	mov.w	r3, #128	; 0x80
 800489c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&DES_CRYP_InitStructure);
 80048a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fe23 	bl	80034f0 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80048aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb feae 	bl	8000610 <__REV>
 80048b4:	4603      	mov	r3, r0
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80048b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ba:	f103 0304 	add.w	r3, r3, #4
 80048be:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80048c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fea3 	bl	8000610 <__REV>
 80048ca:	4603      	mov	r3, r0
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80048ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fea8 	bl	8003628 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80048d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fb fe97 	bl	8000610 <__REV>
 80048e2:	4603      	mov	r3, r0
 80048e4:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	f103 0304 	add.w	r3, r3, #4
 80048ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80048ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fe8c 	bl	8000610 <__REV>
 80048f8:	4603      	mov	r3, r0
 80048fa:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4618      	mov	r0, r3
 8004902:	f7fe fefd 	bl	8003700 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004906:	f7fe ff3b 	bl	8003780 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800490a:	f04f 0001 	mov.w	r0, #1
 800490e:	f7fe ff49 	bl	80037a4 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	65bb      	str	r3, [r7, #88]	; 0x58
 8004918:	e043      	b.n	80049a2 <CRYP_DES_CBC+0x16e>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800491a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe ff66 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004926:	f103 0304 	add.w	r3, r3, #4
 800492a:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800492c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe ff5d 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004938:	f103 0304 	add.w	r3, r3, #4
 800493c:	663b      	str	r3, [r7, #96]	; 0x60

    /* Wait until the complete message has been processed */
    counter = 0;
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004944:	f04f 0010 	mov.w	r0, #16
 8004948:	f7ff f912 	bl	8003b70 <CRYP_GetFlagStatus>
 800494c:	4603      	mov	r3, r0
 800494e:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f103 0301 	add.w	r3, r3, #1
 8004956:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495e:	d002      	beq.n	8004966 <CRYP_DES_CBC+0x132>
 8004960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ee      	bne.n	8004944 <CRYP_DES_CBC+0x110>

    if (busystatus != RESET)
 8004966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <CRYP_DES_CBC+0x142>
   {
       status = ERROR;
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004974:	e011      	b.n	800499a <CRYP_DES_CBC+0x166>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004976:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004978:	f7fe ff4a 	bl	8003810 <CRYP_DataOut>
 800497c:	4603      	mov	r3, r0
 800497e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004982:	f103 0304 	add.w	r3, r3, #4
 8004986:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004988:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800498a:	f7fe ff41 	bl	8003810 <CRYP_DataOut>
 800498e:	4603      	mov	r3, r0
 8004990:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004994:	f103 0304 	add.w	r3, r3, #4
 8004998:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800499a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800499c:	f103 0308 	add.w	r3, r3, #8
 80049a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d203      	bcs.n	80049b2 <CRYP_DES_CBC+0x17e>
 80049aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1b3      	bne.n	800491a <CRYP_DES_CBC+0xe6>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f7fe fef5 	bl	80037a4 <CRYP_Cmd>

  return status; 
 80049ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049be:	4618      	mov	r0, r3
 80049c0:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd90      	pop	{r4, r7, pc}

080049c8 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b097      	sub	sp, #92	; 0x5c
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 80049e4:	f04f 0301 	mov.w	r3, #1
 80049e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint32_t keyaddr    = (uint32_t)Key;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t inputaddr  = (uint32_t)Input;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t outputaddr = (uint32_t)Output;
 80049f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 80049fe:	f107 0318 	add.w	r3, r7, #24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fe52 	bl	80036ac <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d103      	bne.n	8004a16 <CRYP_TDES_ECB+0x4e>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a14:	e002      	b.n	8004a1c <CRYP_TDES_ECB+0x54>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004a16:	f04f 0304 	mov.w	r3, #4
 8004a1a:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	877b      	strh	r3, [r7, #58]	; 0x3a
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004a22:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004a26:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&TDES_CRYP_InitStructure);
 8004a28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fd5f 	bl	80034f0 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fb fdea 	bl	8000610 <__REV>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8004a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a42:	f103 0304 	add.w	r3, r3, #4
 8004a46:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fddf 	bl	8000610 <__REV>
 8004a52:	4603      	mov	r3, r0
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8004a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a58:	f103 0304 	add.w	r3, r3, #4
 8004a5c:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fb fdd4 	bl	8000610 <__REV>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8004a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6e:	f103 0304 	add.w	r3, r3, #4
 8004a72:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fb fdc9 	bl	8000610 <__REV>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8004a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a84:	f103 0304 	add.w	r3, r3, #4
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fb fdbe 	bl	8000610 <__REV>
 8004a94:	4603      	mov	r3, r0
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8004a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9a:	f103 0304 	add.w	r3, r3, #4
 8004a9e:	643b      	str	r3, [r7, #64]	; 0x40
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fdb3 	bl	8000610 <__REV>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8004aae:	f107 0318 	add.w	r3, r7, #24
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fdb8 	bl	8003628 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004ab8:	f7fe fe62 	bl	8003780 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004abc:	f04f 0001 	mov.w	r0, #1
 8004ac0:	f7fe fe70 	bl	80037a4 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aca:	e043      	b.n	8004b54 <CRYP_TDES_ECB+0x18c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe fe8d 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad8:	f103 0304 	add.w	r3, r3, #4
 8004adc:	653b      	str	r3, [r7, #80]	; 0x50
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fe84 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aea:	f103 0304 	add.w	r3, r3, #4
 8004aee:	653b      	str	r3, [r7, #80]	; 0x50

    /* Wait until the complete message has been processed */
    counter = 0;
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004af6:	f04f 0010 	mov.w	r0, #16
 8004afa:	f7ff f839 	bl	8003b70 <CRYP_GetFlagStatus>
 8004afe:	4603      	mov	r3, r0
 8004b00:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f103 0301 	add.w	r3, r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b10:	d002      	beq.n	8004b18 <CRYP_TDES_ECB+0x150>
 8004b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ee      	bne.n	8004af6 <CRYP_TDES_ECB+0x12e>

    if (busystatus != RESET)
 8004b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <CRYP_TDES_ECB+0x160>
    {
       status = ERROR;
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004b26:	e011      	b.n	8004b4c <CRYP_TDES_ECB+0x184>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004b28:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004b2a:	f7fe fe71 	bl	8003810 <CRYP_DataOut>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b34:	f103 0304 	add.w	r3, r3, #4
 8004b38:	64fb      	str	r3, [r7, #76]	; 0x4c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004b3a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004b3c:	f7fe fe68 	bl	8003810 <CRYP_DataOut>
 8004b40:	4603      	mov	r3, r0
 8004b42:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b46:	f103 0304 	add.w	r3, r3, #4
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b4e:	f103 0308 	add.w	r3, r3, #8
 8004b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d203      	bcs.n	8004b64 <CRYP_TDES_ECB+0x19c>
 8004b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1b3      	bne.n	8004acc <CRYP_TDES_ECB+0x104>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004b64:	f04f 0000 	mov.w	r0, #0
 8004b68:	f7fe fe1c 	bl	80037a4 <CRYP_Cmd>

  return status; 
 8004b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd90      	pop	{r4, r7, pc}
 8004b7a:	bf00      	nop

08004b7c <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b09b      	sub	sp, #108	; 0x6c
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4603      	mov	r3, r0
 8004b8a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8004b98:	f04f 0301 	mov.w	r3, #1
 8004b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8004ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004baa:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t i = 0;
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8004bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fd76 	bl	80036ac <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d104      	bne.n	8004bd0 <CRYP_TDES_CBC+0x54>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bce:	e003      	b.n	8004bd8 <CRYP_TDES_CBC+0x5c>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004bd0:	f04f 0304 	mov.w	r3, #4
 8004bd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8004bd8:	f04f 0308 	mov.w	r3, #8
 8004bdc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004be0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004be4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  CRYP_Init(&TDES_CRYP_InitStructure);
 8004be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fc7f 	bl	80034f0 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fb fd0a 	bl	8000610 <__REV>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8004c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c02:	f103 0304 	add.w	r3, r3, #4
 8004c06:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fcff 	bl	8000610 <__REV>
 8004c12:	4603      	mov	r3, r0
 8004c14:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8004c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c18:	f103 0304 	add.w	r3, r3, #4
 8004c1c:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8004c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fb fcf4 	bl	8000610 <__REV>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8004c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c2e:	f103 0304 	add.w	r3, r3, #4
 8004c32:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8004c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fb fce9 	bl	8000610 <__REV>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8004c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c44:	f103 0304 	add.w	r3, r3, #4
 8004c48:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8004c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fb fcde 	bl	8000610 <__REV>
 8004c54:	4603      	mov	r3, r0
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 8004c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c5a:	f103 0304 	add.w	r3, r3, #4
 8004c5e:	653b      	str	r3, [r7, #80]	; 0x50
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8004c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fb fcd3 	bl	8000610 <__REV>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8004c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fcd8 	bl	8003628 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fb fcc7 	bl	8000610 <__REV>
 8004c82:	4603      	mov	r3, r0
 8004c84:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8004c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c88:	f103 0304 	add.w	r3, r3, #4
 8004c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8004c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fb fcbc 	bl	8000610 <__REV>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe fd2d 	bl	8003700 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004ca6:	f7fe fd6b 	bl	8003780 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004caa:	f04f 0001 	mov.w	r0, #1
 8004cae:	f7fe fd79 	bl	80037a4 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cb8:	e043      	b.n	8004d42 <CRYP_TDES_CBC+0x1c6>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fd96 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc6:	f103 0304 	add.w	r3, r3, #4
 8004cca:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fd8d 	bl	80037f0 <CRYP_DataIn>
    inputaddr+=4;
 8004cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd8:	f103 0304 	add.w	r3, r3, #4
 8004cdc:	663b      	str	r3, [r7, #96]	; 0x60

    /* Wait until the complete message has been processed */
    counter = 0;
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8004ce4:	f04f 0010 	mov.w	r0, #16
 8004ce8:	f7fe ff42 	bl	8003b70 <CRYP_GetFlagStatus>
 8004cec:	4603      	mov	r3, r0
 8004cee:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f103 0301 	add.w	r3, r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d002      	beq.n	8004d06 <CRYP_TDES_CBC+0x18a>
 8004d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ee      	bne.n	8004ce4 <CRYP_TDES_CBC+0x168>

    if (busystatus != RESET)
 8004d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <CRYP_TDES_CBC+0x19a>
   {
       status = ERROR;
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004d14:	e011      	b.n	8004d3a <CRYP_TDES_CBC+0x1be>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004d16:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004d18:	f7fe fd7a 	bl	8003810 <CRYP_DataOut>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d22:	f103 0304 	add.w	r3, r3, #4
 8004d26:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004d28:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004d2a:	f7fe fd71 	bl	8003810 <CRYP_DataOut>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d34:	f103 0304 	add.w	r3, r3, #4
 8004d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d3c:	f103 0308 	add.w	r3, r3, #8
 8004d40:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <CRYP_TDES_CBC+0x1d6>
 8004d4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1b3      	bne.n	8004cba <CRYP_TDES_CBC+0x13e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f7fe fd25 	bl	80037a4 <CRYP_Cmd>

  return status; 
 8004d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd90      	pop	{r4, r7, pc}

08004d68 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8004d6c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004d70:	f04f 0101 	mov.w	r1, #1
 8004d74:	f005 fa36 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8004d78:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	f005 fa30 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
}
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8004d9e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004da2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	ea6f 0303 	mvn.w	r3, r3
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8004dcc:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8004de4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004de8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	601a      	str	r2, [r3, #0]
}
 8004df0:	f107 0714 	add.w	r7, r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop

08004dfc <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]
}
 8004e24:	f107 070c 	add.w	r7, r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop

08004e30 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d011      	beq.n	8004e66 <DAC_Cmd+0x36>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8004e42:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004e46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004e4a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004e4e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	4611      	mov	r1, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	f04f 0001 	mov.w	r0, #1
 8004e5c:	fa00 f202 	lsl.w	r2, r0, r2
 8004e60:	430a      	orrs	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e012      	b.n	8004e8c <DAC_Cmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8004e66:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004e6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004e6e:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004e72:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	f04f 0001 	mov.w	r0, #1
 8004e80:	fa00 f202 	lsl.w	r2, r0, r2
 8004e84:	ea6f 0202 	mvn.w	r2, r2
 8004e88:	400a      	ands	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]
  }
}
 8004e8c:	f107 070c 	add.w	r7, r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d013      	beq.n	8004ed2 <DAC_SoftwareTriggerCmd+0x3a>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8004eaa:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004eae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004eb2:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004eb6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004eba:	6852      	ldr	r2, [r2, #4]
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8004ec4:	f04f 0001 	mov.w	r0, #1
 8004ec8:	fa00 f202 	lsl.w	r2, r0, r2
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
 8004ed0:	e014      	b.n	8004efc <DAC_SoftwareTriggerCmd+0x64>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8004ed2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004ed6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004eda:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004ede:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ee2:	6852      	ldr	r2, [r2, #4]
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8004eec:	f04f 0001 	mov.w	r0, #1
 8004ef0:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef4:	ea6f 0202 	mvn.w	r2, r2
 8004ef8:	400a      	ands	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }
}
 8004efc:	f107 070c 	add.w	r7, r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8004f18:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004f1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004f20:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004f24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004f28:	6852      	ldr	r2, [r2, #4]
 8004f2a:	f042 0203 	orr.w	r2, r2, #3
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	e00b      	b.n	8004f4a <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8004f32:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004f36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004f3a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004f3e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004f42:	6852      	ldr	r2, [r2, #4]
 8004f44:	f022 0203 	bic.w	r2, r2, #3
 8004f48:	605a      	str	r2, [r3, #4]
  }
}
 8004f4a:	f107 070c 	add.w	r7, r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d010      	beq.n	8004f8a <DAC_WaveGenerationCmd+0x36>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8004f68:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004f6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004f70:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004f74:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	68b8      	ldr	r0, [r7, #8]
 8004f80:	fa00 f202 	lsl.w	r2, r0, r2
 8004f84:	430a      	orrs	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e011      	b.n	8004fae <DAC_WaveGenerationCmd+0x5a>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8004f8a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004f8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004f92:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004f96:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	68b8      	ldr	r0, [r7, #8]
 8004fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fa6:	ea6f 0202 	mvn.w	r2, r2
 8004faa:	400a      	ands	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
  }
}
 8004fae:	f107 0714 	add.w	r7, r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8004fca:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004fce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	18d3      	adds	r3, r2, r3
 8004fda:	f103 0308 	add.w	r3, r3, #8
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	887a      	ldrh	r2, [r7, #2]
 8004fe4:	601a      	str	r2, [r3, #0]
}
 8004fe6:	f107 0714 	add.w	r7, r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8005002:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005006:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800500a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	18d3      	adds	r3, r2, r3
 8005012:	f103 0314 	add.w	r3, r3, #20
 8005016:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	887a      	ldrh	r2, [r7, #2]
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	f107 0714 	add.w	r7, r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	460a      	mov	r2, r1
 8005034:	807a      	strh	r2, [r7, #2]
 8005036:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b08      	cmp	r3, #8
 8005048:	d106      	bne.n	8005058 <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	ea4f 2203 	mov.w	r2, r3, lsl #8
 8005050:	883b      	ldrh	r3, [r7, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	e005      	b.n	8005064 <DAC_SetDualChannelData+0x3c>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8005058:	887b      	ldrh	r3, [r7, #2]
 800505a:	ea4f 4203 	mov.w	r2, r3, lsl #16
 800505e:	883b      	ldrh	r3, [r7, #0]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8005064:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005068:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800506c:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	18d3      	adds	r3, r2, r3
 8005074:	f103 0320 	add.w	r3, r3, #32
 8005078:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]
}
 8005080:	f107 0714 	add.w	r7, r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop

0800508c <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 800509a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800509e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80050a2:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	ea4f 0293 	mov.w	r2, r3, lsr #2
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	18d3      	adds	r3, r2, r3
 80050ae:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80050b2:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	f107 0714 	add.w	r7, r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop

080050c8 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d011      	beq.n	80050fe <DAC_DMACmd+0x36>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80050da:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80050de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80050e2:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80050e6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	4611      	mov	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80050f4:	fa00 f202 	lsl.w	r2, r0, r2
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e012      	b.n	8005124 <DAC_DMACmd+0x5c>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 80050fe:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005102:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005106:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800510a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	4611      	mov	r1, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005118:	fa00 f202 	lsl.w	r2, r0, r2
 800511c:	ea6f 0202 	mvn.w	r2, r2
 8005120:	400a      	ands	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
  }
}
 8005124:	f107 070c 	add.w	r7, r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop

08005130 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <DAC_ITConfig+0x36>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8005144:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005148:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800514c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8005150:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	4611      	mov	r1, r2
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	68b8      	ldr	r0, [r7, #8]
 800515c:	fa00 f202 	lsl.w	r2, r0, r2
 8005160:	430a      	orrs	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e011      	b.n	800518a <DAC_ITConfig+0x5a>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8005166:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800516a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800516e:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8005172:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	4611      	mov	r1, r2
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	68b8      	ldr	r0, [r7, #8]
 800517e:	fa00 f202 	lsl.w	r2, r0, r2
 8005182:	ea6f 0202 	mvn.w	r2, r2
 8005186:	400a      	ands	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
  }
}
 800518a:	f107 0714 	add.w	r7, r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 80051a4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80051a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	fa01 f303 	lsl.w	r3, r1, r3
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <DAC_GetFlagStatus+0x32>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 80051be:	f04f 0301 	mov.w	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
 80051c4:	e002      	b.n	80051cc <DAC_GetFlagStatus+0x38>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	f107 0714 	add.w	r7, r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop

080051dc <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 80051e6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80051ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	fa01 f202 	lsl.w	r2, r1, r2
 80051f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80051f8:	f107 070c 	add.w	r7, r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop

08005204 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 800521a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800521e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	4013      	ands	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8005232:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8005236:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	461a      	mov	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d006      	beq.n	800525a <DAC_GetITStatus+0x56>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <DAC_GetITStatus+0x56>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8005252:	f04f 0301 	mov.w	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
 8005258:	e002      	b.n	8005260 <DAC_GetITStatus+0x5c>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	f107 0714 	add.w	r7, r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 800527a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800527e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6839      	ldr	r1, [r7, #0]
 8005286:	fa01 f202 	lsl.w	r2, r1, r2
 800528a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800528c:	f107 070c 	add.w	r7, r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop

08005298 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 800529c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052a0:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop

080052b4 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 80052b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052bc:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80052c6:	ea4f 5313 	mov.w	r3, r3, lsr #20
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop

080052d4 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <DBGMCU_Config+0x2e>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 80052e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052ea:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80052ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052f2:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80052f6:	6852      	ldr	r2, [r2, #4]
 80052f8:	4611      	mov	r1, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	e00e      	b.n	8005320 <DBGMCU_Config+0x4c>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8005302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005306:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800530a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800530e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8005312:	6852      	ldr	r2, [r2, #4]
 8005314:	4611      	mov	r1, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	ea6f 0202 	mvn.w	r2, r2
 800531c:	400a      	ands	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
  }
}
 8005320:	f107 070c 	add.w	r7, r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <DBGMCU_APB1PeriphConfig+0x2e>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800533e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005342:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8005346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800534a:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800534e:	6892      	ldr	r2, [r2, #8]
 8005350:	4611      	mov	r1, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	430a      	orrs	r2, r1
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	e00e      	b.n	8005378 <DBGMCU_APB1PeriphConfig+0x4c>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800535a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800535e:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8005362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005366:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800536a:	6892      	ldr	r2, [r2, #8]
 800536c:	4611      	mov	r1, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	ea6f 0202 	mvn.w	r2, r2
 8005374:	400a      	ands	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
  }
}
 8005378:	f107 070c 	add.w	r7, r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop

08005384 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <DBGMCU_APB2PeriphConfig+0x2e>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8005396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539a:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800539e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053a2:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80053a6:	68d2      	ldr	r2, [r2, #12]
 80053a8:	4611      	mov	r1, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	60da      	str	r2, [r3, #12]
 80053b0:	e00e      	b.n	80053d0 <DBGMCU_APB2PeriphConfig+0x4c>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 80053b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b6:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80053ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053be:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80053c2:	68d2      	ldr	r2, [r2, #12]
 80053c4:	4611      	mov	r1, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	ea6f 0202 	mvn.w	r2, r2
 80053cc:	400a      	ands	r2, r1
 80053ce:	60da      	str	r2, [r3, #12]
  }
}
 80053d0:	f107 070c 	add.w	r7, r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop

080053dc <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005404:	f04f 021f 	mov.w	r2, #31
 8005408:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8005484:	f023 0312 	bic.w	r3, r3, #18
 8005488:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8005492:	4313      	orrs	r3, r2
 8005494:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800549a:	4313      	orrs	r3, r2
 800549c:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80054aa:	4313      	orrs	r3, r2
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	895b      	ldrh	r3, [r3, #10]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 80054ba:	4313      	orrs	r3, r2
 80054bc:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]
}
 80054d0:	f107 0714 	add.w	r7, r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop

080054dc <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	819a      	strh	r2, [r3, #12]
}
 800551c:	f107 070c 	add.w	r7, r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop

08005528 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	8852      	ldrh	r2, [r2, #2]
 800553c:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	8812      	ldrh	r2, [r2, #0]
 8005542:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8005546:	430a      	orrs	r2, r1
 8005548:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	88d2      	ldrh	r2, [r2, #6]
 8005556:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	8892      	ldrh	r2, [r2, #4]
 800555c:	ea4f 4202 	mov.w	r2, r2, lsl #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8005560:	430a      	orrs	r2, r1
 8005562:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8005564:	f107 070c 	add.w	r7, r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop

08005570 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00c      	beq.n	800559a <DCMI_CROPCmd+0x2a>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	f042 0204 	orr.w	r2, r2, #4
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e00b      	b.n	80055b2 <DCMI_CROPCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	f022 0204 	bic.w	r2, r2, #4
 80055b0:	601a      	str	r2, [r3, #0]
  }
}
 80055b2:	f107 070c 	add.w	r7, r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	7812      	ldrb	r2, [r2, #0]
 80055d0:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	7852      	ldrb	r2, [r2, #1]
 80055d6:	ea4f 2202 	mov.w	r2, r2, lsl #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80055da:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	7892      	ldrb	r2, [r2, #2]
 80055e0:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 80055e4:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	78d2      	ldrb	r2, [r2, #3]
 80055ea:	ea4f 6202 	mov.w	r2, r2, lsl #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80055ee:	430a      	orrs	r2, r1
 80055f0:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 80055f2:	f107 070c 	add.w	r7, r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00c      	beq.n	8005626 <DCMI_JPEGCmd+0x2a>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	f042 0208 	orr.w	r2, r2, #8
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e00b      	b.n	800563e <DCMI_JPEGCmd+0x42>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	f022 0208 	bic.w	r2, r2, #8
 800563c:	601a      	str	r2, [r3, #0]
  }
}
 800563e:	f107 070c 	add.w	r7, r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <DCMI_Cmd+0x2a>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e00b      	b.n	800568a <DCMI_Cmd+0x42>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005688:	601a      	str	r2, [r3, #0]
  }
}
 800568a:	f107 070c 	add.w	r7, r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00c      	beq.n	80056be <DCMI_CaptureCmd+0x2a>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e00b      	b.n	80056d6 <DCMI_CaptureCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
  }
}
 80056d6:	f107 070c 	add.w	r7, r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  return DCMI->DR;
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop

080056f8 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	80fa      	strh	r2, [r7, #6]
 8005704:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005706:	797b      	ldrb	r3, [r7, #5]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <DCMI_ITConfig+0x30>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800571c:	68d2      	ldr	r2, [r2, #12]
 800571e:	4611      	mov	r1, r2
 8005720:	88fa      	ldrh	r2, [r7, #6]
 8005722:	430a      	orrs	r2, r1
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e00f      	b.n	8005748 <DCMI_ITConfig+0x50>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005738:	68d2      	ldr	r2, [r2, #12]
 800573a:	4611      	mov	r1, r2
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	ea6f 0202 	mvn.w	r2, r2
 8005742:	b292      	uxth	r2, r2
 8005744:	400a      	ands	r2, r1
 8005746:	60da      	str	r2, [r3, #12]
  }  
}
 8005748:	f107 070c 	add.w	r7, r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop

08005754 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8005770:	b29b      	uxth	r3, r3
 8005772:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x01) /* The FLAG is in RISR register */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d106      	bne.n	8005788 <DCMI_GetFlagStatus+0x34>
  {
    tempreg= DCMI->RISR;
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e00f      	b.n	80057a8 <DCMI_GetFlagStatus+0x54>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d106      	bne.n	800579c <DCMI_GetFlagStatus+0x48>
  {
    tempreg = DCMI->SR;
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e005      	b.n	80057a8 <DCMI_GetFlagStatus+0x54>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <DCMI_GetFlagStatus+0x66>
  {
    bitstatus = SET;
 80057b2:	f04f 0301 	mov.w	r3, #1
 80057b6:	75fb      	strb	r3, [r7, #23]
 80057b8:	e002      	b.n	80057c0 <DCMI_GetFlagStatus+0x6c>
  }
  else
  {
    bitstatus = RESET;
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	f107 071c 	add.w	r7, r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop

080057d0 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	615a      	str	r2, [r3, #20]
}
 80057e6:	f107 070c 	add.w	r7, r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	461a      	mov	r2, r3
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	4013      	ands	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <DCMI_GetITStatus+0x36>
  {
    bitstatus = SET;
 800581e:	f04f 0301 	mov.w	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
 8005824:	e002      	b.n	800582c <DCMI_GetITStatus+0x3c>
  }
  else
  {
    bitstatus = RESET;
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	f107 0714 	add.w	r7, r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop

0800583c <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	615a      	str	r2, [r3, #20]
}
 8005852:	f107 070c 	add.w	r7, r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f023 0201 	bic.w	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f04f 0221 	mov.w	r2, #33	; 0x21
 800589e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	f246 0310 	movw	r3, #24592	; 0x6010
 80058a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d107      	bne.n	80058be <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80058ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80058b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058b6:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	e0eb      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	f246 0328 	movw	r3, #24616	; 0x6028
 80058c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d107      	bne.n	80058dc <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80058cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80058d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058d4:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80058d8:	609a      	str	r2, [r3, #8]
 80058da:	e0dc      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	f246 0340 	movw	r3, #24640	; 0x6040
 80058e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d107      	bne.n	80058fa <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80058ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80058ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058f2:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80058f6:	609a      	str	r2, [r3, #8]
 80058f8:	e0cd      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	f246 0358 	movw	r3, #24664	; 0x6058
 8005900:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005904:	429a      	cmp	r2, r3
 8005906:	d107      	bne.n	8005918 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8005908:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800590c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005910:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005914:	609a      	str	r2, [r3, #8]
 8005916:	e0be      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	f246 0370 	movw	r3, #24688	; 0x6070
 800591e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005922:	429a      	cmp	r2, r3
 8005924:	d109      	bne.n	800593a <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8005926:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800592a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800592e:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8005932:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	e0ad      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	f246 0388 	movw	r3, #24712	; 0x6088
 8005940:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005944:	429a      	cmp	r2, r3
 8005946:	d109      	bne.n	800595c <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8005948:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800594c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005950:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005954:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005958:	60da      	str	r2, [r3, #12]
 800595a:	e09c      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8005962:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005966:	429a      	cmp	r2, r3
 8005968:	d109      	bne.n	800597e <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800596a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800596e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800597a:	60da      	str	r2, [r3, #12]
 800597c:	e08b      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8005984:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005988:	429a      	cmp	r2, r3
 800598a:	d107      	bne.n	800599c <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800598c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005990:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005994:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	e07c      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	f246 4310 	movw	r3, #25616	; 0x6410
 80059a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d107      	bne.n	80059ba <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80059aa:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80059ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059b2:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	e06d      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	f246 4328 	movw	r3, #25640	; 0x6428
 80059c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d107      	bne.n	80059d8 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80059c8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80059cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059d0:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80059d4:	609a      	str	r2, [r3, #8]
 80059d6:	e05e      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	f246 4340 	movw	r3, #25664	; 0x6440
 80059de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d107      	bne.n	80059f6 <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80059e6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80059ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059ee:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	e04f      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	f246 4358 	movw	r3, #25688	; 0x6458
 80059fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d107      	bne.n	8005a14 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8005a04:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a0c:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005a10:	609a      	str	r2, [r3, #8]
 8005a12:	e040      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	f246 4370 	movw	r3, #25712	; 0x6470
 8005a1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d109      	bne.n	8005a36 <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8005a22:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005a26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a2a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8005a2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e02f      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	f246 4388 	movw	r3, #25736	; 0x6488
 8005a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d109      	bne.n	8005a58 <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8005a44:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005a48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a4c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005a50:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	e01e      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8005a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d109      	bne.n	8005a7a <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8005a66:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005a6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	e00d      	b.n	8005a96 <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8005a80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d106      	bne.n	8005a96 <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8005a88:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a90:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005a94:	60da      	str	r2, [r3, #12]
    }
  }
}
 8005a96:	f107 070c 	add.w	r7, r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f248 033f 	movw	r3, #32831	; 0x803f
 8005abc:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005ad2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005ade:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005aea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005af6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0307 	bic.w	r3, r3, #7
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	4313      	orrs	r3, r2
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60da      	str	r2, [r3, #12]
}
 8005b46:	f107 0714 	add.w	r7, r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005bd0:	f107 070c 	add.w	r7, r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f043 0201 	orr.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e005      	b.n	8005c08 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 0201 	bic.w	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
  }
}
 8005c08:	f107 070c 	add.w	r7, r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop

08005c14 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e005      	b.n	8005c3e <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
  }
}
 8005c3e:	f107 070c 	add.w	r7, r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d006      	beq.n	8005c66 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e005      	b.n	8005c72 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 0220 	bic.w	r2, r3, #32
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]
  }
}
 8005c72:	f107 070c 	add.w	r7, r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8005c88:	887a      	ldrh	r2, [r7, #2]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	605a      	str	r2, [r3, #4]
}
 8005c8e:	f107 070c 	add.w	r7, r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	b29b      	uxth	r3, r3
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f107 070c 	add.w	r7, r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e005      	b.n	8005ce0 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	611a      	str	r2, [r3, #16]
}
 8005ce6:	f107 0714 	add.w	r7, r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d006      	beq.n	8005d10 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e005      	b.n	8005d1c <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
  }
}
 8005d1c:	f107 070c 	add.w	r7, r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	611a      	str	r2, [r3, #16]
 8005d40:	e002      	b.n	8005d48 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	60da      	str	r2, [r3, #12]
  }
}
 8005d48:	f107 0714 	add.w	r7, r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop

08005d54 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8005d6e:	f04f 0301 	mov.w	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e002      	b.n	8005d7c <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8005d76:	f04f 0300 	mov.w	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f107 0714 	add.w	r7, r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop

08005d8c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8005da8:	f04f 0301 	mov.w	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
 8005dae:	e002      	b.n	8005db6 <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	f107 0714 	add.w	r7, r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dda:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	f107 0714 	add.w	r7, r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop

08005dec <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	f246 430f 	movw	r3, #25615	; 0x640f
 8005e08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d805      	bhi.n	8005e1c <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005e10:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	e004      	b.n	8005e26 <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005e1c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005e20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e24:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e002      	b.n	8005e3e <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005e44:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8005e56:	f04f 0301 	mov.w	r3, #1
 8005e5a:	75fb      	strb	r3, [r7, #23]
 8005e5c:	e002      	b.n	8005e64 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	f107 071c 	add.w	r7, r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop

08005e74 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	f246 430f 	movw	r3, #25615	; 0x640f
 8005e84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d805      	bhi.n	8005e98 <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005e8c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e004      	b.n	8005ea2 <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005e98:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005e9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005eb2:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	60d3      	str	r3, [r2, #12]
 8005ebc:	e007      	b.n	8005ece <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005ec4:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8005ec8:	4013      	ands	r3, r2
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	6093      	str	r3, [r2, #8]
  }    
}
 8005ece:	f107 0714 	add.w	r7, r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00f      	beq.n	8005f10 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	615a      	str	r2, [r3, #20]
 8005f02:	e005      	b.n	8005f10 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d017      	beq.n	8005f46 <DMA_ITConfig+0x6e>
  {
    if (NewState != DISABLE)
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <DMA_ITConfig+0x58>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f003 031e 	and.w	r3, r3, #30
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e00a      	b.n	8005f46 <DMA_ITConfig+0x6e>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f003 031e 	and.w	r3, r3, #30
 8005f3c:	ea6f 0303 	mvn.w	r3, r3
 8005f40:	401a      	ands	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8005f46:	f107 0714 	add.w	r7, r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	f246 430f 	movw	r3, #25615	; 0x640f
 8005f72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d805      	bhi.n	8005f86 <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005f7a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005f7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	e004      	b.n	8005f90 <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005f86:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005f8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f8e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	f640 733c 	movw	r3, #3900	; 0xf3c
 8005f96:	f6c0 733c 	movt	r3, #3900	; 0xf3c
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <DMA_GetITStatus+0x6a>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005fa6:	f003 031e 	and.w	r3, r3, #30
 8005faa:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	e004      	b.n	8005fc4 <DMA_GetITStatus+0x74>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <DMA_GetITStatus+0x86>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e002      	b.n	8005fdc <DMA_GetITStatus+0x8c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005fe2:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <DMA_GetITStatus+0xb2>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <DMA_GetITStatus+0xb2>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8005ffa:	f04f 0301 	mov.w	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
 8006000:	e002      	b.n	8006008 <DMA_GetITStatus+0xb8>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8006008:	7dfb      	ldrb	r3, [r7, #23]
}
 800600a:	4618      	mov	r0, r3
 800600c:	f107 071c 	add.w	r7, r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	f246 430f 	movw	r3, #25615	; 0x640f
 8006028:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800602c:	429a      	cmp	r2, r3
 800602e:	d805      	bhi.n	800603c <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8006030:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e004      	b.n	8006046 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800603c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8006040:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006044:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <DMA_ClearITPendingBit+0x4a>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	f640 737d 	movw	r3, #3965	; 0xf7d
 8006056:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800605a:	4013      	ands	r3, r2
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	60d3      	str	r3, [r2, #12]
 8006060:	e007      	b.n	8006072 <DMA_ClearITPendingBit+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	f640 737d 	movw	r3, #3965	; 0xf7d
 8006068:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800606c:	4013      	ands	r3, r2
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	6093      	str	r3, [r2, #8]
  }   
}
 8006072:	f107 0714 	add.w	r7, r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8006080:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006084:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800608e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006092:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800609c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80060aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80060b8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060c4:	f2c0 027f 	movt	r2, #127	; 0x7f
 80060c8:	615a      	str	r2, [r3, #20]
}
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80060de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060e6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	799b      	ldrb	r3, [r3, #6]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d07e      	beq.n	80061ee <EXTI_Init+0x11e>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80060f0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060f8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80060fc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	4611      	mov	r1, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	ea6f 0202 	mvn.w	r2, r2
 800610c:	400a      	ands	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8006110:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006114:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006118:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800611c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006120:	6852      	ldr	r2, [r2, #4]
 8006122:	4611      	mov	r1, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	ea6f 0202 	mvn.w	r2, r2
 800612c:	400a      	ands	r2, r1
 800612e:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	791b      	ldrb	r3, [r3, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	18d3      	adds	r3, r2, r3
 8006138:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	6811      	ldr	r1, [r2, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006148:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800614c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006150:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006154:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006158:	6892      	ldr	r2, [r2, #8]
 800615a:	4611      	mov	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	ea6f 0202 	mvn.w	r2, r2
 8006164:	400a      	ands	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8006168:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800616c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006170:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006174:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006178:	68d2      	ldr	r2, [r2, #12]
 800617a:	4611      	mov	r1, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	ea6f 0202 	mvn.w	r2, r2
 8006184:	400a      	ands	r2, r1
 8006186:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	795b      	ldrb	r3, [r3, #5]
 800618c:	2b10      	cmp	r3, #16
 800618e:	d11c      	bne.n	80061ca <EXTI_Init+0xfa>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8006190:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006194:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006198:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800619c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80061a0:	6892      	ldr	r2, [r2, #8]
 80061a2:	4611      	mov	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80061ac:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80061b4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80061b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80061bc:	68d2      	ldr	r2, [r2, #12]
 80061be:	4611      	mov	r1, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	60da      	str	r2, [r3, #12]
 80061c8:	e01f      	b.n	800620a <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80061ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80061d2:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	795b      	ldrb	r3, [r3, #5]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	18d3      	adds	r3, r2, r3
 80061dc:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	6811      	ldr	r1, [r2, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e00d      	b.n	800620a <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	791b      	ldrb	r3, [r3, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	18d3      	adds	r3, r2, r3
 80061f6:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	6811      	ldr	r1, [r2, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	ea6f 0202 	mvn.w	r2, r2
 8006206:	400a      	ands	r2, r1
 8006208:	601a      	str	r2, [r3, #0]
  }
}
 800620a:	f107 0714 	add.w	r7, r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr

08006214 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f04f 020c 	mov.w	r2, #12
 8006232:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	719a      	strb	r2, [r3, #6]
}
 800623c:	f107 070c 	add.w	r7, r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop

08006248 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8006250:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006254:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006258:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800625c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006260:	6912      	ldr	r2, [r2, #16]
 8006262:	4611      	mov	r1, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	430a      	orrs	r2, r1
 8006268:	611a      	str	r2, [r3, #16]
}
 800626a:	f107 070c 	add.w	r7, r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8006282:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006286:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <EXTI_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8006296:	f04f 0301 	mov.w	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	e002      	b.n	80062a4 <EXTI_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	f107 0714 	add.w	r7, r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop

080062b4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80062bc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	615a      	str	r2, [r3, #20]
}
 80062c8:	f107 070c 	add.w	r7, r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop

080062d4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80062e8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4013      	ands	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80062fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	461a      	mov	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d006      	beq.n	800631c <EXTI_GetITStatus+0x48>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <EXTI_GetITStatus+0x48>
  {
    bitstatus = SET;
 8006314:	f04f 0301 	mov.w	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
 800631a:	e002      	b.n	8006322 <EXTI_GetITStatus+0x4e>
  }
  else
  {
    bitstatus = RESET;
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006322:	7bfb      	ldrb	r3, [r7, #15]
}
 8006324:	4618      	mov	r0, r3
 8006326:	f107 0714 	add.w	r7, r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8006338:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800633c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	615a      	str	r2, [r3, #20]
}
 8006344:	f107 070c 	add.w	r7, r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop

08006350 <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8006358:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800635c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]
}
 8006366:	f107 070c 	add.w	r7, r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8006380:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006384:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006388:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800638c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006390:	6812      	ldr	r2, [r2, #0]
 8006392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	e00b      	b.n	80063b2 <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800639a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800639e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063a2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80063a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b0:	601a      	str	r2, [r3, #0]
  }
}
 80063b2:	f107 070c 	add.w	r7, r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00c      	beq.n	80063e6 <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 80063cc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063d4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80063d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	e00b      	b.n	80063fe <FLASH_InstructionCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 80063e6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063ee:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80063f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80063fc:	601a      	str	r2, [r3, #0]
  }
}
 80063fe:	f107 070c 	add.w	r7, r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr

08006408 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00c      	beq.n	8006432 <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8006418:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800641c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006420:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006424:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e00b      	b.n	800644a <FLASH_DataCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8006432:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006436:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800643a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800643e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006448:	601a      	str	r2, [r3, #0]
  }
}
 800644a:	f107 070c 	add.w	r7, r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 8006458:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800645c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006460:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006464:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800646e:	601a      	str	r2, [r3, #0]
}
 8006470:	46bd      	mov	sp, r7
 8006472:	bc80      	pop	{r7}
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop

08006478 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 800647c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006484:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006488:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop

0800649c <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80064a0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da11      	bge.n	80064d2 <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80064ae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064b6:	f240 1223 	movw	r2, #291	; 0x123
 80064ba:	f2c4 5267 	movt	r2, #17767	; 0x4567
 80064be:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80064c0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064c8:	f648 12ab 	movw	r2, #35243	; 0x89ab
 80064cc:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 80064d0:	605a      	str	r2, [r3, #4]
  }  
}
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80064dc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064e4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80064e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80064ec:	6912      	ldr	r2, [r2, #16]
 80064ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80064f2:	611a      	str	r2, [r3, #16]
}
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop

080064fc <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800650e:	f04f 0308 	mov.w	r3, #8
 8006512:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <FLASH_EraseSector+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e010      	b.n	8006544 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d103      	bne.n	8006530 <FLASH_EraseSector+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e009      	b.n	8006544 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d103      	bne.n	800653e <FLASH_EraseSector+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e002      	b.n	8006544 <FLASH_EraseSector+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800653e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006542:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006544:	f000 fbf4 	bl	8006d30 <FLASH_WaitForLastOperation>
 8006548:	4603      	mov	r3, r0
 800654a:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	2b08      	cmp	r3, #8
 8006550:	d15b      	bne.n	800660a <FLASH_EraseSector+0x10e>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8006552:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006556:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800655a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800655e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006562:	6912      	ldr	r2, [r2, #16]
 8006564:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006568:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800656a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800656e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006572:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006576:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800657a:	6912      	ldr	r2, [r2, #16]
 800657c:	4611      	mov	r1, r2
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	430a      	orrs	r2, r1
 8006582:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 8006584:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006588:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800658c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006590:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006594:	6912      	ldr	r2, [r2, #16]
 8006596:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800659a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800659c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065a4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80065a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80065ac:	6912      	ldr	r2, [r2, #16]
 80065ae:	4611      	mov	r1, r2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	f042 0202 	orr.w	r2, r2, #2
 80065b8:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80065ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065c2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80065c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80065ca:	6912      	ldr	r2, [r2, #16]
 80065cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80065d0:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80065d2:	f000 fbad 	bl	8006d30 <FLASH_WaitForLastOperation>
 80065d6:	4603      	mov	r3, r0
 80065d8:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80065da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065e2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80065e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80065ea:	6912      	ldr	r2, [r2, #16]
 80065ec:	f022 0202 	bic.w	r2, r2, #2
 80065f0:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 80065f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065fa:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80065fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006602:	6912      	ldr	r2, [r2, #16]
 8006604:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006608:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 800660a:	7afb      	ldrb	r3, [r7, #11]
}
 800660c:	4618      	mov	r0, r3
 800660e:	f107 0710 	add.w	r7, r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop

08006618 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8006628:	f04f 0308 	mov.w	r3, #8
 800662c:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800662e:	f000 fb7f 	bl	8006d30 <FLASH_WaitForLastOperation>
 8006632:	4603      	mov	r3, r0
 8006634:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <FLASH_EraseAllSectors+0x2c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e010      	b.n	8006666 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_2)
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d103      	bne.n	8006652 <FLASH_EraseAllSectors+0x3a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800664a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e009      	b.n	8006666 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_3)
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d103      	bne.n	8006660 <FLASH_EraseAllSectors+0x48>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	e002      	b.n	8006666 <FLASH_EraseAllSectors+0x4e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006660:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006664:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8006666:	7afb      	ldrb	r3, [r7, #11]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d140      	bne.n	80066ee <FLASH_EraseAllSectors+0xd6>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800666c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006670:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006674:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006678:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800667c:	6912      	ldr	r2, [r2, #16]
 800667e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006682:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 8006684:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006688:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800668c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006690:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006694:	6912      	ldr	r2, [r2, #16]
 8006696:	4611      	mov	r1, r2
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	430a      	orrs	r2, r1
 800669c:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER;
 800669e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066a6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80066aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80066ae:	6912      	ldr	r2, [r2, #16]
 80066b0:	f042 0204 	orr.w	r2, r2, #4
 80066b4:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 80066b6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066be:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80066c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80066c6:	6912      	ldr	r2, [r2, #16]
 80066c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066cc:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80066ce:	f000 fb2f 	bl	8006d30 <FLASH_WaitForLastOperation>
 80066d2:	4603      	mov	r3, r0
 80066d4:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 80066d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066de:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80066e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80066e6:	6912      	ldr	r2, [r2, #16]
 80066e8:	f022 0204 	bic.w	r2, r2, #4
 80066ec:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 80066ee:	7afb      	ldrb	r3, [r7, #11]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	f107 0710 	add.w	r7, r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop

080066fc <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8006708:	f04f 0308 	mov.w	r3, #8
 800670c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800670e:	f000 fb0f 	bl	8006d30 <FLASH_WaitForLastOperation>
 8006712:	4603      	mov	r3, r0
 8006714:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	2b08      	cmp	r3, #8
 800671a:	d138      	bne.n	800678e <FLASH_ProgramDoubleWord+0x92>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800671c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006720:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006724:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006728:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800672c:	6912      	ldr	r2, [r2, #16]
 800672e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006732:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006734:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006738:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800673c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006740:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006744:	6912      	ldr	r2, [r2, #16]
 8006746:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800674a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800674c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006750:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006754:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006758:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800675c:	6912      	ldr	r2, [r2, #16]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 8006764:	68f9      	ldr	r1, [r7, #12]
 8006766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676a:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800676e:	f000 fadf 	bl	8006d30 <FLASH_WaitForLastOperation>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006776:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800677a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800677e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006782:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006786:	6912      	ldr	r2, [r2, #16]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006790:	4618      	mov	r0, r3
 8006792:	f107 0718 	add.w	r7, r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop

0800679c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 80067a6:	f04f 0308 	mov.w	r3, #8
 80067aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80067ac:	f000 fac0 	bl	8006d30 <FLASH_WaitForLastOperation>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d136      	bne.n	8006828 <FLASH_ProgramWord+0x8c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80067ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067c2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80067c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80067ca:	6912      	ldr	r2, [r2, #16]
 80067cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80067d0:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 80067d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067da:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80067de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80067e2:	6912      	ldr	r2, [r2, #16]
 80067e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e8:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80067ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067f2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80067f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80067fa:	6912      	ldr	r2, [r2, #16]
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006808:	f000 fa92 	bl	8006d30 <FLASH_WaitForLastOperation>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006810:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006818:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800681c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006820:	6912      	ldr	r2, [r2, #16]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	f107 0710 	add.w	r7, r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8006840:	f04f 0308 	mov.w	r3, #8
 8006844:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006846:	f000 fa73 	bl	8006d30 <FLASH_WaitForLastOperation>
 800684a:	4603      	mov	r3, r0
 800684c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	2b08      	cmp	r3, #8
 8006852:	d136      	bne.n	80068c2 <FLASH_ProgramHalfWord+0x8e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006854:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006858:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800685c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006860:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006864:	6912      	ldr	r2, [r2, #16]
 8006866:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800686a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800686c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006870:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006874:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006878:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800687c:	6912      	ldr	r2, [r2, #16]
 800687e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006882:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006884:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800688c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006890:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006894:	6912      	ldr	r2, [r2, #16]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	887a      	ldrh	r2, [r7, #2]
 80068a0:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80068a2:	f000 fa45 	bl	8006d30 <FLASH_WaitForLastOperation>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80068aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068b2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80068b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80068ba:	6912      	ldr	r2, [r2, #16]
 80068bc:	f022 0201 	bic.w	r2, r2, #1
 80068c0:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	f107 0710 	add.w	r7, r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop

080068d0 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80068dc:	f04f 0308 	mov.w	r3, #8
 80068e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80068e2:	f000 fa25 	bl	8006d30 <FLASH_WaitForLastOperation>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d134      	bne.n	800695a <FLASH_ProgramByte+0x8a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80068f0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068f8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80068fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006900:	6912      	ldr	r2, [r2, #16]
 8006902:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006906:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8006908:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800690c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006910:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006914:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006918:	6912      	ldr	r2, [r2, #16]
 800691a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800691c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006920:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006924:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006928:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800692c:	6912      	ldr	r2, [r2, #16]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	78fa      	ldrb	r2, [r7, #3]
 8006938:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800693a:	f000 f9f9 	bl	8006d30 <FLASH_WaitForLastOperation>
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006942:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006946:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800694a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800694e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006952:	6912      	ldr	r2, [r2, #16]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
}
 800695c:	4618      	mov	r0, r3
 800695e:	f107 0710 	add.w	r7, r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop

08006968 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800696c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006970:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d011      	beq.n	80069a4 <FLASH_OB_Unlock+0x3c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8006980:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006984:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006988:	f642 223b 	movw	r2, #10811	; 0x2a3b
 800698c:	f6c0 0219 	movt	r2, #2073	; 0x819
 8006990:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8006992:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006996:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800699a:	f646 627f 	movw	r2, #28287	; 0x6e7f
 800699e:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
 80069a2:	609a      	str	r2, [r3, #8]
  }  
}
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bc80      	pop	{r7}
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop

080069ac <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80069b0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069b8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80069bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80069c0:	6952      	ldr	r2, [r2, #20]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	615a      	str	r2, [r3, #20]
}
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 80069dc:	f04f 0308 	mov.w	r3, #8
 80069e0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 80069e2:	f000 f9a5 	bl	8006d30 <FLASH_WaitForLastOperation>
 80069e6:	4603      	mov	r3, r0
 80069e8:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d124      	bne.n	8006a3a <FLASH_OB_WRPConfig+0x6a>
  { 
    if(NewState != DISABLE)
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d012      	beq.n	8006a1c <FLASH_OB_WRPConfig+0x4c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 80069f6:	f643 4316 	movw	r3, #15382	; 0x3c16
 80069fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069fe:	f643 4216 	movw	r2, #15382	; 0x3c16
 8006a02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a06:	8812      	ldrh	r2, [r2, #0]
 8006a08:	b291      	uxth	r1, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	b292      	uxth	r2, r2
 8006a0e:	ea6f 0202 	mvn.w	r2, r2
 8006a12:	b292      	uxth	r2, r2
 8006a14:	400a      	ands	r2, r1
 8006a16:	b292      	uxth	r2, r2
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	e00e      	b.n	8006a3a <FLASH_OB_WRPConfig+0x6a>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8006a1c:	f643 4316 	movw	r3, #15382	; 0x3c16
 8006a20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a24:	f643 4216 	movw	r2, #15382	; 0x3c16
 8006a28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a2c:	8812      	ldrh	r2, [r2, #0]
 8006a2e:	b291      	uxth	r1, r2
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	b292      	uxth	r2, r2
 8006a34:	430a      	orrs	r2, r1
 8006a36:	b292      	uxth	r2, r2
 8006a38:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8006a3a:	f107 0710 	add.w	r7, r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 8006a4e:	f04f 0308 	mov.w	r3, #8
 8006a52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 8006a54:	f000 f96c 	bl	8006d30 <FLASH_WaitForLastOperation>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d105      	bne.n	8006a6e <FLASH_OB_RDPConfig+0x2a>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8006a62:	f643 4315 	movw	r3, #15381	; 0x3c15
 8006a66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a6a:	79fa      	ldrb	r2, [r7, #7]
 8006a6c:	701a      	strb	r2, [r3, #0]

  }
}
 8006a6e:	f107 0710 	add.w	r7, r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop

08006a78 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4613      	mov	r3, r2
 8006a80:	4602      	mov	r2, r0
 8006a82:	71fa      	strb	r2, [r7, #7]
 8006a84:	460a      	mov	r2, r1
 8006a86:	71ba      	strb	r2, [r7, #6]
 8006a88:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8006a8a:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8006a8e:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8006a90:	f04f 0308 	mov.w	r3, #8
 8006a94:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006a96:	f000 f94b 	bl	8006d30 <FLASH_WaitForLastOperation>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d117      	bne.n	8006ad4 <FLASH_OB_UserConfig+0x5c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8006aa4:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006aa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8006ab6:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006aba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006abe:	79b9      	ldrb	r1, [r7, #6]
 8006ac0:	7bfa      	ldrb	r2, [r7, #15]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	b2d1      	uxtb	r1, r2
 8006ac6:	797a      	ldrb	r2, [r7, #5]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	b2d1      	uxtb	r1, r2
 8006acc:	79fa      	ldrb	r2, [r7, #7]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
  }  
}
 8006ad4:	f107 0710 	add.w	r7, r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8006ae6:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006aea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006aee:	f643 4214 	movw	r2, #15380	; 0x3c14
 8006af2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006af6:	7812      	ldrb	r2, [r2, #0]
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	f022 020c 	bic.w	r2, r2, #12
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 8006b02:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b0a:	f643 4214 	movw	r2, #15380	; 0x3c14
 8006b0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	b2d1      	uxtb	r1, r2
 8006b16:	79fa      	ldrb	r2, [r7, #7]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]

}
 8006b1e:	f107 070c 	add.w	r7, r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr

08006b28 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8006b2e:	f04f 0308 	mov.w	r3, #8
 8006b32:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8006b34:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006b38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b3c:	f643 4214 	movw	r2, #15380	; 0x3c14
 8006b40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006b44:	7812      	ldrb	r2, [r2, #0]
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	f042 0202 	orr.w	r2, r2, #2
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006b50:	f000 f8ee 	bl	8006d30 <FLASH_WaitForLastOperation>
 8006b54:	4603      	mov	r3, r0
 8006b56:	71fb      	strb	r3, [r7, #7]

  return status;
 8006b58:	79fb      	ldrb	r3, [r7, #7]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f107 0708 	add.w	r7, r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8006b68:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8006b76:	b2db      	uxtb	r3, r3
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr

08006b80 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8006b84:	f643 4316 	movw	r3, #15382	; 0x3c16
 8006b88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr

08006b98 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8006ba4:	f643 4315 	movw	r3, #15381	; 0x3c15
 8006ba8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2baa      	cmp	r3, #170	; 0xaa
 8006bb2:	d003      	beq.n	8006bbc <FLASH_OB_GetRDP+0x24>
  {
    readstatus = SET;
 8006bb4:	f04f 0301 	mov.w	r3, #1
 8006bb8:	71fb      	strb	r3, [r7, #7]
 8006bba:	e002      	b.n	8006bc2 <FLASH_OB_GetRDP+0x2a>
  }
  else
  {
    readstatus = RESET;
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f107 070c 	add.w	r7, r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr

08006bd0 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8006bd4:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006bd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	b2db      	uxtb	r3, r3
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop

08006bf0 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <FLASH_ITConfig+0x2e>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8006c02:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c0a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006c0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c12:	6912      	ldr	r2, [r2, #16]
 8006c14:	4611      	mov	r1, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	611a      	str	r2, [r3, #16]
 8006c1c:	e00e      	b.n	8006c3c <FLASH_ITConfig+0x4c>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8006c1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c26:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006c2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006c2e:	6912      	ldr	r2, [r2, #16]
 8006c30:	4611      	mov	r1, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	ea6f 0202 	mvn.w	r2, r2
 8006c38:	400a      	ands	r2, r1
 8006c3a:	611a      	str	r2, [r3, #16]
  }
}
 8006c3c:	f107 070c 	add.w	r7, r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop

08006c48 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8006c56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	461a      	mov	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <FLASH_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8006c6a:	f04f 0301 	mov.w	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
 8006c70:	e002      	b.n	8006c78 <FLASH_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f107 0714 	add.w	r7, r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop

08006c88 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8006c90:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
}
 8006c9c:	f107 070c 	add.w	r7, r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop

08006ca8 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8006cae:	f04f 0308 	mov.w	r3, #8
 8006cb2:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006cb4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
 8006cc6:	f04f 0301 	mov.w	r3, #1
 8006cca:	71fb      	strb	r3, [r7, #7]
 8006ccc:	e029      	b.n	8006d22 <FLASH_GetStatus+0x7a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8006cce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <FLASH_GetStatus+0x40>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8006ce0:	f04f 0305 	mov.w	r3, #5
 8006ce4:	71fb      	strb	r3, [r7, #7]
 8006ce6:	e01c      	b.n	8006d22 <FLASH_GetStatus+0x7a>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8006ce8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <FLASH_GetStatus+0x5a>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8006cfa:	f04f 0306 	mov.w	r3, #6
 8006cfe:	71fb      	strb	r3, [r7, #7]
 8006d00:	e00f      	b.n	8006d22 <FLASH_GetStatus+0x7a>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8006d02:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <FLASH_GetStatus+0x74>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8006d14:	f04f 0307 	mov.w	r3, #7
 8006d18:	71fb      	strb	r3, [r7, #7]
 8006d1a:	e002      	b.n	8006d22 <FLASH_GetStatus+0x7a>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8006d1c:	f04f 0308 	mov.w	r3, #8
 8006d20:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8006d22:	79fb      	ldrb	r3, [r7, #7]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	f107 070c 	add.w	r7, r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8006d36:	f04f 0308 	mov.w	r3, #8
 8006d3a:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8006d3c:	f7ff ffb4 	bl	8006ca8 <FLASH_GetStatus>
 8006d40:	4603      	mov	r3, r0
 8006d42:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8006d44:	e003      	b.n	8006d4e <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
 8006d46:	f7ff ffaf 	bl	8006ca8 <FLASH_GetStatus>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d0f7      	beq.n	8006d46 <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	b2db      	uxtb	r3, r3
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f107 0708 	add.w	r7, r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8006d72:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	f243 01db 	movw	r1, #12507	; 0x30db
 8006d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d80:	e006      	b.n	8006d90 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8006d82:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8006d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8006d90:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	f102 0201 	add.w	r2, r2, #1
 8006d9a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8006da2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006da6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006db4:	f107 070c 	add.w	r7, r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop

08006dc0 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006dc8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	6848      	ldr	r0, [r1, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8006dd8:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8006dde:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	6909      	ldr	r1, [r1, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8006de4:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	6949      	ldr	r1, [r1, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8006dea:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	6989      	ldr	r1, [r1, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8006df0:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8006df6:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	6a09      	ldr	r1, [r1, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8006dfc:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8006e02:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8006e08:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8006e0e:	4308      	orrs	r0, r1
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8006e14:	4301      	orrs	r1, r0
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d10d      	bne.n	8006e3e <FSMC_NORSRAMInit+0x7e>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8006e22:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	6800      	ldr	r0, [r0, #0]
 8006e32:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006e36:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8006e3e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	f102 0201 	add.w	r2, r2, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e4e:	6808      	ldr	r0, [r1, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e54:	6849      	ldr	r1, [r1, #4]
 8006e56:	ea4f 1101 	mov.w	r1, r1, lsl #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8006e5a:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e60:	6889      	ldr	r1, [r1, #8]
 8006e62:	ea4f 2101 	mov.w	r1, r1, lsl #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8006e66:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e6c:	68c9      	ldr	r1, [r1, #12]
 8006e6e:	ea4f 4101 	mov.w	r1, r1, lsl #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8006e72:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e78:	6909      	ldr	r1, [r1, #16]
 8006e7a:	ea4f 5101 	mov.w	r1, r1, lsl #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8006e7e:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e84:	6949      	ldr	r1, [r1, #20]
 8006e86:	ea4f 6101 	mov.w	r1, r1, lsl #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8006e8a:	4308      	orrs	r0, r1
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e90:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8006e92:	4301      	orrs	r1, r0
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8006e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ea0:	d127      	bne.n	8006ef2 <FSMC_NORSRAMInit+0x132>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006ea2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006ea6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6812      	ldr	r2, [r2, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006eb2:	6808      	ldr	r0, [r1, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006eb8:	6849      	ldr	r1, [r1, #4]
 8006eba:	ea4f 1101 	mov.w	r1, r1, lsl #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8006ebe:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006ec4:	6889      	ldr	r1, [r1, #8]
 8006ec6:	ea4f 2101 	mov.w	r1, r1, lsl #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8006eca:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006ed0:	6909      	ldr	r1, [r1, #16]
 8006ed2:	ea4f 5101 	mov.w	r1, r1, lsl #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8006ed6:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006edc:	6949      	ldr	r1, [r1, #20]
 8006ede:	ea4f 6101 	mov.w	r1, r1, lsl #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8006ee2:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006ee8:	6989      	ldr	r1, [r1, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8006eea:	4301      	orrs	r1, r0
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006ef0:	e009      	b.n	8006f06 <FSMC_NORSRAMInit+0x146>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8006ef2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006ef6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8006f06:	f107 070c 	add.w	r7, r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f04f 0202 	mov.w	r2, #2
 8006f26:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f04f 0200 	mov.w	r2, #0
 8006f36:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f6e:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f84:	f04f 020f 	mov.w	r2, #15
 8006f88:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8e:	f04f 020f 	mov.w	r2, #15
 8006f92:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f98:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8006f9c:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa2:	f04f 020f 	mov.w	r2, #15
 8006fa6:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fac:	f04f 020f 	mov.w	r2, #15
 8006fb0:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb6:	f04f 020f 	mov.w	r2, #15
 8006fba:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f04f 020f 	mov.w	r2, #15
 8006fce:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	f04f 020f 	mov.w	r2, #15
 8006fd8:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8006fe2:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	f04f 020f 	mov.w	r2, #15
 8006fec:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	f04f 020f 	mov.w	r2, #15
 8006ff6:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	f04f 020f 	mov.w	r2, #15
 8007000:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	619a      	str	r2, [r3, #24]
}
 800700c:	f107 070c 	add.w	r7, r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop

08007018 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <FSMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 800702a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800702e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007038:	f042 0101 	orr.w	r1, r2, #1
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007042:	e00f      	b.n	8007064 <FSMC_NORSRAMCmd+0x4c>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8007044:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8007048:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007052:	4619      	mov	r1, r3
 8007054:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007058:	f2c0 030f 	movt	r3, #15
 800705c:	400b      	ands	r3, r1
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 8007064:	f107 070c 	add.w	r7, r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop

08007070 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b10      	cmp	r3, #16
 800707c:	d11c      	bne.n	80070b8 <FSMC_NANDDeInit+0x48>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 800707e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007082:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007086:	f04f 0218 	mov.w	r2, #24
 800708a:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 800708c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007090:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007094:	f04f 0240 	mov.w	r2, #64	; 0x40
 8007098:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800709a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800709e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070a2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80070a6:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 80070a8:	f04f 0360 	mov.w	r3, #96	; 0x60
 80070ac:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070b0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80070b4:	60da      	str	r2, [r3, #12]
 80070b6:	e01b      	b.n	80070f0 <FSMC_NANDDeInit+0x80>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 80070b8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80070bc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070c0:	f04f 0218 	mov.w	r2, #24
 80070c4:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 80070c6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80070ca:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070ce:	f04f 0240 	mov.w	r2, #64	; 0x40
 80070d2:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 80070d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80070d8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070dc:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80070e0:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 80070e2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80070e6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070ea:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80070ee:	60da      	str	r2, [r3, #12]
  }  
}
 80070f0:	f107 070c 	add.w	r7, r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop

080070fc <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 800711e:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8007124:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 800712a:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	ea4f 2343 	mov.w	r3, r3, lsl #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8007134:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	ea4f 3343 	mov.w	r3, r3, lsl #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 800713e:	4313      	orrs	r3, r2
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8007140:	f043 0308 	orr.w	r3, r3, #8
 8007144:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	ea4f 2303 	mov.w	r3, r3, lsl #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007156:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007162:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	ea4f 6303 	mov.w	r3, r3, lsl #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	ea4f 2303 	mov.w	r3, r3, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8007182:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800718e:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	ea4f 6303 	mov.w	r3, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	d112      	bne.n	80071cc <FSMC_NANDInit+0xd0>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 80071a6:	f04f 0360 	mov.w	r3, #96	; 0x60
 80071aa:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 80071b2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80071b6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 80071be:	f04f 0360 	mov.w	r3, #96	; 0x60
 80071c2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	60da      	str	r2, [r3, #12]
 80071ca:	e011      	b.n	80071f0 <FSMC_NANDInit+0xf4>
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 80071cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80071d0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 80071d8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80071dc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 80071e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80071e8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	60da      	str	r2, [r3, #12]
  }
}
 80071f0:	f107 071c 	add.w	r7, r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop

080071fc <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f04f 0210 	mov.w	r2, #16
 800720a:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f04f 0200 	mov.w	r2, #0
 800723a:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007244:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800724e:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007258:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007262:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800726c:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007276:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007280:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800728a:	60da      	str	r2, [r3, #12]
}
 800728c:	f107 070c 	add.w	r7, r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop

08007298 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d01c      	beq.n	80072e4 <FSMC_NANDCmd+0x4c>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b10      	cmp	r3, #16
 80072ae:	d10c      	bne.n	80072ca <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 80072b0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80072b4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80072b8:	f04f 0260 	mov.w	r2, #96	; 0x60
 80072bc:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	f042 0204 	orr.w	r2, r2, #4
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	e030      	b.n	800732c <FSMC_NANDCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 80072ca:	f04f 0380 	mov.w	r3, #128	; 0x80
 80072ce:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80072d2:	f04f 0280 	mov.w	r2, #128	; 0x80
 80072d6:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	f042 0204 	orr.w	r2, r2, #4
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	e023      	b.n	800732c <FSMC_NANDCmd+0x94>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b10      	cmp	r3, #16
 80072e8:	d110      	bne.n	800730c <FSMC_NANDCmd+0x74>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 80072ea:	f04f 0260 	mov.w	r2, #96	; 0x60
 80072ee:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80072f2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80072f6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4619      	mov	r1, r3
 80072fe:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8007302:	f2c0 030f 	movt	r3, #15
 8007306:	400b      	ands	r3, r1
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	e00f      	b.n	800732c <FSMC_NANDCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 800730c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007310:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007314:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007318:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4619      	mov	r1, r3
 8007320:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8007324:	f2c0 030f 	movt	r3, #15
 8007328:	400b      	ands	r3, r1
 800732a:	6013      	str	r3, [r2, #0]
    }
  }
}
 800732c:	f107 070c 	add.w	r7, r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop

08007338 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01c      	beq.n	8007384 <FSMC_NANDECCCmd+0x4c>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b10      	cmp	r3, #16
 800734e:	d10c      	bne.n	800736a <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8007350:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007354:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007358:	f04f 0260 	mov.w	r2, #96	; 0x60
 800735c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007360:	6812      	ldr	r2, [r2, #0]
 8007362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	e030      	b.n	80073cc <FSMC_NANDECCCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 800736a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800736e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007372:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007376:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800737a:	6812      	ldr	r2, [r2, #0]
 800737c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e023      	b.n	80073cc <FSMC_NANDECCCmd+0x94>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b10      	cmp	r3, #16
 8007388:	d110      	bne.n	80073ac <FSMC_NANDECCCmd+0x74>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 800738a:	f04f 0260 	mov.w	r2, #96	; 0x60
 800738e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007392:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007396:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4619      	mov	r1, r3
 800739e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80073a2:	f2c0 030f 	movt	r3, #15
 80073a6:	400b      	ands	r3, r1
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e00f      	b.n	80073cc <FSMC_NANDECCCmd+0x94>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 80073ac:	f04f 0280 	mov.w	r2, #128	; 0x80
 80073b0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80073b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073b8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80073c4:	f2c0 030f 	movt	r3, #15
 80073c8:	400b      	ands	r3, r1
 80073ca:	6013      	str	r3, [r2, #0]
    }
  }
}
 80073cc:	f107 070c 	add.w	r7, r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop

080073d8 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d106      	bne.n	80073fa <FSMC_GetECC+0x22>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 80073ec:	f04f 0360 	mov.w	r3, #96	; 0x60
 80073f0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e005      	b.n	8007406 <FSMC_GetECC+0x2e>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 80073fa:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073fe:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8007406:	68fb      	ldr	r3, [r7, #12]
}
 8007408:	4618      	mov	r0, r3
 800740a:	f107 0714 	add.w	r7, r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <FSMC_PCCARDDeInit>:
  * @brief  Deinitializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8007418:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800741c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007420:	f04f 0218 	mov.w	r2, #24
 8007424:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8007426:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800742a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800742e:	f04f 0200 	mov.w	r2, #0
 8007432:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8007434:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007438:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800743c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8007440:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8007442:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007446:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800744a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800744e:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8007450:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007454:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007458:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800745c:	611a      	str	r2, [r3, #16]
}
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr

08007464 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 800746c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007470:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6811      	ldr	r1, [r2, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6852      	ldr	r2, [r2, #4]
 800747c:	ea4f 2242 	mov.w	r2, r2, lsl #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8007480:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6892      	ldr	r2, [r2, #8]
 8007486:	ea4f 3242 	mov.w	r2, r2, lsl #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 800748a:	430a      	orrs	r2, r1
 800748c:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8007490:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8007492:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007496:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68d2      	ldr	r2, [r2, #12]
 800749e:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	68d2      	ldr	r2, [r2, #12]
 80074a4:	6852      	ldr	r2, [r2, #4]
 80074a6:	ea4f 2202 	mov.w	r2, r2, lsl #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80074aa:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	68d2      	ldr	r2, [r2, #12]
 80074b0:	6892      	ldr	r2, [r2, #8]
 80074b2:	ea4f 4202 	mov.w	r2, r2, lsl #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80074b6:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	68d2      	ldr	r2, [r2, #12]
 80074bc:	68d2      	ldr	r2, [r2, #12]
 80074be:	ea4f 6202 	mov.w	r2, r2, lsl #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80074c2:	430a      	orrs	r2, r1
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80074c4:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80074c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80074ca:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6912      	ldr	r2, [r2, #16]
 80074d2:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6912      	ldr	r2, [r2, #16]
 80074d8:	6852      	ldr	r2, [r2, #4]
 80074da:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80074de:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6912      	ldr	r2, [r2, #16]
 80074e4:	6892      	ldr	r2, [r2, #8]
 80074e6:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80074ea:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6912      	ldr	r2, [r2, #16]
 80074f0:	68d2      	ldr	r2, [r2, #12]
 80074f2:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80074f6:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80074f8:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80074fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80074fe:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6952      	ldr	r2, [r2, #20]
 8007506:	6811      	ldr	r1, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6952      	ldr	r2, [r2, #20]
 800750c:	6852      	ldr	r2, [r2, #4]
 800750e:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8007512:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6952      	ldr	r2, [r2, #20]
 8007518:	6892      	ldr	r2, [r2, #8]
 800751a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800751e:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6952      	ldr	r2, [r2, #20]
 8007524:	68d2      	ldr	r2, [r2, #12]
 8007526:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800752a:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800752c:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 800752e:	f107 070c 	add.w	r7, r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007560:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800756a:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007574:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800757e:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007588:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8007592:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800759c:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80075a6:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80075b0:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80075ba:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80075c4:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80075ce:	60da      	str	r2, [r3, #12]
}
 80075d0:	f107 070c 	add.w	r7, r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop

080075dc <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00c      	beq.n	8007606 <FSMC_PCCARDCmd+0x2a>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 80075ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80075f0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80075f4:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 80075f8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	f042 0204 	orr.w	r2, r2, #4
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	e00f      	b.n	8007626 <FSMC_PCCARDCmd+0x4a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8007606:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800760a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800760e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007612:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4619      	mov	r1, r3
 800761a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800761e:	f2c0 030f 	movt	r3, #15
 8007622:	400b      	ands	r3, r1
 8007624:	6013      	str	r3, [r2, #0]
  }
}
 8007626:	f107 070c 	add.w	r7, r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr

08007630 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d030      	beq.n	80076a6 <FSMC_ITConfig+0x76>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b10      	cmp	r3, #16
 8007648:	d10d      	bne.n	8007666 <FSMC_ITConfig+0x36>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 800764a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800764e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007652:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007656:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800765a:	6852      	ldr	r2, [r2, #4]
 800765c:	4611      	mov	r1, r2
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
 8007664:	e055      	b.n	8007712 <FSMC_ITConfig+0xe2>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800766c:	d10d      	bne.n	800768a <FSMC_ITConfig+0x5a>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 800766e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007672:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007676:	f04f 0280 	mov.w	r2, #128	; 0x80
 800767a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800767e:	6852      	ldr	r2, [r2, #4]
 8007680:	4611      	mov	r1, r2
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	430a      	orrs	r2, r1
 8007686:	605a      	str	r2, [r3, #4]
 8007688:	e043      	b.n	8007712 <FSMC_ITConfig+0xe2>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 800768a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800768e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007692:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007696:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800769a:	6852      	ldr	r2, [r2, #4]
 800769c:	4611      	mov	r1, r2
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	605a      	str	r2, [r3, #4]
 80076a4:	e035      	b.n	8007712 <FSMC_ITConfig+0xe2>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d10f      	bne.n	80076cc <FSMC_ITConfig+0x9c>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 80076ac:	f04f 0360 	mov.w	r3, #96	; 0x60
 80076b0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80076b4:	f04f 0260 	mov.w	r2, #96	; 0x60
 80076b8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80076bc:	6852      	ldr	r2, [r2, #4]
 80076be:	4611      	mov	r1, r2
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	ea6f 0202 	mvn.w	r2, r2
 80076c6:	400a      	ands	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	e022      	b.n	8007712 <FSMC_ITConfig+0xe2>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d2:	d10f      	bne.n	80076f4 <FSMC_ITConfig+0xc4>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 80076d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076d8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80076dc:	f04f 0280 	mov.w	r2, #128	; 0x80
 80076e0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80076e4:	6852      	ldr	r2, [r2, #4]
 80076e6:	4611      	mov	r1, r2
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	ea6f 0202 	mvn.w	r2, r2
 80076ee:	400a      	ands	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
 80076f2:	e00e      	b.n	8007712 <FSMC_ITConfig+0xe2>
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 80076f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80076f8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80076fc:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007700:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007704:	6852      	ldr	r2, [r2, #4]
 8007706:	4611      	mov	r1, r2
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	ea6f 0202 	mvn.w	r2, r2
 800770e:	400a      	ands	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007712:	f107 0714 	add.w	r7, r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr

0800771c <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8007726:	f04f 0300 	mov.w	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b10      	cmp	r3, #16
 8007736:	d106      	bne.n	8007746 <FSMC_GetFlagStatus+0x2a>
  {
    tmpsr = FSMC_Bank2->SR2;
 8007738:	f04f 0360 	mov.w	r3, #96	; 0x60
 800773c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	e010      	b.n	8007768 <FSMC_GetFlagStatus+0x4c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774c:	d106      	bne.n	800775c <FSMC_GetFlagStatus+0x40>
  {
    tmpsr = FSMC_Bank3->SR3;
 800774e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007752:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	e005      	b.n	8007768 <FSMC_GetFlagStatus+0x4c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 800775c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007760:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	4013      	ands	r3, r2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <FSMC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8007772:	f04f 0301 	mov.w	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
 8007778:	e002      	b.n	8007780 <FSMC_GetFlagStatus+0x64>
  }
  else
  {
    bitstatus = RESET;
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	f107 0714 	add.w	r7, r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	bc80      	pop	{r7}
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop

08007790 <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b10      	cmp	r3, #16
 800779e:	d10f      	bne.n	80077c0 <FSMC_ClearFlag+0x30>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 80077a0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80077a4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80077a8:	f04f 0260 	mov.w	r2, #96	; 0x60
 80077ac:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80077b0:	6852      	ldr	r2, [r2, #4]
 80077b2:	4611      	mov	r1, r2
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	ea6f 0202 	mvn.w	r2, r2
 80077ba:	400a      	ands	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	e022      	b.n	8007806 <FSMC_ClearFlag+0x76>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c6:	d10f      	bne.n	80077e8 <FSMC_ClearFlag+0x58>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 80077c8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80077d0:	f04f 0280 	mov.w	r2, #128	; 0x80
 80077d4:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80077d8:	6852      	ldr	r2, [r2, #4]
 80077da:	4611      	mov	r1, r2
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	ea6f 0202 	mvn.w	r2, r2
 80077e2:	400a      	ands	r2, r1
 80077e4:	605a      	str	r2, [r3, #4]
 80077e6:	e00e      	b.n	8007806 <FSMC_ClearFlag+0x76>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 80077e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80077ec:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80077f0:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 80077f4:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80077f8:	6852      	ldr	r2, [r2, #4]
 80077fa:	4611      	mov	r1, r2
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	ea6f 0202 	mvn.w	r2, r2
 8007802:	400a      	ands	r2, r1
 8007804:	605a      	str	r2, [r3, #4]
  }
}
 8007806:	f107 070c 	add.w	r7, r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b10      	cmp	r3, #16
 8007836:	d106      	bne.n	8007846 <FSMC_GetITStatus+0x36>
  {
    tmpsr = FSMC_Bank2->SR2;
 8007838:	f04f 0360 	mov.w	r3, #96	; 0x60
 800783c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	e010      	b.n	8007868 <FSMC_GetITStatus+0x58>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784c:	d106      	bne.n	800785c <FSMC_GetITStatus+0x4c>
  {
    tmpsr = FSMC_Bank3->SR3;
 800784e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007852:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	e005      	b.n	8007868 <FSMC_GetITStatus+0x58>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 800785c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007860:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	4013      	ands	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4013      	ands	r3, r2
 800787a:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d006      	beq.n	8007890 <FSMC_GetITStatus+0x80>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <FSMC_GetITStatus+0x80>
  {
    bitstatus = SET;
 8007888:	f04f 0301 	mov.w	r3, #1
 800788c:	75fb      	strb	r3, [r7, #23]
 800788e:	e002      	b.n	8007896 <FSMC_GetITStatus+0x86>
  }
  else
  {
    bitstatus = RESET;
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 8007896:	7dfb      	ldrb	r3, [r7, #23]
}
 8007898:	4618      	mov	r0, r3
 800789a:	f107 071c 	add.w	r7, r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d111      	bne.n	80078d8 <FSMC_ClearITPendingBit+0x34>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 80078b4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80078b8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80078bc:	f04f 0260 	mov.w	r2, #96	; 0x60
 80078c0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80078c4:	6852      	ldr	r2, [r2, #4]
 80078c6:	4611      	mov	r1, r2
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 80078ce:	ea6f 0202 	mvn.w	r2, r2
 80078d2:	400a      	ands	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
 80078d6:	e026      	b.n	8007926 <FSMC_ClearITPendingBit+0x82>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078de:	d111      	bne.n	8007904 <FSMC_ClearITPendingBit+0x60>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 80078e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80078e4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80078e8:	f04f 0280 	mov.w	r2, #128	; 0x80
 80078ec:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80078f0:	6852      	ldr	r2, [r2, #4]
 80078f2:	4611      	mov	r1, r2
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 80078fa:	ea6f 0202 	mvn.w	r2, r2
 80078fe:	400a      	ands	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
 8007902:	e010      	b.n	8007926 <FSMC_ClearITPendingBit+0x82>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8007904:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007908:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800790c:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007910:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007914:	6852      	ldr	r2, [r2, #4]
 8007916:	4611      	mov	r1, r2
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 800791e:	ea6f 0202 	mvn.w	r2, r2
 8007922:	400a      	ands	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
  }
}
 8007926:	f107 070c 	add.w	r7, r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007942:	429a      	cmp	r2, r3
 8007944:	d10c      	bne.n	8007960 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8007946:	f04f 0001 	mov.w	r0, #1
 800794a:	f04f 0101 	mov.w	r1, #1
 800794e:	f002 fbc5 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8007952:	f04f 0001 	mov.w	r0, #1
 8007956:	f04f 0100 	mov.w	r1, #0
 800795a:	f002 fbbf 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
 800795e:	e09e      	b.n	8007a9e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800796a:	429a      	cmp	r2, r3
 800796c:	d10c      	bne.n	8007988 <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800796e:	f04f 0002 	mov.w	r0, #2
 8007972:	f04f 0101 	mov.w	r1, #1
 8007976:	f002 fbb1 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800797a:	f04f 0002 	mov.w	r0, #2
 800797e:	f04f 0100 	mov.w	r1, #0
 8007982:	f002 fbab 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
 8007986:	e08a      	b.n	8007a9e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800798e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007992:	429a      	cmp	r2, r3
 8007994:	d10c      	bne.n	80079b0 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8007996:	f04f 0004 	mov.w	r0, #4
 800799a:	f04f 0101 	mov.w	r1, #1
 800799e:	f002 fb9d 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80079a2:	f04f 0004 	mov.w	r0, #4
 80079a6:	f04f 0100 	mov.w	r1, #0
 80079aa:	f002 fb97 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
 80079ae:	e076      	b.n	8007a9e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80079b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d10c      	bne.n	80079d8 <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80079be:	f04f 0008 	mov.w	r0, #8
 80079c2:	f04f 0101 	mov.w	r1, #1
 80079c6:	f002 fb89 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80079ca:	f04f 0008 	mov.w	r0, #8
 80079ce:	f04f 0100 	mov.w	r1, #0
 80079d2:	f002 fb83 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
 80079d6:	e062      	b.n	8007a9e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d10c      	bne.n	8007a00 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80079e6:	f04f 0010 	mov.w	r0, #16
 80079ea:	f04f 0101 	mov.w	r1, #1
 80079ee:	f002 fb75 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80079f2:	f04f 0010 	mov.w	r0, #16
 80079f6:	f04f 0100 	mov.w	r1, #0
 80079fa:	f002 fb6f 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
 80079fe:	e04e      	b.n	8007a9e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d10c      	bne.n	8007a28 <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8007a0e:	f04f 0020 	mov.w	r0, #32
 8007a12:	f04f 0101 	mov.w	r1, #1
 8007a16:	f002 fb61 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8007a1a:	f04f 0020 	mov.w	r0, #32
 8007a1e:	f04f 0100 	mov.w	r1, #0
 8007a22:	f002 fb5b 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
 8007a26:	e03a      	b.n	8007a9e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d10c      	bne.n	8007a50 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8007a36:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007a3a:	f04f 0101 	mov.w	r1, #1
 8007a3e:	f002 fb4d 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8007a42:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007a46:	f04f 0100 	mov.w	r1, #0
 8007a4a:	f002 fb47 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
 8007a4e:	e026      	b.n	8007a9e <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007a56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d10c      	bne.n	8007a78 <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8007a5e:	f04f 0080 	mov.w	r0, #128	; 0x80
 8007a62:	f04f 0101 	mov.w	r1, #1
 8007a66:	f002 fb39 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8007a6a:	f04f 0080 	mov.w	r0, #128	; 0x80
 8007a6e:	f04f 0100 	mov.w	r1, #0
 8007a72:	f002 fb33 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
 8007a76:	e012      	b.n	8007a9e <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d10b      	bne.n	8007a9e <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8007a86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a8a:	f04f 0101 	mov.w	r1, #1
 8007a8e:	f002 fb25 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8007a92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a96:	f04f 0100 	mov.w	r1, #0
 8007a9a:	f002 fb1f 	bl	800a0dc <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8007a9e:	f107 0708 	add.w	r7, r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop

08007aa8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8007ab2:	f04f 0300 	mov.w	r3, #0
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	f04f 0300 	mov.w	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
 8007aca:	e08e      	b.n	8007bea <GPIO_Init+0x142>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f04f 0201 	mov.w	r2, #1
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d17b      	bne.n	8007be2 <GPIO_Init+0x13a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007af6:	f04f 0103 	mov.w	r1, #3
 8007afa:	fa01 f303 	lsl.w	r3, r1, r3
 8007afe:	ea6f 0303 	mvn.w	r3, r3
 8007b02:	401a      	ands	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	4619      	mov	r1, r3
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	791b      	ldrb	r3, [r3, #4]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d003      	beq.n	8007b34 <GPIO_Init+0x8c>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	791b      	ldrb	r3, [r3, #4]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d138      	bne.n	8007ba6 <GPIO_Init+0xfe>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b40:	f04f 0103 	mov.w	r1, #3
 8007b44:	fa01 f303 	lsl.w	r3, r1, r3
 8007b48:	ea6f 0303 	mvn.w	r3, r3
 8007b4c:	401a      	ands	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	461a      	mov	r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	795b      	ldrb	r3, [r3, #5]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b64:	fa01 f303 	lsl.w	r3, r1, r3
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	461a      	mov	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f04f 0101 	mov.w	r1, #1
 8007b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b80:	ea6f 0303 	mvn.w	r3, r3
 8007b84:	401a      	ands	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	799b      	ldrb	r3, [r3, #6]
 8007b94:	4619      	mov	r1, r3
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	461a      	mov	r2, r3
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bb4:	f04f 0103 	mov.w	r1, #3
 8007bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bbc:	ea6f 0303 	mvn.w	r3, r3
 8007bc0:	401a      	ands	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	79db      	ldrb	r3, [r3, #7]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f103 0301 	add.w	r3, r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b0f      	cmp	r3, #15
 8007bee:	f67f af6d 	bls.w	8007acc <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8007bf2:	f107 071c 	add.w	r7, r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f04f 0200 	mov.w	r2, #0
 8007c2a:	71da      	strb	r2, [r3, #7]
}
 8007c2c:	f107 070c 	add.w	r7, r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop

08007c38 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8007c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8007c4a:	887a      	ldrh	r2, [r7, #2]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8007c58:	887a      	ldrh	r2, [r7, #2]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	60fb      	str	r3, [r7, #12]
}
 8007c70:	f107 0714 	add.w	r7, r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop

08007c7c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	461a      	mov	r2, r3
 8007c94:	887b      	ldrh	r3, [r7, #2]
 8007c96:	4013      	ands	r3, r2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8007c9c:	f04f 0301 	mov.w	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e002      	b.n	8007caa <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	f107 0714 	add.w	r7, r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bc80      	pop	{r7}
 8007cb6:	4770      	bx	lr

08007cb8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	b29b      	uxth	r3, r3
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f107 070c 	add.w	r7, r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bc80      	pop	{r7}
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop

08007cd4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	461a      	mov	r2, r3
 8007cec:	887b      	ldrh	r3, [r7, #2]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8007cf4:	f04f 0301 	mov.w	r3, #1
 8007cf8:	73fb      	strb	r3, [r7, #15]
 8007cfa:	e002      	b.n	8007d02 <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	f107 0714 	add.w	r7, r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr

08007d10 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	b29b      	uxth	r3, r3
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f107 070c 	add.w	r7, r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop

08007d2c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	887a      	ldrh	r2, [r7, #2]
 8007d3c:	831a      	strh	r2, [r3, #24]
}
 8007d3e:	f107 070c 	add.w	r7, r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	835a      	strh	r2, [r3, #26]
}
 8007d5a:	f107 070c 	add.w	r7, r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	460a      	mov	r2, r1
 8007d70:	807a      	strh	r2, [r7, #2]
 8007d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8007d74:	787b      	ldrb	r3, [r7, #1]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	887a      	ldrh	r2, [r7, #2]
 8007d7e:	831a      	strh	r2, [r3, #24]
 8007d80:	e002      	b.n	8007d88 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	887a      	ldrh	r2, [r7, #2]
 8007d86:	835a      	strh	r2, [r3, #26]
  }
}
 8007d88:	f107 070c 	add.w	r7, r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop

08007d94 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8007da0:	887a      	ldrh	r2, [r7, #2]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	615a      	str	r2, [r3, #20]
}
 8007da6:	f107 070c 	add.w	r7, r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	887b      	ldrh	r3, [r7, #2]
 8007dc4:	405a      	eors	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	615a      	str	r2, [r3, #20]
}
 8007dca:	f107 070c 	add.w	r7, r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	460a      	mov	r2, r1
 8007de0:	807a      	strh	r2, [r7, #2]
 8007de2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007df0:	787a      	ldrb	r2, [r7, #1]
 8007df2:	887b      	ldrh	r3, [r7, #2]
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007e02:	887b      	ldrh	r3, [r7, #2]
 8007e04:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	887b      	ldrh	r3, [r7, #2]
 8007e0e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	4619      	mov	r1, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f101 0108 	add.w	r1, r1, #8
 8007e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e20:	4619      	mov	r1, r3
 8007e22:	887b      	ldrh	r3, [r7, #2]
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007e2c:	f04f 000f 	mov.w	r0, #15
 8007e30:	fa00 f303 	lsl.w	r3, r0, r3
 8007e34:	ea6f 0303 	mvn.w	r3, r3
 8007e38:	4019      	ands	r1, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f102 0208 	add.w	r2, r2, #8
 8007e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8007e44:	887b      	ldrh	r3, [r7, #2]
 8007e46:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f102 0208 	add.w	r2, r2, #8
 8007e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8007e60:	887b      	ldrh	r3, [r7, #2]
 8007e62:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	461a      	mov	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f102 0208 	add.w	r2, r2, #8
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007e76:	f107 0714 	add.w	r7, r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr

08007e80 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 8007e84:	f04f 0020 	mov.w	r0, #32
 8007e88:	f04f 0101 	mov.w	r1, #1
 8007e8c:	f002 f952 	bl	800a134 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8007e90:	f04f 0020 	mov.w	r0, #32
 8007e94:	f04f 0100 	mov.w	r1, #0
 8007e98:	f002 f94c 	bl	800a134 <RCC_AHB2PeriphResetCmd>
}
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop

08007ea0 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8007ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007eb4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007ebe:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ecc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007edc:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 8007ee2:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2b40      	cmp	r3, #64	; 0x40
 8007eee:	d119      	bne.n	8007f24 <HASH_Init+0x84>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8007ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007efc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007f00:	6812      	ldr	r2, [r2, #0]
 8007f02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f06:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8007f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f14:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	68d2      	ldr	r2, [r2, #12]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8007f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f28:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f30:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	f042 0204 	orr.w	r2, r2, #4
 8007f3a:	601a      	str	r2, [r3, #0]
}
 8007f3c:	f107 070c 	add.w	r7, r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bc80      	pop	{r7}
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop

08007f48 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f04f 0200 	mov.w	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f04f 0200 	mov.w	r2, #0
 8007f6e:	60da      	str	r2, [r3, #12]
}
 8007f70:	f107 070c 	add.w	r7, r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 8007f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f84:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f8c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	f042 0204 	orr.w	r2, r2, #4
 8007f96:	601a      	str	r2, [r3, #0]
}
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop

08007fa0 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8007faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fae:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fb6:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007fba:	6892      	ldr	r2, [r2, #8]
 8007fbc:	f022 021f 	bic.w	r2, r2, #31
 8007fc0:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 8007fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fce:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007fd2:	6892      	ldr	r2, [r2, #8]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	609a      	str	r2, [r3, #8]
}
 8007fdc:	f107 070c 	add.w	r7, r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop

08007fe8 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8007ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ff4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	605a      	str	r2, [r3, #4]
}
 8007ffc:	f107 070c 	add.w	r7, r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop

08008008 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800800c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008010:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800801a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800801e:	b2db      	uxtb	r3, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8008030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008034:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8008040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008044:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	461a      	mov	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 8008050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008054:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	461a      	mov	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 8008060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008064:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	461a      	mov	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 8008070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008074:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	461a      	mov	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	611a      	str	r2, [r3, #16]
}
 8008080:	f107 070c 	add.w	r7, r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop

0800808c <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 8008090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008094:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800809c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80080a0:	6892      	ldr	r2, [r2, #8]
 80080a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080a6:	609a      	str	r2, [r3, #8]
}
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop

080080b0 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 80080be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	461a      	mov	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 80080ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	461a      	mov	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 80080de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080e2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	609a      	str	r2, [r3, #8]
  for(i=0; i<=50;i++)
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
 80080f4:	e015      	b.n	8008122 <HASH_SaveContext+0x72>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 80080f6:	7bf8      	ldrb	r0, [r7, #15]
 80080f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008100:	7bfa      	ldrb	r2, [r7, #15]
 8008102:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8008106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810a:	461a      	mov	r2, r3
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	f100 0302 	add.w	r3, r0, #2
 8008112:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008116:	18cb      	adds	r3, r1, r3
 8008118:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	f103 0301 	add.w	r3, r3, #1
 8008120:	73fb      	strb	r3, [r7, #15]
 8008122:	7bfb      	ldrb	r3, [r7, #15]
 8008124:	2b32      	cmp	r3, #50	; 0x32
 8008126:	d9e6      	bls.n	80080f6 <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8008128:	f107 0714 	add.w	r7, r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop

08008134 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8008142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008146:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6812      	ldr	r2, [r2, #0]
 800814e:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8008150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008154:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6852      	ldr	r2, [r2, #4]
 800815c:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800815e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008162:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6892      	ldr	r2, [r2, #8]
 800816a:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 800816c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008170:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008178:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800817c:	6812      	ldr	r2, [r2, #0]
 800817e:	f042 0204 	orr.w	r2, r2, #4
 8008182:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]
 800818a:	e014      	b.n	80081b6 <HASH_RestoreContext+0x82>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800818c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008190:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008194:	7bf8      	ldrb	r0, [r7, #15]
 8008196:	7bfa      	ldrb	r2, [r7, #15]
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	f102 0202 	add.w	r2, r2, #2
 800819e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80081a2:	188a      	adds	r2, r1, r2
 80081a4:	6851      	ldr	r1, [r2, #4]
 80081a6:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 80081aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	f103 0301 	add.w	r3, r3, #1
 80081b4:	73fb      	strb	r3, [r7, #15]
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	2b32      	cmp	r3, #50	; 0x32
 80081ba:	d9e7      	bls.n	800818c <HASH_RestoreContext+0x58>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 80081bc:	f107 0714 	add.w	r7, r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop

080081c8 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00c      	beq.n	80081f2 <HASH_DMACmd+0x2a>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 80081d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081dc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80081e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081e4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80081e8:	6812      	ldr	r2, [r2, #0]
 80081ea:	f042 0208 	orr.w	r2, r2, #8
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e00b      	b.n	800820a <HASH_DMACmd+0x42>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 80081f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80081fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081fe:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	f022 0208 	bic.w	r2, r2, #8
 8008208:	601a      	str	r2, [r3, #0]
  }
}
 800820a:	f107 070c 	add.w	r7, r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	71fa      	strb	r2, [r7, #7]
 8008220:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008222:	79bb      	ldrb	r3, [r7, #6]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00d      	beq.n	8008244 <HASH_ITConfig+0x30>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8008228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800822c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008234:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008238:	6a12      	ldr	r2, [r2, #32]
 800823a:	4611      	mov	r1, r2
 800823c:	79fa      	ldrb	r2, [r7, #7]
 800823e:	430a      	orrs	r2, r1
 8008240:	621a      	str	r2, [r3, #32]
 8008242:	e00f      	b.n	8008264 <HASH_ITConfig+0x50>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8008244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008248:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800824c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008250:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8008254:	6a12      	ldr	r2, [r2, #32]
 8008256:	4611      	mov	r1, r2
 8008258:	79fa      	ldrb	r2, [r7, #7]
 800825a:	ea6f 0202 	mvn.w	r2, r2
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	400a      	ands	r2, r1
 8008262:	621a      	str	r2, [r3, #32]
  }
}
 8008264:	f107 070c 	add.w	r7, r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d006      	beq.n	800829e <HASH_GetFlagStatus+0x2e>
  {
    tempreg = HASH->CR;
 8008290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008294:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60bb      	str	r3, [r7, #8]
 800829c:	e005      	b.n	80082aa <HASH_GetFlagStatus+0x3a>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800829e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4013      	ands	r3, r2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HASH_GetFlagStatus+0x4c>
  {
    /* HASH is set */
    bitstatus = SET;
 80082b4:	f04f 0301 	mov.w	r3, #1
 80082b8:	73fb      	strb	r3, [r7, #15]
 80082ba:	e002      	b.n	80082c2 <HASH_GetFlagStatus+0x52>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 80082bc:	f04f 0300 	mov.w	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	f107 0714 	add.w	r7, r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr

080082d0 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint16_t HASH_FLAG)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 80082da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082de:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80082e2:	88fa      	ldrh	r2, [r7, #6]
 80082e4:	ea6f 0202 	mvn.w	r2, r2
 80082e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80082ea:	f107 070c 	add.w	r7, r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr

080082f4 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint8_t HASH_IT)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800830a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800830e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8008316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800831a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	461a      	mov	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	401a      	ands	r2, r3
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	4013      	ands	r3, r2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HASH_GetITStatus+0x42>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800832e:	f04f 0301 	mov.w	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
 8008334:	e002      	b.n	800833c <HASH_GetITStatus+0x48>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	f107 0714 	add.w	r7, r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	bc80      	pop	{r7}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint8_t HASH_IT)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 8008356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800835a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800835e:	79fa      	ldrb	r2, [r7, #7]
 8008360:	ea6f 0202 	mvn.w	r2, r2
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008368:	f107 070c 	add.w	r7, r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	bc80      	pop	{r7}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop

08008374 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b095      	sub	sp, #84	; 0x54
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 8008386:	f04f 0300 	mov.w	r3, #0
 800838a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __IO uint32_t counter = 0;
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8008392:	f04f 0300 	mov.w	r3, #0
 8008396:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatus status = SUCCESS;
 8008398:	f04f 0301 	mov.w	r3, #1
 800839c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint32_t inputaddr  = (uint32_t)Input;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t outputaddr = (uint32_t)Output;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f003 0303 	and.w	r3, r3, #3
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 80083ba:	f7ff fd61 	bl	8007e80 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 80083be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80083c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80083ca:	f04f 0320 	mov.w	r3, #32
 80083ce:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&MD5_HASH_InitStructure);
 80083d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7ff fd63 	bl	8007ea0 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80083da:	8afb      	ldrh	r3, [r7, #22]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4618      	mov	r0, r3
 80083e0:	f7ff fdde 	bl	8007fa0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ea:	e00c      	b.n	8008406 <HASH_MD5+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80083ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff fdf9 	bl	8007fe8 <HASH_DataIn>
    inputaddr+=4;
 80083f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f8:	f103 0304 	add.w	r3, r3, #4
 80083fc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80083fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008400:	f103 0304 	add.w	r3, r3, #4
 8008404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	429a      	cmp	r2, r3
 800840c:	d3ee      	bcc.n	80083ec <HASH_MD5+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800840e:	f7ff fe3d 	bl	800808c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008412:	f04f 0008 	mov.w	r0, #8
 8008416:	f7ff ff2b 	bl	8008270 <HASH_GetFlagStatus>
 800841a:	4603      	mov	r3, r0
 800841c:	643b      	str	r3, [r7, #64]	; 0x40
    counter++;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f103 0301 	add.w	r3, r3, #1
 8008424:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842c:	d002      	beq.n	8008434 <HASH_MD5+0xc0>
 800842e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1ee      	bne.n	8008412 <HASH_MD5+0x9e>

  if (busystatus != RESET)
 8008434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d004      	beq.n	8008444 <HASH_MD5+0xd0>
  {
     status = ERROR;
 800843a:	f04f 0300 	mov.w	r3, #0
 800843e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8008442:	e02c      	b.n	800849e <HASH_MD5+0x12a>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8008444:	f107 0318 	add.w	r3, r7, #24
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff fded 	bl	8008028 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800844e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	4618      	mov	r0, r3
 8008454:	f7f8 f8dc 	bl	8000610 <__REV>
 8008458:	4603      	mov	r3, r0
 800845a:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 800845c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845e:	f103 0304 	add.w	r3, r3, #4
 8008462:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8008464:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	4618      	mov	r0, r3
 800846a:	f7f8 f8d1 	bl	8000610 <__REV>
 800846e:	4603      	mov	r3, r0
 8008470:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008474:	f103 0304 	add.w	r3, r3, #4
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800847a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	4618      	mov	r0, r3
 8008480:	f7f8 f8c6 	bl	8000610 <__REV>
 8008484:	4603      	mov	r3, r0
 8008486:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848a:	f103 0304 	add.w	r3, r3, #4
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8008490:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	4618      	mov	r0, r3
 8008496:	f7f8 f8bb 	bl	8000610 <__REV>
 800849a:	4603      	mov	r3, r0
 800849c:	6023      	str	r3, [r4, #0]
  }
  return status; 
 800849e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	f107 0754 	add.w	r7, r7, #84	; 0x54
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd90      	pop	{r4, r7, pc}

080084ac <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 80084ac:	b590      	push	{r4, r7, lr}
 80084ae:	b097      	sub	sp, #92	; 0x5c
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 80084c6:	f04f 0300 	mov.w	r3, #0
 80084ca:	657b      	str	r3, [r7, #84]	; 0x54
  __IO uint32_t counter = 0;
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 80084d8:	f04f 0301 	mov.w	r3, #1
 80084dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint32_t keyaddr    = (uint32_t)Key;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t inputaddr  = (uint32_t)Input;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t outputaddr = (uint32_t)Output;
 80084e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ea:	643b      	str	r3, [r7, #64]	; 0x40

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	b29b      	uxth	r3, r3
 8008508:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800850c:	b29b      	uxth	r3, r3
 800850e:	833b      	strh	r3, [r7, #24]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8008510:	f7ff fcb6 	bl	8007e80 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8008514:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008518:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800851a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800851e:	637b      	str	r3, [r7, #52]	; 0x34
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008520:	f04f 0320 	mov.w	r3, #32
 8008524:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b40      	cmp	r3, #64	; 0x40
 800852a:	d903      	bls.n	8008534 <HMAC_MD5+0x88>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800852c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008532:	e002      	b.n	800853a <HMAC_MD5+0x8e>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800853a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff fcae 	bl	8007ea0 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8008544:	8b3b      	ldrh	r3, [r7, #24]
 8008546:	b29b      	uxth	r3, r3
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fd29 	bl	8007fa0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800854e:	f04f 0300 	mov.w	r3, #0
 8008552:	657b      	str	r3, [r7, #84]	; 0x54
 8008554:	e00c      	b.n	8008570 <HMAC_MD5+0xc4>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8008556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fd44 	bl	8007fe8 <HASH_DataIn>
    keyaddr+=4;
 8008560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008562:	f103 0304 	add.w	r3, r3, #4
 8008566:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8008568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800856a:	f103 0304 	add.w	r3, r3, #4
 800856e:	657b      	str	r3, [r7, #84]	; 0x54
 8008570:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	429a      	cmp	r2, r3
 8008576:	d3ee      	bcc.n	8008556 <HMAC_MD5+0xaa>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 8008578:	f7ff fd88 	bl	800808c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800857c:	f04f 0008 	mov.w	r0, #8
 8008580:	f7ff fe76 	bl	8008270 <HASH_GetFlagStatus>
 8008584:	4603      	mov	r3, r0
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
    counter++;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f103 0301 	add.w	r3, r3, #1
 800858e:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008596:	d002      	beq.n	800859e <HMAC_MD5+0xf2>
 8008598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1ee      	bne.n	800857c <HMAC_MD5+0xd0>

  if (busystatus != RESET)
 800859e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <HMAC_MD5+0x102>
  {
     status = ERROR;
 80085a4:	f04f 0300 	mov.w	r3, #0
 80085a8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80085ac:	e09e      	b.n	80086ec <HMAC_MD5+0x240>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80085ae:	8b7b      	ldrh	r3, [r7, #26]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fcf4 	bl	8007fa0 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	657b      	str	r3, [r7, #84]	; 0x54
 80085be:	e00c      	b.n	80085da <HMAC_MD5+0x12e>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80085c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fd0f 	bl	8007fe8 <HASH_DataIn>
      inputaddr+=4;
 80085ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085cc:	f103 0304 	add.w	r3, r3, #4
 80085d0:	64bb      	str	r3, [r7, #72]	; 0x48
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80085d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d4:	f103 0304 	add.w	r3, r3, #4
 80085d8:	657b      	str	r3, [r7, #84]	; 0x54
 80085da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d3ee      	bcc.n	80085c0 <HMAC_MD5+0x114>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 80085e2:	f7ff fd53 	bl	800808c <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	617b      	str	r3, [r7, #20]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80085ec:	f04f 0008 	mov.w	r0, #8
 80085f0:	f7ff fe3e 	bl	8008270 <HASH_GetFlagStatus>
 80085f4:	4603      	mov	r3, r0
 80085f6:	647b      	str	r3, [r7, #68]	; 0x44
       counter++;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f103 0301 	add.w	r3, r3, #1
 80085fe:	617b      	str	r3, [r7, #20]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008606:	d002      	beq.n	800860e <HMAC_MD5+0x162>
 8008608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1ee      	bne.n	80085ec <HMAC_MD5+0x140>

    if (busystatus != RESET)
 800860e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <HMAC_MD5+0x172>
    {
      status = ERROR;
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800861c:	e066      	b.n	80086ec <HMAC_MD5+0x240>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800861e:	8b3b      	ldrh	r3, [r7, #24]
 8008620:	b29b      	uxth	r3, r3
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fcbc 	bl	8007fa0 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	64fb      	str	r3, [r7, #76]	; 0x4c
      for(i=0; i<Keylen; i+=4)
 800862c:	f04f 0300 	mov.w	r3, #0
 8008630:	657b      	str	r3, [r7, #84]	; 0x54
 8008632:	e00c      	b.n	800864e <HMAC_MD5+0x1a2>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8008634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fcd5 	bl	8007fe8 <HASH_DataIn>
        keyaddr+=4;
 800863e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008640:	f103 0304 	add.w	r3, r3, #4
 8008644:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8008646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008648:	f103 0304 	add.w	r3, r3, #4
 800864c:	657b      	str	r3, [r7, #84]	; 0x54
 800864e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	d3ee      	bcc.n	8008634 <HMAC_MD5+0x188>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 8008656:	f7ff fd19 	bl	800808c <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800865a:	f04f 0300 	mov.w	r3, #0
 800865e:	617b      	str	r3, [r7, #20]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008660:	f04f 0008 	mov.w	r0, #8
 8008664:	f7ff fe04 	bl	8008270 <HASH_GetFlagStatus>
 8008668:	4603      	mov	r3, r0
 800866a:	647b      	str	r3, [r7, #68]	; 0x44
          counter++;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f103 0301 	add.w	r3, r3, #1
 8008672:	617b      	str	r3, [r7, #20]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867a:	d002      	beq.n	8008682 <HMAC_MD5+0x1d6>
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1ee      	bne.n	8008660 <HMAC_MD5+0x1b4>

      if (busystatus != RESET)
 8008682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008684:	2b00      	cmp	r3, #0
 8008686:	d004      	beq.n	8008692 <HMAC_MD5+0x1e6>
      {
         status = ERROR;
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008690:	e02c      	b.n	80086ec <HMAC_MD5+0x240>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 8008692:	f107 031c 	add.w	r3, r7, #28
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fcc6 	bl	8008028 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800869c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7f7 ffb5 	bl	8000610 <__REV>
 80086a6:	4603      	mov	r3, r0
 80086a8:	6023      	str	r3, [r4, #0]
         outputaddr+=4;
 80086aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ac:	f103 0304 	add.w	r3, r3, #4
 80086b0:	643b      	str	r3, [r7, #64]	; 0x40
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 80086b2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f7 ffaa 	bl	8000610 <__REV>
 80086bc:	4603      	mov	r3, r0
 80086be:	6023      	str	r3, [r4, #0]
         outputaddr+=4;
 80086c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c2:	f103 0304 	add.w	r3, r3, #4
 80086c6:	643b      	str	r3, [r7, #64]	; 0x40
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 80086c8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7f7 ff9f 	bl	8000610 <__REV>
 80086d2:	4603      	mov	r3, r0
 80086d4:	6023      	str	r3, [r4, #0]
         outputaddr+=4;
 80086d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d8:	f103 0304 	add.w	r3, r3, #4
 80086dc:	643b      	str	r3, [r7, #64]	; 0x40
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 80086de:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7f7 ff94 	bl	8000610 <__REV>
 80086e8:	4603      	mov	r3, r0
 80086ea:	6023      	str	r3, [r4, #0]
      }
    }
  }
  return status;  
 80086ec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd90      	pop	{r4, r7, pc}
 80086fa:	bf00      	nop

080086fc <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b095      	sub	sp, #84	; 0x54
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	64fb      	str	r3, [r7, #76]	; 0x4c
  __IO uint32_t counter = 0;
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatus status = SUCCESS;
 8008720:	f04f 0301 	mov.w	r3, #1
 8008724:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint32_t inputaddr  = (uint32_t)Input;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t outputaddr = (uint32_t)Output;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	b29b      	uxth	r3, r3
 800873a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800873e:	b29b      	uxth	r3, r3
 8008740:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8008742:	f7ff fb9d 	bl	8007e80 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8008746:	f04f 0300 	mov.w	r3, #0
 800874a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008752:	f04f 0320 	mov.w	r3, #32
 8008756:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&SHA1_HASH_InitStructure);
 8008758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff fb9f 	bl	8007ea0 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8008762:	8afb      	ldrh	r3, [r7, #22]
 8008764:	b29b      	uxth	r3, r3
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fc1a 	bl	8007fa0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008772:	e00c      	b.n	800878e <HASH_SHA1+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8008774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff fc35 	bl	8007fe8 <HASH_DataIn>
    inputaddr+=4;
 800877e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008780:	f103 0304 	add.w	r3, r3, #4
 8008784:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8008786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008788:	f103 0304 	add.w	r3, r3, #4
 800878c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800878e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	d3ee      	bcc.n	8008774 <HASH_SHA1+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8008796:	f7ff fc79 	bl	800808c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800879a:	f04f 0008 	mov.w	r0, #8
 800879e:	f7ff fd67 	bl	8008270 <HASH_GetFlagStatus>
 80087a2:	4603      	mov	r3, r0
 80087a4:	643b      	str	r3, [r7, #64]	; 0x40
    counter++;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f103 0301 	add.w	r3, r3, #1
 80087ac:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b4:	d002      	beq.n	80087bc <HASH_SHA1+0xc0>
 80087b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1ee      	bne.n	800879a <HASH_SHA1+0x9e>

  if (busystatus != RESET)
 80087bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <HASH_SHA1+0xd0>
  {
     status = ERROR;
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80087ca:	e037      	b.n	800883c <HASH_SHA1+0x140>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 80087cc:	f107 0318 	add.w	r3, r7, #24
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff fc29 	bl	8008028 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 80087d6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	4618      	mov	r0, r3
 80087dc:	f7f7 ff18 	bl	8000610 <__REV>
 80087e0:	4603      	mov	r3, r0
 80087e2:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 80087e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e6:	f103 0304 	add.w	r3, r3, #4
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 80087ec:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f7 ff0d 	bl	8000610 <__REV>
 80087f6:	4603      	mov	r3, r0
 80087f8:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 80087fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fc:	f103 0304 	add.w	r3, r3, #4
 8008800:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8008802:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	4618      	mov	r0, r3
 8008808:	f7f7 ff02 	bl	8000610 <__REV>
 800880c:	4603      	mov	r3, r0
 800880e:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008812:	f103 0304 	add.w	r3, r3, #4
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8008818:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	4618      	mov	r0, r3
 800881e:	f7f7 fef7 	bl	8000610 <__REV>
 8008822:	4603      	mov	r3, r0
 8008824:	6023      	str	r3, [r4, #0]
    outputaddr+=4;
 8008826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008828:	f103 0304 	add.w	r3, r3, #4
 800882c:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800882e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	4618      	mov	r0, r3
 8008834:	f7f7 feec 	bl	8000610 <__REV>
 8008838:	4603      	mov	r3, r0
 800883a:	6023      	str	r3, [r4, #0]
  }
  return status;
 800883c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 8008840:	4618      	mov	r0, r3
 8008842:	f107 0754 	add.w	r7, r7, #84	; 0x54
 8008846:	46bd      	mov	sp, r7
 8008848:	bd90      	pop	{r4, r7, pc}
 800884a:	bf00      	nop

0800884c <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800884c:	b590      	push	{r4, r7, lr}
 800884e:	b097      	sub	sp, #92	; 0x5c
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800885a:	f04f 0300 	mov.w	r3, #0
 800885e:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	657b      	str	r3, [r7, #84]	; 0x54
  __IO uint32_t counter = 0;
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatus status = SUCCESS;
 8008878:	f04f 0301 	mov.w	r3, #1
 800887c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint32_t keyaddr    = (uint32_t)Key;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t inputaddr  = (uint32_t)Input;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t outputaddr = (uint32_t)Output;
 8008888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800888a:	643b      	str	r3, [r7, #64]	; 0x40

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f003 0303 	and.w	r3, r3, #3
 8008894:	b29b      	uxth	r3, r3
 8008896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800889a:	b29b      	uxth	r3, r3
 800889c:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 80088b0:	f7ff fae6 	bl	8007e80 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 80088b4:	f04f 0300 	mov.w	r3, #0
 80088b8:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 80088ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80088c0:	f04f 0320 	mov.w	r3, #32
 80088c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b40      	cmp	r3, #64	; 0x40
 80088ca:	d903      	bls.n	80088d4 <HMAC_SHA1+0x88>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 80088cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d2:	e002      	b.n	80088da <HMAC_SHA1+0x8e>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 80088da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff fade 	bl	8007ea0 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80088e4:	8b3b      	ldrh	r3, [r7, #24]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff fb59 	bl	8007fa0 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80088ee:	f04f 0300 	mov.w	r3, #0
 80088f2:	657b      	str	r3, [r7, #84]	; 0x54
 80088f4:	e00c      	b.n	8008910 <HMAC_SHA1+0xc4>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 80088f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff fb74 	bl	8007fe8 <HASH_DataIn>
    keyaddr+=4;
 8008900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008902:	f103 0304 	add.w	r3, r3, #4
 8008906:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8008908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800890a:	f103 0304 	add.w	r3, r3, #4
 800890e:	657b      	str	r3, [r7, #84]	; 0x54
 8008910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	429a      	cmp	r2, r3
 8008916:	d3ee      	bcc.n	80088f6 <HMAC_SHA1+0xaa>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8008918:	f7ff fbb8 	bl	800808c <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800891c:	f04f 0008 	mov.w	r0, #8
 8008920:	f7ff fca6 	bl	8008270 <HASH_GetFlagStatus>
 8008924:	4603      	mov	r3, r0
 8008926:	647b      	str	r3, [r7, #68]	; 0x44
    counter++;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f103 0301 	add.w	r3, r3, #1
 800892e:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008936:	d002      	beq.n	800893e <HMAC_SHA1+0xf2>
 8008938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1ee      	bne.n	800891c <HMAC_SHA1+0xd0>

  if (busystatus != RESET)
 800893e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008940:	2b00      	cmp	r3, #0
 8008942:	d004      	beq.n	800894e <HMAC_SHA1+0x102>
  {
     status = ERROR;
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800894c:	e0a9      	b.n	8008aa2 <HMAC_SHA1+0x256>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800894e:	8b7b      	ldrh	r3, [r7, #26]
 8008950:	b29b      	uxth	r3, r3
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff fb24 	bl	8007fa0 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	657b      	str	r3, [r7, #84]	; 0x54
 800895e:	e00c      	b.n	800897a <HMAC_SHA1+0x12e>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8008960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff fb3f 	bl	8007fe8 <HASH_DataIn>
      inputaddr+=4;
 800896a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800896c:	f103 0304 	add.w	r3, r3, #4
 8008970:	64bb      	str	r3, [r7, #72]	; 0x48
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8008972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008974:	f103 0304 	add.w	r3, r3, #4
 8008978:	657b      	str	r3, [r7, #84]	; 0x54
 800897a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d3ee      	bcc.n	8008960 <HMAC_SHA1+0x114>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8008982:	f7ff fb83 	bl	800808c <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 8008986:	f04f 0300 	mov.w	r3, #0
 800898a:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800898c:	f04f 0008 	mov.w	r0, #8
 8008990:	f7ff fc6e 	bl	8008270 <HASH_GetFlagStatus>
 8008994:	4603      	mov	r3, r0
 8008996:	647b      	str	r3, [r7, #68]	; 0x44
      counter++;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f103 0301 	add.w	r3, r3, #1
 800899e:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a6:	d002      	beq.n	80089ae <HMAC_SHA1+0x162>
 80089a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1ee      	bne.n	800898c <HMAC_SHA1+0x140>

    if (busystatus != RESET)
 80089ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <HMAC_SHA1+0x172>
    {
      status = ERROR;
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80089bc:	e071      	b.n	8008aa2 <HMAC_SHA1+0x256>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80089be:	8b3b      	ldrh	r3, [r7, #24]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff faec 	bl	8007fa0 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      for(i=0; i<Keylen; i+=4)
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	657b      	str	r3, [r7, #84]	; 0x54
 80089d2:	e00c      	b.n	80089ee <HMAC_SHA1+0x1a2>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 80089d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff fb05 	bl	8007fe8 <HASH_DataIn>
        keyaddr+=4;
 80089de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e0:	f103 0304 	add.w	r3, r3, #4
 80089e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80089e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e8:	f103 0304 	add.w	r3, r3, #4
 80089ec:	657b      	str	r3, [r7, #84]	; 0x54
 80089ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d3ee      	bcc.n	80089d4 <HMAC_SHA1+0x188>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 80089f6:	f7ff fb49 	bl	800808c <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 80089fa:	f04f 0300 	mov.w	r3, #0
 80089fe:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008a00:	f04f 0008 	mov.w	r0, #8
 8008a04:	f7ff fc34 	bl	8008270 <HASH_GetFlagStatus>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	647b      	str	r3, [r7, #68]	; 0x44
        counter++;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f103 0301 	add.w	r3, r3, #1
 8008a12:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a1a:	d002      	beq.n	8008a22 <HMAC_SHA1+0x1d6>
 8008a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1ee      	bne.n	8008a00 <HMAC_SHA1+0x1b4>

      if (busystatus != RESET)
 8008a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <HMAC_SHA1+0x1e6>
      {
        status = ERROR;
 8008a28:	f04f 0300 	mov.w	r3, #0
 8008a2c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008a30:	e037      	b.n	8008aa2 <HMAC_SHA1+0x256>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8008a32:	f107 031c 	add.w	r3, r7, #28
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff faf6 	bl	8008028 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8008a3c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7f7 fde5 	bl	8000610 <__REV>
 8008a46:	4603      	mov	r3, r0
 8008a48:	6023      	str	r3, [r4, #0]
        outputaddr+=4;
 8008a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4c:	f103 0304 	add.w	r3, r3, #4
 8008a50:	643b      	str	r3, [r7, #64]	; 0x40
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8008a52:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7f7 fdda 	bl	8000610 <__REV>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	6023      	str	r3, [r4, #0]
        outputaddr+=4;
 8008a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a62:	f103 0304 	add.w	r3, r3, #4
 8008a66:	643b      	str	r3, [r7, #64]	; 0x40
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8008a68:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f7 fdcf 	bl	8000610 <__REV>
 8008a72:	4603      	mov	r3, r0
 8008a74:	6023      	str	r3, [r4, #0]
        outputaddr+=4;
 8008a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a78:	f103 0304 	add.w	r3, r3, #4
 8008a7c:	643b      	str	r3, [r7, #64]	; 0x40
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8008a7e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f7 fdc4 	bl	8000610 <__REV>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	6023      	str	r3, [r4, #0]
        outputaddr+=4;
 8008a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8e:	f103 0304 	add.w	r3, r3, #4
 8008a92:	643b      	str	r3, [r7, #64]	; 0x40
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8008a94:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7f7 fdb9 	bl	8000610 <__REV>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	6023      	str	r3, [r4, #0]
      }
    }  
  }
  return status;  
 8008aa2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f107 075c 	add.w	r7, r7, #92	; 0x5c
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd90      	pop	{r4, r7, pc}

08008ab0 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8008abe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d10c      	bne.n	8008ae0 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8008ac6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008aca:	f04f 0101 	mov.w	r1, #1
 8008ace:	f001 fb89 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8008ad2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008ad6:	f04f 0100 	mov.w	r1, #0
 8008ada:	f001 fb83 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 8008ade:	e026      	b.n	8008b2e <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8008ae6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d10c      	bne.n	8008b08 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8008aee:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008af2:	f04f 0101 	mov.w	r1, #1
 8008af6:	f001 fb75 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8008afa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008afe:	f04f 0100 	mov.w	r1, #0
 8008b02:	f001 fb6f 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 8008b06:	e012      	b.n	8008b2e <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8008b0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d10b      	bne.n	8008b2e <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8008b16:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008b1a:	f04f 0101 	mov.w	r1, #1
 8008b1e:	f001 fb61 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8008b22:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008b26:	f04f 0100 	mov.w	r1, #0
 8008b2a:	f001 fb5b 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8008b2e:	f107 0708 	add.w	r7, r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008b48:	f04f 0300 	mov.w	r3, #0
 8008b4c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8008b4e:	f04f 0304 	mov.w	r3, #4
 8008b52:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8008b54:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8008b58:	f2c0 037a 	movt	r3, #122	; 0x7a
 8008b5c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	889b      	ldrh	r3, [r3, #4]
 8008b62:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8008b64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b6a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 f883 	bl	8009c7c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	f64d 6383 	movw	r3, #56963	; 0xde83
 8008b80:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8008b84:	fba3 1302 	umull	r1, r3, r3, r2
 8008b88:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8008b8c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8008b8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b92:	4313      	orrs	r3, r2
 8008b94:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008b9a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8008bba:	f2c0 0301 	movt	r3, #1
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d818      	bhi.n	8008bf4 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd0:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8008bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d802      	bhi.n	8008bde <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8008bd8:	f04f 0304 	mov.w	r3, #4
 8008bdc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8008bde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be2:	4313      	orrs	r3, r2
 8008be4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8008be6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008be8:	f103 0301 	add.w	r3, r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	841a      	strh	r2, [r3, #32]
 8008bf2:	e04b      	b.n	8008c8c <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	88da      	ldrh	r2, [r3, #6]
 8008bf8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d10a      	bne.n	8008c16 <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	4613      	mov	r3, r2
 8008c06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c0a:	189b      	adds	r3, r3, r2
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008c14:	e010      	b.n	8008c38 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008c20:	189b      	adds	r3, r3, r2
 8008c22:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8008c26:	189b      	adds	r3, r3, r2
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8008c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c36:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8008c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c3a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8008c3e:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8008c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c48:	f043 0301 	orr.w	r3, r3, #1
 8008c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8008c4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c52:	4313      	orrs	r3, r2
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8008c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c66:	fb02 f203 	mul.w	r2, r2, r3
 8008c6a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8008c6e:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8008c72:	fb83 1302 	smull	r1, r3, r3, r2
 8008c76:	ea4f 11a3 	mov.w	r1, r3, asr #6
 8008c7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8008c7e:	1acb      	subs	r3, r1, r3
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	f103 0301 	add.w	r3, r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008c90:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f043 0301 	orr.w	r3, r3, #1
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8008ca8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cae:	f023 030a 	bic.w	r3, r3, #10
 8008cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	889a      	ldrh	r2, [r3, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	895b      	ldrh	r3, [r3, #10]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008cca:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	899a      	ldrh	r2, [r3, #12]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	891b      	ldrh	r3, [r3, #8]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	811a      	strh	r2, [r3, #8]
}
 8008cdc:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf2:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8008d02:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f04f 0200 	mov.w	r2, #0
 8008d12:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d1a:	819a      	strh	r2, [r3, #12]
}
 8008d1c:	f107 070c 	add.w	r7, r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop

08008d28 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d008      	beq.n	8008d4c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	f043 0301 	orr.w	r3, r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	801a      	strh	r2, [r3, #0]
 8008d4a:	e007      	b.n	8008d5c <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	881b      	ldrh	r3, [r3, #0]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	f023 0301 	bic.w	r3, r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	801a      	strh	r2, [r3, #0]
  }
}
 8008d5c:	f107 070c 	add.w	r7, r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bc80      	pop	{r7}
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop

08008d68 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d008      	beq.n	8008d8c <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	801a      	strh	r2, [r3, #0]
 8008d8a:	e007      	b.n	8008d9c <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	801a      	strh	r2, [r3, #0]
  }
}
 8008d9c:	f107 070c 	add.w	r7, r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bc80      	pop	{r7}
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop

08008da8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d008      	beq.n	8008dcc <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	e007      	b.n	8008ddc <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	801a      	strh	r2, [r3, #0]
  }
}
 8008ddc:	f107 070c 	add.w	r7, r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bc80      	pop	{r7}
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop

08008de8 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	460a      	mov	r2, r1
 8008df4:	70fa      	strb	r2, [r7, #3]
 8008df6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8008df8:	78bb      	ldrb	r3, [r7, #2]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d004      	beq.n	8008e08 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	f043 0301 	orr.w	r3, r3, #1
 8008e04:	70fb      	strb	r3, [r7, #3]
 8008e06:	e003      	b.n	8008e10 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	f023 0301 	bic.w	r3, r3, #1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	821a      	strh	r2, [r3, #16]
}
 8008e18:	f107 070c 	add.w	r7, r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop

08008e24 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d008      	beq.n	8008e48 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e007      	b.n	8008e58 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	801a      	strh	r2, [r3, #0]
  }
}
 8008e58:	f107 070c 	add.w	r7, r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop

08008e64 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	899b      	ldrh	r3, [r3, #12]
 8008e7a:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8008e7c:	89fb      	ldrh	r3, [r7, #14]
 8008e7e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8008e82:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	89fb      	ldrh	r3, [r7, #14]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	89fa      	ldrh	r2, [r7, #14]
 8008e9a:	819a      	strh	r2, [r3, #12]
}
 8008e9c:	f107 0714 	add.w	r7, r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bc80      	pop	{r7}
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop

08008ea8 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d008      	beq.n	8008ecc <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	899b      	ldrh	r3, [r3, #12]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	819a      	strh	r2, [r3, #12]
 8008eca:	e007      	b.n	8008edc <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	899b      	ldrh	r3, [r3, #12]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f023 0301 	bic.w	r3, r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	819a      	strh	r2, [r3, #12]
  }
}
 8008edc:	f107 070c 	add.w	r7, r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop

08008ee8 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d008      	beq.n	8008f0c <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	801a      	strh	r2, [r3, #0]
 8008f0a:	e007      	b.n	8008f1c <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	801a      	strh	r2, [r3, #0]
  }
}
 8008f1c:	f107 070c 	add.w	r7, r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bc80      	pop	{r7}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop

08008f28 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	801a      	strh	r2, [r3, #0]
 8008f4e:	e009      	b.n	8008f64 <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8008f5a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	801a      	strh	r2, [r3, #0]
  }
}
 8008f64:	f107 070c 	add.w	r7, r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bc80      	pop	{r7}
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop

08008f70 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d108      	bne.n	8008f94 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	e007      	b.n	8008fa4 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	801a      	strh	r2, [r3, #0]
  }
}
 8008fa4:	f107 070c 	add.w	r7, r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop

08008fb0 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8008fbc:	887b      	ldrh	r3, [r7, #2]
 8008fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fc2:	d008      	beq.n	8008fd6 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	8b9b      	ldrh	r3, [r3, #28]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	839a      	strh	r2, [r3, #28]
 8008fd4:	e007      	b.n	8008fe6 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	8b9b      	ldrh	r3, [r3, #28]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	839a      	strh	r2, [r3, #28]
  }
}
 8008fe6:	f107 070c 	add.w	r7, r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr

08008ff0 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8008ffc:	887b      	ldrh	r3, [r7, #2]
 8008ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009002:	d108      	bne.n	8009016 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	b29b      	uxth	r3, r3
 800900a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800900e:	b29a      	uxth	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	801a      	strh	r2, [r3, #0]
 8009014:	e007      	b.n	8009026 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009020:	b29a      	uxth	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	801a      	strh	r2, [r3, #0]
  }
}
 8009026:	f107 070c 	add.w	r7, r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	bc80      	pop	{r7}
 800902e:	4770      	bx	lr

08009030 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800903c:	887b      	ldrh	r3, [r7, #2]
 800903e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009042:	d108      	bne.n	8009056 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29b      	uxth	r3, r3
 800904a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800904e:	b29a      	uxth	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	e007      	b.n	8009066 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	b29b      	uxth	r3, r3
 800905c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009060:	b29a      	uxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	801a      	strh	r2, [r3, #0]
  }
}
 8009066:	f107 070c 	add.w	r7, r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	bc80      	pop	{r7}
 800906e:	4770      	bx	lr

08009070 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d008      	beq.n	8009094 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	f043 0310 	orr.w	r3, r3, #16
 800908c:	b29a      	uxth	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	801a      	strh	r2, [r3, #0]
 8009092:	e007      	b.n	80090a4 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	f023 0310 	bic.w	r3, r3, #16
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	801a      	strh	r2, [r3, #0]
  }
}
 80090a4:	f107 070c 	add.w	r7, r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop

080090b0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	821a      	strh	r2, [r3, #16]
}
 80090c4:	f107 070c 	add.w	r7, r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop

080090d0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	8a1b      	ldrh	r3, [r3, #16]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	b2db      	uxtb	r3, r3
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	f107 070c 	add.w	r7, r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bc80      	pop	{r7}
 80090ea:	4770      	bx	lr

080090ec <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80090f8:	78fb      	ldrb	r3, [r7, #3]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d008      	beq.n	8009110 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009108:	b29a      	uxth	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	e007      	b.n	8009120 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800911a:	b29a      	uxth	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	801a      	strh	r2, [r3, #0]
  }
}
 8009120:	f107 070c 	add.w	r7, r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop

0800912c <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8009138:	887b      	ldrh	r3, [r7, #2]
 800913a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800913e:	d108      	bne.n	8009152 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800914a:	b29a      	uxth	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	801a      	strh	r2, [r3, #0]
 8009150:	e007      	b.n	8009162 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	b29b      	uxth	r3, r3
 8009158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	801a      	strh	r2, [r3, #0]
  }
}
 8009162:	f107 070c 	add.w	r7, r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr

0800916c <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d008      	beq.n	8009190 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	f043 0320 	orr.w	r3, r3, #32
 8009188:	b29a      	uxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	801a      	strh	r2, [r3, #0]
 800918e:	e007      	b.n	80091a0 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f023 0320 	bic.w	r3, r3, #32
 800919a:	b29a      	uxth	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	801a      	strh	r2, [r3, #0]
  }
}
 80091a0:	f107 070c 	add.w	r7, r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bc80      	pop	{r7}
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop

080091ac <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	8b1b      	ldrh	r3, [r3, #24]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80091be:	b29b      	uxth	r3, r3
 80091c0:	b2db      	uxtb	r3, r3
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	f107 070c 	add.w	r7, r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bc80      	pop	{r7}
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop

080091d0 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d008      	beq.n	80091f4 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	889b      	ldrh	r3, [r3, #4]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	809a      	strh	r2, [r3, #4]
 80091f2:	e007      	b.n	8009204 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	889b      	ldrh	r3, [r3, #4]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091fe:	b29a      	uxth	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	809a      	strh	r2, [r3, #4]
  }
}
 8009204:	f107 070c 	add.w	r7, r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	bc80      	pop	{r7}
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop

08009210 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d008      	beq.n	8009234 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	889b      	ldrh	r3, [r3, #4]
 8009226:	b29b      	uxth	r3, r3
 8009228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800922c:	b29a      	uxth	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	809a      	strh	r2, [r3, #4]
 8009232:	e007      	b.n	8009244 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	889b      	ldrh	r3, [r3, #4]
 8009238:	b29b      	uxth	r3, r3
 800923a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	809a      	strh	r2, [r3, #4]
  }
}
 8009244:	f107 070c 	add.w	r7, r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop

08009250 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	18d3      	adds	r3, r2, r3
 800926c:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
}
 8009274:	4618      	mov	r0, r3
 8009276:	f107 0714 	add.w	r7, r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr

08009280 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	4613      	mov	r3, r2
 800928a:	460a      	mov	r2, r1
 800928c:	807a      	strh	r2, [r7, #2]
 800928e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8009290:	787b      	ldrb	r3, [r7, #1]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d008      	beq.n	80092a8 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	b29a      	uxth	r2, r3
 800929c:	887b      	ldrh	r3, [r7, #2]
 800929e:	4313      	orrs	r3, r2
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	809a      	strh	r2, [r3, #4]
 80092a6:	e00a      	b.n	80092be <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	889b      	ldrh	r3, [r3, #4]
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	887b      	ldrh	r3, [r7, #2]
 80092b0:	ea6f 0303 	mvn.w	r3, r3
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4013      	ands	r3, r2
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	809a      	strh	r2, [r3, #4]
  }
}
 80092be:	f107 070c 	add.w	r7, r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80092d2:	f04f 0300 	mov.w	r3, #0
 80092d6:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80092d8:	f04f 0300 	mov.w	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	f04f 0300 	mov.w	r3, #0
 80092e2:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8a9b      	ldrh	r3, [r3, #20]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8b1b      	ldrh	r3, [r3, #24]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8009300:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	4313      	orrs	r3, r2
 8009308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800930c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	401a      	ands	r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d103      	bne.n	8009322 <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800931a:	f04f 0301 	mov.w	r3, #1
 800931e:	75fb      	strb	r3, [r7, #23]
 8009320:	e002      	b.n	8009328 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8009322:	f04f 0300 	mov.w	r3, #0
 8009326:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8009328:	7dfb      	ldrb	r3, [r7, #23]
}
 800932a:	4618      	mov	r0, r3
 800932c:	f107 071c 	add.w	r7, r7, #28
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop

08009338 <I2C_GetLastEvent>:
  *         in stm32f2xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8009340:	f04f 0300 	mov.w	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8009346:	f04f 0300 	mov.w	r3, #0
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	f04f 0300 	mov.w	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	8a9b      	ldrh	r3, [r3, #20]
 8009356:	b29b      	uxth	r3, r3
 8009358:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8b1b      	ldrh	r3, [r3, #24]
 800935e:	b29b      	uxth	r3, r3
 8009360:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8009368:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4313      	orrs	r3, r2
 8009370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009374:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8009376:	697b      	ldr	r3, [r7, #20]
}
 8009378:	4618      	mov	r0, r3
 800937a:	f107 071c 	add.w	r7, r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	bc80      	pop	{r7}
 8009382:	4770      	bx	lr

08009384 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800938e:	f04f 0300 	mov.w	r3, #0
 8009392:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	613b      	str	r3, [r7, #16]
 800939a:	f04f 0300 	mov.w	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	ea4f 7313 	mov.w	r3, r3, lsr #28
 80093aa:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80093b2:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f103 0314 	add.w	r3, r3, #20
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	e007      	b.n	80093d4 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80093ca:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f103 0318 	add.w	r3, r3, #24
 80093d2:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	4013      	ands	r3, r2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80093e0:	f04f 0301 	mov.w	r3, #1
 80093e4:	75fb      	strb	r3, [r7, #23]
 80093e6:	e002      	b.n	80093ee <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	f107 071c 	add.w	r7, r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr

080093fc <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009412:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	b29b      	uxth	r3, r3
 8009418:	ea6f 0303 	mvn.w	r3, r3
 800941c:	b29a      	uxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	829a      	strh	r2, [r3, #20]
}
 8009422:	f107 0714 	add.w	r7, r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	bc80      	pop	{r7}
 800942a:	4770      	bx	lr

0800942c <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8009436:	f04f 0300 	mov.w	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800943c:	f04f 0300 	mov.w	r3, #0
 8009440:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009448:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	889b      	ldrh	r3, [r3, #4]
 8009450:	b29b      	uxth	r3, r3
 8009452:	4013      	ands	r3, r2
 8009454:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800945c:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	8a9b      	ldrh	r3, [r3, #20]
 8009462:	b29b      	uxth	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	4013      	ands	r3, r2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d006      	beq.n	800947c <I2C_GetITStatus+0x50>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8009474:	f04f 0301 	mov.w	r3, #1
 8009478:	73fb      	strb	r3, [r7, #15]
 800947a:	e002      	b.n	8009482 <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	f107 0714 	add.w	r7, r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	bc80      	pop	{r7}
 800948e:	4770      	bx	lr

08009490 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094a6:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	ea6f 0303 	mvn.w	r3, r3
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	829a      	strh	r2, [r3, #20]
}
 80094b6:	f107 0714 	add.w	r7, r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bc80      	pop	{r7}
 80094be:	4770      	bx	lr

080094c0 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 80094ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80094ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80094d2:	88fa      	ldrh	r2, [r7, #6]
 80094d4:	601a      	str	r2, [r3, #0]
}
 80094d6:	f107 070c 	add.w	r7, r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	bc80      	pop	{r7}
 80094de:	4770      	bx	lr

080094e0 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 80094ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80094ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80094f2:	79fa      	ldrb	r2, [r7, #7]
 80094f4:	605a      	str	r2, [r3, #4]
}
 80094f6:	f107 070c 	add.w	r7, r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bc80      	pop	{r7}
 80094fe:	4770      	bx	lr

08009500 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800950a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800950e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009512:	88fa      	ldrh	r2, [r7, #6]
 8009514:	609a      	str	r2, [r3, #8]
}
 8009516:	f107 070c 	add.w	r7, r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	bc80      	pop	{r7}
 800951e:	4770      	bx	lr

08009520 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8009520:	b480      	push	{r7}
 8009522:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 8009524:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009528:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800952c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009530:	601a      	str	r2, [r3, #0]
}
 8009532:	46bd      	mov	sp, r7
 8009534:	bc80      	pop	{r7}
 8009536:	4770      	bx	lr

08009538 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800953c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009540:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009544:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009548:	601a      	str	r2, [r3, #0]
}
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr

08009550 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8009560:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009564:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	461a      	mov	r2, r3
 800956c:	88fb      	ldrh	r3, [r7, #6]
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <IWDG_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 8009574:	f04f 0301 	mov.w	r3, #1
 8009578:	73fb      	strb	r3, [r7, #15]
 800957a:	e002      	b.n	8009582 <IWDG_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	f107 0714 	add.w	r7, r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	bc80      	pop	{r7}
 800958e:	4770      	bx	lr

08009590 <__WFI>:

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
 8009594:	bf30      	wfi
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr

0800959c <__WFE>:
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
 80095a0:	bf20      	wfe
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bc80      	pop	{r7}
 80095a6:	4770      	bx	lr

080095a8 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 80095ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80095b0:	f04f 0101 	mov.w	r1, #1
 80095b4:	f000 fe16 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 80095b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80095bc:	f04f 0100 	mov.w	r1, #0
 80095c0:	f000 fe10 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
}
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop

080095c8 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80095d2:	f04f 0320 	mov.w	r3, #32
 80095d6:	f2c4 230e 	movt	r3, #16910	; 0x420e
 80095da:	79fa      	ldrb	r2, [r7, #7]
 80095dc:	601a      	str	r2, [r3, #0]
}
 80095de:	f107 070c 	add.w	r7, r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bc80      	pop	{r7}
 80095e6:	4770      	bx	lr

080095e8 <PWR_PVDLevelConfig>:
  *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
  * @note   Refer to the electrical characteristics of you device datasheet for more details. 
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80095f0:	f04f 0300 	mov.w	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 80095f6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80095fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009608:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8009612:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009616:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	601a      	str	r2, [r3, #0]
}
 800961e:	f107 0714 	add.w	r7, r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	bc80      	pop	{r7}
 8009626:	4770      	bx	lr

08009628 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8009632:	f04f 0310 	mov.w	r3, #16
 8009636:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800963a:	79fa      	ldrb	r2, [r7, #7]
 800963c:	601a      	str	r2, [r3, #0]
}
 800963e:	f107 070c 	add.w	r7, r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr

08009648 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8009652:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009656:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800965a:	79fa      	ldrb	r2, [r7, #7]
 800965c:	601a      	str	r2, [r3, #0]
}
 800965e:	f107 070c 	add.w	r7, r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	bc80      	pop	{r7}
 8009666:	4770      	bx	lr

08009668 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8009672:	f04f 03a4 	mov.w	r3, #164	; 0xa4
 8009676:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800967a:	79fa      	ldrb	r2, [r7, #7]
 800967c:	601a      	str	r2, [r3, #0]
}
 800967e:	f107 070c 	add.w	r7, r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr

08009688 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8009692:	f04f 0324 	mov.w	r3, #36	; 0x24
 8009696:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800969a:	79fa      	ldrb	r2, [r7, #7]
 800969c:	601a      	str	r2, [r3, #0]
}
 800969e:	f107 070c 	add.w	r7, r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80096b4:	f04f 0300 	mov.w	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80096ba:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80096be:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f023 0303 	bic.w	r3, r3, #3
 80096cc:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 80096d6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80096da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80096e2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80096e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80096ea:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80096ee:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80096f2:	6912      	ldr	r2, [r2, #16]
 80096f4:	f042 0204 	orr.w	r2, r2, #4
 80096f8:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d102      	bne.n	8009706 <PWR_EnterSTOPMode+0x5e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8009700:	f7ff ff46 	bl	8009590 <__WFI>
 8009704:	e001      	b.n	800970a <PWR_EnterSTOPMode+0x62>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8009706:	f7ff ff49 	bl	800959c <__WFE>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800970a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800970e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8009712:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8009716:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800971a:	6912      	ldr	r2, [r2, #16]
 800971c:	f022 0204 	bic.w	r2, r2, #4
 8009720:	611a      	str	r2, [r3, #16]
}
 8009722:	f107 0710 	add.w	r7, r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop

0800972c <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8009730:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009734:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009738:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800973c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	f042 0204 	orr.w	r2, r2, #4
 8009746:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8009748:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800974c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009750:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8009754:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	f042 0202 	orr.w	r2, r2, #2
 800975e:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8009760:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8009764:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8009768:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800976c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8009770:	6912      	ldr	r2, [r2, #16]
 8009772:	f042 0204 	orr.w	r2, r2, #4
 8009776:	611a      	str	r2, [r3, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009778:	f7ff ff0a 	bl	8009590 <__WFI>
}
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop

08009780 <PWR_GetFlagStatus>:
  *                  when the device wakes up from Standby mode or by a system reset 
  *                  or power reset.  
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8009788:	f04f 0300 	mov.w	r3, #0
 800978c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800978e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009792:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	461a      	mov	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4013      	ands	r3, r2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <PWR_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80097a2:	f04f 0301 	mov.w	r3, #1
 80097a6:	73fb      	strb	r3, [r7, #15]
 80097a8:	e002      	b.n	80097b0 <PWR_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 80097aa:	f04f 0300 	mov.w	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	f107 0714 	add.w	r7, r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bc80      	pop	{r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop

080097c0 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 80097c8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80097cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80097d0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80097d4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80097d8:	6812      	ldr	r2, [r2, #0]
 80097da:	4611      	mov	r1, r2
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80097e2:	430a      	orrs	r2, r1
 80097e4:	601a      	str	r2, [r3, #0]
}
 80097e6:	f107 070c 	add.w	r7, r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bc80      	pop	{r7}
 80097ee:	4770      	bx	lr

080097f0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80097f0:	b480      	push	{r7}
 80097f2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80097f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80097f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80097fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009800:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009804:	6812      	ldr	r2, [r2, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800980c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009810:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800981a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800981e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009822:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009826:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800982a:	6812      	ldr	r2, [r2, #0]
 800982c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8009830:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009834:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009836:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800983a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800983e:	f243 0210 	movw	r2, #12304	; 0x3010
 8009842:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8009846:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009848:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800984c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009850:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009854:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009858:	6812      	ldr	r2, [r2, #0]
 800985a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800985e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009860:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009864:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009868:	f04f 0200 	mov.w	r2, #0
 800986c:	60da      	str	r2, [r3, #12]
}
 800986e:	46bd      	mov	sp, r7
 8009870:	bc80      	pop	{r7}
 8009872:	4770      	bx	lr

08009874 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800987e:	f643 0302 	movw	r3, #14338	; 0x3802
 8009882:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009886:	f04f 0200 	mov.w	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800988c:	f643 0302 	movw	r3, #14338	; 0x3802
 8009890:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009894:	79fa      	ldrb	r2, [r7, #7]
 8009896:	701a      	strb	r2, [r3, #0]
}
 8009898:	f107 070c 	add.w	r7, r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop

080098a4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 80098aa:	f04f 0300 	mov.w	r3, #0
 80098ae:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80098bc:	f04f 0031 	mov.w	r0, #49	; 0x31
 80098c0:	f000 fdf4 	bl	800a4ac <RCC_GetFlagStatus>
 80098c4:	4603      	mov	r3, r0
 80098c6:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f103 0301 	add.w	r3, r3, #1
 80098ce:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80098d6:	d002      	beq.n	80098de <RCC_WaitForHSEStartUp+0x3a>
 80098d8:	79bb      	ldrb	r3, [r7, #6]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0ee      	beq.n	80098bc <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80098de:	f04f 0031 	mov.w	r0, #49	; 0x31
 80098e2:	f000 fde3 	bl	800a4ac <RCC_GetFlagStatus>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 80098ec:	f04f 0301 	mov.w	r3, #1
 80098f0:	71fb      	strb	r3, [r7, #7]
 80098f2:	e002      	b.n	80098fa <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 80098f4:	f04f 0300 	mov.w	r3, #0
 80098f8:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 80098fa:	79fb      	ldrb	r3, [r7, #7]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	f107 0708 	add.w	r7, r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop

08009908 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8009912:	f04f 0300 	mov.w	r3, #0
 8009916:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8009918:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800991c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800992a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	4313      	orrs	r3, r2
 8009936:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8009938:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800993c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	601a      	str	r2, [r3, #0]
}
 8009944:	f107 0714 	add.w	r7, r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop

08009950 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800995a:	f04f 0300 	mov.w	r3, #0
 800995e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009962:	79fa      	ldrb	r2, [r7, #7]
 8009964:	601a      	str	r2, [r3, #0]
}
 8009966:	f107 070c 	add.w	r7, r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr

08009970 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800997a:	f643 0370 	movw	r3, #14448	; 0x3870
 800997e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009982:	f04f 0200 	mov.w	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8009988:	f643 0370 	movw	r3, #14448	; 0x3870
 800998c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009990:	f04f 0200 	mov.w	r2, #0
 8009994:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d002      	beq.n	80099a2 <RCC_LSEConfig+0x32>
 800999c:	2b04      	cmp	r3, #4
 800999e:	d008      	beq.n	80099b2 <RCC_LSEConfig+0x42>
 80099a0:	e00f      	b.n	80099c2 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80099a2:	f643 0370 	movw	r3, #14448	; 0x3870
 80099a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80099aa:	f04f 0201 	mov.w	r2, #1
 80099ae:	701a      	strb	r2, [r3, #0]
      break;
 80099b0:	e008      	b.n	80099c4 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80099b2:	f643 0370 	movw	r3, #14448	; 0x3870
 80099b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80099ba:	f04f 0205 	mov.w	r2, #5
 80099be:	701a      	strb	r2, [r3, #0]
      break;
 80099c0:	e000      	b.n	80099c4 <RCC_LSEConfig+0x54>
    default:
      break;
 80099c2:	bf00      	nop
  }
}
 80099c4:	f107 070c 	add.w	r7, r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc80      	pop	{r7}
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop

080099d0 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80099da:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 80099de:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80099e2:	79fa      	ldrb	r2, [r7, #7]
 80099e4:	601a      	str	r2, [r3, #0]
}
 80099e6:	f107 070c 	add.w	r7, r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bc80      	pop	{r7}
 80099ee:	4770      	bx	lr

080099f0 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80099fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	4311      	orrs	r1, r2
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009a16:	f102 32ff 	add.w	r2, r2, #4294967295
 8009a1a:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8009a1e:	4311      	orrs	r1, r2
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8009a2e:	f107 0714 	add.w	r7, r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bc80      	pop	{r7}
 8009a36:	4770      	bx	lr

08009a38 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8009a42:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009a46:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009a4a:	79fa      	ldrb	r2, [r7, #7]
 8009a4c:	601a      	str	r2, [r3, #0]
}
 8009a4e:	f107 070c 	add.w	r7, r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bc80      	pop	{r7}
 8009a56:	4770      	bx	lr

08009a58 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8009a62:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	ea4f 7202 	mov.w	r2, r2, lsl #28
 8009a76:	430a      	orrs	r2, r1
 8009a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009a7c:	f107 070c 	add.w	r7, r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bc80      	pop	{r7}
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop

08009a88 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8009a92:	f04f 0368 	mov.w	r3, #104	; 0x68
 8009a96:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009a9a:	79fa      	ldrb	r2, [r7, #7]
 8009a9c:	601a      	str	r2, [r3, #0]
}
 8009a9e:	f107 070c 	add.w	r7, r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bc80      	pop	{r7}
 8009aa6:	4770      	bx	lr

08009aa8 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8009ab2:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8009ab6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009aba:	79fa      	ldrb	r2, [r7, #7]
 8009abc:	601a      	str	r2, [r3, #0]
}
 8009abe:	f107 070c 	add.w	r7, r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bc80      	pop	{r7}
 8009ac6:	4770      	bx	lr

08009ac8 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ad2:	f04f 0300 	mov.w	r3, #0
 8009ad6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8009ad8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8009af8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009afc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	609a      	str	r2, [r3, #8]
}
 8009b04:	f107 0714 	add.w	r7, r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bc80      	pop	{r7}
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop

08009b10 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8009b20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8009b40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	609a      	str	r2, [r3, #8]
}
 8009b4c:	f107 0714 	add.w	r7, r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bc80      	pop	{r7}
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop

08009b58 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009b60:	f04f 0300 	mov.w	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8009b66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f023 0303 	bic.w	r3, r3, #3
 8009b78:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8009b82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	609a      	str	r2, [r3, #8]
}
 8009b8e:	f107 0714 	add.w	r7, r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr

08009b98 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8009b9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ba0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f003 030c 	and.w	r3, r3, #12
 8009bac:	b2db      	uxtb	r3, r3
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bc80      	pop	{r7}
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop

08009bb8 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8009bc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009bca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8009be2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009be6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	609a      	str	r2, [r3, #8]
}
 8009bee:	f107 0714 	add.w	r7, r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr

08009bf8 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009c00:	f04f 0300 	mov.w	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8009c06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8009c22:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	609a      	str	r2, [r3, #8]
}
 8009c2e:	f107 0714 	add.w	r7, r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bc80      	pop	{r7}
 8009c36:	4770      	bx	lr

08009c38 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009c40:	f04f 0300 	mov.w	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8009c46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8009c66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	609a      	str	r2, [r3, #8]
}
 8009c72:	f107 0714 	add.w	r7, r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bc80      	pop	{r7}
 8009c7a:	4770      	bx	lr

08009c7c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b089      	sub	sp, #36	; 0x24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8009c84:	f04f 0300 	mov.w	r3, #0
 8009c88:	61bb      	str	r3, [r7, #24]
 8009c8a:	f04f 0300 	mov.w	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	f04f 0300 	mov.w	r3, #0
 8009c94:	61fb      	str	r3, [r7, #28]
 8009c96:	f04f 0302 	mov.w	r3, #2
 8009c9a:	613b      	str	r3, [r7, #16]
 8009c9c:	f04f 0300 	mov.w	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	f04f 0302 	mov.w	r3, #2
 8009ca6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009ca8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 030c 	and.w	r3, r3, #12
 8009cb6:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	d00a      	beq.n	8009cd4 <RCC_GetClocksFreq+0x58>
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	d00f      	beq.n	8009ce2 <RCC_GetClocksFreq+0x66>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d162      	bne.n	8009d8c <RCC_GetClocksFreq+0x110>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009ccc:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8009cd0:	6013      	str	r3, [r2, #0]
      break;
 8009cd2:	e062      	b.n	8009d9a <RCC_GetClocksFreq+0x11e>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	f647 0340 	movw	r3, #30784	; 0x7840
 8009cda:	f2c0 137d 	movt	r3, #381	; 0x17d
 8009cde:	6013      	str	r3, [r2, #0]
      break;
 8009ce0:	e05b      	b.n	8009d9a <RCC_GetClocksFreq+0x11e>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8009ce2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ce6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cf0:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8009cf4:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009cf6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d04:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d015      	beq.n	8009d38 <RCC_GetClocksFreq+0xbc>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009d0c:	f647 0340 	movw	r3, #30784	; 0x7840
 8009d10:	f2c0 137d 	movt	r3, #381	; 0x17d
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	4619      	mov	r1, r3
 8009d26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d2a:	400b      	ands	r3, r1
 8009d2c:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8009d30:	fb03 f302 	mul.w	r3, r3, r2
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	e014      	b.n	8009d62 <RCC_GetClocksFreq+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8009d38:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009d3c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4619      	mov	r1, r3
 8009d52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d56:	400b      	ands	r3, r1
 8009d58:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8009d5c:	fb03 f302 	mul.w	r3, r3, r2
 8009d60:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8009d62:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d70:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009d74:	f103 0301 	add.w	r3, r3, #1
 8009d78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d7c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8009d7e:	69fa      	ldr	r2, [r7, #28]
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	601a      	str	r2, [r3, #0]
      break;
 8009d8a:	e006      	b.n	8009d9a <RCC_GetClocksFreq+0x11e>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009d92:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8009d96:	6013      	str	r3, [r2, #0]
      break;
 8009d98:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8009d9a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009da8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8009db0:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009db2:	f240 0328 	movw	r3, #40	; 0x28
 8009db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	189b      	adds	r3, r3, r2
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	fa22 f203 	lsr.w	r2, r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8009dd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009de0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8009de8:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009dea:	f240 0328 	movw	r3, #40	; 0x28
 8009dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	189b      	adds	r3, r3, r2
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	fa22 f203 	lsr.w	r2, r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8009e0a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009e18:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8009e20:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009e22:	f240 0328 	movw	r3, #40	; 0x28
 8009e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	189b      	adds	r3, r3, r2
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685a      	ldr	r2, [r3, #4]
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	fa22 f203 	lsr.w	r2, r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	60da      	str	r2, [r3, #12]
}
 8009e42:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr

08009e4c <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009e54:	f04f 0300 	mov.w	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e64:	d117      	bne.n	8009e96 <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8009e66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009e78:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8009e8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8009e96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e9e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009ea6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8009eb0:	ea4f 5212 	mov.w	r2, r2, lsr #20
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009eb8:	f107 0714 	add.w	r7, r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop

08009ec4 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8009ece:	f640 633c 	movw	r3, #3644	; 0xe3c
 8009ed2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009ed6:	79fa      	ldrb	r2, [r7, #7]
 8009ed8:	601a      	str	r2, [r3, #0]
}
 8009eda:	f107 070c 	add.w	r7, r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr

08009ee4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8009eee:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8009ef2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009ef6:	79fa      	ldrb	r2, [r7, #7]
 8009ef8:	601a      	str	r2, [r3, #0]
}
 8009efa:	f107 070c 	add.w	r7, r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bc80      	pop	{r7}
 8009f02:	4770      	bx	lr

08009f04 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8009f0c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8009f10:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	601a      	str	r2, [r3, #0]
}
 8009f18:	f107 070c 	add.w	r7, r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bc80      	pop	{r7}
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop

08009f24 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00d      	beq.n	8009f52 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8009f36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f48:	4611      	mov	r1, r2
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8009f50:	e00e      	b.n	8009f70 <RCC_AHB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8009f52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f64:	4611      	mov	r1, r2
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	ea6f 0202 	mvn.w	r2, r2
 8009f6c:	400a      	ands	r2, r1
 8009f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8009f70:	f107 070c 	add.w	r7, r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bc80      	pop	{r7}
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop

08009f7c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00d      	beq.n	8009faa <RCC_AHB2PeriphClockCmd+0x2e>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8009f8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009f96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009f9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009f9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8009fa8:	e00e      	b.n	8009fc8 <RCC_AHB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8009faa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009fb2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009fb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009fba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	ea6f 0202 	mvn.w	r2, r2
 8009fc4:	400a      	ands	r2, r1
 8009fc6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8009fc8:	f107 070c 	add.w	r7, r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop

08009fd4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00d      	beq.n	800a002 <RCC_AHB3PeriphClockCmd+0x2e>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8009fe6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009fea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009fee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009ff2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	639a      	str	r2, [r3, #56]	; 0x38
 800a000:	e00e      	b.n	800a020 <RCC_AHB3PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800a002:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a006:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a00a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a00e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a014:	4611      	mov	r1, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	ea6f 0202 	mvn.w	r2, r2
 800a01c:	400a      	ands	r2, r1
 800a01e:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800a020:	f107 070c 	add.w	r7, r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	bc80      	pop	{r7}
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop

0800a02c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00d      	beq.n	800a05a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800a03e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a042:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a046:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a04a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a04e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a050:	4611      	mov	r1, r2
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	430a      	orrs	r2, r1
 800a056:	641a      	str	r2, [r3, #64]	; 0x40
 800a058:	e00e      	b.n	800a078 <RCC_APB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800a05a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a05e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a062:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a066:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a06a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a06c:	4611      	mov	r1, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	ea6f 0202 	mvn.w	r2, r2
 800a074:	400a      	ands	r2, r1
 800a076:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800a078:	f107 070c 	add.w	r7, r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bc80      	pop	{r7}
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop

0800a084 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00d      	beq.n	800a0b2 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800a096:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a09a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a09e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a0a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a0a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	645a      	str	r2, [r3, #68]	; 0x44
 800a0b0:	e00e      	b.n	800a0d0 <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800a0b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a0b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a0ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a0be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a0c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	ea6f 0202 	mvn.w	r2, r2
 800a0cc:	400a      	ands	r2, r1
 800a0ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800a0d0:	f107 070c 	add.w	r7, r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bc80      	pop	{r7}
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop

0800a0dc <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00d      	beq.n	800a10a <RCC_AHB1PeriphResetCmd+0x2e>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800a0ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a0f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a0f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a0fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a0fe:	6912      	ldr	r2, [r2, #16]
 800a100:	4611      	mov	r1, r2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	430a      	orrs	r2, r1
 800a106:	611a      	str	r2, [r3, #16]
 800a108:	e00e      	b.n	800a128 <RCC_AHB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800a10a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a10e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a112:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a116:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a11a:	6912      	ldr	r2, [r2, #16]
 800a11c:	4611      	mov	r1, r2
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	ea6f 0202 	mvn.w	r2, r2
 800a124:	400a      	ands	r2, r1
 800a126:	611a      	str	r2, [r3, #16]
  }
}
 800a128:	f107 070c 	add.w	r7, r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bc80      	pop	{r7}
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop

0800a134 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00d      	beq.n	800a162 <RCC_AHB2PeriphResetCmd+0x2e>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800a146:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a14a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a14e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a152:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a156:	6952      	ldr	r2, [r2, #20]
 800a158:	4611      	mov	r1, r2
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	615a      	str	r2, [r3, #20]
 800a160:	e00e      	b.n	800a180 <RCC_AHB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800a162:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a16a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a16e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a172:	6952      	ldr	r2, [r2, #20]
 800a174:	4611      	mov	r1, r2
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	ea6f 0202 	mvn.w	r2, r2
 800a17c:	400a      	ands	r2, r1
 800a17e:	615a      	str	r2, [r3, #20]
  }
}
 800a180:	f107 070c 	add.w	r7, r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop

0800a18c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00d      	beq.n	800a1ba <RCC_AHB3PeriphResetCmd+0x2e>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800a19e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a1a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a1a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a1aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a1ae:	6992      	ldr	r2, [r2, #24]
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	619a      	str	r2, [r3, #24]
 800a1b8:	e00e      	b.n	800a1d8 <RCC_AHB3PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800a1ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a1be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a1c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a1c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a1ca:	6992      	ldr	r2, [r2, #24]
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	ea6f 0202 	mvn.w	r2, r2
 800a1d4:	400a      	ands	r2, r1
 800a1d6:	619a      	str	r2, [r3, #24]
  }
}
 800a1d8:	f107 070c 	add.w	r7, r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop

0800a1e4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a1f0:	78fb      	ldrb	r3, [r7, #3]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00d      	beq.n	800a212 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800a1f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a1fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a1fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a202:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a206:	6a12      	ldr	r2, [r2, #32]
 800a208:	4611      	mov	r1, r2
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	430a      	orrs	r2, r1
 800a20e:	621a      	str	r2, [r3, #32]
 800a210:	e00e      	b.n	800a230 <RCC_APB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800a212:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a216:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a21a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a21e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a222:	6a12      	ldr	r2, [r2, #32]
 800a224:	4611      	mov	r1, r2
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	ea6f 0202 	mvn.w	r2, r2
 800a22c:	400a      	ands	r2, r1
 800a22e:	621a      	str	r2, [r3, #32]
  }
}
 800a230:	f107 070c 	add.w	r7, r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	bc80      	pop	{r7}
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop

0800a23c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	460b      	mov	r3, r1
 800a246:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a248:	78fb      	ldrb	r3, [r7, #3]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00d      	beq.n	800a26a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800a24e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a252:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a256:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a25a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a25e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a260:	4611      	mov	r1, r2
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	430a      	orrs	r2, r1
 800a266:	625a      	str	r2, [r3, #36]	; 0x24
 800a268:	e00e      	b.n	800a288 <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800a26a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a26e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a272:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a276:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a27a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a27c:	4611      	mov	r1, r2
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	ea6f 0202 	mvn.w	r2, r2
 800a284:	400a      	ands	r2, r1
 800a286:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a288:	f107 070c 	add.w	r7, r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop

0800a294 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00d      	beq.n	800a2c2 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800a2a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a2aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a2ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a2b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a2b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	651a      	str	r2, [r3, #80]	; 0x50
 800a2c0:	e00e      	b.n	800a2e0 <RCC_AHB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800a2c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a2c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a2ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a2ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a2d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	ea6f 0202 	mvn.w	r2, r2
 800a2dc:	400a      	ands	r2, r1
 800a2de:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800a2e0:	f107 070c 	add.w	r7, r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bc80      	pop	{r7}
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop

0800a2ec <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800a2fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a302:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a306:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a30a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a30e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a310:	4611      	mov	r1, r2
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	430a      	orrs	r2, r1
 800a316:	655a      	str	r2, [r3, #84]	; 0x54
 800a318:	e00e      	b.n	800a338 <RCC_AHB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800a31a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a31e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a322:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a326:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a32a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a32c:	4611      	mov	r1, r2
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	ea6f 0202 	mvn.w	r2, r2
 800a334:	400a      	ands	r2, r1
 800a336:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800a338:	f107 070c 	add.w	r7, r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop

0800a344 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00d      	beq.n	800a372 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800a356:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a35a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a35e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a362:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a366:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a368:	4611      	mov	r1, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	430a      	orrs	r2, r1
 800a36e:	659a      	str	r2, [r3, #88]	; 0x58
 800a370:	e00e      	b.n	800a390 <RCC_AHB3PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800a372:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a376:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a37a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a37e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a382:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a384:	4611      	mov	r1, r2
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	ea6f 0202 	mvn.w	r2, r2
 800a38c:	400a      	ands	r2, r1
 800a38e:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800a390:	f107 070c 	add.w	r7, r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	bc80      	pop	{r7}
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop

0800a39c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a3a8:	78fb      	ldrb	r3, [r7, #3]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00d      	beq.n	800a3ca <RCC_APB1PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800a3ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a3b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a3b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a3ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a3be:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	661a      	str	r2, [r3, #96]	; 0x60
 800a3c8:	e00e      	b.n	800a3e8 <RCC_APB1PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800a3ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a3ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a3d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a3d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a3da:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800a3dc:	4611      	mov	r1, r2
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	ea6f 0202 	mvn.w	r2, r2
 800a3e4:	400a      	ands	r2, r1
 800a3e6:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800a3e8:	f107 070c 	add.w	r7, r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bc80      	pop	{r7}
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop

0800a3f4 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00d      	beq.n	800a422 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800a406:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a40a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a40e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a412:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a416:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a418:	4611      	mov	r1, r2
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	430a      	orrs	r2, r1
 800a41e:	665a      	str	r2, [r3, #100]	; 0x64
 800a420:	e00e      	b.n	800a440 <RCC_APB2PeriphClockLPModeCmd+0x4c>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800a422:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a426:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a42a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a42e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a432:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a434:	4611      	mov	r1, r2
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	ea6f 0202 	mvn.w	r2, r2
 800a43c:	400a      	ands	r2, r1
 800a43e:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800a440:	f107 070c 	add.w	r7, r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	bc80      	pop	{r7}
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop

0800a44c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	71fa      	strb	r2, [r7, #7]
 800a458:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a45a:	79bb      	ldrb	r3, [r7, #6]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00e      	beq.n	800a47e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800a460:	f643 030d 	movw	r3, #14349	; 0x380d
 800a464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a468:	f643 020d 	movw	r2, #14349	; 0x380d
 800a46c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	b2d1      	uxtb	r1, r2
 800a474:	79fa      	ldrb	r2, [r7, #7]
 800a476:	430a      	orrs	r2, r1
 800a478:	b2d2      	uxtb	r2, r2
 800a47a:	701a      	strb	r2, [r3, #0]
 800a47c:	e010      	b.n	800a4a0 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800a47e:	f643 030d 	movw	r3, #14349	; 0x380d
 800a482:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a486:	f643 020d 	movw	r2, #14349	; 0x380d
 800a48a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a48e:	7812      	ldrb	r2, [r2, #0]
 800a490:	b2d1      	uxtb	r1, r2
 800a492:	79fa      	ldrb	r2, [r7, #7]
 800a494:	ea6f 0202 	mvn.w	r2, r2
 800a498:	b2d2      	uxtb	r2, r2
 800a49a:	400a      	ands	r2, r1
 800a49c:	b2d2      	uxtb	r2, r2
 800a49e:	701a      	strb	r2, [r3, #0]
  }
}
 800a4a0:	f107 070c 	add.w	r7, r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bc80      	pop	{r7}
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop

0800a4ac <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800a4b6:	f04f 0300 	mov.w	r3, #0
 800a4ba:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800a4bc:	f04f 0300 	mov.w	r3, #0
 800a4c0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800a4c2:	f04f 0300 	mov.w	r3, #0
 800a4c6:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800a4c8:	79fb      	ldrb	r3, [r7, #7]
 800a4ca:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d106      	bne.n	800a4e6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 800a4d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a4dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	617b      	str	r3, [r7, #20]
 800a4e4:	e00f      	b.n	800a506 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d106      	bne.n	800a4fa <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800a4ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a4f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	e005      	b.n	800a506 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800a4fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a4fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a504:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	f003 031f 	and.w	r3, r3, #31
 800a50c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	fa22 f303 	lsr.w	r3, r2, r3
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d003      	beq.n	800a528 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 800a520:	f04f 0301 	mov.w	r3, #1
 800a524:	74fb      	strb	r3, [r7, #19]
 800a526:	e002      	b.n	800a52e <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 800a528:	f04f 0300 	mov.w	r3, #0
 800a52c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800a52e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a530:	4618      	mov	r0, r3
 800a532:	f107 071c 	add.w	r7, r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	bc80      	pop	{r7}
 800a53a:	4770      	bx	lr

0800a53c <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 800a53c:	b480      	push	{r7}
 800a53e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800a540:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a544:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a548:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a54c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800a550:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a552:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a556:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a558:	46bd      	mov	sp, r7
 800a55a:	bc80      	pop	{r7}
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop

0800a560 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800a570:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a574:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	461a      	mov	r2, r3
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	4013      	ands	r3, r2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d003      	beq.n	800a58c <RCC_GetITStatus+0x2c>
  {
    bitstatus = SET;
 800a584:	f04f 0301 	mov.w	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]
 800a58a:	e002      	b.n	800a592 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
}
 800a594:	4618      	mov	r0, r3
 800a596:	f107 0714 	add.w	r7, r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr

0800a5a0 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800a5aa:	f643 030e 	movw	r3, #14350	; 0x380e
 800a5ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a5b2:	79fa      	ldrb	r2, [r7, #7]
 800a5b4:	701a      	strb	r2, [r3, #0]
}
 800a5b6:	f107 070c 	add.w	r7, r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bc80      	pop	{r7}
 800a5be:	4770      	bx	lr

0800a5c0 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800a5c4:	f04f 0040 	mov.w	r0, #64	; 0x40
 800a5c8:	f04f 0101 	mov.w	r1, #1
 800a5cc:	f7ff fdb2 	bl	800a134 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800a5d0:	f04f 0040 	mov.w	r0, #64	; 0x40
 800a5d4:	f04f 0100 	mov.w	r1, #0
 800a5d8:	f7ff fdac 	bl	800a134 <RCC_AHB2PeriphResetCmd>
}
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop

0800a5e0 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00c      	beq.n	800a60a <RNG_Cmd+0x2a>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800a5f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5f4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a5f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5fc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a600:	6812      	ldr	r2, [r2, #0]
 800a602:	f042 0204 	orr.w	r2, r2, #4
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	e00b      	b.n	800a622 <RNG_Cmd+0x42>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 800a60a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a60e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a616:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a61a:	6812      	ldr	r2, [r2, #0]
 800a61c:	f022 0204 	bic.w	r2, r2, #4
 800a620:	601a      	str	r2, [r3, #0]
  }
}
 800a622:	f107 070c 	add.w	r7, r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	bc80      	pop	{r7}
 800a62a:	4770      	bx	lr

0800a62c <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 800a630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a634:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a638:	689b      	ldr	r3, [r3, #8]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bc80      	pop	{r7}
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop

0800a644 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00c      	beq.n	800a66e <RNG_ITConfig+0x2a>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800a654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a658:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a65c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a660:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a664:	6812      	ldr	r2, [r2, #0]
 800a666:	f042 0208 	orr.w	r2, r2, #8
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	e00b      	b.n	800a686 <RNG_ITConfig+0x42>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 800a66e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a672:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a67a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	f022 0208 	bic.w	r2, r2, #8
 800a684:	601a      	str	r2, [r3, #0]
  }
}
 800a686:	f107 070c 	add.w	r7, r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bc80      	pop	{r7}
 800a68e:	4770      	bx	lr

0800a690 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800a69a:	f04f 0300 	mov.w	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800a6a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <RNG_GetFlagStatus+0x2c>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800a6b4:	f04f 0301 	mov.w	r3, #1
 800a6b8:	73fb      	strb	r3, [r7, #15]
 800a6ba:	e002      	b.n	800a6c2 <RNG_GetFlagStatus+0x32>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 800a6bc:	f04f 0300 	mov.w	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f107 0714 	add.w	r7, r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bc80      	pop	{r7}
 800a6ce:	4770      	bx	lr

0800a6d0 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800a6da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6de:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a6e2:	79fa      	ldrb	r2, [r7, #7]
 800a6e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800a6e8:	ea6f 0202 	mvn.w	r2, r2
 800a6ec:	605a      	str	r2, [r3, #4]
}
 800a6ee:	f107 070c 	add.w	r7, r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bc80      	pop	{r7}
 800a6f6:	4770      	bx	lr

0800a6f8 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800a702:	f04f 0300 	mov.w	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800a708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a70c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	461a      	mov	r2, r3
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	4013      	ands	r3, r2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <RNG_GetITStatus+0x2c>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800a71c:	f04f 0301 	mov.w	r3, #1
 800a720:	73fb      	strb	r3, [r7, #15]
 800a722:	e002      	b.n	800a72a <RNG_GetITStatus+0x32>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800a724:	f04f 0300 	mov.w	r3, #0
 800a728:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	f107 0714 	add.w	r7, r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	bc80      	pop	{r7}
 800a736:	4770      	bx	lr

0800a738 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800a742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a746:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a74a:	79fa      	ldrb	r2, [r7, #7]
 800a74c:	ea6f 0202 	mvn.w	r2, r2
 800a750:	b2d2      	uxtb	r2, r2
 800a752:	605a      	str	r2, [r3, #4]
}
 800a754:	f107 070c 	add.w	r7, r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	bc80      	pop	{r7}
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop

0800a760 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 800a76c:	f04f 0300 	mov.w	r3, #0
 800a770:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800a772:	f04f 0300 	mov.w	r3, #0
 800a776:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a778:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a77c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a780:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a784:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a786:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a78a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a78e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a792:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a794:	f000 f936 	bl	800aa04 <RTC_EnterInitMode>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d103      	bne.n	800a7a6 <RTC_DeInit+0x46>
  {
    status = ERROR;
 800a79e:	f04f 0300 	mov.w	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
 800a7a4:	e084      	b.n	800a8b0 <RTC_DeInit+0x150>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800a7a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7ae:	f04f 0200 	mov.w	r2, #0
 800a7b2:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 800a7b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7bc:	f242 1201 	movw	r2, #8449	; 0x2101
 800a7c0:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800a7c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7ca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a7ce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a7d2:	6892      	ldr	r2, [r2, #8]
 800a7d4:	f002 0207 	and.w	r2, r2, #7
 800a7d8:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800a7da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f003 0304 	and.w	r3, r3, #4
 800a7e8:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f103 0301 	add.w	r3, r3, #1
 800a7f0:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f8:	d002      	beq.n	800a800 <RTC_DeInit+0xa0>
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0ec      	beq.n	800a7da <RTC_DeInit+0x7a>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800a800:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a804:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	f003 0304 	and.w	r3, r3, #4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d103      	bne.n	800a81a <RTC_DeInit+0xba>
    {
      status = ERROR;
 800a812:	f04f 0300 	mov.w	r3, #0
 800a816:	73fb      	strb	r3, [r7, #15]
 800a818:	e04a      	b.n	800a8b0 <RTC_DeInit+0x150>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800a81a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a81e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a828:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a82c:	f04f 0200 	mov.w	r2, #0
 800a830:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800a832:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a836:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a83a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a83e:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800a840:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a844:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a848:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a84c:	f2c0 027f 	movt	r2, #127	; 0x7f
 800a850:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800a852:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a856:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a85a:	f04f 0200 	mov.w	r2, #0
 800a85e:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800a860:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a864:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a868:	f04f 0200 	mov.w	r2, #0
 800a86c:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800a86e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a872:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a876:	f04f 0200 	mov.w	r2, #0
 800a87a:	621a      	str	r2, [r3, #32]
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800a87c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a880:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a884:	f04f 0200 	mov.w	r2, #0
 800a888:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 800a88a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a88e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800a898:	f000 f910 	bl	800aabc <RTC_WaitForSynchro>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d103      	bne.n	800a8aa <RTC_DeInit+0x14a>
      {
        status = ERROR;
 800a8a2:	f04f 0300 	mov.w	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]
 800a8a8:	e002      	b.n	800a8b0 <RTC_DeInit+0x150>
      }
      else
      {
        status = SUCCESS;      
 800a8aa:	f04f 0301 	mov.w	r3, #1
 800a8ae:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800a8b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8b8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a8bc:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f107 0710 	add.w	r7, r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop

0800a8cc <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800a8d4:	f04f 0300 	mov.w	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a8da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8e2:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a8e6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a8e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8f0:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a8f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a8f6:	f000 f885 	bl	800aa04 <RTC_EnterInitMode>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <RTC_Init+0x3c>
  {
    status = ERROR;
 800a900:	f04f 0300 	mov.w	r3, #0
 800a904:	73fb      	strb	r3, [r7, #15]
 800a906:	e035      	b.n	800a974 <RTC_Init+0xa8>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800a908:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a90c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a910:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a914:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a918:	6892      	ldr	r2, [r2, #8]
 800a91a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a91e:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800a920:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a924:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a928:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a92c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a930:	6892      	ldr	r2, [r2, #8]
 800a932:	4611      	mov	r1, r2
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	6812      	ldr	r2, [r2, #0]
 800a938:	430a      	orrs	r2, r1
 800a93a:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 800a93c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a940:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	6892      	ldr	r2, [r2, #8]
 800a948:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800a94a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a94e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a952:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a956:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a95a:	6912      	ldr	r2, [r2, #16]
 800a95c:	4611      	mov	r1, r2
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6852      	ldr	r2, [r2, #4]
 800a962:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800a966:	430a      	orrs	r2, r1
 800a968:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a96a:	f000 f895 	bl	800aa98 <RTC_ExitInitMode>

    status = SUCCESS;    
 800a96e:	f04f 0301 	mov.w	r3, #1
 800a972:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a974:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a978:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a97c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a980:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a982:	7bfb      	ldrb	r3, [r7, #15]
}
 800a984:	4618      	mov	r0, r3
 800a986:	f107 0710 	add.w	r7, r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop

0800a990 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f04f 0200 	mov.w	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f04f 027f 	mov.w	r2, #127	; 0x7f
 800a9a6:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a9ae:	609a      	str	r2, [r3, #8]
}
 800a9b0:	f107 070c 	add.w	r7, r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bc80      	pop	{r7}
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop

0800a9bc <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d007      	beq.n	800a9dc <RTC_WriteProtectionCmd+0x20>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800a9cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a9d4:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a9d8:	625a      	str	r2, [r3, #36]	; 0x24
 800a9da:	e00d      	b.n	800a9f8 <RTC_WriteProtectionCmd+0x3c>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 800a9dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a9e4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a9e8:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 800a9ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a9f2:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a9f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a9f8:	f107 070c 	add.w	r7, r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bc80      	pop	{r7}
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop

0800aa04 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800aa0a:	f04f 0300 	mov.w	r3, #0
 800aa0e:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800aa10:	f04f 0300 	mov.w	r3, #0
 800aa14:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800aa16:	f04f 0300 	mov.w	r3, #0
 800aa1a:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aa1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d12a      	bne.n	800aa84 <RTC_EnterInitMode+0x80>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800aa2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa36:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3a:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800aa3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4a:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f103 0301 	add.w	r3, r3, #1
 800aa52:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa5a:	d002      	beq.n	800aa62 <RTC_EnterInitMode+0x5e>
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0ec      	beq.n	800aa3c <RTC_EnterInitMode+0x38>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800aa62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <RTC_EnterInitMode+0x78>
    {
      status = SUCCESS;
 800aa74:	f04f 0301 	mov.w	r3, #1
 800aa78:	73fb      	strb	r3, [r7, #15]
 800aa7a:	e006      	b.n	800aa8a <RTC_EnterInitMode+0x86>
    }
    else
    {
      status = ERROR;
 800aa7c:	f04f 0300 	mov.w	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
 800aa82:	e002      	b.n	800aa8a <RTC_EnterInitMode+0x86>
    }        
  }
  else
  {
    status = SUCCESS;  
 800aa84:	f04f 0301 	mov.w	r3, #1
 800aa88:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f107 0714 	add.w	r7, r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bc80      	pop	{r7}
 800aa96:	4770      	bx	lr

0800aa98 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800aa98:	b480      	push	{r7}
 800aa9a:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800aa9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aaa0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aaa4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aaa8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aaac:	68d2      	ldr	r2, [r2, #12]
 800aaae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aab2:	60da      	str	r2, [r3, #12]
}
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bc80      	pop	{r7}
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop

0800aabc <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 800aac2:	f04f 0300 	mov.w	r3, #0
 800aac6:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800aac8:	f04f 0300 	mov.w	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800aace:	f04f 0300 	mov.w	r3, #0
 800aad2:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aad4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aad8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aadc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800aae0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800aae2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aae6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aaea:	f04f 0253 	mov.w	r2, #83	; 0x53
 800aaee:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800aaf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aaf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aaf8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aafc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ab00:	68d2      	ldr	r2, [r2, #12]
 800ab02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ab06:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800ab08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	f003 0320 	and.w	r3, r3, #32
 800ab16:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f103 0301 	add.w	r3, r3, #1
 800ab1e:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab26:	d002      	beq.n	800ab2e <RTC_WaitForSynchro+0x72>
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d0ec      	beq.n	800ab08 <RTC_WaitForSynchro+0x4c>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800ab2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	f003 0320 	and.w	r3, r3, #32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <RTC_WaitForSynchro+0x8c>
  {
    status = SUCCESS;
 800ab40:	f04f 0301 	mov.w	r3, #1
 800ab44:	73fb      	strb	r3, [r7, #15]
 800ab46:	e002      	b.n	800ab4e <RTC_WaitForSynchro+0x92>
  }
  else
  {
    status = ERROR;
 800ab48:	f04f 0300 	mov.w	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ab4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab56:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ab5a:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f107 0714 	add.w	r7, r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bc80      	pop	{r7}
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop

0800ab6c <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800ab76:	f04f 0300 	mov.w	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ab7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab84:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ab88:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ab8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab92:	f04f 0253 	mov.w	r2, #83	; 0x53
 800ab96:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800ab98:	f7ff ff34 	bl	800aa04 <RTC_EnterInitMode>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d103      	bne.n	800abaa <RTC_RefClockCmd+0x3e>
  {
    status = ERROR;
 800aba2:	f04f 0300 	mov.w	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
 800aba8:	e020      	b.n	800abec <RTC_RefClockCmd+0x80>
  } 
  else
  {  
    if (NewState != DISABLE)
 800abaa:	79fb      	ldrb	r3, [r7, #7]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00c      	beq.n	800abca <RTC_RefClockCmd+0x5e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800abb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800abb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800abb8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800abbc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800abc0:	6892      	ldr	r2, [r2, #8]
 800abc2:	f042 0210 	orr.w	r2, r2, #16
 800abc6:	609a      	str	r2, [r3, #8]
 800abc8:	e00b      	b.n	800abe2 <RTC_RefClockCmd+0x76>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800abca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800abce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800abd2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800abd6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800abda:	6892      	ldr	r2, [r2, #8]
 800abdc:	f022 0210 	bic.w	r2, r2, #16
 800abe0:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800abe2:	f7ff ff59 	bl	800aa98 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800abe6:	f04f 0301 	mov.w	r3, #1
 800abea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800abec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800abf0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800abf4:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800abf8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	f107 0710 	add.w	r7, r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop

0800ac08 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800ac08:	b590      	push	{r4, r7, lr}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac12:	f04f 0300 	mov.w	r3, #0
 800ac16:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800ac18:	f04f 0300 	mov.w	r3, #0
 800ac1c:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10d      	bne.n	800ac40 <RTC_SetTime+0x38>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ac24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ac28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d119      	bne.n	800ac6a <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	f04f 0200 	mov.w	r2, #0
 800ac3c:	70da      	strb	r2, [r3, #3]
 800ac3e:	e014      	b.n	800ac6a <RTC_SetTime+0x62>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ac40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ac44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <RTC_SetTime+0x5a>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 f8fa 	bl	800be50 <RTC_Bcd2ToByte>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e003      	b.n	800ac6a <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	f04f 0200 	mov.w	r2, #0
 800ac68:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d012      	beq.n	800ac96 <RTC_SetTime+0x8e>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	ea4f 4203 	mov.w	r2, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	785b      	ldrb	r3, [r3, #1]
 800ac7c:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800ac80:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800ac86:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	78db      	ldrb	r3, [r3, #3]
 800ac8c:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800ac90:	4313      	orrs	r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	e01e      	b.n	800acd4 <RTC_SetTime+0xcc>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 f8b6 	bl	800be0c <RTC_ByteToBcd2>
 800aca0:	4603      	mov	r3, r0
 800aca2:	ea4f 4403 	mov.w	r4, r3, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	785b      	ldrb	r3, [r3, #1]
 800acaa:	4618      	mov	r0, r3
 800acac:	f001 f8ae 	bl	800be0c <RTC_ByteToBcd2>
 800acb0:	4603      	mov	r3, r0
 800acb2:	ea4f 2303 	mov.w	r3, r3, lsl #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800acb6:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	789b      	ldrb	r3, [r3, #2]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f001 f8a5 	bl	800be0c <RTC_ByteToBcd2>
 800acc2:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800acc4:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	78db      	ldrb	r3, [r3, #3]
 800accc:	ea4f 4303 	mov.w	r3, r3, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800acd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800acd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800acdc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ace0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ace2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ace6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800acea:	f04f 0253 	mov.w	r2, #83	; 0x53
 800acee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800acf0:	f7ff fe88 	bl	800aa04 <RTC_EnterInitMode>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d103      	bne.n	800ad02 <RTC_SetTime+0xfa>
  {
    status = ERROR;
 800acfa:	f04f 0300 	mov.w	r3, #0
 800acfe:	72fb      	strb	r3, [r7, #11]
 800ad00:	e018      	b.n	800ad34 <RTC_SetTime+0x12c>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ad02:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ad06:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800ad10:	f2c0 037f 	movt	r3, #127	; 0x7f
 800ad14:	400b      	ands	r3, r1
 800ad16:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800ad18:	f7ff febe 	bl	800aa98 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800ad1c:	f7ff fece 	bl	800aabc <RTC_WaitForSynchro>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d103      	bne.n	800ad2e <RTC_SetTime+0x126>
    {
      status = ERROR;
 800ad26:	f04f 0300 	mov.w	r3, #0
 800ad2a:	72fb      	strb	r3, [r7, #11]
 800ad2c:	e002      	b.n	800ad34 <RTC_SetTime+0x12c>
    }
    else
    {
      status = SUCCESS;
 800ad2e:	f04f 0301 	mov.w	r3, #1
 800ad32:	72fb      	strb	r3, [r7, #11]
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ad34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad3c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ad40:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800ad42:	7afb      	ldrb	r3, [r7, #11]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	f107 0714 	add.w	r7, r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd90      	pop	{r4, r7, pc}
 800ad4e:	bf00      	nop

0800ad50 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f04f 0200 	mov.w	r2, #0
 800ad5e:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f04f 0200 	mov.w	r2, #0
 800ad66:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f04f 0200 	mov.w	r2, #0
 800ad6e:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	709a      	strb	r2, [r3, #2]
}
 800ad78:	f107 070c 	add.w	r7, r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bc80      	pop	{r7}
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop

0800ad84 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ad8e:	f04f 0300 	mov.w	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800ad94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800ada4:	f2c0 037f 	movt	r3, #127	; 0x7f
 800ada8:	4013      	ands	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800adb2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800adc2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	b2db      	uxtb	r3, r3
 800add0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add4:	b2da      	uxtb	r2, r3
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ade0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d11a      	bne.n	800ae26 <RTC_GetTime+0xa2>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f001 f82b 	bl	800be50 <RTC_Bcd2ToByte>
 800adfa:	4603      	mov	r3, r0
 800adfc:	461a      	mov	r2, r3
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	785b      	ldrb	r3, [r3, #1]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f001 f822 	bl	800be50 <RTC_Bcd2ToByte>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	461a      	mov	r2, r3
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	789b      	ldrb	r3, [r3, #2]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f001 f819 	bl	800be50 <RTC_Bcd2ToByte>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	461a      	mov	r2, r3
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	709a      	strb	r2, [r3, #2]
  }
}
 800ae26:	f107 0710 	add.w	r7, r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop

0800ae30 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800ae30:	b590      	push	{r4, r7, lr}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ae3a:	f04f 0300 	mov.w	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800ae40:	f04f 0300 	mov.w	r3, #0
 800ae44:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10f      	bne.n	800ae6c <RTC_SetDate+0x3c>
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	785b      	ldrb	r3, [r3, #1]
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d009      	beq.n	800ae6c <RTC_SetDate+0x3c>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	785b      	ldrb	r3, [r3, #1]
 800ae5c:	f023 0310 	bic.w	r3, r3, #16
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	f103 030a 	add.w	r3, r3, #10
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00d      	beq.n	800ae8e <RTC_SetDate+0x5e>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	785b      	ldrb	r3, [r3, #1]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 ffea 	bl	800be50 <RTC_Bcd2ToByte>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	789b      	ldrb	r3, [r3, #2]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 ffe3 	bl	800be50 <RTC_Bcd2ToByte>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d012      	beq.n	800aeba <RTC_SetDate+0x8a>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	78db      	ldrb	r3, [r3, #3]
 800ae98:	ea4f 4203 	mov.w	r2, r3, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	785b      	ldrb	r3, [r3, #1]
 800aea0:	ea4f 2303 	mov.w	r3, r3, lsl #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800aea4:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800aeaa:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	ea4f 3343 	mov.w	r3, r3, lsl #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	60fb      	str	r3, [r7, #12]
 800aeb8:	e01e      	b.n	800aef8 <RTC_SetDate+0xc8>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	78db      	ldrb	r3, [r3, #3]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 ffa4 	bl	800be0c <RTC_ByteToBcd2>
 800aec4:	4603      	mov	r3, r0
 800aec6:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 ff9c 	bl	800be0c <RTC_ByteToBcd2>
 800aed4:	4603      	mov	r3, r0
 800aed6:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800aeda:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	789b      	ldrb	r3, [r3, #2]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 ff93 	bl	800be0c <RTC_ByteToBcd2>
 800aee6:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800aee8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	ea4f 3343 	mov.w	r3, r3, lsl #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800aef4:	4313      	orrs	r3, r2
 800aef6:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800aef8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aefc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af00:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800af04:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800af06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af0e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800af12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800af14:	f7ff fd76 	bl	800aa04 <RTC_EnterInitMode>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d103      	bne.n	800af26 <RTC_SetDate+0xf6>
  {
    status = ERROR;
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	72fb      	strb	r3, [r7, #11]
 800af24:	e017      	b.n	800af56 <RTC_SetDate+0x126>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800af26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800af34:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800af38:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800af3a:	f7ff fdad 	bl	800aa98 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800af3e:	f7ff fdbd 	bl	800aabc <RTC_WaitForSynchro>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d103      	bne.n	800af50 <RTC_SetDate+0x120>
    {
      status = ERROR;
 800af48:	f04f 0300 	mov.w	r3, #0
 800af4c:	72fb      	strb	r3, [r7, #11]
 800af4e:	e002      	b.n	800af56 <RTC_SetDate+0x126>
    }
    else
    {
      status = SUCCESS;
 800af50:	f04f 0301 	mov.w	r3, #1
 800af54:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800af56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af5e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800af62:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800af64:	7afb      	ldrb	r3, [r7, #11]
}
 800af66:	4618      	mov	r0, r3
 800af68:	f107 0714 	add.w	r7, r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd90      	pop	{r4, r7, pc}

0800af70 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f04f 0201 	mov.w	r2, #1
 800af7e:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f04f 0201 	mov.w	r2, #1
 800af86:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f04f 0201 	mov.w	r2, #1
 800af8e:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f04f 0200 	mov.w	r2, #0
 800af96:	70da      	strb	r2, [r3, #3]
}
 800af98:	f107 070c 	add.w	r7, r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop

0800afa4 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afae:	f04f 0300 	mov.w	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800afb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afce:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800afd2:	b2da      	uxtb	r2, r3
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800afde:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	b2db      	uxtb	r3, r3
 800afec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800affc:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800b000:	b2da      	uxtb	r2, r3
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d11e      	bne.n	800b04a <RTC_GetDate+0xa6>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	78db      	ldrb	r3, [r3, #3]
 800b010:	4618      	mov	r0, r3
 800b012:	f000 ff1d 	bl	800be50 <RTC_Bcd2ToByte>
 800b016:	4603      	mov	r3, r0
 800b018:	461a      	mov	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	785b      	ldrb	r3, [r3, #1]
 800b022:	4618      	mov	r0, r3
 800b024:	f000 ff14 	bl	800be50 <RTC_Bcd2ToByte>
 800b028:	4603      	mov	r3, r0
 800b02a:	461a      	mov	r2, r3
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	789b      	ldrb	r3, [r3, #2]
 800b034:	4618      	mov	r0, r3
 800b036:	f000 ff0b 	bl	800be50 <RTC_Bcd2ToByte>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	709a      	strb	r2, [r3, #2]
    RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781a      	ldrb	r2, [r3, #0]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	701a      	strb	r2, [r3, #0]
  }
}
 800b04a:	f107 0710 	add.w	r7, r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop

0800b054 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800b054:	b590      	push	{r4, r7, lr}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b060:	f04f 0300 	mov.w	r3, #0
 800b064:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10d      	bne.n	800b088 <RTC_SetAlarm+0x34>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b06c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b070:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d12c      	bne.n	800b0d8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f04f 0200 	mov.w	r2, #0
 800b084:	70da      	strb	r2, [r3, #3]
 800b086:	e027      	b.n	800b0d8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b088:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b08c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d007      	beq.n	800b0aa <RTC_SetAlarm+0x56>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 fed6 	bl	800be50 <RTC_Bcd2ToByte>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	e003      	b.n	800b0b2 <RTC_SetAlarm+0x5e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f04f 0200 	mov.w	r2, #0
 800b0b0:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d107      	bne.n	800b0ca <RTC_SetAlarm+0x76>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	7b1b      	ldrb	r3, [r3, #12]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 fec6 	bl	800be50 <RTC_Bcd2ToByte>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	e006      	b.n	800b0d8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	7b1b      	ldrb	r3, [r3, #12]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 febe 	bl	800be50 <RTC_Bcd2ToByte>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d01d      	beq.n	800b11a <RTC_SetAlarm+0xc6>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	ea4f 4203 	mov.w	r2, r3, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	785b      	ldrb	r3, [r3, #1]
 800b0ea:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b0ee:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800b0f4:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	78db      	ldrb	r3, [r3, #3]
 800b0fa:	ea4f 4303 	mov.w	r3, r3, lsl #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800b0fe:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7b1b      	ldrb	r3, [r3, #12]
 800b104:	ea4f 6303 	mov.w	r3, r3, lsl #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800b108:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800b10e:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b114:	4313      	orrs	r3, r2
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	e02f      	b.n	800b17a <RTC_SetAlarm+0x126>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 fe74 	bl	800be0c <RTC_ByteToBcd2>
 800b124:	4603      	mov	r3, r0
 800b126:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	785b      	ldrb	r3, [r3, #1]
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fe6c 	bl	800be0c <RTC_ByteToBcd2>
 800b134:	4603      	mov	r3, r0
 800b136:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b13a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	789b      	ldrb	r3, [r3, #2]
 800b140:	4618      	mov	r0, r3
 800b142:	f000 fe63 	bl	800be0c <RTC_ByteToBcd2>
 800b146:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800b148:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	78db      	ldrb	r3, [r3, #3]
 800b150:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800b154:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7b1b      	ldrb	r3, [r3, #12]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fe55 	bl	800be0c <RTC_ByteToBcd2>
 800b162:	4603      	mov	r3, r0
 800b164:	ea4f 6303 	mov.w	r3, r3, lsl #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800b168:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800b170:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800b176:	4313      	orrs	r3, r2
 800b178:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b17a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b17e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b182:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b186:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b188:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b18c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b190:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b19c:	d106      	bne.n	800b1ac <RTC_SetAlarm+0x158>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800b19e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	61da      	str	r2, [r3, #28]
 800b1aa:	e005      	b.n	800b1b8 <RTC_SetAlarm+0x164>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800b1ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800b1b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1c0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b1c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b1c6:	f107 071c 	add.w	r7, r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd90      	pop	{r4, r7, pc}
 800b1ce:	bf00      	nop

0800b1d0 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f04f 0200 	mov.w	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f04f 0200 	mov.w	r2, #0
 800b1ee:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f04f 0200 	mov.w	r2, #0
 800b1f6:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f04f 0200 	mov.w	r2, #0
 800b1fe:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f04f 0201 	mov.w	r2, #1
 800b206:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f04f 0200 	mov.w	r2, #0
 800b20e:	605a      	str	r2, [r3, #4]
}
 800b210:	f107 070c 	add.w	r7, r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop

0800b21c <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b234:	d106      	bne.n	800b244 <RTC_GetAlarm+0x28>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800b236:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b23a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	e005      	b.n	800b250 <RTC_GetAlarm+0x34>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800b244:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b248:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b256:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800b266:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	b2db      	uxtb	r3, r3
 800b274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b284:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800b294:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d123      	bne.n	800b300 <RTC_GetAlarm+0xe4>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fdc7 	bl	800be50 <RTC_Bcd2ToByte>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	785b      	ldrb	r3, [r3, #1]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 fdbe 	bl	800be50 <RTC_Bcd2ToByte>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	789b      	ldrb	r3, [r3, #2]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fdb5 	bl	800be50 <RTC_Bcd2ToByte>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7b1b      	ldrb	r3, [r3, #12]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fdac 	bl	800be50 <RTC_Bcd2ToByte>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	731a      	strb	r2, [r3, #12]
  }  
}
 800b300:	f107 0718 	add.w	r7, r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800b308:	b480      	push	{r7}
 800b30a:	b087      	sub	sp, #28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	460b      	mov	r3, r1
 800b312:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800b314:	f04f 0300 	mov.w	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800b31a:	f04f 0300 	mov.w	r3, #0
 800b31e:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800b320:	f04f 0300 	mov.w	r3, #0
 800b324:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b326:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b32a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b32e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b332:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b334:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b338:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b33c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b340:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800b342:	78fb      	ldrb	r3, [r7, #3]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d010      	beq.n	800b36a <RTC_AlarmCmd+0x62>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800b348:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b34c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b350:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b354:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b358:	6892      	ldr	r2, [r2, #8]
 800b35a:	4611      	mov	r1, r2
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	430a      	orrs	r2, r1
 800b360:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 800b362:	f04f 0301 	mov.w	r3, #1
 800b366:	75fb      	strb	r3, [r7, #23]
 800b368:	e037      	b.n	800b3da <RTC_AlarmCmd+0xd2>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800b36a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b36e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b372:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b376:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b37a:	6892      	ldr	r2, [r2, #8]
 800b37c:	4611      	mov	r1, r2
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	ea6f 0202 	mvn.w	r2, r2
 800b384:	400a      	ands	r2, r1
 800b386:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800b388:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b38c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b39a:	4013      	ands	r3, r2
 800b39c:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f103 0301 	add.w	r3, r3, #1
 800b3a4:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ac:	d002      	beq.n	800b3b4 <RTC_AlarmCmd+0xac>
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0e9      	beq.n	800b388 <RTC_AlarmCmd+0x80>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800b3b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b3b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d103      	bne.n	800b3d4 <RTC_AlarmCmd+0xcc>
    {
      status = ERROR;
 800b3cc:	f04f 0300 	mov.w	r3, #0
 800b3d0:	75fb      	strb	r3, [r7, #23]
 800b3d2:	e002      	b.n	800b3da <RTC_AlarmCmd+0xd2>
    } 
    else
    {
      status = SUCCESS;
 800b3d4:	f04f 0301 	mov.w	r3, #1
 800b3d8:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b3da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b3de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b3e2:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b3e6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f107 071c 	add.w	r7, r7, #28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bc80      	pop	{r7}
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop

0800b3f8 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b400:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b404:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b408:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b40c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b40e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b412:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b416:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b41a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b41c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b420:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b424:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b428:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b42c:	6892      	ldr	r2, [r2, #8]
 800b42e:	f022 0207 	bic.w	r2, r2, #7
 800b432:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800b434:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b438:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b43c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b440:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b444:	6892      	ldr	r2, [r2, #8]
 800b446:	4611      	mov	r1, r2
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b44e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b452:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b456:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b45a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b45c:	f107 070c 	add.w	r7, r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	bc80      	pop	{r7}
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop

0800b468 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b470:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b474:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b478:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b47c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b47e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b482:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b486:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b48a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800b48c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b490:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b498:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b49c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b4a0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b4a4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b4a6:	f107 070c 	add.w	r7, r7, #12
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bc80      	pop	{r7}
 800b4ae:	4770      	bx	lr

0800b4b0 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800b4b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b4b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b4bc:	695b      	ldr	r3, [r3, #20]
 800b4be:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800b4c2:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bc80      	pop	{r7}
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop

0800b4d0 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b087      	sub	sp, #28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800b4da:	f04f 0300 	mov.w	r3, #0
 800b4de:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800b4e0:	f04f 0300 	mov.w	r3, #0
 800b4e4:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800b4e6:	f04f 0300 	mov.w	r3, #0
 800b4ea:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b4ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b4f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b4f4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b4f8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b4fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b4fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b502:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b506:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00f      	beq.n	800b52e <RTC_WakeUpCmd+0x5e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800b50e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b512:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b516:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b51a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b51e:	6892      	ldr	r2, [r2, #8]
 800b520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b524:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 800b526:	f04f 0301 	mov.w	r3, #1
 800b52a:	75fb      	strb	r3, [r7, #23]
 800b52c:	e02e      	b.n	800b58c <RTC_WakeUpCmd+0xbc>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800b52e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b532:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b536:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b53a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b53e:	6892      	ldr	r2, [r2, #8]
 800b540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b544:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800b546:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b54a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f103 0301 	add.w	r3, r3, #1
 800b55c:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b564:	d002      	beq.n	800b56c <RTC_WakeUpCmd+0x9c>
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d0ec      	beq.n	800b546 <RTC_WakeUpCmd+0x76>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800b56c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b570:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f003 0304 	and.w	r3, r3, #4
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d103      	bne.n	800b586 <RTC_WakeUpCmd+0xb6>
    {
      status = ERROR;
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	75fb      	strb	r3, [r7, #23]
 800b584:	e002      	b.n	800b58c <RTC_WakeUpCmd+0xbc>
    }
    else
    {
      status = SUCCESS;
 800b586:	f04f 0301 	mov.w	r3, #1
 800b58a:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b58c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b590:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b594:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b598:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	f107 071c 	add.w	r7, r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bc80      	pop	{r7}
 800b5a6:	4770      	bx	lr

0800b5a8 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b5b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b5b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b5ba:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b5be:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b5c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b5c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b5c8:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b5cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800b5ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b5d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b5d6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b5da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b5de:	6892      	ldr	r2, [r2, #8]
 800b5e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b5e4:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800b5e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b5ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b5ee:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b5f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b5f6:	6892      	ldr	r2, [r2, #8]
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	4302      	orrs	r2, r0
 800b600:	430a      	orrs	r2, r1
 800b602:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b604:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b608:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b60c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b610:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b612:	f107 070c 	add.w	r7, r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	bc80      	pop	{r7}
 800b61a:	4770      	bx	lr

0800b61c <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800b620:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b624:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800b62e:	4618      	mov	r0, r3
 800b630:	46bd      	mov	sp, r7
 800b632:	bc80      	pop	{r7}
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop

0800b638 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b642:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b646:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b64a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b64e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b650:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b654:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b658:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b65c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800b65e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b662:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b666:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b66a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b66e:	6892      	ldr	r2, [r2, #8]
 800b670:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800b674:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800b676:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b67a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b67e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b682:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b686:	6892      	ldr	r2, [r2, #8]
 800b688:	4611      	mov	r1, r2
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	4302      	orrs	r2, r0
 800b690:	430a      	orrs	r2, r1
 800b692:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b694:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b698:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b69c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b6a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b6a2:	f107 070c 	add.w	r7, r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bc80      	pop	{r7}
 800b6aa:	4770      	bx	lr

0800b6ac <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b6bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b6c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b6c4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b6c8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b6ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b6ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b6d2:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b6d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800b6d8:	f7ff f994 	bl	800aa04 <RTC_EnterInitMode>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d103      	bne.n	800b6ea <RTC_CoarseCalibConfig+0x3e>
  {
    status = ERROR;
 800b6e2:	f04f 0300 	mov.w	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]
 800b6e8:	e00c      	b.n	800b704 <RTC_CoarseCalibConfig+0x58>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800b6ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b6ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800b6fa:	f7ff f9cd 	bl	800aa98 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800b6fe:	f04f 0301 	mov.w	r3, #1
 800b702:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b704:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b708:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b70c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b710:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b712:	7bfb      	ldrb	r3, [r7, #15]
}
 800b714:	4618      	mov	r0, r3
 800b716:	f107 0710 	add.w	r7, r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop

0800b720 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800b72a:	f04f 0300 	mov.w	r3, #0
 800b72e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b730:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b734:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b738:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b73c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b73e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b742:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b746:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b74a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800b74c:	f7ff f95a 	bl	800aa04 <RTC_EnterInitMode>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d103      	bne.n	800b75e <RTC_CoarseCalibCmd+0x3e>
  {
    status =  ERROR;
 800b756:	f04f 0300 	mov.w	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]
 800b75c:	e020      	b.n	800b7a0 <RTC_CoarseCalibCmd+0x80>
  }
  else
  {
    if (NewState != DISABLE)
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00c      	beq.n	800b77e <RTC_CoarseCalibCmd+0x5e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800b764:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b768:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b76c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b770:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b774:	6892      	ldr	r2, [r2, #8]
 800b776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b77a:	609a      	str	r2, [r3, #8]
 800b77c:	e00b      	b.n	800b796 <RTC_CoarseCalibCmd+0x76>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800b77e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b782:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b786:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b78a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b78e:	6892      	ldr	r2, [r2, #8]
 800b790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b794:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800b796:	f7ff f97f 	bl	800aa98 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800b79a:	f04f 0301 	mov.w	r3, #1
 800b79e:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b7a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b7a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b7a8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b7ac:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f107 0710 	add.w	r7, r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop

0800b7bc <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b7c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b7ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b7ce:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b7d2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b7d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b7d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b7dc:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b7e0:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800b7e2:	79fb      	ldrb	r3, [r7, #7]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00c      	beq.n	800b802 <RTC_CalibOutputCmd+0x46>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800b7e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b7ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b7f0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b7f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b7f8:	6892      	ldr	r2, [r2, #8]
 800b7fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b7fe:	609a      	str	r2, [r3, #8]
 800b800:	e00b      	b.n	800b81a <RTC_CalibOutputCmd+0x5e>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800b802:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b806:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b80a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b80e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b812:	6892      	ldr	r2, [r2, #8]
 800b814:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b818:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b81a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b81e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b822:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b826:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b828:	f107 070c 	add.w	r7, r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bc80      	pop	{r7}
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop

0800b834 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800b840:	f04f 0300 	mov.w	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b846:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b84a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b854:	f023 0308 	bic.w	r3, r3, #8
 800b858:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800b85a:	78fb      	ldrb	r3, [r7, #3]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d006      	beq.n	800b86e <RTC_TimeStampCmd+0x3a>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4313      	orrs	r3, r2
 800b866:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b86a:	60fb      	str	r3, [r7, #12]
 800b86c:	e003      	b.n	800b876 <RTC_TimeStampCmd+0x42>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4313      	orrs	r3, r2
 800b874:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b876:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b87a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b87e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b882:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b884:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b888:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b88c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800b892:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b896:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b89e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b8a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8a6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b8aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b8ac:	f107 0714 	add.w	r7, r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bc80      	pop	{r7}
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop

0800b8b8 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800b8c4:	f04f 0300 	mov.w	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
 800b8ca:	f04f 0300 	mov.w	r3, #0
 800b8ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800b8d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b8d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800b8e0:	f2c0 037f 	movt	r3, #127	; 0x7f
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800b8e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b8ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b8f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b8fa:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b902:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b906:	b2da      	uxtb	r2, r3
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800b912:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b916:	b2da      	uxtb	r2, r3
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b924:	b2da      	uxtb	r2, r3
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b930:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b934:	b2da      	uxtb	r2, r3
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f04f 0200 	mov.w	r2, #0
 800b940:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800b948:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	b2db      	uxtb	r3, r3
 800b956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b966:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d135      	bne.n	800b9e2 <RTC_GetTimeStamp+0x12a>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fa68 	bl	800be50 <RTC_Bcd2ToByte>
 800b980:	4603      	mov	r3, r0
 800b982:	461a      	mov	r2, r3
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	785b      	ldrb	r3, [r3, #1]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fa5f 	bl	800be50 <RTC_Bcd2ToByte>
 800b992:	4603      	mov	r3, r0
 800b994:	461a      	mov	r2, r3
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	789b      	ldrb	r3, [r3, #2]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 fa56 	bl	800be50 <RTC_Bcd2ToByte>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	785b      	ldrb	r3, [r3, #1]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 fa4d 	bl	800be50 <RTC_Bcd2ToByte>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	789b      	ldrb	r3, [r3, #2]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 fa44 	bl	800be50 <RTC_Bcd2ToByte>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 fa3b 	bl	800be50 <RTC_Bcd2ToByte>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	701a      	strb	r2, [r3, #0]
  }
}
 800b9e2:	f107 0718 	add.w	r7, r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop

0800b9ec <RTC_TamperTriggerConfig>:
  *            @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
  *            @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.                         
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d111      	bne.n	800ba20 <RTC_TamperTriggerConfig+0x34>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800b9fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba04:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba08:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ba0e:	4611      	mov	r1, r2
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba16:	ea6f 0202 	mvn.w	r2, r2
 800ba1a:	400a      	ands	r2, r1
 800ba1c:	641a      	str	r2, [r3, #64]	; 0x40
 800ba1e:	e00e      	b.n	800ba3e <RTC_TamperTriggerConfig+0x52>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800ba20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba28:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba2c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ba32:	4611      	mov	r1, r2
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800ba3e:	f107 070c 	add.w	r7, r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bc80      	pop	{r7}
 800ba46:	4770      	bx	lr

0800ba48 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	460b      	mov	r3, r1
 800ba52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00d      	beq.n	800ba76 <RTC_TamperCmd+0x2e>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800ba5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba62:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba66:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	430a      	orrs	r2, r1
 800ba72:	641a      	str	r2, [r3, #64]	; 0x40
 800ba74:	e00e      	b.n	800ba94 <RTC_TamperCmd+0x4c>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800ba76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba7e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba82:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ba88:	4611      	mov	r1, r2
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	ea6f 0202 	mvn.w	r2, r2
 800ba90:	400a      	ands	r2, r1
 800ba92:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800ba94:	f107 070c 	add.w	r7, r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bc80      	pop	{r7}
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop

0800baa0 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800baaa:	f04f 0300 	mov.w	r3, #0
 800baae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800bab0:	f642 0350 	movw	r3, #10320	; 0x2850
 800bab4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bab8:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	18d3      	adds	r3, r2, r3
 800bac4:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	601a      	str	r2, [r3, #0]
}
 800bacc:	f107 0714 	add.w	r7, r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bc80      	pop	{r7}
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop

0800bad8 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800bae0:	f04f 0300 	mov.w	r3, #0
 800bae4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800bae6:	f642 0350 	movw	r3, #10320	; 0x2850
 800baea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800baee:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	18d3      	adds	r3, r2, r3
 800bafa:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	f107 0714 	add.w	r7, r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bc80      	pop	{r7}
 800bb0a:	4770      	bx	lr

0800bb0c <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800bb14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb1c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bb20:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bb24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bb26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bb2a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800bb2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb30:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb34:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bb38:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bb3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bb3e:	4611      	mov	r1, r2
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	430a      	orrs	r2, r1
 800bb44:	641a      	str	r2, [r3, #64]	; 0x40
}
 800bb46:	f107 070c 	add.w	r7, r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bc80      	pop	{r7}
 800bb4e:	4770      	bx	lr

0800bb50 <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800bb58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb60:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bb64:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bb68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bb6a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bb6e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800bb70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb78:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bb7c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bb80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bb82:	4611      	mov	r1, r2
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	641a      	str	r2, [r3, #64]	; 0x40
}
 800bb8a:	f107 070c 	add.w	r7, r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bc80      	pop	{r7}
 800bb92:	4770      	bx	lr

0800bb94 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800bb9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bba0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bba4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bba8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bbac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bbae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbb2:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800bbb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bbb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bbbc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bbc0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bbc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	641a      	str	r2, [r3, #64]	; 0x40
}
 800bbce:	f107 070c 	add.w	r7, r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bc80      	pop	{r7}
 800bbd6:	4770      	bx	lr

0800bbd8 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800bbe4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bbe8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bbec:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800bbf0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800bbf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bbf6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bbfa:	f04f 0253 	mov.w	r2, #83	; 0x53
 800bbfe:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800bc00:	78fb      	ldrb	r3, [r7, #3]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d01e      	beq.n	800bc44 <RTC_ITConfig+0x6c>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800bc06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc0e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bc12:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bc16:	6892      	ldr	r2, [r2, #8]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	f022 0204 	bic.w	r2, r2, #4
 800bc20:	430a      	orrs	r2, r1
 800bc22:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800bc24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc2c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bc30:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bc34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bc36:	4611      	mov	r1, r2
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	f002 0204 	and.w	r2, r2, #4
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	641a      	str	r2, [r3, #64]	; 0x40
 800bc42:	e021      	b.n	800bc88 <RTC_ITConfig+0xb0>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800bc44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc4c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bc50:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bc54:	6892      	ldr	r2, [r2, #8]
 800bc56:	4611      	mov	r1, r2
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	f022 0204 	bic.w	r2, r2, #4
 800bc5e:	ea6f 0202 	mvn.w	r2, r2
 800bc62:	400a      	ands	r2, r1
 800bc64:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800bc66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc6e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bc72:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bc76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bc78:	4611      	mov	r1, r2
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	f002 0204 	and.w	r2, r2, #4
 800bc80:	ea6f 0202 	mvn.w	r2, r2
 800bc84:	400a      	ands	r2, r1
 800bc86:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800bc88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bc90:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800bc94:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bc96:	f107 070c 	add.w	r7, r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bc80      	pop	{r7}
 800bc9e:	4770      	bx	lr

0800bca0 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800bca8:	f04f 0300 	mov.w	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800bcae:	f04f 0300 	mov.w	r3, #0
 800bcb2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800bcb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bcb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	f643 7377 	movw	r3, #16247	; 0x3f77
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4013      	ands	r3, r2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <RTC_GetFlagStatus+0x3a>
  {
    bitstatus = SET;
 800bcd2:	f04f 0301 	mov.w	r3, #1
 800bcd6:	73fb      	strb	r3, [r7, #15]
 800bcd8:	e002      	b.n	800bce0 <RTC_GetFlagStatus+0x40>
  }
  else
  {
    bitstatus = RESET;
 800bcda:	f04f 0300 	mov.w	r3, #0
 800bcde:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	f107 0714 	add.w	r7, r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bc80      	pop	{r7}
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop

0800bcf0 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800bcf8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bcfc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800bd06:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bd0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd0e:	ea6f 0102 	mvn.w	r1, r2
 800bd12:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bd16:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bd1a:	68d2      	ldr	r2, [r2, #12]
 800bd1c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bd20:	430a      	orrs	r2, r1
 800bd22:	60da      	str	r2, [r3, #12]
}
 800bd24:	f107 070c 	add.w	r7, r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bc80      	pop	{r7}
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop

0800bd30 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800bd38:	f04f 0300 	mov.w	r3, #0
 800bd3c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800bd3e:	f04f 0300 	mov.w	r3, #0
 800bd42:	613b      	str	r3, [r7, #16]
 800bd44:	f04f 0300 	mov.w	r3, #0
 800bd48:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800bd4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd54:	f003 0304 	and.w	r3, r3, #4
 800bd58:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800bd5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	461a      	mov	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	401a      	ands	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	ea4f 31d3 	mov.w	r1, r3, lsr #15
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	400b      	ands	r3, r1
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800bd78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00a      	beq.n	800bdaa <RTC_GetITStatus+0x7a>
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800bd9a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d003      	beq.n	800bdaa <RTC_GetITStatus+0x7a>
  {
    bitstatus = SET;
 800bda2:	f04f 0301 	mov.w	r3, #1
 800bda6:	75fb      	strb	r3, [r7, #23]
 800bda8:	e002      	b.n	800bdb0 <RTC_GetITStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 800bdaa:	f04f 0300 	mov.w	r3, #0
 800bdae:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f107 071c 	add.w	r7, r7, #28
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bc80      	pop	{r7}
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop

0800bdc0 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bdc8:	f04f 0300 	mov.w	r3, #0
 800bdcc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800bdd4:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800bdd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bdda:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800bde4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bde8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bdec:	ea6f 0102 	mvn.w	r1, r2
 800bdf0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bdf4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bdf8:	68d2      	ldr	r2, [r2, #12]
 800bdfa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bdfe:	430a      	orrs	r2, r1
 800be00:	60da      	str	r2, [r3, #12]
}
 800be02:	f107 0714 	add.w	r7, r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	bc80      	pop	{r7}
 800be0a:	4770      	bx	lr

0800be0c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800be16:	f04f 0300 	mov.w	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800be1c:	e007      	b.n	800be2e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	f103 0301 	add.w	r3, r3, #1
 800be24:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800be26:	79fb      	ldrb	r3, [r7, #7]
 800be28:	f1a3 030a 	sub.w	r3, r3, #10
 800be2c:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800be2e:	79fb      	ldrb	r3, [r7, #7]
 800be30:	2b09      	cmp	r3, #9
 800be32:	d8f4      	bhi.n	800be1e <RTC_ByteToBcd2+0x12>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	79fb      	ldrb	r3, [r7, #7]
 800be3e:	4313      	orrs	r3, r2
 800be40:	b2db      	uxtb	r3, r3
}
 800be42:	4618      	mov	r0, r3
 800be44:	f107 0714 	add.w	r7, r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	bc80      	pop	{r7}
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop

0800be50 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800be5a:	f04f 0300 	mov.w	r3, #0
 800be5e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800be60:	79fb      	ldrb	r3, [r7, #7]
 800be62:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800be66:	b2db      	uxtb	r3, r3
 800be68:	461a      	mov	r2, r3
 800be6a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800be6e:	18d3      	adds	r3, r2, r3
 800be70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be74:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	f003 030f 	and.w	r3, r3, #15
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	18d3      	adds	r3, r2, r3
 800be82:	b2db      	uxtb	r3, r3
}
 800be84:	4618      	mov	r0, r3
 800be86:	f107 0714 	add.w	r7, r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bc80      	pop	{r7}
 800be8e:	4770      	bx	lr

0800be90 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800be94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800be98:	f04f 0101 	mov.w	r1, #1
 800be9c:	f7fe f9ce 	bl	800a23c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800bea0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bea4:	f04f 0100 	mov.w	r1, #0
 800bea8:	f7fe f9c8 	bl	800a23c <RCC_APB2PeriphResetCmd>
}
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop

0800beb0 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800beb8:	f04f 0300 	mov.w	r3, #0
 800bebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800bebe:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bec2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 800bed0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bed4:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	7d1b      	ldrb	r3, [r3, #20]
 800beda:	461a      	mov	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800bee6:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800bef2:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	4313      	orrs	r3, r2
 800befe:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800bf00:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bf04:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	605a      	str	r2, [r3, #4]
}
 800bf0c:	f107 0714 	add.w	r7, r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bc80      	pop	{r7}
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop

0800bf18 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f04f 0200 	mov.w	r2, #0
 800bf26:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f04f 0200 	mov.w	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f04f 0200 	mov.w	r2, #0
 800bf3e:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f04f 0200 	mov.w	r2, #0
 800bf46:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	611a      	str	r2, [r3, #16]
}
 800bf50:	f107 070c 	add.w	r7, r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bc80      	pop	{r7}
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop

0800bf5c <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800bf66:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800bf6a:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800bf6e:	79fa      	ldrb	r2, [r7, #7]
 800bf70:	601a      	str	r2, [r3, #0]
}
 800bf72:	f107 070c 	add.w	r7, r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bc80      	pop	{r7}
 800bf7a:	4770      	bx	lr

0800bf7c <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER &= PWR_PWRCTRL_MASK;
 800bf84:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bf88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bf8c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800bf90:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800bf94:	6812      	ldr	r2, [r2, #0]
 800bf96:	f022 0203 	bic.w	r2, r2, #3
 800bf9a:	601a      	str	r2, [r3, #0]
  SDIO->POWER |= SDIO_PowerState;
 800bf9c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bfa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bfa4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800bfa8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800bfac:	6812      	ldr	r2, [r2, #0]
 800bfae:	4611      	mov	r1, r2
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	430a      	orrs	r2, r1
 800bfb4:	601a      	str	r2, [r3, #0]
}
 800bfb6:	f107 070c 	add.w	r7, r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bc80      	pop	{r7}
 800bfbe:	4770      	bx	lr

0800bfc0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800bfc4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bfc8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 0303 	and.w	r3, r3, #3
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bc80      	pop	{r7}
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop

0800bfdc <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bfe4:	f04f 0300 	mov.w	r3, #0
 800bfe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800bfea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bfee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	6812      	ldr	r2, [r2, #0]
 800bff6:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800bff8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bffc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c00a:	f023 030f 	bic.w	r3, r3, #15
 800c00e:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	431a      	orrs	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	4313      	orrs	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800c02c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c030:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	60da      	str	r2, [r3, #12]
}
 800c038:	f107 0714 	add.w	r7, r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bc80      	pop	{r7}
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop

0800c044 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f04f 0200 	mov.w	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f04f 0200 	mov.w	r2, #0
 800c05a:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f04f 0200 	mov.w	r2, #0
 800c062:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f04f 0200 	mov.w	r2, #0
 800c06a:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f04f 0200 	mov.w	r2, #0
 800c072:	611a      	str	r2, [r3, #16]
}
 800c074:	f107 070c 	add.w	r7, r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	bc80      	pop	{r7}
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop

0800c080 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800c080:	b480      	push	{r7}
 800c082:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800c084:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c088:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	b2db      	uxtb	r3, r3
}
 800c090:	4618      	mov	r0, r3
 800c092:	46bd      	mov	sp, r7
 800c094:	bc80      	pop	{r7}
 800c096:	4770      	bx	lr

0800c098 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800c0a0:	f04f 0300 	mov.w	r3, #0
 800c0a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	f642 4314 	movw	r3, #11284	; 0x2c14
 800c0ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c0b0:	18d3      	adds	r3, r2, r3
 800c0b2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f107 0714 	add.w	r7, r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bc80      	pop	{r7}
 800c0c2:	4770      	bx	lr

0800c0c4 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c0cc:	f04f 0300 	mov.w	r3, #0
 800c0d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800c0d2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c0d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	6812      	ldr	r2, [r2, #0]
 800c0de:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800c0e0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c0e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	6852      	ldr	r2, [r2, #4]
 800c0ec:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800c0ee:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c0f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800c100:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689a      	ldr	r2, [r3, #8]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	431a      	orrs	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800c11e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c122:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c12a:	f107 0714 	add.w	r7, r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	bc80      	pop	{r7}
 800c132:	4770      	bx	lr

0800c134 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f04f 32ff 	mov.w	r2, #4294967295
 800c142:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f04f 0200 	mov.w	r2, #0
 800c14a:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f04f 0200 	mov.w	r2, #0
 800c152:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f04f 0200 	mov.w	r2, #0
 800c162:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f04f 0200 	mov.w	r2, #0
 800c16a:	615a      	str	r2, [r3, #20]
}
 800c16c:	f107 070c 	add.w	r7, r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	bc80      	pop	{r7}
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop

0800c178 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800c178:	b480      	push	{r7}
 800c17a:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800c17c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c180:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800c186:	4618      	mov	r0, r3
 800c188:	46bd      	mov	sp, r7
 800c18a:	bc80      	pop	{r7}
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop

0800c190 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800c190:	b480      	push	{r7}
 800c192:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800c194:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c198:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bc80      	pop	{r7}
 800c1a6:	4770      	bx	lr

0800c1a8 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800c1b0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c1b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c1be:	f107 070c 	add.w	r7, r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bc80      	pop	{r7}
 800c1c6:	4770      	bx	lr

0800c1c8 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800c1c8:	b480      	push	{r7}
 800c1ca:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800c1cc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c1d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c1d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bc80      	pop	{r7}
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop

0800c1e0 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800c1ea:	f248 53a0 	movw	r3, #34208	; 0x85a0
 800c1ee:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c1f2:	79fa      	ldrb	r2, [r7, #7]
 800c1f4:	601a      	str	r2, [r3, #0]
}
 800c1f6:	f107 070c 	add.w	r7, r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bc80      	pop	{r7}
 800c1fe:	4770      	bx	lr

0800c200 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800c20a:	f248 53a4 	movw	r3, #34212	; 0x85a4
 800c20e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c212:	79fa      	ldrb	r2, [r7, #7]
 800c214:	601a      	str	r2, [r3, #0]
}
 800c216:	f107 070c 	add.w	r7, r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bc80      	pop	{r7}
 800c21e:	4770      	bx	lr

0800c220 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800c228:	f248 53a8 	movw	r3, #34216	; 0x85a8
 800c22c:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	601a      	str	r2, [r3, #0]
}
 800c234:	f107 070c 	add.w	r7, r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	bc80      	pop	{r7}
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop

0800c240 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800c24a:	f248 53ac 	movw	r3, #34220	; 0x85ac
 800c24e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c252:	79fa      	ldrb	r2, [r7, #7]
 800c254:	601a      	str	r2, [r3, #0]
}
 800c256:	f107 070c 	add.w	r7, r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bc80      	pop	{r7}
 800c25e:	4770      	bx	lr

0800c260 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800c26a:	f248 13ac 	movw	r3, #33196	; 0x81ac
 800c26e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c272:	79fa      	ldrb	r2, [r7, #7]
 800c274:	601a      	str	r2, [r3, #0]
}
 800c276:	f107 070c 	add.w	r7, r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bc80      	pop	{r7}
 800c27e:	4770      	bx	lr

0800c280 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800c28a:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800c28e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c292:	79fa      	ldrb	r2, [r7, #7]
 800c294:	601a      	str	r2, [r3, #0]
}
 800c296:	f107 070c 	add.w	r7, r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bc80      	pop	{r7}
 800c29e:	4770      	bx	lr

0800c2a0 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800c2aa:	f248 13b4 	movw	r3, #33204	; 0x81b4
 800c2ae:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c2b2:	79fa      	ldrb	r2, [r7, #7]
 800c2b4:	f002 0201 	and.w	r2, r2, #1
 800c2b8:	2a00      	cmp	r2, #0
 800c2ba:	bf14      	ite	ne
 800c2bc:	2200      	movne	r2, #0
 800c2be:	2201      	moveq	r2, #1
 800c2c0:	601a      	str	r2, [r3, #0]
}
 800c2c2:	f107 070c 	add.w	r7, r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bc80      	pop	{r7}
 800c2ca:	4770      	bx	lr

0800c2cc <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800c2d6:	f248 13b8 	movw	r3, #33208	; 0x81b8
 800c2da:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c2de:	79fa      	ldrb	r2, [r7, #7]
 800c2e0:	601a      	str	r2, [r3, #0]
}
 800c2e2:	f107 070c 	add.w	r7, r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bc80      	pop	{r7}
 800c2ea:	4770      	bx	lr

0800c2ec <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800c2f6:	f248 538c 	movw	r3, #34188	; 0x858c
 800c2fa:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c2fe:	79fa      	ldrb	r2, [r7, #7]
 800c300:	601a      	str	r2, [r3, #0]
}
 800c302:	f107 070c 	add.w	r7, r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	bc80      	pop	{r7}
 800c30a:	4770      	bx	lr

0800c30c <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00d      	beq.n	800c33a <SDIO_ITConfig+0x2e>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800c31e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c322:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c326:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800c32a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c32e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c330:	4611      	mov	r1, r2
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	430a      	orrs	r2, r1
 800c336:	63da      	str	r2, [r3, #60]	; 0x3c
 800c338:	e00e      	b.n	800c358 <SDIO_ITConfig+0x4c>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800c33a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c33e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c342:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800c346:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c34a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c34c:	4611      	mov	r1, r2
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	ea6f 0202 	mvn.w	r2, r2
 800c354:	400a      	ands	r2, r1
 800c356:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800c358:	f107 070c 	add.w	r7, r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bc80      	pop	{r7}
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop

0800c364 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800c36c:	f04f 0300 	mov.w	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800c372:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c376:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c37c:	461a      	mov	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4013      	ands	r3, r2
 800c382:	2b00      	cmp	r3, #0
 800c384:	d003      	beq.n	800c38e <SDIO_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800c386:	f04f 0301 	mov.w	r3, #1
 800c38a:	73fb      	strb	r3, [r7, #15]
 800c38c:	e002      	b.n	800c394 <SDIO_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800c38e:	f04f 0300 	mov.w	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c394:	7bfb      	ldrb	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	f107 0714 	add.w	r7, r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bc80      	pop	{r7}
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop

0800c3a4 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800c3ac:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c3b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c3b8:	f107 070c 	add.w	r7, r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bc80      	pop	{r7}
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop

0800c3c4 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800c3cc:	f04f 0300 	mov.w	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800c3d2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c3d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3dc:	461a      	mov	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <SDIO_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800c3e6:	f04f 0301 	mov.w	r3, #1
 800c3ea:	73fb      	strb	r3, [r7, #15]
 800c3ec:	e002      	b.n	800c3f4 <SDIO_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800c3ee:	f04f 0300 	mov.w	r3, #0
 800c3f2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f107 0714 	add.w	r7, r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bc80      	pop	{r7}
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop

0800c404 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800c40c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c410:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c418:	f107 070c 	add.w	r7, r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bc80      	pop	{r7}
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop

0800c424 <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode.   
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c432:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c436:	429a      	cmp	r2, r3
 800c438:	d10c      	bne.n	800c454 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800c43a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c43e:	f04f 0101 	mov.w	r1, #1
 800c442:	f7fd fefb 	bl	800a23c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800c446:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c44a:	f04f 0100 	mov.w	r1, #0
 800c44e:	f7fd fef5 	bl	800a23c <RCC_APB2PeriphResetCmd>
 800c452:	e026      	b.n	800c4a2 <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c45a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c45e:	429a      	cmp	r2, r3
 800c460:	d10c      	bne.n	800c47c <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800c462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c466:	f04f 0101 	mov.w	r1, #1
 800c46a:	f7fd febb 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800c46e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c472:	f04f 0100 	mov.w	r1, #0
 800c476:	f7fd feb5 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800c47a:	e012      	b.n	800c4a2 <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c482:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c486:	429a      	cmp	r2, r3
 800c488:	d10b      	bne.n	800c4a2 <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800c48a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c48e:	f04f 0101 	mov.w	r1, #1
 800c492:	f7fd fea7 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800c496:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c49a:	f04f 0100 	mov.w	r1, #0
 800c49e:	f7fd fea1 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800c4a2:	f107 0708 	add.w	r7, r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop

0800c4ac <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800c4b6:	f04f 0300 	mov.w	r3, #0
 800c4ba:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	881b      	ldrh	r3, [r3, #0]
 800c4c0:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800c4c2:	89fb      	ldrh	r3, [r7, #14]
 800c4c4:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800c4c8:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	881a      	ldrh	r2, [r3, #0]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	885b      	ldrh	r3, [r3, #2]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c502:	4313      	orrs	r3, r2
 800c504:	b29a      	uxth	r2, r3
 800c506:	89fb      	ldrh	r3, [r7, #14]
 800c508:	4313      	orrs	r3, r2
 800c50a:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	89fa      	ldrh	r2, [r7, #14]
 800c510:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	8b9b      	ldrh	r3, [r3, #28]
 800c516:	b29b      	uxth	r3, r3
 800c518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	8a1a      	ldrh	r2, [r3, #16]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	821a      	strh	r2, [r3, #16]
}
 800c52a:	f107 0714 	add.w	r7, r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	bc80      	pop	{r7}
 800c532:	4770      	bx	lr

0800c534 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800c534:	b480      	push	{r7}
 800c536:	b08b      	sub	sp, #44	; 0x2c
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800c53e:	f04f 0300 	mov.w	r3, #0
 800c542:	837b      	strh	r3, [r7, #26]
 800c544:	f04f 0302 	mov.w	r3, #2
 800c548:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c54a:	f04f 0300 	mov.w	r3, #0
 800c54e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c550:	f04f 0301 	mov.w	r3, #1
 800c554:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800c556:	f04f 0300 	mov.w	r3, #0
 800c55a:	61fb      	str	r3, [r7, #28]
 800c55c:	f04f 0300 	mov.w	r3, #0
 800c560:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800c562:	f04f 0300 	mov.w	r3, #0
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	f04f 0300 	mov.w	r3, #0
 800c56c:	60fb      	str	r3, [r7, #12]
 800c56e:	f04f 0300 	mov.w	r3, #0
 800c572:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	8b9b      	ldrh	r3, [r3, #28]
 800c578:	b29b      	uxth	r3, r3
 800c57a:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800c57e:	f023 031f 	bic.w	r3, r3, #31
 800c582:	b29a      	uxth	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f04f 0202 	mov.w	r2, #2
 800c58e:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	8b9b      	ldrh	r3, [r3, #28]
 800c594:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d106      	bne.n	800c5ac <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 800c59e:	f04f 0300 	mov.w	r3, #0
 800c5a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800c5a4:	f04f 0302 	mov.w	r3, #2
 800c5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c5aa:	e09b      	b.n	800c6e4 <I2S_Init+0x1b0>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	889b      	ldrh	r3, [r3, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d103      	bne.n	800c5bc <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800c5b4:	f04f 0301 	mov.w	r3, #1
 800c5b8:	847b      	strh	r3, [r7, #34]	; 0x22
 800c5ba:	e002      	b.n	800c5c2 <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800c5bc:	f04f 0302 	mov.w	r3, #2
 800c5c0:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800c5c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c5c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00b      	beq.n	800c5ec <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800c5d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c5d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c5dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c5e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c5e4:	6892      	ldr	r2, [r2, #8]
 800c5e6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c5ea:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800c5ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c5f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c5f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c5fe:	4013      	ands	r3, r2
 800c600:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800c604:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800c608:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800c60c:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800c60e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c612:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c61a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c61e:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800c622:	f003 0307 	and.w	r3, r3, #7
 800c626:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800c628:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c62c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c636:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800c638:	f647 0340 	movw	r3, #30784	; 0x7840
 800c63c:	f2c0 137d 	movt	r3, #381	; 0x17d
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	fbb3 f3f2 	udiv	r3, r3, r2
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	fb02 f203 	mul.w	r2, r2, r3
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c652:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	88db      	ldrh	r3, [r3, #6]
 800c658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c65c:	d113      	bne.n	800c686 <I2S_Init+0x152>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800c664:	4613      	mov	r3, r2
 800c666:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c66a:	189b      	adds	r3, r3, r2
 800c66c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c670:	461a      	mov	r2, r3
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	fbb2 f3f3 	udiv	r3, r2, r3
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	f103 0305 	add.w	r3, r3, #5
 800c680:	b29b      	uxth	r3, r3
 800c682:	61fb      	str	r3, [r7, #28]
 800c684:	e015      	b.n	800c6b2 <I2S_Init+0x17e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800c686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c688:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c692:	4613      	mov	r3, r2
 800c694:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c698:	189b      	adds	r3, r3, r2
 800c69a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c69e:	461a      	mov	r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	f103 0305 	add.w	r3, r3, #5
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800c6b2:	69fa      	ldr	r2, [r7, #28]
 800c6b4:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800c6b8:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800c6bc:	fba3 1302 	umull	r1, r3, r3, r2
 800c6c0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800c6c4:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800c6d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6d2:	69fa      	ldr	r2, [r7, #28]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800c6da:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800c6dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800c6e2:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800c6e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d902      	bls.n	800c6f0 <I2S_Init+0x1bc>
 800c6ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6ec:	2bff      	cmp	r3, #255	; 0xff
 800c6ee:	d905      	bls.n	800c6fc <I2S_Init+0x1c8>
  {
    /* Set the default values */
    i2sdiv = 2;
 800c6f0:	f04f 0302 	mov.w	r3, #2
 800c6f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800c6f6:	f04f 0300 	mov.w	r3, #0
 800c6fa:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	88da      	ldrh	r2, [r3, #6]
 800c700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c702:	4313      	orrs	r3, r2
 800c704:	b29a      	uxth	r2, r3
 800c706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c708:	4313      	orrs	r3, r2
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	8859      	ldrh	r1, [r3, #2]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800c720:	4303      	orrs	r3, r0
 800c722:	b29b      	uxth	r3, r3
 800c724:	430b      	orrs	r3, r1
 800c726:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800c728:	4313      	orrs	r3, r2
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	8b7b      	ldrh	r3, [r7, #26]
 800c72e:	4313      	orrs	r3, r2
 800c730:	b29b      	uxth	r3, r3
 800c732:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c736:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	8b7a      	ldrh	r2, [r7, #26]
 800c73c:	839a      	strh	r2, [r3, #28]
}
 800c73e:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800c742:	46bd      	mov	sp, r7
 800c744:	bc80      	pop	{r7}
 800c746:	4770      	bx	lr

0800c748 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f04f 0200 	mov.w	r2, #0
 800c756:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f04f 0200 	mov.w	r2, #0
 800c75e:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f04f 0200 	mov.w	r2, #0
 800c766:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f04f 0200 	mov.w	r2, #0
 800c76e:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f04f 0200 	mov.w	r2, #0
 800c776:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f04f 0200 	mov.w	r2, #0
 800c77e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f04f 0200 	mov.w	r2, #0
 800c786:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f04f 0200 	mov.w	r2, #0
 800c78e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f04f 0207 	mov.w	r2, #7
 800c796:	821a      	strh	r2, [r3, #16]
}
 800c798:	f107 070c 	add.w	r7, r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bc80      	pop	{r7}
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop

0800c7a4 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f04f 0200 	mov.w	r2, #0
 800c7b2:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f04f 0200 	mov.w	r2, #0
 800c7ba:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f04f 0200 	mov.w	r2, #0
 800c7c2:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f04f 0200 	mov.w	r2, #0
 800c7ca:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f04f 0202 	mov.w	r2, #2
 800c7d2:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f04f 0200 	mov.w	r2, #0
 800c7da:	819a      	strh	r2, [r3, #12]
}
 800c7dc:	f107 070c 	add.w	r7, r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bc80      	pop	{r7}
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop

0800c7e8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c7f4:	78fb      	ldrb	r3, [r7, #3]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d008      	beq.n	800c80c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	881b      	ldrh	r3, [r3, #0]
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c804:	b29a      	uxth	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	801a      	strh	r2, [r3, #0]
 800c80a:	e007      	b.n	800c81c <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	b29b      	uxth	r3, r3
 800c812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c816:	b29a      	uxth	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	801a      	strh	r2, [r3, #0]
  }
}
 800c81c:	f107 070c 	add.w	r7, r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	bc80      	pop	{r7}
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop

0800c828 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d008      	beq.n	800c84c <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	8b9b      	ldrh	r3, [r3, #28]
 800c83e:	b29b      	uxth	r3, r3
 800c840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c844:	b29a      	uxth	r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	839a      	strh	r2, [r3, #28]
 800c84a:	e007      	b.n	800c85c <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8b9b      	ldrh	r3, [r3, #28]
 800c850:	b29b      	uxth	r3, r3
 800c852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	839a      	strh	r2, [r3, #28]
  }
}
 800c85c:	f107 070c 	add.w	r7, r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	bc80      	pop	{r7}
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop

0800c868 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	460b      	mov	r3, r1
 800c872:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	b29b      	uxth	r3, r3
 800c87a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c87e:	b29a      	uxth	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	881b      	ldrh	r3, [r3, #0]
 800c888:	b29a      	uxth	r2, r3
 800c88a:	887b      	ldrh	r3, [r7, #2]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	b29a      	uxth	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	801a      	strh	r2, [r3, #0]
}
 800c894:	f107 070c 	add.w	r7, r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	bc80      	pop	{r7}
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop

0800c8a0 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800c8ac:	887b      	ldrh	r3, [r7, #2]
 800c8ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8b2:	d108      	bne.n	800c8c6 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8be:	b29a      	uxth	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	801a      	strh	r2, [r3, #0]
 800c8c4:	e007      	b.n	800c8d6 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	881b      	ldrh	r3, [r3, #0]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	801a      	strh	r2, [r3, #0]
  }
}
 800c8d6:	f107 070c 	add.w	r7, r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bc80      	pop	{r7}
 800c8de:	4770      	bx	lr

0800c8e0 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800c8ec:	887a      	ldrh	r2, [r7, #2]
 800c8ee:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d008      	beq.n	800c908 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c900:	b29a      	uxth	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	801a      	strh	r2, [r3, #0]
 800c906:	e007      	b.n	800c918 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	881b      	ldrh	r3, [r3, #0]
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c912:	b29a      	uxth	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	801a      	strh	r2, [r3, #0]
  }
}
 800c918:	f107 070c 	add.w	r7, r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bc80      	pop	{r7}
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop

0800c924 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d008      	beq.n	800c948 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	889b      	ldrh	r3, [r3, #4]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f043 0304 	orr.w	r3, r3, #4
 800c940:	b29a      	uxth	r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	809a      	strh	r2, [r3, #4]
 800c946:	e007      	b.n	800c958 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	889b      	ldrh	r3, [r3, #4]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	f023 0304 	bic.w	r3, r3, #4
 800c952:	b29a      	uxth	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	809a      	strh	r2, [r3, #4]
  }
}
 800c958:	f107 070c 	add.w	r7, r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bc80      	pop	{r7}
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop

0800c964 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d008      	beq.n	800c988 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	889b      	ldrh	r3, [r3, #4]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	f043 0310 	orr.w	r3, r3, #16
 800c980:	b29a      	uxth	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	809a      	strh	r2, [r3, #4]
 800c986:	e007      	b.n	800c998 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	889b      	ldrh	r3, [r3, #4]
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	f023 0310 	bic.w	r3, r3, #16
 800c992:	b29a      	uxth	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	809a      	strh	r2, [r3, #4]
  }
}
 800c998:	f107 070c 	add.w	r7, r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bc80      	pop	{r7}
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop

0800c9a4 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	899b      	ldrh	r3, [r3, #12]
 800c9b0:	b29b      	uxth	r3, r3
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f107 070c 	add.w	r7, r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bc80      	pop	{r7}
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop

0800c9c0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	887a      	ldrh	r2, [r7, #2]
 800c9d0:	819a      	strh	r2, [r3, #12]
}
 800c9d2:	f107 070c 	add.w	r7, r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bc80      	pop	{r7}
 800c9da:	4770      	bx	lr

0800c9dc <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c9e8:	78fb      	ldrb	r3, [r7, #3]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d008      	beq.n	800ca00 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	801a      	strh	r2, [r3, #0]
 800c9fe:	e007      	b.n	800ca10 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	881b      	ldrh	r3, [r3, #0]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	801a      	strh	r2, [r3, #0]
  }
}
 800ca10:	f107 070c 	add.w	r7, r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bc80      	pop	{r7}
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop

0800ca1c <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	801a      	strh	r2, [r3, #0]
}
 800ca34:	f107 070c 	add.w	r7, r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bc80      	pop	{r7}
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop

0800ca40 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800ca52:	78fb      	ldrb	r3, [r7, #3]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d003      	beq.n	800ca60 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	8b1b      	ldrh	r3, [r3, #24]
 800ca5c:	81fb      	strh	r3, [r7, #14]
 800ca5e:	e002      	b.n	800ca66 <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	8a9b      	ldrh	r3, [r3, #20]
 800ca64:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800ca66:	89fb      	ldrh	r3, [r7, #14]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f107 0714 	add.w	r7, r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bc80      	pop	{r7}
 800ca72:	4770      	bx	lr

0800ca74 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	8a1b      	ldrh	r3, [r3, #16]
 800ca80:	b29b      	uxth	r3, r3
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	f107 070c 	add.w	r7, r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bc80      	pop	{r7}
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop

0800ca90 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	4613      	mov	r3, r2
 800ca9a:	460a      	mov	r2, r1
 800ca9c:	807a      	strh	r2, [r7, #2]
 800ca9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800caa0:	787b      	ldrb	r3, [r7, #1]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d008      	beq.n	800cab8 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	889b      	ldrh	r3, [r3, #4]
 800caaa:	b29a      	uxth	r2, r3
 800caac:	887b      	ldrh	r3, [r7, #2]
 800caae:	4313      	orrs	r3, r2
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	809a      	strh	r2, [r3, #4]
 800cab6:	e00a      	b.n	800cace <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	889b      	ldrh	r3, [r3, #4]
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	887b      	ldrh	r3, [r7, #2]
 800cac0:	ea6f 0303 	mvn.w	r3, r3
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	4013      	ands	r3, r2
 800cac8:	b29a      	uxth	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	809a      	strh	r2, [r3, #4]
  }
}
 800cace:	f107 070c 	add.w	r7, r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bc80      	pop	{r7}
 800cad6:	4770      	bx	lr

0800cad8 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	4613      	mov	r3, r2
 800cae2:	460a      	mov	r2, r1
 800cae4:	70fa      	strb	r2, [r7, #3]
 800cae6:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800cae8:	f04f 0300 	mov.w	r3, #0
 800caec:	81fb      	strh	r3, [r7, #14]
 800caee:	f04f 0300 	mov.w	r3, #0
 800caf2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800caf4:	78fb      	ldrb	r3, [r7, #3]
 800caf6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800cafe:	89fb      	ldrh	r3, [r7, #14]
 800cb00:	f04f 0201 	mov.w	r2, #1
 800cb04:	fa02 f303 	lsl.w	r3, r2, r3
 800cb08:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800cb0a:	78bb      	ldrb	r3, [r7, #2]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d008      	beq.n	800cb22 <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	889b      	ldrh	r3, [r3, #4]
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	89bb      	ldrh	r3, [r7, #12]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	809a      	strh	r2, [r3, #4]
 800cb20:	e00a      	b.n	800cb38 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	889b      	ldrh	r3, [r3, #4]
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	89bb      	ldrh	r3, [r7, #12]
 800cb2a:	ea6f 0303 	mvn.w	r3, r3
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	4013      	ands	r3, r2
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	809a      	strh	r2, [r3, #4]
  }
}
 800cb38:	f107 0714 	add.w	r7, r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bc80      	pop	{r7}
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop

0800cb44 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800cb50:	f04f 0300 	mov.w	r3, #0
 800cb54:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	891b      	ldrh	r3, [r3, #8]
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	887b      	ldrh	r3, [r7, #2]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d003      	beq.n	800cb6e <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800cb66:	f04f 0301 	mov.w	r3, #1
 800cb6a:	73fb      	strb	r3, [r7, #15]
 800cb6c:	e002      	b.n	800cb74 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800cb6e:	f04f 0300 	mov.w	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	f107 0714 	add.w	r7, r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bc80      	pop	{r7}
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop

0800cb84 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800cb90:	887b      	ldrh	r3, [r7, #2]
 800cb92:	ea6f 0303 	mvn.w	r3, r3
 800cb96:	b29a      	uxth	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	811a      	strh	r2, [r3, #8]
}
 800cb9c:	f107 070c 	add.w	r7, r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bc80      	pop	{r7}
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop

0800cba8 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800cbb4:	f04f 0300 	mov.w	r3, #0
 800cbb8:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800cbba:	f04f 0300 	mov.w	r3, #0
 800cbbe:	81bb      	strh	r3, [r7, #12]
 800cbc0:	f04f 0300 	mov.w	r3, #0
 800cbc4:	817b      	strh	r3, [r7, #10]
 800cbc6:	f04f 0300 	mov.w	r3, #0
 800cbca:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800cbcc:	78fb      	ldrb	r3, [r7, #3]
 800cbce:	f003 030f 	and.w	r3, r3, #15
 800cbd2:	f04f 0201 	mov.w	r2, #1
 800cbd6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbda:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800cbdc:	78fb      	ldrb	r3, [r7, #3]
 800cbde:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800cbe6:	897b      	ldrh	r3, [r7, #10]
 800cbe8:	f04f 0201 	mov.w	r2, #1
 800cbec:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf0:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	889b      	ldrh	r3, [r3, #4]
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	897b      	ldrh	r3, [r7, #10]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	891b      	ldrh	r3, [r3, #8]
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	89bb      	ldrh	r3, [r7, #12]
 800cc06:	4013      	ands	r3, r2
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d006      	beq.n	800cc1c <SPI_I2S_GetITStatus+0x74>
 800cc0e:	893b      	ldrh	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d003      	beq.n	800cc1c <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800cc14:	f04f 0301 	mov.w	r3, #1
 800cc18:	73fb      	strb	r3, [r7, #15]
 800cc1a:	e002      	b.n	800cc22 <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800cc1c:	f04f 0300 	mov.w	r3, #0
 800cc20:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	f107 0714 	add.w	r7, r7, #20
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bc80      	pop	{r7}
 800cc2e:	4770      	bx	lr

0800cc30 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800cc3c:	f04f 0300 	mov.w	r3, #0
 800cc40:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800cc42:	78fb      	ldrb	r3, [r7, #3]
 800cc44:	f003 030f 	and.w	r3, r3, #15
 800cc48:	f04f 0201 	mov.w	r2, #1
 800cc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc50:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800cc52:	89fb      	ldrh	r3, [r7, #14]
 800cc54:	ea6f 0303 	mvn.w	r3, r3
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	811a      	strh	r2, [r3, #8]
}
 800cc5e:	f107 0714 	add.w	r7, r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bc80      	pop	{r7}
 800cc66:	4770      	bx	lr

0800cc68 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800cc6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cc70:	f04f 0101 	mov.w	r1, #1
 800cc74:	f7fd fae2 	bl	800a23c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800cc78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cc7c:	f04f 0100 	mov.w	r1, #0
 800cc80:	f7fd fadc 	bl	800a23c <RCC_APB2PeriphResetCmd>
}
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop

0800cc88 <SYSCFG_MemoryRemapConfig>:
  *         registers. 
  *        
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800cc92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cc96:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cc9a:	79fa      	ldrb	r2, [r7, #7]
 800cc9c:	601a      	str	r2, [r3, #0]
}
 800cc9e:	f107 070c 	add.w	r7, r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bc80      	pop	{r7}
 800cca6:	4770      	bx	lr

0800cca8 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800cca8:	b490      	push	{r4, r7}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	71fa      	strb	r2, [r7, #7]
 800ccb4:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800ccb6:	f04f 0300 	mov.w	r3, #0
 800ccba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800ccbc:	79bb      	ldrb	r3, [r7, #6]
 800ccbe:	f003 0303 	and.w	r3, r3, #3
 800ccc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ccc6:	f04f 020f 	mov.w	r2, #15
 800ccca:	fa02 f303 	lsl.w	r3, r2, r3
 800ccce:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800ccd0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ccd4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ccd8:	79ba      	ldrb	r2, [r7, #6]
 800ccda:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800ccde:	b2d2      	uxtb	r2, r2
 800cce0:	4610      	mov	r0, r2
 800cce2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cce6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800ccea:	79b9      	ldrb	r1, [r7, #6]
 800ccec:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800ccf0:	b2c9      	uxtb	r1, r1
 800ccf2:	f101 0102 	add.w	r1, r1, #2
 800ccf6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	ea6f 0202 	mvn.w	r2, r2
 800cd02:	4011      	ands	r1, r2
 800cd04:	f100 0202 	add.w	r2, r0, #2
 800cd08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800cd0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cd10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cd14:	79ba      	ldrb	r2, [r7, #6]
 800cd16:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cd22:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800cd26:	79b9      	ldrb	r1, [r7, #6]
 800cd28:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800cd2c:	b2c9      	uxtb	r1, r1
 800cd2e:	f101 0102 	add.w	r1, r1, #2
 800cd32:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cd36:	4611      	mov	r1, r2
 800cd38:	79fc      	ldrb	r4, [r7, #7]
 800cd3a:	79ba      	ldrb	r2, [r7, #6]
 800cd3c:	f002 0203 	and.w	r2, r2, #3
 800cd40:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800cd44:	fa04 f202 	lsl.w	r2, r4, r2
 800cd48:	4311      	orrs	r1, r2
 800cd4a:	f100 0202 	add.w	r2, r0, #2
 800cd4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800cd52:	f107 0710 	add.w	r7, r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bc90      	pop	{r4, r7}
 800cd5a:	4770      	bx	lr

0800cd5c <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800cd64:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 800cd68:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	601a      	str	r2, [r3, #0]
}
 800cd70:	f107 070c 	add.w	r7, r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bc80      	pop	{r7}
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop

0800cd7c <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800cd86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd8a:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800cd8e:	79fa      	ldrb	r2, [r7, #7]
 800cd90:	601a      	str	r2, [r3, #0]
}
 800cd92:	f107 070c 	add.w	r7, r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bc80      	pop	{r7}
 800cd9a:	4770      	bx	lr

0800cd9c <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800cda2:	f04f 0300 	mov.w	r3, #0
 800cda6:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800cda8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cdac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cdb0:	6a1b      	ldr	r3, [r3, #32]
 800cdb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 800cdba:	f04f 0301 	mov.w	r3, #1
 800cdbe:	71fb      	strb	r3, [r7, #7]
 800cdc0:	e002      	b.n	800cdc8 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800cdc2:	f04f 0300 	mov.w	r3, #0
 800cdc6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f107 070c 	add.w	r7, r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bc80      	pop	{r7}
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop

0800cdd8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	f04f 0300 	mov.w	r3, #0
 800cde6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d10c      	bne.n	800ce08 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800cdee:	f04f 0001 	mov.w	r0, #1
 800cdf2:	f04f 0101 	mov.w	r1, #1
 800cdf6:	f7fd fa21 	bl	800a23c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800cdfa:	f04f 0001 	mov.w	r0, #1
 800cdfe:	f04f 0100 	mov.w	r1, #0
 800ce02:	f7fd fa1b 	bl	800a23c <RCC_APB2PeriphResetCmd>
 800ce06:	e0ff      	b.n	800d008 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce0e:	d10c      	bne.n	800ce2a <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800ce10:	f04f 0001 	mov.w	r0, #1
 800ce14:	f04f 0101 	mov.w	r1, #1
 800ce18:	f7fd f9e4 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800ce1c:	f04f 0001 	mov.w	r0, #1
 800ce20:	f04f 0100 	mov.w	r1, #0
 800ce24:	f7fd f9de 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800ce28:	e0ee      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce30:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d10c      	bne.n	800ce52 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800ce38:	f04f 0002 	mov.w	r0, #2
 800ce3c:	f04f 0101 	mov.w	r1, #1
 800ce40:	f7fd f9d0 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800ce44:	f04f 0002 	mov.w	r0, #2
 800ce48:	f04f 0100 	mov.w	r1, #0
 800ce4c:	f7fd f9ca 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800ce50:	e0da      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d10c      	bne.n	800ce7a <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800ce60:	f04f 0004 	mov.w	r0, #4
 800ce64:	f04f 0101 	mov.w	r1, #1
 800ce68:	f7fd f9bc 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800ce6c:	f04f 0004 	mov.w	r0, #4
 800ce70:	f04f 0100 	mov.w	r1, #0
 800ce74:	f7fd f9b6 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800ce78:	e0c6      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ce80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d10c      	bne.n	800cea2 <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800ce88:	f04f 0008 	mov.w	r0, #8
 800ce8c:	f04f 0101 	mov.w	r1, #1
 800ce90:	f7fd f9a8 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800ce94:	f04f 0008 	mov.w	r0, #8
 800ce98:	f04f 0100 	mov.w	r1, #0
 800ce9c:	f7fd f9a2 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800cea0:	e0b2      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cea8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d10c      	bne.n	800ceca <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800ceb0:	f04f 0010 	mov.w	r0, #16
 800ceb4:	f04f 0101 	mov.w	r1, #1
 800ceb8:	f7fd f994 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800cebc:	f04f 0010 	mov.w	r0, #16
 800cec0:	f04f 0100 	mov.w	r1, #0
 800cec4:	f7fd f98e 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800cec8:	e09e      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ced0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d10c      	bne.n	800cef2 <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800ced8:	f04f 0020 	mov.w	r0, #32
 800cedc:	f04f 0101 	mov.w	r1, #1
 800cee0:	f7fd f980 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800cee4:	f04f 0020 	mov.w	r0, #32
 800cee8:	f04f 0100 	mov.w	r1, #0
 800ceec:	f7fd f97a 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800cef0:	e08a      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cef8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d10c      	bne.n	800cf1a <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800cf00:	f04f 0002 	mov.w	r0, #2
 800cf04:	f04f 0101 	mov.w	r1, #1
 800cf08:	f7fd f998 	bl	800a23c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800cf0c:	f04f 0002 	mov.w	r0, #2
 800cf10:	f04f 0100 	mov.w	r1, #0
 800cf14:	f7fd f992 	bl	800a23c <RCC_APB2PeriphResetCmd>
 800cf18:	e076      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf20:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d10c      	bne.n	800cf42 <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800cf28:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cf2c:	f04f 0101 	mov.w	r1, #1
 800cf30:	f7fd f984 	bl	800a23c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800cf34:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cf38:	f04f 0100 	mov.w	r1, #0
 800cf3c:	f7fd f97e 	bl	800a23c <RCC_APB2PeriphResetCmd>
 800cf40:	e062      	b.n	800d008 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800cf48:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d10c      	bne.n	800cf6a <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800cf50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cf54:	f04f 0101 	mov.w	r1, #1
 800cf58:	f7fd f970 	bl	800a23c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800cf5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cf60:	f04f 0100 	mov.w	r1, #0
 800cf64:	f7fd f96a 	bl	800a23c <RCC_APB2PeriphResetCmd>
 800cf68:	e04e      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800cf70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d10c      	bne.n	800cf92 <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800cf78:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cf7c:	f04f 0101 	mov.w	r1, #1
 800cf80:	f7fd f95c 	bl	800a23c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800cf84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cf88:	f04f 0100 	mov.w	r1, #0
 800cf8c:	f7fd f956 	bl	800a23c <RCC_APB2PeriphResetCmd>
 800cf90:	e03a      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d10c      	bne.n	800cfba <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800cfa0:	f04f 0040 	mov.w	r0, #64	; 0x40
 800cfa4:	f04f 0101 	mov.w	r1, #1
 800cfa8:	f7fd f91c 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800cfac:	f04f 0040 	mov.w	r0, #64	; 0x40
 800cfb0:	f04f 0100 	mov.w	r1, #0
 800cfb4:	f7fd f916 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800cfb8:	e026      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cfc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d10c      	bne.n	800cfe2 <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800cfc8:	f04f 0080 	mov.w	r0, #128	; 0x80
 800cfcc:	f04f 0101 	mov.w	r1, #1
 800cfd0:	f7fd f908 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800cfd4:	f04f 0080 	mov.w	r0, #128	; 0x80
 800cfd8:	f04f 0100 	mov.w	r1, #0
 800cfdc:	f7fd f902 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800cfe0:	e012      	b.n	800d008 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfe8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d10b      	bne.n	800d008 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800cff0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cff4:	f04f 0101 	mov.w	r1, #1
 800cff8:	f7fd f8f4 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800cffc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d000:	f04f 0100 	mov.w	r1, #0
 800d004:	f7fd f8ee 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800d008:	f107 0708 	add.w	r7, r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	f04f 0300 	mov.w	r3, #0
 800d02c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d030:	429a      	cmp	r2, r3
 800d032:	d01f      	beq.n	800d074 <TIM_TimeBaseInit+0x64>
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d03a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d03e:	429a      	cmp	r2, r3
 800d040:	d018      	beq.n	800d074 <TIM_TimeBaseInit+0x64>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d048:	d014      	beq.n	800d074 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d050:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d054:	429a      	cmp	r2, r3
 800d056:	d00d      	beq.n	800d074 <TIM_TimeBaseInit+0x64>
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d05e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d062:	429a      	cmp	r2, r3
 800d064:	d006      	beq.n	800d074 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d06c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d070:	429a      	cmp	r2, r3
 800d072:	d108      	bne.n	800d086 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800d074:	89fb      	ldrh	r3, [r7, #14]
 800d076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d07a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	885a      	ldrh	r2, [r3, #2]
 800d080:	89fb      	ldrh	r3, [r7, #14]
 800d082:	4313      	orrs	r3, r2
 800d084:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d08c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d090:	429a      	cmp	r2, r3
 800d092:	d00f      	beq.n	800d0b4 <TIM_TimeBaseInit+0xa4>
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d09a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d008      	beq.n	800d0b4 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800d0a2:	89fb      	ldrh	r3, [r7, #14]
 800d0a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0a8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	891a      	ldrh	r2, [r3, #8]
 800d0ae:	89fb      	ldrh	r3, [r7, #14]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	89fa      	ldrh	r2, [r7, #14]
 800d0b8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	685a      	ldr	r2, [r3, #4]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	881a      	ldrh	r2, [r3, #0]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	f04f 0300 	mov.w	r3, #0
 800d0d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d006      	beq.n	800d0e6 <TIM_TimeBaseInit+0xd6>
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d104      	bne.n	800d0f0 <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	7a9b      	ldrb	r3, [r3, #10]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f04f 0201 	mov.w	r2, #1
 800d0f6:	829a      	strh	r2, [r3, #20]
}
 800d0f8:	f107 0714 	add.w	r7, r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bc80      	pop	{r7}
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop

0800d104 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f04f 32ff 	mov.w	r2, #4294967295
 800d112:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f04f 0200 	mov.w	r2, #0
 800d11a:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f04f 0200 	mov.w	r2, #0
 800d122:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f04f 0200 	mov.w	r2, #0
 800d12a:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f04f 0200 	mov.w	r2, #0
 800d132:	729a      	strb	r2, [r3, #10]
}
 800d134:	f107 070c 	add.w	r7, r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	bc80      	pop	{r7}
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop

0800d140 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	4613      	mov	r3, r2
 800d14a:	460a      	mov	r2, r1
 800d14c:	807a      	strh	r2, [r7, #2]
 800d14e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	887a      	ldrh	r2, [r7, #2]
 800d154:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	883a      	ldrh	r2, [r7, #0]
 800d15a:	829a      	strh	r2, [r3, #20]
}
 800d15c:	f107 070c 	add.w	r7, r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	bc80      	pop	{r7}
 800d164:	4770      	bx	lr
 800d166:	bf00      	nop

0800d168 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800d174:	f04f 0300 	mov.w	r3, #0
 800d178:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d180:	89fb      	ldrh	r3, [r7, #14]
 800d182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d186:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800d188:	89fa      	ldrh	r2, [r7, #14]
 800d18a:	887b      	ldrh	r3, [r7, #2]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	89fa      	ldrh	r2, [r7, #14]
 800d194:	801a      	strh	r2, [r3, #0]
}
 800d196:	f107 0714 	add.w	r7, r7, #20
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bc80      	pop	{r7}
 800d19e:	4770      	bx	lr

0800d1a0 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d1b0:	f107 070c 	add.w	r7, r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bc80      	pop	{r7}
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop

0800d1bc <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d1cc:	f107 070c 	add.w	r7, r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bc80      	pop	{r7}
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop

0800d1d8 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f107 070c 	add.w	r7, r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bc80      	pop	{r7}
 800d1ee:	4770      	bx	lr

0800d1f0 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1fc:	b29b      	uxth	r3, r3
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	f107 070c 	add.w	r7, r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	bc80      	pop	{r7}
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop

0800d20c <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	460b      	mov	r3, r1
 800d216:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d218:	78fb      	ldrb	r3, [r7, #3]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d008      	beq.n	800d230 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	b29b      	uxth	r3, r3
 800d224:	f043 0302 	orr.w	r3, r3, #2
 800d228:	b29a      	uxth	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	801a      	strh	r2, [r3, #0]
 800d22e:	e007      	b.n	800d240 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	881b      	ldrh	r3, [r3, #0]
 800d234:	b29b      	uxth	r3, r3
 800d236:	f023 0302 	bic.w	r3, r3, #2
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	801a      	strh	r2, [r3, #0]
  }
}
 800d240:	f107 070c 	add.w	r7, r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	bc80      	pop	{r7}
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop

0800d24c <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	460b      	mov	r3, r1
 800d256:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800d258:	887b      	ldrh	r3, [r7, #2]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d008      	beq.n	800d270 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	881b      	ldrh	r3, [r3, #0]
 800d262:	b29b      	uxth	r3, r3
 800d264:	f043 0304 	orr.w	r3, r3, #4
 800d268:	b29a      	uxth	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	801a      	strh	r2, [r3, #0]
 800d26e:	e007      	b.n	800d280 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	b29b      	uxth	r3, r3
 800d276:	f023 0304 	bic.w	r3, r3, #4
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	801a      	strh	r2, [r3, #0]
  }
}
 800d280:	f107 070c 	add.w	r7, r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	bc80      	pop	{r7}
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop

0800d28c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d298:	78fb      	ldrb	r3, [r7, #3]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d008      	beq.n	800d2b0 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	881b      	ldrh	r3, [r3, #0]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	801a      	strh	r2, [r3, #0]
 800d2ae:	e007      	b.n	800d2c0 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	881b      	ldrh	r3, [r3, #0]
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	801a      	strh	r2, [r3, #0]
  }
}
 800d2c0:	f107 070c 	add.w	r7, r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bc80      	pop	{r7}
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop

0800d2cc <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	f023 0308 	bic.w	r3, r3, #8
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	881b      	ldrh	r3, [r3, #0]
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	887b      	ldrh	r3, [r7, #2]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	801a      	strh	r2, [r3, #0]
}
 800d2f8:	f107 070c 	add.w	r7, r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bc80      	pop	{r7}
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop

0800d304 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	460b      	mov	r3, r1
 800d30e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	881b      	ldrh	r3, [r3, #0]
 800d314:	b29b      	uxth	r3, r3
 800d316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	b29a      	uxth	r2, r3
 800d326:	887b      	ldrh	r3, [r7, #2]
 800d328:	4313      	orrs	r3, r2
 800d32a:	b29a      	uxth	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	801a      	strh	r2, [r3, #0]
}
 800d330:	f107 070c 	add.w	r7, r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	bc80      	pop	{r7}
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop

0800d33c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d348:	78fb      	ldrb	r3, [r7, #3]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d008      	beq.n	800d360 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	b29b      	uxth	r3, r3
 800d354:	f043 0301 	orr.w	r3, r3, #1
 800d358:	b29a      	uxth	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	801a      	strh	r2, [r3, #0]
 800d35e:	e007      	b.n	800d370 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	b29b      	uxth	r3, r3
 800d366:	f023 0301 	bic.w	r3, r3, #1
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	801a      	strh	r2, [r3, #0]
  }
}
 800d370:	f107 070c 	add.w	r7, r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	bc80      	pop	{r7}
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop

0800d37c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800d386:	f04f 0300 	mov.w	r3, #0
 800d38a:	817b      	strh	r3, [r7, #10]
 800d38c:	f04f 0300 	mov.w	r3, #0
 800d390:	81fb      	strh	r3, [r7, #14]
 800d392:	f04f 0300 	mov.w	r3, #0
 800d396:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8c1b      	ldrh	r3, [r3, #32]
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	f023 0301 	bic.w	r3, r3, #1
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	8c1b      	ldrh	r3, [r3, #32]
 800d3ac:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	889b      	ldrh	r3, [r3, #4]
 800d3b2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	8b1b      	ldrh	r3, [r3, #24]
 800d3b8:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800d3ba:	897b      	ldrh	r3, [r7, #10]
 800d3bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3c0:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800d3c2:	897b      	ldrh	r3, [r7, #10]
 800d3c4:	f023 0303 	bic.w	r3, r3, #3
 800d3c8:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	881a      	ldrh	r2, [r3, #0]
 800d3ce:	897b      	ldrh	r3, [r7, #10]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800d3d4:	89fb      	ldrh	r3, [r7, #14]
 800d3d6:	f023 0302 	bic.w	r3, r3, #2
 800d3da:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	899a      	ldrh	r2, [r3, #12]
 800d3e0:	89fb      	ldrh	r3, [r7, #14]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	885a      	ldrh	r2, [r3, #2]
 800d3ea:	89fb      	ldrh	r3, [r7, #14]
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	f04f 0300 	mov.w	r3, #0
 800d3f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d006      	beq.n	800d40c <TIM_OC1Init+0x90>
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d404:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d408:	429a      	cmp	r2, r3
 800d40a:	d123      	bne.n	800d454 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800d40c:	89fb      	ldrh	r3, [r7, #14]
 800d40e:	f023 0308 	bic.w	r3, r3, #8
 800d412:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	89da      	ldrh	r2, [r3, #14]
 800d418:	89fb      	ldrh	r3, [r7, #14]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800d41e:	89fb      	ldrh	r3, [r7, #14]
 800d420:	f023 0304 	bic.w	r3, r3, #4
 800d424:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	889a      	ldrh	r2, [r3, #4]
 800d42a:	89fb      	ldrh	r3, [r7, #14]
 800d42c:	4313      	orrs	r3, r2
 800d42e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800d430:	89bb      	ldrh	r3, [r7, #12]
 800d432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d436:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800d438:	89bb      	ldrh	r3, [r7, #12]
 800d43a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d43e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	8a1a      	ldrh	r2, [r3, #16]
 800d444:	89bb      	ldrh	r3, [r7, #12]
 800d446:	4313      	orrs	r3, r2
 800d448:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	8a5a      	ldrh	r2, [r3, #18]
 800d44e:	89bb      	ldrh	r3, [r7, #12]
 800d450:	4313      	orrs	r3, r2
 800d452:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	89ba      	ldrh	r2, [r7, #12]
 800d458:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	897a      	ldrh	r2, [r7, #10]
 800d45e:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	689a      	ldr	r2, [r3, #8]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	89fa      	ldrh	r2, [r7, #14]
 800d46c:	841a      	strh	r2, [r3, #32]
}
 800d46e:	f107 0714 	add.w	r7, r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	bc80      	pop	{r7}
 800d476:	4770      	bx	lr

0800d478 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800d482:	f04f 0300 	mov.w	r3, #0
 800d486:	817b      	strh	r3, [r7, #10]
 800d488:	f04f 0300 	mov.w	r3, #0
 800d48c:	81fb      	strh	r3, [r7, #14]
 800d48e:	f04f 0300 	mov.w	r3, #0
 800d492:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	8c1b      	ldrh	r3, [r3, #32]
 800d498:	b29b      	uxth	r3, r3
 800d49a:	f023 0310 	bic.w	r3, r3, #16
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	8c1b      	ldrh	r3, [r3, #32]
 800d4a8:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	889b      	ldrh	r3, [r3, #4]
 800d4ae:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	8b1b      	ldrh	r3, [r3, #24]
 800d4b4:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800d4b6:	897b      	ldrh	r3, [r7, #10]
 800d4b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4bc:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800d4be:	897b      	ldrh	r3, [r7, #10]
 800d4c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4c4:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	897b      	ldrh	r3, [r7, #10]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800d4d6:	89fb      	ldrh	r3, [r7, #14]
 800d4d8:	f023 0320 	bic.w	r3, r3, #32
 800d4dc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	899b      	ldrh	r3, [r3, #12]
 800d4e2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	89fb      	ldrh	r3, [r7, #14]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	885b      	ldrh	r3, [r3, #2]
 800d4f2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d4f6:	b29a      	uxth	r2, r3
 800d4f8:	89fb      	ldrh	r3, [r7, #14]
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	f04f 0300 	mov.w	r3, #0
 800d504:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d508:	429a      	cmp	r2, r3
 800d50a:	d006      	beq.n	800d51a <TIM_OC2Init+0xa2>
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d512:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d516:	429a      	cmp	r2, r3
 800d518:	d12f      	bne.n	800d57a <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800d51a:	89fb      	ldrh	r3, [r7, #14]
 800d51c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d520:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	89db      	ldrh	r3, [r3, #14]
 800d526:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	89fb      	ldrh	r3, [r7, #14]
 800d52e:	4313      	orrs	r3, r2
 800d530:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800d532:	89fb      	ldrh	r3, [r7, #14]
 800d534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d538:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	889b      	ldrh	r3, [r3, #4]
 800d53e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d542:	b29a      	uxth	r2, r3
 800d544:	89fb      	ldrh	r3, [r7, #14]
 800d546:	4313      	orrs	r3, r2
 800d548:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800d54a:	89bb      	ldrh	r3, [r7, #12]
 800d54c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d550:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800d552:	89bb      	ldrh	r3, [r7, #12]
 800d554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d558:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	8a1b      	ldrh	r3, [r3, #16]
 800d55e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d562:	b29a      	uxth	r2, r3
 800d564:	89bb      	ldrh	r3, [r7, #12]
 800d566:	4313      	orrs	r3, r2
 800d568:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	8a5b      	ldrh	r3, [r3, #18]
 800d56e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d572:	b29a      	uxth	r2, r3
 800d574:	89bb      	ldrh	r3, [r7, #12]
 800d576:	4313      	orrs	r3, r2
 800d578:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	89ba      	ldrh	r2, [r7, #12]
 800d57e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	897a      	ldrh	r2, [r7, #10]
 800d584:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	689a      	ldr	r2, [r3, #8]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	89fa      	ldrh	r2, [r7, #14]
 800d592:	841a      	strh	r2, [r3, #32]
}
 800d594:	f107 0714 	add.w	r7, r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	bc80      	pop	{r7}
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop

0800d5a0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800d5aa:	f04f 0300 	mov.w	r3, #0
 800d5ae:	817b      	strh	r3, [r7, #10]
 800d5b0:	f04f 0300 	mov.w	r3, #0
 800d5b4:	81fb      	strh	r3, [r7, #14]
 800d5b6:	f04f 0300 	mov.w	r3, #0
 800d5ba:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	8c1b      	ldrh	r3, [r3, #32]
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	8c1b      	ldrh	r3, [r3, #32]
 800d5d0:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	889b      	ldrh	r3, [r3, #4]
 800d5d6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	8b9b      	ldrh	r3, [r3, #28]
 800d5dc:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800d5de:	897b      	ldrh	r3, [r7, #10]
 800d5e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5e4:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800d5e6:	897b      	ldrh	r3, [r7, #10]
 800d5e8:	f023 0303 	bic.w	r3, r3, #3
 800d5ec:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	881a      	ldrh	r2, [r3, #0]
 800d5f2:	897b      	ldrh	r3, [r7, #10]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800d5f8:	89fb      	ldrh	r3, [r7, #14]
 800d5fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d5fe:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	899b      	ldrh	r3, [r3, #12]
 800d604:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d608:	b29a      	uxth	r2, r3
 800d60a:	89fb      	ldrh	r3, [r7, #14]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	885b      	ldrh	r3, [r3, #2]
 800d614:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d618:	b29a      	uxth	r2, r3
 800d61a:	89fb      	ldrh	r3, [r7, #14]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	f04f 0300 	mov.w	r3, #0
 800d626:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d006      	beq.n	800d63c <TIM_OC3Init+0x9c>
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d634:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d638:	429a      	cmp	r2, r3
 800d63a:	d12f      	bne.n	800d69c <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800d63c:	89fb      	ldrh	r3, [r7, #14]
 800d63e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d642:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	89db      	ldrh	r3, [r3, #14]
 800d648:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	89fb      	ldrh	r3, [r7, #14]
 800d650:	4313      	orrs	r3, r2
 800d652:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800d654:	89fb      	ldrh	r3, [r7, #14]
 800d656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d65a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	889b      	ldrh	r3, [r3, #4]
 800d660:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d664:	b29a      	uxth	r2, r3
 800d666:	89fb      	ldrh	r3, [r7, #14]
 800d668:	4313      	orrs	r3, r2
 800d66a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800d66c:	89bb      	ldrh	r3, [r7, #12]
 800d66e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d672:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800d674:	89bb      	ldrh	r3, [r7, #12]
 800d676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d67a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	8a1b      	ldrh	r3, [r3, #16]
 800d680:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d684:	b29a      	uxth	r2, r3
 800d686:	89bb      	ldrh	r3, [r7, #12]
 800d688:	4313      	orrs	r3, r2
 800d68a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	8a5b      	ldrh	r3, [r3, #18]
 800d690:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d694:	b29a      	uxth	r2, r3
 800d696:	89bb      	ldrh	r3, [r7, #12]
 800d698:	4313      	orrs	r3, r2
 800d69a:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	89ba      	ldrh	r2, [r7, #12]
 800d6a0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	897a      	ldrh	r2, [r7, #10]
 800d6a6:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	689a      	ldr	r2, [r3, #8]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	89fa      	ldrh	r2, [r7, #14]
 800d6b4:	841a      	strh	r2, [r3, #32]
}
 800d6b6:	f107 0714 	add.w	r7, r7, #20
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bc80      	pop	{r7}
 800d6be:	4770      	bx	lr

0800d6c0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800d6ca:	f04f 0300 	mov.w	r3, #0
 800d6ce:	81bb      	strh	r3, [r7, #12]
 800d6d0:	f04f 0300 	mov.w	r3, #0
 800d6d4:	817b      	strh	r3, [r7, #10]
 800d6d6:	f04f 0300 	mov.w	r3, #0
 800d6da:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8c1b      	ldrh	r3, [r3, #32]
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	8c1b      	ldrh	r3, [r3, #32]
 800d6f0:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	889b      	ldrh	r3, [r3, #4]
 800d6f6:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	8b9b      	ldrh	r3, [r3, #28]
 800d6fc:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800d6fe:	89bb      	ldrh	r3, [r7, #12]
 800d700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d704:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800d706:	89bb      	ldrh	r3, [r7, #12]
 800d708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d70c:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	881b      	ldrh	r3, [r3, #0]
 800d712:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d716:	b29a      	uxth	r2, r3
 800d718:	89bb      	ldrh	r3, [r7, #12]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800d71e:	897b      	ldrh	r3, [r7, #10]
 800d720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d724:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	899b      	ldrh	r3, [r3, #12]
 800d72a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d72e:	b29a      	uxth	r2, r3
 800d730:	897b      	ldrh	r3, [r7, #10]
 800d732:	4313      	orrs	r3, r2
 800d734:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	885b      	ldrh	r3, [r3, #2]
 800d73a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d73e:	b29a      	uxth	r2, r3
 800d740:	897b      	ldrh	r3, [r7, #10]
 800d742:	4313      	orrs	r3, r2
 800d744:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	f04f 0300 	mov.w	r3, #0
 800d74c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d750:	429a      	cmp	r2, r3
 800d752:	d006      	beq.n	800d762 <TIM_OC4Init+0xa2>
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d75a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d75e:	429a      	cmp	r2, r3
 800d760:	d10b      	bne.n	800d77a <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800d762:	89fb      	ldrh	r3, [r7, #14]
 800d764:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d768:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	8a1b      	ldrh	r3, [r3, #16]
 800d76e:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800d772:	b29a      	uxth	r2, r3
 800d774:	89fb      	ldrh	r3, [r7, #14]
 800d776:	4313      	orrs	r3, r2
 800d778:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	89fa      	ldrh	r2, [r7, #14]
 800d77e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	89ba      	ldrh	r2, [r7, #12]
 800d784:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	689a      	ldr	r2, [r3, #8]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	897a      	ldrh	r2, [r7, #10]
 800d792:	841a      	strh	r2, [r3, #32]
}
 800d794:	f107 0714 	add.w	r7, r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	bc80      	pop	{r7}
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop

0800d7a0 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f04f 0200 	mov.w	r2, #0
 800d7ae:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f04f 0200 	mov.w	r2, #0
 800d7b6:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f04f 0200 	mov.w	r2, #0
 800d7be:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f04f 0200 	mov.w	r2, #0
 800d7c6:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f04f 0200 	mov.w	r2, #0
 800d7ce:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f04f 0200 	mov.w	r2, #0
 800d7d6:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f04f 0200 	mov.w	r2, #0
 800d7de:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f04f 0200 	mov.w	r2, #0
 800d7e6:	825a      	strh	r2, [r3, #18]
}
 800d7e8:	f107 070c 	add.w	r7, r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bc80      	pop	{r7}
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop

0800d7f4 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	460a      	mov	r2, r1
 800d800:	807a      	strh	r2, [r7, #2]
 800d802:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800d804:	f04f 0300 	mov.w	r3, #0
 800d808:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800d80a:	f04f 0300 	mov.w	r3, #0
 800d80e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f103 0318 	add.w	r3, r3, #24
 800d81a:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800d81c:	887b      	ldrh	r3, [r7, #2]
 800d81e:	f04f 0201 	mov.w	r2, #1
 800d822:	fa02 f303 	lsl.w	r3, r2, r3
 800d826:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	8c1b      	ldrh	r3, [r3, #32]
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	897b      	ldrh	r3, [r7, #10]
 800d830:	ea6f 0303 	mvn.w	r3, r3
 800d834:	b29b      	uxth	r3, r3
 800d836:	4013      	ands	r3, r2
 800d838:	b29a      	uxth	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800d83e:	887b      	ldrh	r3, [r7, #2]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d002      	beq.n	800d84a <TIM_SelectOCxM+0x56>
 800d844:	887b      	ldrh	r3, [r7, #2]
 800d846:	2b08      	cmp	r3, #8
 800d848:	d114      	bne.n	800d874 <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 800d84a:	887b      	ldrh	r3, [r7, #2]
 800d84c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800d850:	b29b      	uxth	r3, r3
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	18d3      	adds	r3, r2, r3
 800d856:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6819      	ldr	r1, [r3, #0]
 800d85e:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800d862:	400b      	ands	r3, r1
 800d864:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	6811      	ldr	r1, [r2, #0]
 800d86c:	883a      	ldrh	r2, [r7, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	e019      	b.n	800d8a8 <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800d874:	887b      	ldrh	r3, [r7, #2]
 800d876:	f1a3 0304 	sub.w	r3, r3, #4
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800d880:	b29b      	uxth	r3, r3
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	18d3      	adds	r3, r2, r3
 800d886:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6819      	ldr	r1, [r3, #0]
 800d88e:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800d892:	400b      	ands	r3, r1
 800d894:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	6811      	ldr	r1, [r2, #0]
 800d89c:	883a      	ldrh	r2, [r7, #0]
 800d89e:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d8a2:	b292      	uxth	r2, r2
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	601a      	str	r2, [r3, #0]
  }
}
 800d8a8:	f107 0714 	add.w	r7, r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bc80      	pop	{r7}
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop

0800d8b4 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 800d8c4:	f107 070c 	add.w	r7, r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bc80      	pop	{r7}
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop

0800d8d0 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d8e0:	f107 070c 	add.w	r7, r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bc80      	pop	{r7}
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop

0800d8ec <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	683a      	ldr	r2, [r7, #0]
 800d8fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d8fc:	f107 070c 	add.w	r7, r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	bc80      	pop	{r7}
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop

0800d908 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	683a      	ldr	r2, [r7, #0]
 800d916:	641a      	str	r2, [r3, #64]	; 0x40
}
 800d918:	f107 070c 	add.w	r7, r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bc80      	pop	{r7}
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop

0800d924 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	460b      	mov	r3, r1
 800d92e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d930:	f04f 0300 	mov.w	r3, #0
 800d934:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	8b1b      	ldrh	r3, [r3, #24]
 800d93a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800d93c:	89fb      	ldrh	r3, [r7, #14]
 800d93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d942:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800d944:	89fa      	ldrh	r2, [r7, #14]
 800d946:	887b      	ldrh	r3, [r7, #2]
 800d948:	4313      	orrs	r3, r2
 800d94a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	89fa      	ldrh	r2, [r7, #14]
 800d950:	831a      	strh	r2, [r3, #24]
}
 800d952:	f107 0714 	add.w	r7, r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	bc80      	pop	{r7}
 800d95a:	4770      	bx	lr

0800d95c <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	460b      	mov	r3, r1
 800d966:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d968:	f04f 0300 	mov.w	r3, #0
 800d96c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	8b1b      	ldrh	r3, [r3, #24]
 800d972:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800d974:	89fb      	ldrh	r3, [r7, #14]
 800d976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d97a:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800d97c:	887b      	ldrh	r3, [r7, #2]
 800d97e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d982:	b29a      	uxth	r2, r3
 800d984:	89fb      	ldrh	r3, [r7, #14]
 800d986:	4313      	orrs	r3, r2
 800d988:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	89fa      	ldrh	r2, [r7, #14]
 800d98e:	831a      	strh	r2, [r3, #24]
}
 800d990:	f107 0714 	add.w	r7, r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	bc80      	pop	{r7}
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop

0800d99c <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d9a8:	f04f 0300 	mov.w	r3, #0
 800d9ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	8b9b      	ldrh	r3, [r3, #28]
 800d9b2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800d9b4:	89fb      	ldrh	r3, [r7, #14]
 800d9b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9ba:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800d9bc:	89fa      	ldrh	r2, [r7, #14]
 800d9be:	887b      	ldrh	r3, [r7, #2]
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	89fa      	ldrh	r2, [r7, #14]
 800d9c8:	839a      	strh	r2, [r3, #28]
}
 800d9ca:	f107 0714 	add.w	r7, r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bc80      	pop	{r7}
 800d9d2:	4770      	bx	lr

0800d9d4 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d9e0:	f04f 0300 	mov.w	r3, #0
 800d9e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	8b9b      	ldrh	r3, [r3, #28]
 800d9ea:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800d9ec:	89fb      	ldrh	r3, [r7, #14]
 800d9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9f2:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800d9f4:	887b      	ldrh	r3, [r7, #2]
 800d9f6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	89fb      	ldrh	r3, [r7, #14]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	89fa      	ldrh	r2, [r7, #14]
 800da06:	839a      	strh	r2, [r3, #28]
}
 800da08:	f107 0714 	add.w	r7, r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bc80      	pop	{r7}
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop

0800da14 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	460b      	mov	r3, r1
 800da1e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800da20:	f04f 0300 	mov.w	r3, #0
 800da24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8b1b      	ldrh	r3, [r3, #24]
 800da2a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800da2c:	89fb      	ldrh	r3, [r7, #14]
 800da2e:	f023 0308 	bic.w	r3, r3, #8
 800da32:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800da34:	89fa      	ldrh	r2, [r7, #14]
 800da36:	887b      	ldrh	r3, [r7, #2]
 800da38:	4313      	orrs	r3, r2
 800da3a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	89fa      	ldrh	r2, [r7, #14]
 800da40:	831a      	strh	r2, [r3, #24]
}
 800da42:	f107 0714 	add.w	r7, r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	bc80      	pop	{r7}
 800da4a:	4770      	bx	lr

0800da4c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	460b      	mov	r3, r1
 800da56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800da58:	f04f 0300 	mov.w	r3, #0
 800da5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	8b1b      	ldrh	r3, [r3, #24]
 800da62:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800da64:	89fb      	ldrh	r3, [r7, #14]
 800da66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da6a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800da6c:	887b      	ldrh	r3, [r7, #2]
 800da6e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800da72:	b29a      	uxth	r2, r3
 800da74:	89fb      	ldrh	r3, [r7, #14]
 800da76:	4313      	orrs	r3, r2
 800da78:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	89fa      	ldrh	r2, [r7, #14]
 800da7e:	831a      	strh	r2, [r3, #24]
}
 800da80:	f107 0714 	add.w	r7, r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	bc80      	pop	{r7}
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop

0800da8c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b085      	sub	sp, #20
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800da98:	f04f 0300 	mov.w	r3, #0
 800da9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	8b9b      	ldrh	r3, [r3, #28]
 800daa2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800daa4:	89fb      	ldrh	r3, [r7, #14]
 800daa6:	f023 0308 	bic.w	r3, r3, #8
 800daaa:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800daac:	89fa      	ldrh	r2, [r7, #14]
 800daae:	887b      	ldrh	r3, [r7, #2]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	89fa      	ldrh	r2, [r7, #14]
 800dab8:	839a      	strh	r2, [r3, #28]
}
 800daba:	f107 0714 	add.w	r7, r7, #20
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bc80      	pop	{r7}
 800dac2:	4770      	bx	lr

0800dac4 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800dad0:	f04f 0300 	mov.w	r3, #0
 800dad4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	8b9b      	ldrh	r3, [r3, #28]
 800dada:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800dadc:	89fb      	ldrh	r3, [r7, #14]
 800dade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dae2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800dae4:	887b      	ldrh	r3, [r7, #2]
 800dae6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800daea:	b29a      	uxth	r2, r3
 800daec:	89fb      	ldrh	r3, [r7, #14]
 800daee:	4313      	orrs	r3, r2
 800daf0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	89fa      	ldrh	r2, [r7, #14]
 800daf6:	839a      	strh	r2, [r3, #28]
}
 800daf8:	f107 0714 	add.w	r7, r7, #20
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bc80      	pop	{r7}
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop

0800db04 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800db10:	f04f 0300 	mov.w	r3, #0
 800db14:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	8b1b      	ldrh	r3, [r3, #24]
 800db1a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800db1c:	89fb      	ldrh	r3, [r7, #14]
 800db1e:	f023 0304 	bic.w	r3, r3, #4
 800db22:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800db24:	89fa      	ldrh	r2, [r7, #14]
 800db26:	887b      	ldrh	r3, [r7, #2]
 800db28:	4313      	orrs	r3, r2
 800db2a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	89fa      	ldrh	r2, [r7, #14]
 800db30:	831a      	strh	r2, [r3, #24]
}
 800db32:	f107 0714 	add.w	r7, r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	bc80      	pop	{r7}
 800db3a:	4770      	bx	lr

0800db3c <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	460b      	mov	r3, r1
 800db46:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800db48:	f04f 0300 	mov.w	r3, #0
 800db4c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	8b1b      	ldrh	r3, [r3, #24]
 800db52:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800db54:	89fb      	ldrh	r3, [r7, #14]
 800db56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db5a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800db5c:	887b      	ldrh	r3, [r7, #2]
 800db5e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800db62:	b29a      	uxth	r2, r3
 800db64:	89fb      	ldrh	r3, [r7, #14]
 800db66:	4313      	orrs	r3, r2
 800db68:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	89fa      	ldrh	r2, [r7, #14]
 800db6e:	831a      	strh	r2, [r3, #24]
}
 800db70:	f107 0714 	add.w	r7, r7, #20
 800db74:	46bd      	mov	sp, r7
 800db76:	bc80      	pop	{r7}
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop

0800db7c <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	460b      	mov	r3, r1
 800db86:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800db88:	f04f 0300 	mov.w	r3, #0
 800db8c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	8b9b      	ldrh	r3, [r3, #28]
 800db92:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800db94:	89fb      	ldrh	r3, [r7, #14]
 800db96:	f023 0304 	bic.w	r3, r3, #4
 800db9a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800db9c:	89fa      	ldrh	r2, [r7, #14]
 800db9e:	887b      	ldrh	r3, [r7, #2]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	89fa      	ldrh	r2, [r7, #14]
 800dba8:	839a      	strh	r2, [r3, #28]
}
 800dbaa:	f107 0714 	add.w	r7, r7, #20
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bc80      	pop	{r7}
 800dbb2:	4770      	bx	lr

0800dbb4 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800dbc0:	f04f 0300 	mov.w	r3, #0
 800dbc4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	8b9b      	ldrh	r3, [r3, #28]
 800dbca:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800dbcc:	89fb      	ldrh	r3, [r7, #14]
 800dbce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbd2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800dbd4:	887b      	ldrh	r3, [r7, #2]
 800dbd6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800dbda:	b29a      	uxth	r2, r3
 800dbdc:	89fb      	ldrh	r3, [r7, #14]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	89fa      	ldrh	r2, [r7, #14]
 800dbe6:	839a      	strh	r2, [r3, #28]
}
 800dbe8:	f107 0714 	add.w	r7, r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bc80      	pop	{r7}
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop

0800dbf4 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800dc00:	f04f 0300 	mov.w	r3, #0
 800dc04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	8b1b      	ldrh	r3, [r3, #24]
 800dc0a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800dc0c:	89fb      	ldrh	r3, [r7, #14]
 800dc0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc12:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800dc14:	89fa      	ldrh	r2, [r7, #14]
 800dc16:	887b      	ldrh	r3, [r7, #2]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	89fa      	ldrh	r2, [r7, #14]
 800dc20:	831a      	strh	r2, [r3, #24]
}
 800dc22:	f107 0714 	add.w	r7, r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bc80      	pop	{r7}
 800dc2a:	4770      	bx	lr

0800dc2c <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800dc38:	f04f 0300 	mov.w	r3, #0
 800dc3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	8b1b      	ldrh	r3, [r3, #24]
 800dc42:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800dc44:	89fb      	ldrh	r3, [r7, #14]
 800dc46:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800dc4a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800dc4e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800dc50:	887b      	ldrh	r3, [r7, #2]
 800dc52:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	89fb      	ldrh	r3, [r7, #14]
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	89fa      	ldrh	r2, [r7, #14]
 800dc62:	831a      	strh	r2, [r3, #24]
}
 800dc64:	f107 0714 	add.w	r7, r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bc80      	pop	{r7}
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop

0800dc70 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800dc7c:	f04f 0300 	mov.w	r3, #0
 800dc80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	8b9b      	ldrh	r3, [r3, #28]
 800dc86:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800dc88:	89fb      	ldrh	r3, [r7, #14]
 800dc8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc8e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800dc90:	89fa      	ldrh	r2, [r7, #14]
 800dc92:	887b      	ldrh	r3, [r7, #2]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	89fa      	ldrh	r2, [r7, #14]
 800dc9c:	839a      	strh	r2, [r3, #28]
}
 800dc9e:	f107 0714 	add.w	r7, r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bc80      	pop	{r7}
 800dca6:	4770      	bx	lr

0800dca8 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800dcb4:	f04f 0300 	mov.w	r3, #0
 800dcb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	8b9b      	ldrh	r3, [r3, #28]
 800dcbe:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800dcc0:	89fb      	ldrh	r3, [r7, #14]
 800dcc2:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800dcc6:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800dcca:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800dccc:	887b      	ldrh	r3, [r7, #2]
 800dcce:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	89fb      	ldrh	r3, [r7, #14]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	89fa      	ldrh	r2, [r7, #14]
 800dcde:	839a      	strh	r2, [r3, #28]
}
 800dce0:	f107 0714 	add.w	r7, r7, #20
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bc80      	pop	{r7}
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop

0800dcec <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dcf8:	f04f 0300 	mov.w	r3, #0
 800dcfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	8c1b      	ldrh	r3, [r3, #32]
 800dd02:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800dd04:	89fb      	ldrh	r3, [r7, #14]
 800dd06:	f023 0302 	bic.w	r3, r3, #2
 800dd0a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800dd0c:	89fa      	ldrh	r2, [r7, #14]
 800dd0e:	887b      	ldrh	r3, [r7, #2]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	89fa      	ldrh	r2, [r7, #14]
 800dd18:	841a      	strh	r2, [r3, #32]
}
 800dd1a:	f107 0714 	add.w	r7, r7, #20
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bc80      	pop	{r7}
 800dd22:	4770      	bx	lr

0800dd24 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dd30:	f04f 0300 	mov.w	r3, #0
 800dd34:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	8c1b      	ldrh	r3, [r3, #32]
 800dd3a:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800dd3c:	89fb      	ldrh	r3, [r7, #14]
 800dd3e:	f023 0308 	bic.w	r3, r3, #8
 800dd42:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800dd44:	89fa      	ldrh	r2, [r7, #14]
 800dd46:	887b      	ldrh	r3, [r7, #2]
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	89fa      	ldrh	r2, [r7, #14]
 800dd50:	841a      	strh	r2, [r3, #32]
}
 800dd52:	f107 0714 	add.w	r7, r7, #20
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bc80      	pop	{r7}
 800dd5a:	4770      	bx	lr

0800dd5c <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dd68:	f04f 0300 	mov.w	r3, #0
 800dd6c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	8c1b      	ldrh	r3, [r3, #32]
 800dd72:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800dd74:	89fb      	ldrh	r3, [r7, #14]
 800dd76:	f023 0320 	bic.w	r3, r3, #32
 800dd7a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800dd7c:	887b      	ldrh	r3, [r7, #2]
 800dd7e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	89fb      	ldrh	r3, [r7, #14]
 800dd86:	4313      	orrs	r3, r2
 800dd88:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	89fa      	ldrh	r2, [r7, #14]
 800dd8e:	841a      	strh	r2, [r3, #32]
}
 800dd90:	f107 0714 	add.w	r7, r7, #20
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bc80      	pop	{r7}
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop

0800dd9c <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	460b      	mov	r3, r1
 800dda6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dda8:	f04f 0300 	mov.w	r3, #0
 800ddac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8c1b      	ldrh	r3, [r3, #32]
 800ddb2:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800ddb4:	89fb      	ldrh	r3, [r7, #14]
 800ddb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddba:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800ddbc:	887b      	ldrh	r3, [r7, #2]
 800ddbe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	89fb      	ldrh	r3, [r7, #14]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	89fa      	ldrh	r2, [r7, #14]
 800ddce:	841a      	strh	r2, [r3, #32]
}
 800ddd0:	f107 0714 	add.w	r7, r7, #20
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bc80      	pop	{r7}
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop

0800dddc <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	460b      	mov	r3, r1
 800dde6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dde8:	f04f 0300 	mov.w	r3, #0
 800ddec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	8c1b      	ldrh	r3, [r3, #32]
 800ddf2:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800ddf4:	89fb      	ldrh	r3, [r7, #14]
 800ddf6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddfa:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800ddfc:	887b      	ldrh	r3, [r7, #2]
 800ddfe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800de02:	b29a      	uxth	r2, r3
 800de04:	89fb      	ldrh	r3, [r7, #14]
 800de06:	4313      	orrs	r3, r2
 800de08:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	89fa      	ldrh	r2, [r7, #14]
 800de0e:	841a      	strh	r2, [r3, #32]
}
 800de10:	f107 0714 	add.w	r7, r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	bc80      	pop	{r7}
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop

0800de1c <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800de28:	f04f 0300 	mov.w	r3, #0
 800de2c:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	8c1b      	ldrh	r3, [r3, #32]
 800de32:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800de34:	89fb      	ldrh	r3, [r7, #14]
 800de36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de3a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800de3c:	887b      	ldrh	r3, [r7, #2]
 800de3e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800de42:	b29a      	uxth	r2, r3
 800de44:	89fb      	ldrh	r3, [r7, #14]
 800de46:	4313      	orrs	r3, r2
 800de48:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	89fa      	ldrh	r2, [r7, #14]
 800de4e:	841a      	strh	r2, [r3, #32]
}
 800de50:	f107 0714 	add.w	r7, r7, #20
 800de54:	46bd      	mov	sp, r7
 800de56:	bc80      	pop	{r7}
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop

0800de5c <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800de68:	f04f 0300 	mov.w	r3, #0
 800de6c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	8c1b      	ldrh	r3, [r3, #32]
 800de72:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800de74:	89fb      	ldrh	r3, [r7, #14]
 800de76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de7a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800de7c:	887b      	ldrh	r3, [r7, #2]
 800de7e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800de82:	b29a      	uxth	r2, r3
 800de84:	89fb      	ldrh	r3, [r7, #14]
 800de86:	4313      	orrs	r3, r2
 800de88:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	89fa      	ldrh	r2, [r7, #14]
 800de8e:	841a      	strh	r2, [r3, #32]
}
 800de90:	f107 0714 	add.w	r7, r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	bc80      	pop	{r7}
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop

0800de9c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	4613      	mov	r3, r2
 800dea6:	460a      	mov	r2, r1
 800dea8:	807a      	strh	r2, [r7, #2]
 800deaa:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800deac:	f04f 0300 	mov.w	r3, #0
 800deb0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800deb2:	887b      	ldrh	r3, [r7, #2]
 800deb4:	f04f 0201 	mov.w	r2, #1
 800deb8:	fa02 f303 	lsl.w	r3, r2, r3
 800debc:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8c1b      	ldrh	r3, [r3, #32]
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	89fb      	ldrh	r3, [r7, #14]
 800dec6:	ea6f 0303 	mvn.w	r3, r3
 800deca:	b29b      	uxth	r3, r3
 800decc:	4013      	ands	r3, r2
 800dece:	b29a      	uxth	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	8c1b      	ldrh	r3, [r3, #32]
 800ded8:	b29a      	uxth	r2, r3
 800deda:	8839      	ldrh	r1, [r7, #0]
 800dedc:	887b      	ldrh	r3, [r7, #2]
 800dede:	fa01 f303 	lsl.w	r3, r1, r3
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	4313      	orrs	r3, r2
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	841a      	strh	r2, [r3, #32]
}
 800deec:	f107 0714 	add.w	r7, r7, #20
 800def0:	46bd      	mov	sp, r7
 800def2:	bc80      	pop	{r7}
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop

0800def8 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	4613      	mov	r3, r2
 800df02:	460a      	mov	r2, r1
 800df04:	807a      	strh	r2, [r7, #2]
 800df06:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800df08:	f04f 0300 	mov.w	r3, #0
 800df0c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800df0e:	887b      	ldrh	r3, [r7, #2]
 800df10:	f04f 0204 	mov.w	r2, #4
 800df14:	fa02 f303 	lsl.w	r3, r2, r3
 800df18:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	8c1b      	ldrh	r3, [r3, #32]
 800df1e:	b29a      	uxth	r2, r3
 800df20:	89fb      	ldrh	r3, [r7, #14]
 800df22:	ea6f 0303 	mvn.w	r3, r3
 800df26:	b29b      	uxth	r3, r3
 800df28:	4013      	ands	r3, r2
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	8c1b      	ldrh	r3, [r3, #32]
 800df34:	b29a      	uxth	r2, r3
 800df36:	8839      	ldrh	r1, [r7, #0]
 800df38:	887b      	ldrh	r3, [r7, #2]
 800df3a:	fa01 f303 	lsl.w	r3, r1, r3
 800df3e:	b29b      	uxth	r3, r3
 800df40:	4313      	orrs	r3, r2
 800df42:	b29a      	uxth	r2, r3
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	841a      	strh	r2, [r3, #32]
}
 800df48:	f107 0714 	add.w	r7, r7, #20
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bc80      	pop	{r7}
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop

0800df54 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	881b      	ldrh	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10f      	bne.n	800df86 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800df6a:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800df6c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800df6e:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800df70:	891b      	ldrh	r3, [r3, #8]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 fcc4 	bl	800e900 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	88db      	ldrh	r3, [r3, #6]
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	4619      	mov	r1, r3
 800df80:	f000 f8ec 	bl	800e15c <TIM_SetIC1Prescaler>
 800df84:	e036      	b.n	800dff4 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	2b04      	cmp	r3, #4
 800df8c:	d10f      	bne.n	800dfae <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800df92:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800df94:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800df96:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800df98:	891b      	ldrh	r3, [r3, #8]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fcf0 	bl	800e980 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	88db      	ldrh	r3, [r3, #6]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	f000 f8f4 	bl	800e194 <TIM_SetIC2Prescaler>
 800dfac:	e022      	b.n	800dff4 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	881b      	ldrh	r3, [r3, #0]
 800dfb2:	2b08      	cmp	r3, #8
 800dfb4:	d10f      	bne.n	800dfd6 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800dfba:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800dfbc:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800dfbe:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800dfc0:	891b      	ldrh	r3, [r3, #8]
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fd2a 	bl	800ea1c <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	88db      	ldrh	r3, [r3, #6]
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	4619      	mov	r1, r3
 800dfd0:	f000 f8fe 	bl	800e1d0 <TIM_SetIC3Prescaler>
 800dfd4:	e00e      	b.n	800dff4 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800dfda:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800dfdc:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800dfde:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800dfe0:	891b      	ldrh	r3, [r3, #8]
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fd60 	bl	800eaa8 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	88db      	ldrh	r3, [r3, #6]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	4619      	mov	r1, r3
 800dff0:	f000 f90a 	bl	800e208 <TIM_SetIC4Prescaler>
  }
}
 800dff4:	f107 0708 	add.w	r7, r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f04f 0200 	mov.w	r2, #0
 800e00a:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f04f 0200 	mov.w	r2, #0
 800e012:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f04f 0201 	mov.w	r2, #1
 800e01a:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f04f 0200 	mov.w	r2, #0
 800e022:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f04f 0200 	mov.w	r2, #0
 800e02a:	811a      	strh	r2, [r3, #8]
}
 800e02c:	f107 070c 	add.w	r7, r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	bc80      	pop	{r7}
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop

0800e038 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800e042:	f04f 0300 	mov.w	r3, #0
 800e046:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800e048:	f04f 0301 	mov.w	r3, #1
 800e04c:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	885b      	ldrh	r3, [r3, #2]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d103      	bne.n	800e05e <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800e056:	f04f 0302 	mov.w	r3, #2
 800e05a:	81fb      	strh	r3, [r7, #14]
 800e05c:	e002      	b.n	800e064 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800e05e:	f04f 0300 	mov.w	r3, #0
 800e062:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	889b      	ldrh	r3, [r3, #4]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d103      	bne.n	800e074 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800e06c:	f04f 0302 	mov.w	r3, #2
 800e070:	81bb      	strh	r3, [r7, #12]
 800e072:	e002      	b.n	800e07a <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800e074:	f04f 0301 	mov.w	r3, #1
 800e078:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d11c      	bne.n	800e0bc <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	8859      	ldrh	r1, [r3, #2]
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800e08a:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800e08c:	891b      	ldrh	r3, [r3, #8]
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 fc36 	bl	800e900 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	88db      	ldrh	r3, [r3, #6]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	4619      	mov	r1, r3
 800e09c:	f000 f85e 	bl	800e15c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	891b      	ldrh	r3, [r3, #8]
 800e0a4:	89f9      	ldrh	r1, [r7, #14]
 800e0a6:	89ba      	ldrh	r2, [r7, #12]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fc69 	bl	800e980 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	88db      	ldrh	r3, [r3, #6]
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	f000 f86d 	bl	800e194 <TIM_SetIC2Prescaler>
 800e0ba:	e01b      	b.n	800e0f4 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	8859      	ldrh	r1, [r3, #2]
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800e0c4:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800e0c6:	891b      	ldrh	r3, [r3, #8]
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 fc59 	bl	800e980 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	88db      	ldrh	r3, [r3, #6]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	f000 f85d 	bl	800e194 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	891b      	ldrh	r3, [r3, #8]
 800e0de:	89f9      	ldrh	r1, [r7, #14]
 800e0e0:	89ba      	ldrh	r2, [r7, #12]
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 fc0c 	bl	800e900 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	88db      	ldrh	r3, [r3, #6]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	f000 f834 	bl	800e15c <TIM_SetIC1Prescaler>
  }
}
 800e0f4:	f107 0710 	add.w	r7, r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800e108:	4618      	mov	r0, r3
 800e10a:	f107 070c 	add.w	r7, r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	bc80      	pop	{r7}
 800e112:	4770      	bx	lr

0800e114 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800e120:	4618      	mov	r0, r3
 800e122:	f107 070c 	add.w	r7, r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	bc80      	pop	{r7}
 800e12a:	4770      	bx	lr

0800e12c <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800e138:	4618      	mov	r0, r3
 800e13a:	f107 070c 	add.w	r7, r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	bc80      	pop	{r7}
 800e142:	4770      	bx	lr

0800e144 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800e150:	4618      	mov	r0, r3
 800e152:	f107 070c 	add.w	r7, r7, #12
 800e156:	46bd      	mov	sp, r7
 800e158:	bc80      	pop	{r7}
 800e15a:	4770      	bx	lr

0800e15c <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	8b1b      	ldrh	r3, [r3, #24]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	f023 030c 	bic.w	r3, r3, #12
 800e172:	b29a      	uxth	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	8b1b      	ldrh	r3, [r3, #24]
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	887b      	ldrh	r3, [r7, #2]
 800e180:	4313      	orrs	r3, r2
 800e182:	b29a      	uxth	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	831a      	strh	r2, [r3, #24]
}
 800e188:	f107 070c 	add.w	r7, r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bc80      	pop	{r7}
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop

0800e194 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	460b      	mov	r3, r1
 800e19e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	8b1b      	ldrh	r3, [r3, #24]
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	8b1b      	ldrh	r3, [r3, #24]
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	887b      	ldrh	r3, [r7, #2]
 800e1b8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	831a      	strh	r2, [r3, #24]
}
 800e1c6:	f107 070c 	add.w	r7, r7, #12
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bc80      	pop	{r7}
 800e1ce:	4770      	bx	lr

0800e1d0 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	8b9b      	ldrh	r3, [r3, #28]
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	f023 030c 	bic.w	r3, r3, #12
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	8b9b      	ldrh	r3, [r3, #28]
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	887b      	ldrh	r3, [r7, #2]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	839a      	strh	r2, [r3, #28]
}
 800e1fc:	f107 070c 	add.w	r7, r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	bc80      	pop	{r7}
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop

0800e208 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	460b      	mov	r3, r1
 800e212:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	8b9b      	ldrh	r3, [r3, #28]
 800e218:	b29b      	uxth	r3, r3
 800e21a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e21e:	b29a      	uxth	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	8b9b      	ldrh	r3, [r3, #28]
 800e228:	b29a      	uxth	r2, r3
 800e22a:	887b      	ldrh	r3, [r7, #2]
 800e22c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e230:	b29b      	uxth	r3, r3
 800e232:	4313      	orrs	r3, r2
 800e234:	b29a      	uxth	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	839a      	strh	r2, [r3, #28]
}
 800e23a:	f107 070c 	add.w	r7, r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	bc80      	pop	{r7}
 800e242:	4770      	bx	lr

0800e244 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	881a      	ldrh	r2, [r3, #0]
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	885b      	ldrh	r3, [r3, #2]
 800e256:	4313      	orrs	r3, r2
 800e258:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e25e:	4313      	orrs	r3, r2
 800e260:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e266:	4313      	orrs	r3, r2
 800e268:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e26e:	4313      	orrs	r3, r2
 800e270:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e276:	4313      	orrs	r3, r2
 800e278:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e27e:	4313      	orrs	r3, r2
 800e280:	b29a      	uxth	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800e288:	f107 070c 	add.w	r7, r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bc80      	pop	{r7}
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop

0800e294 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f04f 0200 	mov.w	r2, #0
 800e2a2:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f04f 0200 	mov.w	r2, #0
 800e2aa:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f04f 0200 	mov.w	r2, #0
 800e2b2:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f04f 0200 	mov.w	r2, #0
 800e2ba:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f04f 0200 	mov.w	r2, #0
 800e2c2:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f04f 0200 	mov.w	r2, #0
 800e2ca:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f04f 0200 	mov.w	r2, #0
 800e2d2:	819a      	strh	r2, [r3, #12]
}
 800e2d4:	f107 070c 	add.w	r7, r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bc80      	pop	{r7}
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop

0800e2e0 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e2ec:	78fb      	ldrb	r3, [r7, #3]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00c      	beq.n	800e30c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e302:	b29a      	uxth	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e30a:	e00b      	b.n	800e324 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e312:	b29b      	uxth	r3, r3
 800e314:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e318:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e31c:	b29a      	uxth	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 800e324:	f107 070c 	add.w	r7, r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	bc80      	pop	{r7}
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop

0800e330 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e33c:	78fb      	ldrb	r3, [r7, #3]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d008      	beq.n	800e354 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	889b      	ldrh	r3, [r3, #4]
 800e346:	b29b      	uxth	r3, r3
 800e348:	f043 0304 	orr.w	r3, r3, #4
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	809a      	strh	r2, [r3, #4]
 800e352:	e007      	b.n	800e364 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	889b      	ldrh	r3, [r3, #4]
 800e358:	b29b      	uxth	r3, r3
 800e35a:	f023 0304 	bic.w	r3, r3, #4
 800e35e:	b29a      	uxth	r2, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	809a      	strh	r2, [r3, #4]
  }
}
 800e364:	f107 070c 	add.w	r7, r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	bc80      	pop	{r7}
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop

0800e370 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	460b      	mov	r3, r1
 800e37a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e37c:	78fb      	ldrb	r3, [r7, #3]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d008      	beq.n	800e394 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	889b      	ldrh	r3, [r3, #4]
 800e386:	b29b      	uxth	r3, r3
 800e388:	f043 0301 	orr.w	r3, r3, #1
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	809a      	strh	r2, [r3, #4]
 800e392:	e007      	b.n	800e3a4 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	889b      	ldrh	r3, [r3, #4]
 800e398:	b29b      	uxth	r3, r3
 800e39a:	f023 0301 	bic.w	r3, r3, #1
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	809a      	strh	r2, [r3, #4]
  }
}
 800e3a4:	f107 070c 	add.w	r7, r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bc80      	pop	{r7}
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop

0800e3b0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	460a      	mov	r2, r1
 800e3bc:	807a      	strh	r2, [r7, #2]
 800e3be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e3c0:	787b      	ldrb	r3, [r7, #1]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d008      	beq.n	800e3d8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	899b      	ldrh	r3, [r3, #12]
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	887b      	ldrh	r3, [r7, #2]
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	819a      	strh	r2, [r3, #12]
 800e3d6:	e00a      	b.n	800e3ee <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	899b      	ldrh	r3, [r3, #12]
 800e3dc:	b29a      	uxth	r2, r3
 800e3de:	887b      	ldrh	r3, [r7, #2]
 800e3e0:	ea6f 0303 	mvn.w	r3, r3
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	819a      	strh	r2, [r3, #12]
  }
}
 800e3ee:	f107 070c 	add.w	r7, r7, #12
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bc80      	pop	{r7}
 800e3f6:	4770      	bx	lr

0800e3f8 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	460b      	mov	r3, r1
 800e402:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	887a      	ldrh	r2, [r7, #2]
 800e408:	829a      	strh	r2, [r3, #20]
}
 800e40a:	f107 070c 	add.w	r7, r7, #12
 800e40e:	46bd      	mov	sp, r7
 800e410:	bc80      	pop	{r7}
 800e412:	4770      	bx	lr

0800e414 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800e420:	f04f 0300 	mov.w	r3, #0
 800e424:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	8a1b      	ldrh	r3, [r3, #16]
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	887b      	ldrh	r3, [r7, #2]
 800e42e:	4013      	ands	r3, r2
 800e430:	b29b      	uxth	r3, r3
 800e432:	2b00      	cmp	r3, #0
 800e434:	d003      	beq.n	800e43e <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800e436:	f04f 0301 	mov.w	r3, #1
 800e43a:	73fb      	strb	r3, [r7, #15]
 800e43c:	e002      	b.n	800e444 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800e43e:	f04f 0300 	mov.w	r3, #0
 800e442:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e444:	7bfb      	ldrb	r3, [r7, #15]
}
 800e446:	4618      	mov	r0, r3
 800e448:	f107 0714 	add.w	r7, r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bc80      	pop	{r7}
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop

0800e454 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800e460:	887b      	ldrh	r3, [r7, #2]
 800e462:	ea6f 0303 	mvn.w	r3, r3
 800e466:	b29a      	uxth	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	821a      	strh	r2, [r3, #16]
}
 800e46c:	f107 070c 	add.w	r7, r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	bc80      	pop	{r7}
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop

0800e478 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	460b      	mov	r3, r1
 800e482:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800e484:	f04f 0300 	mov.w	r3, #0
 800e488:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800e48a:	f04f 0300 	mov.w	r3, #0
 800e48e:	81bb      	strh	r3, [r7, #12]
 800e490:	f04f 0300 	mov.w	r3, #0
 800e494:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	8a1b      	ldrh	r3, [r3, #16]
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	887b      	ldrh	r3, [r7, #2]
 800e49e:	4013      	ands	r3, r2
 800e4a0:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	899b      	ldrh	r3, [r3, #12]
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	887b      	ldrh	r3, [r7, #2]
 800e4aa:	4013      	ands	r3, r2
 800e4ac:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800e4ae:	89bb      	ldrh	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d006      	beq.n	800e4c2 <TIM_GetITStatus+0x4a>
 800e4b4:	897b      	ldrh	r3, [r7, #10]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d003      	beq.n	800e4c2 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800e4ba:	f04f 0301 	mov.w	r3, #1
 800e4be:	73fb      	strb	r3, [r7, #15]
 800e4c0:	e002      	b.n	800e4c8 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800e4c2:	f04f 0300 	mov.w	r3, #0
 800e4c6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f107 0714 	add.w	r7, r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bc80      	pop	{r7}
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop

0800e4d8 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800e4e4:	887b      	ldrh	r3, [r7, #2]
 800e4e6:	ea6f 0303 	mvn.w	r3, r3
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	821a      	strh	r2, [r3, #16]
}
 800e4f0:	f107 070c 	add.w	r7, r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bc80      	pop	{r7}
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop

0800e4fc <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	4613      	mov	r3, r2
 800e506:	460a      	mov	r2, r1
 800e508:	807a      	strh	r2, [r7, #2]
 800e50a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800e50c:	887a      	ldrh	r2, [r7, #2]
 800e50e:	883b      	ldrh	r3, [r7, #0]
 800e510:	4313      	orrs	r3, r2
 800e512:	b29a      	uxth	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800e51a:	f107 070c 	add.w	r7, r7, #12
 800e51e:	46bd      	mov	sp, r7
 800e520:	bc80      	pop	{r7}
 800e522:	4770      	bx	lr

0800e524 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	4613      	mov	r3, r2
 800e52e:	460a      	mov	r2, r1
 800e530:	807a      	strh	r2, [r7, #2]
 800e532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e534:	787b      	ldrb	r3, [r7, #1]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d008      	beq.n	800e54c <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	899b      	ldrh	r3, [r3, #12]
 800e53e:	b29a      	uxth	r2, r3
 800e540:	887b      	ldrh	r3, [r7, #2]
 800e542:	4313      	orrs	r3, r2
 800e544:	b29a      	uxth	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	819a      	strh	r2, [r3, #12]
 800e54a:	e00a      	b.n	800e562 <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	899b      	ldrh	r3, [r3, #12]
 800e550:	b29a      	uxth	r2, r3
 800e552:	887b      	ldrh	r3, [r7, #2]
 800e554:	ea6f 0303 	mvn.w	r3, r3
 800e558:	b29b      	uxth	r3, r3
 800e55a:	4013      	ands	r3, r2
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	819a      	strh	r2, [r3, #12]
  }
}
 800e562:	f107 070c 	add.w	r7, r7, #12
 800e566:	46bd      	mov	sp, r7
 800e568:	bc80      	pop	{r7}
 800e56a:	4770      	bx	lr

0800e56c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e578:	78fb      	ldrb	r3, [r7, #3]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d008      	beq.n	800e590 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	889b      	ldrh	r3, [r3, #4]
 800e582:	b29b      	uxth	r3, r3
 800e584:	f043 0308 	orr.w	r3, r3, #8
 800e588:	b29a      	uxth	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	809a      	strh	r2, [r3, #4]
 800e58e:	e007      	b.n	800e5a0 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	889b      	ldrh	r3, [r3, #4]
 800e594:	b29b      	uxth	r3, r3
 800e596:	f023 0308 	bic.w	r3, r3, #8
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	809a      	strh	r2, [r3, #4]
  }
}
 800e5a0:	f107 070c 	add.w	r7, r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bc80      	pop	{r7}
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop

0800e5ac <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	891b      	ldrh	r3, [r3, #8]
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	f023 0307 	bic.w	r3, r3, #7
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	811a      	strh	r2, [r3, #8]
}
 800e5c4:	f107 070c 	add.w	r7, r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bc80      	pop	{r7}
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop

0800e5d0 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	460b      	mov	r3, r1
 800e5da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800e5dc:	887b      	ldrh	r3, [r7, #2]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f000 f87d 	bl	800e6e0 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	891b      	ldrh	r3, [r3, #8]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	f043 0307 	orr.w	r3, r3, #7
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	811a      	strh	r2, [r3, #8]
}
 800e5f6:	f107 0708 	add.w	r7, r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop

0800e600 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	8179      	strh	r1, [r7, #10]
 800e60a:	813a      	strh	r2, [r7, #8]
 800e60c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800e60e:	897b      	ldrh	r3, [r7, #10]
 800e610:	2b60      	cmp	r3, #96	; 0x60
 800e612:	d108      	bne.n	800e626 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800e614:	893a      	ldrh	r2, [r7, #8]
 800e616:	88fb      	ldrh	r3, [r7, #6]
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	4611      	mov	r1, r2
 800e61c:	f04f 0201 	mov.w	r2, #1
 800e620:	f000 f9ae 	bl	800e980 <TI2_Config>
 800e624:	e007      	b.n	800e636 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800e626:	893a      	ldrh	r2, [r7, #8]
 800e628:	88fb      	ldrh	r3, [r7, #6]
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	4611      	mov	r1, r2
 800e62e:	f04f 0201 	mov.w	r2, #1
 800e632:	f000 f965 	bl	800e900 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800e636:	897b      	ldrh	r3, [r7, #10]
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	4619      	mov	r1, r3
 800e63c:	f000 f850 	bl	800e6e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	891b      	ldrh	r3, [r3, #8]
 800e644:	b29b      	uxth	r3, r3
 800e646:	f043 0307 	orr.w	r3, r3, #7
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	811a      	strh	r2, [r3, #8]
}
 800e650:	f107 0710 	add.w	r7, r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	8179      	strh	r1, [r7, #10]
 800e662:	813a      	strh	r2, [r7, #8]
 800e664:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800e666:	f04f 0300 	mov.w	r3, #0
 800e66a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800e66c:	8979      	ldrh	r1, [r7, #10]
 800e66e:	893a      	ldrh	r2, [r7, #8]
 800e670:	88fb      	ldrh	r3, [r7, #6]
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f000 f8a4 	bl	800e7c0 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	891b      	ldrh	r3, [r3, #8]
 800e67c:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800e67e:	8afb      	ldrh	r3, [r7, #22]
 800e680:	f023 0307 	bic.w	r3, r3, #7
 800e684:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800e686:	8afb      	ldrh	r3, [r7, #22]
 800e688:	f043 0307 	orr.w	r3, r3, #7
 800e68c:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800e68e:	8afb      	ldrh	r3, [r7, #22]
 800e690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e694:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800e696:	8afb      	ldrh	r3, [r7, #22]
 800e698:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800e69c:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	8afa      	ldrh	r2, [r7, #22]
 800e6a2:	811a      	strh	r2, [r3, #8]
}
 800e6a4:	f107 0718 	add.w	r7, r7, #24
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	8179      	strh	r1, [r7, #10]
 800e6b6:	813a      	strh	r2, [r7, #8]
 800e6b8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800e6ba:	8979      	ldrh	r1, [r7, #10]
 800e6bc:	893a      	ldrh	r2, [r7, #8]
 800e6be:	88fb      	ldrh	r3, [r7, #6]
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f000 f87d 	bl	800e7c0 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	891b      	ldrh	r3, [r3, #8]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	811a      	strh	r2, [r3, #8]
}
 800e6d6:	f107 0710 	add.w	r7, r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop

0800e6e0 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800e6ec:	f04f 0300 	mov.w	r3, #0
 800e6f0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	891b      	ldrh	r3, [r3, #8]
 800e6f6:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800e6f8:	89fb      	ldrh	r3, [r7, #14]
 800e6fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6fe:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800e700:	89fa      	ldrh	r2, [r7, #14]
 800e702:	887b      	ldrh	r3, [r7, #2]
 800e704:	4313      	orrs	r3, r2
 800e706:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	89fa      	ldrh	r2, [r7, #14]
 800e70c:	811a      	strh	r2, [r3, #8]
}
 800e70e:	f107 0714 	add.w	r7, r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	bc80      	pop	{r7}
 800e716:	4770      	bx	lr

0800e718 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	889b      	ldrh	r3, [r3, #4]
 800e728:	b29b      	uxth	r3, r3
 800e72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e72e:	b29a      	uxth	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	889b      	ldrh	r3, [r3, #4]
 800e738:	b29a      	uxth	r2, r3
 800e73a:	887b      	ldrh	r3, [r7, #2]
 800e73c:	4313      	orrs	r3, r2
 800e73e:	b29a      	uxth	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	809a      	strh	r2, [r3, #4]
}
 800e744:	f107 070c 	add.w	r7, r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	bc80      	pop	{r7}
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop

0800e750 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	891b      	ldrh	r3, [r3, #8]
 800e760:	b29b      	uxth	r3, r3
 800e762:	f023 0307 	bic.w	r3, r3, #7
 800e766:	b29a      	uxth	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	891b      	ldrh	r3, [r3, #8]
 800e770:	b29a      	uxth	r2, r3
 800e772:	887b      	ldrh	r3, [r7, #2]
 800e774:	4313      	orrs	r3, r2
 800e776:	b29a      	uxth	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	811a      	strh	r2, [r3, #8]
}
 800e77c:	f107 070c 	add.w	r7, r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	bc80      	pop	{r7}
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop

0800e788 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	460b      	mov	r3, r1
 800e792:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	891b      	ldrh	r3, [r3, #8]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	891b      	ldrh	r3, [r3, #8]
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	887b      	ldrh	r3, [r7, #2]
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	811a      	strh	r2, [r3, #8]
}
 800e7b4:	f107 070c 	add.w	r7, r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bc80      	pop	{r7}
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop

0800e7c0 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b087      	sub	sp, #28
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	8179      	strh	r1, [r7, #10]
 800e7ca:	813a      	strh	r2, [r7, #8]
 800e7cc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800e7ce:	f04f 0300 	mov.w	r3, #0
 800e7d2:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	891b      	ldrh	r3, [r3, #8]
 800e7d8:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800e7da:	8afb      	ldrh	r3, [r7, #22]
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800e7e0:	88fb      	ldrh	r3, [r7, #6]
 800e7e2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	893b      	ldrh	r3, [r7, #8]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	897b      	ldrh	r3, [r7, #10]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	8afb      	ldrh	r3, [r7, #22]
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	8afa      	ldrh	r2, [r7, #22]
 800e7fe:	811a      	strh	r2, [r3, #8]
}
 800e800:	f107 071c 	add.w	r7, r7, #28
 800e804:	46bd      	mov	sp, r7
 800e806:	bc80      	pop	{r7}
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop

0800e80c <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b087      	sub	sp, #28
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	8179      	strh	r1, [r7, #10]
 800e816:	813a      	strh	r2, [r7, #8]
 800e818:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800e81a:	f04f 0300 	mov.w	r3, #0
 800e81e:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800e820:	f04f 0300 	mov.w	r3, #0
 800e824:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800e826:	f04f 0300 	mov.w	r3, #0
 800e82a:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	891b      	ldrh	r3, [r3, #8]
 800e830:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	8b1b      	ldrh	r3, [r3, #24]
 800e836:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	8c1b      	ldrh	r3, [r3, #32]
 800e83c:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800e83e:	8afb      	ldrh	r3, [r7, #22]
 800e840:	f023 0307 	bic.w	r3, r3, #7
 800e844:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800e846:	8afa      	ldrh	r2, [r7, #22]
 800e848:	897b      	ldrh	r3, [r7, #10]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800e84e:	8abb      	ldrh	r3, [r7, #20]
 800e850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e854:	f023 0303 	bic.w	r3, r3, #3
 800e858:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800e85a:	8abb      	ldrh	r3, [r7, #20]
 800e85c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e860:	f043 0301 	orr.w	r3, r3, #1
 800e864:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800e866:	8a7b      	ldrh	r3, [r7, #18]
 800e868:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e86c:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800e86e:	88fb      	ldrh	r3, [r7, #6]
 800e870:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e874:	b29a      	uxth	r2, r3
 800e876:	893b      	ldrh	r3, [r7, #8]
 800e878:	4313      	orrs	r3, r2
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	8a7b      	ldrh	r3, [r7, #18]
 800e87e:	4313      	orrs	r3, r2
 800e880:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	8afa      	ldrh	r2, [r7, #22]
 800e886:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	8aba      	ldrh	r2, [r7, #20]
 800e88c:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	8a7a      	ldrh	r2, [r7, #18]
 800e892:	841a      	strh	r2, [r3, #32]
}
 800e894:	f107 071c 	add.w	r7, r7, #28
 800e898:	46bd      	mov	sp, r7
 800e89a:	bc80      	pop	{r7}
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop

0800e8a0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e8ac:	78fb      	ldrb	r3, [r7, #3]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d008      	beq.n	800e8c4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	889b      	ldrh	r3, [r3, #4]
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8bc:	b29a      	uxth	r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	809a      	strh	r2, [r3, #4]
 800e8c2:	e007      	b.n	800e8d4 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	889b      	ldrh	r3, [r3, #4]
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	809a      	strh	r2, [r3, #4]
  }
}
 800e8d4:	f107 070c 	add.w	r7, r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bc80      	pop	{r7}
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop

0800e8e0 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	887a      	ldrh	r2, [r7, #2]
 800e8f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800e8f4:	f107 070c 	add.w	r7, r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bc80      	pop	{r7}
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop

0800e900 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e900:	b480      	push	{r7}
 800e902:	b087      	sub	sp, #28
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	8179      	strh	r1, [r7, #10]
 800e90a:	813a      	strh	r2, [r7, #8]
 800e90c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800e90e:	f04f 0300 	mov.w	r3, #0
 800e912:	82fb      	strh	r3, [r7, #22]
 800e914:	f04f 0300 	mov.w	r3, #0
 800e918:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	8c1b      	ldrh	r3, [r3, #32]
 800e91e:	b29b      	uxth	r3, r3
 800e920:	f023 0301 	bic.w	r3, r3, #1
 800e924:	b29a      	uxth	r2, r3
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	8b1b      	ldrh	r3, [r3, #24]
 800e92e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	8c1b      	ldrh	r3, [r3, #32]
 800e934:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800e936:	8afb      	ldrh	r3, [r7, #22]
 800e938:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800e93c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800e93e:	88fb      	ldrh	r3, [r7, #6]
 800e940:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e944:	b29a      	uxth	r2, r3
 800e946:	893b      	ldrh	r3, [r7, #8]
 800e948:	4313      	orrs	r3, r2
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	8afb      	ldrh	r3, [r7, #22]
 800e94e:	4313      	orrs	r3, r2
 800e950:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e952:	8abb      	ldrh	r3, [r7, #20]
 800e954:	f023 030a 	bic.w	r3, r3, #10
 800e958:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800e95a:	897a      	ldrh	r2, [r7, #10]
 800e95c:	8abb      	ldrh	r3, [r7, #20]
 800e95e:	4313      	orrs	r3, r2
 800e960:	b29b      	uxth	r3, r3
 800e962:	f043 0301 	orr.w	r3, r3, #1
 800e966:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	8afa      	ldrh	r2, [r7, #22]
 800e96c:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	8aba      	ldrh	r2, [r7, #20]
 800e972:	841a      	strh	r2, [r3, #32]
}
 800e974:	f107 071c 	add.w	r7, r7, #28
 800e978:	46bd      	mov	sp, r7
 800e97a:	bc80      	pop	{r7}
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop

0800e980 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e980:	b480      	push	{r7}
 800e982:	b087      	sub	sp, #28
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	8179      	strh	r1, [r7, #10]
 800e98a:	813a      	strh	r2, [r7, #8]
 800e98c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800e98e:	f04f 0300 	mov.w	r3, #0
 800e992:	82fb      	strh	r3, [r7, #22]
 800e994:	f04f 0300 	mov.w	r3, #0
 800e998:	82bb      	strh	r3, [r7, #20]
 800e99a:	f04f 0300 	mov.w	r3, #0
 800e99e:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	8c1b      	ldrh	r3, [r3, #32]
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	f023 0310 	bic.w	r3, r3, #16
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	8b1b      	ldrh	r3, [r3, #24]
 800e9b4:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	8c1b      	ldrh	r3, [r3, #32]
 800e9ba:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800e9bc:	897b      	ldrh	r3, [r7, #10]
 800e9be:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e9c2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800e9c4:	8afb      	ldrh	r3, [r7, #22]
 800e9c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9ca:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800e9ce:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800e9d2:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800e9d4:	88fb      	ldrh	r3, [r7, #6]
 800e9d6:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	8afb      	ldrh	r3, [r7, #22]
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800e9e2:	893b      	ldrh	r3, [r7, #8]
 800e9e4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e9e8:	b29a      	uxth	r2, r3
 800e9ea:	8afb      	ldrh	r3, [r7, #22]
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e9f0:	8abb      	ldrh	r3, [r7, #20]
 800e9f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e9f6:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800e9f8:	8a7a      	ldrh	r2, [r7, #18]
 800e9fa:	8abb      	ldrh	r3, [r7, #20]
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	f043 0310 	orr.w	r3, r3, #16
 800ea04:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	8afa      	ldrh	r2, [r7, #22]
 800ea0a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	8aba      	ldrh	r2, [r7, #20]
 800ea10:	841a      	strh	r2, [r3, #32]
}
 800ea12:	f107 071c 	add.w	r7, r7, #28
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bc80      	pop	{r7}
 800ea1a:	4770      	bx	lr

0800ea1c <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b087      	sub	sp, #28
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	8179      	strh	r1, [r7, #10]
 800ea26:	813a      	strh	r2, [r7, #8]
 800ea28:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800ea2a:	f04f 0300 	mov.w	r3, #0
 800ea2e:	82fb      	strh	r3, [r7, #22]
 800ea30:	f04f 0300 	mov.w	r3, #0
 800ea34:	82bb      	strh	r3, [r7, #20]
 800ea36:	f04f 0300 	mov.w	r3, #0
 800ea3a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	8c1b      	ldrh	r3, [r3, #32]
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea46:	b29a      	uxth	r2, r3
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	8b9b      	ldrh	r3, [r3, #28]
 800ea50:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	8c1b      	ldrh	r3, [r3, #32]
 800ea56:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800ea58:	897b      	ldrh	r3, [r7, #10]
 800ea5a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ea5e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800ea60:	8afb      	ldrh	r3, [r7, #22]
 800ea62:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800ea66:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800ea68:	88fb      	ldrh	r3, [r7, #6]
 800ea6a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	893b      	ldrh	r3, [r7, #8]
 800ea72:	4313      	orrs	r3, r2
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	8afb      	ldrh	r3, [r7, #22]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ea7c:	8abb      	ldrh	r3, [r7, #20]
 800ea7e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ea82:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800ea84:	8a7a      	ldrh	r2, [r7, #18]
 800ea86:	8abb      	ldrh	r3, [r7, #20]
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea90:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	8afa      	ldrh	r2, [r7, #22]
 800ea96:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	8aba      	ldrh	r2, [r7, #20]
 800ea9c:	841a      	strh	r2, [r3, #32]
}
 800ea9e:	f107 071c 	add.w	r7, r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bc80      	pop	{r7}
 800eaa6:	4770      	bx	lr

0800eaa8 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b087      	sub	sp, #28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	8179      	strh	r1, [r7, #10]
 800eab2:	813a      	strh	r2, [r7, #8]
 800eab4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800eab6:	f04f 0300 	mov.w	r3, #0
 800eaba:	82fb      	strh	r3, [r7, #22]
 800eabc:	f04f 0300 	mov.w	r3, #0
 800eac0:	82bb      	strh	r3, [r7, #20]
 800eac2:	f04f 0300 	mov.w	r3, #0
 800eac6:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	8c1b      	ldrh	r3, [r3, #32]
 800eacc:	b29b      	uxth	r3, r3
 800eace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	8b9b      	ldrh	r3, [r3, #28]
 800eadc:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	8c1b      	ldrh	r3, [r3, #32]
 800eae2:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800eae4:	897b      	ldrh	r3, [r7, #10]
 800eae6:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800eaea:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800eaec:	8afb      	ldrh	r3, [r7, #22]
 800eaee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eaf2:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800eaf6:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800eafa:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800eafc:	893b      	ldrh	r3, [r7, #8]
 800eafe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	8afb      	ldrh	r3, [r7, #22]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800eb0a:	88fb      	ldrh	r3, [r7, #6]
 800eb0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	8afb      	ldrh	r3, [r7, #22]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800eb18:	8abb      	ldrh	r3, [r7, #20]
 800eb1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb1e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800eb22:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800eb26:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800eb28:	8a7a      	ldrh	r2, [r7, #18]
 800eb2a:	8abb      	ldrh	r3, [r7, #20]
 800eb2c:	4313      	orrs	r3, r2
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eb34:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	8afa      	ldrh	r2, [r7, #22]
 800eb3a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	8aba      	ldrh	r2, [r7, #20]
 800eb40:	841a      	strh	r2, [r3, #32]
}
 800eb42:	f107 071c 	add.w	r7, r7, #28
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bc80      	pop	{r7}
 800eb4a:	4770      	bx	lr

0800eb4c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d10c      	bne.n	800eb7c <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800eb62:	f04f 0010 	mov.w	r0, #16
 800eb66:	f04f 0101 	mov.w	r1, #1
 800eb6a:	f7fb fb67 	bl	800a23c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800eb6e:	f04f 0010 	mov.w	r0, #16
 800eb72:	f04f 0100 	mov.w	r1, #0
 800eb76:	f7fb fb61 	bl	800a23c <RCC_APB2PeriphResetCmd>
 800eb7a:	e062      	b.n	800ec42 <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800eb82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d10c      	bne.n	800eba4 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800eb8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800eb8e:	f04f 0101 	mov.w	r1, #1
 800eb92:	f7fb fb27 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800eb96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800eb9a:	f04f 0100 	mov.w	r1, #0
 800eb9e:	f7fb fb21 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800eba2:	e04e      	b.n	800ec42 <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800ebaa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d10c      	bne.n	800ebcc <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800ebb2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ebb6:	f04f 0101 	mov.w	r1, #1
 800ebba:	f7fb fb13 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800ebbe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ebc2:	f04f 0100 	mov.w	r1, #0
 800ebc6:	f7fb fb0d 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800ebca:	e03a      	b.n	800ec42 <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800ebd2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d10c      	bne.n	800ebf4 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800ebda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ebde:	f04f 0101 	mov.w	r1, #1
 800ebe2:	f7fb faff 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800ebe6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ebea:	f04f 0100 	mov.w	r1, #0
 800ebee:	f7fb faf9 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800ebf2:	e026      	b.n	800ec42 <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800ebfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d10c      	bne.n	800ec1c <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800ec02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ec06:	f04f 0101 	mov.w	r1, #1
 800ec0a:	f7fb faeb 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800ec0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ec12:	f04f 0100 	mov.w	r1, #0
 800ec16:	f7fb fae5 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
 800ec1a:	e012      	b.n	800ec42 <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ec22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d10b      	bne.n	800ec42 <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800ec2a:	f04f 0020 	mov.w	r0, #32
 800ec2e:	f04f 0101 	mov.w	r1, #1
 800ec32:	f7fb fb03 	bl	800a23c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800ec36:	f04f 0020 	mov.w	r0, #32
 800ec3a:	f04f 0100 	mov.w	r1, #0
 800ec3e:	f7fb fafd 	bl	800a23c <RCC_APB2PeriphResetCmd>
    }
  }
}
 800ec42:	f107 0708 	add.w	r7, r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop

0800ec4c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b08a      	sub	sp, #40	; 0x28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800ec56:	f04f 0300 	mov.w	r3, #0
 800ec5a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec5c:	f04f 0300 	mov.w	r3, #0
 800ec60:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800ec62:	f04f 0300 	mov.w	r3, #0
 800ec66:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800ec68:	f04f 0300 	mov.w	r3, #0
 800ec6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	8a1b      	ldrh	r3, [r3, #16]
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800ec76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ec7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	88db      	ldrh	r3, [r3, #6]
 800ec82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec84:	4313      	orrs	r3, r2
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800ec88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	899b      	ldrh	r3, [r3, #12]
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ec9e:	f023 030c 	bic.w	r3, r3, #12
 800eca2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	889a      	ldrh	r2, [r3, #4]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	891b      	ldrh	r3, [r3, #8]
 800ecac:	4313      	orrs	r3, r2
 800ecae:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecba:	4313      	orrs	r3, r2
 800ecbc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800ecbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	8a9b      	ldrh	r3, [r3, #20]
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ecd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	899b      	ldrh	r3, [r3, #12]
 800ecda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800ece8:	f107 0308 	add.w	r3, r7, #8
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fa ffc5 	bl	8009c7c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecf8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d006      	beq.n	800ed0e <USART_Init+0xc2>
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ed06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d102      	bne.n	800ed14 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	623b      	str	r3, [r7, #32]
 800ed12:	e001      	b.n	800ed18 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	899b      	ldrh	r3, [r3, #12]
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	b21b      	sxth	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	da0f      	bge.n	800ed46 <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800ed26:	6a3a      	ldr	r2, [r7, #32]
 800ed28:	4613      	mov	r3, r2
 800ed2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ed2e:	189b      	adds	r3, r3, r2
 800ed30:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ed34:	189a      	adds	r2, r3, r2
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed42:	61fb      	str	r3, [r7, #28]
 800ed44:	e00e      	b.n	800ed64 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800ed46:	6a3a      	ldr	r2, [r7, #32]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ed4e:	189b      	adds	r3, r3, r2
 800ed50:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ed54:	189a      	adds	r2, r3, r2
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ed5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed62:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800ed64:	69fa      	ldr	r2, [r7, #28]
 800ed66:	f248 531f 	movw	r3, #34079	; 0x851f
 800ed6a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800ed6e:	fba3 1302 	umull	r1, r3, r3, r2
 800ed72:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800ed76:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ed7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ed82:	f04f 0264 	mov.w	r2, #100	; 0x64
 800ed86:	fb02 f303 	mul.w	r3, r2, r3
 800ed8a:	69fa      	ldr	r2, [r7, #28]
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	899b      	ldrh	r3, [r3, #12]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	b21b      	sxth	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	da12      	bge.n	800edc4 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800eda4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800eda8:	f248 531f 	movw	r3, #34079	; 0x851f
 800edac:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800edb0:	fba3 1302 	umull	r1, r3, r3, r2
 800edb4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800edb8:	f003 0307 	and.w	r3, r3, #7
 800edbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edbe:	4313      	orrs	r3, r2
 800edc0:	627b      	str	r3, [r7, #36]	; 0x24
 800edc2:	e011      	b.n	800ede8 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800edca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800edce:	f248 531f 	movw	r3, #34079	; 0x851f
 800edd2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800edd6:	fba3 1302 	umull	r1, r3, r3, r2
 800edda:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800edde:	f003 030f 	and.w	r3, r3, #15
 800ede2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ede4:	4313      	orrs	r3, r2
 800ede6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800ede8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edea:	b29a      	uxth	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	811a      	strh	r2, [r3, #8]
}
 800edf0:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800ee06:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f04f 0200 	mov.w	r2, #0
 800ee0e:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f04f 0200 	mov.w	r2, #0
 800ee16:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f04f 0200 	mov.w	r2, #0
 800ee1e:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f04f 020c 	mov.w	r2, #12
 800ee26:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f04f 0200 	mov.w	r2, #0
 800ee2e:	819a      	strh	r2, [r3, #12]
}
 800ee30:	f107 070c 	add.w	r7, r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bc80      	pop	{r7}
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop

0800ee3c <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b085      	sub	sp, #20
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800ee46:	f04f 0300 	mov.w	r3, #0
 800ee4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	8a1b      	ldrh	r3, [r3, #16]
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ee5a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	881a      	ldrh	r2, [r3, #0]
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800ee64:	4313      	orrs	r3, r2
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	889b      	ldrh	r3, [r3, #4]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	88db      	ldrh	r3, [r3, #6]
 800ee74:	4313      	orrs	r3, r2
 800ee76:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	821a      	strh	r2, [r3, #16]
}
 800ee86:	f107 0714 	add.w	r7, r7, #20
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bc80      	pop	{r7}
 800ee8e:	4770      	bx	lr

0800ee90 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f04f 0200 	mov.w	r2, #0
 800ee9e:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f04f 0200 	mov.w	r2, #0
 800eea6:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f04f 0200 	mov.w	r2, #0
 800eeae:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f04f 0200 	mov.w	r2, #0
 800eeb6:	80da      	strh	r2, [r3, #6]
}
 800eeb8:	f107 070c 	add.w	r7, r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bc80      	pop	{r7}
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop

0800eec4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	460b      	mov	r3, r1
 800eece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800eed0:	78fb      	ldrb	r3, [r7, #3]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d008      	beq.n	800eee8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	899b      	ldrh	r3, [r3, #12]
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	819a      	strh	r2, [r3, #12]
 800eee6:	e007      	b.n	800eef8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	899b      	ldrh	r3, [r3, #12]
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	819a      	strh	r2, [r3, #12]
  }
}
 800eef8:	f107 070c 	add.w	r7, r7, #12
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bc80      	pop	{r7}
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop

0800ef04 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	8b1b      	ldrh	r3, [r3, #24]
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	8b1b      	ldrh	r3, [r3, #24]
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	78fb      	ldrb	r3, [r7, #3]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	831a      	strh	r2, [r3, #24]
}
 800ef32:	f107 070c 	add.w	r7, r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bc80      	pop	{r7}
 800ef3a:	4770      	bx	lr

0800ef3c <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	460b      	mov	r3, r1
 800ef46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ef48:	78fb      	ldrb	r3, [r7, #3]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00a      	beq.n	800ef64 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	899b      	ldrh	r3, [r3, #12]
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	819a      	strh	r2, [r3, #12]
 800ef62:	e009      	b.n	800ef78 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	899b      	ldrh	r3, [r3, #12]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800ef6e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	819a      	strh	r2, [r3, #12]
  }
}  
 800ef78:	f107 070c 	add.w	r7, r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bc80      	pop	{r7}
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop

0800ef84 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ef90:	78fb      	ldrb	r3, [r7, #3]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d008      	beq.n	800efa8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	8a9b      	ldrh	r3, [r3, #20]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	829a      	strh	r2, [r3, #20]
 800efa6:	e007      	b.n	800efb8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	8a9b      	ldrh	r3, [r3, #20]
 800efac:	b29b      	uxth	r3, r3
 800efae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	829a      	strh	r2, [r3, #20]
  }
}
 800efb8:	f107 070c 	add.w	r7, r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bc80      	pop	{r7}
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop

0800efc4 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	460b      	mov	r3, r1
 800efce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800efd0:	887b      	ldrh	r3, [r7, #2]
 800efd2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800efd6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800efda:	b29a      	uxth	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	809a      	strh	r2, [r3, #4]
}
 800efe0:	f107 070c 	add.w	r7, r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bc80      	pop	{r7}
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop

0800efec <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	889b      	ldrh	r3, [r3, #4]
 800eff8:	b29b      	uxth	r3, r3
 800effa:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800effe:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800f002:	b29b      	uxth	r3, r3
}
 800f004:	4618      	mov	r0, r3
 800f006:	f107 070c 	add.w	r7, r7, #12
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bc80      	pop	{r7}
 800f00e:	4770      	bx	lr

0800f010 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800f010:	b480      	push	{r7}
 800f012:	b083      	sub	sp, #12
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	460b      	mov	r3, r1
 800f01a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	8a1b      	ldrh	r3, [r3, #16]
 800f020:	b29b      	uxth	r3, r3
 800f022:	f023 030f 	bic.w	r3, r3, #15
 800f026:	b29a      	uxth	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	8a1b      	ldrh	r3, [r3, #16]
 800f030:	b29a      	uxth	r2, r3
 800f032:	78fb      	ldrb	r3, [r7, #3]
 800f034:	b29b      	uxth	r3, r3
 800f036:	4313      	orrs	r3, r2
 800f038:	b29a      	uxth	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	821a      	strh	r2, [r3, #16]
}
 800f03e:	f107 070c 	add.w	r7, r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	bc80      	pop	{r7}
 800f046:	4770      	bx	lr

0800f048 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	460b      	mov	r3, r1
 800f052:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800f054:	78fb      	ldrb	r3, [r7, #3]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d008      	beq.n	800f06c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	899b      	ldrh	r3, [r3, #12]
 800f05e:	b29b      	uxth	r3, r3
 800f060:	f043 0302 	orr.w	r3, r3, #2
 800f064:	b29a      	uxth	r2, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	819a      	strh	r2, [r3, #12]
 800f06a:	e007      	b.n	800f07c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	899b      	ldrh	r3, [r3, #12]
 800f070:	b29b      	uxth	r3, r3
 800f072:	f023 0302 	bic.w	r3, r3, #2
 800f076:	b29a      	uxth	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	819a      	strh	r2, [r3, #12]
  }
}
 800f07c:	f107 070c 	add.w	r7, r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	bc80      	pop	{r7}
 800f084:	4770      	bx	lr
 800f086:	bf00      	nop

0800f088 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	460b      	mov	r3, r1
 800f092:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	899b      	ldrh	r3, [r3, #12]
 800f098:	b29b      	uxth	r3, r3
 800f09a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	899b      	ldrh	r3, [r3, #12]
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	887b      	ldrh	r3, [r7, #2]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	819a      	strh	r2, [r3, #12]
}
 800f0b4:	f107 070c 	add.w	r7, r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bc80      	pop	{r7}
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop

0800f0c0 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	8a1b      	ldrh	r3, [r3, #16]
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	f023 0320 	bic.w	r3, r3, #32
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	8a1b      	ldrh	r3, [r3, #16]
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	887b      	ldrh	r3, [r7, #2]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	821a      	strh	r2, [r3, #16]
}
 800f0ec:	f107 070c 	add.w	r7, r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bc80      	pop	{r7}
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop

0800f0f8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	460b      	mov	r3, r1
 800f102:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f104:	78fb      	ldrb	r3, [r7, #3]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d008      	beq.n	800f11c <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	8a1b      	ldrh	r3, [r3, #16]
 800f10e:	b29b      	uxth	r3, r3
 800f110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f114:	b29a      	uxth	r2, r3
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	821a      	strh	r2, [r3, #16]
 800f11a:	e007      	b.n	800f12c <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	8a1b      	ldrh	r3, [r3, #16]
 800f120:	b29b      	uxth	r3, r3
 800f122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f126:	b29a      	uxth	r2, r3
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	821a      	strh	r2, [r3, #16]
  }
}
 800f12c:	f107 070c 	add.w	r7, r7, #12
 800f130:	46bd      	mov	sp, r7
 800f132:	bc80      	pop	{r7}
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop

0800f138 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	899b      	ldrh	r3, [r3, #12]
 800f144:	b29b      	uxth	r3, r3
 800f146:	f043 0301 	orr.w	r3, r3, #1
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	819a      	strh	r2, [r3, #12]
}
 800f150:	f107 070c 	add.w	r7, r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	bc80      	pop	{r7}
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop

0800f15c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	460b      	mov	r3, r1
 800f166:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f168:	78fb      	ldrb	r3, [r7, #3]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d008      	beq.n	800f180 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	8a9b      	ldrh	r3, [r3, #20]
 800f172:	b29b      	uxth	r3, r3
 800f174:	f043 0308 	orr.w	r3, r3, #8
 800f178:	b29a      	uxth	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	829a      	strh	r2, [r3, #20]
 800f17e:	e007      	b.n	800f190 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	8a9b      	ldrh	r3, [r3, #20]
 800f184:	b29b      	uxth	r3, r3
 800f186:	f023 0308 	bic.w	r3, r3, #8
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	829a      	strh	r2, [r3, #20]
  }
}
 800f190:	f107 070c 	add.w	r7, r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	bc80      	pop	{r7}
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop

0800f19c <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	8b1b      	ldrh	r3, [r3, #24]
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	8b1b      	ldrh	r3, [r3, #24]
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	78fb      	ldrb	r3, [r7, #3]
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	831a      	strh	r2, [r3, #24]
}
 800f1ce:	f107 070c 	add.w	r7, r7, #12
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bc80      	pop	{r7}
 800f1d6:	4770      	bx	lr

0800f1d8 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f1e4:	78fb      	ldrb	r3, [r7, #3]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d008      	beq.n	800f1fc <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	8a9b      	ldrh	r3, [r3, #20]
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	f043 0320 	orr.w	r3, r3, #32
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	829a      	strh	r2, [r3, #20]
 800f1fa:	e007      	b.n	800f20c <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	8a9b      	ldrh	r3, [r3, #20]
 800f200:	b29b      	uxth	r3, r3
 800f202:	f023 0320 	bic.w	r3, r3, #32
 800f206:	b29a      	uxth	r2, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	829a      	strh	r2, [r3, #20]
  }
}
 800f20c:	f107 070c 	add.w	r7, r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	bc80      	pop	{r7}
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop

0800f218 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	460b      	mov	r3, r1
 800f222:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f224:	78fb      	ldrb	r3, [r7, #3]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d008      	beq.n	800f23c <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	8a9b      	ldrh	r3, [r3, #20]
 800f22e:	b29b      	uxth	r3, r3
 800f230:	f043 0310 	orr.w	r3, r3, #16
 800f234:	b29a      	uxth	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	829a      	strh	r2, [r3, #20]
 800f23a:	e007      	b.n	800f24c <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	8a9b      	ldrh	r3, [r3, #20]
 800f240:	b29b      	uxth	r3, r3
 800f242:	f023 0310 	bic.w	r3, r3, #16
 800f246:	b29a      	uxth	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	829a      	strh	r2, [r3, #20]
  }
}
 800f24c:	f107 070c 	add.w	r7, r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	bc80      	pop	{r7}
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop

0800f258 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	8a9b      	ldrh	r3, [r3, #20]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	f023 0304 	bic.w	r3, r3, #4
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	8a9b      	ldrh	r3, [r3, #20]
 800f278:	b29a      	uxth	r2, r3
 800f27a:	887b      	ldrh	r3, [r7, #2]
 800f27c:	4313      	orrs	r3, r2
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	829a      	strh	r2, [r3, #20]
}
 800f284:	f107 070c 	add.w	r7, r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	bc80      	pop	{r7}
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop

0800f290 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800f29c:	78fb      	ldrb	r3, [r7, #3]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d008      	beq.n	800f2b4 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	8a9b      	ldrh	r3, [r3, #20]
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	f043 0302 	orr.w	r3, r3, #2
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	829a      	strh	r2, [r3, #20]
 800f2b2:	e007      	b.n	800f2c4 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	8a9b      	ldrh	r3, [r3, #20]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	f023 0302 	bic.w	r3, r3, #2
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	829a      	strh	r2, [r3, #20]
  }
}
 800f2c4:	f107 070c 	add.w	r7, r7, #12
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bc80      	pop	{r7}
 800f2cc:	4770      	bx	lr
 800f2ce:	bf00      	nop

0800f2d0 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	4613      	mov	r3, r2
 800f2da:	460a      	mov	r2, r1
 800f2dc:	807a      	strh	r2, [r7, #2]
 800f2de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800f2e0:	787b      	ldrb	r3, [r7, #1]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d008      	beq.n	800f2f8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	8a9b      	ldrh	r3, [r3, #20]
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	887b      	ldrh	r3, [r7, #2]
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	829a      	strh	r2, [r3, #20]
 800f2f6:	e00a      	b.n	800f30e <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	8a9b      	ldrh	r3, [r3, #20]
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	887b      	ldrh	r3, [r7, #2]
 800f300:	ea6f 0303 	mvn.w	r3, r3
 800f304:	b29b      	uxth	r3, r3
 800f306:	4013      	ands	r3, r2
 800f308:	b29a      	uxth	r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	829a      	strh	r2, [r3, #20]
  }
}
 800f30e:	f107 070c 	add.w	r7, r7, #12
 800f312:	46bd      	mov	sp, r7
 800f314:	bc80      	pop	{r7}
 800f316:	4770      	bx	lr

0800f318 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800f318:	b480      	push	{r7}
 800f31a:	b087      	sub	sp, #28
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	4613      	mov	r3, r2
 800f322:	460a      	mov	r2, r1
 800f324:	807a      	strh	r2, [r7, #2]
 800f326:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800f328:	f04f 0300 	mov.w	r3, #0
 800f32c:	613b      	str	r3, [r7, #16]
 800f32e:	f04f 0300 	mov.w	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	f04f 0300 	mov.w	r3, #0
 800f338:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800f33a:	f04f 0300 	mov.w	r3, #0
 800f33e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800f344:	887b      	ldrh	r3, [r7, #2]
 800f346:	b2db      	uxtb	r3, r3
 800f348:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800f350:	887b      	ldrh	r3, [r7, #2]
 800f352:	f003 031f 	and.w	r3, r3, #31
 800f356:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f04f 0201 	mov.w	r2, #1
 800f35e:	fa02 f303 	lsl.w	r3, r2, r3
 800f362:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2b01      	cmp	r3, #1
 800f368:	d104      	bne.n	800f374 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	f103 030c 	add.w	r3, r3, #12
 800f370:	617b      	str	r3, [r7, #20]
 800f372:	e00b      	b.n	800f38c <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	2b02      	cmp	r3, #2
 800f378:	d104      	bne.n	800f384 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f103 0310 	add.w	r3, r3, #16
 800f380:	617b      	str	r3, [r7, #20]
 800f382:	e003      	b.n	800f38c <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	f103 0314 	add.w	r3, r3, #20
 800f38a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800f38c:	787b      	ldrb	r3, [r7, #1]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d006      	beq.n	800f3a0 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	697a      	ldr	r2, [r7, #20]
 800f396:	6811      	ldr	r1, [r2, #0]
 800f398:	68ba      	ldr	r2, [r7, #8]
 800f39a:	430a      	orrs	r2, r1
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	e007      	b.n	800f3b0 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	697a      	ldr	r2, [r7, #20]
 800f3a4:	6811      	ldr	r1, [r2, #0]
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	ea6f 0202 	mvn.w	r2, r2
 800f3ac:	400a      	ands	r2, r1
 800f3ae:	601a      	str	r2, [r3, #0]
  }
}
 800f3b0:	f107 071c 	add.w	r7, r7, #28
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bc80      	pop	{r7}
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop

0800f3bc <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800f3c8:	f04f 0300 	mov.w	r3, #0
 800f3cc:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	887b      	ldrh	r3, [r7, #2]
 800f3d6:	4013      	ands	r3, r2
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d003      	beq.n	800f3e6 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800f3de:	f04f 0301 	mov.w	r3, #1
 800f3e2:	73fb      	strb	r3, [r7, #15]
 800f3e4:	e002      	b.n	800f3ec <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800f3e6:	f04f 0300 	mov.w	r3, #0
 800f3ea:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f107 0714 	add.w	r7, r7, #20
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bc80      	pop	{r7}
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop

0800f3fc <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	460b      	mov	r3, r1
 800f406:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800f408:	887b      	ldrh	r3, [r7, #2]
 800f40a:	ea6f 0303 	mvn.w	r3, r3
 800f40e:	b29a      	uxth	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	801a      	strh	r2, [r3, #0]
}
 800f414:	f107 070c 	add.w	r7, r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	bc80      	pop	{r7}
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop

0800f420 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800f420:	b480      	push	{r7}
 800f422:	b087      	sub	sp, #28
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	460b      	mov	r3, r1
 800f42a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800f42c:	f04f 0300 	mov.w	r3, #0
 800f430:	60fb      	str	r3, [r7, #12]
 800f432:	f04f 0300 	mov.w	r3, #0
 800f436:	617b      	str	r3, [r7, #20]
 800f438:	f04f 0300 	mov.w	r3, #0
 800f43c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800f43e:	f04f 0300 	mov.w	r3, #0
 800f442:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800f444:	887b      	ldrh	r3, [r7, #2]
 800f446:	b2db      	uxtb	r3, r3
 800f448:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800f450:	887b      	ldrh	r3, [r7, #2]
 800f452:	f003 031f 	and.w	r3, r3, #31
 800f456:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	f04f 0201 	mov.w	r2, #1
 800f45e:	fa02 f303 	lsl.w	r3, r2, r3
 800f462:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d106      	bne.n	800f478 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	899b      	ldrh	r3, [r3, #12]
 800f46e:	b29b      	uxth	r3, r3
 800f470:	697a      	ldr	r2, [r7, #20]
 800f472:	4013      	ands	r3, r2
 800f474:	617b      	str	r3, [r7, #20]
 800f476:	e00f      	b.n	800f498 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	2b02      	cmp	r3, #2
 800f47c:	d106      	bne.n	800f48c <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	8a1b      	ldrh	r3, [r3, #16]
 800f482:	b29b      	uxth	r3, r3
 800f484:	697a      	ldr	r2, [r7, #20]
 800f486:	4013      	ands	r3, r2
 800f488:	617b      	str	r3, [r7, #20]
 800f48a:	e005      	b.n	800f498 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	8a9b      	ldrh	r3, [r3, #20]
 800f490:	b29b      	uxth	r3, r3
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	4013      	ands	r3, r2
 800f496:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800f498:	887b      	ldrh	r3, [r7, #2]
 800f49a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f04f 0201 	mov.w	r2, #1
 800f4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f4ac:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	881b      	ldrh	r3, [r3, #0]
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	4013      	ands	r3, r2
 800f4b8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d006      	beq.n	800f4ce <USART_GetITStatus+0xae>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d003      	beq.n	800f4ce <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 800f4c6:	f04f 0301 	mov.w	r3, #1
 800f4ca:	74fb      	strb	r3, [r7, #19]
 800f4cc:	e002      	b.n	800f4d4 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 800f4ce:	f04f 0300 	mov.w	r3, #0
 800f4d2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800f4d4:	7cfb      	ldrb	r3, [r7, #19]
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f107 071c 	add.w	r7, r7, #28
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bc80      	pop	{r7}
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop

0800f4e4 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800f4f0:	f04f 0300 	mov.w	r3, #0
 800f4f4:	81fb      	strh	r3, [r7, #14]
 800f4f6:	f04f 0300 	mov.w	r3, #0
 800f4fa:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800f4fc:	887b      	ldrh	r3, [r7, #2]
 800f4fe:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f502:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800f504:	89fb      	ldrh	r3, [r7, #14]
 800f506:	f04f 0201 	mov.w	r2, #1
 800f50a:	fa02 f303 	lsl.w	r3, r2, r3
 800f50e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800f510:	89bb      	ldrh	r3, [r7, #12]
 800f512:	ea6f 0303 	mvn.w	r3, r3
 800f516:	b29a      	uxth	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	801a      	strh	r2, [r3, #0]
}
 800f51c:	f107 0714 	add.w	r7, r7, #20
 800f520:	46bd      	mov	sp, r7
 800f522:	bc80      	pop	{r7}
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop

0800f528 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800f52c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f530:	f04f 0101 	mov.w	r1, #1
 800f534:	f7fa fe56 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800f538:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f53c:	f04f 0100 	mov.w	r1, #0
 800f540:	f7fa fe50 	bl	800a1e4 <RCC_APB1PeriphResetCmd>
}
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop

0800f548 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f550:	f04f 0300 	mov.w	r3, #0
 800f554:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 800f556:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f55a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800f564:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800f566:	68fa      	ldr	r2, [r7, #12]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4313      	orrs	r3, r2
 800f56c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800f56e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f572:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	605a      	str	r2, [r3, #4]
}
 800f57a:	f107 0714 	add.w	r7, r7, #20
 800f57e:	46bd      	mov	sp, r7
 800f580:	bc80      	pop	{r7}
 800f582:	4770      	bx	lr

0800f584 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 800f58e:	f04f 0300 	mov.w	r3, #0
 800f592:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 800f594:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f598:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f5a2:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800f5a4:	79fb      	ldrb	r3, [r7, #7]
 800f5a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800f5b0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f5b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	605a      	str	r2, [r3, #4]
}
 800f5bc:	f107 0714 	add.w	r7, r7, #20
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bc80      	pop	{r7}
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop

0800f5c8 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800f5cc:	f248 03a4 	movw	r3, #32932	; 0x80a4
 800f5d0:	f2c4 2305 	movt	r3, #16901	; 0x4205
 800f5d4:	f04f 0201 	mov.w	r2, #1
 800f5d8:	601a      	str	r2, [r3, #0]
}
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bc80      	pop	{r7}
 800f5de:	4770      	bx	lr

0800f5e0 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800f5ea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f5ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f5f2:	79fa      	ldrb	r2, [r7, #7]
 800f5f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f5f8:	601a      	str	r2, [r3, #0]
}
 800f5fa:	f107 070c 	add.w	r7, r7, #12
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bc80      	pop	{r7}
 800f602:	4770      	bx	lr

0800f604 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	4603      	mov	r3, r0
 800f60c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800f60e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f612:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f616:	79fa      	ldrb	r2, [r7, #7]
 800f618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f61c:	b2d2      	uxtb	r2, r2
 800f61e:	601a      	str	r2, [r3, #0]
}
 800f620:	f107 070c 	add.w	r7, r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	bc80      	pop	{r7}
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop

0800f62c <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800f632:	f04f 0300 	mov.w	r3, #0
 800f636:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800f638:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f63c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d003      	beq.n	800f64e <WWDG_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 800f646:	f04f 0301 	mov.w	r3, #1
 800f64a:	71fb      	strb	r3, [r7, #7]
 800f64c:	e002      	b.n	800f654 <WWDG_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800f64e:	f04f 0300 	mov.w	r3, #0
 800f652:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800f654:	79fb      	ldrb	r3, [r7, #7]
}
 800f656:	4618      	mov	r0, r3
 800f658:	f107 070c 	add.w	r7, r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bc80      	pop	{r7}
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop

0800f664 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 800f664:	b480      	push	{r7}
 800f666:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 800f668:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f66c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f670:	f04f 0200 	mov.w	r2, #0
 800f674:	609a      	str	r2, [r3, #8]
}
 800f676:	46bd      	mov	sp, r7
 800f678:	bc80      	pop	{r7}
 800f67a:	4770      	bx	lr

0800f67c <__aeabi_drsub>:
 800f67c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800f680:	e002      	b.n	800f688 <__adddf3>
 800f682:	bf00      	nop

0800f684 <__aeabi_dsub>:
 800f684:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800f688 <__adddf3>:
 800f688:	b530      	push	{r4, r5, lr}
 800f68a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800f68e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800f692:	ea94 0f05 	teq	r4, r5
 800f696:	bf08      	it	eq
 800f698:	ea90 0f02 	teqeq	r0, r2
 800f69c:	bf1f      	itttt	ne
 800f69e:	ea54 0c00 	orrsne.w	ip, r4, r0
 800f6a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 800f6a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800f6aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800f6ae:	f000 80e2 	beq.w	800f876 <__adddf3+0x1ee>
 800f6b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800f6b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800f6ba:	bfb8      	it	lt
 800f6bc:	426d      	neglt	r5, r5
 800f6be:	dd0c      	ble.n	800f6da <__adddf3+0x52>
 800f6c0:	442c      	add	r4, r5
 800f6c2:	ea80 0202 	eor.w	r2, r0, r2
 800f6c6:	ea81 0303 	eor.w	r3, r1, r3
 800f6ca:	ea82 0000 	eor.w	r0, r2, r0
 800f6ce:	ea83 0101 	eor.w	r1, r3, r1
 800f6d2:	ea80 0202 	eor.w	r2, r0, r2
 800f6d6:	ea81 0303 	eor.w	r3, r1, r3
 800f6da:	2d36      	cmp	r5, #54	; 0x36
 800f6dc:	bf88      	it	hi
 800f6de:	bd30      	pophi	{r4, r5, pc}
 800f6e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800f6e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800f6e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800f6ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800f6f0:	d002      	beq.n	800f6f8 <__adddf3+0x70>
 800f6f2:	4240      	negs	r0, r0
 800f6f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800f6f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800f6fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800f700:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800f704:	d002      	beq.n	800f70c <__adddf3+0x84>
 800f706:	4252      	negs	r2, r2
 800f708:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800f70c:	ea94 0f05 	teq	r4, r5
 800f710:	f000 80a7 	beq.w	800f862 <__adddf3+0x1da>
 800f714:	f1a4 0401 	sub.w	r4, r4, #1
 800f718:	f1d5 0e20 	rsbs	lr, r5, #32
 800f71c:	db0d      	blt.n	800f73a <__adddf3+0xb2>
 800f71e:	fa02 fc0e 	lsl.w	ip, r2, lr
 800f722:	fa22 f205 	lsr.w	r2, r2, r5
 800f726:	1880      	adds	r0, r0, r2
 800f728:	f141 0100 	adc.w	r1, r1, #0
 800f72c:	fa03 f20e 	lsl.w	r2, r3, lr
 800f730:	1880      	adds	r0, r0, r2
 800f732:	fa43 f305 	asr.w	r3, r3, r5
 800f736:	4159      	adcs	r1, r3
 800f738:	e00e      	b.n	800f758 <__adddf3+0xd0>
 800f73a:	f1a5 0520 	sub.w	r5, r5, #32
 800f73e:	f10e 0e20 	add.w	lr, lr, #32
 800f742:	2a01      	cmp	r2, #1
 800f744:	fa03 fc0e 	lsl.w	ip, r3, lr
 800f748:	bf28      	it	cs
 800f74a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800f74e:	fa43 f305 	asr.w	r3, r3, r5
 800f752:	18c0      	adds	r0, r0, r3
 800f754:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800f758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800f75c:	d507      	bpl.n	800f76e <__adddf3+0xe6>
 800f75e:	f04f 0e00 	mov.w	lr, #0
 800f762:	f1dc 0c00 	rsbs	ip, ip, #0
 800f766:	eb7e 0000 	sbcs.w	r0, lr, r0
 800f76a:	eb6e 0101 	sbc.w	r1, lr, r1
 800f76e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f772:	d31b      	bcc.n	800f7ac <__adddf3+0x124>
 800f774:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800f778:	d30c      	bcc.n	800f794 <__adddf3+0x10c>
 800f77a:	0849      	lsrs	r1, r1, #1
 800f77c:	ea5f 0030 	movs.w	r0, r0, rrx
 800f780:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800f784:	f104 0401 	add.w	r4, r4, #1
 800f788:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800f78c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800f790:	f080 809a 	bcs.w	800f8c8 <__adddf3+0x240>
 800f794:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800f798:	bf08      	it	eq
 800f79a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800f79e:	f150 0000 	adcs.w	r0, r0, #0
 800f7a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800f7a6:	ea41 0105 	orr.w	r1, r1, r5
 800f7aa:	bd30      	pop	{r4, r5, pc}
 800f7ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800f7b0:	4140      	adcs	r0, r0
 800f7b2:	eb41 0101 	adc.w	r1, r1, r1
 800f7b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800f7ba:	f1a4 0401 	sub.w	r4, r4, #1
 800f7be:	d1e9      	bne.n	800f794 <__adddf3+0x10c>
 800f7c0:	f091 0f00 	teq	r1, #0
 800f7c4:	bf04      	itt	eq
 800f7c6:	4601      	moveq	r1, r0
 800f7c8:	2000      	moveq	r0, #0
 800f7ca:	fab1 f381 	clz	r3, r1
 800f7ce:	bf08      	it	eq
 800f7d0:	3320      	addeq	r3, #32
 800f7d2:	f1a3 030b 	sub.w	r3, r3, #11
 800f7d6:	f1b3 0220 	subs.w	r2, r3, #32
 800f7da:	da0c      	bge.n	800f7f6 <__adddf3+0x16e>
 800f7dc:	320c      	adds	r2, #12
 800f7de:	dd08      	ble.n	800f7f2 <__adddf3+0x16a>
 800f7e0:	f102 0c14 	add.w	ip, r2, #20
 800f7e4:	f1c2 020c 	rsb	r2, r2, #12
 800f7e8:	fa01 f00c 	lsl.w	r0, r1, ip
 800f7ec:	fa21 f102 	lsr.w	r1, r1, r2
 800f7f0:	e00c      	b.n	800f80c <__adddf3+0x184>
 800f7f2:	f102 0214 	add.w	r2, r2, #20
 800f7f6:	bfd8      	it	le
 800f7f8:	f1c2 0c20 	rsble	ip, r2, #32
 800f7fc:	fa01 f102 	lsl.w	r1, r1, r2
 800f800:	fa20 fc0c 	lsr.w	ip, r0, ip
 800f804:	bfdc      	itt	le
 800f806:	ea41 010c 	orrle.w	r1, r1, ip
 800f80a:	4090      	lslle	r0, r2
 800f80c:	1ae4      	subs	r4, r4, r3
 800f80e:	bfa2      	ittt	ge
 800f810:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800f814:	4329      	orrge	r1, r5
 800f816:	bd30      	popge	{r4, r5, pc}
 800f818:	ea6f 0404 	mvn.w	r4, r4
 800f81c:	3c1f      	subs	r4, #31
 800f81e:	da1c      	bge.n	800f85a <__adddf3+0x1d2>
 800f820:	340c      	adds	r4, #12
 800f822:	dc0e      	bgt.n	800f842 <__adddf3+0x1ba>
 800f824:	f104 0414 	add.w	r4, r4, #20
 800f828:	f1c4 0220 	rsb	r2, r4, #32
 800f82c:	fa20 f004 	lsr.w	r0, r0, r4
 800f830:	fa01 f302 	lsl.w	r3, r1, r2
 800f834:	ea40 0003 	orr.w	r0, r0, r3
 800f838:	fa21 f304 	lsr.w	r3, r1, r4
 800f83c:	ea45 0103 	orr.w	r1, r5, r3
 800f840:	bd30      	pop	{r4, r5, pc}
 800f842:	f1c4 040c 	rsb	r4, r4, #12
 800f846:	f1c4 0220 	rsb	r2, r4, #32
 800f84a:	fa20 f002 	lsr.w	r0, r0, r2
 800f84e:	fa01 f304 	lsl.w	r3, r1, r4
 800f852:	ea40 0003 	orr.w	r0, r0, r3
 800f856:	4629      	mov	r1, r5
 800f858:	bd30      	pop	{r4, r5, pc}
 800f85a:	fa21 f004 	lsr.w	r0, r1, r4
 800f85e:	4629      	mov	r1, r5
 800f860:	bd30      	pop	{r4, r5, pc}
 800f862:	f094 0f00 	teq	r4, #0
 800f866:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800f86a:	bf06      	itte	eq
 800f86c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800f870:	3401      	addeq	r4, #1
 800f872:	3d01      	subne	r5, #1
 800f874:	e74e      	b.n	800f714 <__adddf3+0x8c>
 800f876:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800f87a:	bf18      	it	ne
 800f87c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800f880:	d029      	beq.n	800f8d6 <__adddf3+0x24e>
 800f882:	ea94 0f05 	teq	r4, r5
 800f886:	bf08      	it	eq
 800f888:	ea90 0f02 	teqeq	r0, r2
 800f88c:	d005      	beq.n	800f89a <__adddf3+0x212>
 800f88e:	ea54 0c00 	orrs.w	ip, r4, r0
 800f892:	bf04      	itt	eq
 800f894:	4619      	moveq	r1, r3
 800f896:	4610      	moveq	r0, r2
 800f898:	bd30      	pop	{r4, r5, pc}
 800f89a:	ea91 0f03 	teq	r1, r3
 800f89e:	bf1e      	ittt	ne
 800f8a0:	2100      	movne	r1, #0
 800f8a2:	2000      	movne	r0, #0
 800f8a4:	bd30      	popne	{r4, r5, pc}
 800f8a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800f8aa:	d105      	bne.n	800f8b8 <__adddf3+0x230>
 800f8ac:	0040      	lsls	r0, r0, #1
 800f8ae:	4149      	adcs	r1, r1
 800f8b0:	bf28      	it	cs
 800f8b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800f8b6:	bd30      	pop	{r4, r5, pc}
 800f8b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800f8bc:	bf3c      	itt	cc
 800f8be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800f8c2:	bd30      	popcc	{r4, r5, pc}
 800f8c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800f8c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800f8cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f8d0:	f04f 0000 	mov.w	r0, #0
 800f8d4:	bd30      	pop	{r4, r5, pc}
 800f8d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800f8da:	bf1a      	itte	ne
 800f8dc:	4619      	movne	r1, r3
 800f8de:	4610      	movne	r0, r2
 800f8e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800f8e4:	bf1c      	itt	ne
 800f8e6:	460b      	movne	r3, r1
 800f8e8:	4602      	movne	r2, r0
 800f8ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800f8ee:	bf06      	itte	eq
 800f8f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800f8f4:	ea91 0f03 	teqeq	r1, r3
 800f8f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800f8fc:	bd30      	pop	{r4, r5, pc}
 800f8fe:	bf00      	nop

0800f900 <__aeabi_ui2d>:
 800f900:	f090 0f00 	teq	r0, #0
 800f904:	bf04      	itt	eq
 800f906:	2100      	moveq	r1, #0
 800f908:	4770      	bxeq	lr
 800f90a:	b530      	push	{r4, r5, lr}
 800f90c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800f910:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800f914:	f04f 0500 	mov.w	r5, #0
 800f918:	f04f 0100 	mov.w	r1, #0
 800f91c:	e750      	b.n	800f7c0 <__adddf3+0x138>
 800f91e:	bf00      	nop

0800f920 <__aeabi_i2d>:
 800f920:	f090 0f00 	teq	r0, #0
 800f924:	bf04      	itt	eq
 800f926:	2100      	moveq	r1, #0
 800f928:	4770      	bxeq	lr
 800f92a:	b530      	push	{r4, r5, lr}
 800f92c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800f930:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800f934:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800f938:	bf48      	it	mi
 800f93a:	4240      	negmi	r0, r0
 800f93c:	f04f 0100 	mov.w	r1, #0
 800f940:	e73e      	b.n	800f7c0 <__adddf3+0x138>
 800f942:	bf00      	nop

0800f944 <__aeabi_f2d>:
 800f944:	0042      	lsls	r2, r0, #1
 800f946:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800f94a:	ea4f 0131 	mov.w	r1, r1, rrx
 800f94e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800f952:	bf1f      	itttt	ne
 800f954:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800f958:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800f95c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800f960:	4770      	bxne	lr
 800f962:	f092 0f00 	teq	r2, #0
 800f966:	bf14      	ite	ne
 800f968:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800f96c:	4770      	bxeq	lr
 800f96e:	b530      	push	{r4, r5, lr}
 800f970:	f44f 7460 	mov.w	r4, #896	; 0x380
 800f974:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800f978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f97c:	e720      	b.n	800f7c0 <__adddf3+0x138>
 800f97e:	bf00      	nop

0800f980 <__aeabi_ul2d>:
 800f980:	ea50 0201 	orrs.w	r2, r0, r1
 800f984:	bf08      	it	eq
 800f986:	4770      	bxeq	lr
 800f988:	b530      	push	{r4, r5, lr}
 800f98a:	f04f 0500 	mov.w	r5, #0
 800f98e:	e00a      	b.n	800f9a6 <__aeabi_l2d+0x16>

0800f990 <__aeabi_l2d>:
 800f990:	ea50 0201 	orrs.w	r2, r0, r1
 800f994:	bf08      	it	eq
 800f996:	4770      	bxeq	lr
 800f998:	b530      	push	{r4, r5, lr}
 800f99a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800f99e:	d502      	bpl.n	800f9a6 <__aeabi_l2d+0x16>
 800f9a0:	4240      	negs	r0, r0
 800f9a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800f9a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800f9aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800f9ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800f9b2:	f43f aedc 	beq.w	800f76e <__adddf3+0xe6>
 800f9b6:	f04f 0203 	mov.w	r2, #3
 800f9ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800f9be:	bf18      	it	ne
 800f9c0:	3203      	addne	r2, #3
 800f9c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800f9c6:	bf18      	it	ne
 800f9c8:	3203      	addne	r2, #3
 800f9ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800f9ce:	f1c2 0320 	rsb	r3, r2, #32
 800f9d2:	fa00 fc03 	lsl.w	ip, r0, r3
 800f9d6:	fa20 f002 	lsr.w	r0, r0, r2
 800f9da:	fa01 fe03 	lsl.w	lr, r1, r3
 800f9de:	ea40 000e 	orr.w	r0, r0, lr
 800f9e2:	fa21 f102 	lsr.w	r1, r1, r2
 800f9e6:	4414      	add	r4, r2
 800f9e8:	e6c1      	b.n	800f76e <__adddf3+0xe6>
 800f9ea:	bf00      	nop

0800f9ec <__aeabi_dmul>:
 800f9ec:	b570      	push	{r4, r5, r6, lr}
 800f9ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800f9f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800f9f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800f9fa:	bf1d      	ittte	ne
 800f9fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800fa00:	ea94 0f0c 	teqne	r4, ip
 800fa04:	ea95 0f0c 	teqne	r5, ip
 800fa08:	f000 f8de 	bleq	800fbc8 <__aeabi_dmul+0x1dc>
 800fa0c:	442c      	add	r4, r5
 800fa0e:	ea81 0603 	eor.w	r6, r1, r3
 800fa12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800fa16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800fa1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800fa1e:	bf18      	it	ne
 800fa20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800fa24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fa28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa2c:	d038      	beq.n	800faa0 <__aeabi_dmul+0xb4>
 800fa2e:	fba0 ce02 	umull	ip, lr, r0, r2
 800fa32:	f04f 0500 	mov.w	r5, #0
 800fa36:	fbe1 e502 	umlal	lr, r5, r1, r2
 800fa3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800fa3e:	fbe0 e503 	umlal	lr, r5, r0, r3
 800fa42:	f04f 0600 	mov.w	r6, #0
 800fa46:	fbe1 5603 	umlal	r5, r6, r1, r3
 800fa4a:	f09c 0f00 	teq	ip, #0
 800fa4e:	bf18      	it	ne
 800fa50:	f04e 0e01 	orrne.w	lr, lr, #1
 800fa54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800fa58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800fa5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800fa60:	d204      	bcs.n	800fa6c <__aeabi_dmul+0x80>
 800fa62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800fa66:	416d      	adcs	r5, r5
 800fa68:	eb46 0606 	adc.w	r6, r6, r6
 800fa6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800fa70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800fa74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800fa78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800fa7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800fa80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800fa84:	bf88      	it	hi
 800fa86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800fa8a:	d81e      	bhi.n	800faca <__aeabi_dmul+0xde>
 800fa8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800fa90:	bf08      	it	eq
 800fa92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800fa96:	f150 0000 	adcs.w	r0, r0, #0
 800fa9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800fa9e:	bd70      	pop	{r4, r5, r6, pc}
 800faa0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800faa4:	ea46 0101 	orr.w	r1, r6, r1
 800faa8:	ea40 0002 	orr.w	r0, r0, r2
 800faac:	ea81 0103 	eor.w	r1, r1, r3
 800fab0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800fab4:	bfc2      	ittt	gt
 800fab6:	ebd4 050c 	rsbsgt	r5, r4, ip
 800faba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800fabe:	bd70      	popgt	{r4, r5, r6, pc}
 800fac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fac4:	f04f 0e00 	mov.w	lr, #0
 800fac8:	3c01      	subs	r4, #1
 800faca:	f300 80ab 	bgt.w	800fc24 <__aeabi_dmul+0x238>
 800face:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800fad2:	bfde      	ittt	le
 800fad4:	2000      	movle	r0, #0
 800fad6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800fada:	bd70      	pople	{r4, r5, r6, pc}
 800fadc:	f1c4 0400 	rsb	r4, r4, #0
 800fae0:	3c20      	subs	r4, #32
 800fae2:	da35      	bge.n	800fb50 <__aeabi_dmul+0x164>
 800fae4:	340c      	adds	r4, #12
 800fae6:	dc1b      	bgt.n	800fb20 <__aeabi_dmul+0x134>
 800fae8:	f104 0414 	add.w	r4, r4, #20
 800faec:	f1c4 0520 	rsb	r5, r4, #32
 800faf0:	fa00 f305 	lsl.w	r3, r0, r5
 800faf4:	fa20 f004 	lsr.w	r0, r0, r4
 800faf8:	fa01 f205 	lsl.w	r2, r1, r5
 800fafc:	ea40 0002 	orr.w	r0, r0, r2
 800fb00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800fb04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fb08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800fb0c:	fa21 f604 	lsr.w	r6, r1, r4
 800fb10:	eb42 0106 	adc.w	r1, r2, r6
 800fb14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800fb18:	bf08      	it	eq
 800fb1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800fb1e:	bd70      	pop	{r4, r5, r6, pc}
 800fb20:	f1c4 040c 	rsb	r4, r4, #12
 800fb24:	f1c4 0520 	rsb	r5, r4, #32
 800fb28:	fa00 f304 	lsl.w	r3, r0, r4
 800fb2c:	fa20 f005 	lsr.w	r0, r0, r5
 800fb30:	fa01 f204 	lsl.w	r2, r1, r4
 800fb34:	ea40 0002 	orr.w	r0, r0, r2
 800fb38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800fb3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800fb40:	f141 0100 	adc.w	r1, r1, #0
 800fb44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800fb48:	bf08      	it	eq
 800fb4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800fb4e:	bd70      	pop	{r4, r5, r6, pc}
 800fb50:	f1c4 0520 	rsb	r5, r4, #32
 800fb54:	fa00 f205 	lsl.w	r2, r0, r5
 800fb58:	ea4e 0e02 	orr.w	lr, lr, r2
 800fb5c:	fa20 f304 	lsr.w	r3, r0, r4
 800fb60:	fa01 f205 	lsl.w	r2, r1, r5
 800fb64:	ea43 0302 	orr.w	r3, r3, r2
 800fb68:	fa21 f004 	lsr.w	r0, r1, r4
 800fb6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800fb70:	fa21 f204 	lsr.w	r2, r1, r4
 800fb74:	ea20 0002 	bic.w	r0, r0, r2
 800fb78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800fb7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800fb80:	bf08      	it	eq
 800fb82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800fb86:	bd70      	pop	{r4, r5, r6, pc}
 800fb88:	f094 0f00 	teq	r4, #0
 800fb8c:	d10f      	bne.n	800fbae <__aeabi_dmul+0x1c2>
 800fb8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800fb92:	0040      	lsls	r0, r0, #1
 800fb94:	eb41 0101 	adc.w	r1, r1, r1
 800fb98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800fb9c:	bf08      	it	eq
 800fb9e:	3c01      	subeq	r4, #1
 800fba0:	d0f7      	beq.n	800fb92 <__aeabi_dmul+0x1a6>
 800fba2:	ea41 0106 	orr.w	r1, r1, r6
 800fba6:	f095 0f00 	teq	r5, #0
 800fbaa:	bf18      	it	ne
 800fbac:	4770      	bxne	lr
 800fbae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800fbb2:	0052      	lsls	r2, r2, #1
 800fbb4:	eb43 0303 	adc.w	r3, r3, r3
 800fbb8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800fbbc:	bf08      	it	eq
 800fbbe:	3d01      	subeq	r5, #1
 800fbc0:	d0f7      	beq.n	800fbb2 <__aeabi_dmul+0x1c6>
 800fbc2:	ea43 0306 	orr.w	r3, r3, r6
 800fbc6:	4770      	bx	lr
 800fbc8:	ea94 0f0c 	teq	r4, ip
 800fbcc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800fbd0:	bf18      	it	ne
 800fbd2:	ea95 0f0c 	teqne	r5, ip
 800fbd6:	d00c      	beq.n	800fbf2 <__aeabi_dmul+0x206>
 800fbd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800fbdc:	bf18      	it	ne
 800fbde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800fbe2:	d1d1      	bne.n	800fb88 <__aeabi_dmul+0x19c>
 800fbe4:	ea81 0103 	eor.w	r1, r1, r3
 800fbe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800fbec:	f04f 0000 	mov.w	r0, #0
 800fbf0:	bd70      	pop	{r4, r5, r6, pc}
 800fbf2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800fbf6:	bf06      	itte	eq
 800fbf8:	4610      	moveq	r0, r2
 800fbfa:	4619      	moveq	r1, r3
 800fbfc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800fc00:	d019      	beq.n	800fc36 <__aeabi_dmul+0x24a>
 800fc02:	ea94 0f0c 	teq	r4, ip
 800fc06:	d102      	bne.n	800fc0e <__aeabi_dmul+0x222>
 800fc08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800fc0c:	d113      	bne.n	800fc36 <__aeabi_dmul+0x24a>
 800fc0e:	ea95 0f0c 	teq	r5, ip
 800fc12:	d105      	bne.n	800fc20 <__aeabi_dmul+0x234>
 800fc14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800fc18:	bf1c      	itt	ne
 800fc1a:	4610      	movne	r0, r2
 800fc1c:	4619      	movne	r1, r3
 800fc1e:	d10a      	bne.n	800fc36 <__aeabi_dmul+0x24a>
 800fc20:	ea81 0103 	eor.w	r1, r1, r3
 800fc24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800fc28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800fc2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fc30:	f04f 0000 	mov.w	r0, #0
 800fc34:	bd70      	pop	{r4, r5, r6, pc}
 800fc36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800fc3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}

0800fc40 <__aeabi_ddiv>:
 800fc40:	b570      	push	{r4, r5, r6, lr}
 800fc42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800fc46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800fc4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800fc4e:	bf1d      	ittte	ne
 800fc50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800fc54:	ea94 0f0c 	teqne	r4, ip
 800fc58:	ea95 0f0c 	teqne	r5, ip
 800fc5c:	f000 f8a7 	bleq	800fdae <__aeabi_ddiv+0x16e>
 800fc60:	eba4 0405 	sub.w	r4, r4, r5
 800fc64:	ea81 0e03 	eor.w	lr, r1, r3
 800fc68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800fc6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800fc70:	f000 8088 	beq.w	800fd84 <__aeabi_ddiv+0x144>
 800fc74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800fc78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800fc7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800fc80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800fc84:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800fc88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800fc8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800fc90:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800fc94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800fc98:	429d      	cmp	r5, r3
 800fc9a:	bf08      	it	eq
 800fc9c:	4296      	cmpeq	r6, r2
 800fc9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800fca2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800fca6:	d202      	bcs.n	800fcae <__aeabi_ddiv+0x6e>
 800fca8:	085b      	lsrs	r3, r3, #1
 800fcaa:	ea4f 0232 	mov.w	r2, r2, rrx
 800fcae:	1ab6      	subs	r6, r6, r2
 800fcb0:	eb65 0503 	sbc.w	r5, r5, r3
 800fcb4:	085b      	lsrs	r3, r3, #1
 800fcb6:	ea4f 0232 	mov.w	r2, r2, rrx
 800fcba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fcbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800fcc2:	ebb6 0e02 	subs.w	lr, r6, r2
 800fcc6:	eb75 0e03 	sbcs.w	lr, r5, r3
 800fcca:	bf22      	ittt	cs
 800fccc:	1ab6      	subcs	r6, r6, r2
 800fcce:	4675      	movcs	r5, lr
 800fcd0:	ea40 000c 	orrcs.w	r0, r0, ip
 800fcd4:	085b      	lsrs	r3, r3, #1
 800fcd6:	ea4f 0232 	mov.w	r2, r2, rrx
 800fcda:	ebb6 0e02 	subs.w	lr, r6, r2
 800fcde:	eb75 0e03 	sbcs.w	lr, r5, r3
 800fce2:	bf22      	ittt	cs
 800fce4:	1ab6      	subcs	r6, r6, r2
 800fce6:	4675      	movcs	r5, lr
 800fce8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800fcec:	085b      	lsrs	r3, r3, #1
 800fcee:	ea4f 0232 	mov.w	r2, r2, rrx
 800fcf2:	ebb6 0e02 	subs.w	lr, r6, r2
 800fcf6:	eb75 0e03 	sbcs.w	lr, r5, r3
 800fcfa:	bf22      	ittt	cs
 800fcfc:	1ab6      	subcs	r6, r6, r2
 800fcfe:	4675      	movcs	r5, lr
 800fd00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800fd04:	085b      	lsrs	r3, r3, #1
 800fd06:	ea4f 0232 	mov.w	r2, r2, rrx
 800fd0a:	ebb6 0e02 	subs.w	lr, r6, r2
 800fd0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800fd12:	bf22      	ittt	cs
 800fd14:	1ab6      	subcs	r6, r6, r2
 800fd16:	4675      	movcs	r5, lr
 800fd18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800fd1c:	ea55 0e06 	orrs.w	lr, r5, r6
 800fd20:	d018      	beq.n	800fd54 <__aeabi_ddiv+0x114>
 800fd22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800fd26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800fd2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800fd2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800fd32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800fd36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800fd3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800fd3e:	d1c0      	bne.n	800fcc2 <__aeabi_ddiv+0x82>
 800fd40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800fd44:	d10b      	bne.n	800fd5e <__aeabi_ddiv+0x11e>
 800fd46:	ea41 0100 	orr.w	r1, r1, r0
 800fd4a:	f04f 0000 	mov.w	r0, #0
 800fd4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800fd52:	e7b6      	b.n	800fcc2 <__aeabi_ddiv+0x82>
 800fd54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800fd58:	bf04      	itt	eq
 800fd5a:	4301      	orreq	r1, r0
 800fd5c:	2000      	moveq	r0, #0
 800fd5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800fd62:	bf88      	it	hi
 800fd64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800fd68:	f63f aeaf 	bhi.w	800faca <__aeabi_dmul+0xde>
 800fd6c:	ebb5 0c03 	subs.w	ip, r5, r3
 800fd70:	bf04      	itt	eq
 800fd72:	ebb6 0c02 	subseq.w	ip, r6, r2
 800fd76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800fd7a:	f150 0000 	adcs.w	r0, r0, #0
 800fd7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800fd82:	bd70      	pop	{r4, r5, r6, pc}
 800fd84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800fd88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800fd8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800fd90:	bfc2      	ittt	gt
 800fd92:	ebd4 050c 	rsbsgt	r5, r4, ip
 800fd96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800fd9a:	bd70      	popgt	{r4, r5, r6, pc}
 800fd9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fda0:	f04f 0e00 	mov.w	lr, #0
 800fda4:	3c01      	subs	r4, #1
 800fda6:	e690      	b.n	800faca <__aeabi_dmul+0xde>
 800fda8:	ea45 0e06 	orr.w	lr, r5, r6
 800fdac:	e68d      	b.n	800faca <__aeabi_dmul+0xde>
 800fdae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800fdb2:	ea94 0f0c 	teq	r4, ip
 800fdb6:	bf08      	it	eq
 800fdb8:	ea95 0f0c 	teqeq	r5, ip
 800fdbc:	f43f af3b 	beq.w	800fc36 <__aeabi_dmul+0x24a>
 800fdc0:	ea94 0f0c 	teq	r4, ip
 800fdc4:	d10a      	bne.n	800fddc <__aeabi_ddiv+0x19c>
 800fdc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800fdca:	f47f af34 	bne.w	800fc36 <__aeabi_dmul+0x24a>
 800fdce:	ea95 0f0c 	teq	r5, ip
 800fdd2:	f47f af25 	bne.w	800fc20 <__aeabi_dmul+0x234>
 800fdd6:	4610      	mov	r0, r2
 800fdd8:	4619      	mov	r1, r3
 800fdda:	e72c      	b.n	800fc36 <__aeabi_dmul+0x24a>
 800fddc:	ea95 0f0c 	teq	r5, ip
 800fde0:	d106      	bne.n	800fdf0 <__aeabi_ddiv+0x1b0>
 800fde2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800fde6:	f43f aefd 	beq.w	800fbe4 <__aeabi_dmul+0x1f8>
 800fdea:	4610      	mov	r0, r2
 800fdec:	4619      	mov	r1, r3
 800fdee:	e722      	b.n	800fc36 <__aeabi_dmul+0x24a>
 800fdf0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800fdf4:	bf18      	it	ne
 800fdf6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800fdfa:	f47f aec5 	bne.w	800fb88 <__aeabi_dmul+0x19c>
 800fdfe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800fe02:	f47f af0d 	bne.w	800fc20 <__aeabi_dmul+0x234>
 800fe06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800fe0a:	f47f aeeb 	bne.w	800fbe4 <__aeabi_dmul+0x1f8>
 800fe0e:	e712      	b.n	800fc36 <__aeabi_dmul+0x24a>

0800fe10 <__aeabi_d2f>:
 800fe10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800fe14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800fe18:	bf24      	itt	cs
 800fe1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800fe1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800fe22:	d90d      	bls.n	800fe40 <__aeabi_d2f+0x30>
 800fe24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800fe28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800fe2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800fe30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800fe34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800fe38:	bf08      	it	eq
 800fe3a:	f020 0001 	biceq.w	r0, r0, #1
 800fe3e:	4770      	bx	lr
 800fe40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800fe44:	d121      	bne.n	800fe8a <__aeabi_d2f+0x7a>
 800fe46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800fe4a:	bfbc      	itt	lt
 800fe4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800fe50:	4770      	bxlt	lr
 800fe52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fe56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800fe5a:	f1c2 0218 	rsb	r2, r2, #24
 800fe5e:	f1c2 0c20 	rsb	ip, r2, #32
 800fe62:	fa10 f30c 	lsls.w	r3, r0, ip
 800fe66:	fa20 f002 	lsr.w	r0, r0, r2
 800fe6a:	bf18      	it	ne
 800fe6c:	f040 0001 	orrne.w	r0, r0, #1
 800fe70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800fe74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800fe78:	fa03 fc0c 	lsl.w	ip, r3, ip
 800fe7c:	ea40 000c 	orr.w	r0, r0, ip
 800fe80:	fa23 f302 	lsr.w	r3, r3, r2
 800fe84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe88:	e7cc      	b.n	800fe24 <__aeabi_d2f+0x14>
 800fe8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800fe8e:	d107      	bne.n	800fea0 <__aeabi_d2f+0x90>
 800fe90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800fe94:	bf1e      	ittt	ne
 800fe96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800fe9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800fe9e:	4770      	bxne	lr
 800fea0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800fea4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800fea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop

0800feb0 <__errno>:
 800feb0:	f240 0338 	movw	r3, #56	; 0x38
 800feb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800feb8:	6818      	ldr	r0, [r3, #0]
 800feba:	4770      	bx	lr

0800febc <memset>:
 800febc:	f010 0f03 	tst.w	r0, #3
 800fec0:	4603      	mov	r3, r0
 800fec2:	b470      	push	{r4, r5, r6}
 800fec4:	d041      	beq.n	800ff4a <memset+0x8e>
 800fec6:	2a00      	cmp	r2, #0
 800fec8:	d03d      	beq.n	800ff46 <memset+0x8a>
 800feca:	b2ce      	uxtb	r6, r1
 800fecc:	e001      	b.n	800fed2 <memset+0x16>
 800fece:	2a00      	cmp	r2, #0
 800fed0:	d039      	beq.n	800ff46 <memset+0x8a>
 800fed2:	f803 6b01 	strb.w	r6, [r3], #1
 800fed6:	1e54      	subs	r4, r2, #1
 800fed8:	f013 0f03 	tst.w	r3, #3
 800fedc:	4622      	mov	r2, r4
 800fede:	461d      	mov	r5, r3
 800fee0:	d1f5      	bne.n	800fece <memset+0x12>
 800fee2:	2c03      	cmp	r4, #3
 800fee4:	d929      	bls.n	800ff3a <memset+0x7e>
 800fee6:	b2ca      	uxtb	r2, r1
 800fee8:	2c0f      	cmp	r4, #15
 800feea:	bf84      	itt	hi
 800feec:	462b      	movhi	r3, r5
 800feee:	4626      	movhi	r6, r4
 800fef0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 800fef4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800fef8:	d911      	bls.n	800ff1e <memset+0x62>
 800fefa:	3e10      	subs	r6, #16
 800fefc:	601a      	str	r2, [r3, #0]
 800fefe:	605a      	str	r2, [r3, #4]
 800ff00:	609a      	str	r2, [r3, #8]
 800ff02:	60da      	str	r2, [r3, #12]
 800ff04:	3310      	adds	r3, #16
 800ff06:	2e0f      	cmp	r6, #15
 800ff08:	d8f7      	bhi.n	800fefa <memset+0x3e>
 800ff0a:	f1a4 0310 	sub.w	r3, r4, #16
 800ff0e:	f004 040f 	and.w	r4, r4, #15
 800ff12:	f023 030f 	bic.w	r3, r3, #15
 800ff16:	3310      	adds	r3, #16
 800ff18:	2c03      	cmp	r4, #3
 800ff1a:	441d      	add	r5, r3
 800ff1c:	d90d      	bls.n	800ff3a <memset+0x7e>
 800ff1e:	462e      	mov	r6, r5
 800ff20:	4623      	mov	r3, r4
 800ff22:	3b04      	subs	r3, #4
 800ff24:	f846 2b04 	str.w	r2, [r6], #4
 800ff28:	2b03      	cmp	r3, #3
 800ff2a:	d8fa      	bhi.n	800ff22 <memset+0x66>
 800ff2c:	1f23      	subs	r3, r4, #4
 800ff2e:	f004 0403 	and.w	r4, r4, #3
 800ff32:	f023 0303 	bic.w	r3, r3, #3
 800ff36:	3304      	adds	r3, #4
 800ff38:	18ed      	adds	r5, r5, r3
 800ff3a:	b2c9      	uxtb	r1, r1
 800ff3c:	b11c      	cbz	r4, 800ff46 <memset+0x8a>
 800ff3e:	3c01      	subs	r4, #1
 800ff40:	f805 1b01 	strb.w	r1, [r5], #1
 800ff44:	d1fb      	bne.n	800ff3e <memset+0x82>
 800ff46:	bc70      	pop	{r4, r5, r6}
 800ff48:	4770      	bx	lr
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	4614      	mov	r4, r2
 800ff4e:	e7c8      	b.n	800fee2 <memset+0x26>

0800ff50 <_sprintf_r>:
 800ff50:	b40c      	push	{r2, r3}
 800ff52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff54:	b09d      	sub	sp, #116	; 0x74
 800ff56:	ac22      	add	r4, sp, #136	; 0x88
 800ff58:	460e      	mov	r6, r1
 800ff5a:	a901      	add	r1, sp, #4
 800ff5c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800ff60:	f854 2b04 	ldr.w	r2, [r4], #4
 800ff64:	f44f 7702 	mov.w	r7, #520	; 0x208
 800ff68:	9601      	str	r6, [sp, #4]
 800ff6a:	4623      	mov	r3, r4
 800ff6c:	9605      	str	r6, [sp, #20]
 800ff6e:	f8ad 7010 	strh.w	r7, [sp, #16]
 800ff72:	f04f 36ff 	mov.w	r6, #4294967295
 800ff76:	9503      	str	r5, [sp, #12]
 800ff78:	f8ad 6012 	strh.w	r6, [sp, #18]
 800ff7c:	9506      	str	r5, [sp, #24]
 800ff7e:	941b      	str	r4, [sp, #108]	; 0x6c
 800ff80:	f000 f830 	bl	800ffe4 <_svfprintf_r>
 800ff84:	9b01      	ldr	r3, [sp, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	701a      	strb	r2, [r3, #0]
 800ff8a:	b01d      	add	sp, #116	; 0x74
 800ff8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff90:	b002      	add	sp, #8
 800ff92:	4770      	bx	lr

0800ff94 <sprintf>:
 800ff94:	b40e      	push	{r1, r2, r3}
 800ff96:	f240 0338 	movw	r3, #56	; 0x38
 800ff9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff9c:	b09c      	sub	sp, #112	; 0x70
 800ff9e:	ac21      	add	r4, sp, #132	; 0x84
 800ffa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffa4:	4606      	mov	r6, r0
 800ffa6:	a901      	add	r1, sp, #4
 800ffa8:	f854 2b04 	ldr.w	r2, [r4], #4
 800ffac:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800ffb0:	6818      	ldr	r0, [r3, #0]
 800ffb2:	f44f 7702 	mov.w	r7, #520	; 0x208
 800ffb6:	4623      	mov	r3, r4
 800ffb8:	9601      	str	r6, [sp, #4]
 800ffba:	9605      	str	r6, [sp, #20]
 800ffbc:	f04f 36ff 	mov.w	r6, #4294967295
 800ffc0:	f8ad 7010 	strh.w	r7, [sp, #16]
 800ffc4:	f8ad 6012 	strh.w	r6, [sp, #18]
 800ffc8:	9503      	str	r5, [sp, #12]
 800ffca:	9506      	str	r5, [sp, #24]
 800ffcc:	941b      	str	r4, [sp, #108]	; 0x6c
 800ffce:	f000 f809 	bl	800ffe4 <_svfprintf_r>
 800ffd2:	9b01      	ldr	r3, [sp, #4]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	701a      	strb	r2, [r3, #0]
 800ffd8:	b01c      	add	sp, #112	; 0x70
 800ffda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ffde:	b003      	add	sp, #12
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop

0800ffe4 <_svfprintf_r>:
 800ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe8:	b0c9      	sub	sp, #292	; 0x124
 800ffea:	468b      	mov	fp, r1
 800ffec:	4692      	mov	sl, r2
 800ffee:	9310      	str	r3, [sp, #64]	; 0x40
 800fff0:	900e      	str	r0, [sp, #56]	; 0x38
 800fff2:	f002 f9d9 	bl	80123a8 <_localeconv_r>
 800fff6:	6800      	ldr	r0, [r0, #0]
 800fff8:	9019      	str	r0, [sp, #100]	; 0x64
 800fffa:	f003 fabb 	bl	8013574 <strlen>
 800fffe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8010002:	901c      	str	r0, [sp, #112]	; 0x70
 8010004:	0618      	lsls	r0, r3, #24
 8010006:	d504      	bpl.n	8010012 <_svfprintf_r+0x2e>
 8010008:	f8db 3010 	ldr.w	r3, [fp, #16]
 801000c:	2b00      	cmp	r3, #0
 801000e:	f001 8024 	beq.w	801105a <_svfprintf_r+0x1076>
 8010012:	ad3d      	add	r5, sp, #244	; 0xf4
 8010014:	9509      	str	r5, [sp, #36]	; 0x24
 8010016:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 801001a:	9508      	str	r5, [sp, #32]
 801001c:	f246 6567 	movw	r5, #26215	; 0x6667
 8010020:	9808      	ldr	r0, [sp, #32]
 8010022:	f2c6 6566 	movt	r5, #26214	; 0x6666
 8010026:	951e      	str	r5, [sp, #120]	; 0x78
 8010028:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801002a:	2300      	movs	r3, #0
 801002c:	ae23      	add	r6, sp, #140	; 0x8c
 801002e:	9311      	str	r3, [sp, #68]	; 0x44
 8010030:	1a2d      	subs	r5, r5, r0
 8010032:	9521      	str	r5, [sp, #132]	; 0x84
 8010034:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8010038:	931a      	str	r3, [sp, #104]	; 0x68
 801003a:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
 801003e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010040:	9320      	str	r3, [sp, #128]	; 0x80
 8010042:	931f      	str	r3, [sp, #124]	; 0x7c
 8010044:	930d      	str	r3, [sp, #52]	; 0x34
 8010046:	951d      	str	r5, [sp, #116]	; 0x74
 8010048:	963d      	str	r6, [sp, #244]	; 0xf4
 801004a:	933f      	str	r3, [sp, #252]	; 0xfc
 801004c:	933e      	str	r3, [sp, #248]	; 0xf8
 801004e:	f89a 3000 	ldrb.w	r3, [sl]
 8010052:	1c1a      	adds	r2, r3, #0
 8010054:	bf18      	it	ne
 8010056:	2201      	movne	r2, #1
 8010058:	2b25      	cmp	r3, #37	; 0x25
 801005a:	bf0c      	ite	eq
 801005c:	2300      	moveq	r3, #0
 801005e:	f002 0301 	andne.w	r3, r2, #1
 8010062:	2b00      	cmp	r3, #0
 8010064:	f000 80c5 	beq.w	80101f2 <_svfprintf_r+0x20e>
 8010068:	4652      	mov	r2, sl
 801006a:	4657      	mov	r7, sl
 801006c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010070:	3701      	adds	r7, #1
 8010072:	1c19      	adds	r1, r3, #0
 8010074:	bf18      	it	ne
 8010076:	2101      	movne	r1, #1
 8010078:	2b25      	cmp	r3, #37	; 0x25
 801007a:	bf0c      	ite	eq
 801007c:	2300      	moveq	r3, #0
 801007e:	f001 0301 	andne.w	r3, r1, #1
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1f2      	bne.n	801006c <_svfprintf_r+0x88>
 8010086:	ebb7 080a 	subs.w	r8, r7, sl
 801008a:	d010      	beq.n	80100ae <_svfprintf_r+0xca>
 801008c:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 801008e:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010090:	3501      	adds	r5, #1
 8010092:	f8c6 a000 	str.w	sl, [r6]
 8010096:	2d07      	cmp	r5, #7
 8010098:	4444      	add	r4, r8
 801009a:	f8c6 8004 	str.w	r8, [r6, #4]
 801009e:	953e      	str	r5, [sp, #248]	; 0xf8
 80100a0:	943f      	str	r4, [sp, #252]	; 0xfc
 80100a2:	f300 808a 	bgt.w	80101ba <_svfprintf_r+0x1d6>
 80100a6:	3608      	adds	r6, #8
 80100a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80100aa:	4445      	add	r5, r8
 80100ac:	950d      	str	r5, [sp, #52]	; 0x34
 80100ae:	783b      	ldrb	r3, [r7, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f000 808a 	beq.w	80101ca <_svfprintf_r+0x1e6>
 80100b6:	2200      	movs	r2, #0
 80100b8:	f107 0a01 	add.w	sl, r7, #1
 80100bc:	4613      	mov	r3, r2
 80100be:	f04f 34ff 	mov.w	r4, #4294967295
 80100c2:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 80100c6:	9212      	str	r2, [sp, #72]	; 0x48
 80100c8:	920c      	str	r2, [sp, #48]	; 0x30
 80100ca:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80100ce:	f1a2 0120 	sub.w	r1, r2, #32
 80100d2:	2958      	cmp	r1, #88	; 0x58
 80100d4:	f200 8214 	bhi.w	8010500 <_svfprintf_r+0x51c>
 80100d8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80100dc:	02120228 	.word	0x02120228
 80100e0:	02eb0212 	.word	0x02eb0212
 80100e4:	02120212 	.word	0x02120212
 80100e8:	02120212 	.word	0x02120212
 80100ec:	02120212 	.word	0x02120212
 80100f0:	008d005e 	.word	0x008d005e
 80100f4:	006a0212 	.word	0x006a0212
 80100f8:	0212022c 	.word	0x0212022c
 80100fc:	024c0247 	.word	0x024c0247
 8010100:	024c024c 	.word	0x024c024c
 8010104:	024c024c 	.word	0x024c024c
 8010108:	024c024c 	.word	0x024c024c
 801010c:	024c024c 	.word	0x024c024c
 8010110:	02120212 	.word	0x02120212
 8010114:	02120212 	.word	0x02120212
 8010118:	02120212 	.word	0x02120212
 801011c:	02120212 	.word	0x02120212
 8010120:	02120212 	.word	0x02120212
 8010124:	0328025d 	.word	0x0328025d
 8010128:	03280212 	.word	0x03280212
 801012c:	02120212 	.word	0x02120212
 8010130:	02120212 	.word	0x02120212
 8010134:	0212035d 	.word	0x0212035d
 8010138:	02a60212 	.word	0x02a60212
 801013c:	02120212 	.word	0x02120212
 8010140:	02120212 	.word	0x02120212
 8010144:	03170212 	.word	0x03170212
 8010148:	02120212 	.word	0x02120212
 801014c:	021202f0 	.word	0x021202f0
 8010150:	02120212 	.word	0x02120212
 8010154:	02120212 	.word	0x02120212
 8010158:	02120212 	.word	0x02120212
 801015c:	02120212 	.word	0x02120212
 8010160:	03020212 	.word	0x03020212
 8010164:	032802cb 	.word	0x032802cb
 8010168:	03280328 	.word	0x03280328
 801016c:	02cb02e6 	.word	0x02cb02e6
 8010170:	02120212 	.word	0x02120212
 8010174:	02120059 	.word	0x02120059
 8010178:	02b80295 	.word	0x02b80295
 801017c:	00590362 	.word	0x00590362
 8010180:	008f0212 	.word	0x008f0212
 8010184:	01cb0212 	.word	0x01cb0212
 8010188:	02120212 	.word	0x02120212
 801018c:	0274      	.short	0x0274
 801018e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010190:	f045 0510 	orr.w	r5, r5, #16
 8010194:	950c      	str	r5, [sp, #48]	; 0x30
 8010196:	e798      	b.n	80100ca <_svfprintf_r+0xe6>
 8010198:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801019a:	682d      	ldr	r5, [r5, #0]
 801019c:	9512      	str	r5, [sp, #72]	; 0x48
 801019e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80101a0:	1d2a      	adds	r2, r5, #4
 80101a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80101a4:	2d00      	cmp	r5, #0
 80101a6:	f280 831b 	bge.w	80107e0 <_svfprintf_r+0x7fc>
 80101aa:	426d      	negs	r5, r5
 80101ac:	9210      	str	r2, [sp, #64]	; 0x40
 80101ae:	9512      	str	r5, [sp, #72]	; 0x48
 80101b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101b2:	f045 0504 	orr.w	r5, r5, #4
 80101b6:	950c      	str	r5, [sp, #48]	; 0x30
 80101b8:	e787      	b.n	80100ca <_svfprintf_r+0xe6>
 80101ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80101bc:	4659      	mov	r1, fp
 80101be:	aa3d      	add	r2, sp, #244	; 0xf4
 80101c0:	f003 fa08 	bl	80135d4 <__ssprint_r>
 80101c4:	b940      	cbnz	r0, 80101d8 <_svfprintf_r+0x1f4>
 80101c6:	ae23      	add	r6, sp, #140	; 0x8c
 80101c8:	e76e      	b.n	80100a8 <_svfprintf_r+0xc4>
 80101ca:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80101cc:	b123      	cbz	r3, 80101d8 <_svfprintf_r+0x1f4>
 80101ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80101d0:	4659      	mov	r1, fp
 80101d2:	aa3d      	add	r2, sp, #244	; 0xf4
 80101d4:	f003 f9fe 	bl	80135d4 <__ssprint_r>
 80101d8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80101dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80101de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80101e2:	bf18      	it	ne
 80101e4:	f04f 35ff 	movne.w	r5, #4294967295
 80101e8:	950d      	str	r5, [sp, #52]	; 0x34
 80101ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80101ec:	b049      	add	sp, #292	; 0x124
 80101ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f2:	4657      	mov	r7, sl
 80101f4:	e75b      	b.n	80100ae <_svfprintf_r+0xca>
 80101f6:	232b      	movs	r3, #43	; 0x2b
 80101f8:	e767      	b.n	80100ca <_svfprintf_r+0xe6>
 80101fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80101fc:	2500      	movs	r5, #0
 80101fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8010200:	1d18      	adds	r0, r3, #4
 8010202:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	9010      	str	r0, [sp, #64]	; 0x40
 801020a:	9313      	str	r3, [sp, #76]	; 0x4c
 801020c:	2b00      	cmp	r3, #0
 801020e:	f000 87b5 	beq.w	801117c <_svfprintf_r+0x1198>
 8010212:	2c00      	cmp	r4, #0
 8010214:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010216:	f2c0 876d 	blt.w	80110f4 <_svfprintf_r+0x1110>
 801021a:	4629      	mov	r1, r5
 801021c:	4622      	mov	r2, r4
 801021e:	f002 fb85 	bl	801292c <memchr>
 8010222:	2800      	cmp	r0, #0
 8010224:	f000 87db 	beq.w	80111de <_svfprintf_r+0x11fa>
 8010228:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801022a:	9514      	str	r5, [sp, #80]	; 0x50
 801022c:	1a40      	subs	r0, r0, r1
 801022e:	900f      	str	r0, [sp, #60]	; 0x3c
 8010230:	42a0      	cmp	r0, r4
 8010232:	bfc3      	ittte	gt
 8010234:	940f      	strgt	r4, [sp, #60]	; 0x3c
 8010236:	ea24 75e4 	bicgt.w	r5, r4, r4, asr #31
 801023a:	950a      	strgt	r5, [sp, #40]	; 0x28
 801023c:	9d0f      	ldrle	r5, [sp, #60]	; 0x3c
 801023e:	bfcf      	iteee	gt
 8010240:	f89d 311f 	ldrbgt.w	r3, [sp, #287]	; 0x11f
 8010244:	ea25 75e5 	bicle.w	r5, r5, r5, asr #31
 8010248:	f89d 311f 	ldrble.w	r3, [sp, #287]	; 0x11f
 801024c:	950a      	strle	r5, [sp, #40]	; 0x28
 801024e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010250:	9518      	str	r5, [sp, #96]	; 0x60
 8010252:	b113      	cbz	r3, 801025a <_svfprintf_r+0x276>
 8010254:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010256:	3501      	adds	r5, #1
 8010258:	950a      	str	r5, [sp, #40]	; 0x28
 801025a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801025c:	f015 0502 	ands.w	r5, r5, #2
 8010260:	9515      	str	r5, [sp, #84]	; 0x54
 8010262:	d002      	beq.n	801026a <_svfprintf_r+0x286>
 8010264:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010266:	3502      	adds	r5, #2
 8010268:	950a      	str	r5, [sp, #40]	; 0x28
 801026a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801026c:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 8010270:	9516      	str	r5, [sp, #88]	; 0x58
 8010272:	f040 82c2 	bne.w	80107fa <_svfprintf_r+0x816>
 8010276:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010278:	980a      	ldr	r0, [sp, #40]	; 0x28
 801027a:	1a2f      	subs	r7, r5, r0
 801027c:	2f00      	cmp	r7, #0
 801027e:	f340 82bc 	ble.w	80107fa <_svfprintf_r+0x816>
 8010282:	2f10      	cmp	r7, #16
 8010284:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010286:	f340 8742 	ble.w	801110e <_svfprintf_r+0x112a>
 801028a:	f8df 85b0 	ldr.w	r8, [pc, #1456]	; 801083c <_svfprintf_r+0x858>
 801028e:	4623      	mov	r3, r4
 8010290:	f04f 0910 	mov.w	r9, #16
 8010294:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010296:	4644      	mov	r4, r8
 8010298:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801029c:	e002      	b.n	80102a4 <_svfprintf_r+0x2c0>
 801029e:	3f10      	subs	r7, #16
 80102a0:	2f10      	cmp	r7, #16
 80102a2:	dd15      	ble.n	80102d0 <_svfprintf_r+0x2ec>
 80102a4:	3501      	adds	r5, #1
 80102a6:	3310      	adds	r3, #16
 80102a8:	e886 0210 	stmia.w	r6, {r4, r9}
 80102ac:	3608      	adds	r6, #8
 80102ae:	2d07      	cmp	r5, #7
 80102b0:	953e      	str	r5, [sp, #248]	; 0xf8
 80102b2:	933f      	str	r3, [sp, #252]	; 0xfc
 80102b4:	ddf3      	ble.n	801029e <_svfprintf_r+0x2ba>
 80102b6:	4640      	mov	r0, r8
 80102b8:	4659      	mov	r1, fp
 80102ba:	aa3d      	add	r2, sp, #244	; 0xf4
 80102bc:	ae23      	add	r6, sp, #140	; 0x8c
 80102be:	f003 f989 	bl	80135d4 <__ssprint_r>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d188      	bne.n	80101d8 <_svfprintf_r+0x1f4>
 80102c6:	3f10      	subs	r7, #16
 80102c8:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80102ca:	2f10      	cmp	r7, #16
 80102cc:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80102ce:	dce9      	bgt.n	80102a4 <_svfprintf_r+0x2c0>
 80102d0:	46a0      	mov	r8, r4
 80102d2:	461c      	mov	r4, r3
 80102d4:	3501      	adds	r5, #1
 80102d6:	19e4      	adds	r4, r4, r7
 80102d8:	2d07      	cmp	r5, #7
 80102da:	f8c6 8000 	str.w	r8, [r6]
 80102de:	6077      	str	r7, [r6, #4]
 80102e0:	953e      	str	r5, [sp, #248]	; 0xf8
 80102e2:	943f      	str	r4, [sp, #252]	; 0xfc
 80102e4:	f300 827e 	bgt.w	80107e4 <_svfprintf_r+0x800>
 80102e8:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80102ec:	3608      	adds	r6, #8
 80102ee:	b16b      	cbz	r3, 801030c <_svfprintf_r+0x328>
 80102f0:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80102f2:	ab47      	add	r3, sp, #284	; 0x11c
 80102f4:	3303      	adds	r3, #3
 80102f6:	6033      	str	r3, [r6, #0]
 80102f8:	3501      	adds	r5, #1
 80102fa:	2301      	movs	r3, #1
 80102fc:	2d07      	cmp	r5, #7
 80102fe:	441c      	add	r4, r3
 8010300:	6073      	str	r3, [r6, #4]
 8010302:	953e      	str	r5, [sp, #248]	; 0xf8
 8010304:	943f      	str	r4, [sp, #252]	; 0xfc
 8010306:	f300 83c0 	bgt.w	8010a8a <_svfprintf_r+0xaa6>
 801030a:	3608      	adds	r6, #8
 801030c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801030e:	b163      	cbz	r3, 801032a <_svfprintf_r+0x346>
 8010310:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010312:	ab47      	add	r3, sp, #284	; 0x11c
 8010314:	6033      	str	r3, [r6, #0]
 8010316:	2302      	movs	r3, #2
 8010318:	3501      	adds	r5, #1
 801031a:	18e4      	adds	r4, r4, r3
 801031c:	2d07      	cmp	r5, #7
 801031e:	6073      	str	r3, [r6, #4]
 8010320:	953e      	str	r5, [sp, #248]	; 0xf8
 8010322:	943f      	str	r4, [sp, #252]	; 0xfc
 8010324:	f300 83bc 	bgt.w	8010aa0 <_svfprintf_r+0xabc>
 8010328:	3608      	adds	r6, #8
 801032a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801032c:	2d80      	cmp	r5, #128	; 0x80
 801032e:	f000 82f6 	beq.w	801091e <_svfprintf_r+0x93a>
 8010332:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010334:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010336:	1b5f      	subs	r7, r3, r5
 8010338:	2f00      	cmp	r7, #0
 801033a:	dd35      	ble.n	80103a8 <_svfprintf_r+0x3c4>
 801033c:	2f10      	cmp	r7, #16
 801033e:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010340:	bfd8      	it	le
 8010342:	f8df 84fc 	ldrle.w	r8, [pc, #1276]	; 8010840 <_svfprintf_r+0x85c>
 8010346:	dd24      	ble.n	8010392 <_svfprintf_r+0x3ae>
 8010348:	f8df 84f4 	ldr.w	r8, [pc, #1268]	; 8010840 <_svfprintf_r+0x85c>
 801034c:	4623      	mov	r3, r4
 801034e:	f04f 0910 	mov.w	r9, #16
 8010352:	4644      	mov	r4, r8
 8010354:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8010358:	e002      	b.n	8010360 <_svfprintf_r+0x37c>
 801035a:	3f10      	subs	r7, #16
 801035c:	2f10      	cmp	r7, #16
 801035e:	dd16      	ble.n	801038e <_svfprintf_r+0x3aa>
 8010360:	3501      	adds	r5, #1
 8010362:	3310      	adds	r3, #16
 8010364:	e886 0210 	stmia.w	r6, {r4, r9}
 8010368:	3608      	adds	r6, #8
 801036a:	2d07      	cmp	r5, #7
 801036c:	953e      	str	r5, [sp, #248]	; 0xf8
 801036e:	933f      	str	r3, [sp, #252]	; 0xfc
 8010370:	ddf3      	ble.n	801035a <_svfprintf_r+0x376>
 8010372:	4640      	mov	r0, r8
 8010374:	4659      	mov	r1, fp
 8010376:	aa3d      	add	r2, sp, #244	; 0xf4
 8010378:	ae23      	add	r6, sp, #140	; 0x8c
 801037a:	f003 f92b 	bl	80135d4 <__ssprint_r>
 801037e:	2800      	cmp	r0, #0
 8010380:	f47f af2a 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010384:	3f10      	subs	r7, #16
 8010386:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010388:	2f10      	cmp	r7, #16
 801038a:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 801038c:	dce8      	bgt.n	8010360 <_svfprintf_r+0x37c>
 801038e:	46a0      	mov	r8, r4
 8010390:	461c      	mov	r4, r3
 8010392:	3501      	adds	r5, #1
 8010394:	19e4      	adds	r4, r4, r7
 8010396:	2d07      	cmp	r5, #7
 8010398:	f8c6 8000 	str.w	r8, [r6]
 801039c:	6077      	str	r7, [r6, #4]
 801039e:	953e      	str	r5, [sp, #248]	; 0xf8
 80103a0:	943f      	str	r4, [sp, #252]	; 0xfc
 80103a2:	f300 8367 	bgt.w	8010a74 <_svfprintf_r+0xa90>
 80103a6:	3608      	adds	r6, #8
 80103a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103aa:	05eb      	lsls	r3, r5, #23
 80103ac:	f100 824a 	bmi.w	8010844 <_svfprintf_r+0x860>
 80103b0:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80103b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103b4:	3501      	adds	r5, #1
 80103b6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80103b8:	2d07      	cmp	r5, #7
 80103ba:	441c      	add	r4, r3
 80103bc:	6073      	str	r3, [r6, #4]
 80103be:	6030      	str	r0, [r6, #0]
 80103c0:	943f      	str	r4, [sp, #252]	; 0xfc
 80103c2:	953e      	str	r5, [sp, #248]	; 0xf8
 80103c4:	f300 8227 	bgt.w	8010816 <_svfprintf_r+0x832>
 80103c8:	3608      	adds	r6, #8
 80103ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103cc:	076b      	lsls	r3, r5, #29
 80103ce:	d541      	bpl.n	8010454 <_svfprintf_r+0x470>
 80103d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80103d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80103d4:	1a2f      	subs	r7, r5, r0
 80103d6:	2f00      	cmp	r7, #0
 80103d8:	dd3c      	ble.n	8010454 <_svfprintf_r+0x470>
 80103da:	2f10      	cmp	r7, #16
 80103dc:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80103de:	bfd8      	it	le
 80103e0:	f8df 8458 	ldrle.w	r8, [pc, #1112]	; 801083c <_svfprintf_r+0x858>
 80103e4:	dd24      	ble.n	8010430 <_svfprintf_r+0x44c>
 80103e6:	f8df 8454 	ldr.w	r8, [pc, #1108]	; 801083c <_svfprintf_r+0x858>
 80103ea:	4623      	mov	r3, r4
 80103ec:	f04f 0910 	mov.w	r9, #16
 80103f0:	4644      	mov	r4, r8
 80103f2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80103f6:	e002      	b.n	80103fe <_svfprintf_r+0x41a>
 80103f8:	3f10      	subs	r7, #16
 80103fa:	2f10      	cmp	r7, #16
 80103fc:	dd16      	ble.n	801042c <_svfprintf_r+0x448>
 80103fe:	3501      	adds	r5, #1
 8010400:	3310      	adds	r3, #16
 8010402:	e886 0210 	stmia.w	r6, {r4, r9}
 8010406:	3608      	adds	r6, #8
 8010408:	2d07      	cmp	r5, #7
 801040a:	953e      	str	r5, [sp, #248]	; 0xf8
 801040c:	933f      	str	r3, [sp, #252]	; 0xfc
 801040e:	ddf3      	ble.n	80103f8 <_svfprintf_r+0x414>
 8010410:	4640      	mov	r0, r8
 8010412:	4659      	mov	r1, fp
 8010414:	aa3d      	add	r2, sp, #244	; 0xf4
 8010416:	ae23      	add	r6, sp, #140	; 0x8c
 8010418:	f003 f8dc 	bl	80135d4 <__ssprint_r>
 801041c:	2800      	cmp	r0, #0
 801041e:	f47f aedb 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010422:	3f10      	subs	r7, #16
 8010424:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010426:	2f10      	cmp	r7, #16
 8010428:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 801042a:	dce8      	bgt.n	80103fe <_svfprintf_r+0x41a>
 801042c:	46a0      	mov	r8, r4
 801042e:	461c      	mov	r4, r3
 8010430:	3501      	adds	r5, #1
 8010432:	193c      	adds	r4, r7, r4
 8010434:	2d07      	cmp	r5, #7
 8010436:	f8c6 8000 	str.w	r8, [r6]
 801043a:	6077      	str	r7, [r6, #4]
 801043c:	953e      	str	r5, [sp, #248]	; 0xf8
 801043e:	943f      	str	r4, [sp, #252]	; 0xfc
 8010440:	dd08      	ble.n	8010454 <_svfprintf_r+0x470>
 8010442:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010444:	4659      	mov	r1, fp
 8010446:	aa3d      	add	r2, sp, #244	; 0xf4
 8010448:	f003 f8c4 	bl	80135d4 <__ssprint_r>
 801044c:	2800      	cmp	r0, #0
 801044e:	f47f aec3 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010452:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010454:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010456:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010458:	9912      	ldr	r1, [sp, #72]	; 0x48
 801045a:	4288      	cmp	r0, r1
 801045c:	bfac      	ite	ge
 801045e:	182d      	addge	r5, r5, r0
 8010460:	186d      	addlt	r5, r5, r1
 8010462:	950d      	str	r5, [sp, #52]	; 0x34
 8010464:	2c00      	cmp	r4, #0
 8010466:	f040 82f7 	bne.w	8010a58 <_svfprintf_r+0xa74>
 801046a:	2300      	movs	r3, #0
 801046c:	ae23      	add	r6, sp, #140	; 0x8c
 801046e:	933e      	str	r3, [sp, #248]	; 0xf8
 8010470:	e5ed      	b.n	801004e <_svfprintf_r+0x6a>
 8010472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010474:	9217      	str	r2, [sp, #92]	; 0x5c
 8010476:	06ea      	lsls	r2, r5, #27
 8010478:	f140 8150 	bpl.w	801071c <_svfprintf_r+0x738>
 801047c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801047e:	682a      	ldr	r2, [r5, #0]
 8010480:	3504      	adds	r5, #4
 8010482:	2101      	movs	r1, #1
 8010484:	1c10      	adds	r0, r2, #0
 8010486:	9510      	str	r5, [sp, #64]	; 0x40
 8010488:	bf18      	it	ne
 801048a:	2001      	movne	r0, #1
 801048c:	2300      	movs	r3, #0
 801048e:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8010492:	2c00      	cmp	r4, #0
 8010494:	bfa2      	ittt	ge
 8010496:	9d0c      	ldrge	r5, [sp, #48]	; 0x30
 8010498:	f025 0580 	bicge.w	r5, r5, #128	; 0x80
 801049c:	950c      	strge	r5, [sp, #48]	; 0x30
 801049e:	2c00      	cmp	r4, #0
 80104a0:	bf18      	it	ne
 80104a2:	f040 0001 	orrne.w	r0, r0, #1
 80104a6:	2800      	cmp	r0, #0
 80104a8:	f000 8225 	beq.w	80108f6 <_svfprintf_r+0x912>
 80104ac:	2901      	cmp	r1, #1
 80104ae:	f000 8352 	beq.w	8010b56 <_svfprintf_r+0xb72>
 80104b2:	2902      	cmp	r1, #2
 80104b4:	bf18      	it	ne
 80104b6:	a93d      	addne	r1, sp, #244	; 0xf4
 80104b8:	d101      	bne.n	80104be <_svfprintf_r+0x4da>
 80104ba:	e358      	b.n	8010b6e <_svfprintf_r+0xb8a>
 80104bc:	4629      	mov	r1, r5
 80104be:	f002 0007 	and.w	r0, r2, #7
 80104c2:	1e4d      	subs	r5, r1, #1
 80104c4:	3030      	adds	r0, #48	; 0x30
 80104c6:	08d2      	lsrs	r2, r2, #3
 80104c8:	f801 0c01 	strb.w	r0, [r1, #-1]
 80104cc:	d1f6      	bne.n	80104bc <_svfprintf_r+0x4d8>
 80104ce:	9513      	str	r5, [sp, #76]	; 0x4c
 80104d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80104d2:	07ed      	lsls	r5, r5, #31
 80104d4:	f140 838d 	bpl.w	8010bf2 <_svfprintf_r+0xc0e>
 80104d8:	2830      	cmp	r0, #48	; 0x30
 80104da:	f000 838a 	beq.w	8010bf2 <_svfprintf_r+0xc0e>
 80104de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104e0:	1e8d      	subs	r5, r1, #2
 80104e2:	2230      	movs	r2, #48	; 0x30
 80104e4:	9513      	str	r5, [sp, #76]	; 0x4c
 80104e6:	f801 2c02 	strb.w	r2, [r1, #-2]
 80104ea:	1b45      	subs	r5, r0, r5
 80104ec:	950f      	str	r5, [sp, #60]	; 0x3c
 80104ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80104f0:	9414      	str	r4, [sp, #80]	; 0x50
 80104f2:	42a5      	cmp	r5, r4
 80104f4:	bfb8      	it	lt
 80104f6:	4625      	movlt	r5, r4
 80104f8:	950a      	str	r5, [sp, #40]	; 0x28
 80104fa:	2500      	movs	r5, #0
 80104fc:	9518      	str	r5, [sp, #96]	; 0x60
 80104fe:	e6a8      	b.n	8010252 <_svfprintf_r+0x26e>
 8010500:	9217      	str	r2, [sp, #92]	; 0x5c
 8010502:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8010506:	2a00      	cmp	r2, #0
 8010508:	f43f ae5f 	beq.w	80101ca <_svfprintf_r+0x1e6>
 801050c:	2501      	movs	r5, #1
 801050e:	950a      	str	r5, [sp, #40]	; 0x28
 8010510:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010512:	2200      	movs	r2, #0
 8010514:	4613      	mov	r3, r2
 8010516:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 801051a:	9214      	str	r2, [sp, #80]	; 0x50
 801051c:	f88d 50cc 	strb.w	r5, [sp, #204]	; 0xcc
 8010520:	2501      	movs	r5, #1
 8010522:	9218      	str	r2, [sp, #96]	; 0x60
 8010524:	950f      	str	r5, [sp, #60]	; 0x3c
 8010526:	ad33      	add	r5, sp, #204	; 0xcc
 8010528:	9513      	str	r5, [sp, #76]	; 0x4c
 801052a:	e696      	b.n	801025a <_svfprintf_r+0x276>
 801052c:	2b00      	cmp	r3, #0
 801052e:	bf08      	it	eq
 8010530:	2320      	moveq	r3, #32
 8010532:	e5ca      	b.n	80100ca <_svfprintf_r+0xe6>
 8010534:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8010538:	2a2a      	cmp	r2, #42	; 0x2a
 801053a:	f000 8147 	beq.w	80107cc <_svfprintf_r+0x7e8>
 801053e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010542:	2400      	movs	r4, #0
 8010544:	2909      	cmp	r1, #9
 8010546:	f63f adc2 	bhi.w	80100ce <_svfprintf_r+0xea>
 801054a:	4650      	mov	r0, sl
 801054c:	2400      	movs	r4, #0
 801054e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010552:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010556:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 801055a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801055e:	2909      	cmp	r1, #9
 8010560:	4682      	mov	sl, r0
 8010562:	d9f4      	bls.n	801054e <_svfprintf_r+0x56a>
 8010564:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8010568:	e5b1      	b.n	80100ce <_svfprintf_r+0xea>
 801056a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801056c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8010570:	950c      	str	r5, [sp, #48]	; 0x30
 8010572:	e5aa      	b.n	80100ca <_svfprintf_r+0xe6>
 8010574:	4650      	mov	r0, sl
 8010576:	2100      	movs	r1, #0
 8010578:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801057c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010580:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010584:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8010588:	4682      	mov	sl, r0
 801058a:	2d09      	cmp	r5, #9
 801058c:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8010590:	d9f2      	bls.n	8010578 <_svfprintf_r+0x594>
 8010592:	9112      	str	r1, [sp, #72]	; 0x48
 8010594:	e59b      	b.n	80100ce <_svfprintf_r+0xea>
 8010596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010598:	9217      	str	r2, [sp, #92]	; 0x5c
 801059a:	f045 0510 	orr.w	r5, r5, #16
 801059e:	950c      	str	r5, [sp, #48]	; 0x30
 80105a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105a2:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80105a6:	06e9      	lsls	r1, r5, #27
 80105a8:	d569      	bpl.n	801067e <_svfprintf_r+0x69a>
 80105aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80105ac:	682a      	ldr	r2, [r5, #0]
 80105ae:	3504      	adds	r5, #4
 80105b0:	9510      	str	r5, [sp, #64]	; 0x40
 80105b2:	2a00      	cmp	r2, #0
 80105b4:	db6f      	blt.n	8010696 <_svfprintf_r+0x6b2>
 80105b6:	bf0c      	ite	eq
 80105b8:	2000      	moveq	r0, #0
 80105ba:	2001      	movne	r0, #1
 80105bc:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80105c0:	2101      	movs	r1, #1
 80105c2:	e766      	b.n	8010492 <_svfprintf_r+0x4ae>
 80105c4:	4d99      	ldr	r5, [pc, #612]	; (801082c <_svfprintf_r+0x848>)
 80105c6:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80105ca:	9217      	str	r2, [sp, #92]	; 0x5c
 80105cc:	9520      	str	r5, [sp, #128]	; 0x80
 80105ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105d0:	06eb      	lsls	r3, r5, #27
 80105d2:	d57b      	bpl.n	80106cc <_svfprintf_r+0x6e8>
 80105d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80105d6:	682a      	ldr	r2, [r5, #0]
 80105d8:	3504      	adds	r5, #4
 80105da:	9510      	str	r5, [sp, #64]	; 0x40
 80105dc:	1c10      	adds	r0, r2, #0
 80105de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105e0:	bf18      	it	ne
 80105e2:	2001      	movne	r0, #1
 80105e4:	2102      	movs	r1, #2
 80105e6:	4205      	tst	r5, r0
 80105e8:	f43f af50 	beq.w	801048c <_svfprintf_r+0x4a8>
 80105ec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80105ee:	2330      	movs	r3, #48	; 0x30
 80105f0:	2001      	movs	r0, #1
 80105f2:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
 80105f6:	2102      	movs	r1, #2
 80105f8:	f88d 511d 	strb.w	r5, [sp, #285]	; 0x11d
 80105fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105fe:	f045 0502 	orr.w	r5, r5, #2
 8010602:	950c      	str	r5, [sp, #48]	; 0x30
 8010604:	e742      	b.n	801048c <_svfprintf_r+0x4a8>
 8010606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010608:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 801060c:	06e8      	lsls	r0, r5, #27
 801060e:	f100 82e8 	bmi.w	8010be2 <_svfprintf_r+0xbfe>
 8010612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010614:	0669      	lsls	r1, r5, #25
 8010616:	f140 82e4 	bpl.w	8010be2 <_svfprintf_r+0xbfe>
 801061a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801061c:	682b      	ldr	r3, [r5, #0]
 801061e:	3504      	adds	r5, #4
 8010620:	9510      	str	r5, [sp, #64]	; 0x40
 8010622:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010624:	801d      	strh	r5, [r3, #0]
 8010626:	e512      	b.n	801004e <_svfprintf_r+0x6a>
 8010628:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801062a:	9217      	str	r2, [sp, #92]	; 0x5c
 801062c:	f045 0510 	orr.w	r5, r5, #16
 8010630:	950c      	str	r5, [sp, #48]	; 0x30
 8010632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010634:	f015 0310 	ands.w	r3, r5, #16
 8010638:	d00d      	beq.n	8010656 <_svfprintf_r+0x672>
 801063a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801063c:	2100      	movs	r1, #0
 801063e:	682a      	ldr	r2, [r5, #0]
 8010640:	3504      	adds	r5, #4
 8010642:	9510      	str	r5, [sp, #64]	; 0x40
 8010644:	1a50      	subs	r0, r2, r1
 8010646:	bf18      	it	ne
 8010648:	2001      	movne	r0, #1
 801064a:	e71f      	b.n	801048c <_svfprintf_r+0x4a8>
 801064c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801064e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010650:	f015 0310 	ands.w	r3, r5, #16
 8010654:	d1f1      	bne.n	801063a <_svfprintf_r+0x656>
 8010656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010658:	f015 0140 	ands.w	r1, r5, #64	; 0x40
 801065c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801065e:	bf1a      	itte	ne
 8010660:	4619      	movne	r1, r3
 8010662:	882a      	ldrhne	r2, [r5, #0]
 8010664:	682a      	ldreq	r2, [r5, #0]
 8010666:	3504      	adds	r5, #4
 8010668:	9510      	str	r5, [sp, #64]	; 0x40
 801066a:	1c10      	adds	r0, r2, #0
 801066c:	bf18      	it	ne
 801066e:	2001      	movne	r0, #1
 8010670:	e70c      	b.n	801048c <_svfprintf_r+0x4a8>
 8010672:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010674:	9217      	str	r2, [sp, #92]	; 0x5c
 8010676:	06e9      	lsls	r1, r5, #27
 8010678:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 801067c:	d495      	bmi.n	80105aa <_svfprintf_r+0x5c6>
 801067e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010680:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010684:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010686:	bf0c      	ite	eq
 8010688:	682a      	ldreq	r2, [r5, #0]
 801068a:	f9b5 2000 	ldrshne.w	r2, [r5]
 801068e:	3504      	adds	r5, #4
 8010690:	9510      	str	r5, [sp, #64]	; 0x40
 8010692:	2a00      	cmp	r2, #0
 8010694:	da8f      	bge.n	80105b6 <_svfprintf_r+0x5d2>
 8010696:	4252      	negs	r2, r2
 8010698:	232d      	movs	r3, #45	; 0x2d
 801069a:	1c10      	adds	r0, r2, #0
 801069c:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80106a0:	bf18      	it	ne
 80106a2:	2001      	movne	r0, #1
 80106a4:	2101      	movs	r1, #1
 80106a6:	e6f4      	b.n	8010492 <_svfprintf_r+0x4ae>
 80106a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106aa:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80106ae:	950c      	str	r5, [sp, #48]	; 0x30
 80106b0:	e50b      	b.n	80100ca <_svfprintf_r+0xe6>
 80106b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106b4:	f045 0501 	orr.w	r5, r5, #1
 80106b8:	950c      	str	r5, [sp, #48]	; 0x30
 80106ba:	e506      	b.n	80100ca <_svfprintf_r+0xe6>
 80106bc:	4d5c      	ldr	r5, [pc, #368]	; (8010830 <_svfprintf_r+0x84c>)
 80106be:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 80106c2:	9217      	str	r2, [sp, #92]	; 0x5c
 80106c4:	9520      	str	r5, [sp, #128]	; 0x80
 80106c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106c8:	06eb      	lsls	r3, r5, #27
 80106ca:	d483      	bmi.n	80105d4 <_svfprintf_r+0x5f0>
 80106cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80106d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80106d4:	bf0c      	ite	eq
 80106d6:	682a      	ldreq	r2, [r5, #0]
 80106d8:	882a      	ldrhne	r2, [r5, #0]
 80106da:	3504      	adds	r5, #4
 80106dc:	9510      	str	r5, [sp, #64]	; 0x40
 80106de:	e77d      	b.n	80105dc <_svfprintf_r+0x5f8>
 80106e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80106e2:	2501      	movs	r5, #1
 80106e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80106e6:	2100      	movs	r1, #0
 80106e8:	950a      	str	r5, [sp, #40]	; 0x28
 80106ea:	460b      	mov	r3, r1
 80106ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80106ee:	6812      	ldr	r2, [r2, #0]
 80106f0:	3504      	adds	r5, #4
 80106f2:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
 80106f6:	9510      	str	r5, [sp, #64]	; 0x40
 80106f8:	2501      	movs	r5, #1
 80106fa:	9114      	str	r1, [sp, #80]	; 0x50
 80106fc:	950f      	str	r5, [sp, #60]	; 0x3c
 80106fe:	ad33      	add	r5, sp, #204	; 0xcc
 8010700:	9118      	str	r1, [sp, #96]	; 0x60
 8010702:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
 8010706:	9513      	str	r5, [sp, #76]	; 0x4c
 8010708:	e5a7      	b.n	801025a <_svfprintf_r+0x276>
 801070a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801070c:	9217      	str	r2, [sp, #92]	; 0x5c
 801070e:	f045 0510 	orr.w	r5, r5, #16
 8010712:	950c      	str	r5, [sp, #48]	; 0x30
 8010714:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010716:	06ea      	lsls	r2, r5, #27
 8010718:	f53f aeb0 	bmi.w	801047c <_svfprintf_r+0x498>
 801071c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801071e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010722:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010724:	bf14      	ite	ne
 8010726:	882a      	ldrhne	r2, [r5, #0]
 8010728:	682a      	ldreq	r2, [r5, #0]
 801072a:	e6a9      	b.n	8010480 <_svfprintf_r+0x49c>
 801072c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801072e:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8010732:	1deb      	adds	r3, r5, #7
 8010734:	9217      	str	r2, [sp, #92]	; 0x5c
 8010736:	f023 0307 	bic.w	r3, r3, #7
 801073a:	f103 0508 	add.w	r5, r3, #8
 801073e:	9510      	str	r5, [sp, #64]	; 0x40
 8010740:	681d      	ldr	r5, [r3, #0]
 8010742:	951a      	str	r5, [sp, #104]	; 0x68
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010748:	931b      	str	r3, [sp, #108]	; 0x6c
 801074a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801074c:	f002 fddc 	bl	8013308 <__fpclassifyd>
 8010750:	2801      	cmp	r0, #1
 8010752:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010754:	f040 830c 	bne.w	8010d70 <_svfprintf_r+0xd8c>
 8010758:	2300      	movs	r3, #0
 801075a:	2200      	movs	r2, #0
 801075c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801075e:	f004 f985 	bl	8014a6c <__aeabi_dcmplt>
 8010762:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8010766:	b110      	cbz	r0, 801076e <_svfprintf_r+0x78a>
 8010768:	232d      	movs	r3, #45	; 0x2d
 801076a:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 801076e:	2503      	movs	r5, #3
 8010770:	950a      	str	r5, [sp, #40]	; 0x28
 8010772:	2500      	movs	r5, #0
 8010774:	9514      	str	r5, [sp, #80]	; 0x50
 8010776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010778:	4a2e      	ldr	r2, [pc, #184]	; (8010834 <_svfprintf_r+0x850>)
 801077a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 801077e:	492e      	ldr	r1, [pc, #184]	; (8010838 <_svfprintf_r+0x854>)
 8010780:	950c      	str	r5, [sp, #48]	; 0x30
 8010782:	2503      	movs	r5, #3
 8010784:	950f      	str	r5, [sp, #60]	; 0x3c
 8010786:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010788:	2d47      	cmp	r5, #71	; 0x47
 801078a:	bfd8      	it	le
 801078c:	4611      	movle	r1, r2
 801078e:	2500      	movs	r5, #0
 8010790:	9113      	str	r1, [sp, #76]	; 0x4c
 8010792:	9518      	str	r5, [sp, #96]	; 0x60
 8010794:	e55d      	b.n	8010252 <_svfprintf_r+0x26e>
 8010796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010798:	f045 0508 	orr.w	r5, r5, #8
 801079c:	950c      	str	r5, [sp, #48]	; 0x30
 801079e:	e494      	b.n	80100ca <_svfprintf_r+0xe6>
 80107a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80107a2:	2378      	movs	r3, #120	; 0x78
 80107a4:	2130      	movs	r1, #48	; 0x30
 80107a6:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
 80107aa:	1d15      	adds	r5, r2, #4
 80107ac:	9510      	str	r5, [sp, #64]	; 0x40
 80107ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80107b0:	2102      	movs	r1, #2
 80107b2:	6812      	ldr	r2, [r2, #0]
 80107b4:	f045 0502 	orr.w	r5, r5, #2
 80107b8:	950c      	str	r5, [sp, #48]	; 0x30
 80107ba:	4d1c      	ldr	r5, [pc, #112]	; (801082c <_svfprintf_r+0x848>)
 80107bc:	1c10      	adds	r0, r2, #0
 80107be:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 80107c2:	bf18      	it	ne
 80107c4:	2001      	movne	r0, #1
 80107c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80107c8:	9520      	str	r5, [sp, #128]	; 0x80
 80107ca:	e65f      	b.n	801048c <_svfprintf_r+0x4a8>
 80107cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80107ce:	1d2a      	adds	r2, r5, #4
 80107d0:	682c      	ldr	r4, [r5, #0]
 80107d2:	2c00      	cmp	r4, #0
 80107d4:	bfbc      	itt	lt
 80107d6:	9210      	strlt	r2, [sp, #64]	; 0x40
 80107d8:	f04f 34ff 	movlt.w	r4, #4294967295
 80107dc:	f6ff ac75 	blt.w	80100ca <_svfprintf_r+0xe6>
 80107e0:	9210      	str	r2, [sp, #64]	; 0x40
 80107e2:	e472      	b.n	80100ca <_svfprintf_r+0xe6>
 80107e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80107e6:	4659      	mov	r1, fp
 80107e8:	aa3d      	add	r2, sp, #244	; 0xf4
 80107ea:	f002 fef3 	bl	80135d4 <__ssprint_r>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	f47f acf2 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 80107f4:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80107f8:	ae23      	add	r6, sp, #140	; 0x8c
 80107fa:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 80107fc:	e577      	b.n	80102ee <_svfprintf_r+0x30a>
 80107fe:	46a0      	mov	r8, r4
 8010800:	461c      	mov	r4, r3
 8010802:	3501      	adds	r5, #1
 8010804:	f8c6 8000 	str.w	r8, [r6]
 8010808:	2d07      	cmp	r5, #7
 801080a:	6077      	str	r7, [r6, #4]
 801080c:	443c      	add	r4, r7
 801080e:	953e      	str	r5, [sp, #248]	; 0xf8
 8010810:	943f      	str	r4, [sp, #252]	; 0xfc
 8010812:	f77f add9 	ble.w	80103c8 <_svfprintf_r+0x3e4>
 8010816:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010818:	4659      	mov	r1, fp
 801081a:	aa3d      	add	r2, sp, #244	; 0xf4
 801081c:	f002 feda 	bl	80135d4 <__ssprint_r>
 8010820:	2800      	cmp	r0, #0
 8010822:	f47f acd9 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010826:	ae23      	add	r6, sp, #140	; 0x8c
 8010828:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 801082a:	e5ce      	b.n	80103ca <_svfprintf_r+0x3e6>
 801082c:	08014d48 	.word	0x08014d48
 8010830:	08014d34 	.word	0x08014d34
 8010834:	08014d24 	.word	0x08014d24
 8010838:	08014d28 	.word	0x08014d28
 801083c:	08014bb4 	.word	0x08014bb4
 8010840:	08014bc4 	.word	0x08014bc4
 8010844:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010846:	2d65      	cmp	r5, #101	; 0x65
 8010848:	f340 80a6 	ble.w	8010998 <_svfprintf_r+0x9b4>
 801084c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801084e:	2200      	movs	r2, #0
 8010850:	2300      	movs	r3, #0
 8010852:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010854:	f004 f900 	bl	8014a58 <__aeabi_dcmpeq>
 8010858:	2800      	cmp	r0, #0
 801085a:	f000 8131 	beq.w	8010ac0 <_svfprintf_r+0xadc>
 801085e:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010860:	2301      	movs	r3, #1
 8010862:	6073      	str	r3, [r6, #4]
 8010864:	3401      	adds	r4, #1
 8010866:	3501      	adds	r5, #1
 8010868:	4b93      	ldr	r3, [pc, #588]	; (8010ab8 <_svfprintf_r+0xad4>)
 801086a:	2d07      	cmp	r5, #7
 801086c:	943f      	str	r4, [sp, #252]	; 0xfc
 801086e:	953e      	str	r5, [sp, #248]	; 0xf8
 8010870:	6033      	str	r3, [r6, #0]
 8010872:	f300 82a6 	bgt.w	8010dc2 <_svfprintf_r+0xdde>
 8010876:	3608      	adds	r6, #8
 8010878:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801087a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801087c:	42ab      	cmp	r3, r5
 801087e:	db03      	blt.n	8010888 <_svfprintf_r+0x8a4>
 8010880:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010882:	07ed      	lsls	r5, r5, #31
 8010884:	f57f ada1 	bpl.w	80103ca <_svfprintf_r+0x3e6>
 8010888:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 801088a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801088c:	3501      	adds	r5, #1
 801088e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010890:	2d07      	cmp	r5, #7
 8010892:	4404      	add	r4, r0
 8010894:	6070      	str	r0, [r6, #4]
 8010896:	6031      	str	r1, [r6, #0]
 8010898:	943f      	str	r4, [sp, #252]	; 0xfc
 801089a:	953e      	str	r5, [sp, #248]	; 0xf8
 801089c:	f300 82e6 	bgt.w	8010e6c <_svfprintf_r+0xe88>
 80108a0:	3608      	adds	r6, #8
 80108a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80108a4:	1e6f      	subs	r7, r5, #1
 80108a6:	2f00      	cmp	r7, #0
 80108a8:	f77f ad8f 	ble.w	80103ca <_svfprintf_r+0x3e6>
 80108ac:	2f10      	cmp	r7, #16
 80108ae:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80108b0:	f340 84bc 	ble.w	801122c <_svfprintf_r+0x1248>
 80108b4:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8010abc <_svfprintf_r+0xad8>
 80108b8:	4623      	mov	r3, r4
 80108ba:	f04f 0910 	mov.w	r9, #16
 80108be:	4644      	mov	r4, r8
 80108c0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80108c4:	e002      	b.n	80108cc <_svfprintf_r+0x8e8>
 80108c6:	3f10      	subs	r7, #16
 80108c8:	2f10      	cmp	r7, #16
 80108ca:	dd98      	ble.n	80107fe <_svfprintf_r+0x81a>
 80108cc:	3501      	adds	r5, #1
 80108ce:	3310      	adds	r3, #16
 80108d0:	e886 0210 	stmia.w	r6, {r4, r9}
 80108d4:	3608      	adds	r6, #8
 80108d6:	2d07      	cmp	r5, #7
 80108d8:	953e      	str	r5, [sp, #248]	; 0xf8
 80108da:	933f      	str	r3, [sp, #252]	; 0xfc
 80108dc:	ddf3      	ble.n	80108c6 <_svfprintf_r+0x8e2>
 80108de:	4640      	mov	r0, r8
 80108e0:	4659      	mov	r1, fp
 80108e2:	aa3d      	add	r2, sp, #244	; 0xf4
 80108e4:	ae23      	add	r6, sp, #140	; 0x8c
 80108e6:	f002 fe75 	bl	80135d4 <__ssprint_r>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	f47f ac74 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 80108f0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80108f2:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80108f4:	e7e7      	b.n	80108c6 <_svfprintf_r+0x8e2>
 80108f6:	2900      	cmp	r1, #0
 80108f8:	f040 80b8 	bne.w	8010a6c <_svfprintf_r+0xa88>
 80108fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80108fe:	07ea      	lsls	r2, r5, #31
 8010900:	bf5e      	ittt	pl
 8010902:	910f      	strpl	r1, [sp, #60]	; 0x3c
 8010904:	ad3d      	addpl	r5, sp, #244	; 0xf4
 8010906:	9513      	strpl	r5, [sp, #76]	; 0x4c
 8010908:	f57f adf1 	bpl.w	80104ee <_svfprintf_r+0x50a>
 801090c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801090e:	2230      	movs	r2, #48	; 0x30
 8010910:	f88d 20f3 	strb.w	r2, [sp, #243]	; 0xf3
 8010914:	950f      	str	r5, [sp, #60]	; 0x3c
 8010916:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 801091a:	9513      	str	r5, [sp, #76]	; 0x4c
 801091c:	e5e7      	b.n	80104ee <_svfprintf_r+0x50a>
 801091e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010920:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010922:	1a2f      	subs	r7, r5, r0
 8010924:	2f00      	cmp	r7, #0
 8010926:	f77f ad04 	ble.w	8010332 <_svfprintf_r+0x34e>
 801092a:	2f10      	cmp	r7, #16
 801092c:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 801092e:	bfd8      	it	le
 8010930:	f8df 8188 	ldrle.w	r8, [pc, #392]	; 8010abc <_svfprintf_r+0xad8>
 8010934:	dd24      	ble.n	8010980 <_svfprintf_r+0x99c>
 8010936:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8010abc <_svfprintf_r+0xad8>
 801093a:	4623      	mov	r3, r4
 801093c:	f04f 0910 	mov.w	r9, #16
 8010940:	4644      	mov	r4, r8
 8010942:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8010946:	e002      	b.n	801094e <_svfprintf_r+0x96a>
 8010948:	3f10      	subs	r7, #16
 801094a:	2f10      	cmp	r7, #16
 801094c:	dd16      	ble.n	801097c <_svfprintf_r+0x998>
 801094e:	3501      	adds	r5, #1
 8010950:	3310      	adds	r3, #16
 8010952:	e886 0210 	stmia.w	r6, {r4, r9}
 8010956:	3608      	adds	r6, #8
 8010958:	2d07      	cmp	r5, #7
 801095a:	953e      	str	r5, [sp, #248]	; 0xf8
 801095c:	933f      	str	r3, [sp, #252]	; 0xfc
 801095e:	ddf3      	ble.n	8010948 <_svfprintf_r+0x964>
 8010960:	4640      	mov	r0, r8
 8010962:	4659      	mov	r1, fp
 8010964:	aa3d      	add	r2, sp, #244	; 0xf4
 8010966:	ae23      	add	r6, sp, #140	; 0x8c
 8010968:	f002 fe34 	bl	80135d4 <__ssprint_r>
 801096c:	2800      	cmp	r0, #0
 801096e:	f47f ac33 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010972:	3f10      	subs	r7, #16
 8010974:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010976:	2f10      	cmp	r7, #16
 8010978:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 801097a:	dce8      	bgt.n	801094e <_svfprintf_r+0x96a>
 801097c:	46a0      	mov	r8, r4
 801097e:	461c      	mov	r4, r3
 8010980:	3501      	adds	r5, #1
 8010982:	19e4      	adds	r4, r4, r7
 8010984:	2d07      	cmp	r5, #7
 8010986:	f8c6 8000 	str.w	r8, [r6]
 801098a:	6077      	str	r7, [r6, #4]
 801098c:	953e      	str	r5, [sp, #248]	; 0xf8
 801098e:	943f      	str	r4, [sp, #252]	; 0xfc
 8010990:	f300 81e2 	bgt.w	8010d58 <_svfprintf_r+0xd74>
 8010994:	3608      	adds	r6, #8
 8010996:	e4cc      	b.n	8010332 <_svfprintf_r+0x34e>
 8010998:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801099a:	2d01      	cmp	r5, #1
 801099c:	f340 8190 	ble.w	8010cc0 <_svfprintf_r+0xcdc>
 80109a0:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80109a2:	3401      	adds	r4, #1
 80109a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80109a6:	2301      	movs	r3, #1
 80109a8:	3501      	adds	r5, #1
 80109aa:	6073      	str	r3, [r6, #4]
 80109ac:	2d07      	cmp	r5, #7
 80109ae:	943f      	str	r4, [sp, #252]	; 0xfc
 80109b0:	6030      	str	r0, [r6, #0]
 80109b2:	953e      	str	r5, [sp, #248]	; 0xf8
 80109b4:	f300 81ac 	bgt.w	8010d10 <_svfprintf_r+0xd2c>
 80109b8:	3608      	adds	r6, #8
 80109ba:	3501      	adds	r5, #1
 80109bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80109be:	9919      	ldr	r1, [sp, #100]	; 0x64
 80109c0:	2d07      	cmp	r5, #7
 80109c2:	4414      	add	r4, r2
 80109c4:	953e      	str	r5, [sp, #248]	; 0xf8
 80109c6:	6072      	str	r2, [r6, #4]
 80109c8:	6031      	str	r1, [r6, #0]
 80109ca:	943f      	str	r4, [sp, #252]	; 0xfc
 80109cc:	f300 8194 	bgt.w	8010cf8 <_svfprintf_r+0xd14>
 80109d0:	3608      	adds	r6, #8
 80109d2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80109d4:	2200      	movs	r2, #0
 80109d6:	2300      	movs	r3, #0
 80109d8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80109da:	f004 f83d 	bl	8014a58 <__aeabi_dcmpeq>
 80109de:	2800      	cmp	r0, #0
 80109e0:	f040 80d5 	bne.w	8010b8e <_svfprintf_r+0xbaa>
 80109e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80109e6:	3501      	adds	r5, #1
 80109e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80109ea:	1e43      	subs	r3, r0, #1
 80109ec:	953e      	str	r5, [sp, #248]	; 0xf8
 80109ee:	1c4a      	adds	r2, r1, #1
 80109f0:	2d07      	cmp	r5, #7
 80109f2:	441c      	add	r4, r3
 80109f4:	e886 000c 	stmia.w	r6, {r2, r3}
 80109f8:	943f      	str	r4, [sp, #252]	; 0xfc
 80109fa:	dc21      	bgt.n	8010a40 <_svfprintf_r+0xa5c>
 80109fc:	3608      	adds	r6, #8
 80109fe:	3501      	adds	r5, #1
 8010a00:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010a02:	2d07      	cmp	r5, #7
 8010a04:	ab40      	add	r3, sp, #256	; 0x100
 8010a06:	4404      	add	r4, r0
 8010a08:	6033      	str	r3, [r6, #0]
 8010a0a:	6070      	str	r0, [r6, #4]
 8010a0c:	943f      	str	r4, [sp, #252]	; 0xfc
 8010a0e:	953e      	str	r5, [sp, #248]	; 0xf8
 8010a10:	f77f acda 	ble.w	80103c8 <_svfprintf_r+0x3e4>
 8010a14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010a16:	4659      	mov	r1, fp
 8010a18:	aa3d      	add	r2, sp, #244	; 0xf4
 8010a1a:	f002 fddb 	bl	80135d4 <__ssprint_r>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	f47f abda 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010a24:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010a26:	ae23      	add	r6, sp, #140	; 0x8c
 8010a28:	e4cf      	b.n	80103ca <_svfprintf_r+0x3e6>
 8010a2a:	46a0      	mov	r8, r4
 8010a2c:	461c      	mov	r4, r3
 8010a2e:	3501      	adds	r5, #1
 8010a30:	19e4      	adds	r4, r4, r7
 8010a32:	2d07      	cmp	r5, #7
 8010a34:	f8c6 8000 	str.w	r8, [r6]
 8010a38:	6077      	str	r7, [r6, #4]
 8010a3a:	953e      	str	r5, [sp, #248]	; 0xf8
 8010a3c:	943f      	str	r4, [sp, #252]	; 0xfc
 8010a3e:	dddd      	ble.n	80109fc <_svfprintf_r+0xa18>
 8010a40:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010a42:	4659      	mov	r1, fp
 8010a44:	aa3d      	add	r2, sp, #244	; 0xf4
 8010a46:	f002 fdc5 	bl	80135d4 <__ssprint_r>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	f47f abc4 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010a50:	ae23      	add	r6, sp, #140	; 0x8c
 8010a52:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010a54:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010a56:	e7d2      	b.n	80109fe <_svfprintf_r+0xa1a>
 8010a58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010a5a:	4659      	mov	r1, fp
 8010a5c:	aa3d      	add	r2, sp, #244	; 0xf4
 8010a5e:	f002 fdb9 	bl	80135d4 <__ssprint_r>
 8010a62:	2800      	cmp	r0, #0
 8010a64:	f43f ad01 	beq.w	801046a <_svfprintf_r+0x486>
 8010a68:	f7ff bbb6 	b.w	80101d8 <_svfprintf_r+0x1f4>
 8010a6c:	ad3d      	add	r5, sp, #244	; 0xf4
 8010a6e:	900f      	str	r0, [sp, #60]	; 0x3c
 8010a70:	9513      	str	r5, [sp, #76]	; 0x4c
 8010a72:	e53c      	b.n	80104ee <_svfprintf_r+0x50a>
 8010a74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010a76:	4659      	mov	r1, fp
 8010a78:	aa3d      	add	r2, sp, #244	; 0xf4
 8010a7a:	f002 fdab 	bl	80135d4 <__ssprint_r>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	f47f abaa 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010a84:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010a86:	ae23      	add	r6, sp, #140	; 0x8c
 8010a88:	e48e      	b.n	80103a8 <_svfprintf_r+0x3c4>
 8010a8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010a8c:	4659      	mov	r1, fp
 8010a8e:	aa3d      	add	r2, sp, #244	; 0xf4
 8010a90:	f002 fda0 	bl	80135d4 <__ssprint_r>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	f47f ab9f 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010a9a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010a9c:	ae23      	add	r6, sp, #140	; 0x8c
 8010a9e:	e435      	b.n	801030c <_svfprintf_r+0x328>
 8010aa0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010aa2:	4659      	mov	r1, fp
 8010aa4:	aa3d      	add	r2, sp, #244	; 0xf4
 8010aa6:	f002 fd95 	bl	80135d4 <__ssprint_r>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	f47f ab94 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010ab0:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010ab2:	ae23      	add	r6, sp, #140	; 0x8c
 8010ab4:	e439      	b.n	801032a <_svfprintf_r+0x346>
 8010ab6:	bf00      	nop
 8010ab8:	08014d64 	.word	0x08014d64
 8010abc:	08014bc4 	.word	0x08014bc4
 8010ac0:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8010ac2:	2f00      	cmp	r7, #0
 8010ac4:	f340 8188 	ble.w	8010dd8 <_svfprintf_r+0xdf4>
 8010ac8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8010aca:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8010acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ace:	42af      	cmp	r7, r5
 8010ad0:	bfa8      	it	ge
 8010ad2:	462f      	movge	r7, r5
 8010ad4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010ad6:	2f00      	cmp	r7, #0
 8010ad8:	442b      	add	r3, r5
 8010ada:	930f      	str	r3, [sp, #60]	; 0x3c
 8010adc:	dd0b      	ble.n	8010af6 <_svfprintf_r+0xb12>
 8010ade:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010ae0:	19e4      	adds	r4, r4, r7
 8010ae2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010ae4:	3501      	adds	r5, #1
 8010ae6:	6077      	str	r7, [r6, #4]
 8010ae8:	2d07      	cmp	r5, #7
 8010aea:	943f      	str	r4, [sp, #252]	; 0xfc
 8010aec:	6030      	str	r0, [r6, #0]
 8010aee:	953e      	str	r5, [sp, #248]	; 0xf8
 8010af0:	f300 8312 	bgt.w	8011118 <_svfprintf_r+0x1134>
 8010af4:	3608      	adds	r6, #8
 8010af6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8010af8:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8010afc:	1bef      	subs	r7, r5, r7
 8010afe:	2f00      	cmp	r7, #0
 8010b00:	f340 8086 	ble.w	8010c10 <_svfprintf_r+0xc2c>
 8010b04:	2f10      	cmp	r7, #16
 8010b06:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010b08:	bfd8      	it	le
 8010b0a:	f8df 8500 	ldrle.w	r8, [pc, #1280]	; 801100c <_svfprintf_r+0x1028>
 8010b0e:	f340 814c 	ble.w	8010daa <_svfprintf_r+0xdc6>
 8010b12:	f8df 84f8 	ldr.w	r8, [pc, #1272]	; 801100c <_svfprintf_r+0x1028>
 8010b16:	4623      	mov	r3, r4
 8010b18:	f04f 0910 	mov.w	r9, #16
 8010b1c:	4644      	mov	r4, r8
 8010b1e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8010b22:	e003      	b.n	8010b2c <_svfprintf_r+0xb48>
 8010b24:	3f10      	subs	r7, #16
 8010b26:	2f10      	cmp	r7, #16
 8010b28:	f340 813d 	ble.w	8010da6 <_svfprintf_r+0xdc2>
 8010b2c:	3501      	adds	r5, #1
 8010b2e:	3310      	adds	r3, #16
 8010b30:	e886 0210 	stmia.w	r6, {r4, r9}
 8010b34:	3608      	adds	r6, #8
 8010b36:	2d07      	cmp	r5, #7
 8010b38:	953e      	str	r5, [sp, #248]	; 0xf8
 8010b3a:	933f      	str	r3, [sp, #252]	; 0xfc
 8010b3c:	ddf2      	ble.n	8010b24 <_svfprintf_r+0xb40>
 8010b3e:	4640      	mov	r0, r8
 8010b40:	4659      	mov	r1, fp
 8010b42:	aa3d      	add	r2, sp, #244	; 0xf4
 8010b44:	ae23      	add	r6, sp, #140	; 0x8c
 8010b46:	f002 fd45 	bl	80135d4 <__ssprint_r>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	f47f ab44 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010b50:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010b52:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010b54:	e7e6      	b.n	8010b24 <_svfprintf_r+0xb40>
 8010b56:	2a09      	cmp	r2, #9
 8010b58:	f200 80e6 	bhi.w	8010d28 <_svfprintf_r+0xd44>
 8010b5c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8010b5e:	3230      	adds	r2, #48	; 0x30
 8010b60:	f88d 20f3 	strb.w	r2, [sp, #243]	; 0xf3
 8010b64:	950f      	str	r5, [sp, #60]	; 0x3c
 8010b66:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8010b6a:	9513      	str	r5, [sp, #76]	; 0x4c
 8010b6c:	e4bf      	b.n	80104ee <_svfprintf_r+0x50a>
 8010b6e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8010b70:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
 8010b74:	f002 050f 	and.w	r5, r2, #15
 8010b78:	4608      	mov	r0, r1
 8010b7a:	3901      	subs	r1, #1
 8010b7c:	0912      	lsrs	r2, r2, #4
 8010b7e:	5d7d      	ldrb	r5, [r7, r5]
 8010b80:	7005      	strb	r5, [r0, #0]
 8010b82:	d1f7      	bne.n	8010b74 <_svfprintf_r+0xb90>
 8010b84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010b86:	9013      	str	r0, [sp, #76]	; 0x4c
 8010b88:	1a2d      	subs	r5, r5, r0
 8010b8a:	950f      	str	r5, [sp, #60]	; 0x3c
 8010b8c:	e4af      	b.n	80104ee <_svfprintf_r+0x50a>
 8010b8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010b90:	1e57      	subs	r7, r2, #1
 8010b92:	2f00      	cmp	r7, #0
 8010b94:	f77f af33 	ble.w	80109fe <_svfprintf_r+0xa1a>
 8010b98:	2f10      	cmp	r7, #16
 8010b9a:	f8df 8470 	ldr.w	r8, [pc, #1136]	; 801100c <_svfprintf_r+0x1028>
 8010b9e:	f77f af46 	ble.w	8010a2e <_svfprintf_r+0xa4a>
 8010ba2:	4623      	mov	r3, r4
 8010ba4:	f04f 0910 	mov.w	r9, #16
 8010ba8:	4644      	mov	r4, r8
 8010baa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8010bae:	e003      	b.n	8010bb8 <_svfprintf_r+0xbd4>
 8010bb0:	3f10      	subs	r7, #16
 8010bb2:	2f10      	cmp	r7, #16
 8010bb4:	f77f af39 	ble.w	8010a2a <_svfprintf_r+0xa46>
 8010bb8:	3501      	adds	r5, #1
 8010bba:	3310      	adds	r3, #16
 8010bbc:	e886 0210 	stmia.w	r6, {r4, r9}
 8010bc0:	3608      	adds	r6, #8
 8010bc2:	2d07      	cmp	r5, #7
 8010bc4:	953e      	str	r5, [sp, #248]	; 0xf8
 8010bc6:	933f      	str	r3, [sp, #252]	; 0xfc
 8010bc8:	ddf2      	ble.n	8010bb0 <_svfprintf_r+0xbcc>
 8010bca:	4640      	mov	r0, r8
 8010bcc:	4659      	mov	r1, fp
 8010bce:	aa3d      	add	r2, sp, #244	; 0xf4
 8010bd0:	ae23      	add	r6, sp, #140	; 0x8c
 8010bd2:	f002 fcff 	bl	80135d4 <__ssprint_r>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	f47f aafe 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010bdc:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010bde:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010be0:	e7e6      	b.n	8010bb0 <_svfprintf_r+0xbcc>
 8010be2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010be4:	682b      	ldr	r3, [r5, #0]
 8010be6:	3504      	adds	r5, #4
 8010be8:	9510      	str	r5, [sp, #64]	; 0x40
 8010bea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010bec:	601d      	str	r5, [r3, #0]
 8010bee:	f7ff ba2e 	b.w	801004e <_svfprintf_r+0x6a>
 8010bf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010bf4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010bf6:	1a2d      	subs	r5, r5, r0
 8010bf8:	950f      	str	r5, [sp, #60]	; 0x3c
 8010bfa:	e478      	b.n	80104ee <_svfprintf_r+0x50a>
 8010bfc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010bfe:	4659      	mov	r1, fp
 8010c00:	aa3d      	add	r2, sp, #244	; 0xf4
 8010c02:	f002 fce7 	bl	80135d4 <__ssprint_r>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	f47f aae6 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010c0c:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010c0e:	ae23      	add	r6, sp, #140	; 0x8c
 8010c10:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8010c12:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010c14:	42ab      	cmp	r3, r5
 8010c16:	db45      	blt.n	8010ca4 <_svfprintf_r+0xcc0>
 8010c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010c1a:	07e9      	lsls	r1, r5, #31
 8010c1c:	d442      	bmi.n	8010ca4 <_svfprintf_r+0xcc0>
 8010c1e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8010c20:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010c22:	1942      	adds	r2, r0, r5
 8010c24:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010c26:	1aeb      	subs	r3, r5, r3
 8010c28:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010c2a:	1aaf      	subs	r7, r5, r2
 8010c2c:	42bb      	cmp	r3, r7
 8010c2e:	bfb8      	it	lt
 8010c30:	461f      	movlt	r7, r3
 8010c32:	2f00      	cmp	r7, #0
 8010c34:	dd0a      	ble.n	8010c4c <_svfprintf_r+0xc68>
 8010c36:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010c38:	19e4      	adds	r4, r4, r7
 8010c3a:	6032      	str	r2, [r6, #0]
 8010c3c:	3501      	adds	r5, #1
 8010c3e:	6077      	str	r7, [r6, #4]
 8010c40:	2d07      	cmp	r5, #7
 8010c42:	943f      	str	r4, [sp, #252]	; 0xfc
 8010c44:	953e      	str	r5, [sp, #248]	; 0xf8
 8010c46:	f300 8272 	bgt.w	801112e <_svfprintf_r+0x114a>
 8010c4a:	3608      	adds	r6, #8
 8010c4c:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8010c50:	1bdf      	subs	r7, r3, r7
 8010c52:	2f00      	cmp	r7, #0
 8010c54:	f77f abb9 	ble.w	80103ca <_svfprintf_r+0x3e6>
 8010c58:	2f10      	cmp	r7, #16
 8010c5a:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010c5c:	f340 82e6 	ble.w	801122c <_svfprintf_r+0x1248>
 8010c60:	f8df 83a8 	ldr.w	r8, [pc, #936]	; 801100c <_svfprintf_r+0x1028>
 8010c64:	4623      	mov	r3, r4
 8010c66:	f04f 0910 	mov.w	r9, #16
 8010c6a:	4644      	mov	r4, r8
 8010c6c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8010c70:	e003      	b.n	8010c7a <_svfprintf_r+0xc96>
 8010c72:	3f10      	subs	r7, #16
 8010c74:	2f10      	cmp	r7, #16
 8010c76:	f77f adc2 	ble.w	80107fe <_svfprintf_r+0x81a>
 8010c7a:	3501      	adds	r5, #1
 8010c7c:	3310      	adds	r3, #16
 8010c7e:	e886 0210 	stmia.w	r6, {r4, r9}
 8010c82:	3608      	adds	r6, #8
 8010c84:	2d07      	cmp	r5, #7
 8010c86:	953e      	str	r5, [sp, #248]	; 0xf8
 8010c88:	933f      	str	r3, [sp, #252]	; 0xfc
 8010c8a:	ddf2      	ble.n	8010c72 <_svfprintf_r+0xc8e>
 8010c8c:	4640      	mov	r0, r8
 8010c8e:	4659      	mov	r1, fp
 8010c90:	aa3d      	add	r2, sp, #244	; 0xf4
 8010c92:	ae23      	add	r6, sp, #140	; 0x8c
 8010c94:	f002 fc9e 	bl	80135d4 <__ssprint_r>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	f47f aa9d 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010c9e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010ca0:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010ca2:	e7e6      	b.n	8010c72 <_svfprintf_r+0xc8e>
 8010ca4:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010ca6:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010ca8:	3501      	adds	r5, #1
 8010caa:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010cac:	2d07      	cmp	r5, #7
 8010cae:	4404      	add	r4, r0
 8010cb0:	6070      	str	r0, [r6, #4]
 8010cb2:	6031      	str	r1, [r6, #0]
 8010cb4:	943f      	str	r4, [sp, #252]	; 0xfc
 8010cb6:	953e      	str	r5, [sp, #248]	; 0xf8
 8010cb8:	f300 8247 	bgt.w	801114a <_svfprintf_r+0x1166>
 8010cbc:	3608      	adds	r6, #8
 8010cbe:	e7ae      	b.n	8010c1e <_svfprintf_r+0xc3a>
 8010cc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010cc2:	07ea      	lsls	r2, r5, #31
 8010cc4:	f53f ae6c 	bmi.w	80109a0 <_svfprintf_r+0x9bc>
 8010cc8:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010cca:	3401      	adds	r4, #1
 8010ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010cce:	3501      	adds	r5, #1
 8010cd0:	943f      	str	r4, [sp, #252]	; 0xfc
 8010cd2:	953e      	str	r5, [sp, #248]	; 0xf8
 8010cd4:	6033      	str	r3, [r6, #0]
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	2d07      	cmp	r5, #7
 8010cda:	6073      	str	r3, [r6, #4]
 8010cdc:	f77f ae8e 	ble.w	80109fc <_svfprintf_r+0xa18>
 8010ce0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010ce2:	4659      	mov	r1, fp
 8010ce4:	aa3d      	add	r2, sp, #244	; 0xf4
 8010ce6:	f002 fc75 	bl	80135d4 <__ssprint_r>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	f47f aa74 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010cf0:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010cf2:	ae23      	add	r6, sp, #140	; 0x8c
 8010cf4:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010cf6:	e682      	b.n	80109fe <_svfprintf_r+0xa1a>
 8010cf8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010cfa:	4659      	mov	r1, fp
 8010cfc:	aa3d      	add	r2, sp, #244	; 0xf4
 8010cfe:	f002 fc69 	bl	80135d4 <__ssprint_r>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	f47f aa68 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010d08:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010d0a:	ae23      	add	r6, sp, #140	; 0x8c
 8010d0c:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010d0e:	e660      	b.n	80109d2 <_svfprintf_r+0x9ee>
 8010d10:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010d12:	4659      	mov	r1, fp
 8010d14:	aa3d      	add	r2, sp, #244	; 0xf4
 8010d16:	f002 fc5d 	bl	80135d4 <__ssprint_r>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	f47f aa5c 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010d20:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010d22:	ae23      	add	r6, sp, #140	; 0x8c
 8010d24:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010d26:	e648      	b.n	80109ba <_svfprintf_r+0x9d6>
 8010d28:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8010d2c:	f10d 05f3 	add.w	r5, sp, #243	; 0xf3
 8010d30:	fbac 0102 	umull	r0, r1, ip, r2
 8010d34:	4628      	mov	r0, r5
 8010d36:	3d01      	subs	r5, #1
 8010d38:	08c9      	lsrs	r1, r1, #3
 8010d3a:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8010d3e:	eba2 0747 	sub.w	r7, r2, r7, lsl #1
 8010d42:	460a      	mov	r2, r1
 8010d44:	3730      	adds	r7, #48	; 0x30
 8010d46:	7007      	strb	r7, [r0, #0]
 8010d48:	2900      	cmp	r1, #0
 8010d4a:	d1f1      	bne.n	8010d30 <_svfprintf_r+0xd4c>
 8010d4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010d4e:	9013      	str	r0, [sp, #76]	; 0x4c
 8010d50:	1a2d      	subs	r5, r5, r0
 8010d52:	950f      	str	r5, [sp, #60]	; 0x3c
 8010d54:	f7ff bbcb 	b.w	80104ee <_svfprintf_r+0x50a>
 8010d58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010d5a:	4659      	mov	r1, fp
 8010d5c:	aa3d      	add	r2, sp, #244	; 0xf4
 8010d5e:	f002 fc39 	bl	80135d4 <__ssprint_r>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	f47f aa38 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010d68:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010d6a:	ae23      	add	r6, sp, #140	; 0x8c
 8010d6c:	f7ff bae1 	b.w	8010332 <_svfprintf_r+0x34e>
 8010d70:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010d72:	f002 fac9 	bl	8013308 <__fpclassifyd>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	f040 8083 	bne.w	8010e82 <_svfprintf_r+0xe9e>
 8010d7c:	2503      	movs	r5, #3
 8010d7e:	950a      	str	r5, [sp, #40]	; 0x28
 8010d80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d82:	4a9f      	ldr	r2, [pc, #636]	; (8011000 <_svfprintf_r+0x101c>)
 8010d84:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8010d88:	499e      	ldr	r1, [pc, #632]	; (8011004 <_svfprintf_r+0x1020>)
 8010d8a:	950c      	str	r5, [sp, #48]	; 0x30
 8010d8c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010d8e:	9014      	str	r0, [sp, #80]	; 0x50
 8010d90:	2d47      	cmp	r5, #71	; 0x47
 8010d92:	bfd8      	it	le
 8010d94:	4611      	movle	r1, r2
 8010d96:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8010d9a:	2503      	movs	r5, #3
 8010d9c:	9113      	str	r1, [sp, #76]	; 0x4c
 8010d9e:	950f      	str	r5, [sp, #60]	; 0x3c
 8010da0:	9018      	str	r0, [sp, #96]	; 0x60
 8010da2:	f7ff ba56 	b.w	8010252 <_svfprintf_r+0x26e>
 8010da6:	46a0      	mov	r8, r4
 8010da8:	461c      	mov	r4, r3
 8010daa:	3501      	adds	r5, #1
 8010dac:	19e4      	adds	r4, r4, r7
 8010dae:	2d07      	cmp	r5, #7
 8010db0:	f8c6 8000 	str.w	r8, [r6]
 8010db4:	6077      	str	r7, [r6, #4]
 8010db6:	953e      	str	r5, [sp, #248]	; 0xf8
 8010db8:	943f      	str	r4, [sp, #252]	; 0xfc
 8010dba:	f73f af1f 	bgt.w	8010bfc <_svfprintf_r+0xc18>
 8010dbe:	3608      	adds	r6, #8
 8010dc0:	e726      	b.n	8010c10 <_svfprintf_r+0xc2c>
 8010dc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010dc4:	4659      	mov	r1, fp
 8010dc6:	aa3d      	add	r2, sp, #244	; 0xf4
 8010dc8:	f002 fc04 	bl	80135d4 <__ssprint_r>
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	f47f aa03 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010dd2:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010dd4:	ae23      	add	r6, sp, #140	; 0x8c
 8010dd6:	e54f      	b.n	8010878 <_svfprintf_r+0x894>
 8010dd8:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010dda:	2301      	movs	r3, #1
 8010ddc:	6073      	str	r3, [r6, #4]
 8010dde:	3401      	adds	r4, #1
 8010de0:	3501      	adds	r5, #1
 8010de2:	4b89      	ldr	r3, [pc, #548]	; (8011008 <_svfprintf_r+0x1024>)
 8010de4:	2d07      	cmp	r5, #7
 8010de6:	943f      	str	r4, [sp, #252]	; 0xfc
 8010de8:	953e      	str	r5, [sp, #248]	; 0xf8
 8010dea:	6033      	str	r3, [r6, #0]
 8010dec:	f300 8145 	bgt.w	801107a <_svfprintf_r+0x1096>
 8010df0:	3608      	adds	r6, #8
 8010df2:	b92f      	cbnz	r7, 8010e00 <_svfprintf_r+0xe1c>
 8010df4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010df6:	b91d      	cbnz	r5, 8010e00 <_svfprintf_r+0xe1c>
 8010df8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010dfa:	07e8      	lsls	r0, r5, #31
 8010dfc:	f57f aae5 	bpl.w	80103ca <_svfprintf_r+0x3e6>
 8010e00:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010e02:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010e04:	3501      	adds	r5, #1
 8010e06:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010e08:	2d07      	cmp	r5, #7
 8010e0a:	4404      	add	r4, r0
 8010e0c:	6070      	str	r0, [r6, #4]
 8010e0e:	6031      	str	r1, [r6, #0]
 8010e10:	943f      	str	r4, [sp, #252]	; 0xfc
 8010e12:	953e      	str	r5, [sp, #248]	; 0xf8
 8010e14:	f300 81ed 	bgt.w	80111f2 <_svfprintf_r+0x120e>
 8010e18:	3608      	adds	r6, #8
 8010e1a:	427f      	negs	r7, r7
 8010e1c:	2f00      	cmp	r7, #0
 8010e1e:	f340 815c 	ble.w	80110da <_svfprintf_r+0x10f6>
 8010e22:	2f10      	cmp	r7, #16
 8010e24:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 801100c <_svfprintf_r+0x1028>
 8010e28:	f340 819d 	ble.w	8011166 <_svfprintf_r+0x1182>
 8010e2c:	4623      	mov	r3, r4
 8010e2e:	f04f 0910 	mov.w	r9, #16
 8010e32:	4644      	mov	r4, r8
 8010e34:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8010e38:	e003      	b.n	8010e42 <_svfprintf_r+0xe5e>
 8010e3a:	3f10      	subs	r7, #16
 8010e3c:	2f10      	cmp	r7, #16
 8010e3e:	f340 8190 	ble.w	8011162 <_svfprintf_r+0x117e>
 8010e42:	3501      	adds	r5, #1
 8010e44:	3310      	adds	r3, #16
 8010e46:	e886 0210 	stmia.w	r6, {r4, r9}
 8010e4a:	3608      	adds	r6, #8
 8010e4c:	2d07      	cmp	r5, #7
 8010e4e:	953e      	str	r5, [sp, #248]	; 0xf8
 8010e50:	933f      	str	r3, [sp, #252]	; 0xfc
 8010e52:	ddf2      	ble.n	8010e3a <_svfprintf_r+0xe56>
 8010e54:	4640      	mov	r0, r8
 8010e56:	4659      	mov	r1, fp
 8010e58:	aa3d      	add	r2, sp, #244	; 0xf4
 8010e5a:	f002 fbbb 	bl	80135d4 <__ssprint_r>
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	f47f a9ba 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010e64:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010e66:	ae23      	add	r6, sp, #140	; 0x8c
 8010e68:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8010e6a:	e7e6      	b.n	8010e3a <_svfprintf_r+0xe56>
 8010e6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010e6e:	4659      	mov	r1, fp
 8010e70:	aa3d      	add	r2, sp, #244	; 0xf4
 8010e72:	f002 fbaf 	bl	80135d4 <__ssprint_r>
 8010e76:	2800      	cmp	r0, #0
 8010e78:	f47f a9ae 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8010e7c:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8010e7e:	ae23      	add	r6, sp, #140	; 0x8c
 8010e80:	e50f      	b.n	80108a2 <_svfprintf_r+0x8be>
 8010e82:	1c62      	adds	r2, r4, #1
 8010e84:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010e86:	f000 8104 	beq.w	8011092 <_svfprintf_r+0x10ae>
 8010e8a:	f1a5 0c67 	sub.w	ip, r5, #103	; 0x67
 8010e8e:	f1dc 0300 	rsbs	r3, ip, #0
 8010e92:	eb43 030c 	adc.w	r3, r3, ip
 8010e96:	2d47      	cmp	r5, #71	; 0x47
 8010e98:	bf08      	it	eq
 8010e9a:	f043 0301 	orreq.w	r3, r3, #1
 8010e9e:	4699      	mov	r9, r3
 8010ea0:	b123      	cbz	r3, 8010eac <_svfprintf_r+0xec8>
 8010ea2:	f04f 0901 	mov.w	r9, #1
 8010ea6:	b90c      	cbnz	r4, 8010eac <_svfprintf_r+0xec8>
 8010ea8:	2401      	movs	r4, #1
 8010eaa:	46a1      	mov	r9, r4
 8010eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8010eb6:	950c      	str	r5, [sp, #48]	; 0x30
 8010eb8:	f2c0 81ab 	blt.w	8011212 <_svfprintf_r+0x122e>
 8010ebc:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8010ec0:	2500      	movs	r5, #0
 8010ec2:	9514      	str	r5, [sp, #80]	; 0x50
 8010ec4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010ec6:	4627      	mov	r7, r4
 8010ec8:	f1a5 0e66 	sub.w	lr, r5, #102	; 0x66
 8010ecc:	f1de 0500 	rsbs	r5, lr, #0
 8010ed0:	eb45 050e 	adc.w	r5, r5, lr
 8010ed4:	950f      	str	r5, [sp, #60]	; 0x3c
 8010ed6:	46ac      	mov	ip, r5
 8010ed8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010eda:	2303      	movs	r3, #3
 8010edc:	2d46      	cmp	r5, #70	; 0x46
 8010ede:	bf08      	it	eq
 8010ee0:	f04c 0c01 	orreq.w	ip, ip, #1
 8010ee4:	f1bc 0f00 	cmp.w	ip, #0
 8010ee8:	d10d      	bne.n	8010f06 <_svfprintf_r+0xf22>
 8010eea:	f1a5 0765 	sub.w	r7, r5, #101	; 0x65
 8010eee:	427b      	negs	r3, r7
 8010ef0:	eb43 0307 	adc.w	r3, r3, r7
 8010ef4:	2d45      	cmp	r5, #69	; 0x45
 8010ef6:	bf08      	it	eq
 8010ef8:	f043 0301 	orreq.w	r3, r3, #1
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f000 8185 	beq.w	801120c <_svfprintf_r+0x1228>
 8010f02:	1c67      	adds	r7, r4, #1
 8010f04:	2302      	movs	r3, #2
 8010f06:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010f08:	a944      	add	r1, sp, #272	; 0x110
 8010f0a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8010f0e:	9300      	str	r3, [sp, #0]
 8010f10:	900a      	str	r0, [sp, #40]	; 0x28
 8010f12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010f16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010f18:	9102      	str	r1, [sp, #8]
 8010f1a:	a945      	add	r1, sp, #276	; 0x114
 8010f1c:	f8cd c01c 	str.w	ip, [sp, #28]
 8010f20:	9103      	str	r1, [sp, #12]
 8010f22:	a946      	add	r1, sp, #280	; 0x118
 8010f24:	9701      	str	r7, [sp, #4]
 8010f26:	9104      	str	r1, [sp, #16]
 8010f28:	f000 fa8c 	bl	8011444 <_dtoa_r>
 8010f2c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010f2e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010f32:	f1b5 0367 	subs.w	r3, r5, #103	; 0x67
 8010f36:	bf18      	it	ne
 8010f38:	2301      	movne	r3, #1
 8010f3a:	2d47      	cmp	r5, #71	; 0x47
 8010f3c:	bf0c      	ite	eq
 8010f3e:	2300      	moveq	r3, #0
 8010f40:	f003 0301 	andne.w	r3, r3, #1
 8010f44:	9013      	str	r0, [sp, #76]	; 0x4c
 8010f46:	b923      	cbnz	r3, 8010f52 <_svfprintf_r+0xf6e>
 8010f48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f4a:	07e8      	lsls	r0, r5, #31
 8010f4c:	bf58      	it	pl
 8010f4e:	9d46      	ldrpl	r5, [sp, #280]	; 0x118
 8010f50:	d514      	bpl.n	8010f7c <_svfprintf_r+0xf98>
 8010f52:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010f54:	19c5      	adds	r5, r0, r7
 8010f56:	f1bc 0f00 	cmp.w	ip, #0
 8010f5a:	d005      	beq.n	8010f68 <_svfprintf_r+0xf84>
 8010f5c:	7803      	ldrb	r3, [r0, #0]
 8010f5e:	2b30      	cmp	r3, #48	; 0x30
 8010f60:	f000 80a3 	beq.w	80110aa <_svfprintf_r+0x10c6>
 8010f64:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8010f66:	19ed      	adds	r5, r5, r7
 8010f68:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	4641      	mov	r1, r8
 8010f70:	f003 fd72 	bl	8014a58 <__aeabi_dcmpeq>
 8010f74:	2800      	cmp	r0, #0
 8010f76:	f000 8125 	beq.w	80111c4 <_svfprintf_r+0x11e0>
 8010f7a:	9546      	str	r5, [sp, #280]	; 0x118
 8010f7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010f7e:	1a6d      	subs	r5, r5, r1
 8010f80:	9511      	str	r5, [sp, #68]	; 0x44
 8010f82:	f1b9 0f00 	cmp.w	r9, #0
 8010f86:	f000 8106 	beq.w	8011196 <_svfprintf_r+0x11b2>
 8010f8a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8010f8c:	1cd9      	adds	r1, r3, #3
 8010f8e:	db02      	blt.n	8010f96 <_svfprintf_r+0xfb2>
 8010f90:	429c      	cmp	r4, r3
 8010f92:	f280 8107 	bge.w	80111a4 <_svfprintf_r+0x11c0>
 8010f96:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010f98:	3d02      	subs	r5, #2
 8010f9a:	9517      	str	r5, [sp, #92]	; 0x5c
 8010f9c:	3b01      	subs	r3, #1
 8010f9e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	9344      	str	r3, [sp, #272]	; 0x110
 8010fa4:	f88d 5100 	strb.w	r5, [sp, #256]	; 0x100
 8010fa8:	f2c0 8163 	blt.w	8011272 <_svfprintf_r+0x128e>
 8010fac:	222b      	movs	r2, #43	; 0x2b
 8010fae:	f88d 2101 	strb.w	r2, [sp, #257]	; 0x101
 8010fb2:	2b09      	cmp	r3, #9
 8010fb4:	f340 8132 	ble.w	801121c <_svfprintf_r+0x1238>
 8010fb8:	ad43      	add	r5, sp, #268	; 0x10c
 8010fba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010fbc:	3503      	adds	r5, #3
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	fb87 2103 	smull	r2, r1, r7, r3
 8010fc4:	17da      	asrs	r2, r3, #31
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8010fcc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8010fd0:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8010fd4:	4613      	mov	r3, r2
 8010fd6:	3130      	adds	r1, #48	; 0x30
 8010fd8:	2a09      	cmp	r2, #9
 8010fda:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8010fde:	dcef      	bgt.n	8010fc0 <_svfprintf_r+0xfdc>
 8010fe0:	3330      	adds	r3, #48	; 0x30
 8010fe2:	4622      	mov	r2, r4
 8010fe4:	b2d9      	uxtb	r1, r3
 8010fe6:	f802 1d02 	strb.w	r1, [r2, #-2]!
 8010fea:	4295      	cmp	r5, r2
 8010fec:	bf98      	it	ls
 8010fee:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
 8010ff2:	d914      	bls.n	801101e <_svfprintf_r+0x103a>
 8010ff4:	f50d 7381 	add.w	r3, sp, #258	; 0x102
 8010ff8:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
 8010ffc:	e00a      	b.n	8011014 <_svfprintf_r+0x1030>
 8010ffe:	bf00      	nop
 8011000:	08014d2c 	.word	0x08014d2c
 8011004:	08014d30 	.word	0x08014d30
 8011008:	08014d64 	.word	0x08014d64
 801100c:	08014bc4 	.word	0x08014bc4
 8011010:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8011014:	4282      	cmp	r2, r0
 8011016:	f803 1b01 	strb.w	r1, [r3], #1
 801101a:	4619      	mov	r1, r3
 801101c:	d1f8      	bne.n	8011010 <_svfprintf_r+0x102c>
 801101e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011020:	ab40      	add	r3, sp, #256	; 0x100
 8011022:	1acb      	subs	r3, r1, r3
 8011024:	931f      	str	r3, [sp, #124]	; 0x7c
 8011026:	2d01      	cmp	r5, #1
 8011028:	442b      	add	r3, r5
 801102a:	930f      	str	r3, [sp, #60]	; 0x3c
 801102c:	f340 812e 	ble.w	801128c <_svfprintf_r+0x12a8>
 8011030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011032:	2500      	movs	r5, #0
 8011034:	9518      	str	r5, [sp, #96]	; 0x60
 8011036:	3301      	adds	r3, #1
 8011038:	930f      	str	r3, [sp, #60]	; 0x3c
 801103a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801103e:	950a      	str	r5, [sp, #40]	; 0x28
 8011040:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011042:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 8011046:	2d00      	cmp	r5, #0
 8011048:	f43f a903 	beq.w	8010252 <_svfprintf_r+0x26e>
 801104c:	232d      	movs	r3, #45	; 0x2d
 801104e:	2500      	movs	r5, #0
 8011050:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
 8011054:	9514      	str	r5, [sp, #80]	; 0x50
 8011056:	f7ff b8fd 	b.w	8010254 <_svfprintf_r+0x270>
 801105a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801105c:	2140      	movs	r1, #64	; 0x40
 801105e:	f001 f9b3 	bl	80123c8 <_malloc_r>
 8011062:	f8cb 0000 	str.w	r0, [fp]
 8011066:	f8cb 0010 	str.w	r0, [fp, #16]
 801106a:	2800      	cmp	r0, #0
 801106c:	f000 8130 	beq.w	80112d0 <_svfprintf_r+0x12ec>
 8011070:	2340      	movs	r3, #64	; 0x40
 8011072:	f8cb 3014 	str.w	r3, [fp, #20]
 8011076:	f7fe bfcc 	b.w	8010012 <_svfprintf_r+0x2e>
 801107a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801107c:	4659      	mov	r1, fp
 801107e:	aa3d      	add	r2, sp, #244	; 0xf4
 8011080:	f002 faa8 	bl	80135d4 <__ssprint_r>
 8011084:	2800      	cmp	r0, #0
 8011086:	f47f a8a7 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 801108a:	9f44      	ldr	r7, [sp, #272]	; 0x110
 801108c:	ae23      	add	r6, sp, #140	; 0x8c
 801108e:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8011090:	e6af      	b.n	8010df2 <_svfprintf_r+0xe0e>
 8011092:	f1a5 0867 	sub.w	r8, r5, #103	; 0x67
 8011096:	f1d8 0900 	rsbs	r9, r8, #0
 801109a:	eb49 0908 	adc.w	r9, r9, r8
 801109e:	2406      	movs	r4, #6
 80110a0:	2d47      	cmp	r5, #71	; 0x47
 80110a2:	bf08      	it	eq
 80110a4:	f049 0901 	orreq.w	r9, r9, #1
 80110a8:	e700      	b.n	8010eac <_svfprintf_r+0xec8>
 80110aa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80110ac:	2200      	movs	r2, #0
 80110ae:	2300      	movs	r3, #0
 80110b0:	4641      	mov	r1, r8
 80110b2:	f003 fcd1 	bl	8014a58 <__aeabi_dcmpeq>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	f47f af54 	bne.w	8010f64 <_svfprintf_r+0xf80>
 80110bc:	f1c7 0701 	rsb	r7, r7, #1
 80110c0:	9744      	str	r7, [sp, #272]	; 0x110
 80110c2:	e750      	b.n	8010f66 <_svfprintf_r+0xf82>
 80110c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80110c6:	4659      	mov	r1, fp
 80110c8:	aa3d      	add	r2, sp, #244	; 0xf4
 80110ca:	f002 fa83 	bl	80135d4 <__ssprint_r>
 80110ce:	2800      	cmp	r0, #0
 80110d0:	f47f a882 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 80110d4:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 80110d6:	ae23      	add	r6, sp, #140	; 0x8c
 80110d8:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80110da:	3501      	adds	r5, #1
 80110dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80110e0:	2d07      	cmp	r5, #7
 80110e2:	441c      	add	r4, r3
 80110e4:	953e      	str	r5, [sp, #248]	; 0xf8
 80110e6:	6073      	str	r3, [r6, #4]
 80110e8:	6032      	str	r2, [r6, #0]
 80110ea:	943f      	str	r4, [sp, #252]	; 0xfc
 80110ec:	f77f a96c 	ble.w	80103c8 <_svfprintf_r+0x3e4>
 80110f0:	f7ff bb91 	b.w	8010816 <_svfprintf_r+0x832>
 80110f4:	9514      	str	r5, [sp, #80]	; 0x50
 80110f6:	f002 fa3d 	bl	8013574 <strlen>
 80110fa:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80110fe:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8011102:	950a      	str	r5, [sp, #40]	; 0x28
 8011104:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011106:	900f      	str	r0, [sp, #60]	; 0x3c
 8011108:	9518      	str	r5, [sp, #96]	; 0x60
 801110a:	f7ff b8a2 	b.w	8010252 <_svfprintf_r+0x26e>
 801110e:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8011110:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80112f4 <_svfprintf_r+0x1310>
 8011114:	f7ff b8de 	b.w	80102d4 <_svfprintf_r+0x2f0>
 8011118:	980e      	ldr	r0, [sp, #56]	; 0x38
 801111a:	4659      	mov	r1, fp
 801111c:	aa3d      	add	r2, sp, #244	; 0xf4
 801111e:	f002 fa59 	bl	80135d4 <__ssprint_r>
 8011122:	2800      	cmp	r0, #0
 8011124:	f47f a858 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8011128:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 801112a:	ae23      	add	r6, sp, #140	; 0x8c
 801112c:	e4e3      	b.n	8010af6 <_svfprintf_r+0xb12>
 801112e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011130:	4659      	mov	r1, fp
 8011132:	aa3d      	add	r2, sp, #244	; 0xf4
 8011134:	f002 fa4e 	bl	80135d4 <__ssprint_r>
 8011138:	2800      	cmp	r0, #0
 801113a:	f47f a84d 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 801113e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8011140:	ae23      	add	r6, sp, #140	; 0x8c
 8011142:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011144:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8011146:	1aeb      	subs	r3, r5, r3
 8011148:	e580      	b.n	8010c4c <_svfprintf_r+0xc68>
 801114a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801114c:	4659      	mov	r1, fp
 801114e:	aa3d      	add	r2, sp, #244	; 0xf4
 8011150:	f002 fa40 	bl	80135d4 <__ssprint_r>
 8011154:	2800      	cmp	r0, #0
 8011156:	f47f a83f 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 801115a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801115c:	ae23      	add	r6, sp, #140	; 0x8c
 801115e:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8011160:	e55d      	b.n	8010c1e <_svfprintf_r+0xc3a>
 8011162:	46a0      	mov	r8, r4
 8011164:	461c      	mov	r4, r3
 8011166:	3501      	adds	r5, #1
 8011168:	19e4      	adds	r4, r4, r7
 801116a:	2d07      	cmp	r5, #7
 801116c:	f8c6 8000 	str.w	r8, [r6]
 8011170:	6077      	str	r7, [r6, #4]
 8011172:	953e      	str	r5, [sp, #248]	; 0xf8
 8011174:	943f      	str	r4, [sp, #252]	; 0xfc
 8011176:	dca5      	bgt.n	80110c4 <_svfprintf_r+0x10e0>
 8011178:	3608      	adds	r6, #8
 801117a:	e7ae      	b.n	80110da <_svfprintf_r+0x10f6>
 801117c:	2c06      	cmp	r4, #6
 801117e:	bf28      	it	cs
 8011180:	2406      	movcs	r4, #6
 8011182:	9314      	str	r3, [sp, #80]	; 0x50
 8011184:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8011188:	950a      	str	r5, [sp, #40]	; 0x28
 801118a:	4d59      	ldr	r5, [pc, #356]	; (80112f0 <_svfprintf_r+0x130c>)
 801118c:	940f      	str	r4, [sp, #60]	; 0x3c
 801118e:	9318      	str	r3, [sp, #96]	; 0x60
 8011190:	9513      	str	r5, [sp, #76]	; 0x4c
 8011192:	f7ff b85e 	b.w	8010252 <_svfprintf_r+0x26e>
 8011196:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011198:	2d65      	cmp	r5, #101	; 0x65
 801119a:	dd68      	ble.n	801126e <_svfprintf_r+0x128a>
 801119c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801119e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80111a0:	2d00      	cmp	r5, #0
 80111a2:	d156      	bne.n	8011252 <_svfprintf_r+0x126e>
 80111a4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80111a6:	429d      	cmp	r5, r3
 80111a8:	dc44      	bgt.n	8011234 <_svfprintf_r+0x1250>
 80111aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80111ac:	07ec      	lsls	r4, r5, #31
 80111ae:	d565      	bpl.n	801127c <_svfprintf_r+0x1298>
 80111b0:	1c5d      	adds	r5, r3, #1
 80111b2:	950f      	str	r5, [sp, #60]	; 0x3c
 80111b4:	2567      	movs	r5, #103	; 0x67
 80111b6:	9517      	str	r5, [sp, #92]	; 0x5c
 80111b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80111ba:	9318      	str	r3, [sp, #96]	; 0x60
 80111bc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80111c0:	950a      	str	r5, [sp, #40]	; 0x28
 80111c2:	e73d      	b.n	8011040 <_svfprintf_r+0x105c>
 80111c4:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80111c6:	429d      	cmp	r5, r3
 80111c8:	bf98      	it	ls
 80111ca:	461d      	movls	r5, r3
 80111cc:	f67f aed6 	bls.w	8010f7c <_svfprintf_r+0xf98>
 80111d0:	2230      	movs	r2, #48	; 0x30
 80111d2:	f803 2b01 	strb.w	r2, [r3], #1
 80111d6:	42ab      	cmp	r3, r5
 80111d8:	9346      	str	r3, [sp, #280]	; 0x118
 80111da:	d1fa      	bne.n	80111d2 <_svfprintf_r+0x11ee>
 80111dc:	e6ce      	b.n	8010f7c <_svfprintf_r+0xf98>
 80111de:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80111e2:	9014      	str	r0, [sp, #80]	; 0x50
 80111e4:	950a      	str	r5, [sp, #40]	; 0x28
 80111e6:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
 80111ea:	940f      	str	r4, [sp, #60]	; 0x3c
 80111ec:	9018      	str	r0, [sp, #96]	; 0x60
 80111ee:	f7ff b830 	b.w	8010252 <_svfprintf_r+0x26e>
 80111f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80111f4:	4659      	mov	r1, fp
 80111f6:	aa3d      	add	r2, sp, #244	; 0xf4
 80111f8:	f002 f9ec 	bl	80135d4 <__ssprint_r>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	f47e afeb 	bne.w	80101d8 <_svfprintf_r+0x1f4>
 8011202:	9f44      	ldr	r7, [sp, #272]	; 0x110
 8011204:	ae23      	add	r6, sp, #140	; 0x8c
 8011206:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8011208:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 801120a:	e606      	b.n	8010e1a <_svfprintf_r+0xe36>
 801120c:	4627      	mov	r7, r4
 801120e:	2302      	movs	r3, #2
 8011210:	e679      	b.n	8010f06 <_svfprintf_r+0xf22>
 8011212:	252d      	movs	r5, #45	; 0x2d
 8011214:	f103 4800 	add.w	r8, r3, #2147483648	; 0x80000000
 8011218:	9514      	str	r5, [sp, #80]	; 0x50
 801121a:	e653      	b.n	8010ec4 <_svfprintf_r+0xee0>
 801121c:	3330      	adds	r3, #48	; 0x30
 801121e:	2230      	movs	r2, #48	; 0x30
 8011220:	a941      	add	r1, sp, #260	; 0x104
 8011222:	f88d 2102 	strb.w	r2, [sp, #258]	; 0x102
 8011226:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
 801122a:	e6f8      	b.n	801101e <_svfprintf_r+0x103a>
 801122c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80112f8 <_svfprintf_r+0x1314>
 8011230:	f7ff bae7 	b.w	8010802 <_svfprintf_r+0x81e>
 8011234:	2b00      	cmp	r3, #0
 8011236:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011238:	bfd4      	ite	le
 801123a:	f1c3 0202 	rsble	r2, r3, #2
 801123e:	2201      	movgt	r2, #1
 8011240:	1952      	adds	r2, r2, r5
 8011242:	9318      	str	r3, [sp, #96]	; 0x60
 8011244:	2567      	movs	r5, #103	; 0x67
 8011246:	920f      	str	r2, [sp, #60]	; 0x3c
 8011248:	9517      	str	r5, [sp, #92]	; 0x5c
 801124a:	ea22 75e2 	bic.w	r5, r2, r2, asr #31
 801124e:	950a      	str	r5, [sp, #40]	; 0x28
 8011250:	e6f6      	b.n	8011040 <_svfprintf_r+0x105c>
 8011252:	2b00      	cmp	r3, #0
 8011254:	dd2f      	ble.n	80112b6 <_svfprintf_r+0x12d2>
 8011256:	bb24      	cbnz	r4, 80112a2 <_svfprintf_r+0x12be>
 8011258:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801125a:	07ea      	lsls	r2, r5, #31
 801125c:	d421      	bmi.n	80112a2 <_svfprintf_r+0x12be>
 801125e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8011262:	930f      	str	r3, [sp, #60]	; 0x3c
 8011264:	950a      	str	r5, [sp, #40]	; 0x28
 8011266:	2566      	movs	r5, #102	; 0x66
 8011268:	9318      	str	r3, [sp, #96]	; 0x60
 801126a:	9517      	str	r5, [sp, #92]	; 0x5c
 801126c:	e6e8      	b.n	8011040 <_svfprintf_r+0x105c>
 801126e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8011270:	e694      	b.n	8010f9c <_svfprintf_r+0xfb8>
 8011272:	222d      	movs	r2, #45	; 0x2d
 8011274:	425b      	negs	r3, r3
 8011276:	f88d 2101 	strb.w	r2, [sp, #257]	; 0x101
 801127a:	e69a      	b.n	8010fb2 <_svfprintf_r+0xfce>
 801127c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8011280:	930f      	str	r3, [sp, #60]	; 0x3c
 8011282:	950a      	str	r5, [sp, #40]	; 0x28
 8011284:	2567      	movs	r5, #103	; 0x67
 8011286:	9318      	str	r3, [sp, #96]	; 0x60
 8011288:	9517      	str	r5, [sp, #92]	; 0x5c
 801128a:	e6d9      	b.n	8011040 <_svfprintf_r+0x105c>
 801128c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801128e:	f015 0301 	ands.w	r3, r5, #1
 8011292:	f47f aecd 	bne.w	8011030 <_svfprintf_r+0x104c>
 8011296:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011298:	9318      	str	r3, [sp, #96]	; 0x60
 801129a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801129e:	950a      	str	r5, [sp, #40]	; 0x28
 80112a0:	e6ce      	b.n	8011040 <_svfprintf_r+0x105c>
 80112a2:	3401      	adds	r4, #1
 80112a4:	2566      	movs	r5, #102	; 0x66
 80112a6:	191c      	adds	r4, r3, r4
 80112a8:	9517      	str	r5, [sp, #92]	; 0x5c
 80112aa:	940f      	str	r4, [sp, #60]	; 0x3c
 80112ac:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80112b0:	9318      	str	r3, [sp, #96]	; 0x60
 80112b2:	950a      	str	r5, [sp, #40]	; 0x28
 80112b4:	e6c4      	b.n	8011040 <_svfprintf_r+0x105c>
 80112b6:	b914      	cbnz	r4, 80112be <_svfprintf_r+0x12da>
 80112b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112ba:	07ed      	lsls	r5, r5, #31
 80112bc:	d510      	bpl.n	80112e0 <_svfprintf_r+0x12fc>
 80112be:	3402      	adds	r4, #2
 80112c0:	2566      	movs	r5, #102	; 0x66
 80112c2:	940f      	str	r4, [sp, #60]	; 0x3c
 80112c4:	9517      	str	r5, [sp, #92]	; 0x5c
 80112c6:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 80112ca:	9318      	str	r3, [sp, #96]	; 0x60
 80112cc:	950a      	str	r5, [sp, #40]	; 0x28
 80112ce:	e6b7      	b.n	8011040 <_svfprintf_r+0x105c>
 80112d0:	f04f 35ff 	mov.w	r5, #4294967295
 80112d4:	950d      	str	r5, [sp, #52]	; 0x34
 80112d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80112d8:	230c      	movs	r3, #12
 80112da:	602b      	str	r3, [r5, #0]
 80112dc:	f7fe bf85 	b.w	80101ea <_svfprintf_r+0x206>
 80112e0:	2501      	movs	r5, #1
 80112e2:	9318      	str	r3, [sp, #96]	; 0x60
 80112e4:	950a      	str	r5, [sp, #40]	; 0x28
 80112e6:	2566      	movs	r5, #102	; 0x66
 80112e8:	9517      	str	r5, [sp, #92]	; 0x5c
 80112ea:	2501      	movs	r5, #1
 80112ec:	950f      	str	r5, [sp, #60]	; 0x3c
 80112ee:	e6a7      	b.n	8011040 <_svfprintf_r+0x105c>
 80112f0:	08014d5c 	.word	0x08014d5c
 80112f4:	08014bb4 	.word	0x08014bb4
 80112f8:	08014bc4 	.word	0x08014bc4
 80112fc:	00000000 	.word	0x00000000

08011300 <quorem>:
 8011300:	6903      	ldr	r3, [r0, #16]
 8011302:	690a      	ldr	r2, [r1, #16]
 8011304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011308:	4680      	mov	r8, r0
 801130a:	b083      	sub	sp, #12
 801130c:	2000      	movs	r0, #0
 801130e:	429a      	cmp	r2, r3
 8011310:	4689      	mov	r9, r1
 8011312:	9200      	str	r2, [sp, #0]
 8011314:	f300 8093 	bgt.w	801143e <quorem+0x13e>
 8011318:	3203      	adds	r2, #3
 801131a:	9b00      	ldr	r3, [sp, #0]
 801131c:	f101 0514 	add.w	r5, r1, #20
 8011320:	0092      	lsls	r2, r2, #2
 8011322:	1e5c      	subs	r4, r3, #1
 8011324:	f108 0314 	add.w	r3, r8, #20
 8011328:	9301      	str	r3, [sp, #4]
 801132a:	188b      	adds	r3, r1, r2
 801132c:	4442      	add	r2, r8
 801132e:	1d1f      	adds	r7, r3, #4
 8011330:	6859      	ldr	r1, [r3, #4]
 8011332:	6850      	ldr	r0, [r2, #4]
 8011334:	3101      	adds	r1, #1
 8011336:	f003 f9fb 	bl	8014730 <__aeabi_uidiv>
 801133a:	4606      	mov	r6, r0
 801133c:	2800      	cmp	r0, #0
 801133e:	d042      	beq.n	80113c6 <quorem+0xc6>
 8011340:	2000      	movs	r0, #0
 8011342:	9a01      	ldr	r2, [sp, #4]
 8011344:	462b      	mov	r3, r5
 8011346:	4686      	mov	lr, r0
 8011348:	f853 cb04 	ldr.w	ip, [r3], #4
 801134c:	6811      	ldr	r1, [r2, #0]
 801134e:	fa1f fb8c 	uxth.w	fp, ip
 8011352:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8011356:	fa1f fa81 	uxth.w	sl, r1
 801135a:	fb06 0b0b 	mla	fp, r6, fp, r0
 801135e:	44d6      	add	lr, sl
 8011360:	fb06 f00c 	mul.w	r0, r6, ip
 8011364:	eb00 401b 	add.w	r0, r0, fp, lsr #16
 8011368:	fa1f fb8b 	uxth.w	fp, fp
 801136c:	ebcb 0a0e 	rsb	sl, fp, lr
 8011370:	fa1f fe80 	uxth.w	lr, r0
 8011374:	0c00      	lsrs	r0, r0, #16
 8011376:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
 801137a:	429f      	cmp	r7, r3
 801137c:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 8011380:	fa1f fc8a 	uxth.w	ip, sl
 8011384:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
 8011388:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 801138c:	f842 1b04 	str.w	r1, [r2], #4
 8011390:	d2da      	bcs.n	8011348 <quorem+0x48>
 8011392:	1d22      	adds	r2, r4, #4
 8011394:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8011398:	6859      	ldr	r1, [r3, #4]
 801139a:	b9a1      	cbnz	r1, 80113c6 <quorem+0xc6>
 801139c:	9801      	ldr	r0, [sp, #4]
 801139e:	4298      	cmp	r0, r3
 80113a0:	d20f      	bcs.n	80113c2 <quorem+0xc2>
 80113a2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80113a6:	b962      	cbnz	r2, 80113c2 <quorem+0xc2>
 80113a8:	9a00      	ldr	r2, [sp, #0]
 80113aa:	1e91      	subs	r1, r2, #2
 80113ac:	43c2      	mvns	r2, r0
 80113ae:	18d2      	adds	r2, r2, r3
 80113b0:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
 80113b4:	e002      	b.n	80113bc <quorem+0xbc>
 80113b6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80113ba:	b912      	cbnz	r2, 80113c2 <quorem+0xc2>
 80113bc:	3c01      	subs	r4, #1
 80113be:	428c      	cmp	r4, r1
 80113c0:	d1f9      	bne.n	80113b6 <quorem+0xb6>
 80113c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80113c6:	4640      	mov	r0, r8
 80113c8:	4649      	mov	r1, r9
 80113ca:	f001 fd93 	bl	8012ef4 <__mcmp>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	db34      	blt.n	801143c <quorem+0x13c>
 80113d2:	9b01      	ldr	r3, [sp, #4]
 80113d4:	3601      	adds	r6, #1
 80113d6:	f04f 0c00 	mov.w	ip, #0
 80113da:	f855 0b04 	ldr.w	r0, [r5], #4
 80113de:	6819      	ldr	r1, [r3, #0]
 80113e0:	fa1f f980 	uxth.w	r9, r0
 80113e4:	0c00      	lsrs	r0, r0, #16
 80113e6:	b28a      	uxth	r2, r1
 80113e8:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 80113ec:	ebc9 0202 	rsb	r2, r9, r2
 80113f0:	42af      	cmp	r7, r5
 80113f2:	4494      	add	ip, r2
 80113f4:	eb01 422c 	add.w	r2, r1, ip, asr #16
 80113f8:	fa1f fc8c 	uxth.w	ip, ip
 80113fc:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
 8011400:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011404:	f843 1b04 	str.w	r1, [r3], #4
 8011408:	d2e7      	bcs.n	80113da <quorem+0xda>
 801140a:	1d22      	adds	r2, r4, #4
 801140c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8011410:	6859      	ldr	r1, [r3, #4]
 8011412:	b999      	cbnz	r1, 801143c <quorem+0x13c>
 8011414:	9801      	ldr	r0, [sp, #4]
 8011416:	4298      	cmp	r0, r3
 8011418:	d20e      	bcs.n	8011438 <quorem+0x138>
 801141a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801141e:	b95a      	cbnz	r2, 8011438 <quorem+0x138>
 8011420:	43c1      	mvns	r1, r0
 8011422:	18c9      	adds	r1, r1, r3
 8011424:	f021 0103 	bic.w	r1, r1, #3
 8011428:	1a59      	subs	r1, r3, r1
 801142a:	e002      	b.n	8011432 <quorem+0x132>
 801142c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011430:	b912      	cbnz	r2, 8011438 <quorem+0x138>
 8011432:	3c01      	subs	r4, #1
 8011434:	428b      	cmp	r3, r1
 8011436:	d1f9      	bne.n	801142c <quorem+0x12c>
 8011438:	f8c8 4010 	str.w	r4, [r8, #16]
 801143c:	4630      	mov	r0, r6
 801143e:	b003      	add	sp, #12
 8011440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011444 <_dtoa_r>:
 8011444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011448:	4681      	mov	r9, r0
 801144a:	b09d      	sub	sp, #116	; 0x74
 801144c:	4619      	mov	r1, r3
 801144e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8011452:	4610      	mov	r0, r2
 8011454:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8011456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801145a:	b163      	cbz	r3, 8011476 <_dtoa_r+0x32>
 801145c:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8011460:	2501      	movs	r5, #1
 8011462:	4619      	mov	r1, r3
 8011464:	4648      	mov	r0, r9
 8011466:	4095      	lsls	r5, r2
 8011468:	609d      	str	r5, [r3, #8]
 801146a:	605a      	str	r2, [r3, #4]
 801146c:	f001 fb0e 	bl	8012a8c <_Bfree>
 8011470:	2300      	movs	r3, #0
 8011472:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8011476:	9d03      	ldr	r5, [sp, #12]
 8011478:	2d00      	cmp	r5, #0
 801147a:	f2c0 80e3 	blt.w	8011644 <_dtoa_r+0x200>
 801147e:	2300      	movs	r3, #0
 8011480:	6023      	str	r3, [r4, #0]
 8011482:	2300      	movs	r3, #0
 8011484:	461a      	mov	r2, r3
 8011486:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 801148a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 801148e:	402b      	ands	r3, r5
 8011490:	4293      	cmp	r3, r2
 8011492:	f000 80c3 	beq.w	801161c <_dtoa_r+0x1d8>
 8011496:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801149a:	2200      	movs	r2, #0
 801149c:	2300      	movs	r3, #0
 801149e:	2401      	movs	r4, #1
 80114a0:	4630      	mov	r0, r6
 80114a2:	4639      	mov	r1, r7
 80114a4:	f003 fad8 	bl	8014a58 <__aeabi_dcmpeq>
 80114a8:	b978      	cbnz	r0, 80114ca <_dtoa_r+0x86>
 80114aa:	f014 0fff 	tst.w	r4, #255	; 0xff
 80114ae:	d110      	bne.n	80114d2 <_dtoa_r+0x8e>
 80114b0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80114b2:	2301      	movs	r3, #1
 80114b4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80114b6:	602b      	str	r3, [r5, #0]
 80114b8:	4d7b      	ldr	r5, [pc, #492]	; (80116a8 <_dtoa_r+0x264>)
 80114ba:	b114      	cbz	r4, 80114c2 <_dtoa_r+0x7e>
 80114bc:	4b7b      	ldr	r3, [pc, #492]	; (80116ac <_dtoa_r+0x268>)
 80114be:	1e5d      	subs	r5, r3, #1
 80114c0:	6023      	str	r3, [r4, #0]
 80114c2:	4628      	mov	r0, r5
 80114c4:	b01d      	add	sp, #116	; 0x74
 80114c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ca:	2400      	movs	r4, #0
 80114cc:	f014 0fff 	tst.w	r4, #255	; 0xff
 80114d0:	d0ee      	beq.n	80114b0 <_dtoa_r+0x6c>
 80114d2:	463b      	mov	r3, r7
 80114d4:	4648      	mov	r0, r9
 80114d6:	4632      	mov	r2, r6
 80114d8:	a91b      	add	r1, sp, #108	; 0x6c
 80114da:	9100      	str	r1, [sp, #0]
 80114dc:	a91a      	add	r1, sp, #104	; 0x68
 80114de:	9101      	str	r1, [sp, #4]
 80114e0:	f001 fe12 	bl	8013108 <__d2b>
 80114e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80114e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f040 80b9 	bne.w	8011662 <_dtoa_r+0x21e>
 80114f0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80114f2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80114f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80114f8:	19be      	adds	r6, r7, r6
 80114fa:	429e      	cmp	r6, r3
 80114fc:	f2c0 82a2 	blt.w	8011a44 <_dtoa_r+0x600>
 8011500:	9802      	ldr	r0, [sp, #8]
 8011502:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8011506:	f506 6282 	add.w	r2, r6, #1040	; 0x410
 801150a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 801150e:	3202      	adds	r2, #2
 8011510:	1b9b      	subs	r3, r3, r6
 8011512:	fa30 f202 	lsrs.w	r2, r0, r2
 8011516:	fa15 f303 	lsls.w	r3, r5, r3
 801151a:	ea43 0002 	orr.w	r0, r3, r2
 801151e:	f7fe f9ef 	bl	800f900 <__aeabi_ui2d>
 8011522:	3e01      	subs	r6, #1
 8011524:	2401      	movs	r4, #1
 8011526:	9417      	str	r4, [sp, #92]	; 0x5c
 8011528:	4602      	mov	r2, r0
 801152a:	460b      	mov	r3, r1
 801152c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011530:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011532:	f1a5 75f8 	sub.w	r5, r5, #32505856	; 0x1f00000
 8011536:	950d      	str	r5, [sp, #52]	; 0x34
 8011538:	2300      	movs	r3, #0
 801153a:	2200      	movs	r2, #0
 801153c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8011540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011544:	f7fe f89e 	bl	800f684 <__aeabi_dsub>
 8011548:	a351      	add	r3, pc, #324	; (adr r3, 8011690 <_dtoa_r+0x24c>)
 801154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154e:	f7fe fa4d 	bl	800f9ec <__aeabi_dmul>
 8011552:	a351      	add	r3, pc, #324	; (adr r3, 8011698 <_dtoa_r+0x254>)
 8011554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011558:	f7fe f896 	bl	800f688 <__adddf3>
 801155c:	4604      	mov	r4, r0
 801155e:	4630      	mov	r0, r6
 8011560:	460d      	mov	r5, r1
 8011562:	f7fe f9dd 	bl	800f920 <__aeabi_i2d>
 8011566:	a34e      	add	r3, pc, #312	; (adr r3, 80116a0 <_dtoa_r+0x25c>)
 8011568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156c:	f7fe fa3e 	bl	800f9ec <__aeabi_dmul>
 8011570:	4602      	mov	r2, r0
 8011572:	460b      	mov	r3, r1
 8011574:	4620      	mov	r0, r4
 8011576:	4629      	mov	r1, r5
 8011578:	f7fe f886 	bl	800f688 <__adddf3>
 801157c:	4604      	mov	r4, r0
 801157e:	460d      	mov	r5, r1
 8011580:	f003 fa9c 	bl	8014abc <__aeabi_d2iz>
 8011584:	4629      	mov	r1, r5
 8011586:	2200      	movs	r2, #0
 8011588:	2300      	movs	r3, #0
 801158a:	9006      	str	r0, [sp, #24]
 801158c:	4620      	mov	r0, r4
 801158e:	f003 fa6d 	bl	8014a6c <__aeabi_dcmplt>
 8011592:	b150      	cbz	r0, 80115aa <_dtoa_r+0x166>
 8011594:	9806      	ldr	r0, [sp, #24]
 8011596:	f7fe f9c3 	bl	800f920 <__aeabi_i2d>
 801159a:	4622      	mov	r2, r4
 801159c:	462b      	mov	r3, r5
 801159e:	f003 fa5b 	bl	8014a58 <__aeabi_dcmpeq>
 80115a2:	b910      	cbnz	r0, 80115aa <_dtoa_r+0x166>
 80115a4:	9c06      	ldr	r4, [sp, #24]
 80115a6:	3c01      	subs	r4, #1
 80115a8:	9406      	str	r4, [sp, #24]
 80115aa:	9d06      	ldr	r5, [sp, #24]
 80115ac:	2d16      	cmp	r5, #22
 80115ae:	f200 816a 	bhi.w	8011886 <_dtoa_r+0x442>
 80115b2:	493f      	ldr	r1, [pc, #252]	; (80116b0 <_dtoa_r+0x26c>)
 80115b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115b8:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80115bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115c0:	f003 fa72 	bl	8014aa8 <__aeabi_dcmpgt>
 80115c4:	2800      	cmp	r0, #0
 80115c6:	f000 8246 	beq.w	8011a56 <_dtoa_r+0x612>
 80115ca:	9c06      	ldr	r4, [sp, #24]
 80115cc:	2500      	movs	r5, #0
 80115ce:	9515      	str	r5, [sp, #84]	; 0x54
 80115d0:	3c01      	subs	r4, #1
 80115d2:	9406      	str	r4, [sp, #24]
 80115d4:	1bbe      	subs	r6, r7, r6
 80115d6:	3e01      	subs	r6, #1
 80115d8:	f100 822f 	bmi.w	8011a3a <_dtoa_r+0x5f6>
 80115dc:	2500      	movs	r5, #0
 80115de:	960b      	str	r6, [sp, #44]	; 0x2c
 80115e0:	9510      	str	r5, [sp, #64]	; 0x40
 80115e2:	9c06      	ldr	r4, [sp, #24]
 80115e4:	2c00      	cmp	r4, #0
 80115e6:	f2c0 821f 	blt.w	8011a28 <_dtoa_r+0x5e4>
 80115ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80115ec:	9414      	str	r4, [sp, #80]	; 0x50
 80115ee:	192d      	adds	r5, r5, r4
 80115f0:	2400      	movs	r4, #0
 80115f2:	950b      	str	r5, [sp, #44]	; 0x2c
 80115f4:	9411      	str	r4, [sp, #68]	; 0x44
 80115f6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80115f8:	2d09      	cmp	r5, #9
 80115fa:	d85f      	bhi.n	80116bc <_dtoa_r+0x278>
 80115fc:	2401      	movs	r4, #1
 80115fe:	2d05      	cmp	r5, #5
 8011600:	dd02      	ble.n	8011608 <_dtoa_r+0x1c4>
 8011602:	2400      	movs	r4, #0
 8011604:	3d04      	subs	r5, #4
 8011606:	9526      	str	r5, [sp, #152]	; 0x98
 8011608:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801160a:	1eab      	subs	r3, r5, #2
 801160c:	2b03      	cmp	r3, #3
 801160e:	d857      	bhi.n	80116c0 <_dtoa_r+0x27c>
 8011610:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011614:	039a03af 	.word	0x039a03af
 8011618:	03b20264 	.word	0x03b20264
 801161c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 801161e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011622:	9802      	ldr	r0, [sp, #8]
 8011624:	6023      	str	r3, [r4, #0]
 8011626:	b198      	cbz	r0, 8011650 <_dtoa_r+0x20c>
 8011628:	4d22      	ldr	r5, [pc, #136]	; (80116b4 <_dtoa_r+0x270>)
 801162a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801162c:	2c00      	cmp	r4, #0
 801162e:	f43f af48 	beq.w	80114c2 <_dtoa_r+0x7e>
 8011632:	78eb      	ldrb	r3, [r5, #3]
 8011634:	2b00      	cmp	r3, #0
 8011636:	f000 8124 	beq.w	8011882 <_dtoa_r+0x43e>
 801163a:	f105 0308 	add.w	r3, r5, #8
 801163e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8011640:	6023      	str	r3, [r4, #0]
 8011642:	e73e      	b.n	80114c2 <_dtoa_r+0x7e>
 8011644:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8011648:	2301      	movs	r3, #1
 801164a:	9503      	str	r5, [sp, #12]
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	e718      	b.n	8011482 <_dtoa_r+0x3e>
 8011650:	4b18      	ldr	r3, [pc, #96]	; (80116b4 <_dtoa_r+0x270>)
 8011652:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011656:	4a18      	ldr	r2, [pc, #96]	; (80116b8 <_dtoa_r+0x274>)
 8011658:	2d00      	cmp	r5, #0
 801165a:	bf0c      	ite	eq
 801165c:	4615      	moveq	r5, r2
 801165e:	461d      	movne	r5, r3
 8011660:	e7e3      	b.n	801162a <_dtoa_r+0x1e6>
 8011662:	4639      	mov	r1, r7
 8011664:	4630      	mov	r0, r6
 8011666:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801166a:	f5a3 767e 	sub.w	r6, r3, #1016	; 0x3f8
 801166e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011670:	2400      	movs	r4, #0
 8011672:	3e07      	subs	r6, #7
 8011674:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8011676:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 801167a:	9417      	str	r4, [sp, #92]	; 0x5c
 801167c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011680:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8011684:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8011688:	930d      	str	r3, [sp, #52]	; 0x34
 801168a:	e755      	b.n	8011538 <_dtoa_r+0xf4>
 801168c:	f3af 8000 	nop.w
 8011690:	636f4361 	.word	0x636f4361
 8011694:	3fd287a7 	.word	0x3fd287a7
 8011698:	8b60c8b3 	.word	0x8b60c8b3
 801169c:	3fc68a28 	.word	0x3fc68a28
 80116a0:	509f79fb 	.word	0x509f79fb
 80116a4:	3fd34413 	.word	0x3fd34413
 80116a8:	08014d64 	.word	0x08014d64
 80116ac:	08014d65 	.word	0x08014d65
 80116b0:	08014be8 	.word	0x08014be8
 80116b4:	08014d74 	.word	0x08014d74
 80116b8:	08014d68 	.word	0x08014d68
 80116bc:	2400      	movs	r4, #0
 80116be:	9426      	str	r4, [sp, #152]	; 0x98
 80116c0:	2400      	movs	r4, #0
 80116c2:	4648      	mov	r0, r9
 80116c4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80116c8:	4621      	mov	r1, r4
 80116ca:	f04f 35ff 	mov.w	r5, #4294967295
 80116ce:	950e      	str	r5, [sp, #56]	; 0x38
 80116d0:	f001 f9b6 	bl	8012a40 <_Balloc>
 80116d4:	2501      	movs	r5, #1
 80116d6:	9513      	str	r5, [sp, #76]	; 0x4c
 80116d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80116da:	9427      	str	r4, [sp, #156]	; 0x9c
 80116dc:	9516      	str	r5, [sp, #88]	; 0x58
 80116de:	900a      	str	r0, [sp, #40]	; 0x28
 80116e0:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80116e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116e6:	9d06      	ldr	r5, [sp, #24]
 80116e8:	43dc      	mvns	r4, r3
 80116ea:	0fe4      	lsrs	r4, r4, #31
 80116ec:	2d0e      	cmp	r5, #14
 80116ee:	bfcc      	ite	gt
 80116f0:	2400      	movgt	r4, #0
 80116f2:	f004 0401 	andle.w	r4, r4, #1
 80116f6:	2c00      	cmp	r4, #0
 80116f8:	f000 80ca 	beq.w	8011890 <_dtoa_r+0x44c>
 80116fc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80116fe:	4b63      	ldr	r3, [pc, #396]	; (801188c <_dtoa_r+0x448>)
 8011700:	0fec      	lsrs	r4, r5, #31
 8011702:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011704:	2d00      	cmp	r5, #0
 8011706:	bfcc      	ite	gt
 8011708:	2400      	movgt	r4, #0
 801170a:	f004 0401 	andle.w	r4, r4, #1
 801170e:	9d06      	ldr	r5, [sp, #24]
 8011710:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801171c:	2c00      	cmp	r4, #0
 801171e:	f040 81c2 	bne.w	8011aa6 <_dtoa_r+0x662>
 8011722:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011726:	4602      	mov	r2, r0
 8011728:	460b      	mov	r3, r1
 801172a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801172c:	4630      	mov	r0, r6
 801172e:	4639      	mov	r1, r7
 8011730:	f7fe fa86 	bl	800fc40 <__aeabi_ddiv>
 8011734:	f003 f9c2 	bl	8014abc <__aeabi_d2iz>
 8011738:	4682      	mov	sl, r0
 801173a:	f7fe f8f1 	bl	800f920 <__aeabi_i2d>
 801173e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011742:	f7fe f953 	bl	800f9ec <__aeabi_dmul>
 8011746:	460b      	mov	r3, r1
 8011748:	4602      	mov	r2, r0
 801174a:	4639      	mov	r1, r7
 801174c:	4630      	mov	r0, r6
 801174e:	f7fd ff99 	bl	800f684 <__aeabi_dsub>
 8011752:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8011756:	f805 3b01 	strb.w	r3, [r5], #1
 801175a:	46a8      	mov	r8, r5
 801175c:	9512      	str	r5, [sp, #72]	; 0x48
 801175e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011760:	2d01      	cmp	r5, #1
 8011762:	4606      	mov	r6, r0
 8011764:	460f      	mov	r7, r1
 8011766:	d052      	beq.n	801180e <_dtoa_r+0x3ca>
 8011768:	2300      	movs	r3, #0
 801176a:	2200      	movs	r2, #0
 801176c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011770:	f7fe f93c 	bl	800f9ec <__aeabi_dmul>
 8011774:	2300      	movs	r3, #0
 8011776:	2200      	movs	r2, #0
 8011778:	4606      	mov	r6, r0
 801177a:	460f      	mov	r7, r1
 801177c:	f003 f96c 	bl	8014a58 <__aeabi_dcmpeq>
 8011780:	2301      	movs	r3, #1
 8011782:	b100      	cbz	r0, 8011786 <_dtoa_r+0x342>
 8011784:	4623      	mov	r3, r4
 8011786:	f013 0fff 	tst.w	r3, #255	; 0xff
 801178a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801178c:	f000 85b6 	beq.w	80122fc <_dtoa_r+0xeb8>
 8011790:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011792:	1cac      	adds	r4, r5, #2
 8011794:	f8cd 9008 	str.w	r9, [sp, #8]
 8011798:	eb05 0b00 	add.w	fp, r5, r0
 801179c:	e00e      	b.n	80117bc <_dtoa_r+0x378>
 801179e:	f7fe f925 	bl	800f9ec <__aeabi_dmul>
 80117a2:	2200      	movs	r2, #0
 80117a4:	2300      	movs	r3, #0
 80117a6:	4606      	mov	r6, r0
 80117a8:	460f      	mov	r7, r1
 80117aa:	f003 f955 	bl	8014a58 <__aeabi_dcmpeq>
 80117ae:	b108      	cbz	r0, 80117b4 <_dtoa_r+0x370>
 80117b0:	f04f 0800 	mov.w	r8, #0
 80117b4:	f018 0fff 	tst.w	r8, #255	; 0xff
 80117b8:	f000 845a 	beq.w	8012070 <_dtoa_r+0xc2c>
 80117bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117c0:	4630      	mov	r0, r6
 80117c2:	4639      	mov	r1, r7
 80117c4:	46a1      	mov	r9, r4
 80117c6:	f7fe fa3b 	bl	800fc40 <__aeabi_ddiv>
 80117ca:	f04f 0801 	mov.w	r8, #1
 80117ce:	f003 f975 	bl	8014abc <__aeabi_d2iz>
 80117d2:	4682      	mov	sl, r0
 80117d4:	f7fe f8a4 	bl	800f920 <__aeabi_i2d>
 80117d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117dc:	f10a 0530 	add.w	r5, sl, #48	; 0x30
 80117e0:	f7fe f904 	bl	800f9ec <__aeabi_dmul>
 80117e4:	4602      	mov	r2, r0
 80117e6:	460b      	mov	r3, r1
 80117e8:	4630      	mov	r0, r6
 80117ea:	4639      	mov	r1, r7
 80117ec:	f7fd ff4a 	bl	800f684 <__aeabi_dsub>
 80117f0:	2300      	movs	r3, #0
 80117f2:	2200      	movs	r2, #0
 80117f4:	455c      	cmp	r4, fp
 80117f6:	f804 5c01 	strb.w	r5, [r4, #-1]
 80117fa:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80117fe:	f104 0401 	add.w	r4, r4, #1
 8011802:	4606      	mov	r6, r0
 8011804:	460f      	mov	r7, r1
 8011806:	d1ca      	bne.n	801179e <_dtoa_r+0x35a>
 8011808:	46c8      	mov	r8, r9
 801180a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801180e:	4632      	mov	r2, r6
 8011810:	463b      	mov	r3, r7
 8011812:	4630      	mov	r0, r6
 8011814:	4639      	mov	r1, r7
 8011816:	f7fd ff37 	bl	800f688 <__adddf3>
 801181a:	4604      	mov	r4, r0
 801181c:	460d      	mov	r5, r1
 801181e:	4622      	mov	r2, r4
 8011820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011824:	462b      	mov	r3, r5
 8011826:	f003 f921 	bl	8014a6c <__aeabi_dcmplt>
 801182a:	b960      	cbnz	r0, 8011846 <_dtoa_r+0x402>
 801182c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011830:	4622      	mov	r2, r4
 8011832:	462b      	mov	r3, r5
 8011834:	f003 f910 	bl	8014a58 <__aeabi_dcmpeq>
 8011838:	2800      	cmp	r0, #0
 801183a:	f000 841c 	beq.w	8012076 <_dtoa_r+0xc32>
 801183e:	f01a 0f01 	tst.w	sl, #1
 8011842:	f000 8418 	beq.w	8012076 <_dtoa_r+0xc32>
 8011846:	9c06      	ldr	r4, [sp, #24]
 8011848:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 801184c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801184e:	9418      	str	r4, [sp, #96]	; 0x60
 8011850:	4643      	mov	r3, r8
 8011852:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011854:	e002      	b.n	801185c <_dtoa_r+0x418>
 8011856:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 801185a:	3b01      	subs	r3, #1
 801185c:	2e39      	cmp	r6, #57	; 0x39
 801185e:	461a      	mov	r2, r3
 8011860:	f040 84d2 	bne.w	8012208 <_dtoa_r+0xdc4>
 8011864:	428b      	cmp	r3, r1
 8011866:	d1f6      	bne.n	8011856 <_dtoa_r+0x412>
 8011868:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801186a:	2330      	movs	r3, #48	; 0x30
 801186c:	920a      	str	r2, [sp, #40]	; 0x28
 801186e:	2231      	movs	r2, #49	; 0x31
 8011870:	3401      	adds	r4, #1
 8011872:	9406      	str	r4, [sp, #24]
 8011874:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011876:	f804 3c01 	strb.w	r3, [r4, #-1]
 801187a:	4623      	mov	r3, r4
 801187c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011880:	e0c0      	b.n	8011a04 <_dtoa_r+0x5c0>
 8011882:	1ceb      	adds	r3, r5, #3
 8011884:	e6db      	b.n	801163e <_dtoa_r+0x1fa>
 8011886:	2401      	movs	r4, #1
 8011888:	9415      	str	r4, [sp, #84]	; 0x54
 801188a:	e6a3      	b.n	80115d4 <_dtoa_r+0x190>
 801188c:	08014be8 	.word	0x08014be8
 8011890:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011892:	2d00      	cmp	r5, #0
 8011894:	f040 80e2 	bne.w	8011a5c <_dtoa_r+0x618>
 8011898:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801189a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801189c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80118a0:	2d00      	cmp	r5, #0
 80118a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80118a4:	bfd4      	ite	le
 80118a6:	2300      	movle	r3, #0
 80118a8:	2301      	movgt	r3, #1
 80118aa:	2800      	cmp	r0, #0
 80118ac:	bfd4      	ite	le
 80118ae:	2300      	movle	r3, #0
 80118b0:	f003 0301 	andgt.w	r3, r3, #1
 80118b4:	b14b      	cbz	r3, 80118ca <_dtoa_r+0x486>
 80118b6:	4603      	mov	r3, r0
 80118b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80118ba:	42ab      	cmp	r3, r5
 80118bc:	bfa8      	it	ge
 80118be:	462b      	movge	r3, r5
 80118c0:	1aed      	subs	r5, r5, r3
 80118c2:	1ac9      	subs	r1, r1, r3
 80118c4:	1ac0      	subs	r0, r0, r3
 80118c6:	9110      	str	r1, [sp, #64]	; 0x40
 80118c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80118ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80118cc:	2a00      	cmp	r2, #0
 80118ce:	dd1a      	ble.n	8011906 <_dtoa_r+0x4c2>
 80118d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	f000 8457 	beq.w	8012186 <_dtoa_r+0xd42>
 80118d8:	2c00      	cmp	r4, #0
 80118da:	dd10      	ble.n	80118fe <_dtoa_r+0x4ba>
 80118dc:	4651      	mov	r1, sl
 80118de:	4622      	mov	r2, r4
 80118e0:	4648      	mov	r0, r9
 80118e2:	f001 fa5b 	bl	8012d9c <__pow5mult>
 80118e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80118e8:	4682      	mov	sl, r0
 80118ea:	4648      	mov	r0, r9
 80118ec:	4651      	mov	r1, sl
 80118ee:	f001 f9b9 	bl	8012c64 <__multiply>
 80118f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80118f4:	4606      	mov	r6, r0
 80118f6:	4648      	mov	r0, r9
 80118f8:	f001 f8c8 	bl	8012a8c <_Bfree>
 80118fc:	960f      	str	r6, [sp, #60]	; 0x3c
 80118fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011900:	1b02      	subs	r2, r0, r4
 8011902:	f040 8464 	bne.w	80121ce <_dtoa_r+0xd8a>
 8011906:	2101      	movs	r1, #1
 8011908:	4648      	mov	r0, r9
 801190a:	f001 f9a1 	bl	8012c50 <__i2b>
 801190e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011910:	2900      	cmp	r1, #0
 8011912:	4604      	mov	r4, r0
 8011914:	dd05      	ble.n	8011922 <_dtoa_r+0x4de>
 8011916:	4621      	mov	r1, r4
 8011918:	4648      	mov	r0, r9
 801191a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801191c:	f001 fa3e 	bl	8012d9c <__pow5mult>
 8011920:	4604      	mov	r4, r0
 8011922:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011924:	2a01      	cmp	r2, #1
 8011926:	f340 822a 	ble.w	8011d7e <_dtoa_r+0x93a>
 801192a:	2600      	movs	r6, #0
 801192c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801192e:	2301      	movs	r3, #1
 8011930:	2a00      	cmp	r2, #0
 8011932:	f040 83a4 	bne.w	801207e <_dtoa_r+0xc3a>
 8011936:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011938:	181b      	adds	r3, r3, r0
 801193a:	f013 031f 	ands.w	r3, r3, #31
 801193e:	f000 8275 	beq.w	8011e2c <_dtoa_r+0x9e8>
 8011942:	f1c3 0220 	rsb	r2, r3, #32
 8011946:	2a04      	cmp	r2, #4
 8011948:	f340 84f3 	ble.w	8012332 <_dtoa_r+0xeee>
 801194c:	f1c3 031c 	rsb	r3, r3, #28
 8011950:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011952:	18ed      	adds	r5, r5, r3
 8011954:	18c0      	adds	r0, r0, r3
 8011956:	18c9      	adds	r1, r1, r3
 8011958:	900b      	str	r0, [sp, #44]	; 0x2c
 801195a:	9110      	str	r1, [sp, #64]	; 0x40
 801195c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801195e:	2900      	cmp	r1, #0
 8011960:	dd05      	ble.n	801196e <_dtoa_r+0x52a>
 8011962:	4648      	mov	r0, r9
 8011964:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011966:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011968:	f001 fa64 	bl	8012e34 <__lshift>
 801196c:	900f      	str	r0, [sp, #60]	; 0x3c
 801196e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011970:	2a00      	cmp	r2, #0
 8011972:	dd04      	ble.n	801197e <_dtoa_r+0x53a>
 8011974:	4621      	mov	r1, r4
 8011976:	4648      	mov	r0, r9
 8011978:	f001 fa5c 	bl	8012e34 <__lshift>
 801197c:	4604      	mov	r4, r0
 801197e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011980:	2b00      	cmp	r3, #0
 8011982:	f040 8385 	bne.w	8012090 <_dtoa_r+0xc4c>
 8011986:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011988:	990e      	ldr	r1, [sp, #56]	; 0x38
 801198a:	2802      	cmp	r0, #2
 801198c:	bfd4      	ite	le
 801198e:	2300      	movle	r3, #0
 8011990:	2301      	movgt	r3, #1
 8011992:	2900      	cmp	r1, #0
 8011994:	bfcc      	ite	gt
 8011996:	2300      	movgt	r3, #0
 8011998:	f003 0301 	andle.w	r3, r3, #1
 801199c:	2b00      	cmp	r3, #0
 801199e:	f000 824e 	beq.w	8011e3e <_dtoa_r+0x9fa>
 80119a2:	2900      	cmp	r1, #0
 80119a4:	f040 8094 	bne.w	8011ad0 <_dtoa_r+0x68c>
 80119a8:	2205      	movs	r2, #5
 80119aa:	460b      	mov	r3, r1
 80119ac:	4648      	mov	r0, r9
 80119ae:	4621      	mov	r1, r4
 80119b0:	f001 f876 	bl	8012aa0 <__multadd>
 80119b4:	4604      	mov	r4, r0
 80119b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80119b8:	4621      	mov	r1, r4
 80119ba:	f001 fa9b 	bl	8012ef4 <__mcmp>
 80119be:	2800      	cmp	r0, #0
 80119c0:	f340 8086 	ble.w	8011ad0 <_dtoa_r+0x68c>
 80119c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119c6:	2700      	movs	r7, #0
 80119c8:	9806      	ldr	r0, [sp, #24]
 80119ca:	2231      	movs	r2, #49	; 0x31
 80119cc:	461d      	mov	r5, r3
 80119ce:	3001      	adds	r0, #1
 80119d0:	f803 2b01 	strb.w	r2, [r3], #1
 80119d4:	9006      	str	r0, [sp, #24]
 80119d6:	930a      	str	r3, [sp, #40]	; 0x28
 80119d8:	4648      	mov	r0, r9
 80119da:	4621      	mov	r1, r4
 80119dc:	f001 f856 	bl	8012a8c <_Bfree>
 80119e0:	f1ba 0f00 	cmp.w	sl, #0
 80119e4:	d00e      	beq.n	8011a04 <_dtoa_r+0x5c0>
 80119e6:	1c3b      	adds	r3, r7, #0
 80119e8:	bf18      	it	ne
 80119ea:	2301      	movne	r3, #1
 80119ec:	4557      	cmp	r7, sl
 80119ee:	bf0c      	ite	eq
 80119f0:	2300      	moveq	r3, #0
 80119f2:	f003 0301 	andne.w	r3, r3, #1
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f040 8213 	bne.w	8011e22 <_dtoa_r+0x9de>
 80119fc:	4648      	mov	r0, r9
 80119fe:	4651      	mov	r1, sl
 8011a00:	f001 f844 	bl	8012a8c <_Bfree>
 8011a04:	4648      	mov	r0, r9
 8011a06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011a08:	f001 f840 	bl	8012a8c <_Bfree>
 8011a0c:	9c06      	ldr	r4, [sp, #24]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	1c63      	adds	r3, r4, #1
 8011a12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011a14:	7022      	strb	r2, [r4, #0]
 8011a16:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8011a18:	6023      	str	r3, [r4, #0]
 8011a1a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8011a1c:	2c00      	cmp	r4, #0
 8011a1e:	f43f ad50 	beq.w	80114c2 <_dtoa_r+0x7e>
 8011a22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011a24:	6020      	str	r0, [r4, #0]
 8011a26:	e54c      	b.n	80114c2 <_dtoa_r+0x7e>
 8011a28:	9c06      	ldr	r4, [sp, #24]
 8011a2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011a2c:	1b2d      	subs	r5, r5, r4
 8011a2e:	9510      	str	r5, [sp, #64]	; 0x40
 8011a30:	4265      	negs	r5, r4
 8011a32:	2400      	movs	r4, #0
 8011a34:	9511      	str	r5, [sp, #68]	; 0x44
 8011a36:	9414      	str	r4, [sp, #80]	; 0x50
 8011a38:	e5dd      	b.n	80115f6 <_dtoa_r+0x1b2>
 8011a3a:	4276      	negs	r6, r6
 8011a3c:	2400      	movs	r4, #0
 8011a3e:	9610      	str	r6, [sp, #64]	; 0x40
 8011a40:	940b      	str	r4, [sp, #44]	; 0x2c
 8011a42:	e5ce      	b.n	80115e2 <_dtoa_r+0x19e>
 8011a44:	f64f 32ee 	movw	r2, #64494	; 0xfbee
 8011a48:	9902      	ldr	r1, [sp, #8]
 8011a4a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 8011a4e:	1b92      	subs	r2, r2, r6
 8011a50:	fa11 f002 	lsls.w	r0, r1, r2
 8011a54:	e563      	b.n	801151e <_dtoa_r+0xda>
 8011a56:	2500      	movs	r5, #0
 8011a58:	9515      	str	r5, [sp, #84]	; 0x54
 8011a5a:	e5bb      	b.n	80115d4 <_dtoa_r+0x190>
 8011a5c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8011a5e:	2d01      	cmp	r5, #1
 8011a60:	f340 83bf 	ble.w	80121e2 <_dtoa_r+0xd9e>
 8011a64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011a66:	1e6b      	subs	r3, r5, #1
 8011a68:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011a6a:	429d      	cmp	r5, r3
 8011a6c:	bfaf      	iteee	ge
 8011a6e:	ebc3 0405 	rsbge	r4, r3, r5
 8011a72:	9d11      	ldrlt	r5, [sp, #68]	; 0x44
 8011a74:	9311      	strlt	r3, [sp, #68]	; 0x44
 8011a76:	ebc5 0203 	rsblt	r2, r5, r3
 8011a7a:	bfbe      	ittt	lt
 8011a7c:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
 8011a7e:	18ad      	addlt	r5, r5, r2
 8011a80:	9514      	strlt	r5, [sp, #80]	; 0x50
 8011a82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011a84:	2d00      	cmp	r5, #0
 8011a86:	f2c0 83c8 	blt.w	801221a <_dtoa_r+0xdd6>
 8011a8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011a90:	4648      	mov	r0, r9
 8011a92:	2101      	movs	r1, #1
 8011a94:	18d2      	adds	r2, r2, r3
 8011a96:	9210      	str	r2, [sp, #64]	; 0x40
 8011a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a9a:	18d2      	adds	r2, r2, r3
 8011a9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8011a9e:	f001 f8d7 	bl	8012c50 <__i2b>
 8011aa2:	4682      	mov	sl, r0
 8011aa4:	e6fc      	b.n	80118a0 <_dtoa_r+0x45c>
 8011aa6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011aa8:	2c00      	cmp	r4, #0
 8011aaa:	f040 8397 	bne.w	80121dc <_dtoa_r+0xd98>
 8011aae:	2300      	movs	r3, #0
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8011ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011aba:	f7fd ff97 	bl	800f9ec <__aeabi_dmul>
 8011abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ac2:	f002 ffe7 	bl	8014a94 <__aeabi_dcmpge>
 8011ac6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011ac8:	46a2      	mov	sl, r4
 8011aca:	2800      	cmp	r0, #0
 8011acc:	f43f af7a 	beq.w	80119c4 <_dtoa_r+0x580>
 8011ad0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8011ad2:	2700      	movs	r7, #0
 8011ad4:	43ed      	mvns	r5, r5
 8011ad6:	9506      	str	r5, [sp, #24]
 8011ad8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011ada:	e77d      	b.n	80119d8 <_dtoa_r+0x594>
 8011adc:	2501      	movs	r5, #1
 8011ade:	9513      	str	r5, [sp, #76]	; 0x4c
 8011ae0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8011ae2:	2d00      	cmp	r5, #0
 8011ae4:	f340 82ec 	ble.w	80120c0 <_dtoa_r+0xc7c>
 8011ae8:	46ab      	mov	fp, r5
 8011aea:	2d0e      	cmp	r5, #14
 8011aec:	bf8c      	ite	hi
 8011aee:	2400      	movhi	r4, #0
 8011af0:	f004 0401 	andls.w	r4, r4, #1
 8011af4:	9516      	str	r5, [sp, #88]	; 0x58
 8011af6:	950e      	str	r5, [sp, #56]	; 0x38
 8011af8:	2100      	movs	r1, #0
 8011afa:	f1bb 0f17 	cmp.w	fp, #23
 8011afe:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8011b02:	d90a      	bls.n	8011b1a <_dtoa_r+0x6d6>
 8011b04:	2201      	movs	r2, #1
 8011b06:	2304      	movs	r3, #4
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	f103 0014 	add.w	r0, r3, #20
 8011b10:	3201      	adds	r2, #1
 8011b12:	4558      	cmp	r0, fp
 8011b14:	d9f8      	bls.n	8011b08 <_dtoa_r+0x6c4>
 8011b16:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8011b1a:	4648      	mov	r0, r9
 8011b1c:	f000 ff90 	bl	8012a40 <_Balloc>
 8011b20:	900a      	str	r0, [sp, #40]	; 0x28
 8011b22:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8011b26:	2c00      	cmp	r4, #0
 8011b28:	f43f addc 	beq.w	80116e4 <_dtoa_r+0x2a0>
 8011b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011b30:	461d      	mov	r5, r3
 8011b32:	4614      	mov	r4, r2
 8011b34:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8011b38:	9d06      	ldr	r5, [sp, #24]
 8011b3a:	2d00      	cmp	r5, #0
 8011b3c:	f340 820d 	ble.w	8011f5a <_dtoa_r+0xb16>
 8011b40:	f005 020f 	and.w	r2, r5, #15
 8011b44:	4b9b      	ldr	r3, [pc, #620]	; (8011db4 <_dtoa_r+0x970>)
 8011b46:	112c      	asrs	r4, r5, #4
 8011b48:	2602      	movs	r6, #2
 8011b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b4e:	06e2      	lsls	r2, r4, #27
 8011b50:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8011b54:	d50b      	bpl.n	8011b6e <_dtoa_r+0x72a>
 8011b56:	4b98      	ldr	r3, [pc, #608]	; (8011db8 <_dtoa_r+0x974>)
 8011b58:	f004 040f 	and.w	r4, r4, #15
 8011b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b60:	2603      	movs	r6, #3
 8011b62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011b66:	f7fe f86b 	bl	800fc40 <__aeabi_ddiv>
 8011b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b6e:	b174      	cbz	r4, 8011b8e <_dtoa_r+0x74a>
 8011b70:	4d91      	ldr	r5, [pc, #580]	; (8011db8 <_dtoa_r+0x974>)
 8011b72:	07e3      	lsls	r3, r4, #31
 8011b74:	4650      	mov	r0, sl
 8011b76:	4659      	mov	r1, fp
 8011b78:	d506      	bpl.n	8011b88 <_dtoa_r+0x744>
 8011b7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b7e:	3601      	adds	r6, #1
 8011b80:	f7fd ff34 	bl	800f9ec <__aeabi_dmul>
 8011b84:	4682      	mov	sl, r0
 8011b86:	468b      	mov	fp, r1
 8011b88:	3508      	adds	r5, #8
 8011b8a:	1064      	asrs	r4, r4, #1
 8011b8c:	d1f1      	bne.n	8011b72 <_dtoa_r+0x72e>
 8011b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b92:	4652      	mov	r2, sl
 8011b94:	465b      	mov	r3, fp
 8011b96:	f7fe f853 	bl	800fc40 <__aeabi_ddiv>
 8011b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011ba0:	2c00      	cmp	r4, #0
 8011ba2:	f000 810b 	beq.w	8011dbc <_dtoa_r+0x978>
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bac:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f002 ff5b 	bl	8014a6c <__aeabi_dcmplt>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	b900      	cbnz	r0, 8011bbc <_dtoa_r+0x778>
 8011bba:	2300      	movs	r3, #0
 8011bbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011bbe:	2d00      	cmp	r5, #0
 8011bc0:	bfd4      	ite	le
 8011bc2:	2300      	movle	r3, #0
 8011bc4:	f003 0301 	andgt.w	r3, r3, #1
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	f000 80f7 	beq.w	8011dbc <_dtoa_r+0x978>
 8011bce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8011bd0:	2c00      	cmp	r4, #0
 8011bd2:	f340 81ad 	ble.w	8011f30 <_dtoa_r+0xaec>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011be2:	f7fd ff03 	bl	800f9ec <__aeabi_dmul>
 8011be6:	9d06      	ldr	r5, [sp, #24]
 8011be8:	3d01      	subs	r5, #1
 8011bea:	9518      	str	r5, [sp, #96]	; 0x60
 8011bec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8011bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bf2:	1c70      	adds	r0, r6, #1
 8011bf4:	f7fd fe94 	bl	800f920 <__aeabi_i2d>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c00:	f7fd fef4 	bl	800f9ec <__aeabi_dmul>
 8011c04:	2300      	movs	r3, #0
 8011c06:	2200      	movs	r2, #0
 8011c08:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8011c0c:	f7fd fd3c 	bl	800f688 <__adddf3>
 8011c10:	4606      	mov	r6, r0
 8011c12:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8011c16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011c18:	2c00      	cmp	r4, #0
 8011c1a:	f000 81cb 	beq.w	8011fb4 <_dtoa_r+0xb70>
 8011c1e:	4b65      	ldr	r3, [pc, #404]	; (8011db4 <_dtoa_r+0x970>)
 8011c20:	2100      	movs	r1, #0
 8011c22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011c24:	2000      	movs	r0, #0
 8011c26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011c2a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8011c2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011c32:	9412      	str	r4, [sp, #72]	; 0x48
 8011c34:	f7fe f804 	bl	800fc40 <__aeabi_ddiv>
 8011c38:	4632      	mov	r2, r6
 8011c3a:	463b      	mov	r3, r7
 8011c3c:	f7fd fd22 	bl	800f684 <__aeabi_dsub>
 8011c40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c48:	f002 ff38 	bl	8014abc <__aeabi_d2iz>
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	f7fd fe67 	bl	800f920 <__aeabi_i2d>
 8011c52:	3430      	adds	r4, #48	; 0x30
 8011c54:	b2e6      	uxtb	r6, r4
 8011c56:	4602      	mov	r2, r0
 8011c58:	460b      	mov	r3, r1
 8011c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c5e:	f7fd fd11 	bl	800f684 <__aeabi_dsub>
 8011c62:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011c64:	f804 6b01 	strb.w	r6, [r4], #1
 8011c68:	9412      	str	r4, [sp, #72]	; 0x48
 8011c6a:	4682      	mov	sl, r0
 8011c6c:	468b      	mov	fp, r1
 8011c6e:	4652      	mov	r2, sl
 8011c70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011c74:	465b      	mov	r3, fp
 8011c76:	f002 ff17 	bl	8014aa8 <__aeabi_dcmpgt>
 8011c7a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	f040 8345 	bne.w	801230e <_dtoa_r+0xeca>
 8011c84:	2100      	movs	r1, #0
 8011c86:	4652      	mov	r2, sl
 8011c88:	465b      	mov	r3, fp
 8011c8a:	2000      	movs	r0, #0
 8011c8c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8011c90:	f7fd fcf8 	bl	800f684 <__aeabi_dsub>
 8011c94:	4602      	mov	r2, r0
 8011c96:	460b      	mov	r3, r1
 8011c98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011c9c:	f002 ff04 	bl	8014aa8 <__aeabi_dcmpgt>
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	f040 82ae 	bne.w	8012202 <_dtoa_r+0xdbe>
 8011ca6:	2d01      	cmp	r5, #1
 8011ca8:	f340 8142 	ble.w	8011f30 <_dtoa_r+0xaec>
 8011cac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011cae:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8011cb0:	1965      	adds	r5, r4, r5
 8011cb2:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 8011cb6:	9502      	str	r5, [sp, #8]
 8011cb8:	e00c      	b.n	8011cd4 <_dtoa_r+0x890>
 8011cba:	f7fd fce3 	bl	800f684 <__aeabi_dsub>
 8011cbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011cc2:	f002 fed3 	bl	8014a6c <__aeabi_dcmplt>
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	f040 8298 	bne.w	80121fc <_dtoa_r+0xdb8>
 8011ccc:	9d02      	ldr	r5, [sp, #8]
 8011cce:	42af      	cmp	r7, r5
 8011cd0:	f000 812c 	beq.w	8011f2c <_dtoa_r+0xae8>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011cdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011ce0:	f7fd fe84 	bl	800f9ec <__aeabi_dmul>
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011cec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011cf0:	4650      	mov	r0, sl
 8011cf2:	4659      	mov	r1, fp
 8011cf4:	f7fd fe7a 	bl	800f9ec <__aeabi_dmul>
 8011cf8:	4689      	mov	r9, r1
 8011cfa:	4680      	mov	r8, r0
 8011cfc:	f002 fede 	bl	8014abc <__aeabi_d2iz>
 8011d00:	4604      	mov	r4, r0
 8011d02:	f7fd fe0d 	bl	800f920 <__aeabi_i2d>
 8011d06:	3430      	adds	r4, #48	; 0x30
 8011d08:	b2e6      	uxtb	r6, r4
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	4640      	mov	r0, r8
 8011d10:	4649      	mov	r1, r9
 8011d12:	f7fd fcb7 	bl	800f684 <__aeabi_dsub>
 8011d16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011d1a:	f807 6b01 	strb.w	r6, [r7], #1
 8011d1e:	463d      	mov	r5, r7
 8011d20:	468b      	mov	fp, r1
 8011d22:	4682      	mov	sl, r0
 8011d24:	f002 fea2 	bl	8014a6c <__aeabi_dcmplt>
 8011d28:	2100      	movs	r1, #0
 8011d2a:	4652      	mov	r2, sl
 8011d2c:	465b      	mov	r3, fp
 8011d2e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8011d32:	4604      	mov	r4, r0
 8011d34:	2000      	movs	r0, #0
 8011d36:	2c00      	cmp	r4, #0
 8011d38:	d0bf      	beq.n	8011cba <_dtoa_r+0x876>
 8011d3a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8011d3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011d3e:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8011d42:	9406      	str	r4, [sp, #24]
 8011d44:	970a      	str	r7, [sp, #40]	; 0x28
 8011d46:	e65d      	b.n	8011a04 <_dtoa_r+0x5c0>
 8011d48:	2500      	movs	r5, #0
 8011d4a:	9513      	str	r5, [sp, #76]	; 0x4c
 8011d4c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011d4e:	9d06      	ldr	r5, [sp, #24]
 8011d50:	1945      	adds	r5, r0, r5
 8011d52:	9516      	str	r5, [sp, #88]	; 0x58
 8011d54:	f105 0b01 	add.w	fp, r5, #1
 8011d58:	f1bb 0f00 	cmp.w	fp, #0
 8011d5c:	f340 81b9 	ble.w	80120d2 <_dtoa_r+0xc8e>
 8011d60:	f1bb 0f0e 	cmp.w	fp, #14
 8011d64:	bf8c      	ite	hi
 8011d66:	2400      	movhi	r4, #0
 8011d68:	f004 0401 	andls.w	r4, r4, #1
 8011d6c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8011d70:	e6c2      	b.n	8011af8 <_dtoa_r+0x6b4>
 8011d72:	2500      	movs	r5, #0
 8011d74:	9513      	str	r5, [sp, #76]	; 0x4c
 8011d76:	e6b3      	b.n	8011ae0 <_dtoa_r+0x69c>
 8011d78:	2501      	movs	r5, #1
 8011d7a:	9513      	str	r5, [sp, #76]	; 0x4c
 8011d7c:	e7e6      	b.n	8011d4c <_dtoa_r+0x908>
 8011d7e:	9b02      	ldr	r3, [sp, #8]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f47f add2 	bne.w	801192a <_dtoa_r+0x4e6>
 8011d86:	9a03      	ldr	r2, [sp, #12]
 8011d88:	9e02      	ldr	r6, [sp, #8]
 8011d8a:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f47f adcc 	bne.w	801192c <_dtoa_r+0x4e8>
 8011d94:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8011d98:	4013      	ands	r3, r2
 8011d9a:	461e      	mov	r6, r3
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f43f adc5 	beq.w	801192c <_dtoa_r+0x4e8>
 8011da2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011da4:	2601      	movs	r6, #1
 8011da6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011da8:	3001      	adds	r0, #1
 8011daa:	9010      	str	r0, [sp, #64]	; 0x40
 8011dac:	3101      	adds	r1, #1
 8011dae:	910b      	str	r1, [sp, #44]	; 0x2c
 8011db0:	e5bc      	b.n	801192c <_dtoa_r+0x4e8>
 8011db2:	bf00      	nop
 8011db4:	08014be8 	.word	0x08014be8
 8011db8:	08014cd8 	.word	0x08014cd8
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f7fd fdaf 	bl	800f920 <__aeabi_i2d>
 8011dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011dc6:	f7fd fe11 	bl	800f9ec <__aeabi_dmul>
 8011dca:	2300      	movs	r3, #0
 8011dcc:	2200      	movs	r2, #0
 8011dce:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8011dd2:	f7fd fc59 	bl	800f688 <__adddf3>
 8011dd6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011dd8:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8011ddc:	4606      	mov	r6, r0
 8011dde:	4627      	mov	r7, r4
 8011de0:	2d00      	cmp	r5, #0
 8011de2:	f040 80b6 	bne.w	8011f52 <_dtoa_r+0xb0e>
 8011de6:	2300      	movs	r3, #0
 8011de8:	2200      	movs	r2, #0
 8011dea:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8011dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011df2:	f7fd fc47 	bl	800f684 <__aeabi_dsub>
 8011df6:	4632      	mov	r2, r6
 8011df8:	4623      	mov	r3, r4
 8011dfa:	4682      	mov	sl, r0
 8011dfc:	468b      	mov	fp, r1
 8011dfe:	f002 fe53 	bl	8014aa8 <__aeabi_dcmpgt>
 8011e02:	2800      	cmp	r0, #0
 8011e04:	f040 80d3 	bne.w	8011fae <_dtoa_r+0xb6a>
 8011e08:	4632      	mov	r2, r6
 8011e0a:	4650      	mov	r0, sl
 8011e0c:	4659      	mov	r1, fp
 8011e0e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8011e12:	f002 fe2b 	bl	8014a6c <__aeabi_dcmplt>
 8011e16:	2800      	cmp	r0, #0
 8011e18:	f000 808a 	beq.w	8011f30 <_dtoa_r+0xaec>
 8011e1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011e1e:	46a2      	mov	sl, r4
 8011e20:	e656      	b.n	8011ad0 <_dtoa_r+0x68c>
 8011e22:	4648      	mov	r0, r9
 8011e24:	4639      	mov	r1, r7
 8011e26:	f000 fe31 	bl	8012a8c <_Bfree>
 8011e2a:	e5e7      	b.n	80119fc <_dtoa_r+0x5b8>
 8011e2c:	231c      	movs	r3, #28
 8011e2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e30:	18ed      	adds	r5, r5, r3
 8011e32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011e34:	18d2      	adds	r2, r2, r3
 8011e36:	9210      	str	r2, [sp, #64]	; 0x40
 8011e38:	18c0      	adds	r0, r0, r3
 8011e3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e3c:	e58e      	b.n	801195c <_dtoa_r+0x518>
 8011e3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011e40:	2900      	cmp	r1, #0
 8011e42:	f000 814e 	beq.w	80120e2 <_dtoa_r+0xc9e>
 8011e46:	2d00      	cmp	r5, #0
 8011e48:	dd05      	ble.n	8011e56 <_dtoa_r+0xa12>
 8011e4a:	4651      	mov	r1, sl
 8011e4c:	4648      	mov	r0, r9
 8011e4e:	462a      	mov	r2, r5
 8011e50:	f000 fff0 	bl	8012e34 <__lshift>
 8011e54:	4682      	mov	sl, r0
 8011e56:	2e00      	cmp	r6, #0
 8011e58:	f040 820a 	bne.w	8012270 <_dtoa_r+0xe2c>
 8011e5c:	4656      	mov	r6, sl
 8011e5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011e60:	4657      	mov	r7, sl
 8011e62:	f04f 0801 	mov.w	r8, #1
 8011e66:	9507      	str	r5, [sp, #28]
 8011e68:	9d02      	ldr	r5, [sp, #8]
 8011e6a:	9402      	str	r4, [sp, #8]
 8011e6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8011e6e:	ea05 0508 	and.w	r5, r5, r8
 8011e72:	950c      	str	r5, [sp, #48]	; 0x30
 8011e74:	9902      	ldr	r1, [sp, #8]
 8011e76:	4620      	mov	r0, r4
 8011e78:	f7ff fa42 	bl	8011300 <quorem>
 8011e7c:	4639      	mov	r1, r7
 8011e7e:	f04f 0b01 	mov.w	fp, #1
 8011e82:	9008      	str	r0, [sp, #32]
 8011e84:	4620      	mov	r0, r4
 8011e86:	f001 f835 	bl	8012ef4 <__mcmp>
 8011e8a:	9b08      	ldr	r3, [sp, #32]
 8011e8c:	9902      	ldr	r1, [sp, #8]
 8011e8e:	4632      	mov	r2, r6
 8011e90:	3330      	adds	r3, #48	; 0x30
 8011e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e94:	4605      	mov	r5, r0
 8011e96:	4648      	mov	r0, r9
 8011e98:	f001 f84c 	bl	8012f34 <__mdiff>
 8011e9c:	68c3      	ldr	r3, [r0, #12]
 8011e9e:	4682      	mov	sl, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d03d      	beq.n	8011f20 <_dtoa_r+0xadc>
 8011ea4:	4648      	mov	r0, r9
 8011ea6:	4651      	mov	r1, sl
 8011ea8:	f000 fdf0 	bl	8012a8c <_Bfree>
 8011eac:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011eae:	ea5b 0000 	orrs.w	r0, fp, r0
 8011eb2:	d103      	bne.n	8011ebc <_dtoa_r+0xa78>
 8011eb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011eb6:	2900      	cmp	r1, #0
 8011eb8:	f000 8216 	beq.w	80122e8 <_dtoa_r+0xea4>
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	f2c0 81b0 	blt.w	8012222 <_dtoa_r+0xdde>
 8011ec2:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011ec4:	4328      	orrs	r0, r5
 8011ec6:	d103      	bne.n	8011ed0 <_dtoa_r+0xa8c>
 8011ec8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011eca:	2d00      	cmp	r5, #0
 8011ecc:	f000 81a9 	beq.w	8012222 <_dtoa_r+0xdde>
 8011ed0:	f1bb 0f00 	cmp.w	fp, #0
 8011ed4:	f300 81f0 	bgt.w	80122b8 <_dtoa_r+0xe74>
 8011ed8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011eda:	9807      	ldr	r0, [sp, #28]
 8011edc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011ede:	4588      	cmp	r8, r1
 8011ee0:	f800 5b01 	strb.w	r5, [r0], #1
 8011ee4:	4605      	mov	r5, r0
 8011ee6:	9007      	str	r0, [sp, #28]
 8011ee8:	f000 81e0 	beq.w	80122ac <_dtoa_r+0xe68>
 8011eec:	4621      	mov	r1, r4
 8011eee:	220a      	movs	r2, #10
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	4648      	mov	r0, r9
 8011ef4:	f000 fdd4 	bl	8012aa0 <__multadd>
 8011ef8:	42b7      	cmp	r7, r6
 8011efa:	4604      	mov	r4, r0
 8011efc:	d01e      	beq.n	8011f3c <_dtoa_r+0xaf8>
 8011efe:	4639      	mov	r1, r7
 8011f00:	220a      	movs	r2, #10
 8011f02:	2300      	movs	r3, #0
 8011f04:	4648      	mov	r0, r9
 8011f06:	f000 fdcb 	bl	8012aa0 <__multadd>
 8011f0a:	4631      	mov	r1, r6
 8011f0c:	220a      	movs	r2, #10
 8011f0e:	2300      	movs	r3, #0
 8011f10:	f108 0801 	add.w	r8, r8, #1
 8011f14:	4607      	mov	r7, r0
 8011f16:	4648      	mov	r0, r9
 8011f18:	f000 fdc2 	bl	8012aa0 <__multadd>
 8011f1c:	4606      	mov	r6, r0
 8011f1e:	e7a9      	b.n	8011e74 <_dtoa_r+0xa30>
 8011f20:	4620      	mov	r0, r4
 8011f22:	4651      	mov	r1, sl
 8011f24:	f000 ffe6 	bl	8012ef4 <__mcmp>
 8011f28:	4683      	mov	fp, r0
 8011f2a:	e7bb      	b.n	8011ea4 <_dtoa_r+0xa60>
 8011f2c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8011f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f38:	f7ff bbd4 	b.w	80116e4 <_dtoa_r+0x2a0>
 8011f3c:	4639      	mov	r1, r7
 8011f3e:	4648      	mov	r0, r9
 8011f40:	220a      	movs	r2, #10
 8011f42:	2300      	movs	r3, #0
 8011f44:	f000 fdac 	bl	8012aa0 <__multadd>
 8011f48:	f108 0801 	add.w	r8, r8, #1
 8011f4c:	4607      	mov	r7, r0
 8011f4e:	4606      	mov	r6, r0
 8011f50:	e790      	b.n	8011e74 <_dtoa_r+0xa30>
 8011f52:	9c06      	ldr	r4, [sp, #24]
 8011f54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011f56:	9418      	str	r4, [sp, #96]	; 0x60
 8011f58:	e65d      	b.n	8011c16 <_dtoa_r+0x7d2>
 8011f5a:	9d06      	ldr	r5, [sp, #24]
 8011f5c:	426c      	negs	r4, r5
 8011f5e:	2c00      	cmp	r4, #0
 8011f60:	f000 810f 	beq.w	8012182 <_dtoa_r+0xd3e>
 8011f64:	f004 020f 	and.w	r2, r4, #15
 8011f68:	4ba2      	ldr	r3, [pc, #648]	; (80121f4 <_dtoa_r+0xdb0>)
 8011f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f76:	f7fd fd39 	bl	800f9ec <__aeabi_dmul>
 8011f7a:	1124      	asrs	r4, r4, #4
 8011f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f80:	f000 80ff 	beq.w	8012182 <_dtoa_r+0xd3e>
 8011f84:	4d9c      	ldr	r5, [pc, #624]	; (80121f8 <_dtoa_r+0xdb4>)
 8011f86:	2602      	movs	r6, #2
 8011f88:	4602      	mov	r2, r0
 8011f8a:	460b      	mov	r3, r1
 8011f8c:	07e7      	lsls	r7, r4, #31
 8011f8e:	4610      	mov	r0, r2
 8011f90:	4619      	mov	r1, r3
 8011f92:	d506      	bpl.n	8011fa2 <_dtoa_r+0xb5e>
 8011f94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f98:	3601      	adds	r6, #1
 8011f9a:	f7fd fd27 	bl	800f9ec <__aeabi_dmul>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	3508      	adds	r5, #8
 8011fa4:	1064      	asrs	r4, r4, #1
 8011fa6:	d1f1      	bne.n	8011f8c <_dtoa_r+0xb48>
 8011fa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011fac:	e5f7      	b.n	8011b9e <_dtoa_r+0x75a>
 8011fae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011fb0:	46a2      	mov	sl, r4
 8011fb2:	e507      	b.n	80119c4 <_dtoa_r+0x580>
 8011fb4:	f105 3aff 	add.w	sl, r5, #4294967295
 8011fb8:	498e      	ldr	r1, [pc, #568]	; (80121f4 <_dtoa_r+0xdb0>)
 8011fba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011fbc:	4632      	mov	r2, r6
 8011fbe:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011fc2:	463b      	mov	r3, r7
 8011fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fc8:	9412      	str	r4, [sp, #72]	; 0x48
 8011fca:	f7fd fd0f 	bl	800f9ec <__aeabi_dmul>
 8011fce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fd6:	f002 fd71 	bl	8014abc <__aeabi_d2iz>
 8011fda:	4604      	mov	r4, r0
 8011fdc:	f7fd fca0 	bl	800f920 <__aeabi_i2d>
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fe8:	f7fd fb4c 	bl	800f684 <__aeabi_dsub>
 8011fec:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8011ff0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011ff2:	2d01      	cmp	r5, #1
 8011ff4:	f804 3b01 	strb.w	r3, [r4], #1
 8011ff8:	46a0      	mov	r8, r4
 8011ffa:	9412      	str	r4, [sp, #72]	; 0x48
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	460f      	mov	r7, r1
 8012000:	d020      	beq.n	8012044 <_dtoa_r+0xc00>
 8012002:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012004:	f104 38ff 	add.w	r8, r4, #4294967295
 8012008:	44a8      	add	r8, r5
 801200a:	2300      	movs	r3, #0
 801200c:	2200      	movs	r2, #0
 801200e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8012012:	f7fd fceb 	bl	800f9ec <__aeabi_dmul>
 8012016:	460f      	mov	r7, r1
 8012018:	4606      	mov	r6, r0
 801201a:	f002 fd4f 	bl	8014abc <__aeabi_d2iz>
 801201e:	4605      	mov	r5, r0
 8012020:	f7fd fc7e 	bl	800f920 <__aeabi_i2d>
 8012024:	3530      	adds	r5, #48	; 0x30
 8012026:	4602      	mov	r2, r0
 8012028:	460b      	mov	r3, r1
 801202a:	4630      	mov	r0, r6
 801202c:	4639      	mov	r1, r7
 801202e:	f7fd fb29 	bl	800f684 <__aeabi_dsub>
 8012032:	f804 5f01 	strb.w	r5, [r4, #1]!
 8012036:	4544      	cmp	r4, r8
 8012038:	d1e7      	bne.n	801200a <_dtoa_r+0xbc6>
 801203a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801203c:	4606      	mov	r6, r0
 801203e:	460f      	mov	r7, r1
 8012040:	eb05 080a 	add.w	r8, r5, sl
 8012044:	2300      	movs	r3, #0
 8012046:	2200      	movs	r2, #0
 8012048:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 801204c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012050:	f7fd fb1a 	bl	800f688 <__adddf3>
 8012054:	4602      	mov	r2, r0
 8012056:	460b      	mov	r3, r1
 8012058:	4630      	mov	r0, r6
 801205a:	4639      	mov	r1, r7
 801205c:	f002 fd24 	bl	8014aa8 <__aeabi_dcmpgt>
 8012060:	2800      	cmp	r0, #0
 8012062:	f000 8098 	beq.w	8012196 <_dtoa_r+0xd52>
 8012066:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 801206a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801206c:	f7ff bbf0 	b.w	8011850 <_dtoa_r+0x40c>
 8012070:	46c8      	mov	r8, r9
 8012072:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8012076:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012078:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801207c:	e4c2      	b.n	8011a04 <_dtoa_r+0x5c0>
 801207e:	6923      	ldr	r3, [r4, #16]
 8012080:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012084:	6918      	ldr	r0, [r3, #16]
 8012086:	f000 fd97 	bl	8012bb8 <__hi0bits>
 801208a:	f1c0 0320 	rsb	r3, r0, #32
 801208e:	e452      	b.n	8011936 <_dtoa_r+0x4f2>
 8012090:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012092:	4621      	mov	r1, r4
 8012094:	f000 ff2e 	bl	8012ef4 <__mcmp>
 8012098:	2800      	cmp	r0, #0
 801209a:	f6bf ac74 	bge.w	8011986 <_dtoa_r+0x542>
 801209e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80120a0:	4648      	mov	r0, r9
 80120a2:	220a      	movs	r2, #10
 80120a4:	2300      	movs	r3, #0
 80120a6:	f000 fcfb 	bl	8012aa0 <__multadd>
 80120aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80120ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80120ae:	9806      	ldr	r0, [sp, #24]
 80120b0:	3801      	subs	r0, #1
 80120b2:	9006      	str	r0, [sp, #24]
 80120b4:	2900      	cmp	r1, #0
 80120b6:	f040 8131 	bne.w	801231c <_dtoa_r+0xed8>
 80120ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80120bc:	930e      	str	r3, [sp, #56]	; 0x38
 80120be:	e462      	b.n	8011986 <_dtoa_r+0x542>
 80120c0:	2301      	movs	r3, #1
 80120c2:	9316      	str	r3, [sp, #88]	; 0x58
 80120c4:	930e      	str	r3, [sp, #56]	; 0x38
 80120c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80120c8:	2100      	movs	r1, #0
 80120ca:	401c      	ands	r4, r3
 80120cc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80120d0:	e523      	b.n	8011b1a <_dtoa_r+0x6d6>
 80120d2:	f1bb 0f0e 	cmp.w	fp, #14
 80120d6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80120da:	bf8c      	ite	hi
 80120dc:	2300      	movhi	r3, #0
 80120de:	2301      	movls	r3, #1
 80120e0:	e7f2      	b.n	80120c8 <_dtoa_r+0xc84>
 80120e2:	46d3      	mov	fp, sl
 80120e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80120e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80120e8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80120ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80120ee:	e002      	b.n	80120f6 <_dtoa_r+0xcb2>
 80120f0:	f000 fcd6 	bl	8012aa0 <__multadd>
 80120f4:	4606      	mov	r6, r0
 80120f6:	4621      	mov	r1, r4
 80120f8:	4630      	mov	r0, r6
 80120fa:	f7ff f901 	bl	8011300 <quorem>
 80120fe:	220a      	movs	r2, #10
 8012100:	2300      	movs	r3, #0
 8012102:	4631      	mov	r1, r6
 8012104:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012108:	f807 8005 	strb.w	r8, [r7, r5]
 801210c:	3501      	adds	r5, #1
 801210e:	4648      	mov	r0, r9
 8012110:	45aa      	cmp	sl, r5
 8012112:	dced      	bgt.n	80120f0 <_dtoa_r+0xcac>
 8012114:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012116:	46da      	mov	sl, fp
 8012118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801211a:	461f      	mov	r7, r3
 801211c:	960f      	str	r6, [sp, #60]	; 0x3c
 801211e:	2a01      	cmp	r2, #1
 8012120:	bfac      	ite	ge
 8012122:	18ad      	addge	r5, r5, r2
 8012124:	3501      	addlt	r5, #1
 8012126:	2201      	movs	r2, #1
 8012128:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801212a:	4648      	mov	r0, r9
 801212c:	f000 fe82 	bl	8012e34 <__lshift>
 8012130:	4621      	mov	r1, r4
 8012132:	900f      	str	r0, [sp, #60]	; 0x3c
 8012134:	f000 fede 	bl	8012ef4 <__mcmp>
 8012138:	2800      	cmp	r0, #0
 801213a:	dd16      	ble.n	801216a <_dtoa_r+0xd26>
 801213c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012140:	462b      	mov	r3, r5
 8012142:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012144:	1c69      	adds	r1, r5, #1
 8012146:	e002      	b.n	801214e <_dtoa_r+0xd0a>
 8012148:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801214c:	3b01      	subs	r3, #1
 801214e:	2a39      	cmp	r2, #57	; 0x39
 8012150:	f040 8087 	bne.w	8012262 <_dtoa_r+0xe1e>
 8012154:	428b      	cmp	r3, r1
 8012156:	d1f7      	bne.n	8012148 <_dtoa_r+0xd04>
 8012158:	9806      	ldr	r0, [sp, #24]
 801215a:	2231      	movs	r2, #49	; 0x31
 801215c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801215e:	3001      	adds	r0, #1
 8012160:	9006      	str	r0, [sp, #24]
 8012162:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012166:	930a      	str	r3, [sp, #40]	; 0x28
 8012168:	e436      	b.n	80119d8 <_dtoa_r+0x594>
 801216a:	d102      	bne.n	8012172 <_dtoa_r+0xd2e>
 801216c:	f018 0f01 	tst.w	r8, #1
 8012170:	d1e4      	bne.n	801213c <_dtoa_r+0xcf8>
 8012172:	462a      	mov	r2, r5
 8012174:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 8012178:	2b30      	cmp	r3, #48	; 0x30
 801217a:	d0fa      	beq.n	8012172 <_dtoa_r+0xd2e>
 801217c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801217e:	920a      	str	r2, [sp, #40]	; 0x28
 8012180:	e42a      	b.n	80119d8 <_dtoa_r+0x594>
 8012182:	2602      	movs	r6, #2
 8012184:	e50b      	b.n	8011b9e <_dtoa_r+0x75a>
 8012186:	4648      	mov	r0, r9
 8012188:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801218a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801218c:	f000 fe06 	bl	8012d9c <__pow5mult>
 8012190:	900f      	str	r0, [sp, #60]	; 0x3c
 8012192:	f7ff bbb8 	b.w	8011906 <_dtoa_r+0x4c2>
 8012196:	2100      	movs	r1, #0
 8012198:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801219c:	2000      	movs	r0, #0
 801219e:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 80121a2:	f7fd fa6f 	bl	800f684 <__aeabi_dsub>
 80121a6:	4602      	mov	r2, r0
 80121a8:	460b      	mov	r3, r1
 80121aa:	4630      	mov	r0, r6
 80121ac:	4639      	mov	r1, r7
 80121ae:	f002 fc5d 	bl	8014a6c <__aeabi_dcmplt>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	f43f aebc 	beq.w	8011f30 <_dtoa_r+0xaec>
 80121b8:	4643      	mov	r3, r8
 80121ba:	4619      	mov	r1, r3
 80121bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121c0:	2a30      	cmp	r2, #48	; 0x30
 80121c2:	d0fa      	beq.n	80121ba <_dtoa_r+0xd76>
 80121c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80121c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80121c8:	910a      	str	r1, [sp, #40]	; 0x28
 80121ca:	9406      	str	r4, [sp, #24]
 80121cc:	e41a      	b.n	8011a04 <_dtoa_r+0x5c0>
 80121ce:	4648      	mov	r0, r9
 80121d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80121d2:	f000 fde3 	bl	8012d9c <__pow5mult>
 80121d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80121d8:	f7ff bb95 	b.w	8011906 <_dtoa_r+0x4c2>
 80121dc:	2400      	movs	r4, #0
 80121de:	46a2      	mov	sl, r4
 80121e0:	e476      	b.n	8011ad0 <_dtoa_r+0x68c>
 80121e2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80121e4:	2c00      	cmp	r4, #0
 80121e6:	d05a      	beq.n	801229e <_dtoa_r+0xe5a>
 80121e8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80121ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80121ee:	3303      	adds	r3, #3
 80121f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80121f2:	e44c      	b.n	8011a8e <_dtoa_r+0x64a>
 80121f4:	08014be8 	.word	0x08014be8
 80121f8:	08014cd8 	.word	0x08014cd8
 80121fc:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012200:	46a8      	mov	r8, r5
 8012202:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012204:	f7ff bb24 	b.w	8011850 <_dtoa_r+0x40c>
 8012208:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801220a:	1c72      	adds	r2, r6, #1
 801220c:	930a      	str	r3, [sp, #40]	; 0x28
 801220e:	b2d2      	uxtb	r2, r2
 8012210:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012214:	9406      	str	r4, [sp, #24]
 8012216:	f7ff bbf5 	b.w	8011a04 <_dtoa_r+0x5c0>
 801221a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801221c:	2300      	movs	r3, #0
 801221e:	1b45      	subs	r5, r0, r5
 8012220:	e435      	b.n	8011a8e <_dtoa_r+0x64a>
 8012222:	f1bb 0f00 	cmp.w	fp, #0
 8012226:	940f      	str	r4, [sp, #60]	; 0x3c
 8012228:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801222c:	9c02      	ldr	r4, [sp, #8]
 801222e:	dd10      	ble.n	8012252 <_dtoa_r+0xe0e>
 8012230:	2201      	movs	r2, #1
 8012232:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012234:	4648      	mov	r0, r9
 8012236:	f000 fdfd 	bl	8012e34 <__lshift>
 801223a:	4621      	mov	r1, r4
 801223c:	900f      	str	r0, [sp, #60]	; 0x3c
 801223e:	f000 fe59 	bl	8012ef4 <__mcmp>
 8012242:	2800      	cmp	r0, #0
 8012244:	dd5e      	ble.n	8012304 <_dtoa_r+0xec0>
 8012246:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801224a:	d046      	beq.n	80122da <_dtoa_r+0xe96>
 801224c:	9b08      	ldr	r3, [sp, #32]
 801224e:	f103 0831 	add.w	r8, r3, #49	; 0x31
 8012252:	9b07      	ldr	r3, [sp, #28]
 8012254:	46b2      	mov	sl, r6
 8012256:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012258:	f803 8b01 	strb.w	r8, [r3], #1
 801225c:	930a      	str	r3, [sp, #40]	; 0x28
 801225e:	f7ff bbbb 	b.w	80119d8 <_dtoa_r+0x594>
 8012262:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012264:	3201      	adds	r2, #1
 8012266:	f803 2c01 	strb.w	r2, [r3, #-1]
 801226a:	930a      	str	r3, [sp, #40]	; 0x28
 801226c:	f7ff bbb4 	b.w	80119d8 <_dtoa_r+0x594>
 8012270:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012274:	4648      	mov	r0, r9
 8012276:	f000 fbe3 	bl	8012a40 <_Balloc>
 801227a:	f8da 2010 	ldr.w	r2, [sl, #16]
 801227e:	f10a 010c 	add.w	r1, sl, #12
 8012282:	3202      	adds	r2, #2
 8012284:	0092      	lsls	r2, r2, #2
 8012286:	4605      	mov	r5, r0
 8012288:	f100 000c 	add.w	r0, r0, #12
 801228c:	f000 fb92 	bl	80129b4 <memcpy>
 8012290:	4648      	mov	r0, r9
 8012292:	4629      	mov	r1, r5
 8012294:	2201      	movs	r2, #1
 8012296:	f000 fdcd 	bl	8012e34 <__lshift>
 801229a:	4606      	mov	r6, r0
 801229c:	e5df      	b.n	8011e5e <_dtoa_r+0xa1a>
 801229e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80122a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80122a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80122a4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80122a8:	f7ff bbf1 	b.w	8011a8e <_dtoa_r+0x64a>
 80122ac:	940f      	str	r4, [sp, #60]	; 0x3c
 80122ae:	46b2      	mov	sl, r6
 80122b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80122b4:	9c02      	ldr	r4, [sp, #8]
 80122b6:	e736      	b.n	8012126 <_dtoa_r+0xce2>
 80122b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80122bc:	940f      	str	r4, [sp, #60]	; 0x3c
 80122be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80122c2:	9c02      	ldr	r4, [sp, #8]
 80122c4:	d009      	beq.n	80122da <_dtoa_r+0xe96>
 80122c6:	9b07      	ldr	r3, [sp, #28]
 80122c8:	f108 0801 	add.w	r8, r8, #1
 80122cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80122ce:	46b2      	mov	sl, r6
 80122d0:	f803 8b01 	strb.w	r8, [r3], #1
 80122d4:	930a      	str	r3, [sp, #40]	; 0x28
 80122d6:	f7ff bb7f 	b.w	80119d8 <_dtoa_r+0x594>
 80122da:	9d07      	ldr	r5, [sp, #28]
 80122dc:	2339      	movs	r3, #57	; 0x39
 80122de:	46b2      	mov	sl, r6
 80122e0:	461a      	mov	r2, r3
 80122e2:	f805 3b01 	strb.w	r3, [r5], #1
 80122e6:	e72b      	b.n	8012140 <_dtoa_r+0xcfc>
 80122e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80122ec:	940f      	str	r4, [sp, #60]	; 0x3c
 80122ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80122f2:	9c02      	ldr	r4, [sp, #8]
 80122f4:	d0f1      	beq.n	80122da <_dtoa_r+0xe96>
 80122f6:	2d00      	cmp	r5, #0
 80122f8:	dca8      	bgt.n	801224c <_dtoa_r+0xe08>
 80122fa:	e7aa      	b.n	8012252 <_dtoa_r+0xe0e>
 80122fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80122fe:	940a      	str	r4, [sp, #40]	; 0x28
 8012300:	f7ff bb80 	b.w	8011a04 <_dtoa_r+0x5c0>
 8012304:	d1a5      	bne.n	8012252 <_dtoa_r+0xe0e>
 8012306:	f018 0f01 	tst.w	r8, #1
 801230a:	d0a2      	beq.n	8012252 <_dtoa_r+0xe0e>
 801230c:	e79b      	b.n	8012246 <_dtoa_r+0xe02>
 801230e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8012310:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012312:	9406      	str	r4, [sp, #24]
 8012314:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8012316:	940a      	str	r4, [sp, #40]	; 0x28
 8012318:	f7ff bb74 	b.w	8011a04 <_dtoa_r+0x5c0>
 801231c:	4651      	mov	r1, sl
 801231e:	220a      	movs	r2, #10
 8012320:	4648      	mov	r0, r9
 8012322:	2300      	movs	r3, #0
 8012324:	f000 fbbc 	bl	8012aa0 <__multadd>
 8012328:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801232a:	920e      	str	r2, [sp, #56]	; 0x38
 801232c:	4682      	mov	sl, r0
 801232e:	f7ff bb2a 	b.w	8011986 <_dtoa_r+0x542>
 8012332:	bf18      	it	ne
 8012334:	f1c3 033c 	rsbne	r3, r3, #60	; 0x3c
 8012338:	f43f ab10 	beq.w	801195c <_dtoa_r+0x518>
 801233c:	e577      	b.n	8011e2e <_dtoa_r+0x9ea>
 801233e:	bf00      	nop

08012340 <_setlocale_r>:
 8012340:	b510      	push	{r4, lr}
 8012342:	4614      	mov	r4, r2
 8012344:	b122      	cbz	r2, 8012350 <_setlocale_r+0x10>
 8012346:	4610      	mov	r0, r2
 8012348:	490b      	ldr	r1, [pc, #44]	; (8012378 <_setlocale_r+0x38>)
 801234a:	f001 f825 	bl	8013398 <strcmp>
 801234e:	b908      	cbnz	r0, 8012354 <_setlocale_r+0x14>
 8012350:	480a      	ldr	r0, [pc, #40]	; (801237c <_setlocale_r+0x3c>)
 8012352:	bd10      	pop	{r4, pc}
 8012354:	4620      	mov	r0, r4
 8012356:	4909      	ldr	r1, [pc, #36]	; (801237c <_setlocale_r+0x3c>)
 8012358:	f001 f81e 	bl	8013398 <strcmp>
 801235c:	b908      	cbnz	r0, 8012362 <_setlocale_r+0x22>
 801235e:	4807      	ldr	r0, [pc, #28]	; (801237c <_setlocale_r+0x3c>)
 8012360:	bd10      	pop	{r4, pc}
 8012362:	4620      	mov	r0, r4
 8012364:	4906      	ldr	r1, [pc, #24]	; (8012380 <_setlocale_r+0x40>)
 8012366:	f001 f817 	bl	8013398 <strcmp>
 801236a:	4b04      	ldr	r3, [pc, #16]	; (801237c <_setlocale_r+0x3c>)
 801236c:	2800      	cmp	r0, #0
 801236e:	bf0c      	ite	eq
 8012370:	4618      	moveq	r0, r3
 8012372:	2000      	movne	r0, #0
 8012374:	bd10      	pop	{r4, pc}
 8012376:	bf00      	nop
 8012378:	08014d78 	.word	0x08014d78
 801237c:	08014d20 	.word	0x08014d20
 8012380:	08014d44 	.word	0x08014d44

08012384 <__locale_charset>:
 8012384:	f240 4068 	movw	r0, #1128	; 0x468
 8012388:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop

08012390 <__locale_mb_cur_max>:
 8012390:	f240 4368 	movw	r3, #1128	; 0x468
 8012394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012398:	6a18      	ldr	r0, [r3, #32]
 801239a:	4770      	bx	lr

0801239c <__locale_msgcharset>:
 801239c:	4800      	ldr	r0, [pc, #0]	; (80123a0 <__locale_msgcharset+0x4>)
 801239e:	4770      	bx	lr
 80123a0:	2000048c 	.word	0x2000048c

080123a4 <__locale_cjk_lang>:
 80123a4:	2000      	movs	r0, #0
 80123a6:	4770      	bx	lr

080123a8 <_localeconv_r>:
 80123a8:	4800      	ldr	r0, [pc, #0]	; (80123ac <_localeconv_r+0x4>)
 80123aa:	4770      	bx	lr
 80123ac:	200004ac 	.word	0x200004ac

080123b0 <setlocale>:
 80123b0:	f240 0338 	movw	r3, #56	; 0x38
 80123b4:	460a      	mov	r2, r1
 80123b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123ba:	4601      	mov	r1, r0
 80123bc:	6818      	ldr	r0, [r3, #0]
 80123be:	e7bf      	b.n	8012340 <_setlocale_r>

080123c0 <localeconv>:
 80123c0:	4800      	ldr	r0, [pc, #0]	; (80123c4 <localeconv+0x4>)
 80123c2:	4770      	bx	lr
 80123c4:	200004ac 	.word	0x200004ac

080123c8 <_malloc_r>:
 80123c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123cc:	f101 040b 	add.w	r4, r1, #11
 80123d0:	2c16      	cmp	r4, #22
 80123d2:	4605      	mov	r5, r0
 80123d4:	d92c      	bls.n	8012430 <_malloc_r+0x68>
 80123d6:	f024 0407 	bic.w	r4, r4, #7
 80123da:	0fe3      	lsrs	r3, r4, #31
 80123dc:	428c      	cmp	r4, r1
 80123de:	bf2c      	ite	cs
 80123e0:	4619      	movcs	r1, r3
 80123e2:	f043 0101 	orrcc.w	r1, r3, #1
 80123e6:	2900      	cmp	r1, #0
 80123e8:	d12b      	bne.n	8012442 <_malloc_r+0x7a>
 80123ea:	4628      	mov	r0, r5
 80123ec:	f000 fb24 	bl	8012a38 <__malloc_lock>
 80123f0:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80123f4:	d22b      	bcs.n	801244e <_malloc_r+0x86>
 80123f6:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 80123fa:	4e7e      	ldr	r6, [pc, #504]	; (80125f4 <_malloc_r+0x22c>)
 80123fc:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 8012400:	68d3      	ldr	r3, [r2, #12]
 8012402:	4293      	cmp	r3, r2
 8012404:	f000 822b 	beq.w	801285e <_malloc_r+0x496>
 8012408:	685c      	ldr	r4, [r3, #4]
 801240a:	f103 0708 	add.w	r7, r3, #8
 801240e:	68da      	ldr	r2, [r3, #12]
 8012410:	4628      	mov	r0, r5
 8012412:	f024 0403 	bic.w	r4, r4, #3
 8012416:	6899      	ldr	r1, [r3, #8]
 8012418:	191b      	adds	r3, r3, r4
 801241a:	685c      	ldr	r4, [r3, #4]
 801241c:	60ca      	str	r2, [r1, #12]
 801241e:	f044 0401 	orr.w	r4, r4, #1
 8012422:	6091      	str	r1, [r2, #8]
 8012424:	605c      	str	r4, [r3, #4]
 8012426:	f000 fb09 	bl	8012a3c <__malloc_unlock>
 801242a:	4638      	mov	r0, r7
 801242c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012430:	2300      	movs	r3, #0
 8012432:	2410      	movs	r4, #16
 8012434:	428c      	cmp	r4, r1
 8012436:	bf2c      	ite	cs
 8012438:	4619      	movcs	r1, r3
 801243a:	f043 0101 	orrcc.w	r1, r3, #1
 801243e:	2900      	cmp	r1, #0
 8012440:	d0d3      	beq.n	80123ea <_malloc_r+0x22>
 8012442:	2700      	movs	r7, #0
 8012444:	230c      	movs	r3, #12
 8012446:	4638      	mov	r0, r7
 8012448:	602b      	str	r3, [r5, #0]
 801244a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244e:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 8012452:	bf04      	itt	eq
 8012454:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 8012458:	ea4f 01cc 	moveq.w	r1, ip, lsl #3
 801245c:	f040 8083 	bne.w	8012566 <_malloc_r+0x19e>
 8012460:	4e64      	ldr	r6, [pc, #400]	; (80125f4 <_malloc_r+0x22c>)
 8012462:	1871      	adds	r1, r6, r1
 8012464:	68cf      	ldr	r7, [r1, #12]
 8012466:	42b9      	cmp	r1, r7
 8012468:	d106      	bne.n	8012478 <_malloc_r+0xb0>
 801246a:	e00d      	b.n	8012488 <_malloc_r+0xc0>
 801246c:	2a00      	cmp	r2, #0
 801246e:	f280 816c 	bge.w	801274a <_malloc_r+0x382>
 8012472:	68ff      	ldr	r7, [r7, #12]
 8012474:	42b9      	cmp	r1, r7
 8012476:	d007      	beq.n	8012488 <_malloc_r+0xc0>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f023 0303 	bic.w	r3, r3, #3
 801247e:	1b1a      	subs	r2, r3, r4
 8012480:	2a0f      	cmp	r2, #15
 8012482:	ddf3      	ble.n	801246c <_malloc_r+0xa4>
 8012484:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012488:	f10c 0c01 	add.w	ip, ip, #1
 801248c:	4859      	ldr	r0, [pc, #356]	; (80125f4 <_malloc_r+0x22c>)
 801248e:	6937      	ldr	r7, [r6, #16]
 8012490:	f100 0308 	add.w	r3, r0, #8
 8012494:	429f      	cmp	r7, r3
 8012496:	bf08      	it	eq
 8012498:	6841      	ldreq	r1, [r0, #4]
 801249a:	d024      	beq.n	80124e6 <_malloc_r+0x11e>
 801249c:	6879      	ldr	r1, [r7, #4]
 801249e:	f021 0103 	bic.w	r1, r1, #3
 80124a2:	1b0a      	subs	r2, r1, r4
 80124a4:	2a0f      	cmp	r2, #15
 80124a6:	f300 81aa 	bgt.w	80127fe <_malloc_r+0x436>
 80124aa:	2a00      	cmp	r2, #0
 80124ac:	6143      	str	r3, [r0, #20]
 80124ae:	6103      	str	r3, [r0, #16]
 80124b0:	f280 8093 	bge.w	80125da <_malloc_r+0x212>
 80124b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80124b8:	f080 8166 	bcs.w	8012788 <_malloc_r+0x3c0>
 80124bc:	08c9      	lsrs	r1, r1, #3
 80124be:	f04f 0e01 	mov.w	lr, #1
 80124c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80124c6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80124ca:	1089      	asrs	r1, r1, #2
 80124cc:	fa0e f101 	lsl.w	r1, lr, r1
 80124d0:	60fa      	str	r2, [r7, #12]
 80124d2:	f8d2 e008 	ldr.w	lr, [r2, #8]
 80124d6:	ea41 0108 	orr.w	r1, r1, r8
 80124da:	6041      	str	r1, [r0, #4]
 80124dc:	f8c7 e008 	str.w	lr, [r7, #8]
 80124e0:	f8ce 700c 	str.w	r7, [lr, #12]
 80124e4:	6097      	str	r7, [r2, #8]
 80124e6:	2701      	movs	r7, #1
 80124e8:	ea4f 02ac 	mov.w	r2, ip, asr #2
 80124ec:	4097      	lsls	r7, r2
 80124ee:	428f      	cmp	r7, r1
 80124f0:	f200 8082 	bhi.w	80125f8 <_malloc_r+0x230>
 80124f4:	4239      	tst	r1, r7
 80124f6:	d106      	bne.n	8012506 <_malloc_r+0x13e>
 80124f8:	f02c 0c03 	bic.w	ip, ip, #3
 80124fc:	007f      	lsls	r7, r7, #1
 80124fe:	f10c 0c04 	add.w	ip, ip, #4
 8012502:	4239      	tst	r1, r7
 8012504:	d0fa      	beq.n	80124fc <_malloc_r+0x134>
 8012506:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 801250a:	46e0      	mov	r8, ip
 801250c:	46ce      	mov	lr, r9
 801250e:	f8de 200c 	ldr.w	r2, [lr, #12]
 8012512:	4596      	cmp	lr, r2
 8012514:	d107      	bne.n	8012526 <_malloc_r+0x15e>
 8012516:	e183      	b.n	8012820 <_malloc_r+0x458>
 8012518:	2900      	cmp	r1, #0
 801251a:	f280 81aa 	bge.w	8012872 <_malloc_r+0x4aa>
 801251e:	68d2      	ldr	r2, [r2, #12]
 8012520:	4596      	cmp	lr, r2
 8012522:	f000 817d 	beq.w	8012820 <_malloc_r+0x458>
 8012526:	6850      	ldr	r0, [r2, #4]
 8012528:	f020 0003 	bic.w	r0, r0, #3
 801252c:	1b01      	subs	r1, r0, r4
 801252e:	290f      	cmp	r1, #15
 8012530:	ddf2      	ble.n	8012518 <_malloc_r+0x150>
 8012532:	4617      	mov	r7, r2
 8012534:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8012538:	1910      	adds	r0, r2, r4
 801253a:	f041 0801 	orr.w	r8, r1, #1
 801253e:	f857 cf08 	ldr.w	ip, [r7, #8]!
 8012542:	f044 0401 	orr.w	r4, r4, #1
 8012546:	5041      	str	r1, [r0, r1]
 8012548:	6054      	str	r4, [r2, #4]
 801254a:	f8cc e00c 	str.w	lr, [ip, #12]
 801254e:	f8ce c008 	str.w	ip, [lr, #8]
 8012552:	6170      	str	r0, [r6, #20]
 8012554:	6130      	str	r0, [r6, #16]
 8012556:	60c3      	str	r3, [r0, #12]
 8012558:	6083      	str	r3, [r0, #8]
 801255a:	f8c0 8004 	str.w	r8, [r0, #4]
 801255e:	4628      	mov	r0, r5
 8012560:	f000 fa6c 	bl	8012a3c <__malloc_unlock>
 8012564:	e761      	b.n	801242a <_malloc_r+0x62>
 8012566:	f1bc 0f04 	cmp.w	ip, #4
 801256a:	bf9e      	ittt	ls
 801256c:	ea4f 1c94 	movls.w	ip, r4, lsr #6
 8012570:	f10c 0c38 	addls.w	ip, ip, #56	; 0x38
 8012574:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 8012578:	f67f af72 	bls.w	8012460 <_malloc_r+0x98>
 801257c:	f1bc 0f14 	cmp.w	ip, #20
 8012580:	bf9c      	itt	ls
 8012582:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8012586:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 801258a:	f67f af69 	bls.w	8012460 <_malloc_r+0x98>
 801258e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8012592:	bf9e      	ittt	ls
 8012594:	ea4f 3c14 	movls.w	ip, r4, lsr #12
 8012598:	f10c 0c6e 	addls.w	ip, ip, #110	; 0x6e
 801259c:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80125a0:	f67f af5e 	bls.w	8012460 <_malloc_r+0x98>
 80125a4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80125a8:	bf9e      	ittt	ls
 80125aa:	ea4f 3cd4 	movls.w	ip, r4, lsr #15
 80125ae:	f10c 0c77 	addls.w	ip, ip, #119	; 0x77
 80125b2:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80125b6:	f67f af53 	bls.w	8012460 <_malloc_r+0x98>
 80125ba:	f240 5354 	movw	r3, #1364	; 0x554
 80125be:	459c      	cmp	ip, r3
 80125c0:	bf95      	itete	ls
 80125c2:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 80125c6:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 80125ca:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80125ce:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 80125d2:	bf98      	it	ls
 80125d4:	ea4f 01cc 	movls.w	r1, ip, lsl #3
 80125d8:	e742      	b.n	8012460 <_malloc_r+0x98>
 80125da:	187b      	adds	r3, r7, r1
 80125dc:	4628      	mov	r0, r5
 80125de:	3708      	adds	r7, #8
 80125e0:	685a      	ldr	r2, [r3, #4]
 80125e2:	f042 0201 	orr.w	r2, r2, #1
 80125e6:	605a      	str	r2, [r3, #4]
 80125e8:	f000 fa28 	bl	8012a3c <__malloc_unlock>
 80125ec:	4638      	mov	r0, r7
 80125ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f2:	bf00      	nop
 80125f4:	200004e4 	.word	0x200004e4
 80125f8:	68b7      	ldr	r7, [r6, #8]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f023 0803 	bic.w	r8, r3, #3
 8012600:	4544      	cmp	r4, r8
 8012602:	ebc4 0208 	rsb	r2, r4, r8
 8012606:	bf94      	ite	ls
 8012608:	2300      	movls	r3, #0
 801260a:	2301      	movhi	r3, #1
 801260c:	2a0f      	cmp	r2, #15
 801260e:	bfd8      	it	le
 8012610:	f043 0301 	orrle.w	r3, r3, #1
 8012614:	2b00      	cmp	r3, #0
 8012616:	f000 80a8 	beq.w	801276a <_malloc_r+0x3a2>
 801261a:	4bb4      	ldr	r3, [pc, #720]	; (80128ec <_malloc_r+0x524>)
 801261c:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80128f0 <_malloc_r+0x528>
 8012620:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8012624:	f8da 3000 	ldr.w	r3, [sl]
 8012628:	3201      	adds	r2, #1
 801262a:	4423      	add	r3, r4
 801262c:	bf08      	it	eq
 801262e:	f103 0b10 	addeq.w	fp, r3, #16
 8012632:	d006      	beq.n	8012642 <_malloc_r+0x27a>
 8012634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012638:	330f      	adds	r3, #15
 801263a:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 801263e:	f023 0b1f 	bic.w	fp, r3, #31
 8012642:	4628      	mov	r0, r5
 8012644:	4659      	mov	r1, fp
 8012646:	f7ee f8eb 	bl	8000820 <_sbrk_r>
 801264a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801264e:	4681      	mov	r9, r0
 8012650:	f000 813b 	beq.w	80128ca <_malloc_r+0x502>
 8012654:	eb07 0208 	add.w	r2, r7, r8
 8012658:	4282      	cmp	r2, r0
 801265a:	f200 8119 	bhi.w	8012890 <_malloc_r+0x4c8>
 801265e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012662:	454a      	cmp	r2, r9
 8012664:	445b      	add	r3, fp
 8012666:	f8ca 3004 	str.w	r3, [sl, #4]
 801266a:	f000 8133 	beq.w	80128d4 <_malloc_r+0x50c>
 801266e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8012672:	4628      	mov	r0, r5
 8012674:	3101      	adds	r1, #1
 8012676:	bf17      	itett	ne
 8012678:	ebc2 0209 	rsbne	r2, r2, r9
 801267c:	4b9b      	ldreq	r3, [pc, #620]	; (80128ec <_malloc_r+0x524>)
 801267e:	189b      	addne	r3, r3, r2
 8012680:	f8ca 3004 	strne.w	r3, [sl, #4]
 8012684:	bf08      	it	eq
 8012686:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 801268a:	f019 0307 	ands.w	r3, r9, #7
 801268e:	bf1f      	itttt	ne
 8012690:	f1c3 0208 	rsbne	r2, r3, #8
 8012694:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8012698:	4491      	addne	r9, r2
 801269a:	f103 0208 	addne.w	r2, r3, #8
 801269e:	eb09 030b 	add.w	r3, r9, fp
 80126a2:	bf08      	it	eq
 80126a4:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 80126a8:	051b      	lsls	r3, r3, #20
 80126aa:	0d1b      	lsrs	r3, r3, #20
 80126ac:	ebc3 0b02 	rsb	fp, r3, r2
 80126b0:	4659      	mov	r1, fp
 80126b2:	f7ee f8b5 	bl	8000820 <_sbrk_r>
 80126b6:	1c43      	adds	r3, r0, #1
 80126b8:	f000 8124 	beq.w	8012904 <_malloc_r+0x53c>
 80126bc:	ebc9 0200 	rsb	r2, r9, r0
 80126c0:	445a      	add	r2, fp
 80126c2:	f042 0201 	orr.w	r2, r2, #1
 80126c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80126ca:	42b7      	cmp	r7, r6
 80126cc:	f8c6 9008 	str.w	r9, [r6, #8]
 80126d0:	445b      	add	r3, fp
 80126d2:	f8c9 2004 	str.w	r2, [r9, #4]
 80126d6:	f8ca 3004 	str.w	r3, [sl, #4]
 80126da:	d016      	beq.n	801270a <_malloc_r+0x342>
 80126dc:	f1b8 0f0f 	cmp.w	r8, #15
 80126e0:	f240 80ed 	bls.w	80128be <_malloc_r+0x4f6>
 80126e4:	f1a8 020c 	sub.w	r2, r8, #12
 80126e8:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80126ec:	f022 0207 	bic.w	r2, r2, #7
 80126f0:	2005      	movs	r0, #5
 80126f2:	18b9      	adds	r1, r7, r2
 80126f4:	2a0f      	cmp	r2, #15
 80126f6:	f00e 0e01 	and.w	lr, lr, #1
 80126fa:	ea42 0e0e 	orr.w	lr, r2, lr
 80126fe:	f8c7 e004 	str.w	lr, [r7, #4]
 8012702:	6048      	str	r0, [r1, #4]
 8012704:	6088      	str	r0, [r1, #8]
 8012706:	f200 80f5 	bhi.w	80128f4 <_malloc_r+0x52c>
 801270a:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 801270e:	68b7      	ldr	r7, [r6, #8]
 8012710:	4293      	cmp	r3, r2
 8012712:	bf84      	itt	hi
 8012714:	4a76      	ldrhi	r2, [pc, #472]	; (80128f0 <_malloc_r+0x528>)
 8012716:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8012718:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 801271c:	4293      	cmp	r3, r2
 801271e:	bf84      	itt	hi
 8012720:	4a73      	ldrhi	r2, [pc, #460]	; (80128f0 <_malloc_r+0x528>)
 8012722:	6313      	strhi	r3, [r2, #48]	; 0x30
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f023 0303 	bic.w	r3, r3, #3
 801272a:	429c      	cmp	r4, r3
 801272c:	ebc4 0203 	rsb	r2, r4, r3
 8012730:	bf94      	ite	ls
 8012732:	2300      	movls	r3, #0
 8012734:	2301      	movhi	r3, #1
 8012736:	2a0f      	cmp	r2, #15
 8012738:	bfd8      	it	le
 801273a:	f043 0301 	orrle.w	r3, r3, #1
 801273e:	b1a3      	cbz	r3, 801276a <_malloc_r+0x3a2>
 8012740:	4628      	mov	r0, r5
 8012742:	2700      	movs	r7, #0
 8012744:	f000 f97a 	bl	8012a3c <__malloc_unlock>
 8012748:	e66f      	b.n	801242a <_malloc_r+0x62>
 801274a:	18fb      	adds	r3, r7, r3
 801274c:	68fa      	ldr	r2, [r7, #12]
 801274e:	68b9      	ldr	r1, [r7, #8]
 8012750:	4628      	mov	r0, r5
 8012752:	685c      	ldr	r4, [r3, #4]
 8012754:	3708      	adds	r7, #8
 8012756:	60ca      	str	r2, [r1, #12]
 8012758:	f044 0401 	orr.w	r4, r4, #1
 801275c:	6091      	str	r1, [r2, #8]
 801275e:	605c      	str	r4, [r3, #4]
 8012760:	f000 f96c 	bl	8012a3c <__malloc_unlock>
 8012764:	4638      	mov	r0, r7
 8012766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801276a:	193b      	adds	r3, r7, r4
 801276c:	f042 0201 	orr.w	r2, r2, #1
 8012770:	4628      	mov	r0, r5
 8012772:	f044 0401 	orr.w	r4, r4, #1
 8012776:	60b3      	str	r3, [r6, #8]
 8012778:	607c      	str	r4, [r7, #4]
 801277a:	3708      	adds	r7, #8
 801277c:	605a      	str	r2, [r3, #4]
 801277e:	f000 f95d 	bl	8012a3c <__malloc_unlock>
 8012782:	4638      	mov	r0, r7
 8012784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012788:	0988      	lsrs	r0, r1, #6
 801278a:	0a4a      	lsrs	r2, r1, #9
 801278c:	3038      	adds	r0, #56	; 0x38
 801278e:	2a04      	cmp	r2, #4
 8012790:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8012794:	d91c      	bls.n	80127d0 <_malloc_r+0x408>
 8012796:	2a14      	cmp	r2, #20
 8012798:	bf9c      	itt	ls
 801279a:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 801279e:	ea4f 0ec0 	movls.w	lr, r0, lsl #3
 80127a2:	d915      	bls.n	80127d0 <_malloc_r+0x408>
 80127a4:	0b08      	lsrs	r0, r1, #12
 80127a6:	306e      	adds	r0, #110	; 0x6e
 80127a8:	2a54      	cmp	r2, #84	; 0x54
 80127aa:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80127ae:	d90f      	bls.n	80127d0 <_malloc_r+0x408>
 80127b0:	0bc8      	lsrs	r0, r1, #15
 80127b2:	3077      	adds	r0, #119	; 0x77
 80127b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80127b8:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80127bc:	d908      	bls.n	80127d0 <_malloc_r+0x408>
 80127be:	f240 5054 	movw	r0, #1364	; 0x554
 80127c2:	4282      	cmp	r2, r0
 80127c4:	f200 80a7 	bhi.w	8012916 <_malloc_r+0x54e>
 80127c8:	0c88      	lsrs	r0, r1, #18
 80127ca:	307c      	adds	r0, #124	; 0x7c
 80127cc:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80127d0:	44b6      	add	lr, r6
 80127d2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80128ec <_malloc_r+0x524>
 80127d6:	f8de 2008 	ldr.w	r2, [lr, #8]
 80127da:	4572      	cmp	r2, lr
 80127dc:	d103      	bne.n	80127e6 <_malloc_r+0x41e>
 80127de:	e060      	b.n	80128a2 <_malloc_r+0x4da>
 80127e0:	6892      	ldr	r2, [r2, #8]
 80127e2:	4596      	cmp	lr, r2
 80127e4:	d004      	beq.n	80127f0 <_malloc_r+0x428>
 80127e6:	6850      	ldr	r0, [r2, #4]
 80127e8:	f020 0003 	bic.w	r0, r0, #3
 80127ec:	4281      	cmp	r1, r0
 80127ee:	d3f7      	bcc.n	80127e0 <_malloc_r+0x418>
 80127f0:	68d0      	ldr	r0, [r2, #12]
 80127f2:	6871      	ldr	r1, [r6, #4]
 80127f4:	60f8      	str	r0, [r7, #12]
 80127f6:	60ba      	str	r2, [r7, #8]
 80127f8:	60d7      	str	r7, [r2, #12]
 80127fa:	6087      	str	r7, [r0, #8]
 80127fc:	e673      	b.n	80124e6 <_malloc_r+0x11e>
 80127fe:	1939      	adds	r1, r7, r4
 8012800:	f042 0601 	orr.w	r6, r2, #1
 8012804:	6141      	str	r1, [r0, #20]
 8012806:	f044 0401 	orr.w	r4, r4, #1
 801280a:	6101      	str	r1, [r0, #16]
 801280c:	4628      	mov	r0, r5
 801280e:	607c      	str	r4, [r7, #4]
 8012810:	3708      	adds	r7, #8
 8012812:	60cb      	str	r3, [r1, #12]
 8012814:	608b      	str	r3, [r1, #8]
 8012816:	604e      	str	r6, [r1, #4]
 8012818:	508a      	str	r2, [r1, r2]
 801281a:	f000 f90f 	bl	8012a3c <__malloc_unlock>
 801281e:	e604      	b.n	801242a <_malloc_r+0x62>
 8012820:	f108 0801 	add.w	r8, r8, #1
 8012824:	f10e 0e08 	add.w	lr, lr, #8
 8012828:	f018 0f03 	tst.w	r8, #3
 801282c:	f47f ae6f 	bne.w	801250e <_malloc_r+0x146>
 8012830:	464a      	mov	r2, r9
 8012832:	f01c 0f03 	tst.w	ip, #3
 8012836:	f1a2 0108 	sub.w	r1, r2, #8
 801283a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801283e:	d065      	beq.n	801290c <_malloc_r+0x544>
 8012840:	6812      	ldr	r2, [r2, #0]
 8012842:	428a      	cmp	r2, r1
 8012844:	d0f5      	beq.n	8012832 <_malloc_r+0x46a>
 8012846:	6872      	ldr	r2, [r6, #4]
 8012848:	007f      	lsls	r7, r7, #1
 801284a:	4297      	cmp	r7, r2
 801284c:	f63f aed4 	bhi.w	80125f8 <_malloc_r+0x230>
 8012850:	2f00      	cmp	r7, #0
 8012852:	f43f aed1 	beq.w	80125f8 <_malloc_r+0x230>
 8012856:	4217      	tst	r7, r2
 8012858:	d061      	beq.n	801291e <_malloc_r+0x556>
 801285a:	46c4      	mov	ip, r8
 801285c:	e653      	b.n	8012506 <_malloc_r+0x13e>
 801285e:	f103 0208 	add.w	r2, r3, #8
 8012862:	695b      	ldr	r3, [r3, #20]
 8012864:	429a      	cmp	r2, r3
 8012866:	bf08      	it	eq
 8012868:	f10c 0c02 	addeq.w	ip, ip, #2
 801286c:	f43f ae0e 	beq.w	801248c <_malloc_r+0xc4>
 8012870:	e5ca      	b.n	8012408 <_malloc_r+0x40>
 8012872:	4617      	mov	r7, r2
 8012874:	1810      	adds	r0, r2, r0
 8012876:	68d3      	ldr	r3, [r2, #12]
 8012878:	f857 2f08 	ldr.w	r2, [r7, #8]!
 801287c:	6841      	ldr	r1, [r0, #4]
 801287e:	60d3      	str	r3, [r2, #12]
 8012880:	f041 0101 	orr.w	r1, r1, #1
 8012884:	609a      	str	r2, [r3, #8]
 8012886:	6041      	str	r1, [r0, #4]
 8012888:	4628      	mov	r0, r5
 801288a:	f000 f8d7 	bl	8012a3c <__malloc_unlock>
 801288e:	e5cc      	b.n	801242a <_malloc_r+0x62>
 8012890:	42b7      	cmp	r7, r6
 8012892:	f43f aee4 	beq.w	801265e <_malloc_r+0x296>
 8012896:	4b15      	ldr	r3, [pc, #84]	; (80128ec <_malloc_r+0x524>)
 8012898:	689f      	ldr	r7, [r3, #8]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f023 0303 	bic.w	r3, r3, #3
 80128a0:	e743      	b.n	801272a <_malloc_r+0x362>
 80128a2:	f04f 0901 	mov.w	r9, #1
 80128a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80128aa:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80128ae:	4610      	mov	r0, r2
 80128b0:	fa09 fe0e 	lsl.w	lr, r9, lr
 80128b4:	ea4e 0101 	orr.w	r1, lr, r1
 80128b8:	f8c8 1004 	str.w	r1, [r8, #4]
 80128bc:	e79a      	b.n	80127f4 <_malloc_r+0x42c>
 80128be:	2301      	movs	r3, #1
 80128c0:	464f      	mov	r7, r9
 80128c2:	f8c9 3004 	str.w	r3, [r9, #4]
 80128c6:	2300      	movs	r3, #0
 80128c8:	e72f      	b.n	801272a <_malloc_r+0x362>
 80128ca:	68b7      	ldr	r7, [r6, #8]
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f023 0303 	bic.w	r3, r3, #3
 80128d2:	e72a      	b.n	801272a <_malloc_r+0x362>
 80128d4:	0511      	lsls	r1, r2, #20
 80128d6:	0d09      	lsrs	r1, r1, #20
 80128d8:	2900      	cmp	r1, #0
 80128da:	f47f aec8 	bne.w	801266e <_malloc_r+0x2a6>
 80128de:	68b2      	ldr	r2, [r6, #8]
 80128e0:	eb0b 0108 	add.w	r1, fp, r8
 80128e4:	f041 0101 	orr.w	r1, r1, #1
 80128e8:	6051      	str	r1, [r2, #4]
 80128ea:	e70e      	b.n	801270a <_malloc_r+0x342>
 80128ec:	200004e4 	.word	0x200004e4
 80128f0:	20000b18 	.word	0x20000b18
 80128f4:	f107 0108 	add.w	r1, r7, #8
 80128f8:	4628      	mov	r0, r5
 80128fa:	f001 fbeb 	bl	80140d4 <_free_r>
 80128fe:	4b0a      	ldr	r3, [pc, #40]	; (8012928 <_malloc_r+0x560>)
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	e702      	b.n	801270a <_malloc_r+0x342>
 8012904:	2201      	movs	r2, #1
 8012906:	f04f 0b00 	mov.w	fp, #0
 801290a:	e6dc      	b.n	80126c6 <_malloc_r+0x2fe>
 801290c:	6872      	ldr	r2, [r6, #4]
 801290e:	ea22 0207 	bic.w	r2, r2, r7
 8012912:	6072      	str	r2, [r6, #4]
 8012914:	e798      	b.n	8012848 <_malloc_r+0x480>
 8012916:	f44f 7e7c 	mov.w	lr, #1008	; 0x3f0
 801291a:	207e      	movs	r0, #126	; 0x7e
 801291c:	e758      	b.n	80127d0 <_malloc_r+0x408>
 801291e:	007f      	lsls	r7, r7, #1
 8012920:	f108 0804 	add.w	r8, r8, #4
 8012924:	e797      	b.n	8012856 <_malloc_r+0x48e>
 8012926:	bf00      	nop
 8012928:	20000b18 	.word	0x20000b18

0801292c <memchr>:
 801292c:	0783      	lsls	r3, r0, #30
 801292e:	b2c9      	uxtb	r1, r1
 8012930:	b470      	push	{r4, r5, r6}
 8012932:	d012      	beq.n	801295a <memchr+0x2e>
 8012934:	2a00      	cmp	r2, #0
 8012936:	d039      	beq.n	80129ac <memchr+0x80>
 8012938:	7803      	ldrb	r3, [r0, #0]
 801293a:	428b      	cmp	r3, r1
 801293c:	d025      	beq.n	801298a <memchr+0x5e>
 801293e:	4603      	mov	r3, r0
 8012940:	3a01      	subs	r2, #1
 8012942:	e006      	b.n	8012952 <memchr+0x26>
 8012944:	2a00      	cmp	r2, #0
 8012946:	d031      	beq.n	80129ac <memchr+0x80>
 8012948:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 801294c:	3a01      	subs	r2, #1
 801294e:	428c      	cmp	r4, r1
 8012950:	d01b      	beq.n	801298a <memchr+0x5e>
 8012952:	3001      	adds	r0, #1
 8012954:	f010 0f03 	tst.w	r0, #3
 8012958:	d1f4      	bne.n	8012944 <memchr+0x18>
 801295a:	2a03      	cmp	r2, #3
 801295c:	bf84      	itt	hi
 801295e:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8012962:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8012966:	d812      	bhi.n	801298e <memchr+0x62>
 8012968:	2a00      	cmp	r2, #0
 801296a:	d01f      	beq.n	80129ac <memchr+0x80>
 801296c:	7803      	ldrb	r3, [r0, #0]
 801296e:	428b      	cmp	r3, r1
 8012970:	d00b      	beq.n	801298a <memchr+0x5e>
 8012972:	1c43      	adds	r3, r0, #1
 8012974:	1882      	adds	r2, r0, r2
 8012976:	e003      	b.n	8012980 <memchr+0x54>
 8012978:	f813 4b01 	ldrb.w	r4, [r3], #1
 801297c:	428c      	cmp	r4, r1
 801297e:	d004      	beq.n	801298a <memchr+0x5e>
 8012980:	4293      	cmp	r3, r2
 8012982:	f100 0001 	add.w	r0, r0, #1
 8012986:	d1f7      	bne.n	8012978 <memchr+0x4c>
 8012988:	2000      	movs	r0, #0
 801298a:	bc70      	pop	{r4, r5, r6}
 801298c:	4770      	bx	lr
 801298e:	4604      	mov	r4, r0
 8012990:	3004      	adds	r0, #4
 8012992:	6823      	ldr	r3, [r4, #0]
 8012994:	4073      	eors	r3, r6
 8012996:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 801299a:	ea25 0303 	bic.w	r3, r5, r3
 801299e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80129a2:	d105      	bne.n	80129b0 <memchr+0x84>
 80129a4:	3a04      	subs	r2, #4
 80129a6:	2a03      	cmp	r2, #3
 80129a8:	d8f1      	bhi.n	801298e <memchr+0x62>
 80129aa:	e7dd      	b.n	8012968 <memchr+0x3c>
 80129ac:	4610      	mov	r0, r2
 80129ae:	e7ec      	b.n	801298a <memchr+0x5e>
 80129b0:	4620      	mov	r0, r4
 80129b2:	e7d9      	b.n	8012968 <memchr+0x3c>

080129b4 <memcpy>:
 80129b4:	2a0f      	cmp	r2, #15
 80129b6:	b4f0      	push	{r4, r5, r6, r7}
 80129b8:	bf98      	it	ls
 80129ba:	4603      	movls	r3, r0
 80129bc:	d931      	bls.n	8012a22 <memcpy+0x6e>
 80129be:	ea41 0300 	orr.w	r3, r1, r0
 80129c2:	079b      	lsls	r3, r3, #30
 80129c4:	d136      	bne.n	8012a34 <memcpy+0x80>
 80129c6:	460c      	mov	r4, r1
 80129c8:	4603      	mov	r3, r0
 80129ca:	4615      	mov	r5, r2
 80129cc:	6826      	ldr	r6, [r4, #0]
 80129ce:	3d10      	subs	r5, #16
 80129d0:	601e      	str	r6, [r3, #0]
 80129d2:	6866      	ldr	r6, [r4, #4]
 80129d4:	605e      	str	r6, [r3, #4]
 80129d6:	68a6      	ldr	r6, [r4, #8]
 80129d8:	609e      	str	r6, [r3, #8]
 80129da:	68e6      	ldr	r6, [r4, #12]
 80129dc:	3410      	adds	r4, #16
 80129de:	60de      	str	r6, [r3, #12]
 80129e0:	3310      	adds	r3, #16
 80129e2:	2d0f      	cmp	r5, #15
 80129e4:	d8f2      	bhi.n	80129cc <memcpy+0x18>
 80129e6:	f1a2 0410 	sub.w	r4, r2, #16
 80129ea:	f002 020f 	and.w	r2, r2, #15
 80129ee:	f024 040f 	bic.w	r4, r4, #15
 80129f2:	3410      	adds	r4, #16
 80129f4:	2a03      	cmp	r2, #3
 80129f6:	eb00 0304 	add.w	r3, r0, r4
 80129fa:	4421      	add	r1, r4
 80129fc:	d911      	bls.n	8012a22 <memcpy+0x6e>
 80129fe:	460e      	mov	r6, r1
 8012a00:	461d      	mov	r5, r3
 8012a02:	4614      	mov	r4, r2
 8012a04:	f856 7b04 	ldr.w	r7, [r6], #4
 8012a08:	3c04      	subs	r4, #4
 8012a0a:	2c03      	cmp	r4, #3
 8012a0c:	f845 7b04 	str.w	r7, [r5], #4
 8012a10:	d8f8      	bhi.n	8012a04 <memcpy+0x50>
 8012a12:	1f14      	subs	r4, r2, #4
 8012a14:	f002 0203 	and.w	r2, r2, #3
 8012a18:	f024 0403 	bic.w	r4, r4, #3
 8012a1c:	3404      	adds	r4, #4
 8012a1e:	1909      	adds	r1, r1, r4
 8012a20:	191b      	adds	r3, r3, r4
 8012a22:	b12a      	cbz	r2, 8012a30 <memcpy+0x7c>
 8012a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a28:	3a01      	subs	r2, #1
 8012a2a:	f803 4b01 	strb.w	r4, [r3], #1
 8012a2e:	d1f9      	bne.n	8012a24 <memcpy+0x70>
 8012a30:	bcf0      	pop	{r4, r5, r6, r7}
 8012a32:	4770      	bx	lr
 8012a34:	4603      	mov	r3, r0
 8012a36:	e7f5      	b.n	8012a24 <memcpy+0x70>

08012a38 <__malloc_lock>:
 8012a38:	4770      	bx	lr
 8012a3a:	bf00      	nop

08012a3c <__malloc_unlock>:
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop

08012a40 <_Balloc>:
 8012a40:	b538      	push	{r3, r4, r5, lr}
 8012a42:	4605      	mov	r5, r0
 8012a44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012a46:	460c      	mov	r4, r1
 8012a48:	b14b      	cbz	r3, 8012a5e <_Balloc+0x1e>
 8012a4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012a4e:	b178      	cbz	r0, 8012a70 <_Balloc+0x30>
 8012a50:	6802      	ldr	r2, [r0, #0]
 8012a52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8012a56:	2300      	movs	r3, #0
 8012a58:	6103      	str	r3, [r0, #16]
 8012a5a:	60c3      	str	r3, [r0, #12]
 8012a5c:	bd38      	pop	{r3, r4, r5, pc}
 8012a5e:	2104      	movs	r1, #4
 8012a60:	2221      	movs	r2, #33	; 0x21
 8012a62:	f001 fab7 	bl	8013fd4 <_calloc_r>
 8012a66:	4603      	mov	r3, r0
 8012a68:	64e8      	str	r0, [r5, #76]	; 0x4c
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	d1ed      	bne.n	8012a4a <_Balloc+0xa>
 8012a6e:	bd38      	pop	{r3, r4, r5, pc}
 8012a70:	2301      	movs	r3, #1
 8012a72:	4628      	mov	r0, r5
 8012a74:	4619      	mov	r1, r3
 8012a76:	fa13 f504 	lsls.w	r5, r3, r4
 8012a7a:	1d6a      	adds	r2, r5, #5
 8012a7c:	0092      	lsls	r2, r2, #2
 8012a7e:	f001 faa9 	bl	8013fd4 <_calloc_r>
 8012a82:	2800      	cmp	r0, #0
 8012a84:	d0f3      	beq.n	8012a6e <_Balloc+0x2e>
 8012a86:	6044      	str	r4, [r0, #4]
 8012a88:	6085      	str	r5, [r0, #8]
 8012a8a:	e7e4      	b.n	8012a56 <_Balloc+0x16>

08012a8c <_Bfree>:
 8012a8c:	b131      	cbz	r1, 8012a9c <_Bfree+0x10>
 8012a8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012a90:	684a      	ldr	r2, [r1, #4]
 8012a92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012a96:	6008      	str	r0, [r1, #0]
 8012a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop

08012aa0 <__multadd>:
 8012aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aa2:	460c      	mov	r4, r1
 8012aa4:	4605      	mov	r5, r0
 8012aa6:	690e      	ldr	r6, [r1, #16]
 8012aa8:	f101 0014 	add.w	r0, r1, #20
 8012aac:	b083      	sub	sp, #12
 8012aae:	2100      	movs	r1, #0
 8012ab0:	6807      	ldr	r7, [r0, #0]
 8012ab2:	3101      	adds	r1, #1
 8012ab4:	fa1f fc87 	uxth.w	ip, r7
 8012ab8:	0c3f      	lsrs	r7, r7, #16
 8012aba:	fb02 330c 	mla	r3, r2, ip, r3
 8012abe:	fb02 f707 	mul.w	r7, r2, r7
 8012ac2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	eb03 4c07 	add.w	ip, r3, r7, lsl #16
 8012acc:	0c3b      	lsrs	r3, r7, #16
 8012ace:	428e      	cmp	r6, r1
 8012ad0:	f840 cb04 	str.w	ip, [r0], #4
 8012ad4:	dcec      	bgt.n	8012ab0 <__multadd+0x10>
 8012ad6:	b13b      	cbz	r3, 8012ae8 <__multadd+0x48>
 8012ad8:	68a2      	ldr	r2, [r4, #8]
 8012ada:	4296      	cmp	r6, r2
 8012adc:	da07      	bge.n	8012aee <__multadd+0x4e>
 8012ade:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 8012ae2:	3601      	adds	r6, #1
 8012ae4:	6126      	str	r6, [r4, #16]
 8012ae6:	6153      	str	r3, [r2, #20]
 8012ae8:	4620      	mov	r0, r4
 8012aea:	b003      	add	sp, #12
 8012aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aee:	6861      	ldr	r1, [r4, #4]
 8012af0:	4628      	mov	r0, r5
 8012af2:	9301      	str	r3, [sp, #4]
 8012af4:	3101      	adds	r1, #1
 8012af6:	f7ff ffa3 	bl	8012a40 <_Balloc>
 8012afa:	6922      	ldr	r2, [r4, #16]
 8012afc:	f104 010c 	add.w	r1, r4, #12
 8012b00:	3202      	adds	r2, #2
 8012b02:	0092      	lsls	r2, r2, #2
 8012b04:	4607      	mov	r7, r0
 8012b06:	f100 000c 	add.w	r0, r0, #12
 8012b0a:	f7ff ff53 	bl	80129b4 <memcpy>
 8012b0e:	6861      	ldr	r1, [r4, #4]
 8012b10:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8012b12:	9b01      	ldr	r3, [sp, #4]
 8012b14:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8012b18:	6020      	str	r0, [r4, #0]
 8012b1a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
 8012b1e:	463c      	mov	r4, r7
 8012b20:	e7dd      	b.n	8012ade <__multadd+0x3e>
 8012b22:	bf00      	nop

08012b24 <__s2b>:
 8012b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b28:	f648 6439 	movw	r4, #36409	; 0x8e39
 8012b2c:	461e      	mov	r6, r3
 8012b2e:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
 8012b32:	f103 0308 	add.w	r3, r3, #8
 8012b36:	4688      	mov	r8, r1
 8012b38:	4605      	mov	r5, r0
 8012b3a:	4617      	mov	r7, r2
 8012b3c:	fb84 1403 	smull	r1, r4, r4, r3
 8012b40:	17db      	asrs	r3, r3, #31
 8012b42:	2100      	movs	r1, #0
 8012b44:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	dd05      	ble.n	8012b58 <__s2b+0x34>
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	2100      	movs	r1, #0
 8012b50:	0052      	lsls	r2, r2, #1
 8012b52:	3101      	adds	r1, #1
 8012b54:	4293      	cmp	r3, r2
 8012b56:	dcfb      	bgt.n	8012b50 <__s2b+0x2c>
 8012b58:	4628      	mov	r0, r5
 8012b5a:	f7ff ff71 	bl	8012a40 <_Balloc>
 8012b5e:	9b08      	ldr	r3, [sp, #32]
 8012b60:	6143      	str	r3, [r0, #20]
 8012b62:	2301      	movs	r3, #1
 8012b64:	2f09      	cmp	r7, #9
 8012b66:	4601      	mov	r1, r0
 8012b68:	6103      	str	r3, [r0, #16]
 8012b6a:	dd21      	ble.n	8012bb0 <__s2b+0x8c>
 8012b6c:	f108 0909 	add.w	r9, r8, #9
 8012b70:	2409      	movs	r4, #9
 8012b72:	f818 3004 	ldrb.w	r3, [r8, r4]
 8012b76:	220a      	movs	r2, #10
 8012b78:	4628      	mov	r0, r5
 8012b7a:	3401      	adds	r4, #1
 8012b7c:	3b30      	subs	r3, #48	; 0x30
 8012b7e:	f7ff ff8f 	bl	8012aa0 <__multadd>
 8012b82:	42bc      	cmp	r4, r7
 8012b84:	4601      	mov	r1, r0
 8012b86:	d1f4      	bne.n	8012b72 <__s2b+0x4e>
 8012b88:	eb09 0804 	add.w	r8, r9, r4
 8012b8c:	f1a8 0808 	sub.w	r8, r8, #8
 8012b90:	42a6      	cmp	r6, r4
 8012b92:	dd0a      	ble.n	8012baa <__s2b+0x86>
 8012b94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012b98:	220a      	movs	r2, #10
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	3401      	adds	r4, #1
 8012b9e:	3b30      	subs	r3, #48	; 0x30
 8012ba0:	f7ff ff7e 	bl	8012aa0 <__multadd>
 8012ba4:	42b4      	cmp	r4, r6
 8012ba6:	4601      	mov	r1, r0
 8012ba8:	d1f4      	bne.n	8012b94 <__s2b+0x70>
 8012baa:	4608      	mov	r0, r1
 8012bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb0:	f108 080a 	add.w	r8, r8, #10
 8012bb4:	2409      	movs	r4, #9
 8012bb6:	e7eb      	b.n	8012b90 <__s2b+0x6c>

08012bb8 <__hi0bits>:
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2000      	movs	r0, #0
 8012bbc:	0c1a      	lsrs	r2, r3, #16
 8012bbe:	d101      	bne.n	8012bc4 <__hi0bits+0xc>
 8012bc0:	041b      	lsls	r3, r3, #16
 8012bc2:	2010      	movs	r0, #16
 8012bc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012bc8:	d101      	bne.n	8012bce <__hi0bits+0x16>
 8012bca:	3008      	adds	r0, #8
 8012bcc:	021b      	lsls	r3, r3, #8
 8012bce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012bd2:	d101      	bne.n	8012bd8 <__hi0bits+0x20>
 8012bd4:	3004      	adds	r0, #4
 8012bd6:	011b      	lsls	r3, r3, #4
 8012bd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012bdc:	d101      	bne.n	8012be2 <__hi0bits+0x2a>
 8012bde:	3002      	adds	r0, #2
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	db02      	blt.n	8012bec <__hi0bits+0x34>
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	d401      	bmi.n	8012bee <__hi0bits+0x36>
 8012bea:	2020      	movs	r0, #32
 8012bec:	4770      	bx	lr
 8012bee:	3001      	adds	r0, #1
 8012bf0:	4770      	bx	lr
 8012bf2:	bf00      	nop

08012bf4 <__lo0bits>:
 8012bf4:	6803      	ldr	r3, [r0, #0]
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	f013 0007 	ands.w	r0, r3, #7
 8012bfc:	d007      	beq.n	8012c0e <__lo0bits+0x1a>
 8012bfe:	07d9      	lsls	r1, r3, #31
 8012c00:	d41f      	bmi.n	8012c42 <__lo0bits+0x4e>
 8012c02:	0798      	lsls	r0, r3, #30
 8012c04:	d41f      	bmi.n	8012c46 <__lo0bits+0x52>
 8012c06:	089b      	lsrs	r3, r3, #2
 8012c08:	2002      	movs	r0, #2
 8012c0a:	6013      	str	r3, [r2, #0]
 8012c0c:	4770      	bx	lr
 8012c0e:	b299      	uxth	r1, r3
 8012c10:	b909      	cbnz	r1, 8012c16 <__lo0bits+0x22>
 8012c12:	0c1b      	lsrs	r3, r3, #16
 8012c14:	2010      	movs	r0, #16
 8012c16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012c1a:	d101      	bne.n	8012c20 <__lo0bits+0x2c>
 8012c1c:	3008      	adds	r0, #8
 8012c1e:	0a1b      	lsrs	r3, r3, #8
 8012c20:	0719      	lsls	r1, r3, #28
 8012c22:	d101      	bne.n	8012c28 <__lo0bits+0x34>
 8012c24:	3004      	adds	r0, #4
 8012c26:	091b      	lsrs	r3, r3, #4
 8012c28:	0799      	lsls	r1, r3, #30
 8012c2a:	d101      	bne.n	8012c30 <__lo0bits+0x3c>
 8012c2c:	3002      	adds	r0, #2
 8012c2e:	089b      	lsrs	r3, r3, #2
 8012c30:	07d9      	lsls	r1, r3, #31
 8012c32:	d404      	bmi.n	8012c3e <__lo0bits+0x4a>
 8012c34:	085b      	lsrs	r3, r3, #1
 8012c36:	d101      	bne.n	8012c3c <__lo0bits+0x48>
 8012c38:	2020      	movs	r0, #32
 8012c3a:	4770      	bx	lr
 8012c3c:	3001      	adds	r0, #1
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	4770      	bx	lr
 8012c42:	2000      	movs	r0, #0
 8012c44:	4770      	bx	lr
 8012c46:	085b      	lsrs	r3, r3, #1
 8012c48:	2001      	movs	r0, #1
 8012c4a:	6013      	str	r3, [r2, #0]
 8012c4c:	4770      	bx	lr
 8012c4e:	bf00      	nop

08012c50 <__i2b>:
 8012c50:	b510      	push	{r4, lr}
 8012c52:	460c      	mov	r4, r1
 8012c54:	2101      	movs	r1, #1
 8012c56:	f7ff fef3 	bl	8012a40 <_Balloc>
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	6144      	str	r4, [r0, #20]
 8012c5e:	6103      	str	r3, [r0, #16]
 8012c60:	bd10      	pop	{r4, pc}
 8012c62:	bf00      	nop

08012c64 <__multiply>:
 8012c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c68:	460c      	mov	r4, r1
 8012c6a:	690d      	ldr	r5, [r1, #16]
 8012c6c:	b087      	sub	sp, #28
 8012c6e:	6916      	ldr	r6, [r2, #16]
 8012c70:	4692      	mov	sl, r2
 8012c72:	42b5      	cmp	r5, r6
 8012c74:	da04      	bge.n	8012c80 <__multiply+0x1c>
 8012c76:	462a      	mov	r2, r5
 8012c78:	4654      	mov	r4, sl
 8012c7a:	4635      	mov	r5, r6
 8012c7c:	468a      	mov	sl, r1
 8012c7e:	4616      	mov	r6, r2
 8012c80:	68a3      	ldr	r3, [r4, #8]
 8012c82:	eb05 0b06 	add.w	fp, r5, r6
 8012c86:	6861      	ldr	r1, [r4, #4]
 8012c88:	459b      	cmp	fp, r3
 8012c8a:	bfc8      	it	gt
 8012c8c:	3101      	addgt	r1, #1
 8012c8e:	f7ff fed7 	bl	8012a40 <_Balloc>
 8012c92:	f10b 0104 	add.w	r1, fp, #4
 8012c96:	9105      	str	r1, [sp, #20]
 8012c98:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8012c9c:	f100 0914 	add.w	r9, r0, #20
 8012ca0:	3304      	adds	r3, #4
 8012ca2:	9003      	str	r0, [sp, #12]
 8012ca4:	4599      	cmp	r9, r3
 8012ca6:	9304      	str	r3, [sp, #16]
 8012ca8:	d206      	bcs.n	8012cb8 <__multiply+0x54>
 8012caa:	9904      	ldr	r1, [sp, #16]
 8012cac:	464b      	mov	r3, r9
 8012cae:	2200      	movs	r2, #0
 8012cb0:	f843 2b04 	str.w	r2, [r3], #4
 8012cb4:	4299      	cmp	r1, r3
 8012cb6:	d8fb      	bhi.n	8012cb0 <__multiply+0x4c>
 8012cb8:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8012cbc:	f10a 0a14 	add.w	sl, sl, #20
 8012cc0:	3614      	adds	r6, #20
 8012cc2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8012cc6:	3414      	adds	r4, #20
 8012cc8:	45b2      	cmp	sl, r6
 8012cca:	9601      	str	r6, [sp, #4]
 8012ccc:	f105 0814 	add.w	r8, r5, #20
 8012cd0:	9402      	str	r4, [sp, #8]
 8012cd2:	d24a      	bcs.n	8012d6a <__multiply+0x106>
 8012cd4:	f85a 5b04 	ldr.w	r5, [sl], #4
 8012cd8:	b2ac      	uxth	r4, r5
 8012cda:	b1ec      	cbz	r4, 8012d18 <__multiply+0xb4>
 8012cdc:	9a02      	ldr	r2, [sp, #8]
 8012cde:	464b      	mov	r3, r9
 8012ce0:	2500      	movs	r5, #0
 8012ce2:	6818      	ldr	r0, [r3, #0]
 8012ce4:	461f      	mov	r7, r3
 8012ce6:	f852 1b04 	ldr.w	r1, [r2], #4
 8012cea:	b286      	uxth	r6, r0
 8012cec:	0c00      	lsrs	r0, r0, #16
 8012cee:	1976      	adds	r6, r6, r5
 8012cf0:	fa1f fc81 	uxth.w	ip, r1
 8012cf4:	0c09      	lsrs	r1, r1, #16
 8012cf6:	fb04 660c 	mla	r6, r4, ip, r6
 8012cfa:	fb04 0001 	mla	r0, r4, r1, r0
 8012cfe:	eb00 4516 	add.w	r5, r0, r6, lsr #16
 8012d02:	b2b6      	uxth	r6, r6
 8012d04:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8012d08:	0c2d      	lsrs	r5, r5, #16
 8012d0a:	4590      	cmp	r8, r2
 8012d0c:	f843 6b04 	str.w	r6, [r3], #4
 8012d10:	d8e7      	bhi.n	8012ce2 <__multiply+0x7e>
 8012d12:	607d      	str	r5, [r7, #4]
 8012d14:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8012d18:	0c2d      	lsrs	r5, r5, #16
 8012d1a:	d021      	beq.n	8012d60 <__multiply+0xfc>
 8012d1c:	f8d9 1000 	ldr.w	r1, [r9]
 8012d20:	46cc      	mov	ip, r9
 8012d22:	9b02      	ldr	r3, [sp, #8]
 8012d24:	464e      	mov	r6, r9
 8012d26:	4608      	mov	r0, r1
 8012d28:	2700      	movs	r7, #0
 8012d2a:	e000      	b.n	8012d2e <__multiply+0xca>
 8012d2c:	4616      	mov	r6, r2
 8012d2e:	881c      	ldrh	r4, [r3, #0]
 8012d30:	eb07 4710 	add.w	r7, r7, r0, lsr #16
 8012d34:	4632      	mov	r2, r6
 8012d36:	b289      	uxth	r1, r1
 8012d38:	fb05 7704 	mla	r7, r5, r4, r7
 8012d3c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8012d40:	f842 1b04 	str.w	r1, [r2], #4
 8012d44:	f853 1b04 	ldr.w	r1, [r3], #4
 8012d48:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 8012d4c:	0c09      	lsrs	r1, r1, #16
 8012d4e:	b284      	uxth	r4, r0
 8012d50:	fb05 4101 	mla	r1, r5, r1, r4
 8012d54:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 8012d58:	0c0f      	lsrs	r7, r1, #16
 8012d5a:	4598      	cmp	r8, r3
 8012d5c:	d8e6      	bhi.n	8012d2c <__multiply+0xc8>
 8012d5e:	6071      	str	r1, [r6, #4]
 8012d60:	9a01      	ldr	r2, [sp, #4]
 8012d62:	f109 0904 	add.w	r9, r9, #4
 8012d66:	4552      	cmp	r2, sl
 8012d68:	d8b4      	bhi.n	8012cd4 <__multiply+0x70>
 8012d6a:	f1bb 0f00 	cmp.w	fp, #0
 8012d6e:	dd0e      	ble.n	8012d8e <__multiply+0x12a>
 8012d70:	9905      	ldr	r1, [sp, #20]
 8012d72:	9a03      	ldr	r2, [sp, #12]
 8012d74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d78:	b94b      	cbnz	r3, 8012d8e <__multiply+0x12a>
 8012d7a:	9904      	ldr	r1, [sp, #16]
 8012d7c:	465a      	mov	r2, fp
 8012d7e:	1f0b      	subs	r3, r1, #4
 8012d80:	e002      	b.n	8012d88 <__multiply+0x124>
 8012d82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d86:	b909      	cbnz	r1, 8012d8c <__multiply+0x128>
 8012d88:	3a01      	subs	r2, #1
 8012d8a:	d1fa      	bne.n	8012d82 <__multiply+0x11e>
 8012d8c:	4693      	mov	fp, r2
 8012d8e:	9a03      	ldr	r2, [sp, #12]
 8012d90:	4610      	mov	r0, r2
 8012d92:	f8c2 b010 	str.w	fp, [r2, #16]
 8012d96:	b007      	add	sp, #28
 8012d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d9c <__pow5mult>:
 8012d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012da0:	f012 0603 	ands.w	r6, r2, #3
 8012da4:	4615      	mov	r5, r2
 8012da6:	4604      	mov	r4, r0
 8012da8:	4688      	mov	r8, r1
 8012daa:	d12d      	bne.n	8012e08 <__pow5mult+0x6c>
 8012dac:	10ad      	asrs	r5, r5, #2
 8012dae:	d01d      	beq.n	8012dec <__pow5mult+0x50>
 8012db0:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8012db2:	b92f      	cbnz	r7, 8012dc0 <__pow5mult+0x24>
 8012db4:	e031      	b.n	8012e1a <__pow5mult+0x7e>
 8012db6:	106d      	asrs	r5, r5, #1
 8012db8:	d018      	beq.n	8012dec <__pow5mult+0x50>
 8012dba:	683e      	ldr	r6, [r7, #0]
 8012dbc:	b1ce      	cbz	r6, 8012df2 <__pow5mult+0x56>
 8012dbe:	4637      	mov	r7, r6
 8012dc0:	07e8      	lsls	r0, r5, #31
 8012dc2:	d5f8      	bpl.n	8012db6 <__pow5mult+0x1a>
 8012dc4:	4641      	mov	r1, r8
 8012dc6:	463a      	mov	r2, r7
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f7ff ff4b 	bl	8012c64 <__multiply>
 8012dce:	f1b8 0f00 	cmp.w	r8, #0
 8012dd2:	d017      	beq.n	8012e04 <__pow5mult+0x68>
 8012dd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8012dd8:	106d      	asrs	r5, r5, #1
 8012dda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012de0:	f8c8 1000 	str.w	r1, [r8]
 8012de4:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8012de8:	4680      	mov	r8, r0
 8012dea:	d1e6      	bne.n	8012dba <__pow5mult+0x1e>
 8012dec:	4640      	mov	r0, r8
 8012dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df2:	4639      	mov	r1, r7
 8012df4:	463a      	mov	r2, r7
 8012df6:	4620      	mov	r0, r4
 8012df8:	f7ff ff34 	bl	8012c64 <__multiply>
 8012dfc:	6038      	str	r0, [r7, #0]
 8012dfe:	4607      	mov	r7, r0
 8012e00:	6006      	str	r6, [r0, #0]
 8012e02:	e7dd      	b.n	8012dc0 <__pow5mult+0x24>
 8012e04:	4680      	mov	r8, r0
 8012e06:	e7d6      	b.n	8012db6 <__pow5mult+0x1a>
 8012e08:	4a09      	ldr	r2, [pc, #36]	; (8012e30 <__pow5mult+0x94>)
 8012e0a:	3e01      	subs	r6, #1
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8012e12:	f7ff fe45 	bl	8012aa0 <__multadd>
 8012e16:	4680      	mov	r8, r0
 8012e18:	e7c8      	b.n	8012dac <__pow5mult+0x10>
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f240 2171 	movw	r1, #625	; 0x271
 8012e20:	f7ff ff16 	bl	8012c50 <__i2b>
 8012e24:	2300      	movs	r3, #0
 8012e26:	64a0      	str	r0, [r4, #72]	; 0x48
 8012e28:	4607      	mov	r7, r0
 8012e2a:	6003      	str	r3, [r0, #0]
 8012e2c:	e7c8      	b.n	8012dc0 <__pow5mult+0x24>
 8012e2e:	bf00      	nop
 8012e30:	08014bd8 	.word	0x08014bd8

08012e34 <__lshift>:
 8012e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e38:	4691      	mov	r9, r2
 8012e3a:	690a      	ldr	r2, [r1, #16]
 8012e3c:	460c      	mov	r4, r1
 8012e3e:	ea4f 1769 	mov.w	r7, r9, asr #5
 8012e42:	688b      	ldr	r3, [r1, #8]
 8012e44:	eb07 0b02 	add.w	fp, r7, r2
 8012e48:	4606      	mov	r6, r0
 8012e4a:	f10b 0501 	add.w	r5, fp, #1
 8012e4e:	6849      	ldr	r1, [r1, #4]
 8012e50:	429d      	cmp	r5, r3
 8012e52:	dd03      	ble.n	8012e5c <__lshift+0x28>
 8012e54:	005b      	lsls	r3, r3, #1
 8012e56:	3101      	adds	r1, #1
 8012e58:	429d      	cmp	r5, r3
 8012e5a:	dcfb      	bgt.n	8012e54 <__lshift+0x20>
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f7ff fdef 	bl	8012a40 <_Balloc>
 8012e62:	2f00      	cmp	r7, #0
 8012e64:	f100 0314 	add.w	r3, r0, #20
 8012e68:	dd09      	ble.n	8012e7e <__lshift+0x4a>
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	4611      	mov	r1, r2
 8012e6e:	3201      	adds	r2, #1
 8012e70:	f843 1b04 	str.w	r1, [r3], #4
 8012e74:	42ba      	cmp	r2, r7
 8012e76:	d1fa      	bne.n	8012e6e <__lshift+0x3a>
 8012e78:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8012e7c:	3314      	adds	r3, #20
 8012e7e:	6922      	ldr	r2, [r4, #16]
 8012e80:	f019 091f 	ands.w	r9, r9, #31
 8012e84:	f104 0114 	add.w	r1, r4, #20
 8012e88:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8012e8c:	f10c 0c14 	add.w	ip, ip, #20
 8012e90:	d022      	beq.n	8012ed8 <__lshift+0xa4>
 8012e92:	f1c9 0a20 	rsb	sl, r9, #32
 8012e96:	2200      	movs	r2, #0
 8012e98:	e000      	b.n	8012e9c <__lshift+0x68>
 8012e9a:	463b      	mov	r3, r7
 8012e9c:	f8d1 8000 	ldr.w	r8, [r1]
 8012ea0:	461f      	mov	r7, r3
 8012ea2:	fa08 f809 	lsl.w	r8, r8, r9
 8012ea6:	ea48 0202 	orr.w	r2, r8, r2
 8012eaa:	f847 2b04 	str.w	r2, [r7], #4
 8012eae:	f851 2b04 	ldr.w	r2, [r1], #4
 8012eb2:	458c      	cmp	ip, r1
 8012eb4:	fa22 f20a 	lsr.w	r2, r2, sl
 8012eb8:	d8ef      	bhi.n	8012e9a <__lshift+0x66>
 8012eba:	605a      	str	r2, [r3, #4]
 8012ebc:	b10a      	cbz	r2, 8012ec2 <__lshift+0x8e>
 8012ebe:	f10b 0502 	add.w	r5, fp, #2
 8012ec2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8012ec4:	3d01      	subs	r5, #1
 8012ec6:	6862      	ldr	r2, [r4, #4]
 8012ec8:	6105      	str	r5, [r0, #16]
 8012eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ece:	6021      	str	r1, [r4, #0]
 8012ed0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed8:	f851 2b04 	ldr.w	r2, [r1], #4
 8012edc:	458c      	cmp	ip, r1
 8012ede:	f843 2b04 	str.w	r2, [r3], #4
 8012ee2:	d9ee      	bls.n	8012ec2 <__lshift+0x8e>
 8012ee4:	f851 2b04 	ldr.w	r2, [r1], #4
 8012ee8:	458c      	cmp	ip, r1
 8012eea:	f843 2b04 	str.w	r2, [r3], #4
 8012eee:	d8f3      	bhi.n	8012ed8 <__lshift+0xa4>
 8012ef0:	e7e7      	b.n	8012ec2 <__lshift+0x8e>
 8012ef2:	bf00      	nop

08012ef4 <__mcmp>:
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	690a      	ldr	r2, [r1, #16]
 8012ef8:	6900      	ldr	r0, [r0, #16]
 8012efa:	b430      	push	{r4, r5}
 8012efc:	1a80      	subs	r0, r0, r2
 8012efe:	d110      	bne.n	8012f22 <__mcmp+0x2e>
 8012f00:	3204      	adds	r2, #4
 8012f02:	f103 0514 	add.w	r5, r3, #20
 8012f06:	0092      	lsls	r2, r2, #2
 8012f08:	189b      	adds	r3, r3, r2
 8012f0a:	1889      	adds	r1, r1, r2
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	3104      	adds	r1, #4
 8012f10:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8012f14:	3b04      	subs	r3, #4
 8012f16:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012f1a:	4294      	cmp	r4, r2
 8012f1c:	d103      	bne.n	8012f26 <__mcmp+0x32>
 8012f1e:	429d      	cmp	r5, r3
 8012f20:	d3f6      	bcc.n	8012f10 <__mcmp+0x1c>
 8012f22:	bc30      	pop	{r4, r5}
 8012f24:	4770      	bx	lr
 8012f26:	bf38      	it	cc
 8012f28:	f04f 30ff 	movcc.w	r0, #4294967295
 8012f2c:	d3f9      	bcc.n	8012f22 <__mcmp+0x2e>
 8012f2e:	2001      	movs	r0, #1
 8012f30:	e7f7      	b.n	8012f22 <__mcmp+0x2e>
 8012f32:	bf00      	nop

08012f34 <__mdiff>:
 8012f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f38:	460c      	mov	r4, r1
 8012f3a:	4607      	mov	r7, r0
 8012f3c:	4611      	mov	r1, r2
 8012f3e:	4620      	mov	r0, r4
 8012f40:	4615      	mov	r5, r2
 8012f42:	f7ff ffd7 	bl	8012ef4 <__mcmp>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	4606      	mov	r6, r0
 8012f4a:	d05b      	beq.n	8013004 <__mdiff+0xd0>
 8012f4c:	db55      	blt.n	8012ffa <__mdiff+0xc6>
 8012f4e:	2600      	movs	r6, #0
 8012f50:	6861      	ldr	r1, [r4, #4]
 8012f52:	4638      	mov	r0, r7
 8012f54:	f7ff fd74 	bl	8012a40 <_Balloc>
 8012f58:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8012f5c:	692b      	ldr	r3, [r5, #16]
 8012f5e:	f104 0c14 	add.w	ip, r4, #20
 8012f62:	f105 0914 	add.w	r9, r5, #20
 8012f66:	2700      	movs	r7, #0
 8012f68:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8012f6c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8012f70:	3414      	adds	r4, #20
 8012f72:	3514      	adds	r5, #20
 8012f74:	f100 0a14 	add.w	sl, r0, #20
 8012f78:	60c6      	str	r6, [r0, #12]
 8012f7a:	f85c 6b04 	ldr.w	r6, [ip], #4
 8012f7e:	4653      	mov	r3, sl
 8012f80:	f859 ab04 	ldr.w	sl, [r9], #4
 8012f84:	4662      	mov	r2, ip
 8012f86:	b2b1      	uxth	r1, r6
 8012f88:	19c9      	adds	r1, r1, r7
 8012f8a:	fa1f fb8a 	uxth.w	fp, sl
 8012f8e:	ebcb 0101 	rsb	r1, fp, r1
 8012f92:	ea4f 471a 	mov.w	r7, sl, lsr #16
 8012f96:	ebc7 4716 	rsb	r7, r7, r6, lsr #16
 8012f9a:	eb07 4721 	add.w	r7, r7, r1, asr #16
 8012f9e:	b289      	uxth	r1, r1
 8012fa0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8012fa4:	143f      	asrs	r7, r7, #16
 8012fa6:	454d      	cmp	r5, r9
 8012fa8:	f843 1b04 	str.w	r1, [r3], #4
 8012fac:	469a      	mov	sl, r3
 8012fae:	d8e4      	bhi.n	8012f7a <__mdiff+0x46>
 8012fb0:	4564      	cmp	r4, ip
 8012fb2:	461e      	mov	r6, r3
 8012fb4:	d915      	bls.n	8012fe2 <__mdiff+0xae>
 8012fb6:	f852 5b04 	ldr.w	r5, [r2], #4
 8012fba:	b2a9      	uxth	r1, r5
 8012fbc:	0c2d      	lsrs	r5, r5, #16
 8012fbe:	19cf      	adds	r7, r1, r7
 8012fc0:	eb05 4527 	add.w	r5, r5, r7, asr #16
 8012fc4:	b2bf      	uxth	r7, r7
 8012fc6:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8012fca:	142f      	asrs	r7, r5, #16
 8012fcc:	4294      	cmp	r4, r2
 8012fce:	f843 1b04 	str.w	r1, [r3], #4
 8012fd2:	d8f0      	bhi.n	8012fb6 <__mdiff+0x82>
 8012fd4:	ea6f 030c 	mvn.w	r3, ip
 8012fd8:	191b      	adds	r3, r3, r4
 8012fda:	f023 0303 	bic.w	r3, r3, #3
 8012fde:	3304      	adds	r3, #4
 8012fe0:	18f3      	adds	r3, r6, r3
 8012fe2:	b931      	cbnz	r1, 8012ff2 <__mdiff+0xbe>
 8012fe4:	3b04      	subs	r3, #4
 8012fe6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012fea:	f108 38ff 	add.w	r8, r8, #4294967295
 8012fee:	2a00      	cmp	r2, #0
 8012ff0:	d0f9      	beq.n	8012fe6 <__mdiff+0xb2>
 8012ff2:	f8c0 8010 	str.w	r8, [r0, #16]
 8012ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ffa:	4623      	mov	r3, r4
 8012ffc:	2601      	movs	r6, #1
 8012ffe:	462c      	mov	r4, r5
 8013000:	461d      	mov	r5, r3
 8013002:	e7a5      	b.n	8012f50 <__mdiff+0x1c>
 8013004:	4638      	mov	r0, r7
 8013006:	4631      	mov	r1, r6
 8013008:	f7ff fd1a 	bl	8012a40 <_Balloc>
 801300c:	2301      	movs	r3, #1
 801300e:	6146      	str	r6, [r0, #20]
 8013010:	6103      	str	r3, [r0, #16]
 8013012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013016:	bf00      	nop

08013018 <__ulp>:
 8013018:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801301c:	0d1b      	lsrs	r3, r3, #20
 801301e:	051b      	lsls	r3, r3, #20
 8013020:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013024:	2b00      	cmp	r3, #0
 8013026:	dd02      	ble.n	801302e <__ulp+0x16>
 8013028:	4619      	mov	r1, r3
 801302a:	2000      	movs	r0, #0
 801302c:	4770      	bx	lr
 801302e:	425b      	negs	r3, r3
 8013030:	2100      	movs	r1, #0
 8013032:	151b      	asrs	r3, r3, #20
 8013034:	2b13      	cmp	r3, #19
 8013036:	dd0b      	ble.n	8013050 <__ulp+0x38>
 8013038:	2b32      	cmp	r3, #50	; 0x32
 801303a:	dd02      	ble.n	8013042 <__ulp+0x2a>
 801303c:	2301      	movs	r3, #1
 801303e:	4618      	mov	r0, r3
 8013040:	4770      	bx	lr
 8013042:	2201      	movs	r2, #1
 8013044:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8013048:	fa12 f303 	lsls.w	r3, r2, r3
 801304c:	4618      	mov	r0, r3
 801304e:	4770      	bx	lr
 8013050:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013054:	2000      	movs	r0, #0
 8013056:	fa52 f103 	asrs.w	r1, r2, r3
 801305a:	4770      	bx	lr

0801305c <__b2d>:
 801305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013060:	f100 0614 	add.w	r6, r0, #20
 8013064:	6904      	ldr	r4, [r0, #16]
 8013066:	460f      	mov	r7, r1
 8013068:	3404      	adds	r4, #4
 801306a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 801306e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8013072:	46a0      	mov	r8, r4
 8013074:	4628      	mov	r0, r5
 8013076:	f7ff fd9f 	bl	8012bb8 <__hi0bits>
 801307a:	280a      	cmp	r0, #10
 801307c:	f1c0 0320 	rsb	r3, r0, #32
 8013080:	603b      	str	r3, [r7, #0]
 8013082:	dc15      	bgt.n	80130b0 <__b2d+0x54>
 8013084:	f1c0 010b 	rsb	r1, r0, #11
 8013088:	fa35 f701 	lsrs.w	r7, r5, r1
 801308c:	42a6      	cmp	r6, r4
 801308e:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
 8013092:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
 8013096:	d232      	bcs.n	80130fe <__b2d+0xa2>
 8013098:	f854 4c04 	ldr.w	r4, [r4, #-4]
 801309c:	fa34 f101 	lsrs.w	r1, r4, r1
 80130a0:	3015      	adds	r0, #21
 80130a2:	4085      	lsls	r5, r0
 80130a4:	ea41 0205 	orr.w	r2, r1, r5
 80130a8:	4610      	mov	r0, r2
 80130aa:	4619      	mov	r1, r3
 80130ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b0:	2100      	movs	r1, #0
 80130b2:	42a6      	cmp	r6, r4
 80130b4:	d202      	bcs.n	80130bc <__b2d+0x60>
 80130b6:	f858 1c04 	ldr.w	r1, [r8, #-4]
 80130ba:	3c04      	subs	r4, #4
 80130bc:	f1b0 070b 	subs.w	r7, r0, #11
 80130c0:	bf02      	ittt	eq
 80130c2:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
 80130c6:	460a      	moveq	r2, r1
 80130c8:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
 80130cc:	d0ec      	beq.n	80130a8 <__b2d+0x4c>
 80130ce:	40bd      	lsls	r5, r7
 80130d0:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 80130d4:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
 80130d8:	42b4      	cmp	r4, r6
 80130da:	fa21 fc00 	lsr.w	ip, r1, r0
 80130de:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
 80130e2:	ea45 030c 	orr.w	r3, r5, ip
 80130e6:	d90c      	bls.n	8013102 <__b2d+0xa6>
 80130e8:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80130ec:	fa34 f000 	lsrs.w	r0, r4, r0
 80130f0:	40b9      	lsls	r1, r7
 80130f2:	ea40 0201 	orr.w	r2, r0, r1
 80130f6:	4619      	mov	r1, r3
 80130f8:	4610      	mov	r0, r2
 80130fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130fe:	2100      	movs	r1, #0
 8013100:	e7ce      	b.n	80130a0 <__b2d+0x44>
 8013102:	2000      	movs	r0, #0
 8013104:	e7f4      	b.n	80130f0 <__b2d+0x94>
 8013106:	bf00      	nop

08013108 <__d2b>:
 8013108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801310c:	b083      	sub	sp, #12
 801310e:	2101      	movs	r1, #1
 8013110:	461d      	mov	r5, r3
 8013112:	4614      	mov	r4, r2
 8013114:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013116:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013118:	f7ff fc92 	bl	8012a40 <_Balloc>
 801311c:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8013120:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8013124:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013128:	9301      	str	r3, [sp, #4]
 801312a:	4680      	mov	r8, r0
 801312c:	f1b9 0f00 	cmp.w	r9, #0
 8013130:	d002      	beq.n	8013138 <__d2b+0x30>
 8013132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013136:	9301      	str	r3, [sp, #4]
 8013138:	2c00      	cmp	r4, #0
 801313a:	d026      	beq.n	801318a <__d2b+0x82>
 801313c:	a802      	add	r0, sp, #8
 801313e:	f840 4d08 	str.w	r4, [r0, #-8]!
 8013142:	4668      	mov	r0, sp
 8013144:	f7ff fd56 	bl	8012bf4 <__lo0bits>
 8013148:	9b01      	ldr	r3, [sp, #4]
 801314a:	2800      	cmp	r0, #0
 801314c:	d135      	bne.n	80131ba <__d2b+0xb2>
 801314e:	9a00      	ldr	r2, [sp, #0]
 8013150:	f8c8 2014 	str.w	r2, [r8, #20]
 8013154:	2b00      	cmp	r3, #0
 8013156:	bf0c      	ite	eq
 8013158:	2401      	moveq	r4, #1
 801315a:	2402      	movne	r4, #2
 801315c:	f8c8 3018 	str.w	r3, [r8, #24]
 8013160:	f8c8 4010 	str.w	r4, [r8, #16]
 8013164:	f1b9 0f00 	cmp.w	r9, #0
 8013168:	d11d      	bne.n	80131a6 <__d2b+0x9e>
 801316a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801316e:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
 8013172:	3802      	subs	r0, #2
 8013174:	6038      	str	r0, [r7, #0]
 8013176:	6918      	ldr	r0, [r3, #16]
 8013178:	f7ff fd1e 	bl	8012bb8 <__hi0bits>
 801317c:	ebc0 1444 	rsb	r4, r0, r4, lsl #5
 8013180:	6034      	str	r4, [r6, #0]
 8013182:	4640      	mov	r0, r8
 8013184:	b003      	add	sp, #12
 8013186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801318a:	a801      	add	r0, sp, #4
 801318c:	f7ff fd32 	bl	8012bf4 <__lo0bits>
 8013190:	2301      	movs	r3, #1
 8013192:	461c      	mov	r4, r3
 8013194:	f8c8 3010 	str.w	r3, [r8, #16]
 8013198:	9b01      	ldr	r3, [sp, #4]
 801319a:	f8c8 3014 	str.w	r3, [r8, #20]
 801319e:	3020      	adds	r0, #32
 80131a0:	f1b9 0f00 	cmp.w	r9, #0
 80131a4:	d0e1      	beq.n	801316a <__d2b+0x62>
 80131a6:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
 80131aa:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 80131ae:	f1a9 0903 	sub.w	r9, r9, #3
 80131b2:	4448      	add	r0, r9
 80131b4:	6038      	str	r0, [r7, #0]
 80131b6:	6033      	str	r3, [r6, #0]
 80131b8:	e7e3      	b.n	8013182 <__d2b+0x7a>
 80131ba:	f1c0 0220 	rsb	r2, r0, #32
 80131be:	9900      	ldr	r1, [sp, #0]
 80131c0:	fa13 f202 	lsls.w	r2, r3, r2
 80131c4:	40c3      	lsrs	r3, r0
 80131c6:	430a      	orrs	r2, r1
 80131c8:	9301      	str	r3, [sp, #4]
 80131ca:	f8c8 2014 	str.w	r2, [r8, #20]
 80131ce:	e7c1      	b.n	8013154 <__d2b+0x4c>

080131d0 <__ratio>:
 80131d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d4:	b083      	sub	sp, #12
 80131d6:	460c      	mov	r4, r1
 80131d8:	4669      	mov	r1, sp
 80131da:	4605      	mov	r5, r0
 80131dc:	f7ff ff3e 	bl	801305c <__b2d>
 80131e0:	460f      	mov	r7, r1
 80131e2:	4606      	mov	r6, r0
 80131e4:	a901      	add	r1, sp, #4
 80131e6:	4620      	mov	r0, r4
 80131e8:	f7ff ff38 	bl	801305c <__b2d>
 80131ec:	46b9      	mov	r9, r7
 80131ee:	46b0      	mov	r8, r6
 80131f0:	460b      	mov	r3, r1
 80131f2:	4602      	mov	r2, r0
 80131f4:	6929      	ldr	r1, [r5, #16]
 80131f6:	469b      	mov	fp, r3
 80131f8:	6920      	ldr	r0, [r4, #16]
 80131fa:	4692      	mov	sl, r2
 80131fc:	9c00      	ldr	r4, [sp, #0]
 80131fe:	1a09      	subs	r1, r1, r0
 8013200:	9801      	ldr	r0, [sp, #4]
 8013202:	1a20      	subs	r0, r4, r0
 8013204:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8013208:	2900      	cmp	r1, #0
 801320a:	bfc9      	itett	gt
 801320c:	eb07 5901 	addgt.w	r9, r7, r1, lsl #20
 8013210:	eba3 5b01 	suble.w	fp, r3, r1, lsl #20
 8013214:	4636      	movgt	r6, r6
 8013216:	464f      	movgt	r7, r9
 8013218:	bfdc      	itt	le
 801321a:	4612      	movle	r2, r2
 801321c:	465b      	movle	r3, fp
 801321e:	4630      	mov	r0, r6
 8013220:	4639      	mov	r1, r7
 8013222:	f7fc fd0d 	bl	800fc40 <__aeabi_ddiv>
 8013226:	b003      	add	sp, #12
 8013228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801322c <_mprec_log10>:
 801322c:	b510      	push	{r4, lr}
 801322e:	4604      	mov	r4, r0
 8013230:	2100      	movs	r1, #0
 8013232:	2000      	movs	r0, #0
 8013234:	2c17      	cmp	r4, #23
 8013236:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 801323a:	dd08      	ble.n	801324e <_mprec_log10+0x22>
 801323c:	2300      	movs	r3, #0
 801323e:	2200      	movs	r2, #0
 8013240:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8013244:	f7fc fbd2 	bl	800f9ec <__aeabi_dmul>
 8013248:	3c01      	subs	r4, #1
 801324a:	d1f7      	bne.n	801323c <_mprec_log10+0x10>
 801324c:	bd10      	pop	{r4, pc}
 801324e:	4b03      	ldr	r3, [pc, #12]	; (801325c <_mprec_log10+0x30>)
 8013250:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013254:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8013258:	bd10      	pop	{r4, pc}
 801325a:	bf00      	nop
 801325c:	08014bd8 	.word	0x08014bd8

08013260 <__copybits>:
 8013260:	b470      	push	{r4, r5, r6}
 8013262:	3901      	subs	r1, #1
 8013264:	6916      	ldr	r6, [r2, #16]
 8013266:	f102 0314 	add.w	r3, r2, #20
 801326a:	1149      	asrs	r1, r1, #5
 801326c:	3101      	adds	r1, #1
 801326e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013272:	3614      	adds	r6, #20
 8013274:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013278:	42b3      	cmp	r3, r6
 801327a:	d20c      	bcs.n	8013296 <__copybits+0x36>
 801327c:	4604      	mov	r4, r0
 801327e:	f853 5b04 	ldr.w	r5, [r3], #4
 8013282:	429e      	cmp	r6, r3
 8013284:	f844 5b04 	str.w	r5, [r4], #4
 8013288:	d8f9      	bhi.n	801327e <__copybits+0x1e>
 801328a:	1ab3      	subs	r3, r6, r2
 801328c:	3b15      	subs	r3, #21
 801328e:	f023 0303 	bic.w	r3, r3, #3
 8013292:	3304      	adds	r3, #4
 8013294:	18c0      	adds	r0, r0, r3
 8013296:	4281      	cmp	r1, r0
 8013298:	d904      	bls.n	80132a4 <__copybits+0x44>
 801329a:	2300      	movs	r3, #0
 801329c:	f840 3b04 	str.w	r3, [r0], #4
 80132a0:	4281      	cmp	r1, r0
 80132a2:	d8fb      	bhi.n	801329c <__copybits+0x3c>
 80132a4:	bc70      	pop	{r4, r5, r6}
 80132a6:	4770      	bx	lr

080132a8 <__any_on>:
 80132a8:	6902      	ldr	r2, [r0, #16]
 80132aa:	114b      	asrs	r3, r1, #5
 80132ac:	b410      	push	{r4}
 80132ae:	429a      	cmp	r2, r3
 80132b0:	db01      	blt.n	80132b6 <__any_on+0xe>
 80132b2:	461a      	mov	r2, r3
 80132b4:	dc18      	bgt.n	80132e8 <__any_on+0x40>
 80132b6:	3204      	adds	r2, #4
 80132b8:	f100 0114 	add.w	r1, r0, #20
 80132bc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80132c0:	1d1c      	adds	r4, r3, #4
 80132c2:	42a1      	cmp	r1, r4
 80132c4:	d21d      	bcs.n	8013302 <__any_on+0x5a>
 80132c6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80132ca:	b952      	cbnz	r2, 80132e2 <__any_on+0x3a>
 80132cc:	1a59      	subs	r1, r3, r1
 80132ce:	3103      	adds	r1, #3
 80132d0:	f021 0103 	bic.w	r1, r1, #3
 80132d4:	1a59      	subs	r1, r3, r1
 80132d6:	428b      	cmp	r3, r1
 80132d8:	d013      	beq.n	8013302 <__any_on+0x5a>
 80132da:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80132de:	2a00      	cmp	r2, #0
 80132e0:	d0f9      	beq.n	80132d6 <__any_on+0x2e>
 80132e2:	2001      	movs	r0, #1
 80132e4:	bc10      	pop	{r4}
 80132e6:	4770      	bx	lr
 80132e8:	f011 011f 	ands.w	r1, r1, #31
 80132ec:	d0e3      	beq.n	80132b6 <__any_on+0xe>
 80132ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80132f2:	695b      	ldr	r3, [r3, #20]
 80132f4:	fa33 f401 	lsrs.w	r4, r3, r1
 80132f8:	fa14 f101 	lsls.w	r1, r4, r1
 80132fc:	4299      	cmp	r1, r3
 80132fe:	d1f0      	bne.n	80132e2 <__any_on+0x3a>
 8013300:	e7d9      	b.n	80132b6 <__any_on+0xe>
 8013302:	2000      	movs	r0, #0
 8013304:	e7ee      	b.n	80132e4 <__any_on+0x3c>
 8013306:	bf00      	nop

08013308 <__fpclassifyd>:
 8013308:	ea50 0201 	orrs.w	r2, r0, r1
 801330c:	460b      	mov	r3, r1
 801330e:	b410      	push	{r4}
 8013310:	d102      	bne.n	8013318 <__fpclassifyd+0x10>
 8013312:	2002      	movs	r0, #2
 8013314:	bc10      	pop	{r4}
 8013316:	4770      	bx	lr
 8013318:	f1d0 0001 	rsbs	r0, r0, #1
 801331c:	bf38      	it	cc
 801331e:	2000      	movcc	r0, #0
 8013320:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8013324:	bf14      	ite	ne
 8013326:	2200      	movne	r2, #0
 8013328:	f000 0201 	andeq.w	r2, r0, #1
 801332c:	2a00      	cmp	r2, #0
 801332e:	d1f0      	bne.n	8013312 <__fpclassifyd+0xa>
 8013330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013334:	f101 44fe 	add.w	r4, r1, #2130706432	; 0x7f000000
 8013338:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 801333c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013340:	4291      	cmp	r1, r2
 8013342:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
 8013346:	bf8c      	ite	hi
 8013348:	2100      	movhi	r1, #0
 801334a:	2101      	movls	r1, #1
 801334c:	4294      	cmp	r4, r2
 801334e:	bf8c      	ite	hi
 8013350:	460a      	movhi	r2, r1
 8013352:	f041 0201 	orrls.w	r2, r1, #1
 8013356:	b10a      	cbz	r2, 801335c <__fpclassifyd+0x54>
 8013358:	2004      	movs	r0, #4
 801335a:	e7db      	b.n	8013314 <__fpclassifyd+0xc>
 801335c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013360:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013364:	bf2c      	ite	cs
 8013366:	2200      	movcs	r2, #0
 8013368:	2201      	movcc	r2, #1
 801336a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801336e:	bf38      	it	cc
 8013370:	f042 0201 	orrcc.w	r2, r2, #1
 8013374:	b10a      	cbz	r2, 801337a <__fpclassifyd+0x72>
 8013376:	2003      	movs	r0, #3
 8013378:	e7cc      	b.n	8013314 <__fpclassifyd+0xc>
 801337a:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 801337e:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8013382:	bf14      	ite	ne
 8013384:	2100      	movne	r1, #0
 8013386:	2101      	moveq	r1, #1
 8013388:	4293      	cmp	r3, r2
 801338a:	bf14      	ite	ne
 801338c:	460b      	movne	r3, r1
 801338e:	f041 0301 	orreq.w	r3, r1, #1
 8013392:	4018      	ands	r0, r3
 8013394:	e7be      	b.n	8013314 <__fpclassifyd+0xc>
 8013396:	bf00      	nop

08013398 <strcmp>:
 8013398:	ea80 0201 	eor.w	r2, r0, r1
 801339c:	f012 0f03 	tst.w	r2, #3
 80133a0:	d13a      	bne.n	8013418 <strcmp_unaligned>
 80133a2:	f010 0203 	ands.w	r2, r0, #3
 80133a6:	f020 0003 	bic.w	r0, r0, #3
 80133aa:	f021 0103 	bic.w	r1, r1, #3
 80133ae:	f850 cb04 	ldr.w	ip, [r0], #4
 80133b2:	bf08      	it	eq
 80133b4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80133b8:	d00d      	beq.n	80133d6 <strcmp+0x3e>
 80133ba:	f082 0203 	eor.w	r2, r2, #3
 80133be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80133c2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80133c6:	fa23 f202 	lsr.w	r2, r3, r2
 80133ca:	f851 3b04 	ldr.w	r3, [r1], #4
 80133ce:	ea4c 0c02 	orr.w	ip, ip, r2
 80133d2:	ea43 0302 	orr.w	r3, r3, r2
 80133d6:	bf00      	nop
 80133d8:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 80133dc:	459c      	cmp	ip, r3
 80133de:	bf01      	itttt	eq
 80133e0:	ea22 020c 	biceq.w	r2, r2, ip
 80133e4:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 80133e8:	f850 cb04 	ldreq.w	ip, [r0], #4
 80133ec:	f851 3b04 	ldreq.w	r3, [r1], #4
 80133f0:	d0f2      	beq.n	80133d8 <strcmp+0x40>
 80133f2:	ea4f 600c 	mov.w	r0, ip, lsl #24
 80133f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80133fa:	2801      	cmp	r0, #1
 80133fc:	bf28      	it	cs
 80133fe:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8013402:	bf08      	it	eq
 8013404:	0a1b      	lsreq	r3, r3, #8
 8013406:	d0f4      	beq.n	80133f2 <strcmp+0x5a>
 8013408:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801340c:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8013410:	eba0 0003 	sub.w	r0, r0, r3
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop

08013418 <strcmp_unaligned>:
 8013418:	f010 0f03 	tst.w	r0, #3
 801341c:	d00a      	beq.n	8013434 <strcmp_unaligned+0x1c>
 801341e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013426:	2a01      	cmp	r2, #1
 8013428:	bf28      	it	cs
 801342a:	429a      	cmpcs	r2, r3
 801342c:	d0f4      	beq.n	8013418 <strcmp_unaligned>
 801342e:	eba2 0003 	sub.w	r0, r2, r3
 8013432:	4770      	bx	lr
 8013434:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8013438:	f84d 4d04 	str.w	r4, [sp, #-4]!
 801343c:	f04f 0201 	mov.w	r2, #1
 8013440:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8013444:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8013448:	f001 0c03 	and.w	ip, r1, #3
 801344c:	f021 0103 	bic.w	r1, r1, #3
 8013450:	f850 4b04 	ldr.w	r4, [r0], #4
 8013454:	f851 5b04 	ldr.w	r5, [r1], #4
 8013458:	f1bc 0f02 	cmp.w	ip, #2
 801345c:	d026      	beq.n	80134ac <strcmp_unaligned+0x94>
 801345e:	d84b      	bhi.n	80134f8 <strcmp_unaligned+0xe0>
 8013460:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8013464:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8013468:	eba4 0302 	sub.w	r3, r4, r2
 801346c:	ea23 0304 	bic.w	r3, r3, r4
 8013470:	d10d      	bne.n	801348e <strcmp_unaligned+0x76>
 8013472:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8013476:	bf08      	it	eq
 8013478:	f851 5b04 	ldreq.w	r5, [r1], #4
 801347c:	d10a      	bne.n	8013494 <strcmp_unaligned+0x7c>
 801347e:	ea8c 0c04 	eor.w	ip, ip, r4
 8013482:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8013486:	d10c      	bne.n	80134a2 <strcmp_unaligned+0x8a>
 8013488:	f850 4b04 	ldr.w	r4, [r0], #4
 801348c:	e7e8      	b.n	8013460 <strcmp_unaligned+0x48>
 801348e:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8013492:	e05c      	b.n	801354e <strcmp_unaligned+0x136>
 8013494:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8013498:	d152      	bne.n	8013540 <strcmp_unaligned+0x128>
 801349a:	780d      	ldrb	r5, [r1, #0]
 801349c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80134a0:	e055      	b.n	801354e <strcmp_unaligned+0x136>
 80134a2:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80134a6:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 80134aa:	e050      	b.n	801354e <strcmp_unaligned+0x136>
 80134ac:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 80134b0:	eba4 0302 	sub.w	r3, r4, r2
 80134b4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80134b8:	ea23 0304 	bic.w	r3, r3, r4
 80134bc:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 80134c0:	d117      	bne.n	80134f2 <strcmp_unaligned+0xda>
 80134c2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80134c6:	bf08      	it	eq
 80134c8:	f851 5b04 	ldreq.w	r5, [r1], #4
 80134cc:	d107      	bne.n	80134de <strcmp_unaligned+0xc6>
 80134ce:	ea8c 0c04 	eor.w	ip, ip, r4
 80134d2:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 80134d6:	d108      	bne.n	80134ea <strcmp_unaligned+0xd2>
 80134d8:	f850 4b04 	ldr.w	r4, [r0], #4
 80134dc:	e7e6      	b.n	80134ac <strcmp_unaligned+0x94>
 80134de:	041b      	lsls	r3, r3, #16
 80134e0:	d12e      	bne.n	8013540 <strcmp_unaligned+0x128>
 80134e2:	880d      	ldrh	r5, [r1, #0]
 80134e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80134e8:	e031      	b.n	801354e <strcmp_unaligned+0x136>
 80134ea:	ea4f 4505 	mov.w	r5, r5, lsl #16
 80134ee:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80134f2:	ea4f 4515 	mov.w	r5, r5, lsr #16
 80134f6:	e02a      	b.n	801354e <strcmp_unaligned+0x136>
 80134f8:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 80134fc:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8013500:	eba4 0302 	sub.w	r3, r4, r2
 8013504:	ea23 0304 	bic.w	r3, r3, r4
 8013508:	d10d      	bne.n	8013526 <strcmp_unaligned+0x10e>
 801350a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 801350e:	bf08      	it	eq
 8013510:	f851 5b04 	ldreq.w	r5, [r1], #4
 8013514:	d10a      	bne.n	801352c <strcmp_unaligned+0x114>
 8013516:	ea8c 0c04 	eor.w	ip, ip, r4
 801351a:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 801351e:	d10a      	bne.n	8013536 <strcmp_unaligned+0x11e>
 8013520:	f850 4b04 	ldr.w	r4, [r0], #4
 8013524:	e7e8      	b.n	80134f8 <strcmp_unaligned+0xe0>
 8013526:	ea4f 6515 	mov.w	r5, r5, lsr #24
 801352a:	e010      	b.n	801354e <strcmp_unaligned+0x136>
 801352c:	f014 0fff 	tst.w	r4, #255	; 0xff
 8013530:	d006      	beq.n	8013540 <strcmp_unaligned+0x128>
 8013532:	f851 5b04 	ldr.w	r5, [r1], #4
 8013536:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801353a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 801353e:	e006      	b.n	801354e <strcmp_unaligned+0x136>
 8013540:	f04f 0000 	mov.w	r0, #0
 8013544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013548:	f85d 5b04 	ldr.w	r5, [sp], #4
 801354c:	4770      	bx	lr
 801354e:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8013552:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8013556:	2801      	cmp	r0, #1
 8013558:	bf28      	it	cs
 801355a:	4290      	cmpcs	r0, r2
 801355c:	bf04      	itt	eq
 801355e:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8013562:	0a2d      	lsreq	r5, r5, #8
 8013564:	d0f3      	beq.n	801354e <strcmp_unaligned+0x136>
 8013566:	eba2 0000 	sub.w	r0, r2, r0
 801356a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801356e:	f85d 5b04 	ldr.w	r5, [sp], #4
 8013572:	4770      	bx	lr

08013574 <strlen>:
 8013574:	f020 0103 	bic.w	r1, r0, #3
 8013578:	f010 0003 	ands.w	r0, r0, #3
 801357c:	f1c0 0000 	rsb	r0, r0, #0
 8013580:	f851 3b04 	ldr.w	r3, [r1], #4
 8013584:	f100 0c04 	add.w	ip, r0, #4
 8013588:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801358c:	f06f 0200 	mvn.w	r2, #0
 8013590:	bf1c      	itt	ne
 8013592:	fa22 f20c 	lsrne.w	r2, r2, ip
 8013596:	4313      	orrne	r3, r2
 8013598:	f04f 0c01 	mov.w	ip, #1
 801359c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80135a0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80135a4:	eba3 020c 	sub.w	r2, r3, ip
 80135a8:	ea22 0203 	bic.w	r2, r2, r3
 80135ac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80135b0:	bf04      	itt	eq
 80135b2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80135b6:	3004      	addeq	r0, #4
 80135b8:	d0f4      	beq.n	80135a4 <strlen+0x30>
 80135ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80135be:	bf1f      	itttt	ne
 80135c0:	3001      	addne	r0, #1
 80135c2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80135c6:	3001      	addne	r0, #1
 80135c8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80135cc:	bf18      	it	ne
 80135ce:	3001      	addne	r0, #1
 80135d0:	4770      	bx	lr
 80135d2:	bf00      	nop

080135d4 <__ssprint_r>:
 80135d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d8:	b085      	sub	sp, #20
 80135da:	6894      	ldr	r4, [r2, #8]
 80135dc:	4691      	mov	r9, r2
 80135de:	9003      	str	r0, [sp, #12]
 80135e0:	460d      	mov	r5, r1
 80135e2:	6817      	ldr	r7, [r2, #0]
 80135e4:	2c00      	cmp	r4, #0
 80135e6:	d07a      	beq.n	80136de <__ssprint_r+0x10a>
 80135e8:	f04f 0a00 	mov.w	sl, #0
 80135ec:	6808      	ldr	r0, [r1, #0]
 80135ee:	688b      	ldr	r3, [r1, #8]
 80135f0:	4654      	mov	r4, sl
 80135f2:	2c00      	cmp	r4, #0
 80135f4:	d054      	beq.n	80136a0 <__ssprint_r+0xcc>
 80135f6:	429c      	cmp	r4, r3
 80135f8:	461e      	mov	r6, r3
 80135fa:	4698      	mov	r8, r3
 80135fc:	bf3c      	itt	cc
 80135fe:	4626      	movcc	r6, r4
 8013600:	46a0      	movcc	r8, r4
 8013602:	d33d      	bcc.n	8013680 <__ssprint_r+0xac>
 8013604:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 8013608:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 801360c:	d038      	beq.n	8013680 <__ssprint_r+0xac>
 801360e:	696b      	ldr	r3, [r5, #20]
 8013610:	1c62      	adds	r2, r4, #1
 8013612:	6929      	ldr	r1, [r5, #16]
 8013614:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8013618:	1a43      	subs	r3, r0, r1
 801361a:	18d0      	adds	r0, r2, r3
 801361c:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 8013620:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 8013624:	4583      	cmp	fp, r0
 8013626:	465a      	mov	r2, fp
 8013628:	bf38      	it	cc
 801362a:	4683      	movcc	fp, r0
 801362c:	9803      	ldr	r0, [sp, #12]
 801362e:	bf38      	it	cc
 8013630:	465a      	movcc	r2, fp
 8013632:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8013636:	d038      	beq.n	80136aa <__ssprint_r+0xd6>
 8013638:	4611      	mov	r1, r2
 801363a:	9301      	str	r3, [sp, #4]
 801363c:	f7fe fec4 	bl	80123c8 <_malloc_r>
 8013640:	9b01      	ldr	r3, [sp, #4]
 8013642:	4684      	mov	ip, r0
 8013644:	2800      	cmp	r0, #0
 8013646:	d03b      	beq.n	80136c0 <__ssprint_r+0xec>
 8013648:	6929      	ldr	r1, [r5, #16]
 801364a:	461a      	mov	r2, r3
 801364c:	9301      	str	r3, [sp, #4]
 801364e:	f8cd c008 	str.w	ip, [sp, #8]
 8013652:	f7ff f9af 	bl	80129b4 <memcpy>
 8013656:	89aa      	ldrh	r2, [r5, #12]
 8013658:	9b01      	ldr	r3, [sp, #4]
 801365a:	f8dd c008 	ldr.w	ip, [sp, #8]
 801365e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8013662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013666:	81aa      	strh	r2, [r5, #12]
 8013668:	4626      	mov	r6, r4
 801366a:	46a0      	mov	r8, r4
 801366c:	eb0c 0003 	add.w	r0, ip, r3
 8013670:	f8c5 c010 	str.w	ip, [r5, #16]
 8013674:	ebc3 030b 	rsb	r3, r3, fp
 8013678:	6028      	str	r0, [r5, #0]
 801367a:	f8c5 b014 	str.w	fp, [r5, #20]
 801367e:	60ab      	str	r3, [r5, #8]
 8013680:	4642      	mov	r2, r8
 8013682:	4651      	mov	r1, sl
 8013684:	f000 fde8 	bl	8014258 <memmove>
 8013688:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801368c:	68ab      	ldr	r3, [r5, #8]
 801368e:	6828      	ldr	r0, [r5, #0]
 8013690:	1b14      	subs	r4, r2, r4
 8013692:	1b9b      	subs	r3, r3, r6
 8013694:	60ab      	str	r3, [r5, #8]
 8013696:	4440      	add	r0, r8
 8013698:	6028      	str	r0, [r5, #0]
 801369a:	f8c9 4008 	str.w	r4, [r9, #8]
 801369e:	b1f4      	cbz	r4, 80136de <__ssprint_r+0x10a>
 80136a0:	f8d7 a000 	ldr.w	sl, [r7]
 80136a4:	687c      	ldr	r4, [r7, #4]
 80136a6:	3708      	adds	r7, #8
 80136a8:	e7a3      	b.n	80135f2 <__ssprint_r+0x1e>
 80136aa:	9301      	str	r3, [sp, #4]
 80136ac:	f000 fe38 	bl	8014320 <_realloc_r>
 80136b0:	9b01      	ldr	r3, [sp, #4]
 80136b2:	4684      	mov	ip, r0
 80136b4:	2800      	cmp	r0, #0
 80136b6:	d1d7      	bne.n	8013668 <__ssprint_r+0x94>
 80136b8:	6929      	ldr	r1, [r5, #16]
 80136ba:	9803      	ldr	r0, [sp, #12]
 80136bc:	f000 fd0a 	bl	80140d4 <_free_r>
 80136c0:	9a03      	ldr	r2, [sp, #12]
 80136c2:	230c      	movs	r3, #12
 80136c4:	f04f 30ff 	mov.w	r0, #4294967295
 80136c8:	6013      	str	r3, [r2, #0]
 80136ca:	2300      	movs	r3, #0
 80136cc:	89aa      	ldrh	r2, [r5, #12]
 80136ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80136d2:	81aa      	strh	r2, [r5, #12]
 80136d4:	f8c9 3008 	str.w	r3, [r9, #8]
 80136d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80136dc:	e002      	b.n	80136e4 <__ssprint_r+0x110>
 80136de:	4620      	mov	r0, r4
 80136e0:	f8c9 4004 	str.w	r4, [r9, #4]
 80136e4:	b005      	add	sp, #20
 80136e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ea:	bf00      	nop

080136ec <_svfiprintf_r>:
 80136ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f0:	b0af      	sub	sp, #188	; 0xbc
 80136f2:	468a      	mov	sl, r1
 80136f4:	9307      	str	r3, [sp, #28]
 80136f6:	898b      	ldrh	r3, [r1, #12]
 80136f8:	9003      	str	r0, [sp, #12]
 80136fa:	061b      	lsls	r3, r3, #24
 80136fc:	d503      	bpl.n	8013706 <_svfiprintf_r+0x1a>
 80136fe:	690b      	ldr	r3, [r1, #16]
 8013700:	2b00      	cmp	r3, #0
 8013702:	f000 8435 	beq.w	8013f70 <_svfiprintf_r+0x884>
 8013706:	4617      	mov	r7, r2
 8013708:	f10d 01a7 	add.w	r1, sp, #167	; 0xa7
 801370c:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8013710:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 8013714:	2300      	movs	r3, #0
 8013716:	9102      	str	r1, [sp, #8]
 8013718:	ac10      	add	r4, sp, #64	; 0x40
 801371a:	ebc1 0108 	rsb	r1, r1, r8
 801371e:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
 8013722:	930d      	str	r3, [sp, #52]	; 0x34
 8013724:	9306      	str	r3, [sp, #24]
 8013726:	910f      	str	r1, [sp, #60]	; 0x3c
 8013728:	900e      	str	r0, [sp, #56]	; 0x38
 801372a:	942a      	str	r4, [sp, #168]	; 0xa8
 801372c:	932c      	str	r3, [sp, #176]	; 0xb0
 801372e:	932b      	str	r3, [sp, #172]	; 0xac
 8013730:	783b      	ldrb	r3, [r7, #0]
 8013732:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8013736:	bf18      	it	ne
 8013738:	2201      	movne	r2, #1
 801373a:	2b00      	cmp	r3, #0
 801373c:	bf0c      	ite	eq
 801373e:	2300      	moveq	r3, #0
 8013740:	f002 0301 	andne.w	r3, r2, #1
 8013744:	2b00      	cmp	r3, #0
 8013746:	f000 82ef 	beq.w	8013d28 <_svfiprintf_r+0x63c>
 801374a:	463a      	mov	r2, r7
 801374c:	463d      	mov	r5, r7
 801374e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013752:	3501      	adds	r5, #1
 8013754:	1c19      	adds	r1, r3, #0
 8013756:	bf18      	it	ne
 8013758:	2101      	movne	r1, #1
 801375a:	2b25      	cmp	r3, #37	; 0x25
 801375c:	bf0c      	ite	eq
 801375e:	2300      	moveq	r3, #0
 8013760:	f001 0301 	andne.w	r3, r1, #1
 8013764:	2b00      	cmp	r3, #0
 8013766:	d1f2      	bne.n	801374e <_svfiprintf_r+0x62>
 8013768:	1bee      	subs	r6, r5, r7
 801376a:	d00e      	beq.n	801378a <_svfiprintf_r+0x9e>
 801376c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801376e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013770:	3301      	adds	r3, #1
 8013772:	6027      	str	r7, [r4, #0]
 8013774:	2b07      	cmp	r3, #7
 8013776:	4432      	add	r2, r6
 8013778:	6066      	str	r6, [r4, #4]
 801377a:	932b      	str	r3, [sp, #172]	; 0xac
 801377c:	922c      	str	r2, [sp, #176]	; 0xb0
 801377e:	f300 8330 	bgt.w	8013de2 <_svfiprintf_r+0x6f6>
 8013782:	3408      	adds	r4, #8
 8013784:	9b06      	ldr	r3, [sp, #24]
 8013786:	199b      	adds	r3, r3, r6
 8013788:	9306      	str	r3, [sp, #24]
 801378a:	782b      	ldrb	r3, [r5, #0]
 801378c:	2b00      	cmp	r3, #0
 801378e:	f000 82cd 	beq.w	8013d2c <_svfiprintf_r+0x640>
 8013792:	2300      	movs	r3, #0
 8013794:	1c6f      	adds	r7, r5, #1
 8013796:	461a      	mov	r2, r3
 8013798:	f04f 35ff 	mov.w	r5, #4294967295
 801379c:	469b      	mov	fp, r3
 801379e:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 80137a2:	9308      	str	r3, [sp, #32]
 80137a4:	f817 3b01 	ldrb.w	r3, [r7], #1
 80137a8:	f1a3 0120 	sub.w	r1, r3, #32
 80137ac:	2958      	cmp	r1, #88	; 0x58
 80137ae:	f200 81a1 	bhi.w	8013af4 <_svfiprintf_r+0x408>
 80137b2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80137b6:	019b      	.short	0x019b
 80137b8:	019f019f 	.word	0x019f019f
 80137bc:	019f01fe 	.word	0x019f01fe
 80137c0:	019f019f 	.word	0x019f019f
 80137c4:	019f019f 	.word	0x019f019f
 80137c8:	00f0019f 	.word	0x00f0019f
 80137cc:	019f01fc 	.word	0x019f01fc
 80137d0:	01e100fc 	.word	0x01e100fc
 80137d4:	01de019f 	.word	0x01de019f
 80137d8:	01cd01cd 	.word	0x01cd01cd
 80137dc:	01cd01cd 	.word	0x01cd01cd
 80137e0:	01cd01cd 	.word	0x01cd01cd
 80137e4:	01cd01cd 	.word	0x01cd01cd
 80137e8:	019f01cd 	.word	0x019f01cd
 80137ec:	019f019f 	.word	0x019f019f
 80137f0:	019f019f 	.word	0x019f019f
 80137f4:	019f019f 	.word	0x019f019f
 80137f8:	019f019f 	.word	0x019f019f
 80137fc:	005c019f 	.word	0x005c019f
 8013800:	019f019f 	.word	0x019f019f
 8013804:	019f019f 	.word	0x019f019f
 8013808:	019f019f 	.word	0x019f019f
 801380c:	019f019f 	.word	0x019f019f
 8013810:	019f019f 	.word	0x019f019f
 8013814:	019f009c 	.word	0x019f009c
 8013818:	019f019f 	.word	0x019f019f
 801381c:	019f019f 	.word	0x019f019f
 8013820:	019f00dd 	.word	0x019f00dd
 8013824:	0152019f 	.word	0x0152019f
 8013828:	019f019f 	.word	0x019f019f
 801382c:	019f019f 	.word	0x019f019f
 8013830:	019f019f 	.word	0x019f019f
 8013834:	019f019f 	.word	0x019f019f
 8013838:	019f019f 	.word	0x019f019f
 801383c:	005e0102 	.word	0x005e0102
 8013840:	019f019f 	.word	0x019f019f
 8013844:	00ff019f 	.word	0x00ff019f
 8013848:	019f005e 	.word	0x019f005e
 801384c:	0059019f 	.word	0x0059019f
 8013850:	0172019f 	.word	0x0172019f
 8013854:	0188009e 	.word	0x0188009e
 8013858:	019f0059 	.word	0x019f0059
 801385c:	019f01af 	.word	0x019f01af
 8013860:	019f00df 	.word	0x019f00df
 8013864:	0183019f 	.word	0x0183019f
 8013868:	f04b 0b10 	orr.w	fp, fp, #16
 801386c:	e79a      	b.n	80137a4 <_svfiprintf_r+0xb8>
 801386e:	f04b 0b10 	orr.w	fp, fp, #16
 8013872:	f01b 0f10 	tst.w	fp, #16
 8013876:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 801387a:	9b07      	ldr	r3, [sp, #28]
 801387c:	d103      	bne.n	8013886 <_svfiprintf_r+0x19a>
 801387e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8013882:	f040 8339 	bne.w	8013ef8 <_svfiprintf_r+0x80c>
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	3304      	adds	r3, #4
 801388a:	9307      	str	r3, [sp, #28]
 801388c:	2a00      	cmp	r2, #0
 801388e:	f2c0 833a 	blt.w	8013f06 <_svfiprintf_r+0x81a>
 8013892:	bf0c      	ite	eq
 8013894:	2100      	moveq	r1, #0
 8013896:	2101      	movne	r1, #1
 8013898:	2301      	movs	r3, #1
 801389a:	2d00      	cmp	r5, #0
 801389c:	bfa8      	it	ge
 801389e:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80138a2:	2d00      	cmp	r5, #0
 80138a4:	bf18      	it	ne
 80138a6:	f041 0101 	orrne.w	r1, r1, #1
 80138aa:	2900      	cmp	r1, #0
 80138ac:	d13b      	bne.n	8013926 <_svfiprintf_r+0x23a>
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	f040 8293 	bne.w	8013dda <_svfiprintf_r+0x6ee>
 80138b4:	f01b 0f01 	tst.w	fp, #1
 80138b8:	bf04      	itt	eq
 80138ba:	9305      	streq	r3, [sp, #20]
 80138bc:	f8cd 8028 	streq.w	r8, [sp, #40]	; 0x28
 80138c0:	d007      	beq.n	80138d2 <_svfiprintf_r+0x1e6>
 80138c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138c4:	9305      	str	r3, [sp, #20]
 80138c6:	2330      	movs	r3, #48	; 0x30
 80138c8:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
 80138cc:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 80138d0:	930a      	str	r3, [sp, #40]	; 0x28
 80138d2:	9509      	str	r5, [sp, #36]	; 0x24
 80138d4:	9805      	ldr	r0, [sp, #20]
 80138d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138d8:	f89d 30b7 	ldrb.w	r3, [sp, #183]	; 0xb7
 80138dc:	4288      	cmp	r0, r1
 80138de:	bfb8      	it	lt
 80138e0:	4608      	movlt	r0, r1
 80138e2:	9004      	str	r0, [sp, #16]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d078      	beq.n	80139da <_svfiprintf_r+0x2ee>
 80138e8:	3001      	adds	r0, #1
 80138ea:	9004      	str	r0, [sp, #16]
 80138ec:	e075      	b.n	80139da <_svfiprintf_r+0x2ee>
 80138ee:	f04b 0b10 	orr.w	fp, fp, #16
 80138f2:	f01b 0310 	ands.w	r3, fp, #16
 80138f6:	f000 82c9 	beq.w	8013e8c <_svfiprintf_r+0x7a0>
 80138fa:	9b07      	ldr	r3, [sp, #28]
 80138fc:	9807      	ldr	r0, [sp, #28]
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	2300      	movs	r3, #0
 8013902:	3004      	adds	r0, #4
 8013904:	9007      	str	r0, [sp, #28]
 8013906:	1ad1      	subs	r1, r2, r3
 8013908:	bf18      	it	ne
 801390a:	2101      	movne	r1, #1
 801390c:	2000      	movs	r0, #0
 801390e:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 8013912:	2d00      	cmp	r5, #0
 8013914:	bfa8      	it	ge
 8013916:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 801391a:	2d00      	cmp	r5, #0
 801391c:	bf18      	it	ne
 801391e:	f041 0101 	orrne.w	r1, r1, #1
 8013922:	2900      	cmp	r1, #0
 8013924:	d0c3      	beq.n	80138ae <_svfiprintf_r+0x1c2>
 8013926:	2b01      	cmp	r3, #1
 8013928:	f000 8285 	beq.w	8013e36 <_svfiprintf_r+0x74a>
 801392c:	2b02      	cmp	r3, #2
 801392e:	bf18      	it	ne
 8013930:	4643      	movne	r3, r8
 8013932:	d101      	bne.n	8013938 <_svfiprintf_r+0x24c>
 8013934:	e298      	b.n	8013e68 <_svfiprintf_r+0x77c>
 8013936:	4603      	mov	r3, r0
 8013938:	f002 0107 	and.w	r1, r2, #7
 801393c:	1e58      	subs	r0, r3, #1
 801393e:	3130      	adds	r1, #48	; 0x30
 8013940:	08d2      	lsrs	r2, r2, #3
 8013942:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013946:	d1f6      	bne.n	8013936 <_svfiprintf_r+0x24a>
 8013948:	f01b 0f01 	tst.w	fp, #1
 801394c:	900a      	str	r0, [sp, #40]	; 0x28
 801394e:	bf04      	itt	eq
 8013950:	ebc0 0308 	rsbeq	r3, r0, r8
 8013954:	9305      	streq	r3, [sp, #20]
 8013956:	d0bc      	beq.n	80138d2 <_svfiprintf_r+0x1e6>
 8013958:	2930      	cmp	r1, #48	; 0x30
 801395a:	f000 831b 	beq.w	8013f94 <_svfiprintf_r+0x8a8>
 801395e:	1e98      	subs	r0, r3, #2
 8013960:	2230      	movs	r2, #48	; 0x30
 8013962:	ebc0 0108 	rsb	r1, r0, r8
 8013966:	900a      	str	r0, [sp, #40]	; 0x28
 8013968:	9105      	str	r1, [sp, #20]
 801396a:	f803 2c02 	strb.w	r2, [r3, #-2]
 801396e:	e7b0      	b.n	80138d2 <_svfiprintf_r+0x1e6>
 8013970:	f04b 0b10 	orr.w	fp, fp, #16
 8013974:	f01b 0f10 	tst.w	fp, #16
 8013978:	9b07      	ldr	r3, [sp, #28]
 801397a:	d103      	bne.n	8013984 <_svfiprintf_r+0x298>
 801397c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8013980:	f040 82da 	bne.w	8013f38 <_svfiprintf_r+0x84c>
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	2301      	movs	r3, #1
 8013988:	9807      	ldr	r0, [sp, #28]
 801398a:	3004      	adds	r0, #4
 801398c:	1c11      	adds	r1, r2, #0
 801398e:	9007      	str	r0, [sp, #28]
 8013990:	bf18      	it	ne
 8013992:	2101      	movne	r1, #1
 8013994:	e7ba      	b.n	801390c <_svfiprintf_r+0x220>
 8013996:	9b07      	ldr	r3, [sp, #28]
 8013998:	9807      	ldr	r0, [sp, #28]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	9308      	str	r3, [sp, #32]
 801399e:	1d03      	adds	r3, r0, #4
 80139a0:	9908      	ldr	r1, [sp, #32]
 80139a2:	2900      	cmp	r1, #0
 80139a4:	f280 8293 	bge.w	8013ece <_svfiprintf_r+0x7e2>
 80139a8:	4249      	negs	r1, r1
 80139aa:	9307      	str	r3, [sp, #28]
 80139ac:	9108      	str	r1, [sp, #32]
 80139ae:	f04b 0b04 	orr.w	fp, fp, #4
 80139b2:	e6f7      	b.n	80137a4 <_svfiprintf_r+0xb8>
 80139b4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 80139b8:	e6f4      	b.n	80137a4 <_svfiprintf_r+0xb8>
 80139ba:	9b07      	ldr	r3, [sp, #28]
 80139bc:	2001      	movs	r0, #1
 80139be:	2200      	movs	r2, #0
 80139c0:	9004      	str	r0, [sp, #16]
 80139c2:	1d19      	adds	r1, r3, #4
 80139c4:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	aa20      	add	r2, sp, #128	; 0x80
 80139cc:	9107      	str	r1, [sp, #28]
 80139ce:	9005      	str	r0, [sp, #20]
 80139d0:	920a      	str	r2, [sp, #40]	; 0x28
 80139d2:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80139d6:	2300      	movs	r3, #0
 80139d8:	9309      	str	r3, [sp, #36]	; 0x24
 80139da:	f01b 0302 	ands.w	r3, fp, #2
 80139de:	930b      	str	r3, [sp, #44]	; 0x2c
 80139e0:	d002      	beq.n	80139e8 <_svfiprintf_r+0x2fc>
 80139e2:	9b04      	ldr	r3, [sp, #16]
 80139e4:	3302      	adds	r3, #2
 80139e6:	9304      	str	r3, [sp, #16]
 80139e8:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80139ec:	930c      	str	r3, [sp, #48]	; 0x30
 80139ee:	f040 80e3 	bne.w	8013bb8 <_svfiprintf_r+0x4cc>
 80139f2:	9b08      	ldr	r3, [sp, #32]
 80139f4:	9804      	ldr	r0, [sp, #16]
 80139f6:	1a1d      	subs	r5, r3, r0
 80139f8:	2d00      	cmp	r5, #0
 80139fa:	f340 80dd 	ble.w	8013bb8 <_svfiprintf_r+0x4cc>
 80139fe:	2d10      	cmp	r5, #16
 8013a00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013a02:	f340 82c4 	ble.w	8013f8e <_svfiprintf_r+0x8a2>
 8013a06:	f04f 0910 	mov.w	r9, #16
 8013a0a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013a0c:	4ea4      	ldr	r6, [pc, #656]	; (8013ca0 <_svfiprintf_r+0x5b4>)
 8013a0e:	e002      	b.n	8013a16 <_svfiprintf_r+0x32a>
 8013a10:	3d10      	subs	r5, #16
 8013a12:	2d10      	cmp	r5, #16
 8013a14:	dd16      	ble.n	8013a44 <_svfiprintf_r+0x358>
 8013a16:	3301      	adds	r3, #1
 8013a18:	3210      	adds	r2, #16
 8013a1a:	e884 0240 	stmia.w	r4, {r6, r9}
 8013a1e:	3408      	adds	r4, #8
 8013a20:	2b07      	cmp	r3, #7
 8013a22:	932b      	str	r3, [sp, #172]	; 0xac
 8013a24:	922c      	str	r2, [sp, #176]	; 0xb0
 8013a26:	ddf3      	ble.n	8013a10 <_svfiprintf_r+0x324>
 8013a28:	9803      	ldr	r0, [sp, #12]
 8013a2a:	4651      	mov	r1, sl
 8013a2c:	4642      	mov	r2, r8
 8013a2e:	ac10      	add	r4, sp, #64	; 0x40
 8013a30:	f7ff fdd0 	bl	80135d4 <__ssprint_r>
 8013a34:	2800      	cmp	r0, #0
 8013a36:	f040 8180 	bne.w	8013d3a <_svfiprintf_r+0x64e>
 8013a3a:	3d10      	subs	r5, #16
 8013a3c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013a3e:	2d10      	cmp	r5, #16
 8013a40:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013a42:	dce8      	bgt.n	8013a16 <_svfiprintf_r+0x32a>
 8013a44:	3301      	adds	r3, #1
 8013a46:	1952      	adds	r2, r2, r5
 8013a48:	2b07      	cmp	r3, #7
 8013a4a:	6026      	str	r6, [r4, #0]
 8013a4c:	6065      	str	r5, [r4, #4]
 8013a4e:	932b      	str	r3, [sp, #172]	; 0xac
 8013a50:	922c      	str	r2, [sp, #176]	; 0xb0
 8013a52:	f300 8226 	bgt.w	8013ea2 <_svfiprintf_r+0x7b6>
 8013a56:	3408      	adds	r4, #8
 8013a58:	e0b0      	b.n	8013bbc <_svfiprintf_r+0x4d0>
 8013a5a:	4992      	ldr	r1, [pc, #584]	; (8013ca4 <_svfiprintf_r+0x5b8>)
 8013a5c:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8013a60:	910d      	str	r1, [sp, #52]	; 0x34
 8013a62:	f01b 0f10 	tst.w	fp, #16
 8013a66:	d103      	bne.n	8013a70 <_svfiprintf_r+0x384>
 8013a68:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8013a6c:	f040 825f 	bne.w	8013f2e <_svfiprintf_r+0x842>
 8013a70:	9807      	ldr	r0, [sp, #28]
 8013a72:	6802      	ldr	r2, [r0, #0]
 8013a74:	3004      	adds	r0, #4
 8013a76:	9007      	str	r0, [sp, #28]
 8013a78:	1c11      	adds	r1, r2, #0
 8013a7a:	bf18      	it	ne
 8013a7c:	2101      	movne	r1, #1
 8013a7e:	ea1b 0f01 	tst.w	fp, r1
 8013a82:	f000 8201 	beq.w	8013e88 <_svfiprintf_r+0x79c>
 8013a86:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
 8013a8a:	f04b 0b02 	orr.w	fp, fp, #2
 8013a8e:	2330      	movs	r3, #48	; 0x30
 8013a90:	2101      	movs	r1, #1
 8013a92:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8013a96:	2302      	movs	r3, #2
 8013a98:	e738      	b.n	801390c <_svfiprintf_r+0x220>
 8013a9a:	f01b 0f10 	tst.w	fp, #16
 8013a9e:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8013aa2:	f040 823d 	bne.w	8013f20 <_svfiprintf_r+0x834>
 8013aa6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8013aaa:	f000 8259 	beq.w	8013f60 <_svfiprintf_r+0x874>
 8013aae:	9a07      	ldr	r2, [sp, #28]
 8013ab0:	9806      	ldr	r0, [sp, #24]
 8013ab2:	6813      	ldr	r3, [r2, #0]
 8013ab4:	3204      	adds	r2, #4
 8013ab6:	9207      	str	r2, [sp, #28]
 8013ab8:	8018      	strh	r0, [r3, #0]
 8013aba:	e639      	b.n	8013730 <_svfiprintf_r+0x44>
 8013abc:	497a      	ldr	r1, [pc, #488]	; (8013ca8 <_svfiprintf_r+0x5bc>)
 8013abe:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8013ac2:	910d      	str	r1, [sp, #52]	; 0x34
 8013ac4:	e7cd      	b.n	8013a62 <_svfiprintf_r+0x376>
 8013ac6:	9b07      	ldr	r3, [sp, #28]
 8013ac8:	f04b 0b02 	orr.w	fp, fp, #2
 8013acc:	4876      	ldr	r0, [pc, #472]	; (8013ca8 <_svfiprintf_r+0x5bc>)
 8013ace:	1d19      	adds	r1, r3, #4
 8013ad0:	9107      	str	r1, [sp, #28]
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	2178      	movs	r1, #120	; 0x78
 8013ad6:	2330      	movs	r3, #48	; 0x30
 8013ad8:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
 8013adc:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8013ae0:	2302      	movs	r3, #2
 8013ae2:	1c11      	adds	r1, r2, #0
 8013ae4:	900d      	str	r0, [sp, #52]	; 0x34
 8013ae6:	bf18      	it	ne
 8013ae8:	2101      	movne	r1, #1
 8013aea:	e70f      	b.n	801390c <_svfiprintf_r+0x220>
 8013aec:	2a00      	cmp	r2, #0
 8013aee:	bf08      	it	eq
 8013af0:	2220      	moveq	r2, #32
 8013af2:	e657      	b.n	80137a4 <_svfiprintf_r+0xb8>
 8013af4:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	f000 8117 	beq.w	8013d2c <_svfiprintf_r+0x640>
 8013afe:	2001      	movs	r0, #1
 8013b00:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8013b04:	9004      	str	r0, [sp, #16]
 8013b06:	2300      	movs	r3, #0
 8013b08:	9005      	str	r0, [sp, #20]
 8013b0a:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 8013b0e:	ab20      	add	r3, sp, #128	; 0x80
 8013b10:	930a      	str	r3, [sp, #40]	; 0x28
 8013b12:	e760      	b.n	80139d6 <_svfiprintf_r+0x2ea>
 8013b14:	9b07      	ldr	r3, [sp, #28]
 8013b16:	2600      	movs	r6, #0
 8013b18:	f88d 60b7 	strb.w	r6, [sp, #183]	; 0xb7
 8013b1c:	1d19      	adds	r1, r3, #4
 8013b1e:	9107      	str	r1, [sp, #28]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	930a      	str	r3, [sp, #40]	; 0x28
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	f000 823a 	beq.w	8013f9e <_svfiprintf_r+0x8b2>
 8013b2a:	2d00      	cmp	r5, #0
 8013b2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013b2e:	f2c0 8206 	blt.w	8013f3e <_svfiprintf_r+0x852>
 8013b32:	4631      	mov	r1, r6
 8013b34:	462a      	mov	r2, r5
 8013b36:	f7fe fef9 	bl	801292c <memchr>
 8013b3a:	2800      	cmp	r0, #0
 8013b3c:	f000 8239 	beq.w	8013fb2 <_svfiprintf_r+0x8c6>
 8013b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b42:	9609      	str	r6, [sp, #36]	; 0x24
 8013b44:	1ac0      	subs	r0, r0, r3
 8013b46:	9005      	str	r0, [sp, #20]
 8013b48:	42a8      	cmp	r0, r5
 8013b4a:	bfc8      	it	gt
 8013b4c:	9505      	strgt	r5, [sp, #20]
 8013b4e:	e6c1      	b.n	80138d4 <_svfiprintf_r+0x1e8>
 8013b50:	4638      	mov	r0, r7
 8013b52:	2100      	movs	r1, #0
 8013b54:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8013b58:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013b5c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8013b60:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8013b64:	4607      	mov	r7, r0
 8013b66:	2e09      	cmp	r6, #9
 8013b68:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013b6c:	d9f2      	bls.n	8013b54 <_svfiprintf_r+0x468>
 8013b6e:	9108      	str	r1, [sp, #32]
 8013b70:	e61a      	b.n	80137a8 <_svfiprintf_r+0xbc>
 8013b72:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8013b76:	e615      	b.n	80137a4 <_svfiprintf_r+0xb8>
 8013b78:	f817 3b01 	ldrb.w	r3, [r7], #1
 8013b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8013b7e:	f000 819c 	beq.w	8013eba <_svfiprintf_r+0x7ce>
 8013b82:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013b86:	2500      	movs	r5, #0
 8013b88:	2909      	cmp	r1, #9
 8013b8a:	f63f ae0d 	bhi.w	80137a8 <_svfiprintf_r+0xbc>
 8013b8e:	4638      	mov	r0, r7
 8013b90:	2500      	movs	r5, #0
 8013b92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013b96:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013b9a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8013b9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013ba2:	2909      	cmp	r1, #9
 8013ba4:	4607      	mov	r7, r0
 8013ba6:	d9f4      	bls.n	8013b92 <_svfiprintf_r+0x4a6>
 8013ba8:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8013bac:	e5fc      	b.n	80137a8 <_svfiprintf_r+0xbc>
 8013bae:	222b      	movs	r2, #43	; 0x2b
 8013bb0:	e5f8      	b.n	80137a4 <_svfiprintf_r+0xb8>
 8013bb2:	f04b 0b01 	orr.w	fp, fp, #1
 8013bb6:	e5f5      	b.n	80137a4 <_svfiprintf_r+0xb8>
 8013bb8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013bba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013bbc:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
 8013bc0:	b161      	cbz	r1, 8013bdc <_svfiprintf_r+0x4f0>
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	f10d 01b7 	add.w	r1, sp, #183	; 0xb7
 8013bc8:	6021      	str	r1, [r4, #0]
 8013bca:	2101      	movs	r1, #1
 8013bcc:	2b07      	cmp	r3, #7
 8013bce:	440a      	add	r2, r1
 8013bd0:	6061      	str	r1, [r4, #4]
 8013bd2:	932b      	str	r3, [sp, #172]	; 0xac
 8013bd4:	922c      	str	r2, [sp, #176]	; 0xb0
 8013bd6:	f300 8118 	bgt.w	8013e0a <_svfiprintf_r+0x71e>
 8013bda:	3408      	adds	r4, #8
 8013bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013bde:	b159      	cbz	r1, 8013bf8 <_svfiprintf_r+0x50c>
 8013be0:	3301      	adds	r3, #1
 8013be2:	a92d      	add	r1, sp, #180	; 0xb4
 8013be4:	6021      	str	r1, [r4, #0]
 8013be6:	2102      	movs	r1, #2
 8013be8:	2b07      	cmp	r3, #7
 8013bea:	440a      	add	r2, r1
 8013bec:	6061      	str	r1, [r4, #4]
 8013bee:	932b      	str	r3, [sp, #172]	; 0xac
 8013bf0:	922c      	str	r2, [sp, #176]	; 0xb0
 8013bf2:	f300 8115 	bgt.w	8013e20 <_svfiprintf_r+0x734>
 8013bf6:	3408      	adds	r4, #8
 8013bf8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013bfa:	2880      	cmp	r0, #128	; 0x80
 8013bfc:	f000 80aa 	beq.w	8013d54 <_svfiprintf_r+0x668>
 8013c00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c02:	9805      	ldr	r0, [sp, #20]
 8013c04:	1a0d      	subs	r5, r1, r0
 8013c06:	2d00      	cmp	r5, #0
 8013c08:	dd29      	ble.n	8013c5e <_svfiprintf_r+0x572>
 8013c0a:	2d10      	cmp	r5, #16
 8013c0c:	4e27      	ldr	r6, [pc, #156]	; (8013cac <_svfiprintf_r+0x5c0>)
 8013c0e:	bfc8      	it	gt
 8013c10:	f04f 0910 	movgt.w	r9, #16
 8013c14:	dc03      	bgt.n	8013c1e <_svfiprintf_r+0x532>
 8013c16:	e018      	b.n	8013c4a <_svfiprintf_r+0x55e>
 8013c18:	3d10      	subs	r5, #16
 8013c1a:	2d10      	cmp	r5, #16
 8013c1c:	dd15      	ble.n	8013c4a <_svfiprintf_r+0x55e>
 8013c1e:	3301      	adds	r3, #1
 8013c20:	3210      	adds	r2, #16
 8013c22:	e884 0240 	stmia.w	r4, {r6, r9}
 8013c26:	3408      	adds	r4, #8
 8013c28:	2b07      	cmp	r3, #7
 8013c2a:	932b      	str	r3, [sp, #172]	; 0xac
 8013c2c:	922c      	str	r2, [sp, #176]	; 0xb0
 8013c2e:	ddf3      	ble.n	8013c18 <_svfiprintf_r+0x52c>
 8013c30:	9803      	ldr	r0, [sp, #12]
 8013c32:	4651      	mov	r1, sl
 8013c34:	4642      	mov	r2, r8
 8013c36:	ac10      	add	r4, sp, #64	; 0x40
 8013c38:	f7ff fccc 	bl	80135d4 <__ssprint_r>
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	d17c      	bne.n	8013d3a <_svfiprintf_r+0x64e>
 8013c40:	3d10      	subs	r5, #16
 8013c42:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013c44:	2d10      	cmp	r5, #16
 8013c46:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013c48:	dce9      	bgt.n	8013c1e <_svfiprintf_r+0x532>
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	1952      	adds	r2, r2, r5
 8013c4e:	2b07      	cmp	r3, #7
 8013c50:	6026      	str	r6, [r4, #0]
 8013c52:	6065      	str	r5, [r4, #4]
 8013c54:	932b      	str	r3, [sp, #172]	; 0xac
 8013c56:	922c      	str	r2, [sp, #176]	; 0xb0
 8013c58:	f300 80cc 	bgt.w	8013df4 <_svfiprintf_r+0x708>
 8013c5c:	3408      	adds	r4, #8
 8013c5e:	3301      	adds	r3, #1
 8013c60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c62:	9805      	ldr	r0, [sp, #20]
 8013c64:	2b07      	cmp	r3, #7
 8013c66:	932b      	str	r3, [sp, #172]	; 0xac
 8013c68:	6021      	str	r1, [r4, #0]
 8013c6a:	4402      	add	r2, r0
 8013c6c:	6060      	str	r0, [r4, #4]
 8013c6e:	bfd8      	it	le
 8013c70:	f104 0108 	addle.w	r1, r4, #8
 8013c74:	922c      	str	r2, [sp, #176]	; 0xb0
 8013c76:	f300 809e 	bgt.w	8013db6 <_svfiprintf_r+0x6ca>
 8013c7a:	f01b 0f04 	tst.w	fp, #4
 8013c7e:	d039      	beq.n	8013cf4 <_svfiprintf_r+0x608>
 8013c80:	9b08      	ldr	r3, [sp, #32]
 8013c82:	9804      	ldr	r0, [sp, #16]
 8013c84:	1a1d      	subs	r5, r3, r0
 8013c86:	2d00      	cmp	r5, #0
 8013c88:	dd34      	ble.n	8013cf4 <_svfiprintf_r+0x608>
 8013c8a:	2d10      	cmp	r5, #16
 8013c8c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013c8e:	bfd8      	it	le
 8013c90:	4e03      	ldrle	r6, [pc, #12]	; (8013ca0 <_svfiprintf_r+0x5b4>)
 8013c92:	dd26      	ble.n	8013ce2 <_svfiprintf_r+0x5f6>
 8013c94:	2410      	movs	r4, #16
 8013c96:	4e02      	ldr	r6, [pc, #8]	; (8013ca0 <_svfiprintf_r+0x5b4>)
 8013c98:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013c9c:	e00b      	b.n	8013cb6 <_svfiprintf_r+0x5ca>
 8013c9e:	bf00      	nop
 8013ca0:	08014d00 	.word	0x08014d00
 8013ca4:	08014d34 	.word	0x08014d34
 8013ca8:	08014d48 	.word	0x08014d48
 8013cac:	08014d10 	.word	0x08014d10
 8013cb0:	3d10      	subs	r5, #16
 8013cb2:	2d10      	cmp	r5, #16
 8013cb4:	dd15      	ble.n	8013ce2 <_svfiprintf_r+0x5f6>
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	3210      	adds	r2, #16
 8013cba:	600e      	str	r6, [r1, #0]
 8013cbc:	604c      	str	r4, [r1, #4]
 8013cbe:	3108      	adds	r1, #8
 8013cc0:	2b07      	cmp	r3, #7
 8013cc2:	932b      	str	r3, [sp, #172]	; 0xac
 8013cc4:	922c      	str	r2, [sp, #176]	; 0xb0
 8013cc6:	ddf3      	ble.n	8013cb0 <_svfiprintf_r+0x5c4>
 8013cc8:	4648      	mov	r0, r9
 8013cca:	4651      	mov	r1, sl
 8013ccc:	4642      	mov	r2, r8
 8013cce:	f7ff fc81 	bl	80135d4 <__ssprint_r>
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	d131      	bne.n	8013d3a <_svfiprintf_r+0x64e>
 8013cd6:	3d10      	subs	r5, #16
 8013cd8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013cda:	2d10      	cmp	r5, #16
 8013cdc:	a910      	add	r1, sp, #64	; 0x40
 8013cde:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013ce0:	dce9      	bgt.n	8013cb6 <_svfiprintf_r+0x5ca>
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	18aa      	adds	r2, r5, r2
 8013ce6:	2b07      	cmp	r3, #7
 8013ce8:	600e      	str	r6, [r1, #0]
 8013cea:	604d      	str	r5, [r1, #4]
 8013cec:	932b      	str	r3, [sp, #172]	; 0xac
 8013cee:	922c      	str	r2, [sp, #176]	; 0xb0
 8013cf0:	f300 80ef 	bgt.w	8013ed2 <_svfiprintf_r+0x7e6>
 8013cf4:	9b06      	ldr	r3, [sp, #24]
 8013cf6:	9804      	ldr	r0, [sp, #16]
 8013cf8:	9908      	ldr	r1, [sp, #32]
 8013cfa:	4288      	cmp	r0, r1
 8013cfc:	bfac      	ite	ge
 8013cfe:	181b      	addge	r3, r3, r0
 8013d00:	185b      	addlt	r3, r3, r1
 8013d02:	9306      	str	r3, [sp, #24]
 8013d04:	2a00      	cmp	r2, #0
 8013d06:	d160      	bne.n	8013dca <_svfiprintf_r+0x6de>
 8013d08:	2300      	movs	r3, #0
 8013d0a:	932b      	str	r3, [sp, #172]	; 0xac
 8013d0c:	783b      	ldrb	r3, [r7, #0]
 8013d0e:	ac10      	add	r4, sp, #64	; 0x40
 8013d10:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
 8013d14:	bf18      	it	ne
 8013d16:	2201      	movne	r2, #1
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	bf0c      	ite	eq
 8013d1c:	2300      	moveq	r3, #0
 8013d1e:	f002 0301 	andne.w	r3, r2, #1
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	f47f ad11 	bne.w	801374a <_svfiprintf_r+0x5e>
 8013d28:	463d      	mov	r5, r7
 8013d2a:	e52e      	b.n	801378a <_svfiprintf_r+0x9e>
 8013d2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8013d2e:	b123      	cbz	r3, 8013d3a <_svfiprintf_r+0x64e>
 8013d30:	9803      	ldr	r0, [sp, #12]
 8013d32:	4651      	mov	r1, sl
 8013d34:	aa2a      	add	r2, sp, #168	; 0xa8
 8013d36:	f7ff fc4d 	bl	80135d4 <__ssprint_r>
 8013d3a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8013d3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013d42:	9b06      	ldr	r3, [sp, #24]
 8013d44:	bf18      	it	ne
 8013d46:	f04f 33ff 	movne.w	r3, #4294967295
 8013d4a:	9306      	str	r3, [sp, #24]
 8013d4c:	9806      	ldr	r0, [sp, #24]
 8013d4e:	b02f      	add	sp, #188	; 0xbc
 8013d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d54:	9908      	ldr	r1, [sp, #32]
 8013d56:	9804      	ldr	r0, [sp, #16]
 8013d58:	1a0d      	subs	r5, r1, r0
 8013d5a:	2d00      	cmp	r5, #0
 8013d5c:	f77f af50 	ble.w	8013c00 <_svfiprintf_r+0x514>
 8013d60:	2d10      	cmp	r5, #16
 8013d62:	4e99      	ldr	r6, [pc, #612]	; (8013fc8 <_svfiprintf_r+0x8dc>)
 8013d64:	bfc8      	it	gt
 8013d66:	f04f 0910 	movgt.w	r9, #16
 8013d6a:	dc03      	bgt.n	8013d74 <_svfiprintf_r+0x688>
 8013d6c:	e018      	b.n	8013da0 <_svfiprintf_r+0x6b4>
 8013d6e:	3d10      	subs	r5, #16
 8013d70:	2d10      	cmp	r5, #16
 8013d72:	dd15      	ble.n	8013da0 <_svfiprintf_r+0x6b4>
 8013d74:	3301      	adds	r3, #1
 8013d76:	3210      	adds	r2, #16
 8013d78:	e884 0240 	stmia.w	r4, {r6, r9}
 8013d7c:	3408      	adds	r4, #8
 8013d7e:	2b07      	cmp	r3, #7
 8013d80:	932b      	str	r3, [sp, #172]	; 0xac
 8013d82:	922c      	str	r2, [sp, #176]	; 0xb0
 8013d84:	ddf3      	ble.n	8013d6e <_svfiprintf_r+0x682>
 8013d86:	9803      	ldr	r0, [sp, #12]
 8013d88:	4651      	mov	r1, sl
 8013d8a:	4642      	mov	r2, r8
 8013d8c:	ac10      	add	r4, sp, #64	; 0x40
 8013d8e:	f7ff fc21 	bl	80135d4 <__ssprint_r>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	d1d1      	bne.n	8013d3a <_svfiprintf_r+0x64e>
 8013d96:	3d10      	subs	r5, #16
 8013d98:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013d9a:	2d10      	cmp	r5, #16
 8013d9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013d9e:	dce9      	bgt.n	8013d74 <_svfiprintf_r+0x688>
 8013da0:	3301      	adds	r3, #1
 8013da2:	1952      	adds	r2, r2, r5
 8013da4:	2b07      	cmp	r3, #7
 8013da6:	6026      	str	r6, [r4, #0]
 8013da8:	6065      	str	r5, [r4, #4]
 8013daa:	932b      	str	r3, [sp, #172]	; 0xac
 8013dac:	922c      	str	r2, [sp, #176]	; 0xb0
 8013dae:	f300 80cb 	bgt.w	8013f48 <_svfiprintf_r+0x85c>
 8013db2:	3408      	adds	r4, #8
 8013db4:	e724      	b.n	8013c00 <_svfiprintf_r+0x514>
 8013db6:	9803      	ldr	r0, [sp, #12]
 8013db8:	4651      	mov	r1, sl
 8013dba:	4642      	mov	r2, r8
 8013dbc:	f7ff fc0a 	bl	80135d4 <__ssprint_r>
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	d1ba      	bne.n	8013d3a <_svfiprintf_r+0x64e>
 8013dc4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013dc6:	a910      	add	r1, sp, #64	; 0x40
 8013dc8:	e757      	b.n	8013c7a <_svfiprintf_r+0x58e>
 8013dca:	9803      	ldr	r0, [sp, #12]
 8013dcc:	4651      	mov	r1, sl
 8013dce:	4642      	mov	r2, r8
 8013dd0:	f7ff fc00 	bl	80135d4 <__ssprint_r>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d097      	beq.n	8013d08 <_svfiprintf_r+0x61c>
 8013dd8:	e7af      	b.n	8013d3a <_svfiprintf_r+0x64e>
 8013dda:	9105      	str	r1, [sp, #20]
 8013ddc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013de0:	e577      	b.n	80138d2 <_svfiprintf_r+0x1e6>
 8013de2:	9803      	ldr	r0, [sp, #12]
 8013de4:	4651      	mov	r1, sl
 8013de6:	4642      	mov	r2, r8
 8013de8:	f7ff fbf4 	bl	80135d4 <__ssprint_r>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d1a4      	bne.n	8013d3a <_svfiprintf_r+0x64e>
 8013df0:	ac10      	add	r4, sp, #64	; 0x40
 8013df2:	e4c7      	b.n	8013784 <_svfiprintf_r+0x98>
 8013df4:	9803      	ldr	r0, [sp, #12]
 8013df6:	4651      	mov	r1, sl
 8013df8:	4642      	mov	r2, r8
 8013dfa:	f7ff fbeb 	bl	80135d4 <__ssprint_r>
 8013dfe:	2800      	cmp	r0, #0
 8013e00:	d19b      	bne.n	8013d3a <_svfiprintf_r+0x64e>
 8013e02:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013e04:	ac10      	add	r4, sp, #64	; 0x40
 8013e06:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013e08:	e729      	b.n	8013c5e <_svfiprintf_r+0x572>
 8013e0a:	9803      	ldr	r0, [sp, #12]
 8013e0c:	4651      	mov	r1, sl
 8013e0e:	4642      	mov	r2, r8
 8013e10:	f7ff fbe0 	bl	80135d4 <__ssprint_r>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	d190      	bne.n	8013d3a <_svfiprintf_r+0x64e>
 8013e18:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013e1a:	ac10      	add	r4, sp, #64	; 0x40
 8013e1c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013e1e:	e6dd      	b.n	8013bdc <_svfiprintf_r+0x4f0>
 8013e20:	9803      	ldr	r0, [sp, #12]
 8013e22:	4651      	mov	r1, sl
 8013e24:	4642      	mov	r2, r8
 8013e26:	f7ff fbd5 	bl	80135d4 <__ssprint_r>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	d185      	bne.n	8013d3a <_svfiprintf_r+0x64e>
 8013e2e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013e30:	ac10      	add	r4, sp, #64	; 0x40
 8013e32:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013e34:	e6e0      	b.n	8013bf8 <_svfiprintf_r+0x50c>
 8013e36:	2a09      	cmp	r2, #9
 8013e38:	d955      	bls.n	8013ee6 <_svfiprintf_r+0x7fa>
 8013e3a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8013e3e:	f10d 00a7 	add.w	r0, sp, #167	; 0xa7
 8013e42:	fbac 1302 	umull	r1, r3, ip, r2
 8013e46:	4601      	mov	r1, r0
 8013e48:	3801      	subs	r0, #1
 8013e4a:	08db      	lsrs	r3, r3, #3
 8013e4c:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8013e50:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
 8013e54:	461a      	mov	r2, r3
 8013e56:	3630      	adds	r6, #48	; 0x30
 8013e58:	700e      	strb	r6, [r1, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d1f1      	bne.n	8013e42 <_svfiprintf_r+0x756>
 8013e5e:	ebc1 0308 	rsb	r3, r1, r8
 8013e62:	910a      	str	r1, [sp, #40]	; 0x28
 8013e64:	9305      	str	r3, [sp, #20]
 8013e66:	e534      	b.n	80138d2 <_svfiprintf_r+0x1e6>
 8013e68:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8013e6a:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 8013e6e:	f002 000f 	and.w	r0, r2, #15
 8013e72:	4619      	mov	r1, r3
 8013e74:	3b01      	subs	r3, #1
 8013e76:	0912      	lsrs	r2, r2, #4
 8013e78:	5c30      	ldrb	r0, [r6, r0]
 8013e7a:	7008      	strb	r0, [r1, #0]
 8013e7c:	d1f7      	bne.n	8013e6e <_svfiprintf_r+0x782>
 8013e7e:	ebc1 0308 	rsb	r3, r1, r8
 8013e82:	910a      	str	r1, [sp, #40]	; 0x28
 8013e84:	9305      	str	r3, [sp, #20]
 8013e86:	e524      	b.n	80138d2 <_svfiprintf_r+0x1e6>
 8013e88:	2302      	movs	r3, #2
 8013e8a:	e53f      	b.n	801390c <_svfiprintf_r+0x220>
 8013e8c:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8013e90:	d042      	beq.n	8013f18 <_svfiprintf_r+0x82c>
 8013e92:	9907      	ldr	r1, [sp, #28]
 8013e94:	880a      	ldrh	r2, [r1, #0]
 8013e96:	3104      	adds	r1, #4
 8013e98:	9107      	str	r1, [sp, #28]
 8013e9a:	1c11      	adds	r1, r2, #0
 8013e9c:	bf18      	it	ne
 8013e9e:	2101      	movne	r1, #1
 8013ea0:	e534      	b.n	801390c <_svfiprintf_r+0x220>
 8013ea2:	9803      	ldr	r0, [sp, #12]
 8013ea4:	4651      	mov	r1, sl
 8013ea6:	4642      	mov	r2, r8
 8013ea8:	f7ff fb94 	bl	80135d4 <__ssprint_r>
 8013eac:	2800      	cmp	r0, #0
 8013eae:	f47f af44 	bne.w	8013d3a <_svfiprintf_r+0x64e>
 8013eb2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013eb4:	ac10      	add	r4, sp, #64	; 0x40
 8013eb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013eb8:	e680      	b.n	8013bbc <_svfiprintf_r+0x4d0>
 8013eba:	9b07      	ldr	r3, [sp, #28]
 8013ebc:	681d      	ldr	r5, [r3, #0]
 8013ebe:	3304      	adds	r3, #4
 8013ec0:	2d00      	cmp	r5, #0
 8013ec2:	bfbc      	itt	lt
 8013ec4:	9307      	strlt	r3, [sp, #28]
 8013ec6:	f04f 35ff 	movlt.w	r5, #4294967295
 8013eca:	f6ff ac6b 	blt.w	80137a4 <_svfiprintf_r+0xb8>
 8013ece:	9307      	str	r3, [sp, #28]
 8013ed0:	e468      	b.n	80137a4 <_svfiprintf_r+0xb8>
 8013ed2:	9803      	ldr	r0, [sp, #12]
 8013ed4:	4651      	mov	r1, sl
 8013ed6:	4642      	mov	r2, r8
 8013ed8:	f7ff fb7c 	bl	80135d4 <__ssprint_r>
 8013edc:	2800      	cmp	r0, #0
 8013ede:	f47f af2c 	bne.w	8013d3a <_svfiprintf_r+0x64e>
 8013ee2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013ee4:	e706      	b.n	8013cf4 <_svfiprintf_r+0x608>
 8013ee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ee8:	3230      	adds	r2, #48	; 0x30
 8013eea:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
 8013eee:	9305      	str	r3, [sp, #20]
 8013ef0:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 8013ef4:	930a      	str	r3, [sp, #40]	; 0x28
 8013ef6:	e4ec      	b.n	80138d2 <_svfiprintf_r+0x1e6>
 8013ef8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013efc:	3304      	adds	r3, #4
 8013efe:	9307      	str	r3, [sp, #28]
 8013f00:	2a00      	cmp	r2, #0
 8013f02:	f6bf acc6 	bge.w	8013892 <_svfiprintf_r+0x1a6>
 8013f06:	4252      	negs	r2, r2
 8013f08:	1c11      	adds	r1, r2, #0
 8013f0a:	bf18      	it	ne
 8013f0c:	2101      	movne	r1, #1
 8013f0e:	232d      	movs	r3, #45	; 0x2d
 8013f10:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 8013f14:	2301      	movs	r3, #1
 8013f16:	e4fc      	b.n	8013912 <_svfiprintf_r+0x226>
 8013f18:	9b07      	ldr	r3, [sp, #28]
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	460b      	mov	r3, r1
 8013f1e:	e533      	b.n	8013988 <_svfiprintf_r+0x29c>
 8013f20:	9807      	ldr	r0, [sp, #28]
 8013f22:	9906      	ldr	r1, [sp, #24]
 8013f24:	6803      	ldr	r3, [r0, #0]
 8013f26:	3004      	adds	r0, #4
 8013f28:	9007      	str	r0, [sp, #28]
 8013f2a:	6019      	str	r1, [r3, #0]
 8013f2c:	e400      	b.n	8013730 <_svfiprintf_r+0x44>
 8013f2e:	9907      	ldr	r1, [sp, #28]
 8013f30:	880a      	ldrh	r2, [r1, #0]
 8013f32:	3104      	adds	r1, #4
 8013f34:	9107      	str	r1, [sp, #28]
 8013f36:	e59f      	b.n	8013a78 <_svfiprintf_r+0x38c>
 8013f38:	881a      	ldrh	r2, [r3, #0]
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e524      	b.n	8013988 <_svfiprintf_r+0x29c>
 8013f3e:	9609      	str	r6, [sp, #36]	; 0x24
 8013f40:	f7ff fb18 	bl	8013574 <strlen>
 8013f44:	9005      	str	r0, [sp, #20]
 8013f46:	e4c5      	b.n	80138d4 <_svfiprintf_r+0x1e8>
 8013f48:	9803      	ldr	r0, [sp, #12]
 8013f4a:	4651      	mov	r1, sl
 8013f4c:	4642      	mov	r2, r8
 8013f4e:	f7ff fb41 	bl	80135d4 <__ssprint_r>
 8013f52:	2800      	cmp	r0, #0
 8013f54:	f47f aef1 	bne.w	8013d3a <_svfiprintf_r+0x64e>
 8013f58:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013f5a:	ac10      	add	r4, sp, #64	; 0x40
 8013f5c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013f5e:	e64f      	b.n	8013c00 <_svfiprintf_r+0x514>
 8013f60:	9907      	ldr	r1, [sp, #28]
 8013f62:	9a06      	ldr	r2, [sp, #24]
 8013f64:	680b      	ldr	r3, [r1, #0]
 8013f66:	3104      	adds	r1, #4
 8013f68:	9107      	str	r1, [sp, #28]
 8013f6a:	601a      	str	r2, [r3, #0]
 8013f6c:	f7ff bbe0 	b.w	8013730 <_svfiprintf_r+0x44>
 8013f70:	2140      	movs	r1, #64	; 0x40
 8013f72:	9201      	str	r2, [sp, #4]
 8013f74:	f7fe fa28 	bl	80123c8 <_malloc_r>
 8013f78:	9a01      	ldr	r2, [sp, #4]
 8013f7a:	f8ca 0000 	str.w	r0, [sl]
 8013f7e:	f8ca 0010 	str.w	r0, [sl, #16]
 8013f82:	b1c8      	cbz	r0, 8013fb8 <_svfiprintf_r+0x8cc>
 8013f84:	2340      	movs	r3, #64	; 0x40
 8013f86:	f8ca 3014 	str.w	r3, [sl, #20]
 8013f8a:	f7ff bbbc 	b.w	8013706 <_svfiprintf_r+0x1a>
 8013f8e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8013f90:	4e0e      	ldr	r6, [pc, #56]	; (8013fcc <_svfiprintf_r+0x8e0>)
 8013f92:	e557      	b.n	8013a44 <_svfiprintf_r+0x358>
 8013f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f96:	ebc3 0308 	rsb	r3, r3, r8
 8013f9a:	9305      	str	r3, [sp, #20]
 8013f9c:	e499      	b.n	80138d2 <_svfiprintf_r+0x1e6>
 8013f9e:	4b0c      	ldr	r3, [pc, #48]	; (8013fd0 <_svfiprintf_r+0x8e4>)
 8013fa0:	2d06      	cmp	r5, #6
 8013fa2:	bf28      	it	cs
 8013fa4:	2506      	movcs	r5, #6
 8013fa6:	9505      	str	r5, [sp, #20]
 8013fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8013faa:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8013fae:	9304      	str	r3, [sp, #16]
 8013fb0:	e511      	b.n	80139d6 <_svfiprintf_r+0x2ea>
 8013fb2:	9505      	str	r5, [sp, #20]
 8013fb4:	9009      	str	r0, [sp, #36]	; 0x24
 8013fb6:	e48d      	b.n	80138d4 <_svfiprintf_r+0x1e8>
 8013fb8:	9803      	ldr	r0, [sp, #12]
 8013fba:	f04f 33ff 	mov.w	r3, #4294967295
 8013fbe:	9306      	str	r3, [sp, #24]
 8013fc0:	230c      	movs	r3, #12
 8013fc2:	6003      	str	r3, [r0, #0]
 8013fc4:	e6c2      	b.n	8013d4c <_svfiprintf_r+0x660>
 8013fc6:	bf00      	nop
 8013fc8:	08014d10 	.word	0x08014d10
 8013fcc:	08014d00 	.word	0x08014d00
 8013fd0:	08014d5c 	.word	0x08014d5c

08013fd4 <_calloc_r>:
 8013fd4:	b510      	push	{r4, lr}
 8013fd6:	fb01 f102 	mul.w	r1, r1, r2
 8013fda:	f7fe f9f5 	bl	80123c8 <_malloc_r>
 8013fde:	4604      	mov	r4, r0
 8013fe0:	b308      	cbz	r0, 8014026 <_calloc_r+0x52>
 8013fe2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013fe6:	f022 0203 	bic.w	r2, r2, #3
 8013fea:	3a04      	subs	r2, #4
 8013fec:	2a24      	cmp	r2, #36	; 0x24
 8013fee:	d81c      	bhi.n	801402a <_calloc_r+0x56>
 8013ff0:	2a13      	cmp	r2, #19
 8013ff2:	bf98      	it	ls
 8013ff4:	4602      	movls	r2, r0
 8013ff6:	d912      	bls.n	801401e <_calloc_r+0x4a>
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	2a1b      	cmp	r2, #27
 8013ffc:	6003      	str	r3, [r0, #0]
 8013ffe:	bf98      	it	ls
 8014000:	f100 0208 	addls.w	r2, r0, #8
 8014004:	6043      	str	r3, [r0, #4]
 8014006:	d90a      	bls.n	801401e <_calloc_r+0x4a>
 8014008:	2a24      	cmp	r2, #36	; 0x24
 801400a:	6083      	str	r3, [r0, #8]
 801400c:	bf14      	ite	ne
 801400e:	f100 0210 	addne.w	r2, r0, #16
 8014012:	f100 0218 	addeq.w	r2, r0, #24
 8014016:	60c3      	str	r3, [r0, #12]
 8014018:	bf04      	itt	eq
 801401a:	6103      	streq	r3, [r0, #16]
 801401c:	6143      	streq	r3, [r0, #20]
 801401e:	2300      	movs	r3, #0
 8014020:	6013      	str	r3, [r2, #0]
 8014022:	6053      	str	r3, [r2, #4]
 8014024:	6093      	str	r3, [r2, #8]
 8014026:	4620      	mov	r0, r4
 8014028:	bd10      	pop	{r4, pc}
 801402a:	2100      	movs	r1, #0
 801402c:	f7fb ff46 	bl	800febc <memset>
 8014030:	4620      	mov	r0, r4
 8014032:	bd10      	pop	{r4, pc}

08014034 <_malloc_trim_r>:
 8014034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014036:	4604      	mov	r4, r0
 8014038:	4d23      	ldr	r5, [pc, #140]	; (80140c8 <_malloc_trim_r+0x94>)
 801403a:	460f      	mov	r7, r1
 801403c:	f7fe fcfc 	bl	8012a38 <__malloc_lock>
 8014040:	4620      	mov	r0, r4
 8014042:	68ab      	ldr	r3, [r5, #8]
 8014044:	685e      	ldr	r6, [r3, #4]
 8014046:	f026 0603 	bic.w	r6, r6, #3
 801404a:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 801404e:	330f      	adds	r3, #15
 8014050:	1bdf      	subs	r7, r3, r7
 8014052:	0b3f      	lsrs	r7, r7, #12
 8014054:	3f01      	subs	r7, #1
 8014056:	033f      	lsls	r7, r7, #12
 8014058:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 801405c:	db1c      	blt.n	8014098 <_malloc_trim_r+0x64>
 801405e:	2100      	movs	r1, #0
 8014060:	f7ec fbde 	bl	8000820 <_sbrk_r>
 8014064:	68ab      	ldr	r3, [r5, #8]
 8014066:	199b      	adds	r3, r3, r6
 8014068:	4298      	cmp	r0, r3
 801406a:	d019      	beq.n	80140a0 <_malloc_trim_r+0x6c>
 801406c:	4620      	mov	r0, r4
 801406e:	f7fe fce5 	bl	8012a3c <__malloc_unlock>
 8014072:	2000      	movs	r0, #0
 8014074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014076:	2100      	movs	r1, #0
 8014078:	4620      	mov	r0, r4
 801407a:	f7ec fbd1 	bl	8000820 <_sbrk_r>
 801407e:	68ab      	ldr	r3, [r5, #8]
 8014080:	1ac2      	subs	r2, r0, r3
 8014082:	2a0f      	cmp	r2, #15
 8014084:	dd07      	ble.n	8014096 <_malloc_trim_r+0x62>
 8014086:	f042 0201 	orr.w	r2, r2, #1
 801408a:	605a      	str	r2, [r3, #4]
 801408c:	4b0f      	ldr	r3, [pc, #60]	; (80140cc <_malloc_trim_r+0x98>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	1ac0      	subs	r0, r0, r3
 8014092:	4b0f      	ldr	r3, [pc, #60]	; (80140d0 <_malloc_trim_r+0x9c>)
 8014094:	6018      	str	r0, [r3, #0]
 8014096:	4620      	mov	r0, r4
 8014098:	f7fe fcd0 	bl	8012a3c <__malloc_unlock>
 801409c:	2000      	movs	r0, #0
 801409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a0:	4279      	negs	r1, r7
 80140a2:	4620      	mov	r0, r4
 80140a4:	f7ec fbbc 	bl	8000820 <_sbrk_r>
 80140a8:	3001      	adds	r0, #1
 80140aa:	d0e4      	beq.n	8014076 <_malloc_trim_r+0x42>
 80140ac:	4b08      	ldr	r3, [pc, #32]	; (80140d0 <_malloc_trim_r+0x9c>)
 80140ae:	1bf6      	subs	r6, r6, r7
 80140b0:	68a9      	ldr	r1, [r5, #8]
 80140b2:	4620      	mov	r0, r4
 80140b4:	f046 0601 	orr.w	r6, r6, #1
 80140b8:	681a      	ldr	r2, [r3, #0]
 80140ba:	604e      	str	r6, [r1, #4]
 80140bc:	1bd7      	subs	r7, r2, r7
 80140be:	601f      	str	r7, [r3, #0]
 80140c0:	f7fe fcbc 	bl	8012a3c <__malloc_unlock>
 80140c4:	2001      	movs	r0, #1
 80140c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140c8:	200004e4 	.word	0x200004e4
 80140cc:	200008ec 	.word	0x200008ec
 80140d0:	20000b1c 	.word	0x20000b1c

080140d4 <_free_r>:
 80140d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140d6:	460d      	mov	r5, r1
 80140d8:	4604      	mov	r4, r0
 80140da:	2900      	cmp	r1, #0
 80140dc:	d06f      	beq.n	80141be <_free_r+0xea>
 80140de:	f7fe fcab 	bl	8012a38 <__malloc_lock>
 80140e2:	4e59      	ldr	r6, [pc, #356]	; (8014248 <_free_r+0x174>)
 80140e4:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80140e8:	f1a5 0108 	sub.w	r1, r5, #8
 80140ec:	f020 0301 	bic.w	r3, r0, #1
 80140f0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80140f4:	18ca      	adds	r2, r1, r3
 80140f6:	4594      	cmp	ip, r2
 80140f8:	6857      	ldr	r7, [r2, #4]
 80140fa:	f027 0703 	bic.w	r7, r7, #3
 80140fe:	d07b      	beq.n	80141f8 <_free_r+0x124>
 8014100:	f010 0001 	ands.w	r0, r0, #1
 8014104:	6057      	str	r7, [r2, #4]
 8014106:	d04a      	beq.n	801419e <_free_r+0xca>
 8014108:	2000      	movs	r0, #0
 801410a:	19d5      	adds	r5, r2, r7
 801410c:	686d      	ldr	r5, [r5, #4]
 801410e:	f015 0f01 	tst.w	r5, #1
 8014112:	d106      	bne.n	8014122 <_free_r+0x4e>
 8014114:	19db      	adds	r3, r3, r7
 8014116:	6895      	ldr	r5, [r2, #8]
 8014118:	2800      	cmp	r0, #0
 801411a:	d061      	beq.n	80141e0 <_free_r+0x10c>
 801411c:	68d2      	ldr	r2, [r2, #12]
 801411e:	60ea      	str	r2, [r5, #12]
 8014120:	6095      	str	r5, [r2, #8]
 8014122:	f043 0201 	orr.w	r2, r3, #1
 8014126:	50cb      	str	r3, [r1, r3]
 8014128:	604a      	str	r2, [r1, #4]
 801412a:	2800      	cmp	r0, #0
 801412c:	d132      	bne.n	8014194 <_free_r+0xc0>
 801412e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014132:	d345      	bcc.n	80141c0 <_free_r+0xec>
 8014134:	099d      	lsrs	r5, r3, #6
 8014136:	0a5a      	lsrs	r2, r3, #9
 8014138:	3538      	adds	r5, #56	; 0x38
 801413a:	00e8      	lsls	r0, r5, #3
 801413c:	2a04      	cmp	r2, #4
 801413e:	d916      	bls.n	801416e <_free_r+0x9a>
 8014140:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8014144:	00e8      	lsls	r0, r5, #3
 8014146:	2a14      	cmp	r2, #20
 8014148:	d911      	bls.n	801416e <_free_r+0x9a>
 801414a:	0b1d      	lsrs	r5, r3, #12
 801414c:	356e      	adds	r5, #110	; 0x6e
 801414e:	00e8      	lsls	r0, r5, #3
 8014150:	2a54      	cmp	r2, #84	; 0x54
 8014152:	d90c      	bls.n	801416e <_free_r+0x9a>
 8014154:	0bdd      	lsrs	r5, r3, #15
 8014156:	3577      	adds	r5, #119	; 0x77
 8014158:	00e8      	lsls	r0, r5, #3
 801415a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801415e:	d906      	bls.n	801416e <_free_r+0x9a>
 8014160:	f240 5054 	movw	r0, #1364	; 0x554
 8014164:	4282      	cmp	r2, r0
 8014166:	d86b      	bhi.n	8014240 <_free_r+0x16c>
 8014168:	0c9d      	lsrs	r5, r3, #18
 801416a:	357c      	adds	r5, #124	; 0x7c
 801416c:	00e8      	lsls	r0, r5, #3
 801416e:	1986      	adds	r6, r0, r6
 8014170:	4835      	ldr	r0, [pc, #212]	; (8014248 <_free_r+0x174>)
 8014172:	68b2      	ldr	r2, [r6, #8]
 8014174:	42b2      	cmp	r2, r6
 8014176:	d103      	bne.n	8014180 <_free_r+0xac>
 8014178:	e059      	b.n	801422e <_free_r+0x15a>
 801417a:	6892      	ldr	r2, [r2, #8]
 801417c:	4296      	cmp	r6, r2
 801417e:	d004      	beq.n	801418a <_free_r+0xb6>
 8014180:	6850      	ldr	r0, [r2, #4]
 8014182:	f020 0003 	bic.w	r0, r0, #3
 8014186:	4283      	cmp	r3, r0
 8014188:	d3f7      	bcc.n	801417a <_free_r+0xa6>
 801418a:	68d3      	ldr	r3, [r2, #12]
 801418c:	60cb      	str	r3, [r1, #12]
 801418e:	608a      	str	r2, [r1, #8]
 8014190:	60d1      	str	r1, [r2, #12]
 8014192:	6099      	str	r1, [r3, #8]
 8014194:	4620      	mov	r0, r4
 8014196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801419a:	f7fe bc4f 	b.w	8012a3c <__malloc_unlock>
 801419e:	f855 5c08 	ldr.w	r5, [r5, #-8]
 80141a2:	f106 0c08 	add.w	ip, r6, #8
 80141a6:	1b49      	subs	r1, r1, r5
 80141a8:	195b      	adds	r3, r3, r5
 80141aa:	688d      	ldr	r5, [r1, #8]
 80141ac:	4565      	cmp	r5, ip
 80141ae:	d03c      	beq.n	801422a <_free_r+0x156>
 80141b0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80141b4:	f8c5 c00c 	str.w	ip, [r5, #12]
 80141b8:	f8cc 5008 	str.w	r5, [ip, #8]
 80141bc:	e7a5      	b.n	801410a <_free_r+0x36>
 80141be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141c0:	08db      	lsrs	r3, r3, #3
 80141c2:	2001      	movs	r0, #1
 80141c4:	6875      	ldr	r5, [r6, #4]
 80141c6:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80141ca:	109b      	asrs	r3, r3, #2
 80141cc:	fa10 f303 	lsls.w	r3, r0, r3
 80141d0:	60ca      	str	r2, [r1, #12]
 80141d2:	6890      	ldr	r0, [r2, #8]
 80141d4:	432b      	orrs	r3, r5
 80141d6:	6073      	str	r3, [r6, #4]
 80141d8:	6088      	str	r0, [r1, #8]
 80141da:	60c1      	str	r1, [r0, #12]
 80141dc:	6091      	str	r1, [r2, #8]
 80141de:	e7d9      	b.n	8014194 <_free_r+0xc0>
 80141e0:	4f1a      	ldr	r7, [pc, #104]	; (801424c <_free_r+0x178>)
 80141e2:	42bd      	cmp	r5, r7
 80141e4:	d19a      	bne.n	801411c <_free_r+0x48>
 80141e6:	6171      	str	r1, [r6, #20]
 80141e8:	f043 0201 	orr.w	r2, r3, #1
 80141ec:	6131      	str	r1, [r6, #16]
 80141ee:	60cd      	str	r5, [r1, #12]
 80141f0:	608d      	str	r5, [r1, #8]
 80141f2:	604a      	str	r2, [r1, #4]
 80141f4:	50cb      	str	r3, [r1, r3]
 80141f6:	e7cd      	b.n	8014194 <_free_r+0xc0>
 80141f8:	07c2      	lsls	r2, r0, #31
 80141fa:	443b      	add	r3, r7
 80141fc:	d407      	bmi.n	801420e <_free_r+0x13a>
 80141fe:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8014202:	1a89      	subs	r1, r1, r2
 8014204:	189b      	adds	r3, r3, r2
 8014206:	6888      	ldr	r0, [r1, #8]
 8014208:	68ca      	ldr	r2, [r1, #12]
 801420a:	60c2      	str	r2, [r0, #12]
 801420c:	6090      	str	r0, [r2, #8]
 801420e:	f043 0201 	orr.w	r2, r3, #1
 8014212:	604a      	str	r2, [r1, #4]
 8014214:	4a0e      	ldr	r2, [pc, #56]	; (8014250 <_free_r+0x17c>)
 8014216:	60b1      	str	r1, [r6, #8]
 8014218:	6812      	ldr	r2, [r2, #0]
 801421a:	4293      	cmp	r3, r2
 801421c:	d3ba      	bcc.n	8014194 <_free_r+0xc0>
 801421e:	4b0d      	ldr	r3, [pc, #52]	; (8014254 <_free_r+0x180>)
 8014220:	4620      	mov	r0, r4
 8014222:	6819      	ldr	r1, [r3, #0]
 8014224:	f7ff ff06 	bl	8014034 <_malloc_trim_r>
 8014228:	e7b4      	b.n	8014194 <_free_r+0xc0>
 801422a:	2001      	movs	r0, #1
 801422c:	e76d      	b.n	801410a <_free_r+0x36>
 801422e:	2701      	movs	r7, #1
 8014230:	6846      	ldr	r6, [r0, #4]
 8014232:	10ad      	asrs	r5, r5, #2
 8014234:	4613      	mov	r3, r2
 8014236:	fa17 f505 	lsls.w	r5, r7, r5
 801423a:	4335      	orrs	r5, r6
 801423c:	6045      	str	r5, [r0, #4]
 801423e:	e7a5      	b.n	801418c <_free_r+0xb8>
 8014240:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8014244:	257e      	movs	r5, #126	; 0x7e
 8014246:	e792      	b.n	801416e <_free_r+0x9a>
 8014248:	200004e4 	.word	0x200004e4
 801424c:	200004ec 	.word	0x200004ec
 8014250:	200008f0 	.word	0x200008f0
 8014254:	20000b18 	.word	0x20000b18

08014258 <memmove>:
 8014258:	4288      	cmp	r0, r1
 801425a:	b4f0      	push	{r4, r5, r6, r7}
 801425c:	d912      	bls.n	8014284 <memmove+0x2c>
 801425e:	188d      	adds	r5, r1, r2
 8014260:	42a8      	cmp	r0, r5
 8014262:	d20f      	bcs.n	8014284 <memmove+0x2c>
 8014264:	b162      	cbz	r2, 8014280 <memmove+0x28>
 8014266:	4613      	mov	r3, r2
 8014268:	1882      	adds	r2, r0, r2
 801426a:	4259      	negs	r1, r3
 801426c:	186d      	adds	r5, r5, r1
 801426e:	1852      	adds	r2, r2, r1
 8014270:	18ec      	adds	r4, r5, r3
 8014272:	18d1      	adds	r1, r2, r3
 8014274:	3b01      	subs	r3, #1
 8014276:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 801427a:	f801 4c01 	strb.w	r4, [r1, #-1]
 801427e:	d1f7      	bne.n	8014270 <memmove+0x18>
 8014280:	bcf0      	pop	{r4, r5, r6, r7}
 8014282:	4770      	bx	lr
 8014284:	2a0f      	cmp	r2, #15
 8014286:	bf98      	it	ls
 8014288:	4603      	movls	r3, r0
 801428a:	d931      	bls.n	80142f0 <memmove+0x98>
 801428c:	ea41 0300 	orr.w	r3, r1, r0
 8014290:	079b      	lsls	r3, r3, #30
 8014292:	d13c      	bne.n	801430e <memmove+0xb6>
 8014294:	460c      	mov	r4, r1
 8014296:	4603      	mov	r3, r0
 8014298:	4615      	mov	r5, r2
 801429a:	6826      	ldr	r6, [r4, #0]
 801429c:	3d10      	subs	r5, #16
 801429e:	601e      	str	r6, [r3, #0]
 80142a0:	6866      	ldr	r6, [r4, #4]
 80142a2:	605e      	str	r6, [r3, #4]
 80142a4:	68a6      	ldr	r6, [r4, #8]
 80142a6:	609e      	str	r6, [r3, #8]
 80142a8:	68e6      	ldr	r6, [r4, #12]
 80142aa:	3410      	adds	r4, #16
 80142ac:	60de      	str	r6, [r3, #12]
 80142ae:	3310      	adds	r3, #16
 80142b0:	2d0f      	cmp	r5, #15
 80142b2:	d8f2      	bhi.n	801429a <memmove+0x42>
 80142b4:	f1a2 0410 	sub.w	r4, r2, #16
 80142b8:	f002 020f 	and.w	r2, r2, #15
 80142bc:	f024 040f 	bic.w	r4, r4, #15
 80142c0:	3410      	adds	r4, #16
 80142c2:	2a03      	cmp	r2, #3
 80142c4:	eb00 0304 	add.w	r3, r0, r4
 80142c8:	4421      	add	r1, r4
 80142ca:	d911      	bls.n	80142f0 <memmove+0x98>
 80142cc:	460e      	mov	r6, r1
 80142ce:	461d      	mov	r5, r3
 80142d0:	4614      	mov	r4, r2
 80142d2:	f856 7b04 	ldr.w	r7, [r6], #4
 80142d6:	3c04      	subs	r4, #4
 80142d8:	2c03      	cmp	r4, #3
 80142da:	f845 7b04 	str.w	r7, [r5], #4
 80142de:	d8f8      	bhi.n	80142d2 <memmove+0x7a>
 80142e0:	1f14      	subs	r4, r2, #4
 80142e2:	f002 0203 	and.w	r2, r2, #3
 80142e6:	f024 0403 	bic.w	r4, r4, #3
 80142ea:	3404      	adds	r4, #4
 80142ec:	1909      	adds	r1, r1, r4
 80142ee:	191b      	adds	r3, r3, r4
 80142f0:	2a00      	cmp	r2, #0
 80142f2:	d0c5      	beq.n	8014280 <memmove+0x28>
 80142f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142f8:	3a01      	subs	r2, #1
 80142fa:	f803 4b01 	strb.w	r4, [r3], #1
 80142fe:	d0bf      	beq.n	8014280 <memmove+0x28>
 8014300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014304:	3a01      	subs	r2, #1
 8014306:	f803 4b01 	strb.w	r4, [r3], #1
 801430a:	d1f3      	bne.n	80142f4 <memmove+0x9c>
 801430c:	e7b8      	b.n	8014280 <memmove+0x28>
 801430e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014312:	4603      	mov	r3, r0
 8014314:	3a01      	subs	r2, #1
 8014316:	f803 4b01 	strb.w	r4, [r3], #1
 801431a:	d1f1      	bne.n	8014300 <memmove+0xa8>
 801431c:	e7b0      	b.n	8014280 <memmove+0x28>
 801431e:	bf00      	nop

08014320 <_realloc_r>:
 8014320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014324:	460c      	mov	r4, r1
 8014326:	b083      	sub	sp, #12
 8014328:	4606      	mov	r6, r0
 801432a:	2900      	cmp	r1, #0
 801432c:	f000 8135 	beq.w	801459a <_realloc_r+0x27a>
 8014330:	9201      	str	r2, [sp, #4]
 8014332:	f7fe fb81 	bl	8012a38 <__malloc_lock>
 8014336:	9a01      	ldr	r2, [sp, #4]
 8014338:	f854 0c04 	ldr.w	r0, [r4, #-4]
 801433c:	f102 050b 	add.w	r5, r2, #11
 8014340:	2d16      	cmp	r5, #22
 8014342:	f200 809d 	bhi.w	8014480 <_realloc_r+0x160>
 8014346:	2110      	movs	r1, #16
 8014348:	2700      	movs	r7, #0
 801434a:	460d      	mov	r5, r1
 801434c:	4295      	cmp	r5, r2
 801434e:	bf38      	it	cc
 8014350:	f047 0701 	orrcc.w	r7, r7, #1
 8014354:	2f00      	cmp	r7, #0
 8014356:	f040 8126 	bne.w	80145a6 <_realloc_r+0x286>
 801435a:	f020 0903 	bic.w	r9, r0, #3
 801435e:	f1a4 0a08 	sub.w	sl, r4, #8
 8014362:	4589      	cmp	r9, r1
 8014364:	bfa8      	it	ge
 8014366:	464f      	movge	r7, r9
 8014368:	da74      	bge.n	8014454 <_realloc_r+0x134>
 801436a:	4ba1      	ldr	r3, [pc, #644]	; (80145f0 <_realloc_r+0x2d0>)
 801436c:	eb0a 0e09 	add.w	lr, sl, r9
 8014370:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8014374:	45f3      	cmp	fp, lr
 8014376:	f000 811a 	beq.w	80145ae <_realloc_r+0x28e>
 801437a:	f8de c004 	ldr.w	ip, [lr, #4]
 801437e:	f02c 0801 	bic.w	r8, ip, #1
 8014382:	44f0      	add	r8, lr
 8014384:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8014388:	f018 0f01 	tst.w	r8, #1
 801438c:	bf1c      	itt	ne
 801438e:	46bc      	movne	ip, r7
 8014390:	46e6      	movne	lr, ip
 8014392:	d07a      	beq.n	801448a <_realloc_r+0x16a>
 8014394:	07c0      	lsls	r0, r0, #31
 8014396:	f100 809a 	bmi.w	80144ce <_realloc_r+0x1ae>
 801439a:	f854 0c08 	ldr.w	r0, [r4, #-8]
 801439e:	ebc0 080a 	rsb	r8, r0, sl
 80143a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80143a6:	f020 0003 	bic.w	r0, r0, #3
 80143aa:	f1be 0f00 	cmp.w	lr, #0
 80143ae:	f000 80b6 	beq.w	801451e <_realloc_r+0x1fe>
 80143b2:	45de      	cmp	lr, fp
 80143b4:	eb00 0b09 	add.w	fp, r0, r9
 80143b8:	f000 814d 	beq.w	8014656 <_realloc_r+0x336>
 80143bc:	eb0c 070b 	add.w	r7, ip, fp
 80143c0:	42b9      	cmp	r1, r7
 80143c2:	f300 80ae 	bgt.w	8014522 <_realloc_r+0x202>
 80143c6:	f8de 100c 	ldr.w	r1, [lr, #12]
 80143ca:	4643      	mov	r3, r8
 80143cc:	f8de 0008 	ldr.w	r0, [lr, #8]
 80143d0:	f1a9 0204 	sub.w	r2, r9, #4
 80143d4:	2a24      	cmp	r2, #36	; 0x24
 80143d6:	60c1      	str	r1, [r0, #12]
 80143d8:	6088      	str	r0, [r1, #8]
 80143da:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80143de:	f853 0f08 	ldr.w	r0, [r3, #8]!
 80143e2:	60c1      	str	r1, [r0, #12]
 80143e4:	6088      	str	r0, [r1, #8]
 80143e6:	f200 8191 	bhi.w	801470c <_realloc_r+0x3ec>
 80143ea:	2a13      	cmp	r2, #19
 80143ec:	bf9c      	itt	ls
 80143ee:	461a      	movls	r2, r3
 80143f0:	4621      	movls	r1, r4
 80143f2:	d925      	bls.n	8014440 <_realloc_r+0x120>
 80143f4:	6821      	ldr	r1, [r4, #0]
 80143f6:	2a1b      	cmp	r2, #27
 80143f8:	bf98      	it	ls
 80143fa:	f108 0210 	addls.w	r2, r8, #16
 80143fe:	f8c8 1008 	str.w	r1, [r8, #8]
 8014402:	6861      	ldr	r1, [r4, #4]
 8014404:	f8c8 100c 	str.w	r1, [r8, #12]
 8014408:	bf98      	it	ls
 801440a:	f104 0108 	addls.w	r1, r4, #8
 801440e:	d917      	bls.n	8014440 <_realloc_r+0x120>
 8014410:	68a1      	ldr	r1, [r4, #8]
 8014412:	2a24      	cmp	r2, #36	; 0x24
 8014414:	bf14      	ite	ne
 8014416:	f108 0218 	addne.w	r2, r8, #24
 801441a:	f108 0220 	addeq.w	r2, r8, #32
 801441e:	f8c8 1010 	str.w	r1, [r8, #16]
 8014422:	68e1      	ldr	r1, [r4, #12]
 8014424:	f8c8 1014 	str.w	r1, [r8, #20]
 8014428:	bf11      	iteee	ne
 801442a:	f104 0110 	addne.w	r1, r4, #16
 801442e:	6920      	ldreq	r0, [r4, #16]
 8014430:	f104 0118 	addeq.w	r1, r4, #24
 8014434:	f8c8 0018 	streq.w	r0, [r8, #24]
 8014438:	bf04      	itt	eq
 801443a:	6960      	ldreq	r0, [r4, #20]
 801443c:	f8c8 001c 	streq.w	r0, [r8, #28]
 8014440:	6808      	ldr	r0, [r1, #0]
 8014442:	461c      	mov	r4, r3
 8014444:	6010      	str	r0, [r2, #0]
 8014446:	46c2      	mov	sl, r8
 8014448:	684b      	ldr	r3, [r1, #4]
 801444a:	6053      	str	r3, [r2, #4]
 801444c:	688b      	ldr	r3, [r1, #8]
 801444e:	6093      	str	r3, [r2, #8]
 8014450:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014454:	1b7b      	subs	r3, r7, r5
 8014456:	2b0f      	cmp	r3, #15
 8014458:	d825      	bhi.n	80144a6 <_realloc_r+0x186>
 801445a:	eb0a 0307 	add.w	r3, sl, r7
 801445e:	f000 0001 	and.w	r0, r0, #1
 8014462:	4307      	orrs	r7, r0
 8014464:	f8ca 7004 	str.w	r7, [sl, #4]
 8014468:	685a      	ldr	r2, [r3, #4]
 801446a:	f042 0201 	orr.w	r2, r2, #1
 801446e:	605a      	str	r2, [r3, #4]
 8014470:	4630      	mov	r0, r6
 8014472:	4627      	mov	r7, r4
 8014474:	f7fe fae2 	bl	8012a3c <__malloc_unlock>
 8014478:	4638      	mov	r0, r7
 801447a:	b003      	add	sp, #12
 801447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014480:	f025 0507 	bic.w	r5, r5, #7
 8014484:	4629      	mov	r1, r5
 8014486:	0fef      	lsrs	r7, r5, #31
 8014488:	e760      	b.n	801434c <_realloc_r+0x2c>
 801448a:	f02c 0c03 	bic.w	ip, ip, #3
 801448e:	eb0c 0709 	add.w	r7, ip, r9
 8014492:	42b9      	cmp	r1, r7
 8014494:	f73f af7e 	bgt.w	8014394 <_realloc_r+0x74>
 8014498:	f8de 300c 	ldr.w	r3, [lr, #12]
 801449c:	f8de 2008 	ldr.w	r2, [lr, #8]
 80144a0:	60d3      	str	r3, [r2, #12]
 80144a2:	609a      	str	r2, [r3, #8]
 80144a4:	e7d6      	b.n	8014454 <_realloc_r+0x134>
 80144a6:	eb0a 0105 	add.w	r1, sl, r5
 80144aa:	f000 0001 	and.w	r0, r0, #1
 80144ae:	18ca      	adds	r2, r1, r3
 80144b0:	4305      	orrs	r5, r0
 80144b2:	f043 0301 	orr.w	r3, r3, #1
 80144b6:	f8ca 5004 	str.w	r5, [sl, #4]
 80144ba:	604b      	str	r3, [r1, #4]
 80144bc:	4630      	mov	r0, r6
 80144be:	6853      	ldr	r3, [r2, #4]
 80144c0:	3108      	adds	r1, #8
 80144c2:	f043 0301 	orr.w	r3, r3, #1
 80144c6:	6053      	str	r3, [r2, #4]
 80144c8:	f7ff fe04 	bl	80140d4 <_free_r>
 80144cc:	e7d0      	b.n	8014470 <_realloc_r+0x150>
 80144ce:	4630      	mov	r0, r6
 80144d0:	4611      	mov	r1, r2
 80144d2:	f7fd ff79 	bl	80123c8 <_malloc_r>
 80144d6:	4607      	mov	r7, r0
 80144d8:	b1e8      	cbz	r0, 8014516 <_realloc_r+0x1f6>
 80144da:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80144de:	f1a7 0208 	sub.w	r2, r7, #8
 80144e2:	f020 0301 	bic.w	r3, r0, #1
 80144e6:	4453      	add	r3, sl
 80144e8:	429a      	cmp	r2, r3
 80144ea:	f000 8109 	beq.w	8014700 <_realloc_r+0x3e0>
 80144ee:	f1a9 0204 	sub.w	r2, r9, #4
 80144f2:	2a24      	cmp	r2, #36	; 0x24
 80144f4:	f200 80aa 	bhi.w	801464c <_realloc_r+0x32c>
 80144f8:	2a13      	cmp	r2, #19
 80144fa:	bf9c      	itt	ls
 80144fc:	463b      	movls	r3, r7
 80144fe:	4622      	movls	r2, r4
 8014500:	d878      	bhi.n	80145f4 <_realloc_r+0x2d4>
 8014502:	6811      	ldr	r1, [r2, #0]
 8014504:	6019      	str	r1, [r3, #0]
 8014506:	6851      	ldr	r1, [r2, #4]
 8014508:	6059      	str	r1, [r3, #4]
 801450a:	6892      	ldr	r2, [r2, #8]
 801450c:	609a      	str	r2, [r3, #8]
 801450e:	4630      	mov	r0, r6
 8014510:	4621      	mov	r1, r4
 8014512:	f7ff fddf 	bl	80140d4 <_free_r>
 8014516:	4630      	mov	r0, r6
 8014518:	f7fe fa90 	bl	8012a3c <__malloc_unlock>
 801451c:	e7ac      	b.n	8014478 <_realloc_r+0x158>
 801451e:	eb00 0b09 	add.w	fp, r0, r9
 8014522:	4559      	cmp	r1, fp
 8014524:	dcd3      	bgt.n	80144ce <_realloc_r+0x1ae>
 8014526:	4643      	mov	r3, r8
 8014528:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801452c:	f1a9 0204 	sub.w	r2, r9, #4
 8014530:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8014534:	2a24      	cmp	r2, #36	; 0x24
 8014536:	60c1      	str	r1, [r0, #12]
 8014538:	6088      	str	r0, [r1, #8]
 801453a:	d87d      	bhi.n	8014638 <_realloc_r+0x318>
 801453c:	2a13      	cmp	r2, #19
 801453e:	bf9c      	itt	ls
 8014540:	461a      	movls	r2, r3
 8014542:	4621      	movls	r1, r4
 8014544:	d925      	bls.n	8014592 <_realloc_r+0x272>
 8014546:	6821      	ldr	r1, [r4, #0]
 8014548:	2a1b      	cmp	r2, #27
 801454a:	bf98      	it	ls
 801454c:	f108 0210 	addls.w	r2, r8, #16
 8014550:	f8c8 1008 	str.w	r1, [r8, #8]
 8014554:	6861      	ldr	r1, [r4, #4]
 8014556:	f8c8 100c 	str.w	r1, [r8, #12]
 801455a:	bf98      	it	ls
 801455c:	f104 0108 	addls.w	r1, r4, #8
 8014560:	d917      	bls.n	8014592 <_realloc_r+0x272>
 8014562:	68a1      	ldr	r1, [r4, #8]
 8014564:	2a24      	cmp	r2, #36	; 0x24
 8014566:	bf14      	ite	ne
 8014568:	f108 0218 	addne.w	r2, r8, #24
 801456c:	f108 0220 	addeq.w	r2, r8, #32
 8014570:	f8c8 1010 	str.w	r1, [r8, #16]
 8014574:	68e1      	ldr	r1, [r4, #12]
 8014576:	f8c8 1014 	str.w	r1, [r8, #20]
 801457a:	bf11      	iteee	ne
 801457c:	f104 0110 	addne.w	r1, r4, #16
 8014580:	6920      	ldreq	r0, [r4, #16]
 8014582:	f104 0118 	addeq.w	r1, r4, #24
 8014586:	f8c8 0018 	streq.w	r0, [r8, #24]
 801458a:	bf04      	itt	eq
 801458c:	6960      	ldreq	r0, [r4, #20]
 801458e:	f8c8 001c 	streq.w	r0, [r8, #28]
 8014592:	6808      	ldr	r0, [r1, #0]
 8014594:	461c      	mov	r4, r3
 8014596:	465f      	mov	r7, fp
 8014598:	e754      	b.n	8014444 <_realloc_r+0x124>
 801459a:	4611      	mov	r1, r2
 801459c:	b003      	add	sp, #12
 801459e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a2:	f7fd bf11 	b.w	80123c8 <_malloc_r>
 80145a6:	230c      	movs	r3, #12
 80145a8:	2700      	movs	r7, #0
 80145aa:	6033      	str	r3, [r6, #0]
 80145ac:	e764      	b.n	8014478 <_realloc_r+0x158>
 80145ae:	f8db 7004 	ldr.w	r7, [fp, #4]
 80145b2:	f105 0e10 	add.w	lr, r5, #16
 80145b6:	f027 0c03 	bic.w	ip, r7, #3
 80145ba:	eb0c 0709 	add.w	r7, ip, r9
 80145be:	4577      	cmp	r7, lr
 80145c0:	bfb8      	it	lt
 80145c2:	46de      	movlt	lr, fp
 80145c4:	f6ff aee6 	blt.w	8014394 <_realloc_r+0x74>
 80145c8:	eb0a 0205 	add.w	r2, sl, r5
 80145cc:	1b79      	subs	r1, r7, r5
 80145ce:	f041 0101 	orr.w	r1, r1, #1
 80145d2:	609a      	str	r2, [r3, #8]
 80145d4:	6051      	str	r1, [r2, #4]
 80145d6:	4630      	mov	r0, r6
 80145d8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80145dc:	4627      	mov	r7, r4
 80145de:	f001 0301 	and.w	r3, r1, #1
 80145e2:	431d      	orrs	r5, r3
 80145e4:	f844 5c04 	str.w	r5, [r4, #-4]
 80145e8:	f7fe fa28 	bl	8012a3c <__malloc_unlock>
 80145ec:	e744      	b.n	8014478 <_realloc_r+0x158>
 80145ee:	bf00      	nop
 80145f0:	200004e4 	.word	0x200004e4
 80145f4:	6823      	ldr	r3, [r4, #0]
 80145f6:	2a1b      	cmp	r2, #27
 80145f8:	bf98      	it	ls
 80145fa:	f104 0208 	addls.w	r2, r4, #8
 80145fe:	603b      	str	r3, [r7, #0]
 8014600:	6863      	ldr	r3, [r4, #4]
 8014602:	607b      	str	r3, [r7, #4]
 8014604:	bf98      	it	ls
 8014606:	f107 0308 	addls.w	r3, r7, #8
 801460a:	f67f af7a 	bls.w	8014502 <_realloc_r+0x1e2>
 801460e:	68a3      	ldr	r3, [r4, #8]
 8014610:	2a24      	cmp	r2, #36	; 0x24
 8014612:	bf14      	ite	ne
 8014614:	f104 0210 	addne.w	r2, r4, #16
 8014618:	f104 0218 	addeq.w	r2, r4, #24
 801461c:	60bb      	str	r3, [r7, #8]
 801461e:	68e3      	ldr	r3, [r4, #12]
 8014620:	60fb      	str	r3, [r7, #12]
 8014622:	bf11      	iteee	ne
 8014624:	f107 0310 	addne.w	r3, r7, #16
 8014628:	6921      	ldreq	r1, [r4, #16]
 801462a:	f107 0318 	addeq.w	r3, r7, #24
 801462e:	6139      	streq	r1, [r7, #16]
 8014630:	bf04      	itt	eq
 8014632:	6961      	ldreq	r1, [r4, #20]
 8014634:	6179      	streq	r1, [r7, #20]
 8014636:	e764      	b.n	8014502 <_realloc_r+0x1e2>
 8014638:	4621      	mov	r1, r4
 801463a:	4618      	mov	r0, r3
 801463c:	461c      	mov	r4, r3
 801463e:	465f      	mov	r7, fp
 8014640:	f7ff fe0a 	bl	8014258 <memmove>
 8014644:	46c2      	mov	sl, r8
 8014646:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801464a:	e703      	b.n	8014454 <_realloc_r+0x134>
 801464c:	4638      	mov	r0, r7
 801464e:	4621      	mov	r1, r4
 8014650:	f7ff fe02 	bl	8014258 <memmove>
 8014654:	e75b      	b.n	801450e <_realloc_r+0x1ee>
 8014656:	f105 0010 	add.w	r0, r5, #16
 801465a:	44dc      	add	ip, fp
 801465c:	4584      	cmp	ip, r0
 801465e:	f6ff af60 	blt.w	8014522 <_realloc_r+0x202>
 8014662:	4647      	mov	r7, r8
 8014664:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8014668:	f1a9 0204 	sub.w	r2, r9, #4
 801466c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8014670:	2a24      	cmp	r2, #36	; 0x24
 8014672:	60c1      	str	r1, [r0, #12]
 8014674:	6088      	str	r0, [r1, #8]
 8014676:	d852      	bhi.n	801471e <_realloc_r+0x3fe>
 8014678:	2a13      	cmp	r2, #19
 801467a:	bf9c      	itt	ls
 801467c:	463a      	movls	r2, r7
 801467e:	4621      	movls	r1, r4
 8014680:	d925      	bls.n	80146ce <_realloc_r+0x3ae>
 8014682:	6821      	ldr	r1, [r4, #0]
 8014684:	2a1b      	cmp	r2, #27
 8014686:	bf98      	it	ls
 8014688:	f108 0210 	addls.w	r2, r8, #16
 801468c:	f8c8 1008 	str.w	r1, [r8, #8]
 8014690:	6861      	ldr	r1, [r4, #4]
 8014692:	f8c8 100c 	str.w	r1, [r8, #12]
 8014696:	bf98      	it	ls
 8014698:	f104 0108 	addls.w	r1, r4, #8
 801469c:	d917      	bls.n	80146ce <_realloc_r+0x3ae>
 801469e:	68a1      	ldr	r1, [r4, #8]
 80146a0:	2a24      	cmp	r2, #36	; 0x24
 80146a2:	bf14      	ite	ne
 80146a4:	f108 0218 	addne.w	r2, r8, #24
 80146a8:	f108 0220 	addeq.w	r2, r8, #32
 80146ac:	f8c8 1010 	str.w	r1, [r8, #16]
 80146b0:	68e1      	ldr	r1, [r4, #12]
 80146b2:	f8c8 1014 	str.w	r1, [r8, #20]
 80146b6:	bf11      	iteee	ne
 80146b8:	f104 0110 	addne.w	r1, r4, #16
 80146bc:	6920      	ldreq	r0, [r4, #16]
 80146be:	f104 0118 	addeq.w	r1, r4, #24
 80146c2:	f8c8 0018 	streq.w	r0, [r8, #24]
 80146c6:	bf04      	itt	eq
 80146c8:	6960      	ldreq	r0, [r4, #20]
 80146ca:	f8c8 001c 	streq.w	r0, [r8, #28]
 80146ce:	6808      	ldr	r0, [r1, #0]
 80146d0:	6010      	str	r0, [r2, #0]
 80146d2:	6848      	ldr	r0, [r1, #4]
 80146d4:	6050      	str	r0, [r2, #4]
 80146d6:	6889      	ldr	r1, [r1, #8]
 80146d8:	6091      	str	r1, [r2, #8]
 80146da:	eb08 0205 	add.w	r2, r8, r5
 80146de:	ebc5 010c 	rsb	r1, r5, ip
 80146e2:	f041 0101 	orr.w	r1, r1, #1
 80146e6:	609a      	str	r2, [r3, #8]
 80146e8:	6051      	str	r1, [r2, #4]
 80146ea:	4630      	mov	r0, r6
 80146ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80146f0:	f003 0301 	and.w	r3, r3, #1
 80146f4:	431d      	orrs	r5, r3
 80146f6:	f8c8 5004 	str.w	r5, [r8, #4]
 80146fa:	f7fe f99f 	bl	8012a3c <__malloc_unlock>
 80146fe:	e6bb      	b.n	8014478 <_realloc_r+0x158>
 8014700:	f857 7c04 	ldr.w	r7, [r7, #-4]
 8014704:	f027 0703 	bic.w	r7, r7, #3
 8014708:	444f      	add	r7, r9
 801470a:	e6a3      	b.n	8014454 <_realloc_r+0x134>
 801470c:	4621      	mov	r1, r4
 801470e:	4618      	mov	r0, r3
 8014710:	461c      	mov	r4, r3
 8014712:	46c2      	mov	sl, r8
 8014714:	f7ff fda0 	bl	8014258 <memmove>
 8014718:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801471c:	e69a      	b.n	8014454 <_realloc_r+0x134>
 801471e:	4638      	mov	r0, r7
 8014720:	4621      	mov	r1, r4
 8014722:	e88d 1008 	stmia.w	sp, {r3, ip}
 8014726:	f7ff fd97 	bl	8014258 <memmove>
 801472a:	e89d 1008 	ldmia.w	sp, {r3, ip}
 801472e:	e7d4      	b.n	80146da <_realloc_r+0x3ba>

08014730 <__aeabi_uidiv>:
 8014730:	1e4a      	subs	r2, r1, #1
 8014732:	bf08      	it	eq
 8014734:	4770      	bxeq	lr
 8014736:	f0c0 8124 	bcc.w	8014982 <__aeabi_uidiv+0x252>
 801473a:	4288      	cmp	r0, r1
 801473c:	f240 8116 	bls.w	801496c <__aeabi_uidiv+0x23c>
 8014740:	4211      	tst	r1, r2
 8014742:	f000 8117 	beq.w	8014974 <__aeabi_uidiv+0x244>
 8014746:	fab0 f380 	clz	r3, r0
 801474a:	fab1 f281 	clz	r2, r1
 801474e:	eba2 0303 	sub.w	r3, r2, r3
 8014752:	f1c3 031f 	rsb	r3, r3, #31
 8014756:	a204      	add	r2, pc, #16	; (adr r2, 8014768 <__aeabi_uidiv+0x38>)
 8014758:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801475c:	f04f 0200 	mov.w	r2, #0
 8014760:	469f      	mov	pc, r3
 8014762:	bf00      	nop
 8014764:	f3af 8000 	nop.w
 8014768:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 801476c:	bf00      	nop
 801476e:	eb42 0202 	adc.w	r2, r2, r2
 8014772:	bf28      	it	cs
 8014774:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 8014778:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 801477c:	bf00      	nop
 801477e:	eb42 0202 	adc.w	r2, r2, r2
 8014782:	bf28      	it	cs
 8014784:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 8014788:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 801478c:	bf00      	nop
 801478e:	eb42 0202 	adc.w	r2, r2, r2
 8014792:	bf28      	it	cs
 8014794:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 8014798:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 801479c:	bf00      	nop
 801479e:	eb42 0202 	adc.w	r2, r2, r2
 80147a2:	bf28      	it	cs
 80147a4:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 80147a8:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 80147ac:	bf00      	nop
 80147ae:	eb42 0202 	adc.w	r2, r2, r2
 80147b2:	bf28      	it	cs
 80147b4:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 80147b8:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 80147bc:	bf00      	nop
 80147be:	eb42 0202 	adc.w	r2, r2, r2
 80147c2:	bf28      	it	cs
 80147c4:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 80147c8:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 80147cc:	bf00      	nop
 80147ce:	eb42 0202 	adc.w	r2, r2, r2
 80147d2:	bf28      	it	cs
 80147d4:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 80147d8:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 80147dc:	bf00      	nop
 80147de:	eb42 0202 	adc.w	r2, r2, r2
 80147e2:	bf28      	it	cs
 80147e4:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 80147e8:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 80147ec:	bf00      	nop
 80147ee:	eb42 0202 	adc.w	r2, r2, r2
 80147f2:	bf28      	it	cs
 80147f4:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 80147f8:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 80147fc:	bf00      	nop
 80147fe:	eb42 0202 	adc.w	r2, r2, r2
 8014802:	bf28      	it	cs
 8014804:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 8014808:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 801480c:	bf00      	nop
 801480e:	eb42 0202 	adc.w	r2, r2, r2
 8014812:	bf28      	it	cs
 8014814:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 8014818:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 801481c:	bf00      	nop
 801481e:	eb42 0202 	adc.w	r2, r2, r2
 8014822:	bf28      	it	cs
 8014824:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 8014828:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 801482c:	bf00      	nop
 801482e:	eb42 0202 	adc.w	r2, r2, r2
 8014832:	bf28      	it	cs
 8014834:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 8014838:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 801483c:	bf00      	nop
 801483e:	eb42 0202 	adc.w	r2, r2, r2
 8014842:	bf28      	it	cs
 8014844:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 8014848:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 801484c:	bf00      	nop
 801484e:	eb42 0202 	adc.w	r2, r2, r2
 8014852:	bf28      	it	cs
 8014854:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 8014858:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 801485c:	bf00      	nop
 801485e:	eb42 0202 	adc.w	r2, r2, r2
 8014862:	bf28      	it	cs
 8014864:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 8014868:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 801486c:	bf00      	nop
 801486e:	eb42 0202 	adc.w	r2, r2, r2
 8014872:	bf28      	it	cs
 8014874:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 8014878:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 801487c:	bf00      	nop
 801487e:	eb42 0202 	adc.w	r2, r2, r2
 8014882:	bf28      	it	cs
 8014884:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 8014888:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 801488c:	bf00      	nop
 801488e:	eb42 0202 	adc.w	r2, r2, r2
 8014892:	bf28      	it	cs
 8014894:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 8014898:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 801489c:	bf00      	nop
 801489e:	eb42 0202 	adc.w	r2, r2, r2
 80148a2:	bf28      	it	cs
 80148a4:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 80148a8:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 80148ac:	bf00      	nop
 80148ae:	eb42 0202 	adc.w	r2, r2, r2
 80148b2:	bf28      	it	cs
 80148b4:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 80148b8:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 80148bc:	bf00      	nop
 80148be:	eb42 0202 	adc.w	r2, r2, r2
 80148c2:	bf28      	it	cs
 80148c4:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 80148c8:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 80148cc:	bf00      	nop
 80148ce:	eb42 0202 	adc.w	r2, r2, r2
 80148d2:	bf28      	it	cs
 80148d4:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 80148d8:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 80148dc:	bf00      	nop
 80148de:	eb42 0202 	adc.w	r2, r2, r2
 80148e2:	bf28      	it	cs
 80148e4:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 80148e8:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 80148ec:	bf00      	nop
 80148ee:	eb42 0202 	adc.w	r2, r2, r2
 80148f2:	bf28      	it	cs
 80148f4:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 80148f8:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 80148fc:	bf00      	nop
 80148fe:	eb42 0202 	adc.w	r2, r2, r2
 8014902:	bf28      	it	cs
 8014904:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 8014908:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 801490c:	bf00      	nop
 801490e:	eb42 0202 	adc.w	r2, r2, r2
 8014912:	bf28      	it	cs
 8014914:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 8014918:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 801491c:	bf00      	nop
 801491e:	eb42 0202 	adc.w	r2, r2, r2
 8014922:	bf28      	it	cs
 8014924:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 8014928:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 801492c:	bf00      	nop
 801492e:	eb42 0202 	adc.w	r2, r2, r2
 8014932:	bf28      	it	cs
 8014934:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 8014938:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 801493c:	bf00      	nop
 801493e:	eb42 0202 	adc.w	r2, r2, r2
 8014942:	bf28      	it	cs
 8014944:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 8014948:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 801494c:	bf00      	nop
 801494e:	eb42 0202 	adc.w	r2, r2, r2
 8014952:	bf28      	it	cs
 8014954:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 8014958:	ebb0 0f01 	cmp.w	r0, r1
 801495c:	bf00      	nop
 801495e:	eb42 0202 	adc.w	r2, r2, r2
 8014962:	bf28      	it	cs
 8014964:	eba0 0001 	subcs.w	r0, r0, r1
 8014968:	4610      	mov	r0, r2
 801496a:	4770      	bx	lr
 801496c:	bf0c      	ite	eq
 801496e:	2001      	moveq	r0, #1
 8014970:	2000      	movne	r0, #0
 8014972:	4770      	bx	lr
 8014974:	fab1 f281 	clz	r2, r1
 8014978:	f1c2 021f 	rsb	r2, r2, #31
 801497c:	fa20 f002 	lsr.w	r0, r0, r2
 8014980:	4770      	bx	lr
 8014982:	b108      	cbz	r0, 8014988 <__aeabi_uidiv+0x258>
 8014984:	f04f 30ff 	mov.w	r0, #4294967295
 8014988:	f000 b80e 	b.w	80149a8 <__aeabi_idiv0>

0801498c <__aeabi_uidivmod>:
 801498c:	2900      	cmp	r1, #0
 801498e:	d0f8      	beq.n	8014982 <__aeabi_uidiv+0x252>
 8014990:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 8014994:	f7ff fecc 	bl	8014730 <__aeabi_uidiv>
 8014998:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 801499c:	fb02 f300 	mul.w	r3, r2, r0
 80149a0:	eba1 0103 	sub.w	r1, r1, r3
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop

080149a8 <__aeabi_idiv0>:
 80149a8:	4770      	bx	lr
 80149aa:	bf00      	nop

080149ac <__gedf2>:
 80149ac:	f04f 3cff 	mov.w	ip, #4294967295
 80149b0:	e006      	b.n	80149c0 <__cmpdf2+0x4>
 80149b2:	bf00      	nop

080149b4 <__ledf2>:
 80149b4:	f04f 0c01 	mov.w	ip, #1
 80149b8:	e002      	b.n	80149c0 <__cmpdf2+0x4>
 80149ba:	bf00      	nop

080149bc <__cmpdf2>:
 80149bc:	f04f 0c01 	mov.w	ip, #1
 80149c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80149c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80149c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80149cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80149d0:	bf18      	it	ne
 80149d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80149d6:	d01b      	beq.n	8014a10 <__cmpdf2+0x54>
 80149d8:	b001      	add	sp, #4
 80149da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80149de:	bf0c      	ite	eq
 80149e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80149e4:	ea91 0f03 	teqne	r1, r3
 80149e8:	bf02      	ittt	eq
 80149ea:	ea90 0f02 	teqeq	r0, r2
 80149ee:	2000      	moveq	r0, #0
 80149f0:	4770      	bxeq	lr
 80149f2:	f110 0f00 	cmn.w	r0, #0
 80149f6:	ea91 0f03 	teq	r1, r3
 80149fa:	bf58      	it	pl
 80149fc:	4299      	cmppl	r1, r3
 80149fe:	bf08      	it	eq
 8014a00:	4290      	cmpeq	r0, r2
 8014a02:	bf2c      	ite	cs
 8014a04:	17d8      	asrcs	r0, r3, #31
 8014a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8014a0a:	f040 0001 	orr.w	r0, r0, #1
 8014a0e:	4770      	bx	lr
 8014a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8014a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8014a18:	d102      	bne.n	8014a20 <__cmpdf2+0x64>
 8014a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8014a1e:	d107      	bne.n	8014a30 <__cmpdf2+0x74>
 8014a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8014a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8014a28:	d1d6      	bne.n	80149d8 <__cmpdf2+0x1c>
 8014a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8014a2e:	d0d3      	beq.n	80149d8 <__cmpdf2+0x1c>
 8014a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8014a34:	4770      	bx	lr
 8014a36:	bf00      	nop

08014a38 <__aeabi_cdrcmple>:
 8014a38:	4684      	mov	ip, r0
 8014a3a:	4610      	mov	r0, r2
 8014a3c:	4662      	mov	r2, ip
 8014a3e:	468c      	mov	ip, r1
 8014a40:	4619      	mov	r1, r3
 8014a42:	4663      	mov	r3, ip
 8014a44:	e000      	b.n	8014a48 <__aeabi_cdcmpeq>
 8014a46:	bf00      	nop

08014a48 <__aeabi_cdcmpeq>:
 8014a48:	b501      	push	{r0, lr}
 8014a4a:	f7ff ffb7 	bl	80149bc <__cmpdf2>
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	bf48      	it	mi
 8014a52:	f110 0f00 	cmnmi.w	r0, #0
 8014a56:	bd01      	pop	{r0, pc}

08014a58 <__aeabi_dcmpeq>:
 8014a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014a5c:	f7ff fff4 	bl	8014a48 <__aeabi_cdcmpeq>
 8014a60:	bf0c      	ite	eq
 8014a62:	2001      	moveq	r0, #1
 8014a64:	2000      	movne	r0, #0
 8014a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8014a6a:	bf00      	nop

08014a6c <__aeabi_dcmplt>:
 8014a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014a70:	f7ff ffea 	bl	8014a48 <__aeabi_cdcmpeq>
 8014a74:	bf34      	ite	cc
 8014a76:	2001      	movcc	r0, #1
 8014a78:	2000      	movcs	r0, #0
 8014a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8014a7e:	bf00      	nop

08014a80 <__aeabi_dcmple>:
 8014a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014a84:	f7ff ffe0 	bl	8014a48 <__aeabi_cdcmpeq>
 8014a88:	bf94      	ite	ls
 8014a8a:	2001      	movls	r0, #1
 8014a8c:	2000      	movhi	r0, #0
 8014a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8014a92:	bf00      	nop

08014a94 <__aeabi_dcmpge>:
 8014a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014a98:	f7ff ffce 	bl	8014a38 <__aeabi_cdrcmple>
 8014a9c:	bf94      	ite	ls
 8014a9e:	2001      	movls	r0, #1
 8014aa0:	2000      	movhi	r0, #0
 8014aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8014aa6:	bf00      	nop

08014aa8 <__aeabi_dcmpgt>:
 8014aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8014aac:	f7ff ffc4 	bl	8014a38 <__aeabi_cdrcmple>
 8014ab0:	bf34      	ite	cc
 8014ab2:	2001      	movcc	r0, #1
 8014ab4:	2000      	movcs	r0, #0
 8014ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8014aba:	bf00      	nop

08014abc <__aeabi_d2iz>:
 8014abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8014ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8014ac4:	d215      	bcs.n	8014af2 <__aeabi_d2iz+0x36>
 8014ac6:	d511      	bpl.n	8014aec <__aeabi_d2iz+0x30>
 8014ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8014acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8014ad0:	d912      	bls.n	8014af8 <__aeabi_d2iz+0x3c>
 8014ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8014ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8014ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8014ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8014ae6:	bf18      	it	ne
 8014ae8:	4240      	negne	r0, r0
 8014aea:	4770      	bx	lr
 8014aec:	f04f 0000 	mov.w	r0, #0
 8014af0:	4770      	bx	lr
 8014af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8014af6:	d105      	bne.n	8014b04 <__aeabi_d2iz+0x48>
 8014af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8014afc:	bf08      	it	eq
 8014afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8014b02:	4770      	bx	lr
 8014b04:	f04f 0000 	mov.w	r0, #0
 8014b08:	4770      	bx	lr
 8014b0a:	bf00      	nop

08014b0c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014b0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014b0e:	e003      	b.n	8014b18 <LoopCopyDataInit>

08014b10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014b10:	4b0a      	ldr	r3, [pc, #40]	; (8014b3c <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 8014b12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014b14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014b16:	3104      	adds	r1, #4

08014b18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014b18:	4809      	ldr	r0, [pc, #36]	; (8014b40 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8014b1a:	4b0a      	ldr	r3, [pc, #40]	; (8014b44 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8014b1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014b1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014b20:	d3f6      	bcc.n	8014b10 <CopyDataInit>
  ldr  r2, =_sbss
 8014b22:	4a09      	ldr	r2, [pc, #36]	; (8014b48 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 8014b24:	e002      	b.n	8014b2c <LoopFillZerobss>

08014b26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014b26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014b28:	f842 3b04 	str.w	r3, [r2], #4

08014b2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014b2c:	4b07      	ldr	r3, [pc, #28]	; (8014b4c <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8014b2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014b30:	d3f9      	bcc.n	8014b26 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014b32:	f7eb fedf 	bl	80008f4 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8014b36:	f7eb fb87 	bl	8000248 <main>
  bx  lr    
 8014b3a:	4770      	bx	lr
 8014b3c:	08014d84 	.word	0x08014d84
 8014b40:	20000000 	.word	0x20000000
 8014b44:	200008f4 	.word	0x200008f4
 8014b48:	200008f4 	.word	0x200008f4
 8014b4c:	20000ca0 	.word	0x20000ca0

08014b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014b50:	e7fe      	b.n	8014b50 <ADC_IRQHandler>
 8014b52:	0000      	movs	r0, r0
 8014b54:	200d200a 	.word	0x200d200a
 8014b58:	706d6554 	.word	0x706d6554
 8014b5c:	74617265 	.word	0x74617265
 8014b60:	20657275 	.word	0x20657275
 8014b64:	736e6573 	.word	0x736e6573
 8014b68:	3a20726f 	.word	0x3a20726f
 8014b6c:	00000020 	.word	0x00000020
 8014b70:	200d200a 	.word	0x200d200a
 8014b74:	66312e25 	.word	0x66312e25
 8014b78:	00000000 	.word	0x00000000

08014b7c <GPIO_PIN>:
 8014b7c:	00000200                                ....

08014b80 <GPIO_CLK>:
 8014b80:	00000002                                ....

08014b84 <COM_USART_CLK>:
 8014b84:	00040000                                ....

08014b88 <COM_TX_PORT_CLK>:
 8014b88:	00000008                                ....

08014b8c <COM_RX_PORT_CLK>:
 8014b8c:	00000008                                ....

08014b90 <COM_TX_PIN>:
 8014b90:	00000100                                ....

08014b94 <COM_RX_PIN>:
 8014b94:	00000200                                ....

08014b98 <COM_TX_PIN_SOURCE>:
 8014b98:	00000008                                ....

08014b9c <COM_RX_PIN_SOURCE>:
 8014b9c:	00000009                                ....

08014ba0 <COM_TX_AF>:
 8014ba0:	00000007                                ....

08014ba4 <COM_RX_AF>:
 8014ba4:	00000007                                ....

08014ba8 <Escalator8bit>:
 8014ba8:	99663300 0000ffcc                       .3f.....

08014bb0 <_global_impure_ptr>:
 8014bb0:	20000040                                @.. 

08014bb4 <blanks.3927>:
 8014bb4:	20202020 20202020 20202020 20202020                     

08014bc4 <zeroes.3928>:
 8014bc4:	30303030 30303030 30303030 30303030     0000000000000000
 8014bd4:	00000000                                ....

08014bd8 <p05.2449>:
 8014bd8:	00000005 00000019 0000007d 00000000     ........}.......

08014be8 <__mprec_tens>:
 8014be8:	00000000 3ff00000 00000000 40240000     .......?......$@
 8014bf8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8014c08:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8014c18:	00000000 412e8480 00000000 416312d0     .......A......cA
 8014c28:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8014c38:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8014c48:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8014c58:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8014c68:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8014c78:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8014c88:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8014c98:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8014ca8:	79d99db4 44ea7843                       ...yCx.D

08014cb0 <__mprec_tinytens>:
 8014cb0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8014cc0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8014cd0:	64ac6f43 0ac80628                       Co.d(...

08014cd8 <__mprec_bigtens>:
 8014cd8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8014ce8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8014cf8:	7f73bf3c 75154fdd                       <.s..O.u

08014d00 <blanks.3871>:
 8014d00:	20202020 20202020 20202020 20202020                     

08014d10 <zeroes.3872>:
 8014d10:	30303030 30303030 30303030 30303030     0000000000000000
 8014d20:	00000043 00464e49 00666e69 004e414e     C...INF.inf.NAN.
 8014d30:	006e616e 33323130 37363534 42413938     nan.0123456789AB
 8014d40:	46454443 00000000 33323130 37363534     CDEF....01234567
 8014d50:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
 8014d60:	0000296c 00000030 69666e49 7974696e     l)..0...Infinity
 8014d70:	00000000 004e614e 49534f50 00000058     ....NaN.POSIX...
 8014d80:	0000002e                                ....
