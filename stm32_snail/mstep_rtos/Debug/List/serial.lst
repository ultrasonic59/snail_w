###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         05/Jun/2020  00:03:29
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\serial.c
#    Command line =
#        -f C:\Users\vagol\AppData\Local\Temp\EW32D2.tmp
#        (D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\serial.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List\serial.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj\serial.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\serial.c
      1          /*
      2           * FreeRTOS Kernel V10.2.1
      3           * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          /*
     29          	BASIC INTERRUPT DRIVEN SERIAL PORT DRIVER FOR UART0.
     30          */
     31          
     32          /* Scheduler includes. */
     33          #include "FreeRTOS.h"
     34          #include "queue.h"
     35          #include "semphr.h"
     36          
     37          /* Library includes. */
     38          ////#include "stm32f10x_lib.h"
     39          
     40          /* Demo application includes. */
     41          ///// #include "_serial.h"
     42          /*-----------------------------------------------------------*/
     43          
     44          /* Misc defines. */
     45          #define serINVALID_QUEUE				( ( QueueHandle_t ) 0 )
     46          #define serNO_BLOCK						( ( TickType_t ) 0 )
     47          #define serTX_BLOCK_TIME				( 40 / portTICK_PERIOD_MS )
     48          
     49          /*-----------------------------------------------------------*/
     50          
     51          /* The queue used to hold received characters. */
     52          static QueueHandle_t xRxedChars;
     53          ////static QueueHandle_t xCharsForTx;
     54          
     55          /*-----------------------------------------------------------*/
     56          
     57          /* UART interrupt handler. */
     58          void vUARTInterruptHandler( void );
     59          
     60          /*-----------------------------------------------------------*/
     61          
     62          /*
     63           * See the serial2.h header file.
     64           */
     65          xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
     66          {
     67          xComPortHandle xReturn=0;
     68          
     69          #if 0
     70          USART_InitTypeDef USART_InitStructure;
     71          NVIC_InitTypeDef NVIC_InitStructure;
     72          GPIO_InitTypeDef GPIO_InitStructure;
     73          
     74          	/* Create the queues used to hold Rx/Tx characters. */
     75          	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     76          	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     77          	
     78          	/* If the queue/semaphore was created correctly then setup the serial port
     79          	hardware. */
     80          	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
     81          	{
     82          		/* Enable USART1 clock */
     83          		RCC_APB2PeriphClockCmd( RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE );	
     84          
     85          		/* Configure USART1 Rx (PA10) as input floating */
     86          		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
     87          		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     88          		GPIO_Init( GPIOA, &GPIO_InitStructure );
     89          		
     90          		/* Configure USART1 Tx (PA9) as alternate function push-pull */
     91          		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
     92          		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     93          		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     94          		GPIO_Init( GPIOA, &GPIO_InitStructure );
     95          
     96          		USART_InitStructure.USART_BaudRate = ulWantedBaud;
     97          		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     98          		USART_InitStructure.USART_StopBits = USART_StopBits_1;
     99          		USART_InitStructure.USART_Parity = USART_Parity_No ;
    100          		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    101          		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    102          		USART_InitStructure.USART_Clock = USART_Clock_Disable;
    103          		USART_InitStructure.USART_CPOL = USART_CPOL_Low;
    104          		USART_InitStructure.USART_CPHA = USART_CPHA_2Edge;
    105          		USART_InitStructure.USART_LastBit = USART_LastBit_Disable;
    106          		
    107          		USART_Init( USART1, &USART_InitStructure );
    108          		
    109          		USART_ITConfig( USART1, USART_IT_RXNE, ENABLE );
    110          		
    111          		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
    112          		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_KERNEL_INTERRUPT_PRIORITY;
    113          		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    114          		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    115          		NVIC_Init( &NVIC_InitStructure );
    116          		
    117          		USART_Cmd( USART1, ENABLE );		
    118          	}
    119          	else
    120          	{
    121          		xReturn = ( xComPortHandle ) 0;
    122          	}
    123          #endif
    124                  
    125          	/* This demo file only supports a single port but we have to return
    126          	something to comply with the standard demo header file. */
    127          	return xReturn;
    128          }
    129          /*-----------------------------------------------------------*/
    130          
    131          signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, TickType_t xBlockTime )
    132          {
    133          	/* The port handle is not required as this driver only supports one port. */
    134          	( void ) pxPort;
    135          
    136          	/* Get the next character from the buffer.  Return false if no characters
    137          	are available, or arrive before xBlockTime expires. */
    138          	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
    139          	{
    140          		return pdTRUE;
    141          	}
    142          	else
    143          	{
    144          		return pdFALSE;
    145          	}
    146          }
    147          /*-----------------------------------------------------------*/
    148          
    149          void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usStringLength )
    150          {
    151          signed char *pxNext;
    152          
    153          	/* A couple of parameters that this port does not use. */
    154          	( void ) usStringLength;
    155          	( void ) pxPort;
    156          
    157          	/* NOTE: This implementation does not handle the queue being full as no
    158          	block time is used! */
    159          
    160          	/* The port handle is not required as this driver only supports UART1. */
    161          	( void ) pxPort;
    162          
    163          	/* Send each character in the string, one at a time. */
    164          	pxNext = ( signed char * ) pcString;
    165          	while( *pxNext )
    166          	{
    167          		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
    168          		pxNext++;
    169          	}
    170          }
    171          /*-----------------------------------------------------------*/
    172          
    173          signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )
    174          {
    175          signed portBASE_TYPE xReturn=0;
    176          #if 0
    177          	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
    178          	{
    179          		xReturn = pdPASS;
    180          		USART_ITConfig( USART1, USART_IT_TXE, ENABLE );
    181          	}
    182          	else
    183          	{
    184          		xReturn = pdFAIL;
    185          	}
    186          #endif
    187          	return xReturn;
    188          }
    189          /*-----------------------------------------------------------*/
    190          
    191          void vSerialClose( xComPortHandle xPort )
    192          {
    193          	/* Not supported as not required by the demo application. */
    194          }
    195          /*-----------------------------------------------------------*/
    196          
    197          void vUARTInterruptHandler( void )
    198          {
    199          ////portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    200          ////char cChar;
    201          #if 0
    202          	if( USART_GetITStatus( USART1, USART_IT_TXE ) == SET )
    203          	{
    204          		/* The interrupt was caused by the THR becoming empty.  Are there any
    205          		more characters to transmit? */
    206          		if( xQueueReceiveFromISR( xCharsForTx, &cChar, &xHigherPriorityTaskWoken ) == pdTRUE )
    207          		{
    208          			/* A character was retrieved from the queue so can be sent to the
    209          			THR now. */
    210          			USART_SendData( USART1, cChar );
    211          		}
    212          		else
    213          		{
    214          			USART_ITConfig( USART1, USART_IT_TXE, DISABLE );		
    215          		}		
    216          	}
    217          	
    218          	if( USART_GetITStatus( USART1, USART_IT_RXNE ) == SET )
    219          	{
    220          		cChar = USART_ReceiveData( USART1 );
    221          		xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
    222          	}	
    223          	
    224          	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
    225          #endif        
    226          }
    227          
    228          
    229          
    230          
    231          
    232          	

Errors: 7
Warnings: 1
