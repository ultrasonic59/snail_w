###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         20/Jun/2020  14:38:25
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\common\libraries\src\stm32f2xx_rcc.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW140E.tmp
#        (D:\proj\velograph\snail\stm32_snail\common\libraries\src\stm32f2xx_rcc.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\dbg\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List\stm32f2xx_rcc.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj\stm32f2xx_rcc.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\common\libraries\src\stm32f2xx_rcc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_rcc.c
      4            * @author  MCD Application Team
      5            * @version V1.1.2
      6            * @date    05-March-2012 
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Reset and clock control (RCC) peripheral:           
      9            *           - Internal/external clocks, PLL, CSS and MCO configuration
     10            *           - System, AHB and APB busses clocks configuration
     11            *           - Peripheral clocks configuration
     12            *           - Interrupts and flags management
     13            *
     14            *  @verbatim
     15            *               
     16            *          ===================================================================
     17            *                               RCC specific features
     18            *          ===================================================================
     19            *    
     20            *          After reset the device is running from Internal High Speed oscillator 
     21            *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
     22            *          and I-Cache are disabled, and all peripherals are off except internal
     23            *          SRAM, Flash and JTAG.
     24            *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
     25            *             all peripherals mapped on these busses are running at HSI speed.
     26            *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
     27            *           - All GPIOs are in input floating state, except the JTAG pins which
     28            *             are assigned to be used for debug purpose.
     29            *        
     30            *          Once the device started from reset, the user application has to:        
     31            *           - Configure the clock source to be used to drive the System clock
     32            *             (if the application needs higher frequency/performance)
     33            *           - Configure the System clock frequency and Flash settings  
     34            *           - Configure the AHB and APB busses prescalers
     35            *           - Enable the clock for the peripheral(s) to be used
     36            *           - Configure the clock source(s) for peripherals which clocks are not
     37            *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
     38            *                        
     39            *  @endverbatim
     40            *    
     41            ******************************************************************************
     42            * @attention
     43            *
     44            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     45            *
     46            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     47            * You may not use this file except in compliance with the License.
     48            * You may obtain a copy of the License at:
     49            *
     50            *        http://www.st.com/software_license_agreement_liberty_v2
     51            *
     52            * Unless required by applicable law or agreed to in writing, software 
     53            * distributed under the License is distributed on an "AS IS" BASIS, 
     54            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     55            * See the License for the specific language governing permissions and
     56            * limitations under the License.
     57            *
     58            ******************************************************************************
     59            */
     60          
     61          /* Includes ------------------------------------------------------------------*/
     62          ///#include "stm32f2xx_rcc.h"
     63          #include "stm32f2xx_conf.h"
     64          
     65          /** @addtogroup STM32F2xx_StdPeriph_Driver
     66            * @{
     67            */
     68          
     69          /** @defgroup RCC 
     70            * @brief RCC driver modules
     71            * @{
     72            */ 
     73          
     74          /* Private typedef -----------------------------------------------------------*/
     75          /* Private define ------------------------------------------------------------*/
     76          /* ------------ RCC registers bit address in the alias region ----------- */
     77          #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
     78          /* --- CR Register ---*/
     79          /* Alias word address of HSION bit */
     80          #define CR_OFFSET                 (RCC_OFFSET + 0x00)
     81          #define HSION_BitNumber           0x00
     82          #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
     83          /* Alias word address of CSSON bit */
     84          #define CSSON_BitNumber           0x13
     85          #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
     86          /* Alias word address of PLLON bit */
     87          #define PLLON_BitNumber           0x18
     88          #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
     89          /* Alias word address of PLLI2SON bit */
     90          #define PLLI2SON_BitNumber        0x1A
     91          #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
     92          
     93          /* --- CFGR Register ---*/
     94          /* Alias word address of I2SSRC bit */
     95          #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
     96          #define I2SSRC_BitNumber          0x17
     97          #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
     98          
     99          /* --- BDCR Register ---*/
    100          /* Alias word address of RTCEN bit */
    101          #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
    102          #define RTCEN_BitNumber           0x0F
    103          #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
    104          /* Alias word address of BDRST bit */
    105          #define BDRST_BitNumber           0x10
    106          #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
    107          /* --- CSR Register ---*/
    108          /* Alias word address of LSION bit */
    109          #define CSR_OFFSET                (RCC_OFFSET + 0x74)
    110          #define LSION_BitNumber           0x00
    111          #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
    112          /* ---------------------- RCC registers bit mask ------------------------ */
    113          /* CFGR register bit mask */
    114          #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
    115          #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
    116          
    117          /* RCC Flag Mask */
    118          #define FLAG_MASK                 ((uint8_t)0x1F)
    119          
    120          /* CR register byte 3 (Bits[23:16]) base address */
    121          #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
    122          
    123          /* CIR register byte 2 (Bits[15:8]) base address */
    124          #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
    125          
    126          /* CIR register byte 3 (Bits[23:16]) base address */
    127          #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
    128          
    129          /* BDCR register base address */
    130          #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
    131          
    132          /* Private macro -------------------------------------------------------------*/
    133          /* Private variables ---------------------------------------------------------*/
    134          static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
    135          
    136          /* Private function prototypes -----------------------------------------------*/
    137          /* Private functions ---------------------------------------------------------*/
    138          
    139          /** @defgroup RCC_Private_Functions
    140            * @{
    141            */ 
    142          
    143          /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
    144           *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
    145           *
    146          @verbatim   
    147           ===============================================================================
    148                Internal/external clocks, PLL, CSS and MCO configuration functions
    149           ===============================================================================  
    150          
    151            This section provide functions allowing to configure the internal/external clocks,
    152            PLLs, CSS and MCO pins.
    153            
    154            1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
    155               the PLL as System clock source.
    156          
    157            2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
    158               clock source.
    159          
    160            3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
    161               through the PLL as System clock source. Can be used also as RTC clock source.
    162          
    163            4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
    164          
    165            5. PLL (clocked by HSI or HSE), featuring two different output clocks:
    166                - The first output is used to generate the high speed system clock (up to 120 MHz)
    167                - The second output is used to generate the clock for the USB OTG FS (48 MHz),
    168                  the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
    169          
    170            6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
    171               high-quality audio performance on the I2S interface.
    172            
    173            7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
    174               (HSE used directly or through PLL as System clock source), the System clock
    175               is automatically switched to HSI and an interrupt is generated if enabled. 
    176               The interrupt is linked to the Cortex-M3 NMI (Non-Maskable Interrupt) 
    177               exception vector.   
    178          
    179            8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
    180               clock (through a configurable prescaler) on PA8 pin.
    181          
    182            9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
    183               clock (through a configurable prescaler) on PC9 pin.
    184          
    185          @endverbatim
    186            * @{
    187            */
    188          
    189          /**
    190            * @brief  Resets the RCC clock configuration to the default reset state.
    191            * @note   The default reset state of the clock configuration is given below:
    192            *            - HSI ON and used as system clock source
    193            *            - HSE, PLL and PLLI2S OFF
    194            *            - AHB, APB1 and APB2 prescaler set to 1.
    195            *            - CSS, MCO1 and MCO2 OFF
    196            *            - All interrupts disabled
    197            * @note   This function doesn't modify the configuration of the
    198            *            - Peripheral clocks
    199            *            - LSI, LSE and RTC clocks 
    200            * @param  None
    201            * @retval None
    202            */
    203          void RCC_DeInit(void)
    204          {
    205            /* Set HSION bit */
    206            RCC->CR |= (uint32_t)0x00000001;
    207          
    208            /* Reset CFGR register */
    209            RCC->CFGR = 0x00000000;
    210          
    211            /* Reset HSEON, CSSON and PLLON bits */
    212            RCC->CR &= (uint32_t)0xFEF6FFFF;
    213          
    214            /* Reset PLLCFGR register */
    215            RCC->PLLCFGR = 0x24003010;
    216          
    217            /* Reset HSEBYP bit */
    218            RCC->CR &= (uint32_t)0xFFFBFFFF;
    219          
    220            /* Disable all interrupts */
    221            RCC->CIR = 0x00000000;
    222          }
    223          
    224          /**
    225            * @brief  Configures the External High Speed oscillator (HSE).
    226            * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
    227            *         software should wait on HSERDY flag to be set indicating that HSE clock
    228            *         is stable and can be used to clock the PLL and/or system clock.
    229            * @note   HSE state can not be changed if it is used directly or through the
    230            *         PLL as system clock. In this case, you have to select another source
    231            *         of the system clock then change the HSE state (ex. disable it).
    232            * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
    233            * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
    234            *         was previously enabled you have to enable it again after calling this
    235            *         function.    
    236            * @param  RCC_HSE: specifies the new state of the HSE.
    237            *          This parameter can be one of the following values:
    238            *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
    239            *                              6 HSE oscillator clock cycles.
    240            *            @arg RCC_HSE_ON: turn ON the HSE oscillator
    241            *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
    242            * @retval None
    243            */
    244          void RCC_HSEConfig(uint8_t RCC_HSE)
    245          {
    246            /* Check the parameters */
    247            assert_param(IS_RCC_HSE(RCC_HSE));
    248          
    249            /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
    250            *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
    251          
    252            /* Set the new HSE configuration -------------------------------------------*/
    253            *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
    254          }
    255          
    256          /**
    257            * @brief  Waits for HSE start-up.
    258            * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
    259            *         this flag is set, otherwise returns ERROR if the timeout is reached 
    260            *         and this flag is not set. The timeout value is defined by the constant
    261            *         HSE_STARTUP_TIMEOUT in stm32f2xx.h file. You can tailor it depending
    262            *         on the HSE crystal used in your application. 
    263            * @param  None
    264            * @retval An ErrorStatus enumeration value:
    265            *          - SUCCESS: HSE oscillator is stable and ready to use
    266            *          - ERROR: HSE oscillator not yet ready
    267            */
    268          ErrorStatus RCC_WaitForHSEStartUp(void)
    269          {
    270            __IO uint32_t startupcounter = 0;
    271            ErrorStatus status = ERROR;
    272            FlagStatus hsestatus = RESET;
    273            /* Wait till HSE is ready and if Time out is reached exit */
    274            do
    275            {
    276              hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    277              startupcounter++;
    278            } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
    279          
    280            if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    281            {
    282              status = SUCCESS;
    283            }
    284            else
    285            {
    286              status = ERROR;
    287            }
    288            return (status);
    289          }
    290          
    291          /**
    292            * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
    293            * @note   The calibration is used to compensate for the variations in voltage
    294            *         and temperature that influence the frequency of the internal HSI RC.
    295            * @param  HSICalibrationValue: specifies the calibration trimming value.
    296            *         This parameter must be a number between 0 and 0x1F.
    297            * @retval None
    298            */
    299          void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
    300          {
    301            uint32_t tmpreg = 0;
    302            /* Check the parameters */
    303            assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
    304          
    305            tmpreg = RCC->CR;
    306          
    307            /* Clear HSITRIM[4:0] bits */
    308            tmpreg &= ~RCC_CR_HSITRIM;
    309          
    310            /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
    311            tmpreg |= (uint32_t)HSICalibrationValue << 3;
    312          
    313            /* Store the new value */
    314            RCC->CR = tmpreg;
    315          }
    316          
    317          /**
    318            * @brief  Enables or disables the Internal High Speed oscillator (HSI).
    319            * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
    320            *         It is used (enabled by hardware) as system clock source after startup
    321            *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
    322            *         of the HSE used directly or indirectly as system clock (if the Clock
    323            *         Security System CSS is enabled).             
    324            * @note   HSI can not be stopped if it is used as system clock source. In this case,
    325            *         you have to select another source of the system clock then stop the HSI.  
    326            * @note   After enabling the HSI, the application software should wait on HSIRDY
    327            *         flag to be set indicating that HSI clock is stable and can be used as
    328            *         system clock source.  
    329            * @param  NewState: new state of the HSI.
    330            *          This parameter can be: ENABLE or DISABLE.
    331            * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
    332            *         clock cycles.  
    333            * @retval None
    334            */
    335          void RCC_HSICmd(FunctionalState NewState)
    336          {
    337            /* Check the parameters */
    338            assert_param(IS_FUNCTIONAL_STATE(NewState));
    339          
    340            *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    341          }
    342          
    343          /**
    344            * @brief  Configures the External Low Speed oscillator (LSE).
    345            * @note   As the LSE is in the Backup domain and write access is denied to
    346            *         this domain after reset, you have to enable write access using 
    347            *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
    348            *         (to be done once after reset).  
    349            * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
    350            *         software should wait on LSERDY flag to be set indicating that LSE clock
    351            *         is stable and can be used to clock the RTC.
    352            * @param  RCC_LSE: specifies the new state of the LSE.
    353            *          This parameter can be one of the following values:
    354            *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
    355            *                              6 LSE oscillator clock cycles.
    356            *            @arg RCC_LSE_ON: turn ON the LSE oscillator
    357            *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
    358            * @retval None
    359            */
    360          void RCC_LSEConfig(uint8_t RCC_LSE)
    361          {
    362            /* Check the parameters */
    363            assert_param(IS_RCC_LSE(RCC_LSE));
    364          
    365            /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
    366            /* Reset LSEON bit */
    367            *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    368          
    369            /* Reset LSEBYP bit */
    370            *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    371          
    372            /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
    373            switch (RCC_LSE)
    374            {
    375              case RCC_LSE_ON:
    376                /* Set LSEON bit */
    377                *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    378                break;
    379              case RCC_LSE_Bypass:
    380                /* Set LSEBYP and LSEON bits */
    381                *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    382                break;
    383              default:
    384                break;
    385            }
    386          }
    387          
    388          /**
    389            * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
    390            * @note   After enabling the LSI, the application software should wait on 
    391            *         LSIRDY flag to be set indicating that LSI clock is stable and can
    392            *         be used to clock the IWDG and/or the RTC.
    393            * @note   LSI can not be disabled if the IWDG is running.  
    394            * @param  NewState: new state of the LSI.
    395            *          This parameter can be: ENABLE or DISABLE.
    396            * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
    397            *         clock cycles. 
    398            * @retval None
    399            */
    400          void RCC_LSICmd(FunctionalState NewState)
    401          {
    402            /* Check the parameters */
    403            assert_param(IS_FUNCTIONAL_STATE(NewState));
    404          
    405            *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    406          }
    407          
    408          /**
    409            * @brief  Configures the main PLL clock source, multiplication and division factors.
    410            * @note   This function must be used only when the main PLL is disabled.
    411            *  
    412            * @param  RCC_PLLSource: specifies the PLL entry clock source.
    413            *          This parameter can be one of the following values:
    414            *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
    415            *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
    416            * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
    417            *  
    418            * @param  PLLM: specifies the division factor for PLL VCO input clock
    419            *          This parameter must be a number between 0 and 63.
    420            * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
    421            *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
    422            *         of 2 MHz to limit PLL jitter.
    423            *  
    424            * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
    425            *          This parameter must be a number between 192 and 432.
    426            * @note   You have to set the PLLN parameter correctly to ensure that the VCO
    427            *         output frequency is between 192 and 432 MHz.
    428            *   
    429            * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
    430            *          This parameter must be a number in the range {2, 4, 6, or 8}.
    431            * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
    432            *         the System clock frequency.
    433            *  
    434            * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
    435            *          This parameter must be a number between 4 and 15.
    436            * @note   If the USB OTG FS is used in your application, you have to set the
    437            *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
    438            *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
    439            *         correctly.
    440            *   
    441            * @retval None
    442            */
    443          void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
    444          {
    445            /* Check the parameters */
    446            assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
    447            assert_param(IS_RCC_PLLM_VALUE(PLLM));
    448            assert_param(IS_RCC_PLLN_VALUE(PLLN));
    449            assert_param(IS_RCC_PLLP_VALUE(PLLP));
    450            assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
    451          
    452            RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
    453                           (PLLQ << 24);
    454          }
    455          
    456          /**
    457            * @brief  Enables or disables the main PLL.
    458            * @note   After enabling the main PLL, the application software should wait on 
    459            *         PLLRDY flag to be set indicating that PLL clock is stable and can
    460            *         be used as system clock source.
    461            * @note   The main PLL can not be disabled if it is used as system clock source
    462            * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
    463            * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
    464            * @retval None
    465            */
    466          void RCC_PLLCmd(FunctionalState NewState)
    467          {
    468            /* Check the parameters */
    469            assert_param(IS_FUNCTIONAL_STATE(NewState));
    470            *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    471          }
    472          
    473          /**
    474            * @brief  Configures the PLLI2S clock multiplication and division factors.
    475            *   
    476            * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
    477            * @note   This function must be used only when the PLLI2S is disabled.
    478            * @note   PLLI2S clock source is common with the main PLL (configured in 
    479            *         RCC_PLLConfig function )  
    480            *             
    481            * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
    482            *          This parameter must be a number between 192 and 432.
    483            * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
    484            *         output frequency is between 192 and 432 MHz.
    485            *    
    486            * @param  PLLI2SR: specifies the division factor for I2S clock
    487            *          This parameter must be a number between 2 and 7.
    488            * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
    489            *         on the I2S clock frequency.
    490            *   
    491            * @retval None
    492            */
    493          void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
    494          {
    495            /* Check the parameters */
    496            assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
    497            assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
    498          
    499            RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
    500          }
    501          
    502          /**
    503            * @brief  Enables or disables the PLLI2S.
    504            * @note   PLLI2S is available only in RevisionB and RevisionY 
    505            * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
    506            * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
    507            * @retval None
    508            */
    509          void RCC_PLLI2SCmd(FunctionalState NewState)
    510          {
    511            /* Check the parameters */
    512            assert_param(IS_FUNCTIONAL_STATE(NewState));
    513            *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
    514          }
    515          
    516          /**
    517            * @brief  Enables or disables the Clock Security System.
    518            * @note   If a failure is detected on the HSE oscillator clock, this oscillator
    519            *         is automatically disabled and an interrupt is generated to inform the
    520            *         software about the failure (Clock Security System Interrupt, CSSI),
    521            *         allowing the MCU to perform rescue operations. The CSSI is linked to 
    522            *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
    523            * @param  NewState: new state of the Clock Security System.
    524            *         This parameter can be: ENABLE or DISABLE.
    525            * @retval None
    526            */
    527          void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
    528          {
    529            /* Check the parameters */
    530            assert_param(IS_FUNCTIONAL_STATE(NewState));
    531            *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    532          }
    533          
    534          /**
    535            * @brief  Selects the clock source to output on MCO1 pin(PA8).
    536            * @note   PA8 should be configured in alternate function mode.
    537            * @param  RCC_MCO1Source: specifies the clock source to output.
    538            *          This parameter can be one of the following values:
    539            *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
    540            *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
    541            *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
    542            *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
    543            * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
    544            *          This parameter can be one of the following values:
    545            *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
    546            *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
    547            *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
    548            *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
    549            *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
    550            * @retval None
    551            */
    552          void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
    553          {
    554            uint32_t tmpreg = 0;
    555            
    556            /* Check the parameters */
    557            assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
    558            assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
    559          
    560            tmpreg = RCC->CFGR;
    561          
    562            /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
    563            tmpreg &= CFGR_MCO1_RESET_MASK;
    564          
    565            /* Select MCO1 clock source and prescaler */
    566            tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
    567          
    568            /* Store the new value */
    569            RCC->CFGR = tmpreg;  
    570          }
    571          
    572          /**
    573            * @brief  Selects the clock source to output on MCO2 pin(PC9).
    574            * @note   PC9 should be configured in alternate function mode.
    575            * @param  RCC_MCO2Source: specifies the clock source to output.
    576            *          This parameter can be one of the following values:
    577            *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
    578            *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
    579            *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
    580            *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
    581            * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
    582            *          This parameter can be one of the following values:
    583            *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
    584            *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
    585            *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
    586            *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
    587            *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
    588            * @retval None
    589            */
    590          void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
    591          {
    592            uint32_t tmpreg = 0;
    593            
    594            /* Check the parameters */
    595            assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
    596            assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
    597            
    598            tmpreg = RCC->CFGR;
    599            
    600            /* Clear MCO2 and MCO2PRE[2:0] bits */
    601            tmpreg &= CFGR_MCO2_RESET_MASK;
    602          
    603            /* Select MCO2 clock source and prescaler */
    604            tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
    605          
    606            /* Store the new value */
    607            RCC->CFGR = tmpreg;  
    608          }
    609          
    610          /**
    611            * @}
    612            */
    613          
    614          /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
    615           *  @brief   System, AHB and APB busses clocks configuration functions
    616           *
    617          @verbatim   
    618           ===============================================================================
    619                       System, AHB and APB busses clocks configuration functions
    620           ===============================================================================  
    621          
    622            This section provide functions allowing to configure the System, AHB, APB1 and 
    623            APB2 busses clocks.
    624            
    625            1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
    626               HSE and PLL.
    627               The AHB clock (HCLK) is derived from System clock through configurable prescaler
    628               and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
    629               APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
    630               configurable prescalers and used to clock the peripherals mapped on these busses.
    631               You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
    632          
    633          @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
    634                 - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
    635                    from an external clock mapped on the I2S_CKIN pin. 
    636                    You have to use RCC_I2SCLKConfig() function to configure this clock. 
    637                 - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
    638                    divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
    639                    functions to configure this clock. 
    640                 - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
    641                    to work correctly, while the SDIO require a frequency equal or lower than
    642                    to 48. This clock is derived of the main PLL through PLLQ divider.
    643                 - IWDG clock which is always the LSI clock.
    644                 
    645            2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
    646               Depending on the device voltage range, the maximum frequency should be 
    647               adapted accordingly:
    648           +-------------------------------------------------------------------------------------+     
    649           | Latency       |                HCLK clock frequency (MHz)                           |
    650           |               |---------------------------------------------------------------------|     
    651           |               | voltage range  | voltage range  | voltage range   | voltage range   |
    652           |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
    653           |---------------|----------------|----------------|-----------------|-----------------|              
    654           |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
    655           |---------------|----------------|----------------|-----------------|-----------------|   
    656           |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
    657           |---------------|----------------|----------------|-----------------|-----------------|   
    658           |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
    659           |---------------|----------------|----------------|-----------------|-----------------| 
    660           |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
    661           |---------------|----------------|----------------|-----------------|-----------------| 
    662           |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
    663           |---------------|----------------|----------------|-----------------|-----------------| 
    664           |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
    665           |---------------|----------------|----------------|-----------------|-----------------| 
    666           |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
    667           |---------------|----------------|----------------|-----------------|-----------------| 
    668           |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
    669           +-------------------------------------------------------------------------------------+    
    670          
    671          
    672          @endverbatim
    673            * @{
    674            */
    675          
    676          /**
    677            * @brief  Configures the system clock (SYSCLK).
    678            * @note   The HSI is used (enabled by hardware) as system clock source after
    679            *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
    680            *         of failure of the HSE used directly or indirectly as system clock
    681            *         (if the Clock Security System CSS is enabled).
    682            * @note   A switch from one clock source to another occurs only if the target
    683            *         clock source is ready (clock stable after startup delay or PLL locked). 
    684            *         If a clock source which is not yet ready is selected, the switch will
    685            *         occur when the clock source will be ready. 
    686            *         You can use RCC_GetSYSCLKSource() function to know which clock is
    687            *         currently used as system clock source. 
    688            * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
    689            *          This parameter can be one of the following values:
    690            *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
    691            *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
    692            *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
    693            * @retval None
    694            */
    695          void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
    696          {
    697            uint32_t tmpreg = 0;
    698          
    699            /* Check the parameters */
    700            assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
    701          
    702            tmpreg = RCC->CFGR;
    703          
    704            /* Clear SW[1:0] bits */
    705            tmpreg &= ~RCC_CFGR_SW;
    706          
    707            /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
    708            tmpreg |= RCC_SYSCLKSource;
    709          
    710            /* Store the new value */
    711            RCC->CFGR = tmpreg;
    712          }
    713          
    714          /**
    715            * @brief  Returns the clock source used as system clock.
    716            * @param  None
    717            * @retval The clock source used as system clock. The returned value can be one
    718            *         of the following:
    719            *              - 0x00: HSI used as system clock
    720            *              - 0x04: HSE used as system clock
    721            *              - 0x08: PLL used as system clock
    722            */
    723          uint8_t RCC_GetSYSCLKSource(void)
    724          {
    725            return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
    726          }
    727          
    728          /**
    729            * @brief  Configures the AHB clock (HCLK).
    730            * @note   Depending on the device voltage range, the software has to set correctly
    731            *         these bits to ensure that HCLK not exceed the maximum allowed frequency
    732            *         (for more details refer to section above
    733            *           "CPU, AHB and APB busses clocks configuration functions")
    734            * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
    735            *         the system clock (SYSCLK).
    736            *          This parameter can be one of the following values:
    737            *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
    738            *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
    739            *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
    740            *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
    741            *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
    742            *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
    743            *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
    744            *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
    745            *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
    746            * @retval None
    747            */
    748          void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
    749          {
    750            uint32_t tmpreg = 0;
    751            
    752            /* Check the parameters */
    753            assert_param(IS_RCC_HCLK(RCC_SYSCLK));
    754          
    755            tmpreg = RCC->CFGR;
    756          
    757            /* Clear HPRE[3:0] bits */
    758            tmpreg &= ~RCC_CFGR_HPRE;
    759          
    760            /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
    761            tmpreg |= RCC_SYSCLK;
    762          
    763            /* Store the new value */
    764            RCC->CFGR = tmpreg;
    765          }
    766          
    767          
    768          /**
    769            * @brief  Configures the Low Speed APB clock (PCLK1).
    770            * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
    771            *         the AHB clock (HCLK).
    772            *          This parameter can be one of the following values:
    773            *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
    774            *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
    775            *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
    776            *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
    777            *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
    778            * @retval None
    779            */
    780          void RCC_PCLK1Config(uint32_t RCC_HCLK)
    781          {
    782            uint32_t tmpreg = 0;
    783          
    784            /* Check the parameters */
    785            assert_param(IS_RCC_PCLK(RCC_HCLK));
    786          
    787            tmpreg = RCC->CFGR;
    788          
    789            /* Clear PPRE1[2:0] bits */
    790            tmpreg &= ~RCC_CFGR_PPRE1;
    791          
    792            /* Set PPRE1[2:0] bits according to RCC_HCLK value */
    793            tmpreg |= RCC_HCLK;
    794          
    795            /* Store the new value */
    796            RCC->CFGR = tmpreg;
    797          }
    798          
    799          /**
    800            * @brief  Configures the High Speed APB clock (PCLK2).
    801            * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
    802            *         the AHB clock (HCLK).
    803            *          This parameter can be one of the following values:
    804            *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
    805            *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
    806            *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
    807            *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
    808            *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
    809            * @retval None
    810            */
    811          void RCC_PCLK2Config(uint32_t RCC_HCLK)
    812          {
    813            uint32_t tmpreg = 0;
    814          
    815            /* Check the parameters */
    816            assert_param(IS_RCC_PCLK(RCC_HCLK));
    817          
    818            tmpreg = RCC->CFGR;
    819          
    820            /* Clear PPRE2[2:0] bits */
    821            tmpreg &= ~RCC_CFGR_PPRE2;
    822          
    823            /* Set PPRE2[2:0] bits according to RCC_HCLK value */
    824            tmpreg |= RCC_HCLK << 3;
    825          
    826            /* Store the new value */
    827            RCC->CFGR = tmpreg;
    828          }
    829          
    830          /**
    831            * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
    832            *         PCLK1 and PCLK2.       
    833            * 
    834            * @note   The system frequency computed by this function is not the real 
    835            *         frequency in the chip. It is calculated based on the predefined 
    836            *         constant and the selected clock source:
    837            * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
    838            * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
    839            * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
    840            *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
    841            * @note     (*) HSI_VALUE is a constant defined in stm32f2xx.h file (default value
    842            *               16 MHz) but the real value may vary depending on the variations
    843            *               in voltage and temperature.
    844            * @note     (**) HSE_VALUE is a constant defined in stm32f2xx.h file (default value
    845            *                25 MHz), user has to ensure that HSE_VALUE is same as the real
    846            *                frequency of the crystal used. Otherwise, this function may
    847            *                have wrong result.
    848            *                
    849            * @note   The result of this function could be not correct when using fractional
    850            *         value for HSE crystal.
    851            *   
    852            * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
    853            *          the clocks frequencies.
    854            *     
    855            * @note   This function can be used by the user application to compute the 
    856            *         baudrate for the communication peripherals or configure other parameters.
    857            * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
    858            *         must be called to update the structure's field. Otherwise, any
    859            *         configuration based on this function will be incorrect.
    860            *    
    861            * @retval None
    862            */
    863          void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
    864          {
    865            uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
    866          
    867            /* Get SYSCLK source -------------------------------------------------------*/
    868            tmp = RCC->CFGR & RCC_CFGR_SWS;
    869          
    870            switch (tmp)
    871            {
    872              case 0x00:  /* HSI used as system clock source */
    873                RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    874                break;
    875              case 0x04:  /* HSE used as system clock  source */
    876                RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
    877                break;
    878              case 0x08:  /* PLL used as system clock  source */
    879          
    880                /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    881                   SYSCLK = PLL_VCO / PLLP
    882                   */    
    883                pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    884                pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    885                
    886                if (pllsource != 0)
    887                {
    888                  /* HSE used as PLL clock source */
    889                  pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    890                }
    891                else
    892                {
    893                  /* HSI used as PLL clock source */
    894                  pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
    895                }
    896          
    897                pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
    898                RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
    899                break;
    900              default:
    901                RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    902                break;
    903            }
    904            /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
    905          
    906            /* Get HCLK prescaler */
    907            tmp = RCC->CFGR & RCC_CFGR_HPRE;
    908            tmp = tmp >> 4;
    909            presc = APBAHBPrescTable[tmp];
    910            /* HCLK clock frequency */
    911            RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    912          
    913            /* Get PCLK1 prescaler */
    914            tmp = RCC->CFGR & RCC_CFGR_PPRE1;
    915            tmp = tmp >> 10;
    916            presc = APBAHBPrescTable[tmp];
    917            /* PCLK1 clock frequency */
    918            RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    919          
    920            /* Get PCLK2 prescaler */
    921            tmp = RCC->CFGR & RCC_CFGR_PPRE2;
    922            tmp = tmp >> 13;
    923            presc = APBAHBPrescTable[tmp];
    924            /* PCLK2 clock frequency */
    925            RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    926          }
    927          
    928          /**
    929            * @}
    930            */
    931          
    932          /** @defgroup RCC_Group3 Peripheral clocks configuration functions
    933           *  @brief   Peripheral clocks configuration functions 
    934           *
    935          @verbatim   
    936           ===============================================================================
    937                             Peripheral clocks configuration functions
    938           ===============================================================================  
    939          
    940            This section provide functions allowing to configure the Peripheral clocks. 
    941            
    942            1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
    943               
    944            2. After restart from Reset or wakeup from STANDBY, all peripherals are off
    945               except internal SRAM, Flash and JTAG. Before to start using a peripheral you
    946               have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
    947               , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
    948          
    949            3. To reset the peripherals configuration (to the default state after device reset)
    950               you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
    951               RCC_APB1PeriphResetCmd() functions.
    952               
    953            4. To further reduce power consumption in SLEEP mode the peripheral clocks can
    954               be disabled prior to executing the WFI or WFE instructions. You can do this
    955               using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
    956               RCC_APB1PeriphClockLPModeCmd() functions.  
    957          
    958          @endverbatim
    959            * @{
    960            */
    961          
    962          /**
    963            * @brief  Configures the RTC clock (RTCCLK).
    964            * @note   As the RTC clock configuration bits are in the Backup domain and write
    965            *         access is denied to this domain after reset, you have to enable write
    966            *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
    967            *         the RTC clock source (to be done once after reset).    
    968            * @note   Once the RTC clock is configured it can't be changed unless the  
    969            *         Backup domain is reset using RCC_BackupResetCmd() function, or by
    970            *         a Power On Reset (POR).
    971            *    
    972            * @param  RCC_RTCCLKSource: specifies the RTC clock source.
    973            *          This parameter can be one of the following values:
    974            *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
    975            *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
    976            *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
    977            *                                            as RTC clock, where x:[2,31]
    978            *  
    979            * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
    980            *         work in STOP and STANDBY modes, and can be used as wakeup source.
    981            *         However, when the HSE clock is used as RTC clock source, the RTC
    982            *         cannot be used in STOP and STANDBY modes.    
    983            * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
    984            *         RTC clock source).
    985            *  
    986            * @retval None
    987            */
    988          void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
    989          {
    990            uint32_t tmpreg = 0;
    991          
    992            /* Check the parameters */
    993            assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
    994          
    995            if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
    996            { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    997              tmpreg = RCC->CFGR;
    998          
    999              /* Clear RTCPRE[4:0] bits */
   1000              tmpreg &= ~RCC_CFGR_RTCPRE;
   1001          
   1002              /* Configure HSE division factor for RTC clock */
   1003              tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
   1004          
   1005              /* Store the new value */
   1006              RCC->CFGR = tmpreg;
   1007            }
   1008              
   1009            /* Select the RTC clock source */
   1010            RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
   1011          }
   1012          
   1013          /**
   1014            * @brief  Enables or disables the RTC clock.
   1015            * @note   This function must be used only after the RTC clock source was selected
   1016            *         using the RCC_RTCCLKConfig function.
   1017            * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
   1018            * @retval None
   1019            */
   1020          void RCC_RTCCLKCmd(FunctionalState NewState)
   1021          {
   1022            /* Check the parameters */
   1023            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1024          
   1025            *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
   1026          }
   1027          
   1028          /**
   1029            * @brief  Forces or releases the Backup domain reset.
   1030            * @note   This function resets the RTC peripheral (including the backup registers)
   1031            *         and the RTC clock source selection in RCC_CSR register.
   1032            * @note   The BKPSRAM is not affected by this reset.    
   1033            * @param  NewState: new state of the Backup domain reset.
   1034            *          This parameter can be: ENABLE or DISABLE.
   1035            * @retval None
   1036            */
   1037          void RCC_BackupResetCmd(FunctionalState NewState)
   1038          {
   1039            /* Check the parameters */
   1040            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1041            *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
   1042          }
   1043          
   1044          /**
   1045            * @brief  Configures the I2S clock source (I2SCLK).
   1046            *
   1047            * @note   This function must be called before enabling the I2S APB clock.
   1048            * @note   This function applies only to Silicon RevisionB and RevisionY.
   1049            *
   1050            * @param  RCC_I2SCLKSource: specifies the I2S clock source.
   1051            *          This parameter can be one of the following values:
   1052            *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
   1053            *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
   1054            *                                        used as I2S clock source
   1055            * @retval None
   1056            */
   1057          void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
   1058          {
   1059            /* Check the parameters */
   1060            assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
   1061          
   1062            *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
   1063          }
   1064          
   1065          /**
   1066            * @brief  Enables or disables the AHB1 peripheral clock.
   1067            * @note   After reset, the peripheral clock (used for registers read/write access)
   1068            *         is disabled and the application software has to enable this clock before 
   1069            *         using it.   
   1070            * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
   1071            *          This parameter can be any combination of the following values:
   1072            *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
   1073            *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
   1074            *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
   1075            *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
   1076            *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
   1077            *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
   1078            *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
   1079            *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
   1080            *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
   1081            *            @arg RCC_AHB1Periph_CRC:         CRC clock
   1082            *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
   1083            *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
   1084            *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
   1085            *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
   1086            *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
   1087            *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
   1088            *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
   1089            *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
   1090            *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
   1091            * @param  NewState: new state of the specified peripheral clock.
   1092            *          This parameter can be: ENABLE or DISABLE.
   1093            * @retval None
   1094            */
   1095          void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
   1096          {
   1097            /* Check the parameters */
   1098            assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
   1099          
   1100            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1101            if (NewState != DISABLE)
   1102            {
   1103              RCC->AHB1ENR |= RCC_AHB1Periph;
   1104            }
   1105            else
   1106            {
   1107              RCC->AHB1ENR &= ~RCC_AHB1Periph;
   1108            }
   1109          }
   1110          
   1111          /**
   1112            * @brief  Enables or disables the AHB2 peripheral clock.
   1113            * @note   After reset, the peripheral clock (used for registers read/write access)
   1114            *         is disabled and the application software has to enable this clock before 
   1115            *         using it. 
   1116            * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
   1117            *          This parameter can be any combination of the following values:
   1118            *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
   1119            *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
   1120            *            @arg RCC_AHB2Periph_HASH:   HASH clock
   1121            *            @arg RCC_AHB2Periph_RNG:    RNG clock
   1122            *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
   1123            * @param  NewState: new state of the specified peripheral clock.
   1124            *          This parameter can be: ENABLE or DISABLE.
   1125            * @retval None
   1126            */
   1127          void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
   1128          {
   1129            /* Check the parameters */
   1130            assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
   1131            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1132          
   1133            if (NewState != DISABLE)
   1134            {
   1135              RCC->AHB2ENR |= RCC_AHB2Periph;
   1136            }
   1137            else
   1138            {
   1139              RCC->AHB2ENR &= ~RCC_AHB2Periph;
   1140            }
   1141          }
   1142          
   1143          /**
   1144            * @brief  Enables or disables the AHB3 peripheral clock.
   1145            * @note   After reset, the peripheral clock (used for registers read/write access)
   1146            *         is disabled and the application software has to enable this clock before 
   1147            *         using it. 
   1148            * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
   1149            *          This parameter must be: RCC_AHB3Periph_FSMC
   1150            * @param  NewState: new state of the specified peripheral clock.
   1151            *          This parameter can be: ENABLE or DISABLE.
   1152            * @retval None
   1153            */
   1154          void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
   1155          {
   1156            /* Check the parameters */
   1157            assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
   1158            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1159          
   1160            if (NewState != DISABLE)
   1161            {
   1162              RCC->AHB3ENR |= RCC_AHB3Periph;
   1163            }
   1164            else
   1165            {
   1166              RCC->AHB3ENR &= ~RCC_AHB3Periph;
   1167            }
   1168          }
   1169          
   1170          /**
   1171            * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
   1172            * @note   After reset, the peripheral clock (used for registers read/write access)
   1173            *         is disabled and the application software has to enable this clock before 
   1174            *         using it. 
   1175            * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
   1176            *          This parameter can be any combination of the following values:
   1177            *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
   1178            *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
   1179            *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
   1180            *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
   1181            *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
   1182            *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
   1183            *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
   1184            *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
   1185            *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
   1186            *            @arg RCC_APB1Periph_WWDG:   WWDG clock
   1187            *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
   1188            *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
   1189            *            @arg RCC_APB1Periph_USART2: USART2 clock
   1190            *            @arg RCC_APB1Periph_USART3: USART3 clock
   1191            *            @arg RCC_APB1Periph_UART4:  UART4 clock
   1192            *            @arg RCC_APB1Periph_UART5:  UART5 clock
   1193            *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
   1194            *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
   1195            *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
   1196            *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
   1197            *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
   1198            *            @arg RCC_APB1Periph_PWR:    PWR clock
   1199            *            @arg RCC_APB1Periph_DAC:    DAC clock
   1200            * @param  NewState: new state of the specified peripheral clock.
   1201            *          This parameter can be: ENABLE or DISABLE.
   1202            * @retval None
   1203            */
   1204          void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
   1205          {
   1206            /* Check the parameters */
   1207            assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
   1208            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1209          
   1210            if (NewState != DISABLE)
   1211            {
   1212              RCC->APB1ENR |= RCC_APB1Periph;
   1213            }
   1214            else
   1215            {
   1216              RCC->APB1ENR &= ~RCC_APB1Periph;
   1217            }
   1218          }
   1219          
   1220          /**
   1221            * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
   1222            * @note   After reset, the peripheral clock (used for registers read/write access)
   1223            *         is disabled and the application software has to enable this clock before 
   1224            *         using it.
   1225            * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
   1226            *          This parameter can be any combination of the following values:
   1227            *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
   1228            *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
   1229            *            @arg RCC_APB2Periph_USART1: USART1 clock
   1230            *            @arg RCC_APB2Periph_USART6: USART6 clock
   1231            *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
   1232            *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
   1233            *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
   1234            *            @arg RCC_APB2Periph_SDIO:   SDIO clock
   1235            *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
   1236            *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
   1237            *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
   1238            *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
   1239            *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
   1240            * @param  NewState: new state of the specified peripheral clock.
   1241            *          This parameter can be: ENABLE or DISABLE.
   1242            * @retval None
   1243            */
   1244          void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
   1245          {
   1246            /* Check the parameters */
   1247            assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
   1248            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1249          
   1250            if (NewState != DISABLE)
   1251            {
   1252              RCC->APB2ENR |= RCC_APB2Periph;
   1253            }
   1254            else
   1255            {
   1256              RCC->APB2ENR &= ~RCC_APB2Periph;
   1257            }
   1258          }
   1259          
   1260          /**
   1261            * @brief  Forces or releases AHB1 peripheral reset.
   1262            * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
   1263            *          This parameter can be any combination of the following values:
   1264            *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
   1265            *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
   1266            *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
   1267            *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
   1268            *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
   1269            *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
   1270            *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
   1271            *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
   1272            *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
   1273            *            @arg RCC_AHB1Periph_CRC:     CRC clock
   1274            *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
   1275            *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
   1276            *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
   1277            *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
   1278            *                  
   1279            * @param  NewState: new state of the specified peripheral reset.
   1280            *          This parameter can be: ENABLE or DISABLE.
   1281            * @retval None
   1282            */
   1283          void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
   1284          {
   1285            /* Check the parameters */
   1286            assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
   1287            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1288          
   1289            if (NewState != DISABLE)
   1290            {
   1291              RCC->AHB1RSTR |= RCC_AHB1Periph;
   1292            }
   1293            else
   1294            {
   1295              RCC->AHB1RSTR &= ~RCC_AHB1Periph;
   1296            }
   1297          }
   1298          
   1299          /**
   1300            * @brief  Forces or releases AHB2 peripheral reset.
   1301            * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
   1302            *          This parameter can be any combination of the following values:
   1303            *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
   1304            *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
   1305            *            @arg RCC_AHB2Periph_HASH:   HASH clock
   1306            *            @arg RCC_AHB2Periph_RNG:    RNG clock
   1307            *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
   1308            * @param  NewState: new state of the specified peripheral reset.
   1309            *          This parameter can be: ENABLE or DISABLE.
   1310            * @retval None
   1311            */
   1312          void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
   1313          {
   1314            /* Check the parameters */
   1315            assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
   1316            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1317          
   1318            if (NewState != DISABLE)
   1319            {
   1320              RCC->AHB2RSTR |= RCC_AHB2Periph;
   1321            }
   1322            else
   1323            {
   1324              RCC->AHB2RSTR &= ~RCC_AHB2Periph;
   1325            }
   1326          }
   1327          
   1328          /**
   1329            * @brief  Forces or releases AHB3 peripheral reset.
   1330            * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
   1331            *          This parameter must be: RCC_AHB3Periph_FSMC
   1332            * @param  NewState: new state of the specified peripheral reset.
   1333            *          This parameter can be: ENABLE or DISABLE.
   1334            * @retval None
   1335            */
   1336          void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
   1337          {
   1338            /* Check the parameters */
   1339            assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
   1340            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1341          
   1342            if (NewState != DISABLE)
   1343            {
   1344              RCC->AHB3RSTR |= RCC_AHB3Periph;
   1345            }
   1346            else
   1347            {
   1348              RCC->AHB3RSTR &= ~RCC_AHB3Periph;
   1349            }
   1350          }
   1351          
   1352          /**
   1353            * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
   1354            * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
   1355            *          This parameter can be any combination of the following values:
   1356            *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
   1357            *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
   1358            *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
   1359            *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
   1360            *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
   1361            *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
   1362            *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
   1363            *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
   1364            *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
   1365            *            @arg RCC_APB1Periph_WWDG:   WWDG clock
   1366            *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
   1367            *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
   1368            *            @arg RCC_APB1Periph_USART2: USART2 clock
   1369            *            @arg RCC_APB1Periph_USART3: USART3 clock
   1370            *            @arg RCC_APB1Periph_UART4:  UART4 clock
   1371            *            @arg RCC_APB1Periph_UART5:  UART5 clock
   1372            *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
   1373            *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
   1374            *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
   1375            *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
   1376            *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
   1377            *            @arg RCC_APB1Periph_PWR:    PWR clock
   1378            *            @arg RCC_APB1Periph_DAC:    DAC clock
   1379            * @param  NewState: new state of the specified peripheral reset.
   1380            *          This parameter can be: ENABLE or DISABLE.
   1381            * @retval None
   1382            */
   1383          void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
   1384          {
   1385            /* Check the parameters */
   1386            assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
   1387            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1388            if (NewState != DISABLE)
   1389            {
   1390              RCC->APB1RSTR |= RCC_APB1Periph;
   1391            }
   1392            else
   1393            {
   1394              RCC->APB1RSTR &= ~RCC_APB1Periph;
   1395            }
   1396          }
   1397          
   1398          /**
   1399            * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
   1400            * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
   1401            *          This parameter can be any combination of the following values:
   1402            *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
   1403            *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
   1404            *            @arg RCC_APB2Periph_USART1: USART1 clock
   1405            *            @arg RCC_APB2Periph_USART6: USART6 clock
   1406            *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
   1407            *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
   1408            *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
   1409            *            @arg RCC_APB2Periph_SDIO:   SDIO clock
   1410            *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
   1411            *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
   1412            *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
   1413            *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
   1414            *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
   1415            * @param  NewState: new state of the specified peripheral reset.
   1416            *          This parameter can be: ENABLE or DISABLE.
   1417            * @retval None
   1418            */
   1419          void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
   1420          {
   1421            /* Check the parameters */
   1422            assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
   1423            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1424            if (NewState != DISABLE)
   1425            {
   1426              RCC->APB2RSTR |= RCC_APB2Periph;
   1427            }
   1428            else
   1429            {
   1430              RCC->APB2RSTR &= ~RCC_APB2Periph;
   1431            }
   1432          }
   1433          
   1434          /**
   1435            * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
   1436            * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
   1437            *         power consumption.
   1438            * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
   1439            * @note   By default, all peripheral clocks are enabled during SLEEP mode.
   1440            * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
   1441            *          This parameter can be any combination of the following values:
   1442            *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
   1443            *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
   1444            *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
   1445            *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
   1446            *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
   1447            *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
   1448            *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
   1449            *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
   1450            *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
   1451            *            @arg RCC_AHB1Periph_CRC:         CRC clock
   1452            *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
   1453            *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
   1454            *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
   1455            *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
   1456            *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
   1457            *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
   1458            *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
   1459            *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
   1460            *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
   1461            * @param  NewState: new state of the specified peripheral clock.
   1462            *          This parameter can be: ENABLE or DISABLE.
   1463            * @retval None
   1464            */
   1465          void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
   1466          {
   1467            /* Check the parameters */
   1468            assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
   1469            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1470            if (NewState != DISABLE)
   1471            {
   1472              RCC->AHB1LPENR |= RCC_AHB1Periph;
   1473            }
   1474            else
   1475            {
   1476              RCC->AHB1LPENR &= ~RCC_AHB1Periph;
   1477            }
   1478          }
   1479          
   1480          /**
   1481            * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
   1482            * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
   1483            *           power consumption.
   1484            * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
   1485            * @note   By default, all peripheral clocks are enabled during SLEEP mode.
   1486            * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
   1487            *          This parameter can be any combination of the following values:
   1488            *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
   1489            *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
   1490            *            @arg RCC_AHB2Periph_HASH:   HASH clock
   1491            *            @arg RCC_AHB2Periph_RNG:    RNG clock
   1492            *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
   1493            * @param  NewState: new state of the specified peripheral clock.
   1494            *          This parameter can be: ENABLE or DISABLE.
   1495            * @retval None
   1496            */
   1497          void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
   1498          {
   1499            /* Check the parameters */
   1500            assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
   1501            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1502            if (NewState != DISABLE)
   1503            {
   1504              RCC->AHB2LPENR |= RCC_AHB2Periph;
   1505            }
   1506            else
   1507            {
   1508              RCC->AHB2LPENR &= ~RCC_AHB2Periph;
   1509            }
   1510          }
   1511          
   1512          /**
   1513            * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
   1514            * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
   1515            *         power consumption.
   1516            * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
   1517            * @note   By default, all peripheral clocks are enabled during SLEEP mode.
   1518            * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
   1519            *          This parameter must be: RCC_AHB3Periph_FSMC
   1520            * @param  NewState: new state of the specified peripheral clock.
   1521            *          This parameter can be: ENABLE or DISABLE.
   1522            * @retval None
   1523            */
   1524          void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
   1525          {
   1526            /* Check the parameters */
   1527            assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
   1528            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1529            if (NewState != DISABLE)
   1530            {
   1531              RCC->AHB3LPENR |= RCC_AHB3Periph;
   1532            }
   1533            else
   1534            {
   1535              RCC->AHB3LPENR &= ~RCC_AHB3Periph;
   1536            }
   1537          }
   1538          
   1539          /**
   1540            * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
   1541            * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
   1542            *         power consumption.
   1543            * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
   1544            * @note   By default, all peripheral clocks are enabled during SLEEP mode.
   1545            * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
   1546            *          This parameter can be any combination of the following values:
   1547            *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
   1548            *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
   1549            *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
   1550            *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
   1551            *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
   1552            *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
   1553            *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
   1554            *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
   1555            *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
   1556            *            @arg RCC_APB1Periph_WWDG:   WWDG clock
   1557            *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
   1558            *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
   1559            *            @arg RCC_APB1Periph_USART2: USART2 clock
   1560            *            @arg RCC_APB1Periph_USART3: USART3 clock
   1561            *            @arg RCC_APB1Periph_UART4:  UART4 clock
   1562            *            @arg RCC_APB1Periph_UART5:  UART5 clock
   1563            *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
   1564            *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
   1565            *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
   1566            *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
   1567            *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
   1568            *            @arg RCC_APB1Periph_PWR:    PWR clock
   1569            *            @arg RCC_APB1Periph_DAC:    DAC clock
   1570            * @param  NewState: new state of the specified peripheral clock.
   1571            *          This parameter can be: ENABLE or DISABLE.
   1572            * @retval None
   1573            */
   1574          void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
   1575          {
   1576            /* Check the parameters */
   1577            assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
   1578            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1579            if (NewState != DISABLE)
   1580            {
   1581              RCC->APB1LPENR |= RCC_APB1Periph;
   1582            }
   1583            else
   1584            {
   1585              RCC->APB1LPENR &= ~RCC_APB1Periph;
   1586            }
   1587          }
   1588          
   1589          /**
   1590            * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
   1591            * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
   1592            *         power consumption.
   1593            * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
   1594            * @note   By default, all peripheral clocks are enabled during SLEEP mode.
   1595            * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
   1596            *          This parameter can be any combination of the following values:
   1597            *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
   1598            *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
   1599            *            @arg RCC_APB2Periph_USART1: USART1 clock
   1600            *            @arg RCC_APB2Periph_USART6: USART6 clock
   1601            *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
   1602            *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
   1603            *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
   1604            *            @arg RCC_APB2Periph_SDIO:   SDIO clock
   1605            *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
   1606            *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
   1607            *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
   1608            *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
   1609            *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
   1610            * @param  NewState: new state of the specified peripheral clock.
   1611            *          This parameter can be: ENABLE or DISABLE.
   1612            * @retval None
   1613            */
   1614          void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
   1615          {
   1616            /* Check the parameters */
   1617            assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
   1618            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1619            if (NewState != DISABLE)
   1620            {
   1621              RCC->APB2LPENR |= RCC_APB2Periph;
   1622            }
   1623            else
   1624            {
   1625              RCC->APB2LPENR &= ~RCC_APB2Periph;
   1626            }
   1627          }
   1628          
   1629          /**
   1630            * @}
   1631            */
   1632          
   1633          /** @defgroup RCC_Group4 Interrupts and flags management functions
   1634           *  @brief   Interrupts and flags management functions 
   1635           *
   1636          @verbatim   
   1637           ===============================================================================
   1638                             Interrupts and flags management functions
   1639           ===============================================================================  
   1640          
   1641          @endverbatim
   1642            * @{
   1643            */
   1644          
   1645          /**
   1646            * @brief  Enables or disables the specified RCC interrupts.
   1647            * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
   1648            *          This parameter can be any combination of the following values:
   1649            *            @arg RCC_IT_LSIRDY: LSI ready interrupt
   1650            *            @arg RCC_IT_LSERDY: LSE ready interrupt
   1651            *            @arg RCC_IT_HSIRDY: HSI ready interrupt
   1652            *            @arg RCC_IT_HSERDY: HSE ready interrupt
   1653            *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
   1654            *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
   1655            * @param  NewState: new state of the specified RCC interrupts.
   1656            *          This parameter can be: ENABLE or DISABLE.
   1657            * @retval None
   1658            */
   1659          void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
   1660          {
   1661            /* Check the parameters */
   1662            assert_param(IS_RCC_IT(RCC_IT));
   1663            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1664            if (NewState != DISABLE)
   1665            {
   1666              /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
   1667              *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
   1668            }
   1669            else
   1670            {
   1671              /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
   1672              *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
   1673            }
   1674          }
   1675          
   1676          /**
   1677            * @brief  Checks whether the specified RCC flag is set or not.
   1678            * @param  RCC_FLAG: specifies the flag to check.
   1679            *          This parameter can be one of the following values:
   1680            *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
   1681            *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
   1682            *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
   1683            *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
   1684            *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
   1685            *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
   1686            *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
   1687            *            @arg RCC_FLAG_PINRST: Pin reset
   1688            *            @arg RCC_FLAG_PORRST: POR/PDR reset
   1689            *            @arg RCC_FLAG_SFTRST: Software reset
   1690            *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
   1691            *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
   1692            *            @arg RCC_FLAG_LPWRRST: Low Power reset
   1693            * @retval The new state of RCC_FLAG (SET or RESET).
   1694            */
   1695          FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
   1696          {
   1697            uint32_t tmp = 0;
   1698            uint32_t statusreg = 0;
   1699            FlagStatus bitstatus = RESET;
   1700          
   1701            /* Check the parameters */
   1702            assert_param(IS_RCC_FLAG(RCC_FLAG));
   1703          
   1704            /* Get the RCC register index */
   1705            tmp = RCC_FLAG >> 5;
   1706            if (tmp == 1)               /* The flag to check is in CR register */
   1707            {
   1708              statusreg = RCC->CR;
   1709            }
   1710            else if (tmp == 2)          /* The flag to check is in BDCR register */
   1711            {
   1712              statusreg = RCC->BDCR;
   1713            }
   1714            else                       /* The flag to check is in CSR register */
   1715            {
   1716              statusreg = RCC->CSR;
   1717            }
   1718          
   1719            /* Get the flag position */
   1720            tmp = RCC_FLAG & FLAG_MASK;
   1721            if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
   1722            {
   1723              bitstatus = SET;
   1724            }
   1725            else
   1726            {
   1727              bitstatus = RESET;
   1728            }
   1729            /* Return the flag status */
   1730            return bitstatus;
   1731          }
   1732          
   1733          /**
   1734            * @brief  Clears the RCC reset flags.
   1735            *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
   1736            *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
   1737            * @param  None
   1738            * @retval None
   1739            */
   1740          void RCC_ClearFlag(void)
   1741          {
   1742            /* Set RMVF bit to clear the reset flags */
   1743            RCC->CSR |= RCC_CSR_RMVF;
   1744          }
   1745          
   1746          /**
   1747            * @brief  Checks whether the specified RCC interrupt has occurred or not.
   1748            * @param  RCC_IT: specifies the RCC interrupt source to check.
   1749            *          This parameter can be one of the following values:
   1750            *            @arg RCC_IT_LSIRDY: LSI ready interrupt
   1751            *            @arg RCC_IT_LSERDY: LSE ready interrupt
   1752            *            @arg RCC_IT_HSIRDY: HSI ready interrupt
   1753            *            @arg RCC_IT_HSERDY: HSE ready interrupt
   1754            *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
   1755            *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
   1756            *            @arg RCC_IT_CSS: Clock Security System interrupt
   1757            * @retval The new state of RCC_IT (SET or RESET).
   1758            */
   1759          ITStatus RCC_GetITStatus(uint8_t RCC_IT)
   1760          {
   1761            ITStatus bitstatus = RESET;
   1762          
   1763            /* Check the parameters */
   1764            assert_param(IS_RCC_GET_IT(RCC_IT));
   1765          
   1766            /* Check the status of the specified RCC interrupt */
   1767            if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
   1768            {
   1769              bitstatus = SET;
   1770            }
   1771            else
   1772            {
   1773              bitstatus = RESET;
   1774            }
   1775            /* Return the RCC_IT status */
   1776            return  bitstatus;
   1777          }
   1778          
   1779          /**
   1780            * @brief  Clears the RCC's interrupt pending bits.
   1781            * @param  RCC_IT: specifies the interrupt pending bit to clear.
   1782            *          This parameter can be any combination of the following values:
   1783            *            @arg RCC_IT_LSIRDY: LSI ready interrupt
   1784            *            @arg RCC_IT_LSERDY: LSE ready interrupt
   1785            *            @arg RCC_IT_HSIRDY: HSI ready interrupt
   1786            *            @arg RCC_IT_HSERDY: HSE ready interrupt
   1787            *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
   1788            *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
   1789            *            @arg RCC_IT_CSS: Clock Security System interrupt
   1790            * @retval None
   1791            */
   1792          void RCC_ClearITPendingBit(uint8_t RCC_IT)
   1793          {
   1794            /* Check the parameters */
   1795            assert_param(IS_RCC_CLEAR_IT(RCC_IT));
   1796          
   1797            /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
   1798               pending bits */
   1799            *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
   1800          }
   1801          
   1802          /**
   1803            * @}
   1804            */ 
   1805          
   1806          /**
   1807            * @}
   1808            */ 
   1809          
   1810          /**
   1811            * @}
   1812            */ 
   1813          
   1814          /**
   1815            * @}
   1816            */ 
   1817          
   1818          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RCC_AHB1PeriphClockCmd
       0   RCC_AHB1PeriphClockLPModeCmd
       0   RCC_AHB1PeriphResetCmd
       0   RCC_AHB2PeriphClockCmd
       0   RCC_AHB2PeriphClockLPModeCmd
       0   RCC_AHB2PeriphResetCmd
       0   RCC_AHB3PeriphClockCmd
       0   RCC_AHB3PeriphClockLPModeCmd
       0   RCC_AHB3PeriphResetCmd
       0   RCC_APB1PeriphClockCmd
       0   RCC_APB1PeriphClockLPModeCmd
       0   RCC_APB1PeriphResetCmd
       0   RCC_APB2PeriphClockCmd
       0   RCC_APB2PeriphClockLPModeCmd
       0   RCC_APB2PeriphResetCmd
       4   RCC_AdjustHSICalibrationValue
       0   RCC_BackupResetCmd
       0   RCC_ClearFlag
       0   RCC_ClearITPendingBit
       0   RCC_ClockSecuritySystemCmd
       0   RCC_DeInit
      36   RCC_GetClocksFreq
       8   RCC_GetFlagStatus
       0   RCC_GetITStatus
       0   RCC_GetSYSCLKSource
       0   RCC_HCLKConfig
       0   RCC_HSEConfig
       0   RCC_HSICmd
       0   RCC_I2SCLKConfig
       0   RCC_ITConfig
       0   RCC_LSEConfig
       0   RCC_LSICmd
       8   RCC_MCO1Config
       8   RCC_MCO2Config
       0   RCC_PCLK1Config
       0   RCC_PCLK2Config
       0   RCC_PLLCmd
      12   RCC_PLLConfig
       0   RCC_PLLI2SCmd
       0   RCC_PLLI2SConfig
       0   RCC_RTCCLKCmd
       4   RCC_RTCCLKConfig
       0   RCC_SYSCLKConfig
      16   RCC_WaitForHSEStartUp
        16   -> RCC_GetFlagStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable42
       4  ??DataTable42_1
       4  ??DataTable42_10
       4  ??DataTable42_11
       4  ??DataTable42_12
       4  ??DataTable42_13
       4  ??DataTable42_14
       4  ??DataTable42_15
       4  ??DataTable42_16
       4  ??DataTable42_17
       4  ??DataTable42_18
       4  ??DataTable42_19
       4  ??DataTable42_2
       4  ??DataTable42_20
       4  ??DataTable42_21
       4  ??DataTable42_22
       4  ??DataTable42_23
       4  ??DataTable42_24
       4  ??DataTable42_25
       4  ??DataTable42_26
       4  ??DataTable42_27
       4  ??DataTable42_28
       4  ??DataTable42_29
       4  ??DataTable42_3
       4  ??DataTable42_30
       4  ??DataTable42_31
       4  ??DataTable42_32
       4  ??DataTable42_33
       4  ??DataTable42_34
       4  ??DataTable42_35
       4  ??DataTable42_36
       4  ??DataTable42_37
       4  ??DataTable42_4
       4  ??DataTable42_5
       4  ??DataTable42_6
       4  ??DataTable42_7
       4  ??DataTable42_8
       4  ??DataTable42_9
      16  APBAHBPrescTable
      28  RCC_AHB1PeriphClockCmd
      28  RCC_AHB1PeriphClockLPModeCmd
      28  RCC_AHB1PeriphResetCmd
      28  RCC_AHB2PeriphClockCmd
      28  RCC_AHB2PeriphClockLPModeCmd
      28  RCC_AHB2PeriphResetCmd
      28  RCC_AHB3PeriphClockCmd
      28  RCC_AHB3PeriphClockLPModeCmd
      28  RCC_AHB3PeriphResetCmd
      28  RCC_APB1PeriphClockCmd
      28  RCC_APB1PeriphClockLPModeCmd
      28  RCC_APB1PeriphResetCmd
      28  RCC_APB2PeriphClockCmd
      28  RCC_APB2PeriphClockLPModeCmd
      28  RCC_APB2PeriphResetCmd
      28  RCC_AdjustHSICalibrationValue
      10  RCC_BackupResetCmd
      12  RCC_ClearFlag
       6  RCC_ClearITPendingBit
      12  RCC_ClockSecuritySystemCmd
      58  RCC_DeInit
     258  RCC_GetClocksFreq
      70  RCC_GetFlagStatus
      26  RCC_GetITStatus
      12  RCC_GetSYSCLKSource
      18  RCC_HCLKConfig
      12  RCC_HSEConfig
      12  RCC_HSICmd
       6  RCC_I2SCLKConfig
      28  RCC_ITConfig
      40  RCC_LSEConfig
      12  RCC_LSICmd
      26  RCC_MCO1Config
      26  RCC_MCO2Config
      18  RCC_PCLK1Config
      20  RCC_PCLK2Config
      12  RCC_PLLCmd
      34  RCC_PLLConfig
      12  RCC_PLLI2SCmd
      14  RCC_PLLI2SConfig
      10  RCC_RTCCLKCmd
      48  RCC_RTCCLKConfig
      18  RCC_SYSCLKConfig
      60  RCC_WaitForHSEStartUp

 
    16 bytes in section .data
 1'490 bytes in section .text
 
 1'490 bytes of CODE memory
    16 bytes of DATA memory

Errors: none
Warnings: none
