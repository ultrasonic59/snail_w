###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         15/Jan/2021  20:08:42
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\step_board.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW649C.tmp
#        (D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\step_board.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D STEP_BRD -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\step_debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\step_debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\dbg\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\step_debug\List\step_board.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\step_debug\Obj\step_board.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\step_board.c
      1          #include <string.h>
      2          #include "FreeRTOS.h"
      3          #include "queue.h"
      4          #include "semphr.h"
      5          ///#include "stm32f2xx_gpio.h"
      6          ///#include "stm32f2xx_rcc.h"
      7          
      8          ////#include "board.h"
      9          #include "board.h"
     10          #include "printk.h"
     11          
     12          extern void uDelay (const uint32_t usec);
     13          extern void  put_tst_pin(uint8_t idat);
     14          void mot_spi_wr(uint8_t addr,uint16_t idata);
     15          uint16_t mot_spi_rd(uint8_t addr);
     16          
     17          ///=============================
     18          int sendchar6 (int c) 
     19          { 
     20          while (!(USART6->SR & 0x0080));
     21          USART6->DR = (c & 0x1FF);
     22          return (c);
     23          }
     24          
     25          int get_byte6 (void) 
     26          {
     27          while (!(USART6->SR & 0x0020));
     28          return (USART6->DR);
     29          }
     30          
     31          void _putk(char ch)
     32          {
     33          //sendchar_hdlc(ch);
     34          sendchar6(ch);
     35          }
     36          
     37          void init_gpio(void)
     38          {
     39          ////RCC_AHBPeriphClockCmd(XEN_PIN_RCC_AHB,ENABLE);
     40          GPIO_InitTypeDef GPIO_InitStructure;
     41          #if 0
     42          ////=============== TST1 ============================
     43          RCC_AHB1PeriphClockCmd(TST1_PIN_RCC, ENABLE);
     44          GPIO_InitStructure.GPIO_Pin = TST1_PIN;
     45          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     46          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     47          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     48          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     49          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     50          GPIO_Init( TST1_PIN_GPIO, &GPIO_InitStructure );
     51          GPIO_SetBits(TST1_PIN_GPIO, TST1_PIN);
     52          #endif
     53          
     54          ////=============== TST2 ============================
     55          RCC_AHB1PeriphClockCmd(TST2_PIN_RCC, ENABLE);
     56          GPIO_InitStructure.GPIO_Pin = TST2_PIN;
     57          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     58          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     59          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     60          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     61          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     62          GPIO_Init( TST2_PIN_GPIO, &GPIO_InitStructure );
     63          ////=============== TST3 ============================
     64          RCC_AHB1PeriphClockCmd(TST3_PIN_RCC, ENABLE);
     65          GPIO_InitStructure.GPIO_Pin = TST3_PIN;
     66          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     67          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     68          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     69          
     70          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     71          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     72          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     73          GPIO_Init( TST3_PIN_GPIO, &GPIO_InitStructure );
     74          GPIO_PinAFConfig(TST3_PIN_GPIO, TST3_PIN_NPIN, GPIO_AF_TIM1);
     75          
     76          ////=============== TST7 ============================
     77          RCC_AHB1PeriphClockCmd(TST7_PIN_RCC, ENABLE);
     78          GPIO_InitStructure.GPIO_Pin = TST7_PIN;
     79          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     80          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     81          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     82          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     83          GPIO_Init( TST7_PIN_GPIO, &GPIO_InitStructure );
     84          GPIO_PinAFConfig(TST7_PIN_GPIO, TST7_PIN_NPIN, GPIO_AF_TIM8);
     85            
     86          ////=========== DBG_UART =================================================== 
     87          RCC_AHB1PeriphClockCmd(UART_DBG_TX_RCC, ENABLE);
     88          GPIO_InitStructure.GPIO_Pin = UART_DBG_TX_PIN;
     89          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     90          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     91          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     92          GPIO_Init( UART_DBG_TX_GPIO, &GPIO_InitStructure );
     93          
     94          RCC_AHB1PeriphClockCmd(UART_DBG_RX_RCC, ENABLE);
     95          GPIO_InitStructure.GPIO_Pin = UART_DBG_RX_PIN;
     96          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     97          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     98          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     99          GPIO_Init( UART_DBG_RX_GPIO, &GPIO_InitStructure );
    100            
    101          GPIO_PinAFConfig(UART_DBG_TX_GPIO, UART_DBG_TX_PIN_NPIN, UART_DBG_TX_AF);
    102          GPIO_PinAFConfig(UART_DBG_RX_GPIO, UART_DBG_RX_PIN_NPIN, UART_DBG_RX_AF);
    103          ////===================================================================
    104          ////=============== MOT_FAULT ============================
    105          RCC_AHB1PeriphClockCmd(MOT_FAULT_PIN_RCC, ENABLE);
    106          GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
    107          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    108          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    109          GPIO_Init( MOT_FAULT_PIN_GPIO, &GPIO_InitStructure );
    110          ////=============== MOT_STALLN ============================
    111          RCC_AHB1PeriphClockCmd(MOT_STALLN_PIN_RCC, ENABLE);
    112          GPIO_InitStructure.GPIO_Pin = MOT_STALLN_PIN;
    113          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    114          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    115          GPIO_Init( MOT_STALLN_PIN_GPIO, &GPIO_InitStructure );
    116          ////=============== CONC ============================
    117          RCC_AHB1PeriphClockCmd(CONC_PIN_RCC, ENABLE);
    118          GPIO_InitStructure.GPIO_Pin = CONC_PIN;
    119          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    120          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    121          GPIO_Init( CONC_PIN_GPIO, &GPIO_InitStructure );
    122          ////=============== ENC_A ============================
    123          RCC_AHB1PeriphClockCmd(ENC_A_PIN_RCC, ENABLE);
    124          GPIO_InitStructure.GPIO_Pin = ENC_A_PIN;
    125          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    126          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    127          GPIO_Init( ENC_A_PIN_GPIO, &GPIO_InitStructure );
    128          ////=============== ENC_B ============================
    129          RCC_AHB1PeriphClockCmd(ENC_B_PIN_RCC, ENABLE);
    130          GPIO_InitStructure.GPIO_Pin = ENC_B_PIN;
    131          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    132          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    133          GPIO_Init( ENC_B_PIN_GPIO, &GPIO_InitStructure );
    134          ////=============== ENC_C ============================
    135          RCC_AHB1PeriphClockCmd(ENC_C_PIN_RCC, ENABLE);
    136          GPIO_InitStructure.GPIO_Pin = ENC_C_PIN;
    137          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    138          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    139          GPIO_Init( ENC_C_PIN_GPIO, &GPIO_InitStructure );
    140          
    141          ////=============== MOT_RESET ============================
    142          RCC_AHB1PeriphClockCmd(MOT_RESET_PIN_RCC, ENABLE);
    143          GPIO_InitStructure.GPIO_Pin = MOT_RESET_PIN;
    144          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    145          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    146          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    147          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    148          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    149          GPIO_Init( MOT_RESET_PIN_GPIO, &GPIO_InitStructure );
    150          ////=============== MOT_SLEEP ============================
    151          RCC_AHB1PeriphClockCmd(MOT_SLEEP_PIN_RCC, ENABLE);
    152          GPIO_InitStructure.GPIO_Pin = MOT_SLEEP_PIN;
    153          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    154          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    155          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    156          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    157          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    158          GPIO_Init( MOT_SLEEP_PIN_GPIO, &GPIO_InitStructure );
    159          ////#define MOT_STEP_TIM  	        TIM12
    160          ////=============== MOT_STEP ============================
    161          RCC_AHB1PeriphClockCmd(MOT_STEP_PIN_RCC, ENABLE);
    162          GPIO_InitStructure.GPIO_Pin = MOT_STEP_PIN;
    163          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    164          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    165          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    166          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    167          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    168          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    169          GPIO_Init( MOT_STEP_PIN_GPIO, &GPIO_InitStructure );
    170          GPIO_PinAFConfig(MOT_STEP_PIN_GPIO, MOT_STEP_PIN_NPIN, GPIO_AF_TIM1);
    171          ////===================================================================
    172          
    173          ////=============== MOT_DIR ============================
    174          RCC_AHB1PeriphClockCmd(MOT_DIR_PIN_RCC, ENABLE);
    175          GPIO_InitStructure.GPIO_Pin = MOT_DIR_PIN;
    176          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    177          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    178          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    179          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    180          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    181          GPIO_Init( MOT_DIR_PIN_GPIO, &GPIO_InitStructure );
    182          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    183          
    184          ////=============== MOT_SPI_SCS ============================
    185          RCC_AHB1PeriphClockCmd(MOT_SPI_SCS_PIN_RCC, ENABLE);
    186          GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCS_PIN;
    187          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    188          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    189          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    190          GPIO_Init( MOT_SPI_SCS_PIN_GPIO, &GPIO_InitStructure );
    191          }
    192          ////=============================================
    193          void UART_DBG_Init(void)
    194          {
    195          ////GPIO_InitTypeDef GPIO_InitStructure;
    196          USART_InitTypeDef USART_InitStructure;
    197          UART_DBG_CLK_INIT(UART_DBG_CLK, ENABLE);
    198          USART_DeInit(UART_DBG);
    199          USART_InitStructure.USART_BaudRate = 115200;
    200          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    201          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    202          USART_InitStructure.USART_Parity = USART_Parity_No;
    203          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    204          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    205          USART_Init(UART_DBG, &USART_InitStructure);
    206          UART_DBG->CR1 |= USART_CR1_RXNEIE;
    207          USART_Cmd(UART_DBG, ENABLE);
    208          }
    209          
    210          ////==================================================
    211          
    212          void  set_sleep_mot(uint8_t idat)
    213          {
    214          if(idat&0x1)
    215            {
    216            GPIO_SetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    217            }
    218          else
    219            {
    220             GPIO_ResetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    221            }
    222          }
    223          void  set_dir_mot(uint8_t idat)
    224          {
    225          if(idat&0x1)
    226            {
    227            GPIO_SetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    228            }
    229          else
    230            {
    231             GPIO_ResetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    232            }
    233          }
    234          void  set_reset_mot(uint8_t idat)
    235          {
    236          if(idat&0x1)
    237            {
    238            GPIO_SetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    239            }
    240          else
    241            {
    242             GPIO_ResetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    243            }
    244          }
    245          
    246          ////==================================================
    247          
    248          volatile uint32_t num_step=0;
    249          
    250          void mot_tim_init(void)
    251          {
    252          NVIC_InitTypeDef NVIC_InitStructure; 
    253          
    254          RCC->APB2ENR |= MOT_STEP_TIM_RCC;
    255          MOT_STEP_TIM ->PSC = MOT_TIM_PRESC;
    256          ////LED_PWM_TIM->ARR = 1000;
    257          MOT_STEP_TIM ->ARR = MOT_TIM_PERIOD;////
    258          ////MOT_STEP_TIM ->CCR2 = MOT_TIM_PERIOD/2;////30;
    259          MOT_STEP_TIM ->CCR1 = MOT_TIM_PERIOD/2;////30;
    260          MOT_STEP_TIM->CCER |= TIM_CCER_CC1E;////TIM_CCER_CC2NE;////| TIM_CCER_CC3NP;
    261          MOT_STEP_TIM->BDTR |= TIM_BDTR_MOE;
    262          ////MOT_STEP_TIM->CCMR1 = TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1; 
    263          MOT_STEP_TIM->CCMR1 = TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; 
    264          MOT_STEP_TIM->CR1 &= ~TIM_CR1_DIR;
    265          MOT_STEP_TIM->CR1 &= ~TIM_CR1_CMS;
    266          ///MOT_STEP_TIM->CR1 |= TIM_CR1_CEN;
    267          
    268          MOT_STEP_TIM ->DIER = TIM_DIER_CC1IE;
    269          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC1);
    270          
    271          NVIC_InitStructure.NVIC_IRQChannel = MOT_TIM_IRQN;
    272          	// highest priority
    273          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
    274          
    275          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    276          	// highest priority
    277          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    278          NVIC_Init(&NVIC_InitStructure);
    279          ///TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC2, ENABLE);
    280          ///TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC1, ENABLE);
    281          
    282          
    283          }
    284          void stop_mot_step_tim(void)
    285          {
    286          TIM_Cmd(MOT_STEP_TIM, DISABLE);
    287          }
    288          void ena_mot(uint8_t ena_dis)
    289          {
    290          uint16_t tmp;
    291           
    292          tmp=mot_spi_rd(ADDR_MOT_CTRL);
    293          if(ena_dis&0x1)
    294          {
    295          tmp|=0x1;
    296          }
    297          else
    298          {
    299          tmp&= ~0x1;
    300          }
    301          mot_spi_wr(ADDR_MOT_CTRL,tmp);
    302          }
    303          void put_mot_nstep(uint32_t nstep)
    304          {
    305          ena_mot(1) ;
    306           num_step=nstep; 
    307          TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC1, ENABLE);
    308          TIM_Cmd(MOT_STEP_TIM, ENABLE);
    309          }
    310          volatile uint32_t gsr;
    311          ////=======================================================
    312          void MOT_STEP_TIM_IRQHandler(void)
    313          { 
    314          if(num_step)
    315            {
    316            num_step--;  
    317            if(num_step==0)
    318              {
    319              stop_mot_step_tim(); 
    320              ena_mot(0) ;
    321              }
    322            }
    323          ////TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC2);
    324          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC1);
    325          }
    326          
    327          uint8_t get_conc(void)
    328          {
    329          return GPIO_ReadInputDataBit(CONC_PIN_GPIO, CONC_PIN);
    330          }
    331          ////=============================================
    332          void hw_board_init(void)
    333          {
    334          NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
    335          init_gpio();
    336          UART_DBG_Init(); 
    337          
    338          mot_tim_init();
    339          mot_spi_init();
    340          }
    341          ////============================================
    342          ////==============================================
    343          void mot_spi_init(void)
    344          {
    345          GPIO_InitTypeDef GPIO_InitStructure;
    346          SPI_InitTypeDef  SPI_InitStructure;
    347            MOT_SPI_PeriphClockCmd(MOT_SPI_RCC, ENABLE);
    348            
    349          RCC_AHB1PeriphClockCmd(MOT_SPI_SCK_PIN_RCC,ENABLE);
    350          RCC_AHB1PeriphClockCmd(MOT_SPI_MISO_PIN_RCC,ENABLE);
    351          RCC_AHB1PeriphClockCmd(MOT_SPI_MOSI_PIN_RCC,ENABLE);
    352          ////RCC_AHB1PeriphClockCmd(MOT_SPI_SCS_PIN_RCC,ENABLE);
    353          
    354          GPIO_PinAFConfig(MOT_SPI_SCK_PIN_GPIO, MOT_SPI_SCK_PIN_NPIN, MOT_SPI_AF);
    355          GPIO_PinAFConfig(MOT_SPI_MISO_PIN_GPIO, MOT_SPI_MISO_PIN_NPIN, MOT_SPI_AF);
    356          GPIO_PinAFConfig(MOT_SPI_MOSI_PIN_GPIO, MOT_SPI_MOSI_PIN_NPIN, MOT_SPI_AF);
    357          ////GPIO_PinAFConfig(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN_NPIN, MOT_SPI_AF);
    358          
    359          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    360          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    361          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    362          ///GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
    363          GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    364          GPIO_InitStructure.GPIO_Pin = MOT_SPI_MISO_PIN;
    365          GPIO_Init(MOT_SPI_MISO_PIN_GPIO, &GPIO_InitStructure);
    366          
    367          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    368          GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCK_PIN;
    369          GPIO_Init(MOT_SPI_SCK_PIN_GPIO, &GPIO_InitStructure);
    370          ////GPIO_InitStructure.GPIO_Pin = MOT_SPI_MISO_PIN;
    371          /////GPIO_Init(MOT_SPI_MISO_PIN_GPIO, &GPIO_InitStructure);
    372          GPIO_InitStructure.GPIO_Pin = MOT_SPI_MOSI_PIN;
    373          GPIO_Init(MOT_SPI_MOSI_PIN_GPIO, &GPIO_InitStructure);
    374          
    375          ////GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCS_PIN;
    376          /////GPIO_Init(MOT_SPI_SCS_PIN_GPIO, &GPIO_InitStructure);
    377          
    378          SPI_I2S_DeInit(MOT_SPI);
    379          SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    380          SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
    381          SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
    382          SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
    383          SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;///SPI_NSS_Hard;///SPI_NSS_Soft;///SPI_NSS_Hard;
    384          SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
    385          SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
    386          SPI_InitStructure.SPI_CRCPolynomial = 7;
    387          SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
    388          SPI_Init(MOT_SPI, &SPI_InitStructure);
    389          SPI_Cmd(MOT_SPI, ENABLE);
    390          }
    391          uint16_t mot_spi_transfer(uint16_t i_data)
    392          {
    393          uint16_t rez=0; 
    394          GPIO_SetBits(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN);
    395          
    396          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_TXE) == RESET);
    397          SPI_I2S_SendData(MOT_SPI, i_data);
    398          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_RXNE) == RESET);
    399          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_TXE) == RESET);
    400          rez=SPI_I2S_ReceiveData(MOT_SPI);
    401          GPIO_ResetBits(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN);
    402          return rez;
    403          }
    404          ////==============================================
    405          void mot_spi_set_br(u16 br)
    406          {
    407          uint16_t tmpreg = 0;
    408          tmpreg = MOT_SPI->CR1& ~(0x7<<3);
    409          tmpreg |=	br&(0x7<<3);
    410          MOT_SPI->CR1=tmpreg;
    411          }
    412          
    413          void mot_spi_wr(uint8_t addr,uint16_t idata)
    414          {
    415          uint16_t tmp;
    416          tmp=(addr&0x7)<<12;
    417          tmp|= idata&0xfff;
    418          mot_spi_transfer(tmp);
    419          }
    420          void mot_spi_wrp(uint8_t addr,uint16_t *pdata)
    421          {
    422          uint16_t tmp;
    423          memcpy(&tmp,pdata,sizeof(uint16_t));
    424          mot_spi_wr(addr,tmp);       
    425          }
    426          uint16_t mot_spi_rd(uint8_t addr)
    427          {
    428          uint16_t rez;
    429          uint16_t tmp;
    430          tmp=(addr&0x7)<<12;
    431          tmp|= 0x8000;
    432          rez=mot_spi_transfer(tmp);
    433          return rez&0xfff;
    434          }
    435          ////========================================================  
    436          
    437          CTRL_Register_t 	G_CTRL_REG;
    438          TORQUE_Register_t 	G_TORQUE_REG;
    439           OFF_Register_t 	G_OFF_REG;
    440          BLANK_Register_t	G_BLANK_REG;
    441          DECAY_Register_t 	G_DECAY_REG;
    442          STALL_Register_t 	G_STALL_REG;
    443          DRIVE_Register_t 	G_DRIVE_REG;
    444          STATUS_Register_t 	G_STATUS_REG;
    445          
    446          void init_step_mot(void)
    447          {
    448            
    449          // CTRL Register
    450          
    451          G_CTRL_REG.DTIME 	= 0x03;
    452          G_CTRL_REG.ISGAIN 	= 0x03;
    453          G_CTRL_REG.EXSTALL 	= 0x00;
    454          G_CTRL_REG.MODE 	= 0;///0x03;
    455          G_CTRL_REG.RSTEP 	= 0x00;
    456          G_CTRL_REG.RDIR 	= 0x00;
    457          G_CTRL_REG.ENBL 	= 0x01;
    458          
    459          // TORQUE Register
    460          G_TORQUE_REG.SIMPLTH = 0x00;
    461          G_TORQUE_REG.TORQUE  = 0xBA;
    462          
    463          // OFF Register
    464          G_OFF_REG.PWMMODE 	= 0x00;
    465          G_OFF_REG.TOFF 		= 0x30;
    466          
    467          // BLANK Register
    468          G_BLANK_REG.ABT 	= 0x01;
    469          G_BLANK_REG.TBLANK 	= 0x08;
    470          
    471          // DECAY Register.
    472          G_DECAY_REG.DECMOD  = 0x03;
    473          G_DECAY_REG.TDECAY 	= 0x10;
    474          
    475          // STALL Register
    476          G_STALL_REG.VDIV 	= 0x03;
    477          G_STALL_REG.SDCNT 	= 0x03;
    478          G_STALL_REG.SDTHR 	= 0x40;
    479          
    480          // DRIVE Register
    481          G_DRIVE_REG.OCPTH 	= 0x01;
    482          G_DRIVE_REG.IDRIVEP = 0x00;
    483          G_DRIVE_REG.IDRIVEN = 0x00;
    484          G_DRIVE_REG.TDRIVEP = 0x01;
    485          G_DRIVE_REG.TDRIVEN = 0x01;
    486          G_DRIVE_REG.OCPDEG 	= 0x01;
    487          
    488          mot_spi_wrp(ADDR_MOT_CTRL,(uint16_t*)&G_CTRL_REG);
    489          mot_spi_wrp(ADDR_MOT_TORQUE,(uint16_t*)&G_TORQUE_REG);
    490          mot_spi_wrp(ADDR_MOT_OFF,(uint16_t*)&G_OFF_REG);
    491          mot_spi_wrp(ADDR_MOT_BLANK,(uint16_t*)&G_BLANK_REG);
    492          mot_spi_wrp(ADDR_MOT_DECAY,(uint16_t*)&G_DECAY_REG);
    493          mot_spi_wrp(ADDR_MOT_STALL,(uint16_t*)&G_STALL_REG);
    494          mot_spi_wrp(ADDR_MOT_DRIVE,(uint16_t*)&G_DRIVE_REG);
    495          
    496          }
    497          ////========================================================  
    498          void set_mot_rej(uint8_t rej)
    499          {
    500          uint16_t tmp;
    501          CTRL_Register_t 	*t_ctrl_reg=(CTRL_Register_t*)&tmp;
    502          tmp=mot_spi_rd(ADDR_MOT_CTRL);
    503          t_ctrl_reg->MODE=rej;
    504          mot_spi_wr(ADDR_MOT_CTRL,tmp);
    505          }
    506          void tst_task( void *pvParameters )
    507          {
    508          ///uint8_t btst=0; 
    509          uint8_t psk=0; 
    510          ///uint16_t tst;
    511          char key=0;
    512          int nstep=300;
    513          uint8_t dir=0;
    514          uint8_t mot_rej=0;
    515          printk("\n\r tst_task"); 
    516          
    517          set_sleep_mot(1);
    518          ////set_ena_mot(1);
    519          set_reset_mot(1);
    520          uDelay(1000);
    521          set_reset_mot(0);
    522          uDelay(20000);
    523          init_step_mot();
    524          ////set_ena_mot(0);
    525          ///tst=mot_spi_rd(0x0);
    526          ///tst|=0x1;
    527          ///mot_spi_wr(0x0,tst);
    528          #if 0      
    529          for(;;)
    530            {
    531          //// sendchar2 (0x33) ; 
    532            put_tst_pin(btst);
    533            btst++;  
    534            ////delay__ms(1);  
    535            uDelay(20000);
    536          ///  mot_spi_transfer(0x1234);
    537          tst=mot_spi_rd(0x0);
    538          printk("\n\r rd[%x]",tst); 
    539          
    540            }
    541          #endif 
    542          
    543              ena_mot(0) ;
    544          
    545           for(;;)
    546            {
    547            key=dbg_get_byte() ;  
    548            switch(key)
    549              {
    550              case 'a':
    551                nstep += 20;
    552                break;
    553              case 's':
    554                if(nstep)
    555                  nstep-= 20;
    556                  break;
    557              case 'd':
    558                dir ++;
    559                dir&=0x1;
    560                break;
    561              case 'm':
    562                mot_rej ++;
    563                if(mot_rej>8)
    564                  mot_rej=0;
    565           ////     mot_rej&=0x7;
    566                break;
    567              case 'p':
    568               psk=1;
    569                break;
    570               
    571             }
    572            printk("\n\r nstep[%d] dir[%x] Mot_rej[%x]",nstep,dir,mot_rej); 
    573            set_dir_mot(dir);
    574            set_mot_rej(mot_rej);
    575            if(psk)
    576              {
    577              put_mot_nstep(nstep);
    578              psk=0;
    579              }
    580          ////  set_led_dutycycle (duty);
    581          
    582            } 
    583          }
    584          ////============================================
    585          extern uint8_t can1_send(uint16_t id,uint8_t data_len,uint8_t *data);
    586          extern uint8_t  CAN_TxRdy;              /* CAN HW ready to transmit message */
    587          extern uint8_t  CAN_RxRdy;              /* CAN HW received a message        */
    588          extern CanRxMsg RxMessage;
    589          
    590          ////========================================================  
    591          void tst1_task( void *pvParameters )
    592          {
    593          ////uint8_t btst=0; 
    594          uint8_t ii=0; 
    595          printk("\n\r tst1_task"); 
    596          for(;;)
    597            {
    598            if( CAN_RxRdy)
    599            {
    600             CAN_RxRdy=0;
    601            printk("\n\r can_rx"); 
    602             printk("\n\r ExtId[%x]",RxMessage.ExtId);
    603             printk("\n\r DLC[%x]\n\r ",RxMessage.DLC);
    604             for(ii=0;ii<8;ii++)
    605              {
    606              printk("[%x] ",RxMessage.Data[ii]);
    607              }
    608            }
    609            else
    610            {
    611              msleep(10);
    612            }
    613            }
    614          }
    615          
    616          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM1_CC_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> ena_mot
         8   -> stop_mot_step_tim
      24   UART_DBG_Init
        24   -> RCC_APB2PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_Init
       8   _putk
         8   -> sendchar6
      16   ena_mot
        16   -> mot_spi_rd
        16   -> mot_spi_wr
       0   get_byte6
       8   get_conc
         8   -> GPIO_ReadInputDataBit
       8   hw_board_init
         8   -> NVIC_PriorityGroupConfig
         8   -> UART_DBG_Init
         8   -> init_gpio
         8   -> mot_spi_init
         8   -> mot_tim_init
      32   init_gpio
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
        32   -> RCC_AHB1PeriphClockCmd
      32   init_step_mot
        32   -> mot_spi_wrp
      40   mot_spi_init
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB1PeriphClockCmd
        40   -> SPI_Cmd
        40   -> SPI_I2S_DeInit
        40   -> SPI_Init
      16   mot_spi_rd
        16   -> mot_spi_transfer
       4   mot_spi_set_br
      24   mot_spi_transfer
        24   -> GPIO_ResetBits
        24   -> GPIO_SetBits
        24   -> SPI_I2S_GetFlagStatus
        24   -> SPI_I2S_ReceiveData
        24   -> SPI_I2S_SendData
      16   mot_spi_wr
        16   -> mot_spi_transfer
      32   mot_spi_wrp
        32   -> __aeabi_memcpy
        32   -> mot_spi_wr
       8   mot_tim_init
         8   -> NVIC_Init
         8   -> TIM_ClearITPendingBit
      16   put_mot_nstep
        16   -> TIM_Cmd
        16   -> TIM_ITConfig
        16   -> ena_mot
       0   sendchar6
       8   set_dir_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
      16   set_mot_rej
        16   -> mot_spi_rd
        16   -> mot_spi_wr
       8   set_reset_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_sleep_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   stop_mot_step_tim
         8   -> TIM_Cmd
      16   tst1_task
        16   -> _printk
        16   -> vTaskDelay
      32   tst_task
        32   -> _printk
        32   -> ena_mot
        32   -> get_byte6
        32   -> init_step_mot
        32   -> put_mot_nstep
        32   -> set_dir_mot
        32   -> set_mot_rej
        32   -> set_reset_mot
        32   -> set_sleep_mot
        32   -> uDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_17
       4  ??DataTable17_18
       4  ??DataTable17_19
       4  ??DataTable17_2
       4  ??DataTable17_20
       4  ??DataTable17_21
       4  ??DataTable17_22
       4  ??DataTable17_23
       4  ??DataTable17_24
       4  ??DataTable17_25
       4  ??DataTable17_26
       4  ??DataTable17_27
       4  ??DataTable17_28
       4  ??DataTable17_29
       4  ??DataTable17_3
       4  ??DataTable17_30
       4  ??DataTable17_31
       4  ??DataTable17_32
       4  ??DataTable17_33
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
      12  ?_0
      36  ?_1
      16  ?_2
      12  ?_3
      16  ?_4
      16  ?_5
       8  ?_6
       2  G_BLANK_REG
       2  G_CTRL_REG
       2  G_DECAY_REG
       2  G_DRIVE_REG
       2  G_OFF_REG
       2  G_STALL_REG
       2  G_STATUS_REG
       2  G_TORQUE_REG
      46  TIM1_CC_IRQHandler
      86  UART_DBG_Init
      14  _putk
      40  ena_mot
      20  get_byte6
      14  get_conc
       4  gsr
      28  hw_board_init
     658  init_gpio
     354  init_step_mot
     228  mot_spi_init
      32  mot_spi_rd
      26  mot_spi_set_br
      94  mot_spi_transfer
      32  mot_spi_wr
      40  mot_spi_wrp
     144  mot_tim_init
       4  num_step
      40  put_mot_nstep
      24  sendchar6
      36  set_dir_mot
      40  set_mot_rej
      36  set_reset_mot
      36  set_sleep_mot
      14  stop_mot_step_tim
      86  tst1_task
     200  tst_task

 
    24 bytes in section .bss
   116 bytes in section .rodata
 2'504 bytes in section .text
 
 2'504 bytes of CODE  memory
   116 bytes of CONST memory
    24 bytes of DATA  memory

Errors: none
Warnings: none
