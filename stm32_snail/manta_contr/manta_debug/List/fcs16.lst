###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         01/Dec/2020  16:53:01
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  D:\proj\velograph\manta\contr\arm\common\hdlc\fcs16.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWBAD2.tmp
#        (D:\proj\velograph\manta\contr\arm\common\hdlc\fcs16.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\.\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\src\board\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\freertos\source\inc\
#        -I D:\proj\velograph\manta\contr\arm\manta_contr\src\inc\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\manta\contr\arm\manta_contr\..\common\dbg\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\inc\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\hdlc\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\List\fcs16.lst
#    Object file  =
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\Obj\fcs16.o
#
###############################################################################

D:\proj\velograph\manta\contr\arm\common\hdlc\fcs16.c
      1            #include "stm32f2xx.h"
      2            #include "stm32f2xx_conf.h"
      3          
      4             /*
      5              * Generate a FCS-16 table.
      6              *
      7              * Drew D. Perkins at Carnegie Mellon University.
      8              *
      9              * Code liberally borrowed from Mohsen Banan and D. Hugh Redelmeier.
     10              */
     11          
     12             /*
     13              * The FCS-16 generator polynomial: x**0 + x**5 + x**12 + x**16.
     14              */
     15          #define P       0x8408
     16          
     17             /*
     18              * u16 represents an unsigned 16-bit number.  Adjust the typedef for
     19              * your hardware.
     20              */
     21          //typedef unsigned short u16;
     22          
     23             /*
     24              * FCS lookup table as calculated by the table generator.
     25              */
     26          static const uint16_t fcstab[256] = {
     27                0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
     28                0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
     29                0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
     30                0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
     31                0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
     32                0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
     33                0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
     34                0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
     35                0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
     36                0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
     37                0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
     38                0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
     39                0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
     40                0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
     41                0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
     42                0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
     43                0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
     44                0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
     45                0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
     46                0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
     47                0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
     48                0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
     49                0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
     50                0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
     51                0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
     52                0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
     53                0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
     54                0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
     55                0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
     56                0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
     57                0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
     58                0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
     59             };
     60          
     61          #define PPPINITFCS16    0xffff  /* Initial FCS value */
     62          #define PPPGOODFCS16    0xf0b8  /* Good final FCS value */
     63          
     64             /*
     65              * Calculate a new fcs given the current fcs and the new data.
     66              */
     67          uint16_t pppfcs16(uint16_t fcs, unsigned char *cp, int len)
     68          {
     69                 while (len--)
     70                     fcs = (fcs >> 8) ^ fcstab[(fcs ^ *cp++) & 0xff];
     71          
     72                 return (fcs);
     73          }
     74          
     75                 /* add on output */
     76          void addfcs16( unsigned char *cp, int len )
     77          {
     78          uint16_t trialfcs;
     79          
     80          trialfcs = pppfcs16( PPPINITFCS16, cp, len );
     81          trialfcs ^= 0xffff;                 /* complement */
     82          cp[len] = (trialfcs & 0x00ff);      /* least significant byte first */
     83          cp[len+1] = ((trialfcs >> 8) & 0x00ff);
     84          }
     85                 /* check on input */
     86          uint32_t checkfcs16(uint8_t *cp, uint32_t len )
     87          {
     88          uint16_t trialfcs;
     89          
     90          trialfcs = pppfcs16( PPPINITFCS16, cp, len + 2 );
     91          if ( trialfcs == PPPGOODFCS16 )
     92               return 1;
     93          return 0;
     94          }
     95          ////======================================================================

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   addfcs16
        16   -> pppfcs16
      16   checkfcs16
        16   -> pppfcs16
       8   pppfcs16


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      38  addfcs16
      40  checkfcs16
     512  fcstab
      44  pppfcs16

 
 512 bytes in section .rodata
 126 bytes in section .text
 
 126 bytes of CODE  memory
 512 bytes of CONST memory

Errors: none
Warnings: none
