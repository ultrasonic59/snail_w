###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         01/Dec/2020  16:53:02
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  D:\proj\velograph\manta\contr\arm\manta_contr\src\main.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWBD0A.tmp
#        (D:\proj\velograph\manta\contr\arm\manta_contr\src\main.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\.\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\src\board\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\freertos\source\inc\
#        -I D:\proj\velograph\manta\contr\arm\manta_contr\src\inc\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\manta\contr\arm\manta_contr\..\common\dbg\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\inc\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\hdlc\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\List\main.lst
#    Object file  =
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\Obj\main.o
#
###############################################################################

D:\proj\velograph\manta\contr\arm\manta_contr\src\main.c
      1          /*
      2           * FreeRTOS Kernel V10.2.1
      3           * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          /*
     29           * Creates all the demo application tasks, then starts the scheduler.  The WEB
     30           * documentation provides more details of the standard demo application tasks.
     31           * In addition to the standard demo tasks, the following tasks and tests are
     32           * defined and/or created within this file:
     33           *
     34           * "Fast Interrupt Test" - A high frequency periodic interrupt is generated
     35           * using a free running timer to demonstrate the use of the
     36           * configKERNEL_INTERRUPT_PRIORITY configuration constant.  The interrupt
     37           * service routine measures the number of processor clocks that occur between
     38           * each interrupt - and in so doing measures the jitter in the interrupt timing.
     39           * The maximum measured jitter time is latched in the ulMaxJitter variable, and
     40           * displayed on the LCD by the 'Check' task as described below.  The
     41           * fast interrupt is configured and handled in the timertest.c source file.
     42           *
     43           * "LCD" task - the LCD task is a 'gatekeeper' task.  It is the only task that
     44           * is permitted to access the display directly.  Other tasks wishing to write a
     45           * message to the LCD send the message on a queue to the LCD task instead of
     46           * accessing the LCD themselves.  The LCD task just blocks on the queue waiting
     47           * for messages - waking and displaying the messages as they arrive.
     48           *
     49           * "Check" task -  This only executes every five seconds but has the highest
     50           * priority so is guaranteed to get processor time.  Its main function is to
     51           * check that all the standard demo tasks are still operational.  Should any
     52           * unexpected behaviour within a demo task be discovered the 'check' task will
     53           * write an error to the LCD (via the LCD task).  If all the demo tasks are
     54           * executing with their expected behaviour then the check task writes PASS
     55           * along with the max jitter time to the LCD (again via the LCD task), as
     56           * described above.
     57           *
     58           */
     59          
     60          /* Standard includes. */
     61          #include <stdio.h>
     62          
     63          /* Scheduler includes. */
     64          #include "FreeRTOS.h"
     65          #include "task.h"
     66          #include "queue.h"
     67          
     68          /* Library includes. */
     69          ////#include "stm32f2xx_it.h"
     70          #include "stm32f2xx_rcc.h"
     71          
     72          /* Demo app includes. */
     73          #include "board.h"
     74          
     75          #if 0
     76          #include "usb_lib.h"
     77          #ifdef USEUSB
     78          #include "usb_desc.h"
     79          #endif
     80          #include "hw_config.h"
     81          #ifdef USEUSB
     82          #include "usb_pwr.h"
     83          #endif
     84          #include "stm32eeprom.h"
     85          ///#include "eeprom.h"
     86          #endif
     87          
     88          #include "misc.h"
     89          #include "printk.h"
     90          #include "_hdlc.h"
     91          ///=======================================================================
     92          #define TST_TASK_STACK_SIZE			( configMINIMAL_STACK_SIZE + 50 )
     93          #define TST_TASK_PRIORITY				( tskIDLE_PRIORITY + 3 )
     94          extern void tst_task( void *pvParameters );
     95          extern void task_dp(void *pvParameters); 
     96          extern void init_hdlc_bt(void);
     97          
     98          ///=======================================================================
     99          
    100          ////========================================================
    101          void uDelay (const uint32_t usec)
    102          {
    103          uint32_t count = 0;
    104          const uint32_t utime = 45*usec;////(120 * usec / 7);
    105          do
    106            {
    107             if ( ++count > utime )
    108              {
    109              return ;
    110              }
    111            }
    112          while (1);
    113          }
    114          extern int LSM6DS3_Detect(void);
    115          extern int bmc150_detect(void);
    116          
    117          extern int send_char_bt (int c) ;
    118          extern hdlc_stat_t g_hdlc_bt;
    119          
    120          void bt_snd_task(void *pdata)
    121          {
    122          ////t_frametx frame_tx;
    123          uint8_t byte_send;
    124          ///hdlc_stat_t *p_hdlc=(hdlc_stat_t *)pdata;
    125          ///==================================
    126          for(;;)
    127            {
    128            if(xQueueReceive(g_hdlc_bt.ua_snd_dat,&byte_send,portMAX_DELAY))
    129              send_char_bt(byte_send);	
    130            }
    131          }
    132          ///====================================
    133             
    134          ////============================================
    135          int main( void )
    136          {
    137          ////uint8_t btst=0; 
    138          uint32_t tst=0;
    139            
    140          #ifdef DEBUG
    141            debug();
    142          #endif
    143          __disable_irq();
    144          
    145          NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
    146          hw_board_init();
    147          #if 0
    148          for(;;)
    149          {
    150           if(LSM6DS3_Detect()>=0)
    151             break;
    152           uDelay(10000);
    153          }
    154          #endif
    155          #if 0
    156          for(;;)
    157          {
    158           if(bmc150_detect()>=0)
    159             break;
    160           uDelay(10000);
    161          }
    162          #endif
    163          
    164          printk("\n\r == init_hdlc_bt ==");  
    165          init_hdlc_bt();
    166          
    167          tst=    xTaskCreate(bt_snd_task, (const char*)"BT_tx", BT_TX_STACK_SIZE, NULL, 6, NULL);
    168          printk("\n\r == bt_snd_task[%x] ==",tst);  
    169          
    170              xTaskCreate( tst_task, "tst_task", TST_TASK_STACK_SIZE, NULL, TST_TASK_PRIORITY, NULL );
    171          tst=    xTaskCreate(task_dp, "DP", configMINIMAL_STACK_SIZE, NULL, 2, ( TaskHandle_t * ) NULL);
    172          ////xTaskCreate(bt_snd_task, (const char*)"BT_tx", BT_TX_STACK_SIZE, NULL, 6, NULL);
    173          printk("\n\r == task_dp[%x] ==",tst);  
    174          
    175          	/* Start the scheduler. */
    176          	vTaskStartScheduler();
    177          
    178          	/* Will only get here if there was not enough heap space to create the
    179          	idle task. */
    180          return 0;
    181          }
    182          ////============================================================
    183          /*-----------------------------------------------------------*/
    184          
    185          
    186          #ifdef  DEBUG
    187          /* Keep the linker happy. */
    188          void assert_failed( unsigned char* pcFile, unsigned long ulLine )
    189          {
    190          	for( ;; )
    191          	{
    192          	}
    193          }
    194          #endif
    195          ////=======================================================
    196          
    197          ////=======================================================

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   bt_snd_task
        16   -> send_char_bt
        16   -> xQueueReceive
      24   main
        24   -> NVIC_PriorityGroupConfig
        24   -> _printk
        24   -> hw_board_init
        24   -> init_hdlc_bt
        24   -> vTaskStartScheduler
        24   -> xTaskCreate
       0   uDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      24  ?_0
       8  ?_1
      28  ?_2
      12  ?_3
       4  ?_4
      24  ?_5
      32  bt_snd_task
     118  main
      18  uDelay

 
 100 bytes in section .rodata
 208 bytes in section .text
 
 208 bytes of CODE  memory
 100 bytes of CONST memory

Errors: none
Warnings: none
