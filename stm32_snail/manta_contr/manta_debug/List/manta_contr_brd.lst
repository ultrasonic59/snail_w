###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         01/Dec/2020  16:53:02
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\manta\contr\arm\manta_contr\src\board\manta_contr_brd.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWBDA7.tmp
#        (D:\proj\velograph\manta\contr\arm\manta_contr\src\board\manta_contr_brd.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\.\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\src\board\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\freertos\source\inc\
#        -I D:\proj\velograph\manta\contr\arm\manta_contr\src\inc\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\manta\contr\arm\manta_contr\..\common\dbg\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\inc\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\hdlc\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\List\manta_contr_brd.lst
#    Object file  =
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\Obj\manta_contr_brd.o
#
###############################################################################

D:\proj\velograph\manta\contr\arm\manta_contr\src\board\manta_contr_brd.c
      1          #include <string.h>
      2          #include "FreeRTOS.h"
      3          #include "queue.h"
      4          #include "semphr.h"
      5          ///#include "stm32f2xx_gpio.h"
      6          ///#include "stm32f2xx_rcc.h"
      7          
      8          #include "manta_contr_brd.h"
      9          #include "_hdlc.h"
     10          #include "printk.h"
     11          
     12          extern void uDelay (const uint32_t usec);
     13          extern void  put_tst_pin(uint8_t idat);
     14          extern int BMC150_init(void);
     15          
     16          dp_dat_t cur_dp_dat;
     17          int send_char_dbg (int c) 
     18          { 
     19          while (!(UART_DBG->SR & USART_FLAG_TXE));
     20          UART_DBG->DR = (c & 0x1FF);
     21          return (c);
     22          }
     23          int send_char_bt (int c) 
     24          { 
     25          while (!(UART_BT->SR & USART_FLAG_TXE));
     26          UART_BT->DR = (c & 0x1FF);
     27          return (c);
     28          }
     29          
     30          ///=============================
     31          
     32          int sendchar6 (int c) 
     33          { 
     34          while (!(USART6->SR & USART_FLAG_TXE));
     35          USART6->DR = (c & 0x1FF);
     36          return (c);
     37          }
     38          
     39          int get_byte6 (void) 
     40          {
     41          while (!(USART6->SR & USART_FLAG_RXNE));
     42          return (USART6->DR);
     43          }
     44          
     45          void _putk(char ch)
     46          {
     47          //sendchar_hdlc(ch);
     48          sendchar6(ch);
     49          }
     50          void set_led0(uint8_t i_dat)
     51          {
     52          if(i_dat&0x1)
     53            GPIO_SetBits(LED0_GPIO, LED0_PIN);
     54          else
     55            GPIO_ResetBits(LED0_GPIO, LED0_PIN);
     56          }
     57          void set_led1(uint8_t i_dat)
     58          {
     59          if(i_dat&0x1)
     60            GPIO_SetBits(LED1_GPIO, LED1_PIN);
     61          else
     62            GPIO_ResetBits(LED1_GPIO, LED1_PIN);
     63          }
     64          
     65          
     66          uint8_t  get_dpx_r0(void)
     67          {
     68          return  GPIO_ReadInputDataBit(DPX_R0_GPIO, DPX_R0_PIN) ;
     69          }
     70          uint8_t  get_dpy_r0(void)
     71          {
     72          return  GPIO_ReadInputDataBit(DPY_R0_GPIO, DPY_R0_PIN) ;
     73          }
     74          
     75          void init_gpio(void)
     76          {
     77            
     78          ////RCC_AHBPeriphClockCmd(XEN_PIN_RCC_AHB,ENABLE);
     79          GPIO_InitTypeDef GPIO_InitStructure;
     80          ////============= DPX_RA ========================
     81          RCC_AHB1PeriphClockCmd(DPX_RA_RCC, ENABLE);
     82          GPIO_InitStructure.GPIO_Pin = DPX_RA_PIN;
     83          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
     84          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     85          GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_DOWN;
     86          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     87          GPIO_Init( DPX_RA_GPIO, &GPIO_InitStructure );
     88          GPIO_PinAFConfig(DPX_RA_GPIO, DPX_RA_PIN_NPIN, DPX_RA_AF);
     89          ////============= DPX_RB ========================
     90          RCC_AHB1PeriphClockCmd(DPX_RA_RCC, ENABLE);
     91          GPIO_InitStructure.GPIO_Pin = DPX_RB_PIN;
     92          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
     93          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     94          GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_DOWN;
     95          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     96          GPIO_Init( DPX_RB_GPIO, &GPIO_InitStructure );
     97          GPIO_PinAFConfig(DPX_RB_GPIO, DPX_RB_PIN_NPIN, DPX_RB_AF);
     98          ///=============DPX_R0 =========================
     99          RCC_AHB1PeriphClockCmd(DPX_R0_RCC,ENABLE);
    100          GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
    101          GPIO_InitStructure.GPIO_Pin   = DPX_R0_PIN;
    102          GPIO_Init(DPX_R0_GPIO, &GPIO_InitStructure);
    103          
    104          ////============= DPX_LA ========================
    105          RCC_AHB1PeriphClockCmd(DPX_LA_RCC, ENABLE);
    106          GPIO_InitStructure.GPIO_Pin = DPX_LA_PIN;
    107          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    108          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    109          GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_DOWN;
    110          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    111          GPIO_Init( DPX_LA_GPIO, &GPIO_InitStructure );
    112          GPIO_PinAFConfig(DPX_LA_GPIO, DPX_LA_PIN_NPIN, DPX_LA_AF);
    113          ////============= DPX_LB ========================
    114          RCC_AHB1PeriphClockCmd(DPX_LA_RCC, ENABLE);
    115          GPIO_InitStructure.GPIO_Pin = DPX_LB_PIN;
    116          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    117          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    118          GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_DOWN;
    119          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    120          GPIO_Init( DPX_LB_GPIO, &GPIO_InitStructure );
    121          GPIO_PinAFConfig(DPX_LB_GPIO, DPX_LB_PIN_NPIN, DPX_LB_AF);
    122          ////============= DPY_RA ========================
    123          RCC_AHB1PeriphClockCmd(DPY_RA_RCC, ENABLE);
    124          GPIO_InitStructure.GPIO_Pin = DPY_RA_PIN;
    125          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    126          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    127          GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_DOWN;
    128          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    129          GPIO_Init( DPY_RA_GPIO, &GPIO_InitStructure );
    130          GPIO_PinAFConfig(DPY_RA_GPIO, DPY_RA_PIN_NPIN, DPY_RA_AF);
    131          ////============= DPY_RB ========================
    132          RCC_AHB1PeriphClockCmd(DPY_RA_RCC, ENABLE);
    133          GPIO_InitStructure.GPIO_Pin = DPY_RB_PIN;
    134          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    135          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    136          GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_DOWN;
    137          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    138          GPIO_Init( DPY_RB_GPIO, &GPIO_InitStructure );
    139          GPIO_PinAFConfig(DPY_RB_GPIO, DPY_RB_PIN_NPIN, DPY_RB_AF);
    140          ////=============DPY_R0 =========================
    141          RCC_AHB1PeriphClockCmd(DPY_R0_RCC,ENABLE);
    142          GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;
    143          GPIO_InitStructure.GPIO_Pin   = DPY_R0_PIN;
    144          GPIO_Init(DPY_R0_GPIO, &GPIO_InitStructure);
    145          
    146          ////============= DPY_LA ========================
    147          RCC_AHB1PeriphClockCmd(DPY_LA_RCC, ENABLE);
    148          GPIO_InitStructure.GPIO_Pin = DPY_LA_PIN;
    149          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    150          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    151          GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_DOWN;
    152          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    153          GPIO_Init( DPY_LA_GPIO, &GPIO_InitStructure );
    154          GPIO_PinAFConfig(DPY_LA_GPIO, DPY_LA_PIN_NPIN, DPY_LA_AF);
    155          ////============= DPY_LB ========================
    156          RCC_AHB1PeriphClockCmd(DPY_LA_RCC, ENABLE);
    157          GPIO_InitStructure.GPIO_Pin = DPY_LB_PIN;
    158          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    159          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    160          GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_DOWN;
    161          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    162          GPIO_Init( DPY_LB_GPIO, &GPIO_InitStructure );
    163          GPIO_PinAFConfig(DPY_LB_GPIO, DPY_LB_PIN_NPIN, DPY_LB_AF);
    164            
    165          ////=========== DBG_UART =================================================== 
    166          RCC_AHB1PeriphClockCmd(UART_DBG_TX_RCC, ENABLE);
    167          GPIO_InitStructure.GPIO_Pin = UART_DBG_TX_PIN;
    168          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    169          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    170          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    171          GPIO_Init( UART_DBG_TX_GPIO, &GPIO_InitStructure );
    172          
    173          RCC_AHB1PeriphClockCmd(UART_DBG_RX_RCC, ENABLE);
    174          GPIO_InitStructure.GPIO_Pin = UART_DBG_RX_PIN;
    175          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    176          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    177          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    178          GPIO_Init( UART_DBG_RX_GPIO, &GPIO_InitStructure );
    179            
    180          GPIO_PinAFConfig(UART_DBG_TX_GPIO, UART_DBG_TX_PIN_NPIN, UART_DBG_TX_AF);
    181          GPIO_PinAFConfig(UART_DBG_RX_GPIO, UART_DBG_RX_PIN_NPIN, UART_DBG_RX_AF);
    182          ////===================================================================
    183          ////=========== BT_UART =================================================== 
    184          RCC_AHB1PeriphClockCmd(UART_BT_TX_RCC, ENABLE);
    185          GPIO_InitStructure.GPIO_Pin = UART_BT_TX_PIN;
    186          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    187          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    188          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    189          GPIO_Init( UART_BT_TX_GPIO, &GPIO_InitStructure );
    190          
    191          RCC_AHB1PeriphClockCmd(UART_BT_RX_RCC, ENABLE);
    192          GPIO_InitStructure.GPIO_Pin = UART_BT_RX_PIN;
    193          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    194          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    195          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    196          GPIO_Init( UART_BT_RX_GPIO, &GPIO_InitStructure );
    197            
    198          GPIO_PinAFConfig(UART_BT_TX_GPIO, UART_BT_TX_PIN_NPIN, UART_BT_TX_AF);
    199          GPIO_PinAFConfig(UART_BT_RX_GPIO, UART_BT_RX_PIN_NPIN, UART_BT_RX_AF);
    200          ////================ LED0 ===========================
    201          RCC_AHB1PeriphClockCmd(LED0_RCC_AHB,ENABLE);
    202          GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
    203          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    204          GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    205          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    206          GPIO_InitStructure.GPIO_Pin   = LED0_PIN;
    207          GPIO_Init(LED0_GPIO, &GPIO_InitStructure);
    208          GPIO_SetBits(LED0_GPIO, LED0_PIN);
    209          ////================ LED1 ===========================
    210          RCC_AHB1PeriphClockCmd(LED1_RCC_AHB,ENABLE);
    211          GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
    212          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    213          GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    214          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    215          GPIO_InitStructure.GPIO_Pin   = LED1_PIN;
    216          GPIO_Init(LED1_GPIO, &GPIO_InitStructure);
    217          GPIO_SetBits(LED1_GPIO, LED1_PIN);
    218          
    219          }
    220          ////=============================================
    221          void UART_DBG_Init(void)
    222          {
    223          ////GPIO_InitTypeDef GPIO_InitStructure;
    224          USART_InitTypeDef USART_InitStructure;
    225          UART_DBG_CLK_INIT(UART_DBG_CLK, ENABLE);
    226          USART_DeInit(UART_DBG);
    227          USART_InitStructure.USART_BaudRate = 115200;
    228          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    229          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    230          USART_InitStructure.USART_Parity = USART_Parity_No;
    231          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    232          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    233          USART_Init(UART_DBG, &USART_InitStructure);
    234          UART_DBG->CR1 |= USART_CR1_RXNEIE;
    235          USART_Cmd(UART_DBG, ENABLE);
    236          }
    237          
    238          ////==================================================
    239          extern hdlc_stat_t g_hdlc_bt;
    240          
    241          ////===========================================================
    242          void USART2_IRQHandler(void)
    243          {
    244          ///int cnt;  
    245          u8 ch;
    246          uint32_t tmp_sr;
    247          signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    248          ////signed portBASE_TYPE xTaskWoken= pdFALSE;
    249          
    250          tmp_sr=UART_BT->SR;  
    251          if((tmp_sr&USART_FLAG_RXNE) != 0)
    252            {
    253            UART_BT->SR &= ~USART_FLAG_RXNE;              ///  USART_ClearITPendingBit(UART_BT, USART_IT_RXNE);
    254            ch = (u8)(UART_BT->DR & 0x0FF);
    255            if (hdlc1_on_bytein(&g_hdlc_bt, ch) > 0)
    256              {
    257              xQueueSendFromISR(g_hdlc_bt.ev_rsv_frame, &ch, &xHigherPriorityTaskWoken);
    258            }
    259            }
    260          else if((tmp_sr&USART_FLAG_ORE) != 0)
    261            {
    262            ch = (u8)(UART_BT->DR & 0x0FF);
    263            USART_ClearITPendingBit(UART_BT, USART_FLAG_ORE);
    264            }
    265          #if 0
    266          if ((tmp_sr&USART_FLAG_TXE) != 0)
    267              {
    268              UART_BT->SR &= ~USART_IT_TXE;              ///  USART_ClearITPendingBit(UART_BT, USART_IT_TXE);
    269              if (xQueueReceiveFromISR(g_hdlc_bt.ua_snd_dat, &ch, &xTaskWoken ) == pdPASS)
    270                {
    271                UART_BT->DR = ch & 0x1FF;
    272                }
    273              if (xQueueIsQueueEmptyFromISR(g_hdlc_bt.ua_snd_dat))
    274                {
    275                UART_BT->CR1 &= ~USART_CR1_TXEIE;		      // disable TX interrupt if nothing to send
    276                }
    277              }
    278          #endif
    279          }
    280          
    281          void init_irq_bt(void)
    282          {
    283          NVIC_InitTypeDef NVIC_InitStructure;
    284          NVIC_InitStructure.NVIC_IRQChannel = UART_BT_IRQn;
    285          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 6;///0x6;
    286          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;////7;	//1;
    287          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    288          NVIC_Init(&NVIC_InitStructure);
    289          }
    290          
    291          void UART_BT_Init(void)
    292          {
    293            int i;
    294          ////GPIO_InitTypeDef GPIO_InitStructure;
    295          USART_InitTypeDef USART_InitStructure;
    296          UART_BT_CLK_INIT(UART_BT_CLK, ENABLE);
    297          USART_DeInit(UART_BT);
    298          USART_InitStructure.USART_BaudRate = 115200;////19200;////115200;////9600;////38400;////115200;
    299          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    300          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    301          USART_InitStructure.USART_Parity = USART_Parity_No;
    302          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    303          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    304          USART_Init(UART_BT, &USART_InitStructure);
    305          UART_BT->CR1 |= USART_CR1_RXNEIE;
    306          USART_Cmd(UART_BT, ENABLE);
    307          for (i = 0; i < 0x1000; i++)
    308            {
    309            __NOP();   //avoid unwanted output
    310            }
    311          ////UART_BT->CR1 = 0x202C;
    312          
    313          UART_BT->SR = 0;
    314          init_irq_bt();
    315          
    316          }
    317          
    318          void init_timers(void)
    319          {
    320          ////NVIC_InitTypeDef NVIC_InitStructure; 
    321          ////============= DPX_R ========================
    322          RCC->APB2ENR |= DPX_R_TIM_RCC;
    323          DPX_R_TIM ->CCER = TIM_CCER_CC1P | TIM_CCER_CC2P;
    324          DPX_R_TIM ->CCMR1 = TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    325          DPX_R_TIM->SMCR = TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
    326          DPX_R_TIM ->ARR = DPX_R_TIM_PERIOD;////
    327          DPX_R_TIM->CR1 = TIM_CR1_CEN;
    328          ////============= DPX_L ========================
    329          RCC->APB1ENR |= DPX_L_TIM_RCC;
    330          DPX_L_TIM ->CCER = TIM_CCER_CC1P | TIM_CCER_CC2P;
    331          DPX_L_TIM ->CCMR1 = TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    332          DPX_L_TIM->SMCR = TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
    333          DPX_L_TIM ->ARR = DPX_R_TIM_PERIOD;////
    334          DPX_L_TIM->CR1 = TIM_CR1_CEN;
    335          ////============= DPY_R ========================
    336          RCC->APB1ENR |= DPY_R_TIM_RCC;
    337          DPY_R_TIM ->CCER = TIM_CCER_CC1P | TIM_CCER_CC2P;
    338          DPY_R_TIM ->CCMR1 = TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    339          DPY_R_TIM->SMCR = TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
    340          DPY_R_TIM ->ARR = DPX_R_TIM_PERIOD;////
    341          DPY_R_TIM->CR1 = TIM_CR1_CEN;
    342          ////============= DPY_L ========================
    343          RCC->APB1ENR |= DPY_L_TIM_RCC;
    344          DPY_L_TIM ->CCER = TIM_CCER_CC1P | TIM_CCER_CC2P;
    345          DPY_L_TIM ->CCMR1 = TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    346          DPY_L_TIM->SMCR = TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
    347          DPY_L_TIM ->ARR = DPX_R_TIM_PERIOD;////
    348          DPY_L_TIM->CR1 = TIM_CR1_CEN;
    349          
    350          }
    351          ////==================================
    352          void on_int_tx_uart_bt(void)
    353          {
    354          UART_BT->CR1 |= USART_CR1_TXEIE;  // enable TX interrupt
    355          }
    356          
    357          ////==================================================
    358          
    359          volatile uint32_t num_step=0;
    360          
    361          volatile uint32_t gsr;
    362          uint8_t flg_xr_ok=0;
    363          uint8_t flg_yr_ok=0;
    364          ////=======================================================
    365          #if 0
    366          uint8_t get_conc(void)
    367          {
    368          return GPIO_ReadInputDataBit(CONC_PIN_GPIO, CONC_PIN);
    369          }
    370          #endif
    371          
    372          void clr_all_dp(void)
    373          {
    374          DPX_R_TIM->CNT=0; 
    375          DPX_L_TIM->CNT=0; 
    376          DPY_R_TIM->CNT=0; 
    377          DPY_L_TIM->CNT=0; 
    378          }
    379          void clr_dpx_r0(void)
    380          {
    381          DPX_R_TIM->CNT=0; 
    382          flg_xr_ok=1;
    383          }
    384          void clr_dpy_r0(void)
    385          {
    386          DPY_R_TIM->CNT=0;
    387          flg_yr_ok=1;
    388          }
    389          
    390          void init_r0int(void)
    391          {
    392          GPIO_InitTypeDef GPIO_InitStructure;
    393          EXTI_InitTypeDef EXTI_InitStructure;
    394          NVIC_InitTypeDef NVIC_InitStructure;
    395          RCC_AHB1PeriphClockCmd(DPX_R0_RCC, ENABLE);
    396          RCC_AHB1PeriphClockCmd(DPY_R0_RCC, ENABLE);
    397          RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    398          ////============= DPX_R0 ==========================
    399          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    400          GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;///GPIO_PuPd_NOPULL;
    401          GPIO_InitStructure.GPIO_Pin = DPX_R0_PIN;
    402          GPIO_Init(DPX_R0_GPIO, &GPIO_InitStructure);
    403          /* Connect  EXTI Line to GPIO Pin */
    404          SYSCFG_EXTILineConfig(DPX_R0_EXTI_PORT, DPX_R0_EXTI_PIN);
    405          /* Configure  EXTI line */
    406          EXTI_InitStructure.EXTI_Line = DPX_R0_EXTI_LINE;
    407          EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    408          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    409          EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    410          EXTI_Init(&EXTI_InitStructure);
    411          
    412          /* Enable and set EXTI Interrupt to the lowest priority */
    413          NVIC_InitStructure.NVIC_IRQChannel = DPX_R0_EXTI_IRQn;
    414          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    415          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    416          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    417          NVIC_Init(&NVIC_InitStructure); 
    418          ////============= DPY_R0 ==========================
    419          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    420          GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;///GPIO_PuPd_NOPULL;
    421          GPIO_InitStructure.GPIO_Pin = DPY_R0_PIN;
    422          GPIO_Init(DPY_R0_GPIO, &GPIO_InitStructure);
    423          /* Connect  EXTI Line to GPIO Pin */
    424          SYSCFG_EXTILineConfig(DPY_R0_EXTI_PORT, DPY_R0_EXTI_PIN);
    425          /* Configure  EXTI line */
    426          EXTI_InitStructure.EXTI_Line = DPY_R0_EXTI_LINE;
    427          EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    428          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    429          EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    430          EXTI_Init(&EXTI_InitStructure);
    431          /* Enable and set EXTI Interrupt to the lowest priority */
    432          NVIC_InitStructure.NVIC_IRQChannel = DPY_R0_EXTI_IRQn;
    433          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    434          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    435          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    436          NVIC_Init(&NVIC_InitStructure); 
    437          
    438          }
    439          ////=============================================
    440          void hw_board_init(void)
    441          {
    442          init_gpio();
    443          UART_DBG_Init(); 
    444          UART_BT_Init(); 
    445          /////init_i2c();
    446          ////BMC150_init();
    447           
    448          init_timers();
    449          init_r0int();
    450          clr_all_dp();
    451          flg_xr_ok=0;
    452          flg_yr_ok=0;
    453          
    454          }
    455          #define POR_P 2
    456          ////============================================
    457          void tst_task( void *pvParameters )
    458          {
    459          uint8_t btst=0; 
    460          int16_t tst=0;
    461           for(;;)
    462            {
    463            if(flg_xr_ok)
    464            {
    465              tst=(int)(DPX_R_TIM->CNT);
    466              if(tst>0)
    467                {
    468                  if(tst<POR_P)
    469                    btst=1;
    470                  else
    471                    btst=0;
    472                }
    473              else if(tst<0)
    474                {
    475                  if(tst> -POR_P)
    476                    btst=1;
    477                  else
    478                    btst=0;
    479                }
    480               else
    481                 btst=1;
    482              set_led0(btst); 
    483            }
    484            else
    485               set_led0(0); 
    486             if(flg_yr_ok)
    487            {
    488            
    489          ///  btst= get_dpy_r0();
    490              tst=(int)DPY_R_TIM->CNT;
    491              if(tst>0)
    492                {
    493                  if(tst<POR_P)
    494                    btst=1;
    495                  else
    496                    btst=0;
    497                }
    498              else if(tst<0)
    499                {
    500                  if(tst> -POR_P)
    501                    btst=1;
    502                  else
    503                    btst=0;
    504                }
    505               else
    506                 btst=1;
    507          
    508             set_led1(btst); 
    509            }
    510            else
    511              set_led1(0); 
    512             
    513              msleep(200);
    514            ////key=dbg_get_byte() ;  
    515            ////printk("\n\r nstep[%d] dir[%x] Mot_rej[%x]",nstep,dir,mot_rej); 
    516            } 
    517          }
    518          ////============================================
    519          ////======================================
    520          void task_dp(void *pvParameters) 
    521          {
    522          int16_t tmp;
    523          int16_t prev_r=0;
    524          int16_t prev_l=0;
    525          int16_t prev_yr=0;
    526          int16_t prev_yl=0;
    527          
    528          for (;;) 
    529            {
    530            if(flg_xr_ok)
    531                {
    532                tmp=DPX_R_TIM->CNT; 
    533                cur_dp_dat.dp_ar=tmp;
    534                if(prev_r!= tmp)
    535                  {
    536                  prev_r= tmp;
    537                  printk("\r\n DPX_R[%d] ",tmp);
    538                  }
    539                }                                  
    540          #if 1   
    541             tmp=DPX_L_TIM->CNT; 
    542             cur_dp_dat.dp_al=tmp;
    543             if(prev_l!= tmp)
    544                {
    545                prev_l= tmp;
    546                printk("\r\n DPX_L[%d] ",tmp);
    547                }
    548          #endif   
    549            if(flg_yr_ok)
    550             {
    551             tmp=DPY_R_TIM->CNT; 
    552             cur_dp_dat.dp_br=tmp;
    553             if(prev_yr!= tmp)
    554                {
    555                prev_yr= tmp;
    556                printk("\r\n DPY_R[%d] ",tmp);
    557                }
    558              }
    559             tmp=DPY_L_TIM->CNT; 
    560             cur_dp_dat.dp_bl=tmp;
    561             if(prev_yl!= tmp)
    562                {
    563                prev_yl= tmp;
    564                printk("\r\n DPY_L[%d] ",tmp);
    565                }
    566             
    567          ////    vTaskDelay(500);
    568              }
    569          }
    570          
    571          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   UART_BT_Init
        32   -> RCC_APB1PeriphClockCmd
        32   -> USART_Cmd
        32   -> USART_DeInit
        32   -> USART_Init
        32   -> init_irq_bt
      24   UART_DBG_Init
        24   -> RCC_APB2PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_Init
      24   USART2_IRQHandler
        24   -> USART_ClearITPendingBit
        24   -> hdlc1_on_bytein
        24   -> xQueueGenericSendFromISR
       8   _putk
         8   -> sendchar6
       0   clr_all_dp
       0   clr_dpx_r0
       0   clr_dpy_r0
       0   get_byte6
       8   get_dpx_r0
         8   -> GPIO_ReadInputDataBit
       8   get_dpy_r0
         8   -> GPIO_ReadInputDataBit
       8   hw_board_init
         8   -> UART_BT_Init
         8   -> UART_DBG_Init
         8   -> clr_all_dp
         8   -> init_gpio
         8   -> init_r0int
         8   -> init_timers
      32   init_gpio
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
        32   -> GPIO_SetBits
        32   -> RCC_AHB1PeriphClockCmd
       8   init_irq_bt
         8   -> NVIC_Init
      32   init_r0int
        32   -> EXTI_Init
        32   -> GPIO_Init
        32   -> NVIC_Init
        32   -> RCC_AHB1PeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
        32   -> SYSCFG_EXTILineConfig
       4   init_timers
       0   on_int_tx_uart_bt
       0   send_char_bt
       0   send_char_dbg
       0   sendchar6
       8   set_led0
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_led1
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
      40   task_dp
        40   -> _printk
      16   tst_task
        16   -> set_led0
        16   -> set_led1
        16   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_25
       4  ??DataTable20_26
       4  ??DataTable20_27
       4  ??DataTable20_28
       4  ??DataTable20_29
       4  ??DataTable20_3
       4  ??DataTable20_30
       4  ??DataTable20_31
       4  ??DataTable20_32
       4  ??DataTable20_33
       4  ??DataTable20_34
       4  ??DataTable20_35
       4  ??DataTable20_36
       4  ??DataTable20_37
       4  ??DataTable20_38
       4  ??DataTable20_39
       4  ??DataTable20_4
       4  ??DataTable20_40
       4  ??DataTable20_41
       4  ??DataTable20_42
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
      16  ?_0
      16  ?_1
      16  ?_2
      16  ?_3
     114  UART_BT_Init
      86  UART_DBG_Init
      90  USART2_IRQHandler
      14  _putk
      26  clr_all_dp
      14  clr_dpx_r0
      14  clr_dpy_r0
       8  cur_dp_dat
       1  flg_xr_ok
       1  flg_yr_ok
      20  get_byte6
      14  get_dpx_r0
      14  get_dpy_r0
       4  gsr
      40  hw_board_init
     756  init_gpio
      34  init_irq_bt
     216  init_r0int
     188  init_timers
       4  num_step
      12  on_int_tx_uart_bt
      24  send_char_bt
      24  send_char_dbg
      24  sendchar6
      36  set_led0
      36  set_led1
     176  task_dp
     200  tst_task

 
    18 bytes in section .bss
    64 bytes in section .rodata
 2'344 bytes in section .text
 
 2'344 bytes of CODE  memory
    64 bytes of CONST memory
    18 bytes of DATA  memory

Errors: none
Warnings: none
