###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         01/Dec/2020  16:53:03
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\manta\contr\arm\common\libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_syscfg.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWC20A.tmp
#        (D:\proj\velograph\manta\contr\arm\common\libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_syscfg.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\.\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\src\board\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\freertos\source\inc\
#        -I D:\proj\velograph\manta\contr\arm\manta_contr\src\inc\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\manta\contr\arm\manta_contr\..\common\dbg\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\inc\ -I
#        D:\proj\velograph\manta\contr\arm\manta_contr\..\common\hdlc\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\List\stm32f2xx_syscfg.lst
#    Object file  =
#        D:\proj\velograph\manta\contr\arm\manta_contr\manta_debug\Obj\stm32f2xx_syscfg.o
#
###############################################################################

D:\proj\velograph\manta\contr\arm\common\libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_syscfg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_syscfg.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    07-October-2011
      7            * @brief   This file provides firmware functions to manage the SYSCFG peripheral.
      8            *
      9            *  @verbatim
     10            *  
     11            *          ===================================================================
     12            *                                 How to use this driver
     13            *          ===================================================================
     14            *                  
     15            *          This driver provides functions for:
     16            *          
     17            *          1. Remapping the memory accessible in the code area using SYSCFG_MemoryRemapConfig()
     18            *              
     19            *          2. Manage the EXTI lines connection to the GPIOs using SYSCFG_EXTILineConfig()
     20            *            
     21            *          3. Select the ETHERNET media interface (RMII/RII) using SYSCFG_ETH_MediaInterfaceConfig()
     22            *
     23            *  @note  SYSCFG APB clock must be enabled to get write access to SYSCFG registers,
     24            *         using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     25            *                 
     26            *  @endverbatim
     27            *      
     28            ******************************************************************************
     29            * @attention
     30            *
     31            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     32            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     33            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     34            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     35            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     36            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     37            *
     38            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     39            ******************************************************************************
     40            */
     41          
     42          /* Includes ------------------------------------------------------------------*/
     43          #include "stm32f2xx_conf.h"
     44          #include "stm32f2xx_syscfg.h"
     45          #include "stm32f2xx_rcc.h"
     46          
     47          /** @addtogroup STM32F2xx_StdPeriph_Driver
     48            * @{
     49            */
     50          
     51          /** @defgroup SYSCFG 
     52            * @brief SYSCFG driver modules
     53            * @{
     54            */ 
     55          
     56          /* Private typedef -----------------------------------------------------------*/
     57          /* Private define ------------------------------------------------------------*/
     58          /* ------------ RCC registers bit address in the alias region ----------- */
     59          #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
     60          /* ---  PMC Register ---*/ 
     61          /* Alias word address of MII_RMII_SEL bit */ 
     62          #define PMC_OFFSET                (SYSCFG_OFFSET + 0x04) 
     63          #define MII_RMII_SEL_BitNumber    ((uint8_t)0x17) 
     64          #define PMC_MII_RMII_SEL_BB       (PERIPH_BB_BASE + (PMC_OFFSET * 32) + (MII_RMII_SEL_BitNumber * 4)) 
     65          
     66          /* ---  CMPCR Register ---*/ 
     67          /* Alias word address of CMP_PD bit */ 
     68          #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20) 
     69          #define CMP_PD_BitNumber          ((uint8_t)0x00) 
     70          #define CMPCR_CMP_PD_BB           (PERIPH_BB_BASE + (CMPCR_OFFSET * 32) + (CMP_PD_BitNumber * 4)) 
     71          
     72          /* Private macro -------------------------------------------------------------*/
     73          /* Private variables ---------------------------------------------------------*/
     74          /* Private function prototypes -----------------------------------------------*/
     75          /* Private functions ---------------------------------------------------------*/
     76          
     77          /** @defgroup SYSCFG_Private_Functions
     78            * @{
     79            */ 
     80          
     81          /**
     82            * @brief  Deinitializes the Alternate Functions (remap and EXTI configuration)
     83            *   registers to their default reset values.
     84            * @param  None
     85            * @retval None
     86            */
     87          void SYSCFG_DeInit(void)
     88          {
     89             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     90             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
     91          }
     92          
     93          /**
     94            * @brief  Changes the mapping of the specified pin.
     95            * @param  SYSCFG_Memory: selects the memory remapping.
     96            *         This parameter can be one of the following values:
     97            *            @arg SYSCFG_MemoryRemap_Flash:       Main Flash memory mapped at 0x00000000  
     98            *            @arg SYSCFG_MemoryRemap_SystemFlash: System Flash memory mapped at 0x00000000
     99            *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
    100            *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
    101            *  
    102            * @note   In remap mode, the FSMC addressing is fixed to the remap address area only
    103            *        (Bank1 NOR/PSRAM 1 and NOR/PSRAM 2) and FSMC control registers are not
    104            *         accessible. The FSMC remap function must be disabled to allows addressing
    105            *         other memory devices through the FSMC and/or to access FSMC control
    106            *         registers. 
    107            *        
    108            * @retval None
    109            */
    110          void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
    111          {
    112            /* Check the parameters */
    113            assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));
    114          
    115            SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
    116          }
    117          
    118          /**
    119            * @brief  Selects the GPIO pin used as EXTI Line.
    120            * @param  EXTI_PortSourceGPIOx : selects the GPIO port to be used as source for
    121            *          EXTI lines where x can be (A..I).
    122            * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
    123            *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
    124            *           for EXTI_PortSourceGPIOI x can be (0..11).
    125            * @retval None
    126            */
    127          void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
    128          {
    129            uint32_t tmp = 0x00;
    130          
    131            /* Check the parameters */
    132            assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
    133            assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
    134          
    135            tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
    136            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
    137            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
    138          }
    139          
    140          /**
    141            * @brief  Selects the ETHERNET media interface 
    142            * @param  SYSCFG_ETH_MediaInterface: specifies the Media Interface mode. 
    143            *          This parameter can be one of the following values: 
    144            *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
    145            *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
    146            * @retval None 
    147            */
    148          void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
    149          { 
    150            assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
    151            /* Configure MII_RMII selection bit */ 
    152            *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
    153          }
    154          
    155          /**
    156            * @brief  Enables or disables the I/O Compensation Cell.
    157            * @note   The I/O compensation cell can be used only when the device supply
    158            *         voltage ranges from 2.4 to 3.6 V.  
    159            * @param  NewState: new state of the I/O Compensation Cell.
    160            *          This parameter can be one of the following values:
    161            *            @arg ENABLE: I/O compensation cell enabled  
    162            *            @arg DISABLE: I/O compensation cell power-down mode  
    163            * @retval None
    164            */
    165          void SYSCFG_CompensationCellCmd(FunctionalState NewState)
    166          {
    167            /* Check the parameters */
    168            assert_param(IS_FUNCTIONAL_STATE(NewState));
    169          
    170            *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
    171          }
    172          
    173          /**
    174            * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
    175            * @param  None
    176            * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
    177            */
    178          FlagStatus SYSCFG_GetCompensationCellStatus(void)
    179          {
    180            FlagStatus bitstatus = RESET;
    181              
    182            if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
    183            {
    184              bitstatus = SET;
    185            }
    186            else
    187            {
    188              bitstatus = RESET;
    189            }
    190            return bitstatus;
    191          }
    192          
    193          /**
    194            * @}
    195            */
    196          
    197          /**
    198            * @}
    199            */
    200          
    201          /**
    202            * @}
    203            */
    204          
    205          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SYSCFG_CompensationCellCmd
       8   SYSCFG_DeInit
         8   -> RCC_APB2PeriphResetCmd
       0   SYSCFG_ETH_MediaInterfaceConfig
      16   SYSCFG_EXTILineConfig
       0   SYSCFG_GetCompensationCellStatus
       0   SYSCFG_MemoryRemapConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
      10  SYSCFG_CompensationCellCmd
      24  SYSCFG_DeInit
       6  SYSCFG_ETH_MediaInterfaceConfig
      82  SYSCFG_EXTILineConfig
      20  SYSCFG_GetCompensationCellStatus
      10  SYSCFG_MemoryRemapConfig

 
 172 bytes in section .text
 
 172 bytes of CODE memory

Errors: none
Warnings: none
