###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         11/Sep/2021  20:10:58
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\main.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW9C03.tmp
#        (D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\main.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D DIMA_BRD -D STEP_X -D STM32F205xx
#        -lcN
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\.\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\dbg\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\List\main.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\Obj\main.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\main.c
      1          
      2          #include <stdio.h>
      3          
      4          #include "FreeRTOS.h"
      5          #include "task.h"
      6          #include "queue.h"
      7          
      8          /* Library includes. */
      9          ////#include "stm32f2xx_it.h"
     10          #include "stm32f2xx_rcc.h"
     11          
     12          /* Demo app includes. */
     13          #include "board.h"
     14          
     15          #if 0
     16          #include "usb_lib.h"
     17          #ifdef USEUSB
     18          #include "usb_desc.h"
     19          #endif
     20          #include "hw_config.h"
     21          #ifdef USEUSB
     22          #include "usb_pwr.h"
     23          #endif
     24          #include "stm32eeprom.h"
     25          ///#include "eeprom.h"
     26          #endif
     27          
     28          #include "misc.h"
     29          #include "printk.h"
     30          ///=======================================================================
     31          #define TST_TASK_STACK_SIZE			1024            ////( configMINIMAL_STACK_SIZE + 50 )
     32          #define TST_TASK_PRIORITY				( tskIDLE_PRIORITY + 3 )
     33          ////extern void tst_task( void *pvParameters );
     34          extern void tst1_task( void *pvParameters );
     35          extern int can_main(void);
     36          
     37          ////============================================
     38          int main( void )
     39          {
     40          ////uint8_t btst=0; 
     41          ////uint32_t tst=0;
     42          #ifdef DEBUG
     43            debug();
     44          #endif
     45          __disable_irq();
     46          hw_board_init();
     47          #if STEP_X
     48            printk("\n\r=== [step_x_axis] ==="); 
     49          #elif STEP_Y
     50            printk("\n\r=== [step_y_axis] ==="); 
     51          #elif STEP_Z
     52            printk("\n\r=== [step_z_axis] ==="); 
     53          #else 
     54            #error "\n\r=== STEP_... nodefined ==="; 
     55          #endif
     56          ////=================================================
     57          can1_init();
     58          ////can_main();
     59          ////=================================================
     60          NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
     61          xTaskCreate( motor_task, "tst_task", MOTOR_TASK_STACK_SIZE, NULL, MOTOR_TASK_PRIORITY, NULL );
     62          xTaskCreate( tst1_task, "tst1_task", TST_TASK_STACK_SIZE, NULL, TST_TASK_PRIORITY, NULL );
     63          
     64          /* Start the scheduler. */
     65          vTaskStartScheduler();
     66          
     67          	/* Will only get here if there was not enough heap space to create the
     68          	idle task. */
     69          return 0;
     70          }
     71          ////============================================================
     72          #if 0
     73          static void vCheckTask( void *pvParameters )
     74          {
     75          TickType_t xLastExecutionTime;
     76          xLCDMessage xMessage;
     77          static signed char cPassMessage[ mainMAX_MSG_LEN ];
     78          extern unsigned short usMaxJitter;
     79          
     80          	xLastExecutionTime = xTaskGetTickCount();
     81          	xMessage.pcMessage = cPassMessage;
     82          
     83              for( ;; )
     84          	{
     85          		/* Perform this check every mainCHECK_DELAY milliseconds. */
     86          		vTaskDelayUntil( &xLastExecutionTime, mainCHECK_DELAY );
     87          
     88          		/* Has an error been found in any task? */
     89          
     90                  if( xAreBlockingQueuesStillRunning() != pdTRUE )
     91          		{
     92          			xMessage.pcMessage = "ERROR IN BLOCK Q\n";
     93          		}
     94          		else if( xAreBlockTimeTestTasksStillRunning() != pdTRUE )
     95          		{
     96          			xMessage.pcMessage = "ERROR IN BLOCK TIME\n";
     97          		}
     98                  else if( xAreSemaphoreTasksStillRunning() != pdTRUE )
     99                  {
    100                      xMessage.pcMessage = "ERROR IN SEMAPHORE\n";
    101                  }
    102                  else if( xArePollingQueuesStillRunning() != pdTRUE )
    103                  {
    104                      xMessage.pcMessage = "ERROR IN POLL Q\n";
    105                  }
    106                  else if( xIsCreateTaskStillRunning() != pdTRUE )
    107                  {
    108                      xMessage.pcMessage = "ERROR IN CREATE\n";
    109                  }
    110                  else if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
    111                  {
    112                      xMessage.pcMessage = "ERROR IN MATH\n";
    113                  }
    114          		else if( xAreComTestTasksStillRunning() != pdTRUE )
    115          		{
    116          			xMessage.pcMessage = "ERROR IN COM TEST\n";
    117          		}
    118          		else
    119          		{
    120          			sprintf( ( char * ) cPassMessage, "PASS [%uns]\n", ( ( unsigned long ) usMaxJitter ) * mainNS_PER_CLOCK );
    121          		}
    122          
    123          		/* Send the message to the LCD gatekeeper for display. */
    124          		xQueueSend( xLCDQueue, &xMessage, portMAX_DELAY );
    125          	}
    126          }
    127          #endif
    128          /*-----------------------------------------------------------*/
    129          
    130          
    131          #ifdef  DEBUG
    132          /* Keep the linker happy. */
    133          void assert_failed( unsigned char* pcFile, unsigned long ulLine )
    134          {
    135          	for( ;; )
    136          	{
    137          	}
    138          }
    139          #endif
    140          ////=======================================================
    141          
    142          ////=======================================================

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   main
        16   -> NVIC_PriorityGroupConfig
        16   -> can1_init
        16   -> hw_board_init
        16   -> printf
        16   -> vTaskStartScheduler
        16   -> xTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?_0
      12  ?_1
      12  ?_2
     100  main

 
  48 bytes in section .rodata
 100 bytes in section .text
 
 100 bytes of CODE  memory
  48 bytes of CONST memory

Errors: none
Warnings: none
