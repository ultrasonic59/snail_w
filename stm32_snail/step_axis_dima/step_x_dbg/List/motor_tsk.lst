###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         11/Sep/2021  20:10:58
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\motor_tsk.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW9C14.tmp
#        (D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\motor_tsk.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D DIMA_BRD -D STEP_X -D STM32F205xx
#        -lcN
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\.\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\dbg\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\List\motor_tsk.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\Obj\motor_tsk.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\motor_tsk.c
      1          #include <string.h>
      2          #include "FreeRTOS.h"
      3          #include "queue.h"
      4          #include "semphr.h"
      5          
      6          ////#include "board.h"
      7          #include "board.h"
      8          #include "printk.h"
      9          
     10          #include "snail_cmds.h"
     11          
     12          cmd_t cur_cmd={0};
     13          
     14          void motor_task( void *pvParameters )
     15          {
     16          ///uint8_t btst=0; 
     17          uint8_t psk=0; 
     18          ///uint16_t tst;
     19          char key=0;
     20          int nstep=300;
     21          uint8_t dir=0;
     22          uint8_t mot_rej=0;
     23          printk("\n\r tst_task"); 
     24          
     25          set_sleep_mot(1);
     26          ////set_ena_mot(1);
     27          set_reset_mot(1);
     28          uDelay(1000);
     29          set_reset_mot(0);
     30          uDelay(20000);
     31          init_step_mot();
     32          ////set_ena_mot(0);
     33          ///tst=mot_spi_rd(0x0);
     34          ///tst|=0x1;
     35          ///mot_spi_wr(0x0,tst);
     36          #if 0      
     37          for(;;)
     38            {
     39          //// sendchar2 (0x33) ; 
     40            put_tst_pin(btst);
     41            btst++;  
     42            ////delay__ms(1);  
     43            uDelay(20000);
     44          ///  mot_spi_transfer(0x1234);
     45          tst=mot_spi_rd(0x0);
     46          printk("\n\r rd[%x]",tst); 
     47          
     48            }
     49          #endif 
     50          ena_mot(0) ;
     51          for(;;)
     52          {
     53          if(cur_cmd.cmd==0)
     54            msleep(10);
     55          else
     56            {
     57            switch(cur_cmd.cmd)
     58              {
     59              case STOP_X:
     60          ///      nstep += 20;
     61                break;
     62              case GOTO_X:
     63          ////      if(nstep)
     64          ////        nstep-= 20;
     65                  break;
     66              case SET_SPD_X:
     67          ////      if(nstep)
     68          ////        nstep-= 20;
     69                  break;
     70              }
     71            }
     72          if(check_push_key_dbg())
     73            {
     74            key=get_byte_dbg() ;  
     75            switch(key)
     76              {
     77              case 'a':
     78                nstep += 20;
     79                break;
     80              case 's':
     81                if(nstep)
     82                  nstep-= 20;
     83                  break;
     84              case 'd':
     85                dir ++;
     86                dir&=0x1;
     87                break;
     88              case 'm':
     89                mot_rej ++;
     90                if(mot_rej>8)
     91                  mot_rej=0;
     92           ////     mot_rej&=0x7;
     93                break;
     94              case 'p':
     95               psk=1;
     96                break;
     97               
     98             }
     99            printk("\n\r nstep[%d] dir[%x] Mot_rej[%x]",nstep,dir,mot_rej); 
    100            set_dir_mot(dir);
    101            set_mot_rej(mot_rej);
    102            if(psk)
    103              {
    104              put_mot_nstep(nstep);
    105              psk=0;
    106              }
    107            
    108            }  
    109          }
    110          }
    111          #if 0
    112           for(;;)
    113            {
    114            key=get_byte_dbg() ;  
    115            switch(key)
    116              {
    117              case 'a':
    118                nstep += 20;
    119                break;
    120              case 's':
    121                if(nstep)
    122                  nstep-= 20;
    123                  break;
    124              case 'd':
    125                dir ++;
    126                dir&=0x1;
    127                break;
    128              case 'm':
    129                mot_rej ++;
    130                if(mot_rej>8)
    131                  mot_rej=0;
    132           ////     mot_rej&=0x7;
    133                break;
    134              case 'p':
    135               psk=1;
    136                break;
    137               
    138             }
    139            printk("\n\r nstep[%d] dir[%x] Mot_rej[%x]",nstep,dir,mot_rej); 
    140            set_dir_mot(dir);
    141            set_mot_rej(mot_rej);
    142            if(psk)
    143              {
    144              put_mot_nstep(nstep);
    145              psk=0;
    146              }
    147          ////  set_led_dutycycle (duty);
    148          
    149            } 
    150          }
    151          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   motor_task
        32   -> check_push_key_dbg
        32   -> ena_mot
        32   -> get_byte_dbg
        32   -> init_step_mot
        32   -> printf
        32   -> put_mot_nstep
        32   -> set_dir_mot
        32   -> set_mot_rej
        32   -> set_reset_mot
        32   -> set_sleep_mot
        32   -> uDelay
        32   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?_0
      36  ?_1
       8  cur_cmd
     256  motor_task

 
   8 bytes in section .bss
  48 bytes in section .rodata
 256 bytes in section .text
 
 256 bytes of CODE  memory
  48 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
