###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         10/Oct/2021  16:21:10
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\dima_board.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWEBE3.tmp
#        (D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\dima_board.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D DIMA_BRD -D STEP_X -D STM32F205xx
#        -lcN
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\.\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\dbg\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\usb\drv\inc\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\List\dima_board.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\Obj\dima_board.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\dima_board.c
      1          #include <string.h>
      2          #include "FreeRTOS.h"
      3          #include "queue.h"
      4          #include "semphr.h"
      5          ///#include "stm32f2xx_gpio.h"
      6          ///#include "stm32f2xx_rcc.h"
      7          
      8          ////#include "board.h"
      9          #include "board.h"
     10          #include "printk.h"
     11          
     12          extern void uDelay (const uint32_t usec);
     13          extern void  put_tst_pin(uint8_t idat);
     14          void mot_spi_wr(uint8_t addr,uint16_t idata);
     15          uint16_t mot_spi_rd(uint8_t addr);
     16          
     17          ///=============================
     18          int send_char_dbg (int c) 
     19          { 
     20          while (!(UART_DBG->SR & 0x0080));
     21          UART_DBG->DR = (c & 0x1FF);
     22          return (c);
     23          }
     24          void _putk(char ch)
     25          {
     26          send_char_dbg(ch);
     27          }
     28          
     29          int get_byte_dbg (void) 
     30          {
     31          while (!(UART_DBG->SR & USART_SR_RXNE));
     32          return (UART_DBG->DR);
     33          }
     34          int check_push_key_dbg(void)
     35          {
     36          return  (UART_DBG->SR & USART_SR_RXNE); 
     37          }
     38          
     39          void init_gpio(void)
     40          {
     41          ////RCC_AHBPeriphClockCmd(XEN_PIN_RCC_AHB,ENABLE);
     42          GPIO_InitTypeDef GPIO_InitStructure;
     43          ////=============== TST2 ============================
     44          RCC_AHB1PeriphClockCmd(TST2_PIN_RCC, ENABLE);
     45          GPIO_InitStructure.GPIO_Pin = TST2_PIN;
     46          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     47          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     48          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     49          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     50          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     51          GPIO_Init( TST2_PIN_GPIO, &GPIO_InitStructure );
     52          ////=============== TST3 ============================
     53          RCC_AHB1PeriphClockCmd(TST3_PIN_RCC, ENABLE);
     54          GPIO_InitStructure.GPIO_Pin = TST3_PIN;
     55          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     56          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     57          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     58          
     59          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     60          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     61          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     62          GPIO_Init( TST3_PIN_GPIO, &GPIO_InitStructure );
     63          GPIO_PinAFConfig(TST3_PIN_GPIO, TST3_PIN_NPIN, GPIO_AF_TIM1);
     64          
     65          ////=============== TST7 ============================
     66          RCC_AHB1PeriphClockCmd(TST7_PIN_RCC, ENABLE);
     67          GPIO_InitStructure.GPIO_Pin = TST7_PIN;
     68          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     69          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     70          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     71          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     72          GPIO_Init( TST7_PIN_GPIO, &GPIO_InitStructure );
     73          GPIO_PinAFConfig(TST7_PIN_GPIO, TST7_PIN_NPIN, GPIO_AF_TIM8);
     74            
     75          ////=========== DBG_UART =================================================== 
     76          RCC_AHB1PeriphClockCmd(UART_DBG_TX_RCC, ENABLE);
     77          GPIO_InitStructure.GPIO_Pin = UART_DBG_TX_PIN;
     78          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     79          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     80          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     81          GPIO_Init( UART_DBG_TX_GPIO, &GPIO_InitStructure );
     82          
     83          RCC_AHB1PeriphClockCmd(UART_DBG_RX_RCC, ENABLE);
     84          GPIO_InitStructure.GPIO_Pin = UART_DBG_RX_PIN;
     85          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     86          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     87          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     88          GPIO_Init( UART_DBG_RX_GPIO, &GPIO_InitStructure );
     89            
     90          GPIO_PinAFConfig(UART_DBG_TX_GPIO, UART_DBG_TX_PIN_NPIN, UART_DBG_TX_AF);
     91          GPIO_PinAFConfig(UART_DBG_RX_GPIO, UART_DBG_RX_PIN_NPIN, UART_DBG_RX_AF);
     92          ////===================================================================
     93          ////=============== MOT_FAULT ============================
     94          RCC_AHB1PeriphClockCmd(MOT_FAULT_PIN_RCC, ENABLE);
     95          GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
     96          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     97          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
     98          GPIO_Init( MOT_FAULT_PIN_GPIO, &GPIO_InitStructure );
     99          ////=============== MOT_STALLN ============================
    100          RCC_AHB1PeriphClockCmd(MOT_STALLN_PIN_RCC, ENABLE);
    101          GPIO_InitStructure.GPIO_Pin = MOT_STALLN_PIN;
    102          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    103          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    104          GPIO_Init( MOT_STALLN_PIN_GPIO, &GPIO_InitStructure );
    105          ////=============== CONC1 ============================
    106          RCC_AHB1PeriphClockCmd(CONC1_PIN_RCC, ENABLE);
    107          GPIO_InitStructure.GPIO_Pin = CONC1_PIN;
    108          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    109          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    110          GPIO_Init( CONC1_PIN_GPIO, &GPIO_InitStructure );
    111          ////=============== CONC0 ============================
    112          RCC_AHB1PeriphClockCmd(CONC0_PIN_RCC, ENABLE);
    113          GPIO_InitStructure.GPIO_Pin = CONC0_PIN;
    114          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    115          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    116          GPIO_Init( CONC0_PIN_GPIO, &GPIO_InitStructure );
    117          ////=============== ENC_A ============================
    118          ////RCC_AHB1PeriphClockCmd(ENC_A_PIN_RCC, ENABLE);
    119          ////GPIO_InitStructure.GPIO_Pin = ENC_A_PIN;
    120          ////GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    121          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    122          ////GPIO_Init( ENC_A_PIN_GPIO, &GPIO_InitStructure );
    123          ////=============== ENC_B ============================
    124          ////RCC_AHB1PeriphClockCmd(ENC_B_PIN_RCC, ENABLE);
    125          ////GPIO_InitStructure.GPIO_Pin = ENC_B_PIN;
    126          ////GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    127          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    128          ////GPIO_Init( ENC_B_PIN_GPIO, &GPIO_InitStructure );
    129          ////=============== ENC_C ============================
    130          ////RCC_AHB1PeriphClockCmd(ENC_C_PIN_RCC, ENABLE);
    131          ////GPIO_InitStructure.GPIO_Pin = ENC_C_PIN;
    132          ////GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    133          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    134          /////GPIO_Init( ENC_C_PIN_GPIO, &GPIO_InitStructure );
    135          ////=============== MOT_RESET ============================
    136          RCC_AHB1PeriphClockCmd(MOT_RESET_PIN_RCC, ENABLE);
    137          GPIO_InitStructure.GPIO_Pin = MOT_RESET_PIN;
    138          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    139          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    140          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    141          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    142          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    143          GPIO_Init( MOT_RESET_PIN_GPIO, &GPIO_InitStructure );
    144          ////=============== MOT_SLEEP ============================
    145          RCC_AHB1PeriphClockCmd(MOT_SLEEP_PIN_RCC, ENABLE);
    146          GPIO_InitStructure.GPIO_Pin = MOT_SLEEP_PIN;
    147          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    148          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    149          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    150          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    151          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    152          GPIO_Init( MOT_SLEEP_PIN_GPIO, &GPIO_InitStructure );
    153          ////#define MOT_STEP_TIM  	        TIM12
    154          ////=============== MOT_STEP ============================
    155          RCC_AHB1PeriphClockCmd(MOT_STEP_PIN_RCC, ENABLE);
    156          GPIO_InitStructure.GPIO_Pin = MOT_STEP_PIN;
    157          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    158          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    159          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    160          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    161          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    162          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    163          GPIO_Init( MOT_STEP_PIN_GPIO, &GPIO_InitStructure );
    164          GPIO_PinAFConfig(MOT_STEP_PIN_GPIO, MOT_STEP_PIN_NPIN, GPIO_AF_TIM1);
    165          ////===================================================================
    166          
    167          ////=============== MOT_DIR ============================
    168          RCC_AHB1PeriphClockCmd(MOT_DIR_PIN_RCC, ENABLE);
    169          GPIO_InitStructure.GPIO_Pin = MOT_DIR_PIN;
    170          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    171          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    172          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    173          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    174          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    175          GPIO_Init( MOT_DIR_PIN_GPIO, &GPIO_InitStructure );
    176          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    177          
    178          ////=============== MOT_SPI_SCS ============================
    179          RCC_AHB1PeriphClockCmd(MOT_SPI_SCS_PIN_RCC, ENABLE);
    180          GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCS_PIN;
    181          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    182          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    183          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    184          GPIO_Init( MOT_SPI_SCS_PIN_GPIO, &GPIO_InitStructure );
    185          }
    186          ////=============================================
    187          void UART_DBG_Init(void)
    188          {
    189          ////GPIO_InitTypeDef GPIO_InitStructure;
    190          USART_InitTypeDef USART_InitStructure;
    191          UART_DBG_CLK_INIT(UART_DBG_CLK, ENABLE);
    192          USART_DeInit(UART_DBG);
    193          USART_InitStructure.USART_BaudRate = 115200;
    194          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    195          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    196          USART_InitStructure.USART_Parity = USART_Parity_No;
    197          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    198          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    199          USART_Init(UART_DBG, &USART_InitStructure);
    200          UART_DBG->CR1 |= USART_CR1_RXNEIE;
    201          USART_Cmd(UART_DBG, ENABLE);
    202          }
    203          
    204          ////==================================================
    205          
    206          void  set_sleep_mot(uint8_t idat)
    207          {
    208          if(idat&0x1)
    209            {
    210            GPIO_SetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    211            }
    212          else
    213            {
    214             GPIO_ResetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    215            }
    216          }
    217          void  set_dir_mot(uint8_t idat)
    218          {
    219          if(idat&0x1)
    220            {
    221            GPIO_SetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    222            }
    223          else
    224            {
    225             GPIO_ResetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    226            }
    227          }
    228          void  set_reset_mot(uint8_t idat)
    229          {
    230          if(idat&0x1)
    231            {
    232            GPIO_SetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    233            }
    234          else
    235            {
    236             GPIO_ResetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    237            }
    238          }
    239          
    240          ////==================================================
    241          
    242          volatile uint32_t num_step=0;
    243          
    244          void mot_step_tim_init(void)
    245          {
    246          NVIC_InitTypeDef NVIC_InitStructure; 
    247          
    248          RCC->APB2ENR |= MOT_STEP_TIM_RCC;
    249          MOT_STEP_TIM ->PSC = DEF_MOT_TIM_PRESC;
    250          MOT_STEP_TIM ->ARR = DEF_MOT_TIM_PERIOD;////
    251          MOT_STEP_TIM ->CCR1 = DEF_MOT_TIM_PERIOD/2;////30;
    252          MOT_STEP_TIM->CCER |= TIM_CCER_CC1E;////TIM_CCER_CC2NE;////| TIM_CCER_CC3NP;
    253          MOT_STEP_TIM->BDTR |= TIM_BDTR_MOE;
    254          MOT_STEP_TIM->CCMR1 = TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; 
    255          MOT_STEP_TIM->CR1 &= ~TIM_CR1_DIR;
    256          MOT_STEP_TIM->CR1 &= ~TIM_CR1_CMS;
    257          
    258          MOT_STEP_TIM ->DIER = TIM_DIER_CC1IE;
    259          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC1);
    260          
    261          NVIC_InitStructure.NVIC_IRQChannel = MOT_TIM_IRQN;
    262          //// highest priority
    263          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
    264          
    265          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    266          //// highest priority
    267          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    268          NVIC_Init(&NVIC_InitStructure);
    269          
    270          }
    271          /*
    272          void init_enc_tim(void)
    273          {
    274          ////============= DPX_R ========================
    275          RCC->APB1ENR |= ENC_TIM_RCC;
    276          ENC_TIM ->CCER = TIM_CCER_CC1P | TIM_CCER_CC2P;
    277          ENC_TIM ->CCMR1 = TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    278          ENC_TIM->SMCR = TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
    279          ENC_TIM->ARR = ENC_TIM_PERIOD;////
    280          ENC_TIM->CR1 = TIM_CR1_CEN;
    281          }
    282          */
    283          
    284          void stop_mot_step_tim(void)
    285          {
    286          TIM_Cmd(MOT_STEP_TIM, DISABLE);
    287          }
    288          void ena_mot(uint8_t ena_dis)
    289          {
    290          uint16_t tmp;
    291           
    292          tmp=mot_spi_rd(ADDR_MOT_CTRL);
    293          if(ena_dis&0x1)
    294          {
    295          tmp|=0x1;
    296          }
    297          else
    298          {
    299          tmp&= ~0x1;
    300          }
    301          mot_spi_wr(ADDR_MOT_CTRL,tmp);
    302          }
    303          void put_mot_nstep(uint32_t nstep)
    304          {
    305          ena_mot(1) ;
    306           num_step=nstep; 
    307          TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC1, ENABLE);
    308          TIM_Cmd(MOT_STEP_TIM, ENABLE);
    309          }
    310          volatile uint32_t gsr;
    311          ////=======================================================
    312          void MOT_STEP_TIM_IRQHandler(void)
    313          { 
    314          if(num_step)
    315            {
    316            num_step--;  
    317            if(num_step==0)
    318              {
    319              stop_mot_step_tim(); 
    320              ena_mot(0) ;
    321              }
    322            }
    323          ////TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC2);
    324          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC1);
    325          }
    326          ////===============================================
    327          uint8_t get_conc0(void)
    328          {
    329          return GPIO_ReadInputDataBit(CONC0_PIN_GPIO, CONC0_PIN);
    330          }
    331          uint8_t get_conc1(void)
    332          {
    333          return GPIO_ReadInputDataBit(CONC1_PIN_GPIO, CONC1_PIN);
    334          }
    335          ////=============================================
    336          void hw_board_init(void)
    337          {
    338          NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
    339          init_gpio();
    340          UART_DBG_Init(); 
    341          
    342          mot_step_tim_init();
    343          mot_spi_init();
    344          ////init_enc_tim();
    345          }
    346          ////============================================
    347          ////==============================================
    348          void mot_spi_init(void)
    349          {
    350          GPIO_InitTypeDef GPIO_InitStructure;
    351          SPI_InitTypeDef  SPI_InitStructure;
    352            MOT_SPI_PeriphClockCmd(MOT_SPI_RCC, ENABLE);
    353            
    354          RCC_AHB1PeriphClockCmd(MOT_SPI_SCK_PIN_RCC,ENABLE);
    355          RCC_AHB1PeriphClockCmd(MOT_SPI_MISO_PIN_RCC,ENABLE);
    356          RCC_AHB1PeriphClockCmd(MOT_SPI_MOSI_PIN_RCC,ENABLE);
    357          ////RCC_AHB1PeriphClockCmd(MOT_SPI_SCS_PIN_RCC,ENABLE);
    358          
    359          GPIO_PinAFConfig(MOT_SPI_SCK_PIN_GPIO, MOT_SPI_SCK_PIN_NPIN, MOT_SPI_AF);
    360          GPIO_PinAFConfig(MOT_SPI_MISO_PIN_GPIO, MOT_SPI_MISO_PIN_NPIN, MOT_SPI_AF);
    361          GPIO_PinAFConfig(MOT_SPI_MOSI_PIN_GPIO, MOT_SPI_MOSI_PIN_NPIN, MOT_SPI_AF);
    362          ////GPIO_PinAFConfig(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN_NPIN, MOT_SPI_AF);
    363          
    364          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    365          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    366          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    367          ///GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
    368          GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    369          GPIO_InitStructure.GPIO_Pin = MOT_SPI_MISO_PIN;
    370          GPIO_Init(MOT_SPI_MISO_PIN_GPIO, &GPIO_InitStructure);
    371          
    372          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    373          GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCK_PIN;
    374          GPIO_Init(MOT_SPI_SCK_PIN_GPIO, &GPIO_InitStructure);
    375          ////GPIO_InitStructure.GPIO_Pin = MOT_SPI_MISO_PIN;
    376          /////GPIO_Init(MOT_SPI_MISO_PIN_GPIO, &GPIO_InitStructure);
    377          GPIO_InitStructure.GPIO_Pin = MOT_SPI_MOSI_PIN;
    378          GPIO_Init(MOT_SPI_MOSI_PIN_GPIO, &GPIO_InitStructure);
    379          
    380          ////GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCS_PIN;
    381          /////GPIO_Init(MOT_SPI_SCS_PIN_GPIO, &GPIO_InitStructure);
    382          
    383          SPI_I2S_DeInit(MOT_SPI);
    384          SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    385          SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
    386          SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
    387          SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
    388          SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;///SPI_NSS_Hard;///SPI_NSS_Soft;///SPI_NSS_Hard;
    389          SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
    390          SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
    391          SPI_InitStructure.SPI_CRCPolynomial = 7;
    392          SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
    393          SPI_Init(MOT_SPI, &SPI_InitStructure);
    394          SPI_Cmd(MOT_SPI, ENABLE);
    395          }
    396          uint16_t mot_spi_transfer(uint16_t i_data)
    397          {
    398          uint16_t rez=0; 
    399          GPIO_SetBits(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN);
    400          
    401          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_TXE) == RESET);
    402          SPI_I2S_SendData(MOT_SPI, i_data);
    403          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_RXNE) == RESET);
    404          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_TXE) == RESET);
    405          rez=SPI_I2S_ReceiveData(MOT_SPI);
    406          GPIO_ResetBits(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN);
    407          return rez;
    408          }
    409          ////==============================================
    410          void mot_spi_set_br(uint16_t br)
    411          {
    412          uint16_t tmpreg = 0;
    413          tmpreg = MOT_SPI->CR1& ~(0x7<<3);
    414          tmpreg |=	br&(0x7<<3);
    415          MOT_SPI->CR1=tmpreg;
    416          }
    417          
    418          void mot_spi_wr(uint8_t addr,uint16_t idata)
    419          {
    420          uint16_t tmp;
    421          tmp=(addr&0x7)<<12;
    422          tmp|= idata&0xfff;
    423          mot_spi_transfer(tmp);
    424          }
    425          void mot_spi_wrp(uint8_t addr,uint16_t *pdata)
    426          {
    427          uint16_t tmp;
    428          memcpy(&tmp,pdata,sizeof(uint16_t));
    429          mot_spi_wr(addr,tmp);       
    430          }
    431          uint16_t mot_spi_rd(uint8_t addr)
    432          {
    433          uint16_t rez;
    434          uint16_t tmp;
    435          tmp=(addr&0x7)<<12;
    436          tmp|= 0x8000;
    437          rez=mot_spi_transfer(tmp);
    438          return rez&0xfff;
    439          }
    440          ////========================================================  
    441          
    442          CTRL_Register_t 	G_CTRL_REG;
    443          TORQUE_Register_t 	G_TORQUE_REG;
    444           OFF_Register_t 	G_OFF_REG;
    445          BLANK_Register_t	G_BLANK_REG;
    446          DECAY_Register_t 	G_DECAY_REG;
    447          STALL_Register_t 	G_STALL_REG;
    448          DRIVE_Register_t 	G_DRIVE_REG;
    449          STATUS_Register_t 	G_STATUS_REG;
    450          
    451          void init_step_mot(void)
    452          {
    453            
    454          // CTRL Register
    455          
    456          G_CTRL_REG.DTIME 	= 0x03;
    457          G_CTRL_REG.ISGAIN 	= 0x03;
    458          G_CTRL_REG.EXSTALL 	= 0x00;
    459          G_CTRL_REG.MODE 	= 0;///0x03;
    460          G_CTRL_REG.RSTEP 	= 0x00;
    461          G_CTRL_REG.RDIR 	= 0x00;
    462          G_CTRL_REG.ENBL 	= 0x01;
    463          
    464          // TORQUE Register
    465          G_TORQUE_REG.SIMPLTH = 0x00;
    466          G_TORQUE_REG.TORQUE  = 0xBA;
    467          
    468          // OFF Register
    469          G_OFF_REG.PWMMODE 	= 0x00;
    470          G_OFF_REG.TOFF 		= 0x30;
    471          
    472          // BLANK Register
    473          G_BLANK_REG.ABT 	= 0x01;
    474          G_BLANK_REG.TBLANK 	= 0x08;
    475          
    476          // DECAY Register.
    477          G_DECAY_REG.DECMOD  = 0x03;
    478          G_DECAY_REG.TDECAY 	= 0x10;
    479          
    480          // STALL Register
    481          G_STALL_REG.VDIV 	= 0x03;
    482          G_STALL_REG.SDCNT 	= 0x03;
    483          G_STALL_REG.SDTHR 	= 0x40;
    484          
    485          // DRIVE Register
    486          G_DRIVE_REG.OCPTH 	= 0x01;
    487          G_DRIVE_REG.IDRIVEP = 0x00;
    488          G_DRIVE_REG.IDRIVEN = 0x00;
    489          G_DRIVE_REG.TDRIVEP = 0x01;
    490          G_DRIVE_REG.TDRIVEN = 0x01;
    491          G_DRIVE_REG.OCPDEG 	= 0x01;
    492          
    493          mot_spi_wrp(ADDR_MOT_CTRL,(uint16_t*)&G_CTRL_REG);
    494          mot_spi_wrp(ADDR_MOT_TORQUE,(uint16_t*)&G_TORQUE_REG);
    495          mot_spi_wrp(ADDR_MOT_OFF,(uint16_t*)&G_OFF_REG);
    496          mot_spi_wrp(ADDR_MOT_BLANK,(uint16_t*)&G_BLANK_REG);
    497          mot_spi_wrp(ADDR_MOT_DECAY,(uint16_t*)&G_DECAY_REG);
    498          mot_spi_wrp(ADDR_MOT_STALL,(uint16_t*)&G_STALL_REG);
    499          mot_spi_wrp(ADDR_MOT_DRIVE,(uint16_t*)&G_DRIVE_REG);
    500          
    501          }
    502          ////========================================================  
    503          void set_mot_rej(uint8_t rej)
    504          {
    505          uint16_t tmp;
    506          CTRL_Register_t *t_ctrl_reg=(CTRL_Register_t*)&tmp;
    507          tmp=mot_spi_rd(ADDR_MOT_CTRL);
    508          t_ctrl_reg->MODE=rej;
    509          mot_spi_wr(ADDR_MOT_CTRL,tmp);
    510          }
    511          ////============================================
    512          extern uint8_t can1_send(uint16_t id,uint8_t data_len,uint8_t *data);
    513          extern uint8_t  CAN_TxRdy;              /* CAN HW ready to transmit message */
    514          extern uint8_t  CAN_RxRdy;              /* CAN HW received a message        */
    515          extern CanRxMsg RxMessage;
    516          
    517          void set_mot_dir(uint8_t dir)
    518          {
    519            
    520          }
    521          
    522          void set_mot_step(uint8_t step)
    523          {
    524            
    525          }
    526          void reset_mot_step(void)
    527          {
    528            
    529          }
    530          void set_mot_per(uint16_t per)
    531          {
    532          if(per>MAX_PER)
    533            per=MAX_PER;
    534          else if(per<MIN_PER)
    535            per=MIN_PER;
    536          MOT_STEP_TIM ->ARR = per*2;////
    537          MOT_STEP_TIM ->CCR1 = per;////
    538          }
    539          
    540          ////========================================================  
    541          void tst1_task( void *pvParameters )
    542          {
    543          ////uint8_t btst=0; 
    544          uint8_t ii=0; 
    545          printk("\n\r tst1_task"); 
    546          for(;;)
    547            {
    548            if( CAN_RxRdy)
    549              {
    550              CAN_RxRdy=0;
    551              printk("\n\r can_rx"); 
    552              printk("\n\r ExtId[%x]",RxMessage.ExtId);
    553              printk("\n\r DLC[%x]\n\r ",RxMessage.DLC);
    554              for(ii=0;ii<8;ii++)
    555                {
    556                printk("[%x] ",RxMessage.Data[ii]);
    557                }
    558              }
    559            else
    560            {
    561              msleep(10);
    562            }
    563            }
    564          }
    565          ////=======================================================
    566          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM1_CC_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> ena_mot
         8   -> stop_mot_step_tim
      24   UART_DBG_Init
        24   -> RCC_APB2PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_Init
       8   _putk
         8   -> send_char_dbg
       0   check_push_key_dbg
      16   ena_mot
        16   -> mot_spi_rd
        16   -> mot_spi_wr
       0   get_byte_dbg
       8   get_conc0
         8   -> GPIO_ReadInputDataBit
       8   get_conc1
         8   -> GPIO_ReadInputDataBit
       8   hw_board_init
         8   -> NVIC_PriorityGroupConfig
         8   -> UART_DBG_Init
         8   -> init_gpio
         8   -> mot_spi_init
         8   -> mot_step_tim_init
      32   init_gpio
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
        32   -> RCC_AHB1PeriphClockCmd
      32   init_step_mot
        32   -> mot_spi_wrp
      40   mot_spi_init
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB1PeriphClockCmd
        40   -> SPI_Cmd
        40   -> SPI_I2S_DeInit
        40   -> SPI_Init
      16   mot_spi_rd
        16   -> mot_spi_transfer
       4   mot_spi_set_br
      24   mot_spi_transfer
        24   -> GPIO_ResetBits
        24   -> GPIO_SetBits
        24   -> SPI_I2S_GetFlagStatus
        24   -> SPI_I2S_ReceiveData
        24   -> SPI_I2S_SendData
      16   mot_spi_wr
        16   -> mot_spi_transfer
      32   mot_spi_wrp
        32   -> __aeabi_memcpy
        32   -> mot_spi_wr
       8   mot_step_tim_init
         8   -> NVIC_Init
         8   -> TIM_ClearITPendingBit
      16   put_mot_nstep
        16   -> TIM_Cmd
        16   -> TIM_ITConfig
        16   -> ena_mot
       0   reset_mot_step
       0   send_char_dbg
       8   set_dir_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       0   set_mot_dir
       0   set_mot_per
      16   set_mot_rej
        16   -> mot_spi_rd
        16   -> mot_spi_wr
       0   set_mot_step
       8   set_reset_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_sleep_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   stop_mot_step_tim
         8   -> TIM_Cmd
      16   tst1_task
        16   -> _printk
        16   -> vTaskDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_23
       4  ??DataTable19_24
       4  ??DataTable19_25
       4  ??DataTable19_26
       4  ??DataTable19_27
       4  ??DataTable19_28
       4  ??DataTable19_29
       4  ??DataTable19_3
       4  ??DataTable19_30
       4  ??DataTable19_31
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
      16  ?_0
      12  ?_1
      16  ?_2
      16  ?_3
       8  ?_4
       2  G_BLANK_REG
       2  G_CTRL_REG
       2  G_DECAY_REG
       2  G_DRIVE_REG
       2  G_OFF_REG
       2  G_STALL_REG
       2  G_STATUS_REG
       2  G_TORQUE_REG
      46  TIM1_CC_IRQHandler
      86  UART_DBG_Init
      14  _putk
      14  check_push_key_dbg
      40  ena_mot
      20  get_byte_dbg
      14  get_conc0
      14  get_conc1
       4  gsr
      28  hw_board_init
     594  init_gpio
     354  init_step_mot
     226  mot_spi_init
      32  mot_spi_rd
      26  mot_spi_set_br
      90  mot_spi_transfer
      32  mot_spi_wr
      40  mot_spi_wrp
     144  mot_step_tim_init
       4  num_step
      40  put_mot_nstep
       2  reset_mot_step
      24  send_char_dbg
      36  set_dir_mot
       2  set_mot_dir
      56  set_mot_per
      40  set_mot_rej
       2  set_mot_step
      36  set_reset_mot
      36  set_sleep_mot
      14  stop_mot_step_tim
      86  tst1_task

 
    24 bytes in section .bss
    68 bytes in section .rodata
 2'316 bytes in section .text
 
 2'316 bytes of CODE  memory
    68 bytes of CONST memory
    24 bytes of DATA  memory

Errors: none
Warnings: none
