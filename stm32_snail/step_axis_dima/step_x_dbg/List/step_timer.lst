###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         11/Sep/2021  20:10:58
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\step_timer.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW9DCF.tmp
#        (D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\step_timer.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D DIMA_BRD -D STEP_X -D STM32F205xx
#        -lcN
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\.\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\snail\stm32_snail\step_axis_dima\..\common\dbg\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\List\step_timer.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\step_axis_dima\step_x_dbg\Obj\step_timer.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\step_axis_dima\src\board\step_timer.c
      1          #include <string.h>
      2          #include "FreeRTOS.h"
      3          #include "queue.h"
      4          #include "semphr.h"
      5          
      6          #include "board.h"
      7          #include "printk.h"
      8          ////======================================
      9          extern void set_mot_dir(uint8_t dir);
     10          extern void set_mot_step(uint8_t step);
     11          extern void reset_mot_step(void);
     12          
     13          extern void system_set_exec_state_flag(uint8_t flag);
     14          ////======================================
     15          system_t sys;
     16          // Used to avoid ISR nesting of the "Stepper Driver Interrupt". Should never occur though.
     17          static volatile uint8_t busy;
     18          stepper_t st;
     19          // Step segment ring buffer indices
     20          static volatile uint8_t segment_buffer_tail;
     21          static uint8_t segment_buffer_head;
     22          static uint8_t segment_next_head;
     23          int32_t sys_position[N_AXIS];      // Real-time machine (aka home) position vector in steps.
     24          
     25          static segment_t segment_buffer[SEGMENT_BUFFER_SIZE];
     26          static st_block_t st_block_buffer[SEGMENT_BUFFER_SIZE-1];
     27          ////============================================================
     28          // Stepper shutdown
     29          void st_go_idle()
     30          {
     31            // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.
     32            NVIC_DisableIRQ(TIM2_IRQn);
     33          
     34            busy = 0;
     35          #if 0
     36            // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
     37          ////????  bool pin_state = false; // Keep enabled.
     38            if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
     39              // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
     40              // stop and not drift from residual inertial forces at the end of the last movement.
     41              delay__ms(settings.stepper_idle_lock_time);
     42              pin_state = true; // Override. Disable steppers.
     43            }
     44            if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
     45            if (pin_state) 
     46            { 
     47          	  SetStepperDisableBit();
     48            }
     49            else 
     50            { 
     51          	  ResetStepperDisableBit();
     52            }
     53          #endif  
     54          }
     55          
     56          ////============================================================
     57          void TIM2_IRQHandler(void)
     58          {
     59          if ((TIM2->SR & 0x0001) != 0)                  // check interrupt source
     60          	{
     61          	TIM2->SR &= ~(1 << 0);                          // clear UIF flag
     62          	TIM2->CNT = 0;
     63          	}
     64          else
     65          	{
     66          	return;
     67          	}
     68          
     69            if (busy) { return; } // The busy-flag is used to avoid reentering this interrupt
     70              set_mot_dir(st.dir_outbits);
     71          
     72          ////  GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
     73            TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
     74          
     75            // Then pulse the stepping pins
     76            #ifdef STEP_PULSE_DELAY
     77              st.step_bits = (STEP_PORT & ~STEP_MASK) | st.step_outbits; // Store out_bits to prevent overwriting.
     78            #else  // Normal operation
     79          ////	GPIO_Write(STEP_PORT, (GPIO_ReadOutputData(STEP_PORT) & ~STEP_MASK) | st.step_outbits);
     80                  set_mot_step(st.step_outbits);
     81          
     82            #endif
     83            // Enable step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
     84            // exactly settings.pulse_microseconds microseconds, independent of the main Timer1 prescaler.
     85             NVIC_EnableIRQ(TIM3_IRQn);
     86          
     87            busy = 1;
     88          
     89            // If there is no step segment, attempt to pop one from the stepper buffer
     90            if (st.exec_segment == NULL) {
     91              // Anything in the buffer? If so, load and initialize next step segment.
     92              if (segment_buffer_head != segment_buffer_tail) {
     93                // Initialize new step segment and load number of steps to execute
     94                st.exec_segment = &segment_buffer[segment_buffer_tail];
     95          
     96                // Initialize step segment timing per step and load number of steps to execute.
     97          	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
     98          	  /* Set the Autoreload value */
     99          #ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
    100          	  TIM2->PSC = st.exec_segment->prescaler;
    101          #endif
    102                st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
    103                // If the new segment starts a new planner block, initialize stepper variables and counters.
    104                // NOTE: When the segment data index changes, this indicates a new planner block.
    105                if ( st.exec_block_index != st.exec_segment->st_block_index ) {
    106                  st.exec_block_index = st.exec_segment->st_block_index;
    107                  st.exec_block = &st_block_buffer[st.exec_block_index];
    108          
    109                  // Initialize Bresenham line and distance counters
    110                  st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
    111                }
    112          ////???      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
    113          
    114                #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    115                  // With AMASS enabled, adjust Bresenham axis increment counters according to AMASS level.
    116                  st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
    117                  st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
    118                  st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
    119                #endif
    120          
    121                #ifdef VARIABLE_SPINDLE
    122                  // Set real-time spindle output as segment is loaded, just prior to the first step.
    123                  spindle_set_speed(st.exec_segment->spindle_pwm);
    124                #endif
    125          
    126              } else {
    127                // Segment buffer empty. Shutdown.
    128                st_go_idle();
    129                // Ensure pwm is set properly upon completion of rate-controlled motion.
    130                #ifdef VARIABLE_SPINDLE
    131                if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
    132                #endif
    133                system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
    134                return; // Nothing to do but exit.
    135              }
    136            }
    137          
    138          
    139            // Check probing state.
    140          ////????  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
    141          
    142            // Reset step out bits.
    143            st.step_outbits = 0;
    144          
    145            // Execute step displacement profile by Bresenham line algorithm
    146            #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    147              st.counter_x += st.steps[X_AXIS];
    148            #else
    149              st.counter_x += st.exec_block->steps[X_AXIS];
    150            #endif
    151            if (st.counter_x > st.exec_block->step_event_count) {
    152              st.step_outbits |= (1<<X_STEP_BIT);
    153              st.counter_x -= st.exec_block->step_event_count;
    154              if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
    155              else { sys_position[X_AXIS]++; }
    156            }
    157            #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    158              st.counter_y += st.steps[Y_AXIS];
    159            #else
    160              st.counter_y += st.exec_block->steps[Y_AXIS];
    161            #endif
    162            if (st.counter_y > st.exec_block->step_event_count) {
    163              st.step_outbits |= (1<<Y_STEP_BIT);
    164              st.counter_y -= st.exec_block->step_event_count;
    165              if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
    166              else { sys_position[Y_AXIS]++; }
    167            }
    168            #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    169              st.counter_z += st.steps[Z_AXIS];
    170            #else
    171              st.counter_z += st.exec_block->steps[Z_AXIS];
    172            #endif
    173            if (st.counter_z > st.exec_block->step_event_count) {
    174              st.step_outbits |= (1<<Z_STEP_BIT);
    175              st.counter_z -= st.exec_block->step_event_count;
    176              if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
    177              else { sys_position[Z_AXIS]++; }
    178            }
    179          
    180            // During a homing cycle, lock out and prevent desired axes from moving.
    181            if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
    182          
    183            st.step_count--; // Decrement step events count
    184            if (st.step_count == 0) {
    185              // Segment is complete. Discard current segment and advance segment indexing.
    186              st.exec_segment = NULL;
    187              uint8_t segment_tail_next = segment_buffer_tail + 1;
    188              if (segment_tail_next == SEGMENT_BUFFER_SIZE)
    189              {
    190                segment_tail_next = 0;
    191              }
    192              segment_buffer_tail = segment_tail_next;
    193            }
    194          
    195          ////  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
    196            busy = 0;////false;
    197          }
    198          void TIM3_IRQHandler(void)
    199          {
    200          	if ((TIM3->SR & 0x0001) != 0)                  // check interrupt source
    201          	{
    202          		TIM3->SR &= ~(1<<0);                          // clear UIF flag
    203          		TIM3->CNT = 0;
    204           		NVIC_DisableIRQ(TIM3_IRQn);
    205              // Reset stepping pins (leave the direction pins)
    206          /////		GPIO_Write(STEP_PORT, (GPIO_ReadOutputData(STEP_PORT) & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
    207                  reset_mot_step();
    208                          
    209          	}
    210          }
    211          
    212          ////============================================================

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   TIM2_IRQHandler
        16   -> TIM_ClearITPendingBit
        16   -> __NVIC_EnableIRQ
        16   -> set_mot_dir
        16   -> set_mot_step
        16   -> st_go_idle
        16   -> system_set_exec_state_flag
       8   TIM3_IRQHandler
         8   -> __NVIC_DisableIRQ
         8   -> reset_mot_step
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ
       8   st_go_idle
         8   -> __NVIC_DisableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     436  TIM2_IRQHandler
      36  TIM3_IRQHandler
      38  __NVIC_DisableIRQ
      30  __NVIC_EnableIRQ
       1  busy
      60  segment_buffer
       1  segment_buffer_head
       1  segment_buffer_tail
      28  st
     180  st_block_buffer
      16  st_go_idle
      16  sys
      12  sys_position

 
 299 bytes in section .bss
 624 bytes in section .text
 
 624 bytes of CODE memory
 299 bytes of DATA memory

Errors: none
Warnings: 1
