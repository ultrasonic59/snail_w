###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         25/Feb/2023  18:53:07
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\proj\velograph\snail_w\stm32_snail\common\can\can_cmds.c
#    Command line                 =
#        -f
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\app_step_x_dbg\Obj\drv\can_cmds.o.rsp
#        (D:\proj\velograph\snail_w\stm32_snail\common\can\can_cmds.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D DIMA_BRD -D STEP_X -D STM32F205xx
#        -lcN
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\app_step_x_dbg\List\drv
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\app_step_x_dbg\Obj\drv
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\.\ -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\src\board\ -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\src\inc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\dbg\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\usb\drv\inc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\board\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\my_grbl\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\can\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\my_misc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\..\common\libraries\eeprom_emul\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\app_step_x_dbg\Obj\drv\can_cmds.o.d
#    Locale                       =  C
#    List file                    =
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\app_step_x_dbg\List\drv\can_cmds.lst
#    Object file                  =
#        D:\proj\velograph\snail_w\stm32_snail\app_step_axis_dima\app_step_x_dbg\Obj\drv\can_cmds.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

D:\proj\velograph\snail_w\stm32_snail\common\can\can_cmds.c
      1          #include <stdint.h>
      2          #include <string.h>
      3          #include <stdlib.h>
      4          
      5          #include "FreeRTOS.h"
      6          #include "task.h"
      7          #include "semphr.h"
      8          #include "queue.h"
      9          ////#include "my_grbl.h"
     10          #include "can.h"
     11          #include "can_cmds.h"
     12          #include "printk.h"
     13          ////=======================================
     14          extern xQueueHandle queu_to_send;
     15          
     16          int put_can_cmd_reset_all(void)
     17          {
     18            return 0;
     19          }
     20          
     21          void _mc_reset(void)
     22          {
     23          put_can_cmd_reset_all();  
     24          ////report_init_message();
     25          }
     26          int put_can_cmd_go(uint8_t dirs,uint16_t per
     27                             ,uint32_t step_x
     28                             ,uint32_t step_y
     29                             ,uint32_t step_z)
     30          {
     31          ///uint8_t btst=0;  
     32          can_msg_t  send_msg;
     33          go_cmd_t t_go_cmd;
     34          t_go_cmd.cmd=GO_CMD ;
     35          t_go_cmd.dirs=dirs;
     36          t_go_cmd.step_per=per;
     37          send_msg.len=CAN_MAX_NUM_BYTES;
     38          send_msg.format=STANDARD_FORMAT;
     39          send_msg.type=DATA_FRAME;
     40          if(step_x)
     41            {
     42             t_go_cmd.steps=step_x;
     43             memcpy(send_msg.data,&t_go_cmd,sizeof(go_cmd_t));
     44             send_msg.id=ID_X_CMD; 
     45             xQueueSend(queu_to_send,&send_msg,CAN_TIMEOUT_SEND);
     46            }
     47          if(step_y)
     48            {
     49             t_go_cmd.steps=step_y;
     50             memcpy(send_msg.data,&t_go_cmd,sizeof(go_cmd_t));
     51             send_msg.id=ID_Y_CMD; 
     52             xQueueSend(queu_to_send,&send_msg,CAN_TIMEOUT_SEND);
     53            }
     54          if(step_z)
     55            {
     56             t_go_cmd.steps=step_z;
     57             memcpy(send_msg.data,&t_go_cmd,sizeof(go_cmd_t));
     58             send_msg.id=ID_Z_CMD; 
     59             xQueueSend(queu_to_send,&send_msg,CAN_TIMEOUT_SEND);
     60            }
     61          
     62          ////send_msg.data[1]=btst;    
     63          ////xQueueSend(queu_to_send,&send_msg,CAN_TIMEOUT_SEND);
     64          
     65          ///go_cmd_t   go_cmd;
     66          #if 0        
     67                  printk("\n\r tst_cnt[%d][%02x][%d][%d][%d]", per, dirs
     68                      , step_x
     69                      , step_y
     70                      , step_z
     71                  );
     72          #endif
     73          
     74            return 0;
     75          }
     76          ////================================================
     77          #ifndef _MASTER_
     78          extern uint32_t cur_coord;
     79          extern uint8_t cur_stat;
     80          
     81          int put_can_cmd_stat(uint8_t state
     82                             ,uint32_t coord)
     83          {
     84          ///uint8_t btst=0;  
     85          can_msg_t  send_msg;
     86          put_stat_cmd_t t_put_stat_cmd;
     87          t_put_stat_cmd.cmd=PUT_STAT_CMD ;
     88          #if STEP_X
     89            t_put_stat_cmd.axis= AXIS_X;
     90          #elif STEP_Y
     91            t_put_stat_cmd.axis= AXIS_Y;
     92          #elif STEP_Z
     93            t_put_stat_cmd.axis= AXIS_Z;
     94          #else
     95            t_put_stat_cmd.axis= 0;
     96          #endif
     97          ////t_put_stat_cmd.coord=cur_coord;
     98          ///t_put_stat_cmd.state=cur_stat;
     99          t_put_stat_cmd.coord=coord;
    100          t_put_stat_cmd.state=state;
    101          send_msg.len=CAN_MAX_NUM_BYTES;
    102          send_msg.format=STANDARD_FORMAT;
    103          send_msg.type=DATA_FRAME;
    104          memcpy(send_msg.data,&t_put_stat_cmd,sizeof(put_stat_cmd_t));
    105          send_msg.id=ID_MASTER_CMD; 
    106          xQueueSend(queu_to_send,&send_msg,CAN_TIMEOUT_SEND);
    107          
    108            return 0;
    109          }
    110          int put_can_ack(uint8_t cmd )
    111          {
    112          ///uint8_t btst=0;  
    113          can_msg_t  send_msg;
    114          
    115          put_ack_t t_put_ack;
    116          
    117          t_put_ack.cmd=PUT_ACK ;
    118          #if STEP_X
    119            t_put_ack.ack.axis= AXIS_X;
    120          #elif STEP_Y
    121            t_put_ack..ack.axis= AXIS_Y;
    122          #elif STEP_Z
    123            t_put_ack..ack.axis= AXIS_Z;
    124          #else
    125            t_put_ack..ack.axis= 0;
    126          #endif
    127           t_put_ack.ack.ack_cmd=cmd;
    128          send_msg.len= sizeof(put_ack_t);
    129          send_msg.format=STANDARD_FORMAT;
    130          send_msg.type=DATA_FRAME;
    131          memcpy(send_msg.data,&t_put_ack,sizeof(put_ack_t));
    132          send_msg.id=ID_MASTER_CMD; 
    133          xQueueSend(queu_to_send,&send_msg,CAN_TIMEOUT_SEND);
    134          
    135            return 0;
    136          }
    137          
    138          
    139          #endif
    140          ////======================================================

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _mc_reset
         8   -> put_can_cmd_reset_all
      40   put_can_ack
        40   -> __aeabi_memcpy
        40   -> xQueueGenericSend
      64   put_can_cmd_go
        64   -> __aeabi_memcpy
        64   -> xQueueGenericSend
       0   put_can_cmd_reset_all
      48   put_can_cmd_stat
        48   -> __aeabi_memcpy
        48   -> xQueueGenericSend


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       8  _mc_reset
      82  put_can_ack
     188  put_can_cmd_go
       4  put_can_cmd_reset_all
      92  put_can_cmd_stat

 
 378 bytes in section .text
 
 378 bytes of CODE memory

Errors: none
Warnings: none
