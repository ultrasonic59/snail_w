###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         20/Jun/2020  14:38:25
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\common\libraries\src\misc.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW1281.tmp
#        (D:\proj\velograph\snail\stm32_snail\common\libraries\src\misc.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\dbg\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List\misc.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj\misc.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\common\libraries\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V1.1.2
      6            * @date    05-March-2012 
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            *          
     10            *  @verbatim   
     11            *                               
     12            *          ===================================================================      
     13            *                        How to configure Interrupts using driver 
     14            *          ===================================================================      
     15            * 
     16            *            This section provide functions allowing to configure the NVIC interrupts (IRQ).
     17            *            The Cortex-M3 exceptions are managed by CMSIS functions.
     18            *
     19            *            1. Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig()
     20            *                function according to the following table.
     21           
     22            *  The table below gives the allowed values of the pre-emption priority and subpriority according
     23            *  to the Priority Grouping configuration performed by NVIC_PriorityGroupConfig function
     24            *    ==========================================================================================================================
     25            *      NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description
     26            *    ==========================================================================================================================
     27            *     NVIC_PriorityGroup_0  |                0                  |            0-15             | 0 bits for pre-emption priority
     28            *                           |                                   |                             | 4 bits for subpriority
     29            *    --------------------------------------------------------------------------------------------------------------------------
     30            *     NVIC_PriorityGroup_1  |                0-1                |            0-7              | 1 bits for pre-emption priority
     31            *                           |                                   |                             | 3 bits for subpriority
     32            *    --------------------------------------------------------------------------------------------------------------------------    
     33            *     NVIC_PriorityGroup_2  |                0-3                |            0-3              | 2 bits for pre-emption priority
     34            *                           |                                   |                             | 2 bits for subpriority
     35            *    --------------------------------------------------------------------------------------------------------------------------    
     36            *     NVIC_PriorityGroup_3  |                0-7                |            0-1              | 3 bits for pre-emption priority
     37            *                           |                                   |                             | 1 bits for subpriority
     38            *    --------------------------------------------------------------------------------------------------------------------------    
     39            *     NVIC_PriorityGroup_4  |                0-15               |            0                | 4 bits for pre-emption priority
     40            *                           |                                   |                             | 0 bits for subpriority                       
     41            *    ==========================================================================================================================     
     42            *
     43            *            2. Enable and Configure the priority of the selected IRQ Channels using NVIC_Init()  
     44            *
     45            * @note  When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
     46            *        The pending IRQ priority will be managed only by the subpriority.
     47            *
     48            * @note  IRQ priority order (sorted by highest to lowest priority):
     49            *         - Lowest pre-emption priority
     50            *         - Lowest subpriority
     51            *         - Lowest hardware priority (IRQ number)
     52            *
     53            *  @endverbatim
     54            *
     55            ******************************************************************************
     56            * @attention
     57            *
     58            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     59            *
     60            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     61            * You may not use this file except in compliance with the License.
     62            * You may obtain a copy of the License at:
     63            *
     64            *        http://www.st.com/software_license_agreement_liberty_v2
     65            *
     66            * Unless required by applicable law or agreed to in writing, software 
     67            * distributed under the License is distributed on an "AS IS" BASIS, 
     68            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     69            * See the License for the specific language governing permissions and
     70            * limitations under the License.
     71            *
     72            ******************************************************************************
     73            */
     74          
     75          /* Includes ------------------------------------------------------------------*/
     76          #include "misc.h"
     77          
     78          /** @addtogroup STM32F2xx_StdPeriph_Driver
     79            * @{
     80            */
     81          
     82          /** @defgroup MISC 
     83            * @brief MISC driver modules
     84            * @{
     85            */
     86          
     87          /* Private typedef -----------------------------------------------------------*/
     88          /* Private define ------------------------------------------------------------*/
     89          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     90          
     91          /* Private macro -------------------------------------------------------------*/
     92          /* Private variables ---------------------------------------------------------*/
     93          /* Private function prototypes -----------------------------------------------*/
     94          /* Private functions ---------------------------------------------------------*/
     95          
     96          /** @defgroup MISC_Private_Functions
     97            * @{
     98            */
     99          
    100          /**
    101            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
    102            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
    103            *   This parameter can be one of the following values:
    104            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
    105            *                                4 bits for subpriority
    106            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
    107            *                                3 bits for subpriority
    108            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
    109            *                                2 bits for subpriority
    110            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
    111            *                                1 bits for subpriority
    112            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
    113            *                                0 bits for subpriority
    114            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
    115            *         The pending IRQ priority will be managed only by the subpriority. 
    116            * @retval None
    117            */
    118          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    119          {
    120            /* Check the parameters */
    121            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
    122            
    123            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    124            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    125          }
    126          
    127          /**
    128            * @brief  Initializes the NVIC peripheral according to the specified
    129            *         parameters in the NVIC_InitStruct.
    130            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    131            *         function should be called before. 
    132            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    133            *         the configuration information for the specified NVIC peripheral.
    134            * @retval None
    135            */
    136          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    137          {
    138            uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    139            
    140            /* Check the parameters */
    141            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    142            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
    143            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    144              
    145            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    146            {
    147              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    148              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    149              tmppre = (0x4 - tmppriority);
    150                
    151              tmpsub = tmpsub >> tmppriority;
    152          
    153              tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    154              tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
    155                  
    156              tmppriority = tmppriority << 0x04;
    157                  
    158              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    159              
    160              /* Enable the Selected IRQ Channels --------------------------------------*/
    161              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    162                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    163            }
    164            else
    165            {
    166              /* Disable the Selected IRQ Channels -------------------------------------*/
    167              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    168                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    169            }
    170          }
    171          
    172          /**
    173            * @brief  Sets the vector table location and Offset.
    174            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    175            *   This parameter can be one of the following values:
    176            *     @arg NVIC_VectTab_RAM: Vector Table in internal SRAM.
    177            *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
    178            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    179            * @retval None
    180            */
    181          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    182          { 
    183            /* Check the parameters */
    184            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
    185            assert_param(IS_NVIC_OFFSET(Offset));  
    186             
    187            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    188          }
    189          
    190          /**
    191            * @brief  Selects the condition for the system to enter low power mode.
    192            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    193            *   This parameter can be one of the following values:
    194            *     @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    195            *     @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    196            *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    197            * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
    198            * @retval None
    199            */
    200          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    201          {
    202            /* Check the parameters */
    203            assert_param(IS_NVIC_LP(LowPowerMode));
    204            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    205            
    206            if (NewState != DISABLE)
    207            {
    208              SCB->SCR |= LowPowerMode;
    209            }
    210            else
    211            {
    212              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    213            }
    214          }
    215          
    216          /**
    217            * @brief  Configures the SysTick clock source.
    218            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    219            *   This parameter can be one of the following values:
    220            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    221            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    222            * @retval None
    223            */
    224          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    225          {
    226            /* Check the parameters */
    227            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    228            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    229            {
    230              SysTick->CTRL |= SysTick_CLKSource_HCLK;
    231            }
    232            else
    233            {
    234              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    235            }
    236          }
    237          
    238          /**
    239            * @}
    240            */
    241          
    242          /**
    243            * @}
    244            */
    245          
    246          /**
    247            * @}
    248            */
    249          
    250          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   NVIC_Init
       0   NVIC_PriorityGroupConfig
       0   NVIC_SetVectorTable
       4   NVIC_SystemLPConfig
       0   SysTick_CLKSourceConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
     104  NVIC_Init
      10  NVIC_PriorityGroupConfig
      12  NVIC_SetVectorTable
      40  NVIC_SystemLPConfig
      28  SysTick_CLKSourceConfig

 
 230 bytes in section .text
 
 230 bytes of CODE memory

Errors: none
Warnings: none
