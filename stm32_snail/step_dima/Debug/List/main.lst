###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         20/Jun/2020  14:38:25
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\main.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW1109.tmp
#        (D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\main.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\dbg\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List\main.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj\main.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\main.c
      1          /*
      2           * FreeRTOS Kernel V10.2.1
      3           * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          /*
     29           * Creates all the demo application tasks, then starts the scheduler.  The WEB
     30           * documentation provides more details of the standard demo application tasks.
     31           * In addition to the standard demo tasks, the following tasks and tests are
     32           * defined and/or created within this file:
     33           *
     34           * "Fast Interrupt Test" - A high frequency periodic interrupt is generated
     35           * using a free running timer to demonstrate the use of the
     36           * configKERNEL_INTERRUPT_PRIORITY configuration constant.  The interrupt
     37           * service routine measures the number of processor clocks that occur between
     38           * each interrupt - and in so doing measures the jitter in the interrupt timing.
     39           * The maximum measured jitter time is latched in the ulMaxJitter variable, and
     40           * displayed on the LCD by the 'Check' task as described below.  The
     41           * fast interrupt is configured and handled in the timertest.c source file.
     42           *
     43           * "LCD" task - the LCD task is a 'gatekeeper' task.  It is the only task that
     44           * is permitted to access the display directly.  Other tasks wishing to write a
     45           * message to the LCD send the message on a queue to the LCD task instead of
     46           * accessing the LCD themselves.  The LCD task just blocks on the queue waiting
     47           * for messages - waking and displaying the messages as they arrive.
     48           *
     49           * "Check" task -  This only executes every five seconds but has the highest
     50           * priority so is guaranteed to get processor time.  Its main function is to
     51           * check that all the standard demo tasks are still operational.  Should any
     52           * unexpected behaviour within a demo task be discovered the 'check' task will
     53           * write an error to the LCD (via the LCD task).  If all the demo tasks are
     54           * executing with their expected behaviour then the check task writes PASS
     55           * along with the max jitter time to the LCD (again via the LCD task), as
     56           * described above.
     57           *
     58           */
     59          
     60          /* Standard includes. */
     61          #include <stdio.h>
     62          
     63          /* Scheduler includes. */
     64          #include "FreeRTOS.h"
     65          #include "task.h"
     66          #include "queue.h"
     67          
     68          /* Library includes. */
     69          ////#include "stm32f2xx_it.h"
     70          #include "stm32f2xx_rcc.h"
     71          
     72          /* Demo app includes. */
     73          #include "board.h"
     74          
     75          #if 0
     76          #include "usb_lib.h"
     77          #ifdef USEUSB
     78          #include "usb_desc.h"
     79          #endif
     80          #include "hw_config.h"
     81          #ifdef USEUSB
     82          #include "usb_pwr.h"
     83          #endif
     84          #include "stm32eeprom.h"
     85          ///#include "eeprom.h"
     86          #endif
     87          
     88          #include "misc.h"
     89          #include "printk.h"
     90          
     91          /* Task priorities. */
     92          #define mainQUEUE_POLL_PRIORITY				( tskIDLE_PRIORITY + 2 )
     93          #define mainCHECK_TASK_PRIORITY				( tskIDLE_PRIORITY + 3 )
     94          #define mainSEM_TEST_PRIORITY				( tskIDLE_PRIORITY + 1 )
     95          #define mainBLOCK_Q_PRIORITY				( tskIDLE_PRIORITY + 2 )
     96          #define mainCREATOR_TASK_PRIORITY           ( tskIDLE_PRIORITY + 3 )
     97          #define mainFLASH_TASK_PRIORITY				( tskIDLE_PRIORITY + 1 )
     98          #define mainCOM_TEST_PRIORITY				( tskIDLE_PRIORITY + 1 )
     99          #define mainINTEGER_TASK_PRIORITY           ( tskIDLE_PRIORITY )
    100          
    101          /* Constants related to the LCD. */
    102          #define mainMAX_LINE						( 240 )
    103          #define mainROW_INCREMENT					( 24 )
    104          #define mainMAX_COLUMN						( 20 )
    105          #define mainCOLUMN_START					( 319 )
    106          #define mainCOLUMN_INCREMENT 				( 16 )
    107          
    108          /* The maximum number of message that can be waiting for display at any one
    109          time. */
    110          #define mainLCD_QUEUE_SIZE					( 3 )
    111          
    112          /* The check task uses the sprintf function so requires a little more stack. */
    113          #define mainCHECK_TASK_STACK_SIZE			( configMINIMAL_STACK_SIZE + 50 )
    114          
    115          /* Dimensions the buffer into which the jitter time is written. */
    116          #define mainMAX_MSG_LEN						25
    117          
    118          /* The time between cycles of the 'check' task. */
    119          #define mainCHECK_DELAY						( ( TickType_t ) 5000 / portTICK_PERIOD_MS )
    120          
    121          /* The number of nano seconds between each processor clock. */
    122          #define mainNS_PER_CLOCK ( ( unsigned long ) ( ( 1.0 / ( double ) configCPU_CLOCK_HZ ) * 1000000000.0 ) )
    123          
    124          /* Baud rate used by the comtest tasks. */
    125          #define mainCOM_TEST_BAUD_RATE		( 115200 )
    126          
    127          extern void  put_tst_pin(uint8_t idat);
    128             
    129          ////========================================================
    130          void uDelay (const uint32_t usec)
    131          {
    132          uint32_t count = 0;
    133          const uint32_t utime = 45*usec;////(120 * usec / 7);
    134          do
    135            {
    136             if ( ++count > utime )
    137              {
    138              return ;
    139              }
    140            }
    141          while (1);
    142          }
    143          extern int get_byte2(void) ;
    144             
    145          ////========================================================   
    146          void tst_task( void *pvParameters )
    147          {
    148          uint8_t btst=0; 
    149          char key=0;
    150          int duty=100;
    151          printk("\n\r tst_task"); 
    152          
    153          #if 0       
    154          for(;;)
    155            {
    156          //// sendchar2 (0x33) ; 
    157            put_tst_pin(btst);
    158            btst++;  
    159            ////delay__ms(1);  
    160            uDelay(20000);
    161            }
    162          #endif        
    163           for(;;)
    164            {
    165            key=get_byte2() ;  
    166            switch(key)
    167              {
    168              case 'a':
    169          ////      put_mot_nstep(20);
    170                duty= 20;
    171                  break;
    172              case 's':
    173          ////     put_mot_nstep(100);
    174               duty= 100;
    175                  break;
    176             }
    177            printk("\n\r duty[%d] ",duty); 
    178            put_mot_nstep(duty);
    179           
    180          ////  set_led_dutycycle (duty);
    181          
    182            } 
    183          }
    184          ////============================================
    185          extern int sendchar2 (int c) ;
    186          
    187          ////============================================
    188          int main( void )
    189          {
    190          ////uint8_t btst=0; 
    191          ////uint32_t tst=0;
    192          #ifdef DEBUG
    193            debug();
    194          #endif
    195          __disable_irq();
    196          hw_board_init();
    197          ////	prvSetupHardware();
    198          ////        init_gpio();
    199          #if 0
    200          printk("\n\r [test]"); 
    201          tst= LED_PWM_TIM->CR1;/// & TIM_CR1_CEN;
    202          printk("\n\r [test=%x]",tst); 
    203          tst= LED_PWM_TIM->CNT;/// & TIM_CR1_CEN;
    204          printk("\n\r [test_cnt=%x]",tst); 
    205          tst= LED_PWM_TIM->CCR3;/// 
    206          printk("\n\r [test_ccr3=%x]",tst); 
    207          tst= LED_PWM_TIM->CCR2;/// 
    208          printk("\n\r [test_ccr2=%x]",tst); 
    209          tst= LED_PWM_TIM->CCR1;/// 
    210          printk("\n\r [test_ccr1=%x]",tst); 
    211          /*
    212          tst= GPIOC->MODER;
    213          printk("\n\r [test_MODER=%x[%x]]",tst,tst>>16); 
    214          tst= GPIOC->AFR[1];
    215          printk("\n\r [test_AFR[1]=%x[%x]]",tst,tst&0xf); 
    216          */
    217          tst= LED_PWM_TIM->CCER;/// 
    218          printk("\n\r [test_ccer=%x]",tst);
    219          
    220          tst= LED_PWM_TIM->BDTR;/// 
    221          printk("\n\r [test_bdtr=%x]",tst); 
    222          
    223          
    224          tst= TIM_LED->CCER;/// 
    225          printk("\n\r [test_ccer=%x]",tst);
    226          
    227          tst= TIM_LED->BDTR;/// 
    228          printk("\n\r [test_bdtr=%x]",tst); 
    229          
    230          tst= TIM_LED->PSC;/// 
    231          printk("\n\r [TIM_LED->PSC=%x]",tst); 
    232          
    233          tst= TIM_LED->CCMR2;/// 
    234          printk("\n\r [TIM_LED->CCMR2=%x]",tst); 
    235          #endif
    236          
    237          on_led0(1);
    238          set_led_dutycycle (LED_PWM_TIM_PERIOD);
    239            put_mot_nstep(20);
    240          
    241          #if 0        
    242          for(;;)
    243            {
    244           tst= TIM_LED->CNT;/// & TIM_CR1_CEN;
    245          ////printk("\n\r [test_cnt=%x]",tst); 
    246             
    247           ////sendchar2 (0x33) ; 
    248            put_tst_pin(btst);
    249            btst++;
    250          #if 0  
    251            tst+=10;
    252            if(tst>LED_PWM_TIM_PERIOD)
    253              tst=LED_PWM_TIM_PERIOD;
    254          //// on_led0(btst>>6);
    255          //// on_led1(btst>>5);
    256           set_led_dutycycle (tst);
    257          #endif
    258            ////delay__ms(1);  
    259            uDelay(100000);
    260            }
    261          #endif  
    262          
    263          NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
    264                  
    265          ////    xTaskCreate( gbrl_thr, "gbrl", mainCHECK_TASK_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL );
    266                   
    267          	/* Start the tasks defined within this file/specific to this demo. */
    268           ////???   xTaskCreate( vCheckTask, "Check", mainCHECK_TASK_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL );
    269          ////???	xTaskCreate( vLCDTask, "LCD", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    270          
    271          	/* The suicide tasks must be created last as they need to know how many
    272          	tasks were running prior to their creation in order to ascertain whether
    273          	or not the correct/expected number of tasks are running at any given time. */
    274           ////????   vCreateSuicidalTasks( mainCREATOR_TASK_PRIORITY );
    275          
    276          	/* Configure the timers used by the fast interrupt timer test. */
    277          /////	vSetupTimerTest();
    278            xTaskCreate( tst_task, "tst_task", mainCHECK_TASK_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL );
    279          
    280          	/* Start the scheduler. */
    281          	vTaskStartScheduler();
    282          
    283          	/* Will only get here if there was not enough heap space to create the
    284          	idle task. */
    285          return 0;
    286          }
    287          ////============================================================
    288          #if 0
    289          static void vCheckTask( void *pvParameters )
    290          {
    291          TickType_t xLastExecutionTime;
    292          xLCDMessage xMessage;
    293          static signed char cPassMessage[ mainMAX_MSG_LEN ];
    294          extern unsigned short usMaxJitter;
    295          
    296          	xLastExecutionTime = xTaskGetTickCount();
    297          	xMessage.pcMessage = cPassMessage;
    298          
    299              for( ;; )
    300          	{
    301          		/* Perform this check every mainCHECK_DELAY milliseconds. */
    302          		vTaskDelayUntil( &xLastExecutionTime, mainCHECK_DELAY );
    303          
    304          		/* Has an error been found in any task? */
    305          
    306                  if( xAreBlockingQueuesStillRunning() != pdTRUE )
    307          		{
    308          			xMessage.pcMessage = "ERROR IN BLOCK Q\n";
    309          		}
    310          		else if( xAreBlockTimeTestTasksStillRunning() != pdTRUE )
    311          		{
    312          			xMessage.pcMessage = "ERROR IN BLOCK TIME\n";
    313          		}
    314                  else if( xAreSemaphoreTasksStillRunning() != pdTRUE )
    315                  {
    316                      xMessage.pcMessage = "ERROR IN SEMAPHORE\n";
    317                  }
    318                  else if( xArePollingQueuesStillRunning() != pdTRUE )
    319                  {
    320                      xMessage.pcMessage = "ERROR IN POLL Q\n";
    321                  }
    322                  else if( xIsCreateTaskStillRunning() != pdTRUE )
    323                  {
    324                      xMessage.pcMessage = "ERROR IN CREATE\n";
    325                  }
    326                  else if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
    327                  {
    328                      xMessage.pcMessage = "ERROR IN MATH\n";
    329                  }
    330          		else if( xAreComTestTasksStillRunning() != pdTRUE )
    331          		{
    332          			xMessage.pcMessage = "ERROR IN COM TEST\n";
    333          		}
    334          		else
    335          		{
    336          			sprintf( ( char * ) cPassMessage, "PASS [%uns]\n", ( ( unsigned long ) usMaxJitter ) * mainNS_PER_CLOCK );
    337          		}
    338          
    339          		/* Send the message to the LCD gatekeeper for display. */
    340          		xQueueSend( xLCDQueue, &xMessage, portMAX_DELAY );
    341          	}
    342          }
    343          #endif
    344          /*-----------------------------------------------------------*/
    345          
    346          
    347          #ifdef  DEBUG
    348          /* Keep the linker happy. */
    349          void assert_failed( unsigned char* pcFile, unsigned long ulLine )
    350          {
    351          	for( ;; )
    352          	{
    353          	}
    354          }
    355          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   main
        16   -> NVIC_PriorityGroupConfig
        16   -> hw_board_init
        16   -> on_led0
        16   -> put_mot_nstep
        16   -> set_led_dutycycle
        16   -> vTaskStartScheduler
        16   -> xTaskCreate
      24   tst_task
        24   -> _printk
        24   -> get_byte2
        24   -> put_mot_nstep
       0   uDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      12  ?_0
      16  ?_1
      12  ?_2
      64  main
      62  tst_task
      18  uDelay

 
  40 bytes in section .rodata
 160 bytes in section .text
 
 160 bytes of CODE  memory
  40 bytes of CONST memory

Errors: none
Warnings: 1
