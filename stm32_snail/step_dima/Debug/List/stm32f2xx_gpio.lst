###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         20/Jun/2020  14:38:25
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\common\libraries\src\stm32f2xx_gpio.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW1370.tmp
#        (D:\proj\velograph\snail\stm32_snail\common\libraries\src\stm32f2xx_gpio.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\dbg\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List\stm32f2xx_gpio.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj\stm32f2xx_gpio.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\common\libraries\src\stm32f2xx_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_gpio.c
      4            * @author  MCD Application Team
      5            * @version V1.1.2
      6            * @date    05-March-2012 
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the GPIO peripheral:           
      9            *           - Initialization and Configuration
     10            *           - GPIO Read and Write
     11            *           - GPIO Alternate functions configuration
     12            * 
     13            *  @verbatim
     14            *
     15            *          ===================================================================
     16            *                                 How to use this driver
     17            *          ===================================================================       
     18            *           1. Enable the GPIO AHB clock using the following function
     19            *                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
     20            *             
     21            *           2. Configure the GPIO pin(s) using GPIO_Init()
     22            *              Four possible configuration are available for each pin:
     23            *                - Input: Floating, Pull-up, Pull-down.
     24            *                - Output: Push-Pull (Pull-up, Pull-down or no Pull)
     25            *                          Open Drain (Pull-up, Pull-down or no Pull).
     26            *                  In output mode, the speed is configurable: 2 MHz, 25 MHz,
     27            *                  50 MHz or 100 MHz.
     28            *                - Alternate Function: Push-Pull (Pull-up, Pull-down or no Pull)
     29            *                                      Open Drain (Pull-up, Pull-down or no Pull).
     30            *                - Analog: required mode when a pin is to be used as ADC channel
     31            *                          or DAC output.
     32            * 
     33            *          3- Peripherals alternate function:
     34            *              - For ADC and DAC, configure the desired pin in analog mode using 
     35            *                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AN;
     36            *              - For other peripherals (TIM, USART...):
     37            *                 - Connect the pin to the desired peripherals' Alternate 
     38            *                   Function (AF) using GPIO_PinAFConfig() function
     39            *                 - Configure the desired pin in alternate function mode using
     40            *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
     41            *                 - Select the type, pull-up/pull-down and output speed via 
     42            *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
     43            *                 - Call GPIO_Init() function
     44            *        
     45            *          4. To get the level of a pin configured in input mode use GPIO_ReadInputDataBit()
     46            *          
     47            *          5. To set/reset the level of a pin configured in output mode use
     48            *             GPIO_SetBits()/GPIO_ResetBits()
     49            *               
     50            *          6. During and just after reset, the alternate functions are not 
     51            *             active and the GPIO pins are configured in input floating mode
     52            *             (except JTAG pins).
     53            *
     54            *          7. The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as 
     55            *             general-purpose (PC14 and PC15, respectively) when the LSE
     56            *             oscillator is off. The LSE has priority over the GPIO function.
     57            *
     58            *          8. The HSE oscillator pins OSC_IN/OSC_OUT can be used as 
     59            *             general-purpose PH0 and PH1, respectively, when the HSE 
     60            *             oscillator is off. The HSE has priority over the GPIO function.
     61            *             
     62            *  @endverbatim        
     63            *
     64            ******************************************************************************
     65            * @attention
     66            *
     67            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     68            *
     69            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     70            * You may not use this file except in compliance with the License.
     71            * You may obtain a copy of the License at:
     72            *
     73            *        http://www.st.com/software_license_agreement_liberty_v2
     74            *
     75            * Unless required by applicable law or agreed to in writing, software 
     76            * distributed under the License is distributed on an "AS IS" BASIS, 
     77            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     78            * See the License for the specific language governing permissions and
     79            * limitations under the License.
     80            *
     81            ******************************************************************************
     82            */
     83          
     84          /* Includes ------------------------------------------------------------------*/
     85          ///#include "stm32f2xx_gpio.h"
     86          ///#include "stm32f2xx_rcc.h"
     87          #include "stm32f2xx_conf.h"
     88          
     89          /** @addtogroup STM32F2xx_StdPeriph_Driver
     90            * @{
     91            */
     92          
     93          
     94          /**
     95            * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
     96            * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
     97            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
     98            * @retval None
     99            */
    100          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
    101          {
    102            /* Check the parameters */
    103            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    104          
    105            if (GPIOx == GPIOA)
    106            {
    107              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    108              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
    109            }
    110            else if (GPIOx == GPIOB)
    111            {
    112              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    113              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
    114            }
    115            else if (GPIOx == GPIOC)
    116            {
    117              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    118              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
    119            }
    120            else if (GPIOx == GPIOD)
    121            {
    122              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    123              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
    124            }
    125            else if (GPIOx == GPIOE)
    126            {
    127              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    128              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
    129            }
    130            else if (GPIOx == GPIOF)
    131            {
    132              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    133              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
    134            }
    135            else if (GPIOx == GPIOG)
    136            {
    137              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    138              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
    139            }
    140            else if (GPIOx == GPIOH)
    141            {
    142              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    143              RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
    144            }
    145            else
    146            {
    147              if (GPIOx == GPIOI)
    148              {
    149                RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    150                RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    151              }
    152            }
    153          }
    154          
    155          /**
    156            * @brief  Initializes the GPIOx peripheral according to the specified parameters in the GPIO_InitStruct.
    157            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    158            * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
    159            *         the configuration information for the specified GPIO peripheral.
    160            * @retval None
    161            */
    162          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
    163          {
    164            uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
    165          
    166            /* Check the parameters */
    167            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    168            assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
    169            assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
    170            assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
    171          
    172            /* -------------------------Configure the port pins---------------- */
    173            /*-- GPIO Mode Configuration --*/
    174            for (pinpos = 0x00; pinpos < 0x10; pinpos++)
    175            {
    176              pos = ((uint32_t)0x01) << pinpos;
    177              /* Get the port pins position */
    178              currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    179          
    180              if (currentpin == pos)
    181              {
    182                GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
    183                GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
    184          
    185                if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
    186                {
    187                  /* Check Speed mode parameters */
    188                  assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    189          
    190                  /* Speed mode configuration */
    191                  GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
    192                  GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
    193          
    194                  /* Check Output mode parameters */
    195                  assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
    196          
    197                  /* Output mode configuration*/
    198                  GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
    199                  GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
    200                }
    201          
    202                /* Pull-up Pull down resistor configuration*/
    203                GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
    204                GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    205              }
    206            }
    207          }
    208          
    209          /**
    210            * @brief  Fills each GPIO_InitStruct member with its default value.
    211            * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
    212            * @retval None
    213            */
    214          void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
    215          {
    216            /* Reset GPIO init structure parameters values */
    217            GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    218            GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
    219            GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    220            GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
    221            GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
    222          }
    223          
    224          /**
    225            * @brief  Locks GPIO Pins configuration registers.
    226            * @note   The locked registers are GPIOx_MODER, GPIOx_OTYPER, GPIOx_OSPEEDR,
    227            *         GPIOx_PUPDR, GPIOx_AFRL and GPIOx_AFRH.
    228            * @note   The configuration of the locked GPIO pins can no longer be modified
    229            *         until the next reset.
    230            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    231            * @param  GPIO_Pin: specifies the port bit to be locked.
    232            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    233            * @retval None
    234            */
    235          void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    236          {
    237            __IO uint32_t tmp = 0x00010000;
    238          
    239            /* Check the parameters */
    240            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    241            assert_param(IS_GPIO_PIN(GPIO_Pin));
    242          
    243            tmp |= GPIO_Pin;
    244            /* Set LCKK bit */
    245            GPIOx->LCKR = tmp;
    246            /* Reset LCKK bit */
    247            GPIOx->LCKR =  GPIO_Pin;
    248            /* Set LCKK bit */
    249            GPIOx->LCKR = tmp;
    250            /* Read LCKK bit*/
    251            tmp = GPIOx->LCKR;
    252            (void) tmp;
    253            /* Read LCKK bit*/
    254            tmp = GPIOx->LCKR;
    255            (void) tmp;
    256          }
    257          
    258          /**
    259            * @}
    260            */
    261          
    262          /** @defgroup GPIO_Group2 GPIO Read and Write
    263           *  @brief   GPIO Read and Write
    264           *
    265          @verbatim   
    266           ===============================================================================
    267                                        GPIO Read and Write
    268           ===============================================================================  
    269          
    270          @endverbatim
    271            * @{
    272            */
    273          
    274          /**
    275            * @brief  Reads the specified input port pin.
    276            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    277            * @param  GPIO_Pin: specifies the port bit to read.
    278            *         This parameter can be GPIO_Pin_x where x can be (0..15).
    279            * @retval The input port pin value.
    280            */
    281          uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    282          {
    283            uint8_t bitstatus = 0x00;
    284          
    285            /* Check the parameters */
    286            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    287            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    288          
    289            if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    290            {
    291              bitstatus = (uint8_t)Bit_SET;
    292            }
    293            else
    294            {
    295              bitstatus = (uint8_t)Bit_RESET;
    296            }
    297            return bitstatus;
    298          }
    299          
    300          /**
    301            * @brief  Reads the specified GPIO input data port.
    302            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    303            * @retval GPIO input data port value.
    304            */
    305          uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
    306          {
    307            /* Check the parameters */
    308            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    309          
    310            return ((uint16_t)GPIOx->IDR);
    311          }
    312          
    313          /**
    314            * @brief  Reads the specified output data port bit.
    315            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    316            * @param  GPIO_Pin: specifies the port bit to read.
    317            *          This parameter can be GPIO_Pin_x where x can be (0..15).
    318            * @retval The output port pin value.
    319            */
    320          uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    321          {
    322            uint8_t bitstatus = 0x00;
    323          
    324            /* Check the parameters */
    325            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    326            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    327          
    328            if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    329            {
    330              bitstatus = (uint8_t)Bit_SET;
    331            }
    332            else
    333            {
    334              bitstatus = (uint8_t)Bit_RESET;
    335            }
    336            return bitstatus;
    337          }
    338          
    339          /**
    340            * @brief  Reads the specified GPIO output data port.
    341            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    342            * @retval GPIO output data port value.
    343            */
    344          uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
    345          {
    346            /* Check the parameters */
    347            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    348          
    349            return ((uint16_t)GPIOx->ODR);
    350          }
    351          
    352          /**
    353            * @brief  Sets the selected data port bits.
    354            * @note   This functions uses GPIOx_BSRR register to allow atomic read/modify 
    355            *         accesses. In this way, there is no risk of an IRQ occurring between
    356            *         the read and the modify access.
    357            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    358            * @param  GPIO_Pin: specifies the port bits to be written.
    359            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    360            * @retval None
    361            */
    362          void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    363          {
    364            /* Check the parameters */
    365            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    366            assert_param(IS_GPIO_PIN(GPIO_Pin));
    367          
    368            GPIOx->BSRRL = GPIO_Pin;
    369          }
    370          
    371          /**
    372            * @brief  Clears the selected data port bits.
    373            * @note   This functions uses GPIOx_BSRR register to allow atomic read/modify 
    374            *         accesses. In this way, there is no risk of an IRQ occurring between
    375            *         the read and the modify access.
    376            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    377            * @param  GPIO_Pin: specifies the port bits to be written.
    378            *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    379            * @retval None
    380            */
    381          void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    382          {
    383            /* Check the parameters */
    384            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    385            assert_param(IS_GPIO_PIN(GPIO_Pin));
    386          
    387            GPIOx->BSRRH = GPIO_Pin;
    388          }
    389          
    390          /**
    391            * @brief  Sets or clears the selected data port bit.
    392            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    393            * @param  GPIO_Pin: specifies the port bit to be written.
    394            *          This parameter can be one of GPIO_Pin_x where x can be (0..15).
    395            * @param  BitVal: specifies the value to be written to the selected bit.
    396            *          This parameter can be one of the BitAction enum values:
    397            *            @arg Bit_RESET: to clear the port pin
    398            *            @arg Bit_SET: to set the port pin
    399            * @retval None
    400            */
    401          void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
    402          {
    403            /* Check the parameters */
    404            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    405            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    406            assert_param(IS_GPIO_BIT_ACTION(BitVal));
    407          
    408            if (BitVal != Bit_RESET)
    409            {
    410              GPIOx->BSRRL = GPIO_Pin;
    411            }
    412            else
    413            {
    414              GPIOx->BSRRH = GPIO_Pin ;
    415            }
    416          }
    417          
    418          /**
    419            * @brief  Writes data to the specified GPIO data port.
    420            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    421            * @param  PortVal: specifies the value to be written to the port output data register.
    422            * @retval None
    423            */
    424          void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
    425          {
    426            /* Check the parameters */
    427            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    428          
    429            GPIOx->ODR = PortVal;
    430          }
    431          
    432          /**
    433            * @brief  Toggles the specified GPIO pins..
    434            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    435            * @param  GPIO_Pin: Specifies the pins to be toggled.
    436            * @retval None
    437            */
    438          void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    439          {
    440            /* Check the parameters */
    441            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    442          
    443            GPIOx->ODR ^= GPIO_Pin;
    444          }
    445          
    446          /**
    447            * @}
    448            */
    449          
    450          /** @defgroup GPIO_Group3 GPIO Alternate functions configuration function
    451           *  @brief   GPIO Alternate functions configuration function
    452           *
    453          @verbatim   
    454           ===============================================================================
    455                         GPIO Alternate functions configuration function
    456           ===============================================================================  
    457          
    458          @endverbatim
    459            * @{
    460            */
    461          
    462          /**
    463            * @brief  Changes the mapping of the specified pin.
    464            * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
    465            * @param  GPIO_PinSource: specifies the pin for the Alternate function.
    466            *         This parameter can be GPIO_PinSourcex where x can be (0..15).
    467            * @param  GPIO_AFSelection: selects the pin to used as Alternate function.
    468            *          This parameter can be one of the following values:
    469            *            @arg GPIO_AF_RTC_50Hz: Connect RTC_50Hz pin to AF0 (default after reset) 
    470            *            @arg GPIO_AF_MCO: Connect MCO pin (MCO1 and MCO2) to AF0 (default after reset) 
    471            *            @arg GPIO_AF_TAMPER: Connect TAMPER pins (TAMPER_1 and TAMPER_2) to AF0 (default after reset) 
    472            *            @arg GPIO_AF_SWJ: Connect SWJ pins (SWD and JTAG)to AF0 (default after reset) 
    473            *            @arg GPIO_AF_TRACE: Connect TRACE pins to AF0 (default after reset)
    474            *            @arg GPIO_AF_TIM1: Connect TIM1 pins to AF1
    475            *            @arg GPIO_AF_TIM2: Connect TIM2 pins to AF1
    476            *            @arg GPIO_AF_TIM3: Connect TIM3 pins to AF2
    477            *            @arg GPIO_AF_TIM4: Connect TIM4 pins to AF2
    478            *            @arg GPIO_AF_TIM5: Connect TIM5 pins to AF2
    479            *            @arg GPIO_AF_TIM8: Connect TIM8 pins to AF3
    480            *            @arg GPIO_AF_TIM9: Connect TIM9 pins to AF3
    481            *            @arg GPIO_AF_TIM10: Connect TIM10 pins to AF3
    482            *            @arg GPIO_AF_TIM11: Connect TIM11 pins to AF3
    483            *            @arg GPIO_AF_I2C1: Connect I2C1 pins to AF4
    484            *            @arg GPIO_AF_I2C2: Connect I2C2 pins to AF4
    485            *            @arg GPIO_AF_I2C3: Connect I2C3 pins to AF4
    486            *            @arg GPIO_AF_SPI1: Connect SPI1 pins to AF5
    487            *            @arg GPIO_AF_SPI2: Connect SPI2/I2S2 pins to AF5
    488            *            @arg GPIO_AF_SPI3: Connect SPI3/I2S3 pins to AF6
    489            *            @arg GPIO_AF_USART1: Connect USART1 pins to AF7
    490            *            @arg GPIO_AF_USART2: Connect USART2 pins to AF7
    491            *            @arg GPIO_AF_USART3: Connect USART3 pins to AF7
    492            *            @arg GPIO_AF_UART4: Connect UART4 pins to AF8
    493            *            @arg GPIO_AF_UART5: Connect UART5 pins to AF8
    494            *            @arg GPIO_AF_USART6: Connect USART6 pins to AF8
    495            *            @arg GPIO_AF_CAN1: Connect CAN1 pins to AF9
    496            *            @arg GPIO_AF_CAN2: Connect CAN2 pins to AF9
    497            *            @arg GPIO_AF_TIM12: Connect TIM12 pins to AF9
    498            *            @arg GPIO_AF_TIM13: Connect TIM13 pins to AF9
    499            *            @arg GPIO_AF_TIM14: Connect TIM14 pins to AF9
    500            *            @arg GPIO_AF_OTG_FS: Connect OTG_FS pins to AF10
    501            *            @arg GPIO_AF_OTG_HS: Connect OTG_HS pins to AF10
    502            *            @arg GPIO_AF_ETH: Connect ETHERNET pins to AF11
    503            *            @arg GPIO_AF_FSMC: Connect FSMC pins to AF12
    504            *            @arg GPIO_AF_OTG_HS_FS: Connect OTG HS (configured in FS) pins to AF12
    505            *            @arg GPIO_AF_SDIO: Connect SDIO pins to AF12
    506            *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
    507            *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
    508            * @retval None
    509            */
    510          void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
    511          {
    512            uint32_t temp = 0x00;
    513            uint32_t temp_2 = 0x00;
    514            
    515            /* Check the parameters */
    516            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    517            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    518            assert_param(IS_GPIO_AF(GPIO_AF));
    519            
    520            temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
    521            GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
    522            temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
    523            GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
    524          }
    525          
    526          /**
    527            * @}
    528            */ 
    529          
    530          /**
    531            * @}
    532            */
    533          
    534          /**
    535            * @}
    536            */ 
    537          
    538          /**
    539            * @}
    540            */ 
    541          
    542          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GPIO_DeInit
         8   -> RCC_AHB1PeriphResetCmd
      20   GPIO_Init
      20   GPIO_PinAFConfig
       4   GPIO_PinLockConfig
       0   GPIO_ReadInputData
       4   GPIO_ReadInputDataBit
       0   GPIO_ReadOutputData
       4   GPIO_ReadOutputDataBit
       0   GPIO_ResetBits
       0   GPIO_SetBits
       0   GPIO_StructInit
       0   GPIO_ToggleBits
       0   GPIO_Write
       0   GPIO_WriteBit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
     224  GPIO_DeInit
     202  GPIO_Init
      98  GPIO_PinAFConfig
      48  GPIO_PinLockConfig
       6  GPIO_ReadInputData
      28  GPIO_ReadInputDataBit
       6  GPIO_ReadOutputData
      28  GPIO_ReadOutputDataBit
       4  GPIO_ResetBits
       4  GPIO_SetBits
      24  GPIO_StructInit
      12  GPIO_ToggleBits
       8  GPIO_Write
      16  GPIO_WriteBit

 
 744 bytes in section .text
 
 744 bytes of CODE memory

Errors: none
Warnings: none
