###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         30/May/2020  18:12:42
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\SPL\src\stm32f10x_gpio.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW74E8.tmp
#        (D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\SPL\src\stm32f10x_gpio.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D STM32F10X_LD -D USEUSB -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\freertos\source\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\freertos\source\port\ARM_CM3\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\SPL\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\stm_usb_fs_lib\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\usb\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List\stm32f10x_gpio.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj\stm32f10x_gpio.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\SPL\src\stm32f10x_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_gpio.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the GPIO firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_gpio.h"
     24          #include "stm32f10x_rcc.h"
     25          #include "stm32f10x_conf.h"
     26          
     27          /** @addtogroup STM32F10x_StdPeriph_Driver
     28            * @{
     29            */
     30          
     31          /** @defgroup GPIO 
     32            * @brief GPIO driver modules
     33            * @{
     34            */ 
     35          
     36          /** @defgroup GPIO_Private_TypesDefinitions
     37            * @{
     38            */
     39          
     40          /**
     41            * @}
     42            */
     43          
     44          /** @defgroup GPIO_Private_Defines
     45            * @{
     46            */
     47          
     48          /* ------------ RCC registers bit address in the alias region ----------------*/
     49          #define AFIO_OFFSET                 (AFIO_BASE - PERIPH_BASE)
     50          
     51          /* --- EVENTCR Register -----*/
     52          
     53          /* Alias word address of EVOE bit */
     54          #define EVCR_OFFSET                 (AFIO_OFFSET + 0x00)
     55          #define EVOE_BitNumber              ((uint8_t)0x07)
     56          #define EVCR_EVOE_BB                (PERIPH_BB_BASE + (EVCR_OFFSET * 32) + (EVOE_BitNumber * 4))
     57          
     58          
     59          /* ---  MAPR Register ---*/ 
     60          /* Alias word address of MII_RMII_SEL bit */ 
     61          #define MAPR_OFFSET                 (AFIO_OFFSET + 0x04) 
     62          #define MII_RMII_SEL_BitNumber      ((u8)0x17) 
     63          #define MAPR_MII_RMII_SEL_BB        (PERIPH_BB_BASE + (MAPR_OFFSET * 32) + (MII_RMII_SEL_BitNumber * 4))
     64          
     65          
     66          #define EVCR_PORTPINCONFIG_MASK     ((uint16_t)0xFF80)
     67          #define LSB_MASK                    ((uint16_t)0xFFFF)
     68          #define DBGAFR_POSITION_MASK        ((uint32_t)0x000F0000)
     69          #define DBGAFR_SWJCFG_MASK          ((uint32_t)0xF0FFFFFF)
     70          #define DBGAFR_LOCATION_MASK        ((uint32_t)0x00200000)
     71          #define DBGAFR_NUMBITS_MASK         ((uint32_t)0x00100000)
     72          /**
     73            * @}
     74            */
     75          
     76          /** @defgroup GPIO_Private_Macros
     77            * @{
     78            */
     79          
     80          /**
     81            * @}
     82            */
     83          
     84          /** @defgroup GPIO_Private_Variables
     85            * @{
     86            */
     87          
     88          /**
     89            * @}
     90            */
     91          
     92          /** @defgroup GPIO_Private_FunctionPrototypes
     93            * @{
     94            */
     95          
     96          /**
     97            * @}
     98            */
     99          
    100          /** @defgroup GPIO_Private_Functions
    101            * @{
    102            */
    103          
    104          /**
    105            * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
    106            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    107            * @retval None
    108            */
    109          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
    110          {
    111            /* Check the parameters */
    112            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    113            
    114            if (GPIOx == GPIOA)
    115            {
    116              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    117              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    118            }
    119            else if (GPIOx == GPIOB)
    120            {
    121              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    122              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    123            }
    124            else if (GPIOx == GPIOC)
    125            {
    126              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    127              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    128            }
    129            else if (GPIOx == GPIOD)
    130            {
    131              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    132              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    133            }    
    134            else if (GPIOx == GPIOE)
    135            {
    136              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    137              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    138            } 
    139            else if (GPIOx == GPIOF)
    140            {
    141              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    142              RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    143            }
    144            else
    145            {
    146              if (GPIOx == GPIOG)
    147              {
    148                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    149                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    150              }
    151            }
    152          }
    153          
    154          /**
    155            * @brief  Deinitializes the Alternate Functions (remap, event control
    156            *   and EXTI configuration) registers to their default reset values.
    157            * @param  None
    158            * @retval None
    159            */
    160          void GPIO_AFIODeInit(void)
    161          {
    162            RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    163            RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    164          }
    165          
    166          /**
    167            * @brief  Initializes the GPIOx peripheral according to the specified
    168            *         parameters in the GPIO_InitStruct.
    169            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    170            * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
    171            *         contains the configuration information for the specified GPIO peripheral.
    172            * @retval None
    173            */
    174          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
    175          {
    176            uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    177            uint32_t tmpreg = 0x00, pinmask = 0x00;
    178            /* Check the parameters */
    179            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    180            assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
    181            assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
    182            
    183          /*---------------------------- GPIO Mode Configuration -----------------------*/
    184            currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    185            if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    186            { 
    187              /* Check the parameters */
    188              assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    189              /* Output mode */
    190              currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    191            }
    192          /*---------------------------- GPIO CRL Configuration ------------------------*/
    193            /* Configure the eight low port pins */
    194            if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    195            {
    196              tmpreg = GPIOx->CRL;
    197              for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    198              {
    199                pos = ((uint32_t)0x01) << pinpos;
    200                /* Get the port pins position */
    201                currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    202                if (currentpin == pos)
    203                {
    204                  pos = pinpos << 2;
    205                  /* Clear the corresponding low control register bits */
    206                  pinmask = ((uint32_t)0x0F) << pos;
    207                  tmpreg &= ~pinmask;
    208                  /* Write the mode configuration in the corresponding bits */
    209                  tmpreg |= (currentmode << pos);
    210                  /* Reset the corresponding ODR bit */
    211                  if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    212                  {
    213                    GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    214                  }
    215                  else
    216                  {
    217                    /* Set the corresponding ODR bit */
    218                    if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    219                    {
    220                      GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    221                    }
    222                  }
    223                }
    224              }
    225              GPIOx->CRL = tmpreg;
    226            }
    227          /*---------------------------- GPIO CRH Configuration ------------------------*/
    228            /* Configure the eight high port pins */
    229            if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    230            {
    231              tmpreg = GPIOx->CRH;
    232              for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    233              {
    234                pos = (((uint32_t)0x01) << (pinpos + 0x08));
    235                /* Get the port pins position */
    236                currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    237                if (currentpin == pos)
    238                {
    239                  pos = pinpos << 2;
    240                  /* Clear the corresponding high control register bits */
    241                  pinmask = ((uint32_t)0x0F) << pos;
    242                  tmpreg &= ~pinmask;
    243                  /* Write the mode configuration in the corresponding bits */
    244                  tmpreg |= (currentmode << pos);
    245                  /* Reset the corresponding ODR bit */
    246                  if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    247                  {
    248                    GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    249                  }
    250                  /* Set the corresponding ODR bit */
    251                  if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    252                  {
    253                    GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    254                  }
    255                }
    256              }
    257              GPIOx->CRH = tmpreg;
    258            }
    259          }
    260          
    261          /**
    262            * @brief  Fills each GPIO_InitStruct member with its default value.
    263            * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
    264            *         be initialized.
    265            * @retval None
    266            */
    267          void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
    268          {
    269            /* Reset GPIO init structure parameters values */
    270            GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    271            GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    272            GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    273          }
    274          
    275          /**
    276            * @brief  Reads the specified input port pin.
    277            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    278            * @param  GPIO_Pin:  specifies the port bit to read.
    279            *   This parameter can be GPIO_Pin_x where x can be (0..15).
    280            * @retval The input port pin value.
    281            */
    282          uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    283          {
    284            uint8_t bitstatus = 0x00;
    285            
    286            /* Check the parameters */
    287            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    288            assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
    289            
    290            if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    291            {
    292              bitstatus = (uint8_t)Bit_SET;
    293            }
    294            else
    295            {
    296              bitstatus = (uint8_t)Bit_RESET;
    297            }
    298            return bitstatus;
    299          }
    300          
    301          /**
    302            * @brief  Reads the specified GPIO input data port.
    303            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    304            * @retval GPIO input data port value.
    305            */
    306          uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
    307          {
    308            /* Check the parameters */
    309            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    310            
    311            return ((uint16_t)GPIOx->IDR);
    312          }
    313          
    314          /**
    315            * @brief  Reads the specified output data port bit.
    316            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    317            * @param  GPIO_Pin:  specifies the port bit to read.
    318            *   This parameter can be GPIO_Pin_x where x can be (0..15).
    319            * @retval The output port pin value.
    320            */
    321          uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    322          {
    323            uint8_t bitstatus = 0x00;
    324            /* Check the parameters */
    325            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    326            assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
    327            
    328            if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    329            {
    330              bitstatus = (uint8_t)Bit_SET;
    331            }
    332            else
    333            {
    334              bitstatus = (uint8_t)Bit_RESET;
    335            }
    336            return bitstatus;
    337          }
    338          
    339          /**
    340            * @brief  Reads the specified GPIO output data port.
    341            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    342            * @retval GPIO output data port value.
    343            */
    344          uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
    345          {
    346            /* Check the parameters */
    347            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    348              
    349            return ((uint16_t)GPIOx->ODR);
    350          }
    351          
    352          /**
    353            * @brief  Sets the selected data port bits.
    354            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    355            * @param  GPIO_Pin: specifies the port bits to be written.
    356            *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    357            * @retval None
    358            */
    359          void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    360          {
    361            /* Check the parameters */
    362            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    363            assert_param(IS_GPIO_PIN(GPIO_Pin));
    364            
    365            GPIOx->BSRR = GPIO_Pin;
    366          }
    367          
    368          /**
    369            * @brief  Clears the selected data port bits.
    370            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    371            * @param  GPIO_Pin: specifies the port bits to be written.
    372            *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    373            * @retval None
    374            */
    375          void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    376          {
    377            /* Check the parameters */
    378            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    379            assert_param(IS_GPIO_PIN(GPIO_Pin));
    380            
    381            GPIOx->BRR = GPIO_Pin;
    382          }
    383          
    384          /**
    385            * @brief  Sets or clears the selected data port bit.
    386            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    387            * @param  GPIO_Pin: specifies the port bit to be written.
    388            *   This parameter can be one of GPIO_Pin_x where x can be (0..15).
    389            * @param  BitVal: specifies the value to be written to the selected bit.
    390            *   This parameter can be one of the BitAction enum values:
    391            *     @arg Bit_RESET: to clear the port pin
    392            *     @arg Bit_SET: to set the port pin
    393            * @retval None
    394            */
    395          void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
    396          {
    397            /* Check the parameters */
    398            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    399            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    400            assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
    401            
    402            if (BitVal != Bit_RESET)
    403            {
    404              GPIOx->BSRR = GPIO_Pin;
    405            }
    406            else
    407            {
    408              GPIOx->BRR = GPIO_Pin;
    409            }
    410          }
    411          
    412          /**
    413            * @brief  Writes data to the specified GPIO data port.
    414            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    415            * @param  PortVal: specifies the value to be written to the port output data register.
    416            * @retval None
    417            */
    418          void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
    419          {
    420            /* Check the parameters */
    421            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    422            
    423            GPIOx->ODR = PortVal;
    424          }
    425          
    426          /**
    427            * @brief  Locks GPIO Pins configuration registers.
    428            * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
    429            * @param  GPIO_Pin: specifies the port bit to be written.
    430            *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    431            * @retval None
    432            */
    433          void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    434          {
    435            uint32_t tmp = 0x00010000;
    436            
    437            /* Check the parameters */
    438            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    439            assert_param(IS_GPIO_PIN(GPIO_Pin));
    440            
    441            tmp |= GPIO_Pin;
    442            /* Set LCKK bit */
    443            GPIOx->LCKR = tmp;
    444            /* Reset LCKK bit */
    445            GPIOx->LCKR =  GPIO_Pin;
    446            /* Set LCKK bit */
    447            GPIOx->LCKR = tmp;
    448            /* Read LCKK bit*/
    449            tmp = GPIOx->LCKR;
    450            /* Read LCKK bit*/
    451            tmp = GPIOx->LCKR;
    452          }
    453          
    454          /**
    455            * @brief  Selects the GPIO pin used as Event output.
    456            * @param  GPIO_PortSource: selects the GPIO port to be used as source
    457            *   for Event output.
    458            *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..E).
    459            * @param  GPIO_PinSource: specifies the pin for the Event output.
    460            *   This parameter can be GPIO_PinSourcex where x can be (0..15).
    461            * @retval None
    462            */
    463          void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
    464          {
    465            uint32_t tmpreg = 0x00;
    466            /* Check the parameters */
    467            assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
    468            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    469              
    470            tmpreg = AFIO->EVCR;
    471            /* Clear the PORT[6:4] and PIN[3:0] bits */
    472            tmpreg &= EVCR_PORTPINCONFIG_MASK;
    473            tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    474            tmpreg |= GPIO_PinSource;
    475            AFIO->EVCR = tmpreg;
    476          }
    477          
    478          /**
    479            * @brief  Enables or disables the Event Output.
    480            * @param  NewState: new state of the Event output.
    481            *   This parameter can be: ENABLE or DISABLE.
    482            * @retval None
    483            */
    484          void GPIO_EventOutputCmd(FunctionalState NewState)
    485          {
    486            /* Check the parameters */
    487            assert_param(IS_FUNCTIONAL_STATE(NewState));
    488            
    489            *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    490          }
    491          
    492          /**
    493            * @brief  Changes the mapping of the specified pin.
    494            * @param  GPIO_Remap: selects the pin to remap.
    495            *   This parameter can be one of the following values:
    496            *     @arg GPIO_Remap_SPI1             : SPI1 Alternate Function mapping
    497            *     @arg GPIO_Remap_I2C1             : I2C1 Alternate Function mapping
    498            *     @arg GPIO_Remap_USART1           : USART1 Alternate Function mapping
    499            *     @arg GPIO_Remap_USART2           : USART2 Alternate Function mapping
    500            *     @arg GPIO_PartialRemap_USART3    : USART3 Partial Alternate Function mapping
    501            *     @arg GPIO_FullRemap_USART3       : USART3 Full Alternate Function mapping
    502            *     @arg GPIO_PartialRemap_TIM1      : TIM1 Partial Alternate Function mapping
    503            *     @arg GPIO_FullRemap_TIM1         : TIM1 Full Alternate Function mapping
    504            *     @arg GPIO_PartialRemap1_TIM2     : TIM2 Partial1 Alternate Function mapping
    505            *     @arg GPIO_PartialRemap2_TIM2     : TIM2 Partial2 Alternate Function mapping
    506            *     @arg GPIO_FullRemap_TIM2         : TIM2 Full Alternate Function mapping
    507            *     @arg GPIO_PartialRemap_TIM3      : TIM3 Partial Alternate Function mapping
    508            *     @arg GPIO_FullRemap_TIM3         : TIM3 Full Alternate Function mapping
    509            *     @arg GPIO_Remap_TIM4             : TIM4 Alternate Function mapping
    510            *     @arg GPIO_Remap1_CAN1            : CAN1 Alternate Function mapping
    511            *     @arg GPIO_Remap2_CAN1            : CAN1 Alternate Function mapping
    512            *     @arg GPIO_Remap_PD01             : PD01 Alternate Function mapping
    513            *     @arg GPIO_Remap_TIM5CH4_LSI      : LSI connected to TIM5 Channel4 input capture for calibration
    514            *     @arg GPIO_Remap_ADC1_ETRGINJ     : ADC1 External Trigger Injected Conversion remapping
    515            *     @arg GPIO_Remap_ADC1_ETRGREG     : ADC1 External Trigger Regular Conversion remapping
    516            *     @arg GPIO_Remap_ADC2_ETRGINJ     : ADC2 External Trigger Injected Conversion remapping
    517            *     @arg GPIO_Remap_ADC2_ETRGREG     : ADC2 External Trigger Regular Conversion remapping
    518            *     @arg GPIO_Remap_ETH              : Ethernet remapping (only for Connectivity line devices)
    519            *     @arg GPIO_Remap_CAN2             : CAN2 remapping (only for Connectivity line devices)
    520            *     @arg GPIO_Remap_SWJ_NoJTRST      : Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST
    521            *     @arg GPIO_Remap_SWJ_JTAGDisable  : JTAG-DP Disabled and SW-DP Enabled
    522            *     @arg GPIO_Remap_SWJ_Disable      : Full SWJ Disabled (JTAG-DP + SW-DP)
    523            *     @arg GPIO_Remap_SPI3             : SPI3/I2S3 Alternate Function mapping (only for Connectivity line devices)
    524            *                                        When the SPI3/I2S3 is remapped using this function, the SWJ is configured
    525            *                                        to Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST.   
    526            *     @arg GPIO_Remap_TIM2ITR1_PTP_SOF : Ethernet PTP output or USB OTG SOF (Start of Frame) connected
    527            *                                        to TIM2 Internal Trigger 1 for calibration (only for Connectivity line devices)
    528            *                                        If the GPIO_Remap_TIM2ITR1_PTP_SOF is enabled the TIM2 ITR1 is connected to 
    529            *                                        Ethernet PTP output. When Reset TIM2 ITR1 is connected to USB OTG SOF output.    
    530            *     @arg GPIO_Remap_PTP_PPS          : Ethernet MAC PPS_PTS output on PB05 (only for Connectivity line devices)
    531            *     @arg GPIO_Remap_TIM15            : TIM15 Alternate Function mapping (only for Value line devices)
    532            *     @arg GPIO_Remap_TIM16            : TIM16 Alternate Function mapping (only for Value line devices)
    533            *     @arg GPIO_Remap_TIM17            : TIM17 Alternate Function mapping (only for Value line devices)
    534            *     @arg GPIO_Remap_CEC              : CEC Alternate Function mapping (only for Value line devices)
    535            *     @arg GPIO_Remap_TIM1_DMA         : TIM1 DMA requests mapping (only for Value line devices)
    536            *     @arg GPIO_Remap_TIM9             : TIM9 Alternate Function mapping (only for XL-density devices)
    537            *     @arg GPIO_Remap_TIM10            : TIM10 Alternate Function mapping (only for XL-density devices)
    538            *     @arg GPIO_Remap_TIM11            : TIM11 Alternate Function mapping (only for XL-density devices)
    539            *     @arg GPIO_Remap_TIM13            : TIM13 Alternate Function mapping (only for High density Value line and XL-density devices)
    540            *     @arg GPIO_Remap_TIM14            : TIM14 Alternate Function mapping (only for High density Value line and XL-density devices)
    541            *     @arg GPIO_Remap_FSMC_NADV        : FSMC_NADV Alternate Function mapping (only for High density Value line and XL-density devices)
    542            *     @arg GPIO_Remap_TIM67_DAC_DMA    : TIM6/TIM7 and DAC DMA requests remapping (only for High density Value line devices)
    543            *     @arg GPIO_Remap_TIM12            : TIM12 Alternate Function mapping (only for High density Value line devices)
    544            *     @arg GPIO_Remap_MISC             : Miscellaneous Remap (DMA2 Channel5 Position and DAC Trigger remapping, 
    545            *                                        only for High density Value line devices)     
    546            * @param  NewState: new state of the port pin remapping.
    547            *   This parameter can be: ENABLE or DISABLE.
    548            * @retval None
    549            */
    550          void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
    551          {
    552            uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    553          
    554            /* Check the parameters */
    555            assert_param(IS_GPIO_REMAP(GPIO_Remap));
    556            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    557            
    558            if((GPIO_Remap & 0x80000000) == 0x80000000)
    559            {
    560              tmpreg = AFIO->MAPR2;
    561            }
    562            else
    563            {
    564              tmpreg = AFIO->MAPR;
    565            }
    566          
    567            tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    568            tmp = GPIO_Remap & LSB_MASK;
    569          
    570            if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    571            {
    572              tmpreg &= DBGAFR_SWJCFG_MASK;
    573              AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    574            }
    575            else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    576            {
    577              tmp1 = ((uint32_t)0x03) << tmpmask;
    578              tmpreg &= ~tmp1;
    579              tmpreg |= ~DBGAFR_SWJCFG_MASK;
    580            }
    581            else
    582            {
    583              tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    584              tmpreg |= ~DBGAFR_SWJCFG_MASK;
    585            }
    586          
    587            if (NewState != DISABLE)
    588            {
    589              tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    590            }
    591          
    592            if((GPIO_Remap & 0x80000000) == 0x80000000)
    593            {
    594              AFIO->MAPR2 = tmpreg;
    595            }
    596            else
    597            {
    598              AFIO->MAPR = tmpreg;
    599            }  
    600          }
    601          
    602          /**
    603            * @brief  Selects the GPIO pin used as EXTI Line.
    604            * @param  GPIO_PortSource: selects the GPIO port to be used as source for EXTI lines.
    605            *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).
    606            * @param  GPIO_PinSource: specifies the EXTI line to be configured.
    607            *   This parameter can be GPIO_PinSourcex where x can be (0..15).
    608            * @retval None
    609            */
    610          void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
    611          {
    612            uint32_t tmp = 0x00;
    613            /* Check the parameters */
    614            assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
    615            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    616            
    617            tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    618            AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    619            AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    620          }
    621          
    622          /**
    623            * @brief  Selects the Ethernet media interface.
    624            * @note   This function applies only to STM32 Connectivity line devices.  
    625            * @param  GPIO_ETH_MediaInterface: specifies the Media Interface mode.
    626            *   This parameter can be one of the following values:
    627            *     @arg GPIO_ETH_MediaInterface_MII: MII mode
    628            *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
    629            * @retval None
    630            */
    631          void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
    632          { 
    633            assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
    634          
    635            /* Configure MII_RMII selection bit */ 
    636            *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    637          }
    638            
    639          /**
    640            * @}
    641            */
    642          
    643          /**
    644            * @}
    645            */
    646          
    647          /**
    648            * @}
    649            */
    650          
    651          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GPIO_AFIODeInit
         8   -> RCC_APB2PeriphResetCmd
       8   GPIO_DeInit
         8   -> RCC_APB2PeriphResetCmd
       0   GPIO_ETH_MediaInterfaceConfig
      16   GPIO_EXTILineConfig
       0   GPIO_EventOutputCmd
       8   GPIO_EventOutputConfig
      20   GPIO_Init
       4   GPIO_PinLockConfig
      16   GPIO_PinRemapConfig
       0   GPIO_ReadInputData
       4   GPIO_ReadInputDataBit
       0   GPIO_ReadOutputData
       4   GPIO_ReadOutputDataBit
       0   GPIO_ResetBits
       0   GPIO_SetBits
       0   GPIO_StructInit
       0   GPIO_Write
       0   GPIO_WriteBit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      20  GPIO_AFIODeInit
     180  GPIO_DeInit
       6  GPIO_ETH_MediaInterfaceConfig
      82  GPIO_EXTILineConfig
      10  GPIO_EventOutputCmd
      34  GPIO_EventOutputConfig
     234  GPIO_Init
      30  GPIO_PinLockConfig
     132  GPIO_PinRemapConfig
       6  GPIO_ReadInputData
      28  GPIO_ReadInputDataBit
       6  GPIO_ReadOutputData
      28  GPIO_ReadOutputDataBit
       8  GPIO_ResetBits
       8  GPIO_SetBits
      16  GPIO_StructInit
       8  GPIO_Write
      24  GPIO_WriteBit

 
 912 bytes in section .text
 
 912 bytes of CODE memory

Errors: none
Warnings: none
