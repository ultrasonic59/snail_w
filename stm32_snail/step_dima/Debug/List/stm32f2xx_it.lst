###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         20/Jun/2020  14:38:25
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\common\startup\stm32f2xx_it.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW1390.tmp
#        (D:\proj\velograph\snail\stm32_snail\common\startup\stm32f2xx_it.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\dbg\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List\stm32f2xx_it.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj\stm32f2xx_it.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\common\startup\stm32f2xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_it.c
      4            * @author  MCD Application Team
      5            * @version V1.0.2
      6            * @date    06-June-2011
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stdio.h"
     26          #include "stm32f2xx_it.h"
     27          ///#include "mxchipWNET.h"
     28          
     29          extern void vPortSVCHandler(void);
     30          extern void xPortPendSVHandler(void);
     31          extern void xPortSysTickHandler(void);
     32          ////extern void gpio_irq(void);
     33          ////extern void dma_irq(void);
     34          ////extern void usart2_rx_dma_irq(void);
     35          ///extern void usart2_tx_dma_irq(void);
     36          extern void usart1_irq(void);
     37          extern void usart2_irq(void);
     38          ///extern void sdio_irq(void);
     39          ///extern void usart6_rx_dma_irq(void);
     40          ///extern void usart1_rx_dma_irq(void);
     41          ///extern void usart6_tx_dma_irq(void);
     42          ///extern void usart1_tx_dma_irq(void);
     43          ///extern void usart6_irq();
     44          
     45          
     46          /******************************************************************************/
     47          /*            Cortex-M3 Processor Exceptions Handlers                         */
     48          /******************************************************************************/
     49          
     50          
     51          /**
     52            * @brief   This function handles NMI exception.
     53            * @param  None
     54            * @retval None
     55            */
     56          void NMI_Handler(void)
     57          {
     58            /* Go to infinite loop when Memory Manage exception occurs */
     59            while (1)
     60            {
     61            }
     62          }
     63          
     64          
     65          void hard_fault_handler_c (unsigned int * hardfault_args)
     66          {
     67          #if 1
     68            volatile unsigned int stacked_r0;
     69            volatile unsigned int stacked_r1;
     70            volatile unsigned int stacked_r2;
     71            volatile unsigned int stacked_r3;
     72            volatile unsigned int stacked_r12;
     73            volatile unsigned int stacked_lr;
     74            volatile unsigned int stacked_pc;
     75            volatile unsigned int stacked_psr;
     76           
     77            stacked_r0 = ((unsigned long) hardfault_args[0]);
     78            stacked_r1 = ((unsigned long) hardfault_args[1]);
     79            stacked_r2 = ((unsigned long) hardfault_args[2]);
     80            stacked_r3 = ((unsigned long) hardfault_args[3]);
     81           
     82            stacked_r12 = ((unsigned long) hardfault_args[4]);
     83            stacked_lr = ((unsigned long) hardfault_args[5]);
     84            stacked_pc = ((unsigned long) hardfault_args[6]);
     85            stacked_psr = ((unsigned long) hardfault_args[7]);
     86          #endif
     87           while (1);
     88          #if 0
     89            printf ("\r\n\r\n[Hard fault handler - all numbers in hex]\r\n");
     90            printf ("R0 = %x\r\n", stacked_r0);
     91            printf ("R1 = %x\r\n", stacked_r1);
     92            printf ("R2 = %x\r\n", stacked_r2);
     93            printf ("R3 = %x\r\n", stacked_r3);
     94            printf ("R12 = %x\r\n", stacked_r12);
     95            printf ("LR [R14] = %x  subroutine call return address\r\n", stacked_lr);
     96            printf ("PC [R15] = %x  program counter\r\n", stacked_pc);
     97            printf ("PSR = %x\r\n", stacked_psr);
     98            printf ("BFAR = %x\r\n", (*((volatile unsigned long *)(0xE000ED38))));
     99            printf ("CFSR = %x\r\n", (*((volatile unsigned long *)(0xE000ED28))));
    100            printf ("HFSR = %x\r\n", (*((volatile unsigned long *)(0xE000ED2C))));
    101            printf ("DFSR = %x\r\n", (*((volatile unsigned long *)(0xE000ED30))));
    102            printf ("AFSR = %x\r\n", (*((volatile unsigned long *)(0xE000ED3C))));
    103            printf ("SCB_SHCSR = %x\r\n", SCB->SHCSR);
    104           
    105            while (1);
    106          #endif
    107          }
    108          #if 1
    109          void __HardFault_Handler(void)
    110          {
    111          	/* Go to infinite loop when Hard Fault exception occurs */
    112          	while (1)
    113          	{
    114          	}
    115          }
    116          #endif
    117          /**
    118            * @brief  This function handles Memory Manage exception.
    119            * @param  None
    120            * @retval None
    121            */
    122          void MemManage_Handler(void)
    123          {
    124            /* Go to infinite loop when Memory Manage exception occurs */
    125            while (1)
    126            {
    127            }
    128          }
    129          
    130          /**
    131            * @brief  This function handles Bus Fault exception.
    132            * @param  None
    133            * @retval None
    134            */
    135          void BusFault_Handler(void)
    136          {
    137            /* Go to infinite loop when Bus Fault exception occurs */
    138            while (1)
    139            {
    140            }
    141          }
    142          
    143          /**
    144            * @brief  This function handles Usage Fault exception.
    145            * @param  None
    146            * @retval None
    147            */
    148          void UsageFault_Handler(void)
    149          {
    150            /* Go to infinite loop when Usage Fault exception occurs */
    151            while (1)
    152            {
    153            }
    154          }
    155          
    156          /**
    157            * @brief  This function handles SVCall exception.
    158            * @param  None
    159            * @retval None
    160            */
    161          
    162          void SVC_Handler(void) 
    163          {
    164            vPortSVCHandler();
    165          }
    166          
    167          /**
    168            * @brief  This function handles Debug Monitor exception.
    169            * @param  None
    170            * @retval None
    171            */
    172          void DebugMon_Handler(void)
    173          {
    174          }
    175          
    176          /**
    177            * @brief  This function handles PendSVC exception.
    178            * @param  None
    179            * @retval None
    180            */
    181          void PendSV_Handler(void)
    182          {
    183            xPortPendSVHandler();
    184          }
    185          extern void user_tick_hnd(void);
    186          /**
    187            * @brief  This function handles SysTick Handler.
    188            * @param  None
    189            * @retval None
    190            */
    191          void SysTick_Handler(void) 
    192          {
    193            xPortSysTickHandler();
    194            
    195          }
    196          
    197          /******************************************************************************/
    198          /*                 STM32F2xx Peripherals Interrupt Handlers                   */
    199          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    200          /*  available peripheral interrupt handler's name please refer to the startup */
    201          /*  file (startup_stm32f2xx.s).                                            */
    202          /******************************************************************************/
    203          
    204          /**
    205            * @brief  This function handles PPP interrupt request.
    206            * @param  None
    207            * @retval None
    208            */
    209          /*void PPP_IRQHandler(void)
    210          {
    211          }*/
    212           /*******************************************************************************
    213          * Function Name  : SDIO_IRQHandler
    214          * Description    : This function handles SDIO global interrupt request.
    215          * Input          : None
    216          * Output         : None
    217          * Return         : None
    218          *******************************************************************************/
    219          void SDIO_IRQHandler(void)
    220          {
    221            /* Process All SDIO Interrupt Sources */
    222           ///// sdio_irq();
    223          }
    224          ////extern void sdio_dma_irq(void);
    225          void DMA2_Stream3_IRQHandler(void)
    226          {
    227          ////sdio_dma_irq();
    228          }
    229          void USART1_IRQHandler(void)
    230          {  
    231          ////usart1_irq();
    232          }
    233          extern void usart1_tx_dma_irq(void);
    234          void DMA2_Stream7_IRQHandler(void)
    235          { 
    236          //// usart1_tx_dma_irq();
    237          }
    238          //// extern void usart1_rx_dma_irq(void);
    239          void DMA2_Stream2_IRQHandler(void)
    240          { 
    241          //// usart1_rx_dma_irq();
    242          }
    243          ////=============================
    244          #if 0
    245          /*Bluretooth UART API */
    246          void DMA2_Stream1_IRQHandler(void)
    247          { 
    248          ////  usart6_rx_dma_irq();
    249          }
    250          
    251          void DMA2_Stream6_IRQHandler(void)
    252          {
    253           //// usart6_tx_dma_irq();
    254          }
    255          
    256          void USART6_IRQHandler(void)
    257          {  
    258           ////   usart6_irq();
    259          }
    260          #endif
    261          ////=============================
    262          
    263          /*EXTI ISR*/
    264          void EXTI0_IRQHandler(void)
    265          {
    266          ////gpio_irq();//SDIO OOB interrupt
    267          }
    268          
    269          void EXTI1_IRQHandler(void)
    270          {
    271          ////    gpio_irq();
    272          }
    273          
    274          void EXTI2_IRQHandler(void)
    275          {
    276           ////   gpio_irq();
    277          }
    278          
    279          void EXTI3_IRQHandler(void)
    280          {
    281           ////   gpio_irq();//User defined external interrupt, EMW3162 button 1: PA3
    282          }
    283          
    284          void EXTI4_IRQHandler(void)
    285          {
    286          ////    gpio_irq();
    287          }
    288          
    289          void EXTI9_5_IRQHandler(void)
    290          {
    291          ////    gpio_irq(); //User defined external interrupt, EMW3161 button 1: PH9
    292          }
    293          
    294          void EXTI15_10_IRQHandler(void)
    295          {
    296          ////    gpio_irq();
    297          }
    298          ///==================================================
    299          ////#include "usb_core.h"
    300          #include "FreeRTOS.h"
    301          #include "task.h"
    302          #include "queue.h"
    303          
    304          ////extern USB_OTG_CORE_HANDLE           USB_OTG_dev;
    305          ////extern uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev);
    306          /////extern void my_USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev);
    307          #ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED 
    308          extern uint32_t USBD_OTG_EP1IN_ISR_Handler (USB_OTG_CORE_HANDLE *pdev);
    309          extern uint32_t USBD_OTG_EP1OUT_ISR_Handler (USB_OTG_CORE_HANDLE *pdev);
    310          #endif
    311          extern xQueueHandle q_usb_in;
    312          ////USB_OTG_CORE_HANDLE           *pUSB_OTG_dev;
    313          /**
    314          * @brief  This function handles OTG_HS Handler.
    315          * @param  None
    316          * @retval None
    317          */
    318          #ifdef USE_USB_OTG_HS  
    319          void OTG_HS_IRQHandler(void)
    320          #else
    321          void OTG_FS_IRQHandler(void)
    322          #endif
    323          {
    324          /// my_USBD_OTG_ISR_Handler (&USB_OTG_dev);
    325          #if 0  
    326          ///signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    327          ///pUSB_OTG_dev=&USB_OTG_dev;
    328          ////xQueueSendFromISR(q_usb_in, &pUSB_OTG_dev, &xHigherPriorityTaskWoken);
    329          my_USBD_OTG_ISR_Handler (&USB_OTG_dev);
    330          #endif  
    331          }
    332          
    333          #ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED 
    334          /**
    335          * @brief  This function handles EP1_IN Handler.
    336          * @param  None
    337          * @retval None
    338          */
    339          void OTG_HS_EP1_IN_IRQHandler(void)
    340          {
    341            USBD_OTG_EP1IN_ISR_Handler (&USB_OTG_dev);
    342          }
    343          
    344          /**
    345          * @brief  This function handles EP1_OUT Handler.
    346          * @param  None
    347          * @retval None
    348          */
    349          void OTG_HS_EP1_OUT_IRQHandler(void)
    350          {
    351            USBD_OTG_EP1OUT_ISR_Handler (&USB_OTG_dev);
    352          }
    353          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DMA2_Stream2_IRQHandler
       0   DMA2_Stream3_IRQHandler
       0   DMA2_Stream7_IRQHandler
       0   DebugMon_Handler
       0   EXTI0_IRQHandler
       0   EXTI15_10_IRQHandler
       0   EXTI1_IRQHandler
       0   EXTI2_IRQHandler
       0   EXTI3_IRQHandler
       0   EXTI4_IRQHandler
       0   EXTI9_5_IRQHandler
       0   MemManage_Handler
       0   NMI_Handler
       0   OTG_FS_IRQHandler
       8   PendSV_Handler
         8   -> xPortPendSVHandler
       0   SDIO_IRQHandler
       8   SVC_Handler
         8   -> vPortSVCHandler
       8   SysTick_Handler
         8   -> xPortSysTickHandler
       0   USART1_IRQHandler
       0   UsageFault_Handler
       0   __HardFault_Handler
      32   hard_fault_handler_c


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  BusFault_Handler
       2  DMA2_Stream2_IRQHandler
       2  DMA2_Stream3_IRQHandler
       2  DMA2_Stream7_IRQHandler
       2  DebugMon_Handler
       2  EXTI0_IRQHandler
       2  EXTI15_10_IRQHandler
       2  EXTI1_IRQHandler
       2  EXTI2_IRQHandler
       2  EXTI3_IRQHandler
       2  EXTI4_IRQHandler
       2  EXTI9_5_IRQHandler
       2  MemManage_Handler
       2  NMI_Handler
       2  OTG_FS_IRQHandler
       8  PendSV_Handler
       2  SDIO_IRQHandler
       8  SVC_Handler
       8  SysTick_Handler
       2  USART1_IRQHandler
       2  UsageFault_Handler
       2  __HardFault_Handler
      36  hard_fault_handler_c

 
 98 bytes in section .text
 
 98 bytes of CODE memory

Errors: none
Warnings: none
