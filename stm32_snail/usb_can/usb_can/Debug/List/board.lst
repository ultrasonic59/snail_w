###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         20/Jun/2020  14:38:25
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\board.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW1108.tmp
#        (D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\board.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_rtos\..\common\dbg\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\List\board.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_rtos\Debug\Obj\board.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\mstep_rtos\src\board\board.c
      1          #include "FreeRTOS.h"
      2          #include "queue.h"
      3          #include "semphr.h"
      4          ///#include "stm32f2xx_gpio.h"
      5          ///#include "stm32f2xx_rcc.h"
      6          
      7          #include "board.h"
      8          #include "printk.h"
      9          
     10          
     11          ///=============================
     12          int sendchar2 (int c) 
     13          { 
     14          while (!(USART2->SR & 0x0080));
     15          USART2->DR = (c & 0x1FF);
     16          return (c);
     17          }
     18          
     19          int get_byte2 (void) 
     20          {
     21          while (!(USART2->SR & 0x0020));
     22          return (USART2->DR);
     23          }
     24          
     25          void _putk(char ch)
     26          {
     27          //sendchar_hdlc(ch);
     28          sendchar2(ch);
     29          }
     30          
     31          void init_gpio(void)
     32          {
     33          ////RCC_AHBPeriphClockCmd(XEN_PIN_RCC_AHB,ENABLE);
     34          GPIO_InitTypeDef GPIO_InitStructure;
     35          ////=============== TST1 ============================
     36          RCC_AHB1PeriphClockCmd(TST1_PIN_RCC, ENABLE);
     37          GPIO_InitStructure.GPIO_Pin = TST1_PIN;
     38          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     39          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     40          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     41          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     42          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     43          GPIO_Init( TST1_PIN_GPIO, &GPIO_InitStructure );
     44          GPIO_SetBits(TST1_PIN_GPIO, TST1_PIN);
     45          ////=============== TST2 ============================
     46          RCC_AHB1PeriphClockCmd(TST2_PIN_RCC, ENABLE);
     47          GPIO_InitStructure.GPIO_Pin = TST2_PIN;
     48          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     49          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     50          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     51          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     52          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     53          GPIO_Init( TST2_PIN_GPIO, &GPIO_InitStructure );
     54          ////=============== TST3 ============================
     55          RCC_AHB1PeriphClockCmd(TST3_PIN_RCC, ENABLE);
     56          GPIO_InitStructure.GPIO_Pin = TST3_PIN;
     57          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     58          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     59          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     60          
     61          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     62          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     63          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     64          GPIO_Init( TST3_PIN_GPIO, &GPIO_InitStructure );
     65          GPIO_PinAFConfig(TST3_PIN_GPIO, TST3_PIN_NPIN, GPIO_AF_TIM1);
     66          
     67          ////=============== TST7 ============================
     68          RCC_AHB1PeriphClockCmd(TST7_PIN_RCC, ENABLE);
     69          GPIO_InitStructure.GPIO_Pin = TST7_PIN;
     70          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     71          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     72          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     73          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     74          GPIO_Init( TST7_PIN_GPIO, &GPIO_InitStructure );
     75          GPIO_PinAFConfig(TST7_PIN_GPIO, TST7_PIN_NPIN, GPIO_AF_TIM8);
     76            
     77          ////=========== DBG_UART =================================================== 
     78          RCC_AHB1PeriphClockCmd(UART_DBG_TX_RCC, ENABLE);
     79          GPIO_InitStructure.GPIO_Pin = UART_DBG_TX_PIN;
     80          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     81          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     82          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     83          GPIO_Init( UART_DBG_TX_GPIO, &GPIO_InitStructure );
     84          
     85          RCC_AHB1PeriphClockCmd(UART_DBG_RX_RCC, ENABLE);
     86          GPIO_InitStructure.GPIO_Pin = UART_DBG_RX_PIN;
     87          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     88          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     89          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     90          GPIO_Init( UART_DBG_RX_GPIO, &GPIO_InitStructure );
     91            
     92          GPIO_PinAFConfig(UART_DBG_TX_GPIO_PORT, UART_DBG_TX_PIN_NPIN, UART_DBG_TX_AF);
     93          GPIO_PinAFConfig(UART_DBG_RX_GPIO_PORT, UART_DBG_RX_PIN_NPIN, UART_DBG_RX_AF);
     94          ////===================================================================
     95          ////=============== MOT_FAULT ============================
     96          RCC_AHB1PeriphClockCmd(MOT_FAULT_PIN_RCC, ENABLE);
     97          GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
     98          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     99          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    100          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    101          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    102          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    103          GPIO_Init( MOT_FAULT_PIN_GPIO, &GPIO_InitStructure );
    104          ////=============== MOT_CONC ============================
    105          RCC_AHB1PeriphClockCmd(CONC_PIN_RCC, ENABLE);
    106          GPIO_InitStructure.GPIO_Pin = CONC_PIN;
    107          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    108          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    109          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    110          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    111          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    112          GPIO_Init( CONC_PIN_GPIO, &GPIO_InitStructure );
    113          
    114          ////=============== MOT_M2 ============================
    115          RCC_AHB1PeriphClockCmd(MOT_M2_PIN_RCC, ENABLE);
    116          GPIO_InitStructure.GPIO_Pin = MOT_M2_PIN;
    117          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    118          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    119          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    120          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    121          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    122          GPIO_Init( MOT_M2_PIN_GPIO, &GPIO_InitStructure );
    123          ////=============== MOT_M1 ============================
    124          RCC_AHB1PeriphClockCmd(MOT_M1_PIN_RCC, ENABLE);
    125          GPIO_InitStructure.GPIO_Pin = MOT_M1_PIN;
    126          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    127          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    128          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    129          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    130          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    131          GPIO_Init( MOT_M1_PIN_GPIO, &GPIO_InitStructure );
    132          ////=============== MOT_M0 ============================
    133          RCC_AHB1PeriphClockCmd(MOT_M0_PIN_RCC, ENABLE);
    134          GPIO_InitStructure.GPIO_Pin = MOT_M0_PIN;
    135          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    136          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    137          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    138          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    139          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    140          GPIO_Init( MOT_M0_PIN_GPIO, &GPIO_InitStructure );
    141          ////=============== MOT_ENA ============================
    142          RCC_AHB1PeriphClockCmd(MOT_ENA_PIN_RCC, ENABLE);
    143          GPIO_InitStructure.GPIO_Pin = MOT_ENA_PIN;
    144          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    145          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    146          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    147          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    148          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    149          GPIO_Init( MOT_ENA_PIN_GPIO, &GPIO_InitStructure );
    150          ////=============== MOT_RESET ============================
    151          RCC_AHB1PeriphClockCmd(MOT_RESET_PIN_RCC, ENABLE);
    152          GPIO_InitStructure.GPIO_Pin = MOT_RESET_PIN;
    153          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    154          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    155          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    156          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    157          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    158          GPIO_Init( MOT_RESET_PIN_GPIO, &GPIO_InitStructure );
    159          ////=============== MOT_SLEEP ============================
    160          RCC_AHB1PeriphClockCmd(MOT_SLEEP_PIN_RCC, ENABLE);
    161          GPIO_InitStructure.GPIO_Pin = MOT_SLEEP_PIN;
    162          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    163          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    164          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    165          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    166          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    167          GPIO_Init( MOT_SLEEP_PIN_GPIO, &GPIO_InitStructure );
    168          ////#define MOT_STEP_TIM  	        TIM12
    169          ////=============== MOT_STEP ============================
    170          RCC_AHB1PeriphClockCmd(MOT_STEP_PIN_RCC, ENABLE);
    171          GPIO_InitStructure.GPIO_Pin = MOT_STEP_PIN;
    172          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    173          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    174          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    175          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    176          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    177          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    178          GPIO_Init( MOT_STEP_PIN_GPIO, &GPIO_InitStructure );
    179          GPIO_PinAFConfig(MOT_STEP_PIN_GPIO, MOT_STEP_PIN_NPIN, GPIO_AF_TIM1);
    180          ////===================================================================
    181          
    182          ////=============== MOT_DIR ============================
    183          RCC_AHB1PeriphClockCmd(MOT_DIR_PIN_RCC, ENABLE);
    184          GPIO_InitStructure.GPIO_Pin = MOT_DIR_PIN;
    185          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    186          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    187          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    188          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    189          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    190          GPIO_Init( MOT_DIR_PIN_GPIO, &GPIO_InitStructure );
    191          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    192          
    193          ////============== LED_PWM ============================
    194          RCC_AHB1PeriphClockCmd(LED_PWM_PIN_RCC, ENABLE);
    195          GPIO_InitStructure.GPIO_Pin = LED_PWM_PIN;
    196          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    197          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    198          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    199          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    200          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    201          GPIO_Init( LED_PWM_PIN_GPIO, &GPIO_InitStructure );
    202          GPIO_PinAFConfig(LED_PWM_PIN_GPIO, LED_PWM_PIN_NPIN, GPIO_AF_TIM8);
    203          ////=============== ON_LED0 ============================
    204          RCC_AHB1PeriphClockCmd(ON_LED0_PIN_RCC, ENABLE);
    205          GPIO_InitStructure.GPIO_Pin = ON_LED0_PIN;
    206          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    207          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    208          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    209          GPIO_Init( ON_LED0_PIN_GPIO, &GPIO_InitStructure );
    210          ////=============== ON_LED1 ============================
    211          RCC_AHB1PeriphClockCmd(ON_LED1_PIN_RCC, ENABLE);
    212          GPIO_InitStructure.GPIO_Pin = ON_LED1_PIN;
    213          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    214          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    215          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    216          GPIO_Init( ON_LED1_PIN_GPIO, &GPIO_InitStructure );
    217          
    218          }
    219          #if 0
    220          ////============== LED_PWM ============================
    221          ////=============== CONC ============================
    222          #define CONC_PIN	    GPIO_Pin_7
    223          #define CONC_PIN_NPIN	    7
    224          #define CONC_PIN_GPIO	    GPIOC
    225          #define CONC_PIN_RCC  	    RCC_AHB1Periph_GPIOC
    226          ////=============== UART_RX1 ============================
    227          #define UART_RX1_PIN	    	    GPIO_Pin_7
    228          #define UART_RX1_PIN_NPIN	    7
    229          #define UART_RX1_PIN_GPIO	    GPIOB
    230          #define UART_RX1_PIN_RCC  	    RCC_AHB1Periph_GPIOB
    231          ////=============== UART_TX1 ============================
    232          #define UART_TX1_PIN	    	    GPIO_Pin_6
    233          #define UART_TX1_PIN_NPIN	    6
    234          #define UART_TX1_PIN_GPIO	    GPIOB
    235          #define UART_TX1_PIN_RCC  	    RCC_AHB1Periph_GPIOB
    236          ////============== CAN1_RX ============================
    237          #define CAN1_RX_PIN	    	GPIO_Pin_8
    238          #define CAN1_RX_PIN_NPIN	8
    239          #define CAN1_RX_PIN_GPIO	GPIOB
    240          #define CAN1_RX_PIN_RCC  	RCC_AHB1Periph_GPIOB
    241          ////============== CAN1_TX ============================
    242          #define CAN1_TX_PIN	    	GPIO_Pin_9
    243          #define CAN1_TX_PIN_NPIN	9
    244          #define CAN1_TX_PIN_GPIO	GPIOB
    245          #define CAN1_TX_PIN_RCC  	RCC_AHB1Periph_GPIOB
    246          ////============== CAN1_INH ============================
    247          #define CAN1_INH_PIN	    	GPIO_Pin_0
    248          #define CAN1_INH_PIN_NPIN	    0
    249          #define CAN1_INH_PIN_GPIO	    GPIOC
    250          #define CAN1_INH_PIN_RCC  	RCC_AHB1Periph_GPIOC
    251          ////================= USB ======================
    252          #define USB_DP_PIN	    	GPIO_Pin_12
    253          #define USB_DP_PIN_NPIN	    12
    254          #define USB_DP_PIN_GPIO	    GPIOA
    255          #define USB_DP_PIN_RCC  RCC_APB2Periph_GPIOA
    256          
    257          #define USB_DM_PIN	    	GPIO_Pin_11
    258          #define USB_DM_PIN_NPIN	    11
    259          #define USB_DM_PIN_GPIO	    GPIOA
    260          #define USB_DM_PIN_RCC  RCC_APB2Periph_GPIOA
    261          
    262          #endif
    263          
    264          ////=============================================
    265          void UART_DBG_Init(void)
    266          {
    267          ////GPIO_InitTypeDef GPIO_InitStructure;
    268          USART_InitTypeDef USART_InitStructure;
    269          UART_DBG_CLK_INIT(UART_DBG_CLK, ENABLE);
    270          USART_DeInit(UART_DBG);
    271          USART_InitStructure.USART_BaudRate = 115200;
    272          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    273          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    274          USART_InitStructure.USART_Parity = USART_Parity_No;
    275          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    276          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    277          USART_Init(UART_DBG, &USART_InitStructure);
    278          UART_DBG->CR1 |= USART_CR1_RXNEIE;
    279          USART_Cmd(UART_DBG, ENABLE);
    280          }
    281          
    282          ////==================================================
    283          ////==================================================
    284          void  set_m0(uint8_t idat)
    285          {
    286          if(idat&0x1)
    287            {
    288            GPIO_SetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    289            }
    290          else
    291            {
    292             GPIO_ResetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    293            }
    294          }
    295          
    296          void  set_sleep_mot(uint8_t idat)
    297          {
    298          if(idat&0x1)
    299            {
    300            GPIO_SetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    301            }
    302          else
    303            {
    304             GPIO_ResetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    305            }
    306          }
    307          void  set_ena_mot(uint8_t idat)
    308          {
    309          if(idat&0x1)
    310            {
    311            GPIO_SetBits(MOT_ENA_PIN_GPIO, MOT_ENA_PIN);
    312            }
    313          else
    314            {
    315             GPIO_ResetBits(MOT_ENA_PIN_GPIO, MOT_ENA_PIN);
    316            }
    317          }
    318          void  set_dir_mot(uint8_t idat)
    319          {
    320          if(idat&0x1)
    321            {
    322            GPIO_SetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    323            }
    324          else
    325            {
    326             GPIO_ResetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    327            }
    328          }
    329          void  set_reset_mot(uint8_t idat)
    330          {
    331          if(idat&0x1)
    332            {
    333            GPIO_SetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    334            }
    335          else
    336            {
    337             GPIO_ResetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    338            }
    339          }
    340          
    341          void  on_led0(uint8_t idat)
    342          {
    343          if(idat&0x1)
    344            {
    345            GPIO_SetBits(ON_LED0_PIN_GPIO, ON_LED0_PIN);
    346            }
    347          else
    348            {
    349             GPIO_ResetBits(ON_LED0_PIN_GPIO, ON_LED0_PIN);
    350            }
    351          }
    352          ////==================================================
    353          void  on_led1(uint8_t idat)
    354          {
    355          if(idat&0x1)
    356            {
    357            GPIO_SetBits(ON_LED1_PIN_GPIO, ON_LED1_PIN);
    358            }
    359          else
    360            {
    361             GPIO_ResetBits(ON_LED1_PIN_GPIO, ON_LED1_PIN);
    362            }
    363          }
    364          
    365          ////==================================================
    366          
    367          void set_led_dutycycle (uint32_t val)
    368          {
    369          if (val > LED_PWM_TIM_PERIOD)
    370            {
    371            val = LED_PWM_TIM_PERIOD;
    372            }
    373          LED_PWM_TIM->CCR3 = val;
    374          }
    375          
    376          void led_tim_en (u32 on_off)
    377          {
    378          if (on_off & 0x01)
    379            {
    380            TIM_Cmd(LED_PWM_TIM, ENABLE);
    381            }
    382          else
    383            {
    384            TIM_Cmd(LED_PWM_TIM, DISABLE);
    385            TIM_SetCounter(LED_PWM_TIM, 0);
    386            }
    387          }
    388          
    389          ////=======================================================
    390          void led_tim_init(void)
    391          {
    392          RCC->APB2ENR |= LED_PWM_TIM_RCC;
    393          LED_PWM_TIM->PSC = LED_PWM_TIM_PRESC;
    394          ////LED_PWM_TIM->ARR = 1000;
    395          LED_PWM_TIM->ARR = LED_PWM_TIM_PERIOD;////(uint16_t) (((SystemCoreClock / APB2_pres) * 2) / TIM_LED_FREQ) - 1;
    396          LED_PWM_TIM->CCR3 = LED_PWM_TIM_PERIOD/2;////30;
    397          LED_PWM_TIM->CCER |= TIM_CCER_CC3NE;////| TIM_CCER_CC3NP;
    398          LED_PWM_TIM->BDTR |= TIM_BDTR_MOE;
    399          LED_PWM_TIM->CCMR2 = TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; 
    400          LED_PWM_TIM->CR1 &= ~TIM_CR1_DIR;
    401          LED_PWM_TIM->CR1 &= ~TIM_CR1_CMS;
    402          LED_PWM_TIM->CR1 |= TIM_CR1_CEN;
    403          }
    404          
    405          volatile uint32_t num_step=0;
    406          
    407          
    408          void mot_tim_init(void)
    409          {
    410          NVIC_InitTypeDef NVIC_InitStructure; 
    411          
    412          RCC->APB2ENR |= MOT_STEP_TIM_RCC;
    413          MOT_STEP_TIM ->PSC = MOT_TIM_PRESC;
    414          ////LED_PWM_TIM->ARR = 1000;
    415          MOT_STEP_TIM ->ARR = MOT_TIM_PERIOD;////
    416          MOT_STEP_TIM ->CCR2 = MOT_TIM_PERIOD/2;////30;
    417          MOT_STEP_TIM->CCER |= TIM_CCER_CC2NE;////| TIM_CCER_CC3NP;
    418          MOT_STEP_TIM->BDTR |= TIM_BDTR_MOE;
    419          MOT_STEP_TIM->CCMR1 = TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1; 
    420          MOT_STEP_TIM->CR1 &= ~TIM_CR1_DIR;
    421          MOT_STEP_TIM->CR1 &= ~TIM_CR1_CMS;
    422          MOT_STEP_TIM->CR1 |= TIM_CR1_CEN;
    423          MOT_STEP_TIM ->DIER = TIM_DIER_CC2IE|TIM_DIER_COMIE;
    424          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_COM);
    425          	// Enable interrupt, motor commutation has high piority and has
    426          	// a higher subpriority then the hall sensor
    427          
    428          NVIC_InitStructure.NVIC_IRQChannel = MOT_TIM_IRQN;
    429          	// highest priority
    430          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
    431          
    432          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    433          	// highest priority
    434          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    435          NVIC_Init(&NVIC_InitStructure);
    436          TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC2, ENABLE);
    437          
    438          
    439          }
    440          void stop_mot_step_tim(void)
    441          {
    442          TIM_Cmd(MOT_STEP_TIM, DISABLE);
    443          }
    444          
    445          void put_mot_nstep(uint32_t nstep)
    446          {
    447           num_step=nstep; 
    448          TIM_Cmd(MOT_STEP_TIM, ENABLE);
    449          }
    450          volatile uint32_t gsr;
    451          ////=======================================================
    452          void MOT_STEP_TIM_IRQHandler(void)
    453          { 
    454          if(num_step)
    455            {
    456            num_step--;  
    457            if(num_step==0)
    458              {
    459              stop_mot_step_tim(); 
    460              }
    461            }
    462          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC2);
    463          }
    464          
    465          void set_mot_rej(uint8_t rej)
    466          {
    467          if(rej&0x1)
    468            {
    469            GPIO_SetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    470            }
    471          else
    472            {
    473             GPIO_ResetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    474            }
    475          if(rej&0x2)
    476            {
    477            GPIO_SetBits(MOT_M1_PIN_GPIO, MOT_M1_PIN);
    478            }
    479          else
    480            {
    481             GPIO_ResetBits(MOT_M1_PIN_GPIO, MOT_M1_PIN);
    482            }
    483          if(rej&0x4)
    484            {
    485            GPIO_SetBits(MOT_M2_PIN_GPIO, MOT_M2_PIN);
    486            }
    487          else
    488            {
    489             GPIO_ResetBits(MOT_M2_PIN_GPIO, MOT_M2_PIN);
    490            }
    491          }
    492          uint8_t get_conc(void)
    493          {
    494          return GPIO_ReadInputDataBit(CONC_PIN_GPIO, CONC_PIN);
    495          }
    496          ////=============================================
    497          void hw_board_init(void)
    498          {
    499          init_gpio();
    500          UART_DBG_Init(); 
    501          
    502          led_tim_init();
    503          mot_tim_init();
    504          }
    505          ////============================================
    506          
    507          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM1_CC_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> stop_mot_step_tim
      24   UART_DBG_Init
        24   -> RCC_APB1PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_Init
       8   _putk
         8   -> sendchar2
       0   get_byte2
       8   get_conc
         8   -> GPIO_ReadInputDataBit
       8   hw_board_init
         8   -> UART_DBG_Init
         8   -> init_gpio
         8   -> led_tim_init
         8   -> mot_tim_init
      24   init_gpio
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> GPIO_SetBits
        24   -> RCC_AHB1PeriphClockCmd
      16   led_tim_en
        16   -> TIM_Cmd
        16   -> TIM_SetCounter
       0   led_tim_init
      16   mot_tim_init
        16   -> NVIC_Init
        16   -> TIM_ClearITPendingBit
        16   -> TIM_ITConfig
       8   on_led0
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   on_led1
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   put_mot_nstep
         8   -> TIM_Cmd
       0   sendchar2
       8   set_dir_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_ena_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       0   set_led_dutycycle
       8   set_m0
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_mot_rej
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_reset_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_sleep_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   stop_mot_step_tim
         8   -> TIM_Cmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
      36  TIM1_CC_IRQHandler
      84  UART_DBG_Init
      14  _putk
      20  get_byte2
      12  get_conc
       4  gsr
      20  hw_board_init
     810  init_gpio
      38  led_tim_en
      90  led_tim_init
     148  mot_tim_init
       4  num_step
      28  on_led0
      28  on_led1
      18  put_mot_nstep
      24  sendchar2
      28  set_dir_mot
      32  set_ena_mot
      20  set_led_dutycycle
      32  set_m0
      76  set_mot_rej
      32  set_reset_mot
      32  set_sleep_mot
      12  stop_mot_step_tim

 
     8 bytes in section .bss
 1'726 bytes in section .text
 
 1'726 bytes of CODE memory
     8 bytes of DATA memory

Errors: none
Warnings: none
