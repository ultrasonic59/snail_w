###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         28/Nov/2020  18:25:32
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\mstep_board.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW31FE.tmp
#        (D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\mstep_board.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\dbg\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\List\mstep_board.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\Obj\mstep_board.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\mstep_board.c
      1          #include "FreeRTOS.h"
      2          #include "queue.h"
      3          #include "semphr.h"
      4          ///#include "stm32f2xx_gpio.h"
      5          ///#include "stm32f2xx_rcc.h"
      6          
      7          #include "mstep_board.h"
      8          #include "printk.h"
      9          ///=============================
     10          int sendchar2 (int c) 
     11          { 
     12          while (!(USART2->SR & 0x0080));
     13          USART2->DR = (c & 0x1FF);
     14          return (c);
     15          }
     16          
     17          int get_byte2 (void) 
     18          {
     19          while (!(USART2->SR & 0x0020));
     20          return (USART2->DR);
     21          }
     22          
     23          void _putk(char ch)
     24          {
     25          //sendchar_hdlc(ch);
     26          sendchar2(ch);
     27          }
     28          
     29          void init_gpio(void)
     30          {
     31          ////RCC_AHBPeriphClockCmd(XEN_PIN_RCC_AHB,ENABLE);
     32          GPIO_InitTypeDef GPIO_InitStructure;
     33          ////=============== TST1 ============================
     34          RCC_AHB1PeriphClockCmd(TST1_PIN_RCC, ENABLE);
     35          GPIO_InitStructure.GPIO_Pin = TST1_PIN;
     36          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     37          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     38          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     39          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     40          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     41          GPIO_Init( TST1_PIN_GPIO, &GPIO_InitStructure );
     42          GPIO_SetBits(TST1_PIN_GPIO, TST1_PIN);
     43          ////=============== TST2 ============================
     44          RCC_AHB1PeriphClockCmd(TST2_PIN_RCC, ENABLE);
     45          GPIO_InitStructure.GPIO_Pin = TST2_PIN;
     46          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     47          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     48          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     49          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     50          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     51          GPIO_Init( TST2_PIN_GPIO, &GPIO_InitStructure );
     52          ////=============== TST3 ============================
     53          RCC_AHB1PeriphClockCmd(TST3_PIN_RCC, ENABLE);
     54          GPIO_InitStructure.GPIO_Pin = TST3_PIN;
     55          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     56          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     57          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     58          
     59          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     60          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     61          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     62          GPIO_Init( TST3_PIN_GPIO, &GPIO_InitStructure );
     63          GPIO_PinAFConfig(TST3_PIN_GPIO, TST3_PIN_NPIN, GPIO_AF_TIM1);
     64          
     65          ////=============== TST7 ============================
     66          RCC_AHB1PeriphClockCmd(TST7_PIN_RCC, ENABLE);
     67          GPIO_InitStructure.GPIO_Pin = TST7_PIN;
     68          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     69          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     70          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     71          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     72          GPIO_Init( TST7_PIN_GPIO, &GPIO_InitStructure );
     73          GPIO_PinAFConfig(TST7_PIN_GPIO, TST7_PIN_NPIN, GPIO_AF_TIM8);
     74            
     75          ////=========== DBG_UART =================================================== 
     76          RCC_AHB1PeriphClockCmd(UART_DBG_TX_RCC, ENABLE);
     77          GPIO_InitStructure.GPIO_Pin = UART_DBG_TX_PIN;
     78          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     79          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     80          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     81          GPIO_Init( UART_DBG_TX_GPIO, &GPIO_InitStructure );
     82          
     83          RCC_AHB1PeriphClockCmd(UART_DBG_RX_RCC, ENABLE);
     84          GPIO_InitStructure.GPIO_Pin = UART_DBG_RX_PIN;
     85          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     86          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     87          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     88          GPIO_Init( UART_DBG_RX_GPIO, &GPIO_InitStructure );
     89            
     90          GPIO_PinAFConfig(UART_DBG_TX_GPIO_PORT, UART_DBG_TX_PIN_NPIN, UART_DBG_TX_AF);
     91          GPIO_PinAFConfig(UART_DBG_RX_GPIO_PORT, UART_DBG_RX_PIN_NPIN, UART_DBG_RX_AF);
     92          ////===================================================================
     93          ////=============== MOT_FAULT ============================
     94          RCC_AHB1PeriphClockCmd(MOT_FAULT_PIN_RCC, ENABLE);
     95          GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
     96          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     97          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
     98          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     99          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    100          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    101          GPIO_Init( MOT_FAULT_PIN_GPIO, &GPIO_InitStructure );
    102          ////=============== MOT_CONC ============================
    103          RCC_AHB1PeriphClockCmd(CONC_PIN_RCC, ENABLE);
    104          GPIO_InitStructure.GPIO_Pin = CONC_PIN;
    105          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    106          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    107          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    108          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    109          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    110          GPIO_Init( CONC_PIN_GPIO, &GPIO_InitStructure );
    111          
    112          ////=============== MOT_M2 ============================
    113          RCC_AHB1PeriphClockCmd(MOT_M2_PIN_RCC, ENABLE);
    114          GPIO_InitStructure.GPIO_Pin = MOT_M2_PIN;
    115          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    116          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    117          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    118          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    119          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    120          GPIO_Init( MOT_M2_PIN_GPIO, &GPIO_InitStructure );
    121          ////=============== MOT_M1 ============================
    122          RCC_AHB1PeriphClockCmd(MOT_M1_PIN_RCC, ENABLE);
    123          GPIO_InitStructure.GPIO_Pin = MOT_M1_PIN;
    124          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    125          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    126          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    127          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    128          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    129          GPIO_Init( MOT_M1_PIN_GPIO, &GPIO_InitStructure );
    130          ////=============== MOT_M0 ============================
    131          RCC_AHB1PeriphClockCmd(MOT_M0_PIN_RCC, ENABLE);
    132          GPIO_InitStructure.GPIO_Pin = MOT_M0_PIN;
    133          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    134          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    135          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    136          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    137          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    138          GPIO_Init( MOT_M0_PIN_GPIO, &GPIO_InitStructure );
    139          ////=============== MOT_ENA ============================
    140          RCC_AHB1PeriphClockCmd(MOT_ENA_PIN_RCC, ENABLE);
    141          GPIO_InitStructure.GPIO_Pin = MOT_ENA_PIN;
    142          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    143          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    144          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    145          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    146          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    147          GPIO_Init( MOT_ENA_PIN_GPIO, &GPIO_InitStructure );
    148          ////=============== MOT_RESET ============================
    149          RCC_AHB1PeriphClockCmd(MOT_RESET_PIN_RCC, ENABLE);
    150          GPIO_InitStructure.GPIO_Pin = MOT_RESET_PIN;
    151          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    152          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    153          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    154          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    155          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    156          GPIO_Init( MOT_RESET_PIN_GPIO, &GPIO_InitStructure );
    157          ////=============== MOT_SLEEP ============================
    158          RCC_AHB1PeriphClockCmd(MOT_SLEEP_PIN_RCC, ENABLE);
    159          GPIO_InitStructure.GPIO_Pin = MOT_SLEEP_PIN;
    160          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    161          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    162          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    163          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    164          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    165          GPIO_Init( MOT_SLEEP_PIN_GPIO, &GPIO_InitStructure );
    166          ////#define MOT_STEP_TIM  	        TIM12
    167          ////=============== MOT_STEP ============================
    168          RCC_AHB1PeriphClockCmd(MOT_STEP_PIN_RCC, ENABLE);
    169          GPIO_InitStructure.GPIO_Pin = MOT_STEP_PIN;
    170          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    171          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    172          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    173          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    174          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    175          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    176          GPIO_Init( MOT_STEP_PIN_GPIO, &GPIO_InitStructure );
    177          GPIO_PinAFConfig(MOT_STEP_PIN_GPIO, MOT_STEP_PIN_NPIN, GPIO_AF_TIM1);
    178          ////===================================================================
    179          
    180          ////=============== MOT_DIR ============================
    181          RCC_AHB1PeriphClockCmd(MOT_DIR_PIN_RCC, ENABLE);
    182          GPIO_InitStructure.GPIO_Pin = MOT_DIR_PIN;
    183          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    184          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    185          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    186          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    187          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    188          GPIO_Init( MOT_DIR_PIN_GPIO, &GPIO_InitStructure );
    189          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    190          
    191          ////============== LED_PWM ============================
    192          RCC_AHB1PeriphClockCmd(LED_PWM_PIN_RCC, ENABLE);
    193          GPIO_InitStructure.GPIO_Pin = LED_PWM_PIN;
    194          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    195          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    196          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    197          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    198          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    199          GPIO_Init( LED_PWM_PIN_GPIO, &GPIO_InitStructure );
    200          GPIO_PinAFConfig(LED_PWM_PIN_GPIO, LED_PWM_PIN_NPIN, GPIO_AF_TIM8);
    201          ////=============== ON_LED0 ============================
    202          RCC_AHB1PeriphClockCmd(ON_LED0_PIN_RCC, ENABLE);
    203          GPIO_InitStructure.GPIO_Pin = ON_LED0_PIN;
    204          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    205          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    206          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    207          GPIO_Init( ON_LED0_PIN_GPIO, &GPIO_InitStructure );
    208          ////=============== ON_LED1 ============================
    209          RCC_AHB1PeriphClockCmd(ON_LED1_PIN_RCC, ENABLE);
    210          GPIO_InitStructure.GPIO_Pin = ON_LED1_PIN;
    211          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    212          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    213          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    214          GPIO_Init( ON_LED1_PIN_GPIO, &GPIO_InitStructure );
    215          
    216          }
    217          
    218          ////=============================================
    219          void UART_DBG_Init(void)
    220          {
    221          ////GPIO_InitTypeDef GPIO_InitStructure;
    222          USART_InitTypeDef USART_InitStructure;
    223          UART_DBG_CLK_INIT(UART_DBG_CLK, ENABLE);
    224          USART_DeInit(UART_DBG);
    225          USART_InitStructure.USART_BaudRate = 115200;
    226          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    227          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    228          USART_InitStructure.USART_Parity = USART_Parity_No;
    229          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    230          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    231          USART_Init(UART_DBG, &USART_InitStructure);
    232          UART_DBG->CR1 |= USART_CR1_RXNEIE;
    233          USART_Cmd(UART_DBG, ENABLE);
    234          }
    235          
    236          ////==================================================
    237          ////==================================================
    238          void  set_m0(uint8_t idat)
    239          {
    240          if(idat&0x1)
    241            {
    242            GPIO_SetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    243            }
    244          else
    245            {
    246             GPIO_ResetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    247            }
    248          }
    249          
    250          void  set_sleep_mot(uint8_t idat)
    251          {
    252          if(idat&0x1)
    253            {
    254            GPIO_SetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    255            }
    256          else
    257            {
    258             GPIO_ResetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    259            }
    260          }
    261          void  set_ena_mot(uint8_t idat)
    262          {
    263          if(idat&0x1)
    264            {
    265            GPIO_SetBits(MOT_ENA_PIN_GPIO, MOT_ENA_PIN);
    266            }
    267          else
    268            {
    269             GPIO_ResetBits(MOT_ENA_PIN_GPIO, MOT_ENA_PIN);
    270            }
    271          }
    272          void  set_dir_mot(uint8_t idat)
    273          {
    274          if(idat&0x1)
    275            {
    276            GPIO_SetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    277            }
    278          else
    279            {
    280             GPIO_ResetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    281            }
    282          }
    283          void  set_reset_mot(uint8_t idat)
    284          {
    285          if(idat&0x1)
    286            {
    287            GPIO_SetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    288            }
    289          else
    290            {
    291             GPIO_ResetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    292            }
    293          }
    294          
    295          void  on_led0(uint8_t idat)
    296          {
    297          if(idat&0x1)
    298            {
    299            GPIO_SetBits(ON_LED0_PIN_GPIO, ON_LED0_PIN);
    300            }
    301          else
    302            {
    303             GPIO_ResetBits(ON_LED0_PIN_GPIO, ON_LED0_PIN);
    304            }
    305          }
    306          ////==================================================
    307          void  on_led1(uint8_t idat)
    308          {
    309          if(idat&0x1)
    310            {
    311            GPIO_SetBits(ON_LED1_PIN_GPIO, ON_LED1_PIN);
    312            }
    313          else
    314            {
    315             GPIO_ResetBits(ON_LED1_PIN_GPIO, ON_LED1_PIN);
    316            }
    317          }
    318          
    319          ////==================================================
    320          
    321          void set_led_dutycycle (uint32_t val)
    322          {
    323          if (val > LED_PWM_TIM_PERIOD)
    324            {
    325            val = LED_PWM_TIM_PERIOD;
    326            }
    327          LED_PWM_TIM->CCR3 = val;
    328          }
    329          
    330          void led_tim_en (u32 on_off)
    331          {
    332          if (on_off & 0x01)
    333            {
    334            TIM_Cmd(LED_PWM_TIM, ENABLE);
    335            }
    336          else
    337            {
    338            TIM_Cmd(LED_PWM_TIM, DISABLE);
    339            TIM_SetCounter(LED_PWM_TIM, 0);
    340            }
    341          }
    342          
    343          ////=======================================================
    344          void led_tim_init(void)
    345          {
    346          RCC->APB2ENR |= LED_PWM_TIM_RCC;
    347          LED_PWM_TIM->PSC = LED_PWM_TIM_PRESC;
    348          ////LED_PWM_TIM->ARR = 1000;
    349          LED_PWM_TIM->ARR = LED_PWM_TIM_PERIOD;////(uint16_t) (((SystemCoreClock / APB2_pres) * 2) / TIM_LED_FREQ) - 1;
    350          LED_PWM_TIM->CCR3 = LED_PWM_TIM_PERIOD/2;////30;
    351          LED_PWM_TIM->CCER |= TIM_CCER_CC3NE;////| TIM_CCER_CC3NP;
    352          LED_PWM_TIM->BDTR |= TIM_BDTR_MOE;
    353          LED_PWM_TIM->CCMR2 = TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1; 
    354          LED_PWM_TIM->CR1 &= ~TIM_CR1_DIR;
    355          LED_PWM_TIM->CR1 &= ~TIM_CR1_CMS;
    356          LED_PWM_TIM->CR1 |= TIM_CR1_CEN;
    357          }
    358          
    359          volatile uint32_t num_step=0;
    360          
    361          
    362          void mot_tim_init(void)
    363          {
    364          NVIC_InitTypeDef NVIC_InitStructure; 
    365          
    366          RCC->APB2ENR |= MOT_STEP_TIM_RCC;
    367          MOT_STEP_TIM ->PSC = MOT_TIM_PRESC;
    368          ////LED_PWM_TIM->ARR = 1000;
    369          MOT_STEP_TIM ->ARR = MOT_TIM_PERIOD;////
    370          MOT_STEP_TIM ->CCR2 = MOT_TIM_PERIOD/2;////30;
    371          MOT_STEP_TIM->CCER |= TIM_CCER_CC2NE;////| TIM_CCER_CC3NP;
    372          MOT_STEP_TIM->BDTR |= TIM_BDTR_MOE;
    373          MOT_STEP_TIM->CCMR1 = TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1; 
    374          MOT_STEP_TIM->CR1 &= ~TIM_CR1_DIR;
    375          MOT_STEP_TIM->CR1 &= ~TIM_CR1_CMS;
    376          MOT_STEP_TIM->CR1 |= TIM_CR1_CEN;
    377          MOT_STEP_TIM ->DIER = TIM_DIER_CC2IE|TIM_DIER_COMIE;
    378          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_COM);
    379          	// Enable interrupt, motor commutation has high piority and has
    380          	// a higher subpriority then the hall sensor
    381          
    382          NVIC_InitStructure.NVIC_IRQChannel = MOT_TIM_IRQN;
    383          	// highest priority
    384          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
    385          
    386          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    387          	// highest priority
    388          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    389          NVIC_Init(&NVIC_InitStructure);
    390          TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC2, ENABLE);
    391          
    392          
    393          }
    394          void stop_mot_step_tim(void)
    395          {
    396          TIM_Cmd(MOT_STEP_TIM, DISABLE);
    397          }
    398          
    399          void put_mot_nstep(uint32_t nstep)
    400          {
    401          num_step=nstep; 
    402          set_ena_mot(0);
    403          TIM_Cmd(MOT_STEP_TIM, ENABLE);
    404          }
    405          volatile uint32_t gsr;
    406          ////=======================================================
    407          void MOT_STEP_TIM_IRQHandler(void)
    408          { 
    409          if(num_step)
    410            {
    411            num_step--;  
    412            if(num_step==0)
    413              {
    414              stop_mot_step_tim(); 
    415              set_ena_mot(1);
    416              }
    417            }
    418          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC2);
    419          }
    420          
    421          void set_mot_rej(uint8_t rej)
    422          {
    423          if(rej&0x1)
    424            {
    425            GPIO_SetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    426            }
    427          else
    428            {
    429             GPIO_ResetBits(MOT_M0_PIN_GPIO, MOT_M0_PIN);
    430            }
    431          if(rej&0x2)
    432            {
    433            GPIO_SetBits(MOT_M1_PIN_GPIO, MOT_M1_PIN);
    434            }
    435          else
    436            {
    437             GPIO_ResetBits(MOT_M1_PIN_GPIO, MOT_M1_PIN);
    438            }
    439          if(rej&0x4)
    440            {
    441            GPIO_SetBits(MOT_M2_PIN_GPIO, MOT_M2_PIN);
    442            }
    443          else
    444            {
    445             GPIO_ResetBits(MOT_M2_PIN_GPIO, MOT_M2_PIN);
    446            }
    447          }
    448          uint8_t get_conc(void)
    449          {
    450          return GPIO_ReadInputDataBit(CONC_PIN_GPIO, CONC_PIN);
    451          }
    452          ////=============================================
    453          void hw_board_init(void)
    454          {
    455          init_gpio();
    456          UART_DBG_Init(); 
    457          
    458          led_tim_init();
    459          mot_tim_init();
    460          }
    461          ////============================================
    462          ////========================================================   
    463          void tst_task( void *pvParameters )
    464          {
    465          ////uint8_t btst=0; 
    466          uint8_t psk=0; 
    467          char key=0;
    468          int nstep=300;
    469          uint8_t dir=0;
    470          uint8_t mot_rej=0;
    471          printk("\n\r tst_task"); 
    472          
    473          set_sleep_mot(1);
    474          set_ena_mot(1);
    475          set_reset_mot(0);
    476          uDelay(1000);
    477          set_reset_mot(1);
    478          ////set_ena_mot(0);
    479          
    480          #if 0       
    481          for(;;)
    482            {
    483          //// sendchar2 (0x33) ; 
    484            put_tst_pin(btst);
    485            btst++;  
    486            ////delay__ms(1);  
    487            uDelay(20000);
    488            }
    489          #endif        
    490           for(;;)
    491            {
    492            key=dbg_get_byte() ;  
    493            switch(key)
    494              {
    495              case 'a':
    496                nstep += 20;
    497                break;
    498              case 's':
    499                if(nstep)
    500                  nstep-= 20;
    501                  break;
    502              case 'd':
    503                dir ++;
    504                dir&=0x1;
    505                break;
    506              case 'm':
    507                mot_rej ++;
    508                mot_rej&=0x7;
    509                break;
    510              case 'p':
    511               psk=1;
    512                break;
    513               
    514             }
    515            printk("\n\r nstep[%d] dir[%x] Mot_rej[%x]",nstep,dir,mot_rej); 
    516            set_dir_mot(dir);
    517            set_mot_rej(mot_rej);
    518            if(psk)
    519              {
    520              put_mot_nstep(nstep);
    521              psk=0;
    522              }
    523          ////  set_led_dutycycle (duty);
    524          
    525            } 
    526          }
    527          ////============================================
    528          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM1_CC_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> set_ena_mot
         8   -> stop_mot_step_tim
      24   UART_DBG_Init
        24   -> RCC_APB1PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_Init
       8   _putk
         8   -> sendchar2
       0   get_byte2
       8   get_conc
         8   -> GPIO_ReadInputDataBit
       8   hw_board_init
         8   -> UART_DBG_Init
         8   -> init_gpio
         8   -> led_tim_init
         8   -> mot_tim_init
      24   init_gpio
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> GPIO_SetBits
        24   -> RCC_AHB1PeriphClockCmd
      16   led_tim_en
        16   -> TIM_Cmd
        16   -> TIM_SetCounter
       0   led_tim_init
      16   mot_tim_init
        16   -> NVIC_Init
        16   -> TIM_ClearITPendingBit
        16   -> TIM_ITConfig
       8   on_led0
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   on_led1
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   put_mot_nstep
         8   -> TIM_Cmd
         8   -> set_ena_mot
       0   sendchar2
       8   set_dir_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_ena_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       0   set_led_dutycycle
       8   set_m0
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_mot_rej
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_reset_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_sleep_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   stop_mot_step_tim
         8   -> TIM_Cmd
      32   tst_task
        32   -> _printk
        32   -> get_byte2
        32   -> put_mot_nstep
        32   -> set_dir_mot
        32   -> set_ena_mot
        32   -> set_mot_rej
        32   -> set_reset_mot
        32   -> set_sleep_mot
        32   -> uDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
      12  ?_0
      36  ?_1
      42  TIM1_CC_IRQHandler
      88  UART_DBG_Init
      14  _putk
      20  get_byte2
      12  get_conc
       4  gsr
      20  hw_board_init
     810  init_gpio
      38  led_tim_en
      90  led_tim_init
     148  mot_tim_init
       4  num_step
      28  on_led0
      28  on_led1
      24  put_mot_nstep
      24  sendchar2
      28  set_dir_mot
      36  set_ena_mot
      20  set_led_dutycycle
      36  set_m0
      76  set_mot_rej
      32  set_reset_mot
      36  set_sleep_mot
      12  stop_mot_step_tim
     180  tst_task

 
     8 bytes in section .bss
    48 bytes in section .rodata
 1'942 bytes in section .text
 
 1'942 bytes of CODE  memory
    48 bytes of CONST memory
     8 bytes of DATA  memory

Errors: none
Warnings: none
