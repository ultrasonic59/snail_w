###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         19/Jun/2021  21:06:13
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\my_grbl\grbl_system.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWF0A9.tmp
#        (D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\my_grbl\grbl_system.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -D
#        USE_USB_OTG_FS -lcN
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\.\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\dbg\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\core\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\drv\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\hdlc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\cdc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\my_grbl\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\List\grbl_system.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\Obj\grbl_system.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\my_grbl\grbl_system.c
      1          #include <stdint.h>
      2          #include "my_grbl.h"
      3          
      4          system_t sys;
      5          int32_t sys_position[N_AXIS];      // Real-time machine (aka home) position vector in steps.
      6          int32_t sys_probe_position[N_AXIS]; // Last probe position in machine coordinates and steps.
      7          volatile uint8_t sys_probe_state;   // Probing state value.  Used to coordinate the probing cycle with stepper ISR.
      8          volatile uint8_t sys_rt_exec_state;   // Global realtime executor bitflag variable for state management. See EXEC bitmasks.
      9          volatile uint8_t sys_rt_exec_alarm;   // Global realtime executor bitflag variable for setting various alarms.
     10          volatile uint8_t sys_rt_exec_motion_override; // Global realtime executor bitflag variable for motion-based overrides.
     11          volatile uint8_t sys_rt_exec_accessory_override; // Global realtime executor bitflag variable for spindle/coolant overrides.
     12          
     13          volatile uint8_t sys_rt_exec_state;   // Global realtime executor bitflag variable for state management. See EXEC bitmasks.
     14          volatile uint8_t sys_rt_exec_motion_override; // Global realtime executor bitflag variable for motion-based overrides.
     15          volatile uint8_t sys_rt_exec_accessory_override; // Global realtime executor bitflag variable for spindle/coolant overrides.
     16          
     17          void system_set_exec_state_flag(uint8_t flag) {
     18          ///  __disable_irq();
     19            sys_rt_exec_state |= (flag);
     20          ///  __enable_irq();
     21          }
     22          void system_set_exec_motion_override_flag(uint8_t mask) {
     23          ////  __disable_irq();
     24            sys_rt_exec_motion_override |= (mask);
     25          ///  __enable_irq();
     26          }
     27          void system_set_exec_accessory_override_flag(uint8_t mask) {
     28          ///  __disable_irq();
     29            sys_rt_exec_accessory_override |= (mask);
     30          ///  __enable_irq();
     31          }
     32          
     33          void system_clear_exec_motion_overrides() {
     34          //// __disable_irq();
     35            sys_rt_exec_motion_override = 0;
     36          ////  __enable_irq();
     37          }
     38          void system_set_exec_alarm(uint8_t code) {
     39          ////  __disable_irq();
     40            sys_rt_exec_alarm |= (code);
     41          ////  __enable_irq();
     42          }
     43          void system_clear_exec_state_flag(uint8_t mask) {
     44          ///  __disable_irq();
     45            sys_rt_exec_state &= ~(mask);
     46          ///  __enable_irq();
     47          }
     48          // Returns if safety door is ajar(T) or closed(F), based on pin state.
     49          uint8_t system_check_safety_door_ajar(void)
     50          {
     51            #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
     52              return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
     53            #else
     54              return(false); // Input pin not enabled, so just return that it's closed.
     55            #endif
     56          }
     57          // Executes user startup script, if stored.
     58          void system_execute_startup(char *line)
     59          {
     60            uint8_t n;
     61            for (n=0; n < N_STARTUP_LINE; n++) {
     62              if (!(settings_read_startup_line(n, line))) {
     63                line[0] = 0;
     64                report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
     65              } else {
     66                if (line[0] != 0) {
     67                  uint8_t status_code = gc_execute_line(line);
     68                  report_execute_startup_message(line,status_code);
     69                }
     70              }
     71            }
     72          }
     73          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   system_check_safety_door_ajar
       0   system_clear_exec_motion_overrides
       0   system_clear_exec_state_flag
      16   system_execute_startup
        16   -> gc_execute_line
        16   -> report_execute_startup_message
        16   -> settings_read_startup_line
       0   system_set_exec_accessory_override_flag
       0   system_set_exec_alarm
       0   system_set_exec_motion_override_flag
       0   system_set_exec_state_flag


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      20  sys
      12  sys_position
      12  sys_probe_position
       1  sys_probe_state
       1  sys_rt_exec_accessory_override
       1  sys_rt_exec_alarm
       1  sys_rt_exec_motion_override
       1  sys_rt_exec_state
       4  system_check_safety_door_ajar
       8  system_clear_exec_motion_overrides
      10  system_clear_exec_state_flag
      72  system_execute_startup
      10  system_set_exec_accessory_override_flag
      10  system_set_exec_alarm
      10  system_set_exec_motion_override_flag
      10  system_set_exec_state_flag

 
  49 bytes in section .bss
 150 bytes in section .text
 
 150 bytes of CODE memory
  49 bytes of DATA memory

Errors: none
Warnings: none
