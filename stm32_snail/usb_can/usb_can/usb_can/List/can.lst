###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         19/Jun/2021  21:06:13
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\can.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWEE74.tmp
#        (D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\can.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -D USE_USB_OTG_FS
#        -lcN D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\.\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\dbg\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\core\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\drv\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\hdlc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\cdc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\my_grbl\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\List\can.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\Obj\can.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\can.c
      1          #include <stdio.h>
      2          #include "FreeRTOS.h"
      3          #include "queue.h"
      4          #include "semphr.h"
      5          #include "stm32f2xx_conf.h"
      6          #include "stm32f2xx_can.h"
      7          #include "mstep_board.h"
      8          #include "can.h"
      9          
     10          #include "printk.h"
     11          ////=====================
     12          CAN_msg       CAN_TxMsg;                  /* CAN messge for sending           */
     13          CAN_msg       CAN_RxMsg;                  /* CAN message for receiving        */                        
     14          
     15          uint8_t  CAN_TxRdy = 0;              /* CAN HW ready to transmit message */
     16          uint8_t  CAN_RxRdy = 0;              /* CAN HW received a message        */
     17          ////=====================
     18          void CAN_setup (void)  
     19          {
     20          unsigned int brp;
     21          
     22            RCC->APB1ENR |= ( 1UL << 25);           /* enable clock for CAN             */
     23            NVIC_EnableIRQ(CAN1_TX_IRQn);    /* enable CAN TX interrupt          */
     24            NVIC_EnableIRQ(CAN1_RX0_IRQn);   /* enable CAN RX interrupt          */
     25          
     26            CAN1->MCR = (CAN_MCR_INRQ   |           /* initialisation request           */
     27                         CAN_MCR_NART    );         /* no automatic retransmission      */
     28                                                    /* only FIFO 0, tx mailbox 0 used!  */
     29            CAN1->IER = (CAN_IER_FMPIE0 |           /* enable FIFO 0 msg pending IRQ    */
     30                         CAN_IER_TMEIE    );        /* enable Transmit mbx empty IRQ    */
     31          
     32          brp = 4;//4;
     33                                                                                    
     34          CAN1->BTR &= ~(((        0x03) << 24) | ((        0x07) << 20) | ((         0x0F) << 16) | (          0x1FF)); 
     35          CAN1->BTR |=  ((((1-1) & 0x03) << 24) | (((8-1) & 0x07) << 20) | (((6-1) & 0x0F) << 16) | ((brp-1) & 0x1FF));
     36          }
     37          void CAN_start (void)  
     38          {
     39          CAN1->MCR &= ~CAN_MCR_INRQ;             /* normal operating mode, reset INRQ*/
     40          while (CAN1->MSR & CAN_MCR_INRQ);
     41          
     42          }
     43          void CAN_testmode (unsigned int testmode) {
     44          
     45            CAN1->BTR &= ~(CAN_BTR_SILM | CAN_BTR_LBKM);     /* set testmode            */
     46            CAN1->BTR |=  (testmode & (CAN_BTR_SILM | CAN_BTR_LBKM));
     47          }
     48          void CAN_waitReady (void)  
     49          {
     50          while ((CAN1->TSR & CAN_TSR_TME0) == 0);  /* Transmit mailbox 0 is empty    */
     51          CAN_TxRdy = 1;
     52           
     53          }
     54          /*----------------------------------------------------------------------------
     55            write a message to CAN peripheral and transmit it
     56           *----------------------------------------------------------------------------*/
     57          void CAN_wrMsg (CAN_msg *msg)  {
     58          
     59            CAN1->sTxMailBox[0].TIR  = 0;           /* Reset TIR register               */
     60                                                    /* Setup identifier information     */
     61            if (msg->format == STANDARD_FORMAT) {   /*    Standard ID                   */
     62              CAN1->sTxMailBox[0].TIR |= (uint32_t)(msg->id << 21) | CAN_ID_STD;
     63            } else {                                /* Extended ID                      */
     64              CAN1->sTxMailBox[0].TIR |= (uint32_t)(msg->id <<  3) | CAN_ID_EXT;
     65            }
     66                                                    /* Setup type information           */
     67            if (msg->type == DATA_FRAME)  {         /* DATA FRAME                       */
     68              CAN1->sTxMailBox[0].TIR |= CAN_RTR_DATA;
     69            } else {                                /* REMOTE FRAME                     */
     70              CAN1->sTxMailBox[0].TIR |= CAN_RTR_REMOTE;
     71            }
     72                                                    /* Setup data bytes                 */
     73            CAN1->sTxMailBox[0].TDLR = (((uint32_t)msg->data[3] << 24) | 
     74                                        ((uint32_t)msg->data[2] << 16) |
     75                                        ((uint32_t)msg->data[1] <<  8) | 
     76                                        ((uint32_t)msg->data[0])        );
     77            CAN1->sTxMailBox[0].TDHR = (((uint32_t)msg->data[7] << 24) | 
     78                                        ((uint32_t)msg->data[6] << 16) |
     79                                        ((uint32_t)msg->data[5] <<  8) |
     80                                        ((uint32_t)msg->data[4])        );
     81                                                    /* Setup length                     */
     82            CAN1->sTxMailBox[0].TDTR &= ~CAN_TDT0R_DLC;
     83            CAN1->sTxMailBox[0].TDTR |=  (msg->len & CAN_TDT0R_DLC);
     84          
     85            CAN1->IER |= CAN_IER_TMEIE;                 /* enable  TME interrupt        */
     86            CAN1->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;  /* transmit message             */
     87          }
     88          
     89          
     90          /*----------------------------------------------------------------------------
     91            read a message from CAN peripheral and release it
     92           *----------------------------------------------------------------------------*/
     93          void CAN_rdMsg (CAN_msg *msg)  {
     94                                                        /* Read identifier information  */
     95            if ((CAN1->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) {
     96              msg->format = STANDARD_FORMAT;
     97              msg->id     = 0x000007FF & (CAN1->sFIFOMailBox[0].RIR >> 21);
     98            } else {
     99              msg->format = EXTENDED_FORMAT;
    100              msg->id     = 0x1FFFFFFF & (CAN1->sFIFOMailBox[0].RIR >> 3);
    101            }
    102                                                        /* Read type information        */
    103            if ((CAN1->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
    104              msg->type =   DATA_FRAME;
    105            } else {
    106              msg->type = REMOTE_FRAME;
    107            }
    108                                                        /* Read number of rec. bytes    */
    109            msg->len     = (CAN1->sFIFOMailBox[0].RDTR      ) & 0x0F;
    110                                                        /* Read data bytes              */
    111            msg->data[0] = (CAN1->sFIFOMailBox[0].RDLR      ) & 0xFF;
    112            msg->data[1] = (CAN1->sFIFOMailBox[0].RDLR >>  8) & 0xFF;
    113            msg->data[2] = (CAN1->sFIFOMailBox[0].RDLR >> 16) & 0xFF;
    114            msg->data[3] = (CAN1->sFIFOMailBox[0].RDLR >> 24) & 0xFF;
    115          
    116            msg->data[4] = (CAN1->sFIFOMailBox[0].RDHR      ) & 0xFF;
    117            msg->data[5] = (CAN1->sFIFOMailBox[0].RDHR >>  8) & 0xFF;
    118            msg->data[6] = (CAN1->sFIFOMailBox[0].RDHR >> 16) & 0xFF;
    119            msg->data[7] = (CAN1->sFIFOMailBox[0].RDHR >> 24) & 0xFF;
    120          
    121            CAN1->RF0R |= CAN_RF0R_RFOM0;             /* Release FIFO 0 output mailbox */
    122          }
    123          
    124          
    125          /*----------------------------------------------------------------------------
    126            CAN write message filter
    127           *----------------------------------------------------------------------------*/
    128          void CAN_wrFilter (unsigned int id, unsigned char format)  {
    129            static unsigned short CAN_filterIdx = 0;
    130                   unsigned int   CAN_msgId     = 0;
    131            
    132            if (CAN_filterIdx > 13) {                 /* check if Filter Memory is full*/
    133              return;
    134            }
    135                                                      /* Setup identifier information  */
    136            if (format == STANDARD_FORMAT)  {         /*   Standard ID                 */
    137                CAN_msgId |= (uint32_t)(id << 21) | CAN_ID_STD;
    138            }  else  {                                /*   Extended ID                 */
    139                CAN_msgId |= (uint32_t)(id <<  3) | CAN_ID_EXT;
    140            }
    141          
    142            CAN1->FMR  |=   CAN_FMR_FINIT;            /* set initMode for filter banks */
    143            CAN1->FA1R &=  ~(1UL << CAN_filterIdx);   /* deactivate filter             */
    144          
    145                                                      /* initialize filter             */
    146            CAN1->FS1R |= (unsigned int)(1 << CAN_filterIdx);     /* set 32-bit scale configuration    */
    147            CAN1->FM1R |= (unsigned int)(1 << CAN_filterIdx);     /* set 2 32-bit identifier list mode */
    148          
    149            CAN1->sFilterRegister[CAN_filterIdx].FR1 = CAN_msgId; /*  32-bit identifier                */
    150            CAN1->sFilterRegister[CAN_filterIdx].FR2 = CAN_msgId; /*  32-bit identifier                */
    151              													   
    152            CAN1->FFA1R &= ~(unsigned int)(1 << CAN_filterIdx);   /* assign filter to FIFO 0           */
    153            CAN1->FA1R  |=  (unsigned int)(1 << CAN_filterIdx);   /* activate filter                   */
    154          
    155            CAN1->FMR &= ~CAN_FMR_FINIT;              /* reset initMode for filterBanks*/
    156          
    157            CAN_filterIdx += 1;                       /* increase filter index         */
    158          }
    159          
    160          
    161          /*----------------------------------------------------------------------------
    162            CAN transmit interrupt handler
    163           *----------------------------------------------------------------------------*/
    164          void CAN1_TX_IRQHandler (void) {
    165          
    166            if (CAN1->TSR & CAN_TSR_RQCP0) {          /* request completed mbx 0        */
    167              CAN1->TSR |= CAN_TSR_RQCP0;             /* reset request complete mbx 0   */
    168              CAN1->IER &= ~CAN_IER_TMEIE;            /* disable  TME interrupt         */
    169          	
    170          	CAN_TxRdy = 1;
    171          //	sendchar2(0x34);
    172            }
    173          }
    174          
    175          /*----------------------------------------------------------------------------
    176            CAN receive interrupt handler
    177           *----------------------------------------------------------------------------*/
    178          #if 0
    179          void CAN1_RX0_IRQHandler (void)
    180          {
    181          u32 *up;
    182          	
    183          if (CAN1->RF0R & CAN_RF0R_FMP0)
    184            {			/* message pending ?              */
    185            CAN_rdMsg (&CAN_RxMsg);                 /* read the message               */
    186          
    187            if (CAN_RxMsg.id == (0x080 + NODE))
    188              {
    189              up = (u32*)CAN_RxMsg.data;
    190          ////    stat_srv_y.fault &= 0xff000000;
    191          ////    stat_srv_y.fault |= ((*up) & 0x00ffffff);
    192          ////    stat_srv_y.flg |= STAT_SRV_FLG_ERR_REQ;
    193              }
    194            else
    195              {
    196              CAN_RxRdy = 1;                          // set receive flag
    197              }
    198            }
    199          }
    200          #else
    201          void CAN1_RX0_IRQHandler (void)
    202          {
    203          if (CAN1->RF0R & CAN_RF0R_FMP0)
    204            {			/* message pending ?              */
    205            CAN_rdMsg (&CAN_RxMsg);                 /* read the message               */
    206            CAN_RxRdy = 1;                          // set receive flag
    207            }
    208          }
    209          
    210          #endif
    211          ////================================================================================
    212          void CAN1_Init (void)
    213          {
    214          CAN_setup ();                                   /* setup CAN Controller     */
    215          
    216          ////CAN_wrFilter (0x580 + NODE, STANDARD_FORMAT);
    217          ////CAN_wrFilter (0x080 + NODE, STANDARD_FORMAT);
    218          ////CAN_wrFilter (0x700 + NODE, STANDARD_FORMAT);
    219          	
    220          CAN_start ();                                   /* start CAN Controller   */
    221          	
    222          CAN_waitReady ();                               /* wait til tx mbx is empty */
    223          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CAN1_Init
         8   -> CAN_setup
         8   -> CAN_start
         8   -> CAN_waitReady
       8   CAN1_RX0_IRQHandler
         8   -> CAN_rdMsg
       0   CAN1_TX_IRQHandler
       0   CAN_rdMsg
       8   CAN_setup
         8   -> __NVIC_EnableIRQ
       0   CAN_start
       0   CAN_testmode
       0   CAN_waitReady
      20   CAN_wrFilter
       4   CAN_wrMsg
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_17
       4  ??DataTable9_18
       4  ??DataTable9_19
       4  ??DataTable9_2
       4  ??DataTable9_20
       4  ??DataTable9_21
       4  ??DataTable9_22
       4  ??DataTable9_23
       4  ??DataTable9_24
       4  ??DataTable9_25
       4  ??DataTable9_26
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      16  CAN1_Init
      26  CAN1_RX0_IRQHandler
      34  CAN1_TX_IRQHandler
      16  CAN_RxMsg
       1  CAN_RxRdy
      16  CAN_TxMsg
       1  CAN_TxRdy
       2  CAN_filterIdx
     116  CAN_rdMsg
      66  CAN_setup
      20  CAN_start
      22  CAN_testmode
      16  CAN_waitReady
     180  CAN_wrFilter
     152  CAN_wrMsg
      30  __NVIC_EnableIRQ

 
  36 bytes in section .bss
 786 bytes in section .text
 
 786 bytes of CODE memory
  36 bytes of DATA memory

Errors: none
Warnings: none
