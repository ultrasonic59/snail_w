###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         19/Jun/2021  21:06:14
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can\common\libraries\STM32F2xx_StdPeriph_Driver\src\misc.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWF1D7.tmp
#        (D:\proj\velograph\snail\stm32_snail\usb_can\common\libraries\STM32F2xx_StdPeriph_Driver\src\misc.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -D
#        USE_USB_OTG_FS -lcN
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\.\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\dbg\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\core\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\drv\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\hdlc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\..\common\usb\cdc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\src\my_grbl\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\List\misc.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can\usb_can\usb_can\Obj\misc.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\usb_can\common\libraries\STM32F2xx_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    07-October-2011
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            *          
     10            *  @verbatim   
     11            *                               
     12            *          ===================================================================      
     13            *                        How to configure Interrupts using driver 
     14            *          ===================================================================      
     15            * 
     16            *            This section provide functions allowing to configure the NVIC interrupts (IRQ).
     17            *            The Cortex-M3 exceptions are managed by CMSIS functions.
     18            *
     19            *            1. Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig()
     20            *                function according to the following table.
     21           
     22            *  The table below gives the allowed values of the pre-emption priority and subpriority according
     23            *  to the Priority Grouping configuration performed by NVIC_PriorityGroupConfig function
     24            *    ==========================================================================================================================
     25            *      NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description
     26            *    ==========================================================================================================================
     27            *     NVIC_PriorityGroup_0  |                0                  |            0-15             | 0 bits for pre-emption priority
     28            *                           |                                   |                             | 4 bits for subpriority
     29            *    --------------------------------------------------------------------------------------------------------------------------
     30            *     NVIC_PriorityGroup_1  |                0-1                |            0-7              | 1 bits for pre-emption priority
     31            *                           |                                   |                             | 3 bits for subpriority
     32            *    --------------------------------------------------------------------------------------------------------------------------    
     33            *     NVIC_PriorityGroup_2  |                0-3                |            0-3              | 2 bits for pre-emption priority
     34            *                           |                                   |                             | 2 bits for subpriority
     35            *    --------------------------------------------------------------------------------------------------------------------------    
     36            *     NVIC_PriorityGroup_3  |                0-7                |            0-1              | 3 bits for pre-emption priority
     37            *                           |                                   |                             | 1 bits for subpriority
     38            *    --------------------------------------------------------------------------------------------------------------------------    
     39            *     NVIC_PriorityGroup_4  |                0-15               |            0                | 4 bits for pre-emption priority
     40            *                           |                                   |                             | 0 bits for subpriority                       
     41            *    ==========================================================================================================================     
     42            *
     43            *            2. Enable and Configure the priority of the selected IRQ Channels using NVIC_Init()  
     44            *
     45            * @note  When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
     46            *        The pending IRQ priority will be managed only by the subpriority.
     47            *
     48            * @note  IRQ priority order (sorted by highest to lowest priority):
     49            *         - Lowest pre-emption priority
     50            *         - Lowest subpriority
     51            *         - Lowest hardware priority (IRQ number)
     52            *
     53            *  @endverbatim
     54            *
     55            ******************************************************************************
     56            * @attention
     57            *
     58            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     59            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     60            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     61            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     62            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     63            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     64            *
     65            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     66            ******************************************************************************
     67            */
     68          
     69          /* Includes ------------------------------------------------------------------*/
     70          #include "stm32f2xx_conf.h"
     71          #include "misc.h"
     72          
     73          /** @addtogroup STM32F2xx_StdPeriph_Driver
     74            * @{
     75            */
     76          
     77          /** @defgroup MISC 
     78            * @brief MISC driver modules
     79            * @{
     80            */
     81          
     82          /* Private typedef -----------------------------------------------------------*/
     83          /* Private define ------------------------------------------------------------*/
     84          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     85          
     86          /* Private macro -------------------------------------------------------------*/
     87          /* Private variables ---------------------------------------------------------*/
     88          /* Private function prototypes -----------------------------------------------*/
     89          /* Private functions ---------------------------------------------------------*/
     90          
     91          /** @defgroup MISC_Private_Functions
     92            * @{
     93            */
     94          
     95          /**
     96            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
     97            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
     98            *   This parameter can be one of the following values:
     99            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
    100            *                                4 bits for subpriority
    101            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
    102            *                                3 bits for subpriority
    103            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
    104            *                                2 bits for subpriority
    105            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
    106            *                                1 bits for subpriority
    107            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
    108            *                                0 bits for subpriority
    109            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
    110            *         The pending IRQ priority will be managed only by the subpriority. 
    111            * @retval None
    112            */
    113          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    114          {
    115            /* Check the parameters */
    116            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
    117            
    118            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    119            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    120          }
    121          
    122          /**
    123            * @brief  Initializes the NVIC peripheral according to the specified
    124            *         parameters in the NVIC_InitStruct.
    125            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    126            *         function should be called before. 
    127            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    128            *         the configuration information for the specified NVIC peripheral.
    129            * @retval None
    130            */
    131          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    132          {
    133            uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    134            
    135            /* Check the parameters */
    136            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    137            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
    138            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    139              
    140            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    141            {
    142              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    143              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    144              tmppre = (0x4 - tmppriority);
    145              tmpsub = tmpsub >> tmppriority;
    146          
    147              tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    148              tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
    149                  
    150              tmppriority = tmppriority << 0x04;
    151                  
    152              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    153              
    154              /* Enable the Selected IRQ Channels --------------------------------------*/
    155              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    156                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    157            }
    158            else
    159            {
    160              /* Disable the Selected IRQ Channels -------------------------------------*/
    161              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    162                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    163            }
    164          }
    165          
    166          /**
    167            * @brief  Sets the vector table location and Offset.
    168            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    169            *   This parameter can be one of the following values:
    170            *     @arg NVIC_VectTab_RAM: Vector Table in internal SRAM.
    171            *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
    172            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    173            * @retval None
    174            */
    175          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    176          { 
    177            /* Check the parameters */
    178            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
    179            assert_param(IS_NVIC_OFFSET(Offset));  
    180             
    181            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    182          }
    183          
    184          /**
    185            * @brief  Selects the condition for the system to enter low power mode.
    186            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    187            *   This parameter can be one of the following values:
    188            *     @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    189            *     @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    190            *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    191            * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
    192            * @retval None
    193            */
    194          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    195          {
    196            /* Check the parameters */
    197            assert_param(IS_NVIC_LP(LowPowerMode));
    198            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    199            
    200            if (NewState != DISABLE)
    201            {
    202              SCB->SCR |= LowPowerMode;
    203            }
    204            else
    205            {
    206              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    207            }
    208          }
    209          
    210          /**
    211            * @brief  Configures the SysTick clock source.
    212            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    213            *   This parameter can be one of the following values:
    214            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    215            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    216            * @retval None
    217            */
    218          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    219          {
    220            /* Check the parameters */
    221            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    222            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    223            {
    224              SysTick->CTRL |= SysTick_CLKSource_HCLK;
    225            }
    226            else
    227            {
    228              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    229            }
    230          }
    231          
    232          /**
    233            * @}
    234            */
    235          
    236          /**
    237            * @}
    238            */
    239          
    240          /**
    241            * @}
    242            */
    243          
    244          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   NVIC_Init
       0   NVIC_PriorityGroupConfig
       0   NVIC_SetVectorTable
       4   NVIC_SystemLPConfig
       0   SysTick_CLKSourceConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
     104  NVIC_Init
      10  NVIC_PriorityGroupConfig
      12  NVIC_SetVectorTable
      40  NVIC_SystemLPConfig
      28  SysTick_CLKSourceConfig

 
 230 bytes in section .text
 
 230 bytes of CODE memory

Errors: none
Warnings: none
