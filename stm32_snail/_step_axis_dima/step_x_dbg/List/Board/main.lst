###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         27/May/2022  14:57:38
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\src\main.c
#    Command line             =
#        -f
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\step_x_dbg\List\Board\main.lst.rsp
#        (D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\src\main.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D DIMA_BRD -D STEP_X -D STM32F205xx
#        -lcN
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\step_x_dbg\List\Board
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\step_x_dbg\Obj\Board
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\.\ -I
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\src\board\ -I
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\src\inc\ -I
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\..\common\dbg\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\..\common\usb\drv\inc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\..\common\board\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0\arm\CMSIS\Core\Include\\" -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.0\arm\CMSIS\DSP\Include\\")
#        --dependencies=n
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\step_x_dbg\Obj\Board\main.o.d
#    Locale                   =  C
#    List file                =
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\step_x_dbg\List\Board\main.lst
#    Object file              =
#        D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\step_x_dbg\Obj\Board\main.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  1
#      __dlib_version         =  6
#
###############################################################################

D:\proj\velograph\snail_w\stm32_snail\step_axis_dima\src\main.c
      1          
      2          #include <stdio.h>
      3          
      4          #include "FreeRTOS.h"
      5          #include "task.h"
      6          #include "queue.h"
      7          
      8          /* Library includes. */
      9          ////#include "stm32f2xx_it.h"
     10          #include "stm32f2xx_rcc.h"
     11          
     12          /* Demo app includes. */
     13          #include "board.h"
     14          
     15          #if 0
     16          #include "usb_lib.h"
     17          #ifdef USEUSB
     18          #include "usb_desc.h"
     19          #endif
     20          #include "hw_config.h"
     21          #ifdef USEUSB
     22          #include "usb_pwr.h"
     23          #endif
     24          #include "stm32eeprom.h"
     25          ///#include "eeprom.h"
     26          #endif
     27          
     28          #include "misc.h"
     29          #include "printk.h"
     30          ///=======================================================================
     31          ////extern void tst_task( void *pvParameters );
     32          extern void tst1_task( void *pvParameters );
     33          extern int can_main(void);
     34          extern void CAN1_Init (void);
     35          
     36          ////============================================
     37          int main( void )
     38          {
     39          ////uint8_t btst=0; 
     40          ////uint32_t tst=0;
     41          #ifdef DEBUG
     42            debug();
     43          #endif
     44          __disable_irq();
     45          hw_board_init();
     46          #if STEP_X
     47            printk("\n\r=== [step_x_axis] ==="); 
     48          #elif STEP_Y
     49            printk("\n\r=== [step_y_axis] ==="); 
     50          #elif STEP_Z
     51            printk("\n\r=== [step_z_axis] ==="); 
     52          #else 
     53            #error "\n\r=== STEP_... nodefined ==="; 
     54          #endif
     55          ////=================================================
     56          ////can1_init();
     57          ////can_main();
     58          CAN1_Init();
     59          
     60          ////=================================================
     61          NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
     62          /////xTaskCreate( motor_task, "tst_task", MOTOR_TASK_STACK_SIZE, NULL, MOTOR_TASK_PRIORITY, NULL );
     63          xTaskCreate( tst1_task, "tst1_task", TST_TASK_STACK_SIZE, NULL, TST_TASK_PRIORITY, NULL );
     64          
     65          /* Start the scheduler. */
     66          vTaskStartScheduler();
     67          
     68          	/* Will only get here if there was not enough heap space to create the
     69          	idle task. */
     70          return 0;
     71          }
     72          ////============================================================
     73          #if 0
     74          static void vCheckTask( void *pvParameters )
     75          {
     76          TickType_t xLastExecutionTime;
     77          xLCDMessage xMessage;
     78          static signed char cPassMessage[ mainMAX_MSG_LEN ];
     79          extern unsigned short usMaxJitter;
     80          
     81          	xLastExecutionTime = xTaskGetTickCount();
     82          	xMessage.pcMessage = cPassMessage;
     83          
     84              for( ;; )
     85          	{
     86          		/* Perform this check every mainCHECK_DELAY milliseconds. */
     87          		vTaskDelayUntil( &xLastExecutionTime, mainCHECK_DELAY );
     88          
     89          		/* Has an error been found in any task? */
     90          
     91                  if( xAreBlockingQueuesStillRunning() != pdTRUE )
     92          		{
     93          			xMessage.pcMessage = "ERROR IN BLOCK Q\n";
     94          		}
     95          		else if( xAreBlockTimeTestTasksStillRunning() != pdTRUE )
     96          		{
     97          			xMessage.pcMessage = "ERROR IN BLOCK TIME\n";
     98          		}
     99                  else if( xAreSemaphoreTasksStillRunning() != pdTRUE )
    100                  {
    101                      xMessage.pcMessage = "ERROR IN SEMAPHORE\n";
    102                  }
    103                  else if( xArePollingQueuesStillRunning() != pdTRUE )
    104                  {
    105                      xMessage.pcMessage = "ERROR IN POLL Q\n";
    106                  }
    107                  else if( xIsCreateTaskStillRunning() != pdTRUE )
    108                  {
    109                      xMessage.pcMessage = "ERROR IN CREATE\n";
    110                  }
    111                  else if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
    112                  {
    113                      xMessage.pcMessage = "ERROR IN MATH\n";
    114                  }
    115          		else if( xAreComTestTasksStillRunning() != pdTRUE )
    116          		{
    117          			xMessage.pcMessage = "ERROR IN COM TEST\n";
    118          		}
    119          		else
    120          		{
    121          			sprintf( ( char * ) cPassMessage, "PASS [%uns]\n", ( ( unsigned long ) usMaxJitter ) * mainNS_PER_CLOCK );
    122          		}
    123          
    124          		/* Send the message to the LCD gatekeeper for display. */
    125          		xQueueSend( xLCDQueue, &xMessage, portMAX_DELAY );
    126          	}
    127          }
    128          #endif
    129          /*-----------------------------------------------------------*/
    130          
    131          
    132          #ifdef  DEBUG
    133          /* Keep the linker happy. */
    134          void assert_failed( unsigned char* pcFile, unsigned long ulLine )
    135          {
    136          	for( ;; )
    137          	{
    138          	}
    139          }
    140          #endif
    141          ////=======================================================
    142          
    143          ////=======================================================

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   main
        16   -> CAN1_Init
        16   -> NVIC_PriorityGroupConfig
        16   -> _printk
        16   -> hw_board_init
        16   -> vTaskStartScheduler
        16   -> xTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?_0
      12  ?_1
      68  main

 
 36 bytes in section .rodata
 68 bytes in section .text
 
 68 bytes of CODE  memory
 36 bytes of CONST memory

Errors: none
Warnings: none
