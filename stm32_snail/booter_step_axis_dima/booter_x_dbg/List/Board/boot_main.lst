###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         25/Feb/2023  19:59:35
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\src\boot_main.c
#    Command line             =
#        -f
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\booter_x_dbg\Obj\Board\boot_main.o.rsp
#        (D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\src\boot_main.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D DIMA_BRD -D STEP_X -D STM32F205xx
#        -D BOOTER -lcN
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\booter_x_dbg\List\Board
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\booter_x_dbg\Obj\Board
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\.\ -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\freertos\source\inc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\src\inc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\dbg\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\board\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\can\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\my_misc\
#        -I
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\..\common\libraries\eeprom_emul\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\booter_x_dbg\Obj\Board\boot_main.o.d
#    Locale                   =  C
#    List file                =
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\booter_x_dbg\List\Board\boot_main.lst
#    Object file              =
#        D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\booter_x_dbg\Obj\Board\boot_main.o
#    Runtime model:              
#      __CPP_Runtime          =  1
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  1
#      __dlib_version         =  6
#
###############################################################################

D:\proj\velograph\snail_w\stm32_snail\booter_step_axis_dima\src\boot_main.c
      1          
      2          #include <stdio.h>
      3          
      4          #include "FreeRTOS.h"
      5          #include "task.h"
      6          #include "queue.h"
      7          
      8          /* Library includes. */
      9          ////#include "stm32f2xx_it.h"
     10          #include "stm32f2xx_rcc.h"
     11          
     12          /* Demo app includes. */
     13          #include "board.h"
     14          
     15          #include "misc.h"
     16          #include "printk.h"
     17          #include "emul_eeprom.h"
     18          ///=======================================================================
     19          ////extern void tst_task( void *pvParameters );
     20          extern void tst_task( void *pvParameters );
     21          extern void can_rsv_task( void *pvParameters );
     22          extern void can_send_thread(void* pp);
     23          
     24          ////extern int can_main(void);
     25          extern void CAN1_Init (void);
     26          TaskHandle_t  can_send_thread_handle;
     27          
     28          ////============================================
     29          int main( void )
     30          {
     31          ////uint8_t btst=0; 
     32          ////uint32_t tst=0;
     33          uint16_t tmp=0;
     34          #ifdef DEBUG
     35            debug();
     36          #endif
     37          __disable_irq();
     38          hw_board_init();
     39          #if STEP_X
     40            printk("\n\r=== [boot_step_x_axis] ==="); 
     41          #elif STEP_Y
     42            printk("\n\r=== [boot_step_y_axis] ==="); 
     43          #elif STEP_Z
     44            printk("\n\r=== [boot_step_z_axis] ==="); 
     45          #else 
     46            #error "\n\r=== boot STEP_... nodefined ==="; 
     47          #endif
     48          ////=================================================
     49          eeprom_init();
     50          if(EE_ReadVariable(ADDR_EEPROM_BOOT_WORK, &tmp)==0)
     51            {
     52              if(tmp==VAL_EEPROM_WORK) ////need add check KS!!!
     53                {
     54                 goto_app();
     55                }
     56            }
     57          
     58          CAN1_Init();
     59          ////=================================================
     60          NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
     61          ////xTaskCreate( motor_task, "tst_task", MOTOR_TASK_STACK_SIZE, NULL, MOTOR_TASK_PRIORITY, NULL );
     62          xTaskCreate(can_send_thread, (const char*)"can_send_thread",CAN_SEND_STACK_SIZE/2, 0, APP_PRIORITY, &can_send_thread_handle);
     63          xTaskCreate( can_rsv_task, "can_rsv_task", CAN_TASK_STACK_SIZE, NULL, CAN_TASK_PRIORITY, NULL );
     64          xTaskCreate( tst_task, "tst_task", TST_TASK_STACK_SIZE, NULL, TST_TASK_PRIORITY, NULL );
     65          /* Start the scheduler. */
     66          vTaskStartScheduler();
     67          return 0;
     68          }
     69          
     70          #ifdef  DEBUG
     71          /* Keep the linker happy. */
     72          void assert_failed( unsigned char* pcFile, unsigned long ulLine )
     73          {
     74          	for( ;; )
     75          	{
     76          	}
     77          }
     78          #endif
     79          ////=======================================================
     80          
     81          ////=======================================================

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   main
        16   -> CAN1_Init
        16   -> EE_ReadVariable
        16   -> NVIC_PriorityGroupConfig
        16   -> _printk
        16   -> eeprom_init
        16   -> goto_app
        16   -> hw_board_init
        16   -> vTaskStartScheduler
        16   -> xTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?_0
      16  ?_1
      16  ?_2
      12  ?_3
       4  can_send_thread_handle
     172  main

 
   4 bytes in section .bss
  76 bytes in section .rodata
 172 bytes in section .text
 
 172 bytes of CODE  memory
  76 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
