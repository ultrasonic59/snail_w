###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         15/Sep/2021  14:34:10
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\spindle_control.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW5439.tmp
#        (D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\spindle_control.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -D
#        USE_USB_OTG_FS -D STM32F205xx -lcN
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\.\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\dbg\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\core\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\drv\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\hdlc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\cdc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can\List\spindle_control.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can\Obj\spindle_control.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\spindle_control.c
      1          /*
      2            spindle_control.c - spindle control methods
      3            Part of Grbl
      4          
      5            Copyright (c) 2012-2016 Sungeun K. Jeon for Gnea Research LLC
      6            Copyright (c) 2009-2011 Simen Svale Skogsrud
      7          
      8            Grbl is free software: you can redistribute it and/or modify
      9            it under the terms of the GNU General Public License as published by
     10            the Free Software Foundation, either version 3 of the License, or
     11            (at your option) any later version.
     12          
     13            Grbl is distributed in the hope that it will be useful,
     14            but WITHOUT ANY WARRANTY; without even the implied warranty of
     15            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16            GNU General Public License for more details.
     17          
     18            You should have received a copy of the GNU General Public License
     19            along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
     20          */
     21          
     22          #include "my_grbl.h"
     23          
     24          #ifdef VARIABLE_SPINDLE
     25          static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
     26          #endif
     27          
     28          void spindle_init()
     29          {
     30          #if 0 
     31          #ifdef VARIABLE_SPINDLE
     32            pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
     33          #endif
     34          
     35            GPIO_InitTypeDef GPIO_InitStructure;
     36            RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE);
     37            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     38            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     39          #ifdef USE_SPINDLE_DIR_AS_ENABLE_PIN
     40            GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
     41          #else
     42            GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
     43          #endif
     44            GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
     45          
     46          #ifdef VARIABLE_SPINDLE
     47            RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
     48            TIM_TimeBaseInitTypeDef timerInitStructure;
     49            TIM_OCInitTypeDef outputChannelInit = {0};
     50            TIM_TimeBaseStructInit(&timerInitStructure);
     51          
     52            timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
     53            timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
     54            timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
     55            timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
     56            timerInitStructure.TIM_RepetitionCounter = 0;
     57            TIM_TimeBaseInit(TIM1, &timerInitStructure);
     58          
     59            outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
     60            outputChannelInit.TIM_Pulse = 0; // initi speed is 0
     61            outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
     62            outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
     63          
     64            TIM_OC1Init(TIM1, &outputChannelInit);
     65            TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
     66            TIM_CtrlPWMOutputs(TIM1, DISABLE);
     67            TIM_Cmd(TIM1, ENABLE);
     68          
     69            RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
     70            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     71            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     72            GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
     73            GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
     74          
     75          #endif
     76          #endif
     77            spindle_stop();
     78          }
     79          
     80          uint8_t spindle_get_state()
     81          {
     82            uint8_t pin = 0;
     83          #if 0
     84          #ifdef VARIABLE_SPINDLE
     85          #ifdef USE_SPINDLE_DIR_AS_ENABLE_PIN
     86            pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
     87          // No spindle direction output pin.
     88          #ifdef INVERT_SPINDLE_ENABLE_PIN
     89            if (bit_isfalse(pin, (1 << SPINDLE_ENABLE_BIT)))
     90            {
     91              return (SPINDLE_STATE_CW);
     92            }
     93          #else
     94            if (bit_istrue(pin, (1 << SPINDLE_ENABLE_BIT)))
     95            {
     96              return (SPINDLE_STATE_CW);
     97            }
     98          #endif
     99          #else
    100            pin = GPIO_ReadInputData(SPINDLE_DIRECTION_PORT);
    101            if (pin & (1 << SPINDLE_DIRECTION_BIT))
    102            {
    103              return (SPINDLE_STATE_CCW);
    104            }
    105            else
    106            {
    107              return (SPINDLE_STATE_CW);
    108            }
    109          #endif
    110          #else
    111            pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
    112          #ifdef INVERT_SPINDLE_ENABLE_PIN
    113            if (bit_isfalse(pin, (1 << SPINDLE_ENABLE_BIT)))
    114            {
    115          #else
    116            if (bit_istrue(pin, (1 << SPINDLE_ENABLE_BIT)))
    117            {
    118          #endif
    119              if (pin & (1 << SPINDLE_DIRECTION_BIT))
    120              {
    121                return (SPINDLE_STATE_CCW);
    122              }
    123              else
    124              {
    125                return (SPINDLE_STATE_CW);
    126              }
    127            }
    128          #endif
    129          #endif
    130          ////  return (SPINDLE_STATE_DISABLE);
    131          return 0;
    132          
    133          }
    134          
    135          // Disables the spindle and sets PWM output to zero when PWM variable spindle speed is enabled.
    136          // Called by various main program and ISR routines. Keep routine small, fast, and efficient.
    137          // Called by spindle_init(), spindle_set_speed(), spindle_set_state(), and mc_reset().
    138          void spindle_stop()
    139          {
    140          #ifdef VARIABLE_SPINDLE
    141            TIM_CtrlPWMOutputs(TIM1, DISABLE);
    142          
    143          #ifdef USE_SPINDLE_DIR_AS_ENABLE_PIN
    144          #ifdef INVERT_SPINDLE_ENABLE_PIN
    145            SetSpindleEnablebit();
    146          #else
    147            ResetSpindleEnablebit();
    148          #endif
    149          #endif
    150          #else
    151          #ifdef INVERT_SPINDLE_ENABLE_PIN
    152            SetSpindleEnablebit();
    153          #else
    154            ResetSpindleEnablebit();
    155          #endif
    156          #endif
    157          }
    158          
    159          #ifdef VARIABLE_SPINDLE
    160          // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
    161          // and stepper ISR. Keep routine small and efficient.
    162          void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
    163          {
    164            TIM1->CCR1 = pwm_value;
    165          #ifdef SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED
    166            if (pwm_value == SPINDLE_PWM_OFF_VALUE)
    167            {
    168              spindle_stop();
    169            }
    170            else
    171            {
    172              TIM_CtrlPWMOutputs(TIM1, ENABLE);
    173          #ifdef INVERT_SPINDLE_ENABLE_PIN
    174              ResetSpindleEnablebit();
    175          #else
    176              SetSpindleEnablebit();
    177          #endif
    178            }
    179          #else
    180            if (pwm_value == SPINDLE_PWM_OFF_VALUE)
    181            {
    182              TIM_CtrlPWMOutputs(TIM1, DISABLE);
    183            }
    184            else
    185            {
    186              TIM_CtrlPWMOutputs(TIM1, ENABLE);
    187            }
    188          #endif
    189          }
    190          
    191          #ifdef ENABLE_PIECEWISE_LINEAR_SPINDLE
    192          // Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
    193          SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
    194          {
    195            SPINDLE_PWM_TYPE pwm_value;
    196            rpm *= (0.010 * sys.spindle_speed_ovr); // Scale by spindle speed override value.
    197                                                    // Calculate PWM register value based on rpm max/min settings and programmed rpm.
    198            if ((settings.rpm_min >= settings.rpm_max) || (rpm >= RPM_MAX))
    199            {
    200              rpm = RPM_MAX;
    201              pwm_value = SPINDLE_PWM_MAX_VALUE;
    202            }
    203            else if (rpm <= RPM_MIN)
    204            {
    205              if (rpm == 0.0)
    206              { // S0 disables spindle
    207                pwm_value = SPINDLE_PWM_OFF_VALUE;
    208              }
    209              else
    210              {
    211                rpm = RPM_MIN;
    212                pwm_value = SPINDLE_PWM_MIN_VALUE;
    213              }
    214            }
    215            else
    216            {
    217              // Compute intermediate PWM value with linear spindle speed model via piecewise linear fit model.
    218          #if (N_PIECES > 3)
    219              if (rpm > RPM_POINT34)
    220              {
    221                pwm_value = floorf(RPM_LINE_A4 * rpm - RPM_LINE_B4);
    222              }
    223              else
    224          #endif
    225          #if (N_PIECES > 2)
    226                  if (rpm > RPM_POINT23)
    227              {
    228                pwm_value = floorf(RPM_LINE_A3 * rpm - RPM_LINE_B3);
    229              }
    230              else
    231          #endif
    232          #if (N_PIECES > 1)
    233                  if (rpm > RPM_POINT12)
    234              {
    235                pwm_value = floorf(RPM_LINE_A2 * rpm - RPM_LINE_B2);
    236              }
    237              else
    238          #endif
    239              {
    240                pwm_value = floorf(RPM_LINE_A1 * rpm - RPM_LINE_B1);
    241              }
    242            }
    243            sys.spindle_speed = rpm;
    244            return (pwm_value);
    245          }
    246          #else
    247          // Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
    248          SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
    249          {
    250            SPINDLE_PWM_TYPE pwm_value;
    251            rpm *= (0.010f * sys.spindle_speed_ovr); // Scale by spindle speed override value.
    252                                                     // Calculate PWM register value based on rpm max/min settings and programmed rpm.
    253            if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max))
    254            {
    255              // No PWM range possible. Set simple on/off spindle control pin state.
    256              sys.spindle_speed = settings.rpm_max;
    257              pwm_value = SPINDLE_PWM_MAX_VALUE;
    258            }
    259            else if (rpm <= settings.rpm_min)
    260            {
    261              if (rpm == 0.0f)
    262              { // S0 disables spindle
    263                sys.spindle_speed = 0.0f;
    264                pwm_value = SPINDLE_PWM_OFF_VALUE;
    265              }
    266              else
    267              { // Set minimum PWM output
    268                sys.spindle_speed = settings.rpm_min;
    269                pwm_value = SPINDLE_PWM_MIN_VALUE;
    270              }
    271            }
    272            else
    273            {
    274              // Compute intermediate PWM value with linear spindle speed model.
    275              // NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
    276              sys.spindle_speed = rpm;
    277              pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min) * pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
    278            }
    279            return (pwm_value);
    280          }
    281          #endif
    282          #endif
    283          
    284          // Immediately sets spindle running state with direction and spindle rpm via PWM, if enabled.
    285          // Called by g-code parser spindle_sync(), parking retract and restore, g-code program end,
    286          // sleep, and spindle stop override.
    287          #ifdef VARIABLE_SPINDLE
    288          void spindle_set_state(uint8_t state, float rpm)
    289          #else
    290          void _spindle_set_state(uint8_t state)
    291          #endif
    292          {
    293            if (sys.abort)
    294            {
    295              return;
    296            } // Block during abort.
    297            if (state == SPINDLE_DISABLE)
    298            { // Halt or set spindle direction and rpm.
    299          
    300          #ifdef VARIABLE_SPINDLE
    301              sys.spindle_speed = 0.0f;
    302          #endif
    303              spindle_stop();
    304            }
    305            else
    306            {
    307          #ifndef USE_SPINDLE_DIR_AS_ENABLE_PIN
    308              if (state == SPINDLE_ENABLE_CW)
    309              {
    310                ResetSpindleDirectionBit();
    311              }
    312              else
    313              {
    314                SetSpindleDirectionBit();
    315              }
    316          #endif
    317          
    318          #ifdef VARIABLE_SPINDLE
    319              // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
    320              if (settings.flags & BITFLAG_LASER_MODE)
    321              {
    322                if (state == SPINDLE_ENABLE_CCW)
    323                {
    324                  rpm = 0.0f;
    325                } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
    326              }
    327              spindle_set_speed(spindle_compute_pwm_value(rpm));
    328          #endif
    329          #if (defined(USE_SPINDLE_DIR_AS_ENABLE_PIN) &&        \
    330               !defined(SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED)) || \
    331              !defined(VARIABLE_SPINDLE)
    332          // NOTE: Without variable spindle, the enable bit should just turn on or off, regardless
    333          // if the spindle speed value is zero, as its ignored anyhow.
    334          #ifdef INVERT_SPINDLE_ENABLE_PIN
    335              ResetSpindleEnablebit();
    336          #else
    337              SetSpindleEnablebit();
    338          #endif
    339          #endif
    340            }
    341          
    342            sys.report_ovr_counter = 0; // Set to report change immediately
    343          }
    344          
    345          // G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails
    346          // if an abort or check-mode is active.
    347          #ifdef VARIABLE_SPINDLE
    348          void spindle_sync(uint8_t state, float rpm)
    349          {
    350            if (sys.state == STATE_CHECK_MODE)
    351            {
    352              return;
    353            }
    354            protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
    355            spindle_set_state(state, rpm);
    356          }
    357          #else
    358          void _spindle_sync(uint8_t state)
    359          {
    360            if (sys.state == STATE_CHECK_MODE)
    361            {
    362              return;
    363            }
    364            protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
    365            _spindle_set_state(state);
    366          }
    367          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   spindle_compute_pwm_value
        16   -> __aeabi_f2iz
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
        16   -> __aeabi_ui2f
        16   -> floorf
        16 __aeabi_cfcmpeq
        16 __aeabi_cfrcmple
       0   spindle_get_state
       8   spindle_init
         8   -> spindle_stop
       8   spindle_set_speed
         8   -> TIM_CtrlPWMOutputs
      16   spindle_set_state
        16   -> ResetSpindleDirectionBit
        16   -> SetSpindleDirectionBit
        16   -> spindle_compute_pwm_value
        16   -> spindle_set_speed
        16   -> spindle_stop
       8   spindle_stop
         8   -> TIM_CtrlPWMOutputs
      16   spindle_sync
        16   -> protocol_buffer_synchronize
        16   -> spindle_set_state


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  pwm_gradient
     124  spindle_compute_pwm_value
       6  spindle_get_state
       8  spindle_init
      40  spindle_set_speed
      90  spindle_set_state
      12  spindle_stop
      30  spindle_sync

 
   4 bytes in section .bss
 334 bytes in section .text
 
 334 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: 6
