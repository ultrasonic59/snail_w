###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         16/Oct/2021  20:54:57
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\grbl_thr.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW1B52.tmp
#        (D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\grbl_thr.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -D
#        USE_USB_OTG_FS -D STM32F205xx -lcN
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can_dima\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can_dima\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\.\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\dbg\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\core\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\drv\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\hdlc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\cdc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can_dima\List\grbl_thr.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can_dima\Obj\grbl_thr.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\grbl_thr.c
      1          #include "FreeRTOS.h"
      2          #include "task.h"
      3          #include "semphr.h"
      4          #include "printk.h"
      5          #include "my_grbl.h"
      6          #include "grbl_sys.h"
      7          #include "my_stepper.h"
      8          extern void serial_reset_read_buffer(void);
      9          #if 0
     10          extern uint8_t serial_read_rx(void);
     11          extern uint8_t serial_get_rx_buffer_available();
     12          extern uint8_t system_execute_line(char *line);
     13          extern void system_clear_exec_alarm() ;
     14          extern void system_clear_exec_motion_overrides() ;
     15          extern void system_clear_exec_accessory_overrides() ;
     16          static char buf_line[LINE_BUFFER_SIZE]; // Line to be executed. Zero-terminated.
     17          #endif
     18          TaskHandle_t  grbl_thread_handle;
     19          void _delay_ms(uint32_t x)
     20          {
     21          #if 0
     22          	u32 temp;
     23          	SysTick->LOAD = (u32)72000000 / 8000;                     // Loading time
     24          	SysTick->VAL = 0x00;                                            // Empty the counter
     25          	SysTick->CTRL = 0x01;                                           // Start from bottom
     26          	do
     27          	{
     28          		temp = SysTick->CTRL;
     29          	} while (temp & 0x01 && !(temp&(1 << 16)));                             // Wait time arrive
     30          	SysTick->CTRL = 0x00;                                            // Close the counter
     31          	SysTick->VAL = 0X00;                                            // Empty the counter
     32          #endif
     33          vTaskDelay(x);        
     34          }
     35          
     36          
     37          
     38          void grbl_thread(void* pp)
     39          {
     40          printk("\n\r grbl_thread\n\r"); 
     41          ////  serial_init();   // Setup serial baud rate and interrupts
     42          ////  settings_init(); // Load Grbl settings from EEPROM
     43            stepper_init();  // Configure stepper pins and interrupt timers
     44          ////  system_init();   // Configure pinout pins and pin-change interrupt
     45            memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
     46          
     47          
     48          for (;;) { 
     49            uint8_t prior_state = sys.state;
     50            memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
     51            sys.state = prior_state;
     52            sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
     53            sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
     54            sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
     55            memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
     56            sys_probe_state = 0;
     57            sys_rt_exec_state = 0;
     58            sys_rt_exec_alarm = 0;
     59            sys_rt_exec_motion_override = 0;
     60            sys_rt_exec_accessory_override = 0;
     61          
     62              // Reset Grbl primary systems.
     63            serial_reset_read_buffer(); // Clear serial read buffer
     64            gc_init(); // Set g-code parser to default state
     65            spindle_init();
     66            coolant_init();
     67            limits_init();
     68            probe_init();
     69            plan_reset(); // Clear block buffer and planner variables
     70            st_reset(); // Clear stepper subsystem variables.
     71          
     72              // Sync cleared gcode and planner positions to current system position.
     73            plan_sync_position();
     74            gc_sync_position();
     75          
     76              // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
     77            report_init_message();
     78          
     79              // Start Grbl main loop. Processes program inputs and executes them.
     80              protocol_main_loop();
     81          } 
     82          
     83          }
     84          
     85          
     86          
     87          
     88          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _delay_ms
         8   -> vTaskDelay
      32   grbl_thread
        32   -> __aeabi_memset
        32   -> _printk
        32   -> coolant_init
        32   -> gc_init
        32   -> gc_sync_position
        32   -> limits_init
        32   -> plan_reset
        32   -> plan_sync_position
        32   -> probe_init
        32   -> protocol_main_loop
        32   -> report_init_message
        32   -> serial_reset_read_buffer
        32   -> spindle_init
        32   -> st_reset
        32   -> stepper_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
      20  ?_0
      12  _delay_ms
     180  grbl_thread
       4  grbl_thread_handle

 
   4 bytes in section .bss
  20 bytes in section .rodata
 228 bytes in section .text
 
 228 bytes of CODE  memory
  20 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
