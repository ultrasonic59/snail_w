###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         16/Oct/2021  20:54:57
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\jog.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW1C1F.tmp
#        (D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\jog.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -D USE_USB_OTG_FS
#        -D STM32F205xx -lcN
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can_dima\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can_dima\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\.\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\dbg\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\core\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\drv\inc\
#        -I D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\hdlc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\..\common\usb\cdc\ -I
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can_dima\List\jog.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\usb_can_dima\usb_can_dima\Obj\jog.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\usb_can_dima\src\my_grbl\jog.c
      1          /*
      2          jog.h - Jogging methods
      3          Part of Grbl
      4          
      5          Copyright (c) 2016 Sungeun K. Jeon for Gnea Research LLC
      6          
      7          Grbl is free software: you can redistribute it and/or modify
      8          it under the terms of the GNU General Public License as published by
      9          the Free Software Foundation, either version 3 of the License, or
     10          (at your option) any later version.
     11          
     12          Grbl is distributed in the hope that it will be useful,
     13          but WITHOUT ANY WARRANTY; without even the implied warranty of
     14          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15          GNU General Public License for more details.
     16          
     17          You should have received a copy of the GNU General Public License
     18          along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
     19          */
     20          
     21          #include "my_grbl.h"
     22          
     23          
     24          // Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
     25          uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
     26          {
     27            // Initialize planner data struct for jogging motions.
     28            // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
     29            pl_data->feed_rate = gc_block->values.f;
     30            pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
     31          #ifdef USE_LINE_NUMBERS
     32            pl_data->line_number = gc_block->values.n;
     33          #endif
     34          
     35            if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
     36              if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
     37            }
     38          
     39            // Valid jog command. Plan, set state, and execute.
     40            mc_line(gc_block->values.xyz, pl_data);
     41            if (sys.state == STATE_IDLE) {
     42              if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
     43                sys.state = STATE_JOG;
     44                st_prep_buffer();
     45                st_wake_up();  // NOTE: Manual start. No state machine required.
     46              }
     47            }
     48          
     49            return(STATUS_OK);
     50          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   jog_execute
        16   -> mc_line
        16   -> plan_get_current_block
        16   -> st_prep_buffer
        16   -> st_wake_up
        16   -> system_check_travel_limits


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      96  jog_execute

 
 96 bytes in section .text
 
 96 bytes of CODE memory

Errors: none
Warnings: none
