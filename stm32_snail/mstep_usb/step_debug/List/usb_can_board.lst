###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         30/Nov/2020  13:06:07
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\usb_can_board.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWDB1.tmp
#        (D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\usb_can_board.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D STEP_BRD -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\step_debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\step_debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\dbg\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\step_debug\List\usb_can_board.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\step_debug\Obj\usb_can_board.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\usb_can_board.c
      1          #include "FreeRTOS.h"
      2          #include "queue.h"
      3          #include "semphr.h"
      4          ///#include "stm32f2xx_gpio.h"
      5          ///#include "stm32f2xx_rcc.h"
      6          #include "stm32f2xx_conf.h"
      7          #include "mstep_board.h"
      8          #include "printk.h"
      9          ///=============================
     10          int sendchar2 (int c) 
     11          { 
     12          while (!(USART2->SR & 0x0080));
     13          USART2->DR = (c & 0x1FF);
     14          return (c);
     15          }
     16          
     17          int get_byte2 (void) 
     18          {
     19          while (!(USART2->SR & 0x0020));
     20          return (USART2->DR);
     21          }
     22          int get_byte_dbg (void) 
     23          {
     24          while (!(USART2->SR & 0x0020));
     25          return (USART2->DR);
     26          }
     27          
     28          ////void _putk(char ch)
     29          int send_char_dbg(int ch) 
     30          {
     31          //sendchar_hdlc(ch);
     32          sendchar2(ch);
     33          return ch;
     34          }
     35          
     36          void init_gpio(void)
     37          {
     38          ////RCC_AHBPeriphClockCmd(XEN_PIN_RCC_AHB,ENABLE);
     39          GPIO_InitTypeDef GPIO_InitStructure;
     40          ////=============== TST1 ============================
     41          RCC_AHB1PeriphClockCmd(TST1_PIN_RCC, ENABLE);
     42          GPIO_InitStructure.GPIO_Pin = TST1_PIN;
     43          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     44          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     45          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     46          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     47          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     48          GPIO_Init( TST1_PIN_GPIO, &GPIO_InitStructure );
     49          GPIO_SetBits(TST1_PIN_GPIO, TST1_PIN);
     50          ////=============== TST2 ============================
     51          RCC_AHB1PeriphClockCmd(TST2_PIN_RCC, ENABLE);
     52          GPIO_InitStructure.GPIO_Pin = TST2_PIN;
     53          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     54          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     55          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     56          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     57          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     58          GPIO_Init( TST2_PIN_GPIO, &GPIO_InitStructure );
     59          ////=============== TST3 ============================
     60          RCC_AHB1PeriphClockCmd(TST3_PIN_RCC, ENABLE);
     61          GPIO_InitStructure.GPIO_Pin = TST3_PIN;
     62          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     63          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     64          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     65          
     66          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     67          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     68          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     69          GPIO_Init( TST3_PIN_GPIO, &GPIO_InitStructure );
     70          GPIO_PinAFConfig(TST3_PIN_GPIO, TST3_PIN_NPIN, GPIO_AF_TIM1);
     71          
     72          ////=============== TST7 ============================
     73          RCC_AHB1PeriphClockCmd(TST7_PIN_RCC, ENABLE);
     74          GPIO_InitStructure.GPIO_Pin = TST7_PIN;
     75          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     76          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     77          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     78          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     79          GPIO_Init( TST7_PIN_GPIO, &GPIO_InitStructure );
     80          GPIO_PinAFConfig(TST7_PIN_GPIO, TST7_PIN_NPIN, GPIO_AF_TIM8);
     81            
     82          ////=========== DBG_UART =================================================== 
     83          RCC_AHB1PeriphClockCmd(UART_DBG_TX_RCC, ENABLE);
     84          GPIO_InitStructure.GPIO_Pin = UART_DBG_TX_PIN;
     85          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     86          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     87          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     88          GPIO_Init( UART_DBG_TX_GPIO, &GPIO_InitStructure );
     89          
     90          RCC_AHB1PeriphClockCmd(UART_DBG_RX_RCC, ENABLE);
     91          GPIO_InitStructure.GPIO_Pin = UART_DBG_RX_PIN;
     92          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     93          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     94          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     95          GPIO_Init( UART_DBG_RX_GPIO, &GPIO_InitStructure );
     96            
     97          GPIO_PinAFConfig(UART_DBG_TX_GPIO_PORT, UART_DBG_TX_PIN_NPIN, UART_DBG_TX_AF);
     98          GPIO_PinAFConfig(UART_DBG_RX_GPIO_PORT, UART_DBG_RX_PIN_NPIN, UART_DBG_RX_AF);
     99          ////===================================================================
    100          ////=============== MOT_FAULT ============================
    101          RCC_AHB1PeriphClockCmd(MOT_FAULT_PIN_RCC, ENABLE);
    102          GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
    103          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    104          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    105          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    106          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    107          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    108          GPIO_Init( MOT_FAULT_PIN_GPIO, &GPIO_InitStructure );
    109          ////=============== MOT_CONC ============================
    110          RCC_AHB1PeriphClockCmd(CONC_PIN_RCC, ENABLE);
    111          GPIO_InitStructure.GPIO_Pin = CONC_PIN;
    112          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    113          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    114          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    115          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    116          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    117          GPIO_Init( CONC_PIN_GPIO, &GPIO_InitStructure );
    118          
    119          ////=============== MOT_M2 ============================
    120          RCC_AHB1PeriphClockCmd(MOT_M2_PIN_RCC, ENABLE);
    121          GPIO_InitStructure.GPIO_Pin = MOT_M2_PIN;
    122          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    123          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    124          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    125          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    126          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    127          GPIO_Init( MOT_M2_PIN_GPIO, &GPIO_InitStructure );
    128          ////=============== MOT_M1 ============================
    129          RCC_AHB1PeriphClockCmd(MOT_M1_PIN_RCC, ENABLE);
    130          GPIO_InitStructure.GPIO_Pin = MOT_M1_PIN;
    131          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    132          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    133          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    134          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    135          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    136          GPIO_Init( MOT_M1_PIN_GPIO, &GPIO_InitStructure );
    137          ////=============== MOT_M0 ============================
    138          RCC_AHB1PeriphClockCmd(MOT_M0_PIN_RCC, ENABLE);
    139          GPIO_InitStructure.GPIO_Pin = MOT_M0_PIN;
    140          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    141          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    142          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    143          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    144          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    145          GPIO_Init( MOT_M0_PIN_GPIO, &GPIO_InitStructure );
    146          ////=============== MOT_ENA ============================
    147          RCC_AHB1PeriphClockCmd(MOT_ENA_PIN_RCC, ENABLE);
    148          GPIO_InitStructure.GPIO_Pin = MOT_ENA_PIN;
    149          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    150          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    151          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    152          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    153          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    154          GPIO_Init( MOT_ENA_PIN_GPIO, &GPIO_InitStructure );
    155          ////=============== MOT_RESET ============================
    156          RCC_AHB1PeriphClockCmd(MOT_RESET_PIN_RCC, ENABLE);
    157          GPIO_InitStructure.GPIO_Pin = MOT_RESET_PIN;
    158          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    159          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    160          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    161          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    162          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    163          GPIO_Init( MOT_RESET_PIN_GPIO, &GPIO_InitStructure );
    164          ////=============== MOT_SLEEP ============================
    165          RCC_AHB1PeriphClockCmd(MOT_SLEEP_PIN_RCC, ENABLE);
    166          GPIO_InitStructure.GPIO_Pin = MOT_SLEEP_PIN;
    167          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    168          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    169          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    170          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    171          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    172          GPIO_Init( MOT_SLEEP_PIN_GPIO, &GPIO_InitStructure );
    173          ////#define MOT_STEP_TIM  	        TIM12
    174          ////=============== MOT_STEP ============================
    175          RCC_AHB1PeriphClockCmd(MOT_STEP_PIN_RCC, ENABLE);
    176          GPIO_InitStructure.GPIO_Pin = MOT_STEP_PIN;
    177          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    178          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    179          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    180          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    181          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    182          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    183          GPIO_Init( MOT_STEP_PIN_GPIO, &GPIO_InitStructure );
    184          GPIO_PinAFConfig(MOT_STEP_PIN_GPIO, MOT_STEP_PIN_NPIN, GPIO_AF_TIM1);
    185          ////===================================================================
    186          
    187          ////=============== MOT_DIR ============================
    188          RCC_AHB1PeriphClockCmd(MOT_DIR_PIN_RCC, ENABLE);
    189          GPIO_InitStructure.GPIO_Pin = MOT_DIR_PIN;
    190          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    191          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    192          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    193          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    194          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    195          GPIO_Init( MOT_DIR_PIN_GPIO, &GPIO_InitStructure );
    196          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    197          
    198          ////============== LED_PWM ============================
    199          RCC_AHB1PeriphClockCmd(LED_PWM_PIN_RCC, ENABLE);
    200          GPIO_InitStructure.GPIO_Pin = LED_PWM_PIN;
    201          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    202          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    203          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    204          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    205          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    206          GPIO_Init( LED_PWM_PIN_GPIO, &GPIO_InitStructure );
    207          GPIO_PinAFConfig(LED_PWM_PIN_GPIO, LED_PWM_PIN_NPIN, GPIO_AF_TIM8);
    208          ////=============== ON_LED0 ============================
    209          RCC_AHB1PeriphClockCmd(ON_LED0_PIN_RCC, ENABLE);
    210          GPIO_InitStructure.GPIO_Pin = ON_LED0_PIN;
    211          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    212          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    213          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    214          GPIO_Init( ON_LED0_PIN_GPIO, &GPIO_InitStructure );
    215          ////=============== ON_LED1 ============================
    216          RCC_AHB1PeriphClockCmd(ON_LED1_PIN_RCC, ENABLE);
    217          GPIO_InitStructure.GPIO_Pin = ON_LED1_PIN;
    218          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    219          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    220          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    221          GPIO_Init( ON_LED1_PIN_GPIO, &GPIO_InitStructure );
    222          
    223          }
    224          
    225          ////=============================================
    226          void UART_DBG_Init(void)
    227          {
    228          ////GPIO_InitTypeDef GPIO_InitStructure;
    229          USART_InitTypeDef USART_InitStructure;
    230          UART_DBG_CLK_INIT(UART_DBG_CLK, ENABLE);
    231          USART_DeInit(UART_DBG);
    232          USART_InitStructure.USART_BaudRate = 115200;
    233          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    234          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    235          USART_InitStructure.USART_Parity = USART_Parity_No;
    236          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    237          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    238          USART_Init(UART_DBG, &USART_InitStructure);
    239          UART_DBG->CR1 |= USART_CR1_RXNEIE;
    240          USART_Cmd(UART_DBG, ENABLE);
    241          }
    242          ////==================================================
    243          ////==================================
    244          void CAN_Config(void)
    245          {
    246            GPIO_InitTypeDef  GPIO_InitStructure;
    247            CAN_InitTypeDef        CAN_InitStructure;
    248            CAN_FilterInitTypeDef  CAN_FilterInitStructure;
    249          
    250          
    251            /* CAN GPIOs configuration **************************************************/
    252          
    253            /* Enable GPIO clock */
    254          RCC_AHB1PeriphClockCmd(CAN1_GPIO_CLK, ENABLE);
    255          
    256            /* Connect CAN pins to AF9 */
    257            GPIO_PinAFConfig(CAN1_GPIO_PORT, CAN1_RX_SOURCE, CAN1_AF_PORT);
    258            GPIO_PinAFConfig(CAN1_GPIO_PORT, CAN1_TX_SOURCE, CAN1_AF_PORT);
    259          
    260            /* Configure CAN RX and TX pins */
    261            GPIO_InitStructure.GPIO_Pin = CAN1_RX_PIN | CAN1_TX_PIN;
    262            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    263            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    264            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    265            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    266            GPIO_Init(CAN1_GPIO_PORT, &GPIO_InitStructure);
    267          
    268            /* CAN configuration ********************************************************/
    269            /* Enable CAN clock */
    270            RCC_APB1PeriphClockCmd(CAN1_CLK, ENABLE);
    271            /* CAN register init */
    272            CAN_DeInit(CAN1);
    273          
    274            CAN_StructInit(&CAN_InitStructure);
    275          
    276            /* CAN cell init */
    277            CAN_InitStructure.CAN_TTCM = DISABLE;
    278            CAN_InitStructure.CAN_ABOM = DISABLE;
    279            CAN_InitStructure.CAN_AWUM = DISABLE;
    280            CAN_InitStructure.CAN_NART = DISABLE;
    281            CAN_InitStructure.CAN_RFLM = DISABLE;
    282            CAN_InitStructure.CAN_TXFP = DISABLE;
    283            CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
    284            CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
    285          
    286            /* CAN Baudrate = 1MBps (CAN clocked at 30 MHz) */
    287            CAN_InitStructure.CAN_BS1 = CAN_BS1_6tq;
    288            CAN_InitStructure.CAN_BS2 = CAN_BS2_8tq;
    289            CAN_InitStructure.CAN_Prescaler = 2;
    290            CAN_Init(CAN1, &CAN_InitStructure);
    291          
    292          
    293            CAN_FilterInitStructure.CAN_FilterNumber = 0;
    294            CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_Filter_FIFO0;
    295            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
    296            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    297            CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;
    298            CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
    299            CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000;
    300            CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;
    301            //CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
    302            CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
    303            CAN_FilterInit(&CAN_FilterInitStructure);
    304          
    305            CAN_FilterInitStructure.CAN_FilterNumber = 14;
    306            CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_Filter_FIFO1;
    307            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
    308            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    309            CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;
    310            CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
    311            CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000;
    312            CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;
    313            //CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
    314            CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
    315            CAN_FilterInit(&CAN_FilterInitStructure);
    316          
    317          //  CAN2TxMessage.StdId = 0x321;
    318          //  CAN2TxMessage.ExtId = 0x01;
    319          //  CAN2TxMessage.RTR = CAN_RTR_DATA;
    320          //  CAN2TxMessage.IDE = CAN_ID_STD;
    321          //  CAN2TxMessage.DLC = 8;
    322          
    323            /* Enable FIFO 0 message pending Interrupt */
    324            CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
    325          
    326          }
    327          
    328          
    329          ////=============================================
    330          void hw_board_init(void)
    331          {
    332          init_gpio();
    333          UART_DBG_Init(); 
    334          CAN_Config();
    335          ////led_tim_init();
    336          ////mot_tim_init();
    337          }
    338          ////============================================
    339          ////========================================================   
    340          void tst_task( void *pvParameters )
    341          {
    342          printk("\n\r tst_task"); 
    343          for(;;)
    344            {
    345          //// sendchar2 (0x33) ; 
    346          ////  put_tst_pin(btst);
    347          ///  btst++;  
    348            ////delay__ms(1);  
    349            uDelay(20000);
    350            }
    351          }
    352          ////============================================
    353          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   CAN_Config
        48   -> CAN_DeInit
        48   -> CAN_FilterInit
        48   -> CAN_ITConfig
        48   -> CAN_Init
        48   -> CAN_StructInit
        48   -> GPIO_Init
        48   -> GPIO_PinAFConfig
        48   -> RCC_AHB1PeriphClockCmd
        48   -> RCC_APB1PeriphClockCmd
      24   UART_DBG_Init
        24   -> RCC_APB1PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_Init
       0   get_byte2
       0   get_byte_dbg
       8   hw_board_init
         8   -> CAN_Config
         8   -> UART_DBG_Init
         8   -> init_gpio
      24   init_gpio
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> GPIO_SetBits
        24   -> RCC_AHB1PeriphClockCmd
       8   send_char_dbg
         8   -> sendchar2
       0   sendchar2
       8   tst_task
         8   -> printf
         8   -> uDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
      12  ?_0
     304  CAN_Config
      84  UART_DBG_Init
      20  get_byte2
      20  get_byte_dbg
      16  hw_board_init
     808  init_gpio
      14  send_char_dbg
      24  sendchar2
      20  tst_task

 
    12 bytes in section .rodata
 1'342 bytes in section .text
 
 1'342 bytes of CODE  memory
    12 bytes of CONST memory

Errors: none
Warnings: none
