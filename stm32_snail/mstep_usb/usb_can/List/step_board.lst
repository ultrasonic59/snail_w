###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         28/Nov/2020  18:17:02
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\step_board.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EW6842.tmp
#        (D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\step_board.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -lcN
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\dbg\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\List\step_board.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\Obj\step_board.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\step_board.c
      1          #include <string.h>
      2          #include "FreeRTOS.h"
      3          #include "queue.h"
      4          #include "semphr.h"
      5          ///#include "stm32f2xx_gpio.h"
      6          ///#include "stm32f2xx_rcc.h"
      7          
      8          ////#include "board.h"
      9          #include "step_board.h"
     10          #include "printk.h"
     11          
     12          extern void uDelay (const uint32_t usec);
     13          extern void  put_tst_pin(uint8_t idat);
     14          void mot_spi_wr(uint8_t addr,uint16_t idata);
     15          uint16_t mot_spi_rd(uint8_t addr);
     16          
     17          ///=============================
     18          int sendchar6 (int c) 
     19          { 
     20          while (!(USART6->SR & 0x0080));
     21          USART6->DR = (c & 0x1FF);
     22          return (c);
     23          }
     24          
     25          int get_byte6 (void) 
     26          {
     27          while (!(USART6->SR & 0x0020));
     28          return (USART6->DR);
     29          }
     30          
     31          void _putk(char ch)
     32          {
     33          //sendchar_hdlc(ch);
     34          sendchar6(ch);
     35          }
     36          
     37          void init_gpio(void)
     38          {
     39          ////RCC_AHBPeriphClockCmd(XEN_PIN_RCC_AHB,ENABLE);
     40          GPIO_InitTypeDef GPIO_InitStructure;
     41          #if 0
     42          ////=============== TST1 ============================
     43          RCC_AHB1PeriphClockCmd(TST1_PIN_RCC, ENABLE);
     44          GPIO_InitStructure.GPIO_Pin = TST1_PIN;
     45          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     46          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     47          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     48          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     49          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     50          GPIO_Init( TST1_PIN_GPIO, &GPIO_InitStructure );
     51          GPIO_SetBits(TST1_PIN_GPIO, TST1_PIN);
     52          #endif
     53          
     54          ////=============== TST2 ============================
     55          RCC_AHB1PeriphClockCmd(TST2_PIN_RCC, ENABLE);
     56          GPIO_InitStructure.GPIO_Pin = TST2_PIN;
     57          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     58          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     59          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     60          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     61          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     62          GPIO_Init( TST2_PIN_GPIO, &GPIO_InitStructure );
     63          ////=============== TST3 ============================
     64          RCC_AHB1PeriphClockCmd(TST3_PIN_RCC, ENABLE);
     65          GPIO_InitStructure.GPIO_Pin = TST3_PIN;
     66          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     67          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     68          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     69          
     70          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     71          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     72          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     73          GPIO_Init( TST3_PIN_GPIO, &GPIO_InitStructure );
     74          GPIO_PinAFConfig(TST3_PIN_GPIO, TST3_PIN_NPIN, GPIO_AF_TIM1);
     75          
     76          ////=============== TST7 ============================
     77          RCC_AHB1PeriphClockCmd(TST7_PIN_RCC, ENABLE);
     78          GPIO_InitStructure.GPIO_Pin = TST7_PIN;
     79          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     80          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     81          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     82          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     83          GPIO_Init( TST7_PIN_GPIO, &GPIO_InitStructure );
     84          GPIO_PinAFConfig(TST7_PIN_GPIO, TST7_PIN_NPIN, GPIO_AF_TIM8);
     85            
     86          ////=========== DBG_UART =================================================== 
     87          RCC_AHB1PeriphClockCmd(UART_DBG_TX_RCC, ENABLE);
     88          GPIO_InitStructure.GPIO_Pin = UART_DBG_TX_PIN;
     89          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     90          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     91          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     92          GPIO_Init( UART_DBG_TX_GPIO, &GPIO_InitStructure );
     93          
     94          RCC_AHB1PeriphClockCmd(UART_DBG_RX_RCC, ENABLE);
     95          GPIO_InitStructure.GPIO_Pin = UART_DBG_RX_PIN;
     96          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     97          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     98          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     99          GPIO_Init( UART_DBG_RX_GPIO, &GPIO_InitStructure );
    100            
    101          GPIO_PinAFConfig(UART_DBG_TX_GPIO, UART_DBG_TX_PIN_NPIN, UART_DBG_TX_AF);
    102          GPIO_PinAFConfig(UART_DBG_RX_GPIO, UART_DBG_RX_PIN_NPIN, UART_DBG_RX_AF);
    103          ////===================================================================
    104          ////=============== MOT_FAULT ============================
    105          RCC_AHB1PeriphClockCmd(MOT_FAULT_PIN_RCC, ENABLE);
    106          GPIO_InitStructure.GPIO_Pin = MOT_FAULT_PIN;
    107          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    108          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    109          GPIO_Init( MOT_FAULT_PIN_GPIO, &GPIO_InitStructure );
    110          ////=============== MOT_STALLN ============================
    111          RCC_AHB1PeriphClockCmd(MOT_STALLN_PIN_RCC, ENABLE);
    112          GPIO_InitStructure.GPIO_Pin = MOT_STALLN_PIN;
    113          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    114          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    115          GPIO_Init( MOT_STALLN_PIN_GPIO, &GPIO_InitStructure );
    116          ////=============== CONC ============================
    117          RCC_AHB1PeriphClockCmd(CONC_PIN_RCC, ENABLE);
    118          GPIO_InitStructure.GPIO_Pin = CONC_PIN;
    119          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    120          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    121          GPIO_Init( CONC_PIN_GPIO, &GPIO_InitStructure );
    122          ////=============== ENC_A ============================
    123          RCC_AHB1PeriphClockCmd(ENC_A_PIN_RCC, ENABLE);
    124          GPIO_InitStructure.GPIO_Pin = ENC_A_PIN;
    125          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    126          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    127          GPIO_Init( ENC_A_PIN_GPIO, &GPIO_InitStructure );
    128          ////=============== ENC_B ============================
    129          RCC_AHB1PeriphClockCmd(ENC_B_PIN_RCC, ENABLE);
    130          GPIO_InitStructure.GPIO_Pin = ENC_B_PIN;
    131          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    132          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    133          GPIO_Init( ENC_B_PIN_GPIO, &GPIO_InitStructure );
    134          ////=============== ENC_C ============================
    135          RCC_AHB1PeriphClockCmd(ENC_C_PIN_RCC, ENABLE);
    136          GPIO_InitStructure.GPIO_Pin = ENC_C_PIN;
    137          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    138          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    139          GPIO_Init( ENC_C_PIN_GPIO, &GPIO_InitStructure );
    140          
    141          #if 0
    142          ////=============== MOT_M2 ============================
    143          RCC_AHB1PeriphClockCmd(MOT_M2_PIN_RCC, ENABLE);
    144          GPIO_InitStructure.GPIO_Pin = MOT_M2_PIN;
    145          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    146          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    147          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    148          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    149          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    150          GPIO_Init( MOT_M2_PIN_GPIO, &GPIO_InitStructure );
    151          ////=============== MOT_M1 ============================
    152          RCC_AHB1PeriphClockCmd(MOT_M1_PIN_RCC, ENABLE);
    153          GPIO_InitStructure.GPIO_Pin = MOT_M1_PIN;
    154          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    155          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    156          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    157          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    158          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    159          GPIO_Init( MOT_M1_PIN_GPIO, &GPIO_InitStructure );
    160          ////=============== MOT_M0 ============================
    161          RCC_AHB1PeriphClockCmd(MOT_M0_PIN_RCC, ENABLE);
    162          GPIO_InitStructure.GPIO_Pin = MOT_M0_PIN;
    163          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    164          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    165          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    166          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    167          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    168          GPIO_Init( MOT_M0_PIN_GPIO, &GPIO_InitStructure );
    169          ////=============== MOT_ENA ============================
    170          RCC_AHB1PeriphClockCmd(MOT_ENA_PIN_RCC, ENABLE);
    171          GPIO_InitStructure.GPIO_Pin = MOT_ENA_PIN;
    172          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    173          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    174          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    175          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    176          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    177          GPIO_Init( MOT_ENA_PIN_GPIO, &GPIO_InitStructure );
    178          #endif
    179          
    180          ////=============== MOT_RESET ============================
    181          RCC_AHB1PeriphClockCmd(MOT_RESET_PIN_RCC, ENABLE);
    182          GPIO_InitStructure.GPIO_Pin = MOT_RESET_PIN;
    183          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    184          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    185          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    186          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    187          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    188          GPIO_Init( MOT_RESET_PIN_GPIO, &GPIO_InitStructure );
    189          ////=============== MOT_SLEEP ============================
    190          RCC_AHB1PeriphClockCmd(MOT_SLEEP_PIN_RCC, ENABLE);
    191          GPIO_InitStructure.GPIO_Pin = MOT_SLEEP_PIN;
    192          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    193          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    194          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    195          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    196          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    197          GPIO_Init( MOT_SLEEP_PIN_GPIO, &GPIO_InitStructure );
    198          ////#define MOT_STEP_TIM  	        TIM12
    199          ////=============== MOT_STEP ============================
    200          RCC_AHB1PeriphClockCmd(MOT_STEP_PIN_RCC, ENABLE);
    201          GPIO_InitStructure.GPIO_Pin = MOT_STEP_PIN;
    202          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    203          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    204          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    205          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    206          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    207          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    208          GPIO_Init( MOT_STEP_PIN_GPIO, &GPIO_InitStructure );
    209          GPIO_PinAFConfig(MOT_STEP_PIN_GPIO, MOT_STEP_PIN_NPIN, GPIO_AF_TIM1);
    210          ////===================================================================
    211          
    212          ////=============== MOT_DIR ============================
    213          RCC_AHB1PeriphClockCmd(MOT_DIR_PIN_RCC, ENABLE);
    214          GPIO_InitStructure.GPIO_Pin = MOT_DIR_PIN;
    215          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    216          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    217          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    218          ////GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    219          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    220          GPIO_Init( MOT_DIR_PIN_GPIO, &GPIO_InitStructure );
    221          ////GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    222          
    223          ////=============== MOT_SPI_SCS ============================
    224          RCC_AHB1PeriphClockCmd(MOT_SPI_SCS_PIN_RCC, ENABLE);
    225          GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCS_PIN;
    226          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    227          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    228          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    229          GPIO_Init( MOT_SPI_SCS_PIN_GPIO, &GPIO_InitStructure );
    230          }
    231          ////=============================================
    232          void UART_DBG_Init(void)
    233          {
    234          ////GPIO_InitTypeDef GPIO_InitStructure;
    235          USART_InitTypeDef USART_InitStructure;
    236          UART_DBG_CLK_INIT(UART_DBG_CLK, ENABLE);
    237          USART_DeInit(UART_DBG);
    238          USART_InitStructure.USART_BaudRate = 115200;
    239          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    240          USART_InitStructure.USART_StopBits = USART_StopBits_1 ;
    241          USART_InitStructure.USART_Parity = USART_Parity_No;
    242          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    243          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    244          USART_Init(UART_DBG, &USART_InitStructure);
    245          UART_DBG->CR1 |= USART_CR1_RXNEIE;
    246          USART_Cmd(UART_DBG, ENABLE);
    247          }
    248          
    249          ////==================================================
    250          
    251          void  set_sleep_mot(uint8_t idat)
    252          {
    253          if(idat&0x1)
    254            {
    255            GPIO_SetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    256            }
    257          else
    258            {
    259             GPIO_ResetBits(MOT_SLEEP_PIN_GPIO, MOT_SLEEP_PIN);
    260            }
    261          }
    262          void  set_dir_mot(uint8_t idat)
    263          {
    264          if(idat&0x1)
    265            {
    266            GPIO_SetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    267            }
    268          else
    269            {
    270             GPIO_ResetBits(MOT_DIR_PIN_GPIO, MOT_DIR_PIN);
    271            }
    272          }
    273          void  set_reset_mot(uint8_t idat)
    274          {
    275          if(idat&0x1)
    276            {
    277            GPIO_SetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    278            }
    279          else
    280            {
    281             GPIO_ResetBits(MOT_RESET_PIN_GPIO, MOT_RESET_PIN);
    282            }
    283          }
    284          
    285          ////==================================================
    286          
    287          volatile uint32_t num_step=0;
    288          
    289          void mot_tim_init(void)
    290          {
    291          NVIC_InitTypeDef NVIC_InitStructure; 
    292          
    293          RCC->APB2ENR |= MOT_STEP_TIM_RCC;
    294          MOT_STEP_TIM ->PSC = MOT_TIM_PRESC;
    295          ////LED_PWM_TIM->ARR = 1000;
    296          MOT_STEP_TIM ->ARR = MOT_TIM_PERIOD;////
    297          ////MOT_STEP_TIM ->CCR2 = MOT_TIM_PERIOD/2;////30;
    298          MOT_STEP_TIM ->CCR1 = MOT_TIM_PERIOD/2;////30;
    299          MOT_STEP_TIM->CCER |= TIM_CCER_CC1E;////TIM_CCER_CC2NE;////| TIM_CCER_CC3NP;
    300          MOT_STEP_TIM->BDTR |= TIM_BDTR_MOE;
    301          ////MOT_STEP_TIM->CCMR1 = TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1; 
    302          MOT_STEP_TIM->CCMR1 = TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; 
    303          MOT_STEP_TIM->CR1 &= ~TIM_CR1_DIR;
    304          MOT_STEP_TIM->CR1 &= ~TIM_CR1_CMS;
    305          ///MOT_STEP_TIM->CR1 |= TIM_CR1_CEN;
    306          
    307          MOT_STEP_TIM ->DIER = TIM_DIER_CC1IE;
    308          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC1);
    309          
    310          NVIC_InitStructure.NVIC_IRQChannel = MOT_TIM_IRQN;
    311          	// highest priority
    312          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
    313          
    314          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    315          	// highest priority
    316          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    317          NVIC_Init(&NVIC_InitStructure);
    318          ///TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC2, ENABLE);
    319          ///TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC1, ENABLE);
    320          
    321          
    322          }
    323          void stop_mot_step_tim(void)
    324          {
    325          TIM_Cmd(MOT_STEP_TIM, DISABLE);
    326          }
    327          void ena_mot(uint8_t ena_dis)
    328          {
    329          uint16_t tmp;
    330           
    331          tmp=mot_spi_rd(ADDR_MOT_CTRL);
    332          if(ena_dis&0x1)
    333          {
    334          tmp|=0x1;
    335          }
    336          else
    337          {
    338          tmp&= ~0x1;
    339          }
    340          mot_spi_wr(ADDR_MOT_CTRL,tmp);
    341          }
    342          void put_mot_nstep(uint32_t nstep)
    343          {
    344          ena_mot(1) ;
    345           num_step=nstep; 
    346          TIM_ITConfig(MOT_STEP_TIM, TIM_IT_CC1, ENABLE);
    347          TIM_Cmd(MOT_STEP_TIM, ENABLE);
    348          }
    349          volatile uint32_t gsr;
    350          ////=======================================================
    351          void MOT_STEP_TIM_IRQHandler(void)
    352          { 
    353          if(num_step)
    354            {
    355            num_step--;  
    356            if(num_step==0)
    357              {
    358              stop_mot_step_tim(); 
    359              ena_mot(0) ;
    360              }
    361            }
    362          ////TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC2);
    363          TIM_ClearITPendingBit(MOT_STEP_TIM, TIM_IT_CC1);
    364          }
    365          
    366          uint8_t get_conc(void)
    367          {
    368          return GPIO_ReadInputDataBit(CONC_PIN_GPIO, CONC_PIN);
    369          }
    370          ////=============================================
    371          void hw_board_init(void)
    372          {
    373          NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
    374          init_gpio();
    375          UART_DBG_Init(); 
    376          
    377          mot_tim_init();
    378          mot_spi_init();
    379          }
    380          ////============================================
    381          ////==============================================
    382          void mot_spi_init(void)
    383          {
    384          GPIO_InitTypeDef GPIO_InitStructure;
    385          SPI_InitTypeDef  SPI_InitStructure;
    386            MOT_SPI_PeriphClockCmd(MOT_SPI_RCC, ENABLE);
    387            
    388          RCC_AHB1PeriphClockCmd(MOT_SPI_SCK_PIN_RCC,ENABLE);
    389          RCC_AHB1PeriphClockCmd(MOT_SPI_MISO_PIN_RCC,ENABLE);
    390          RCC_AHB1PeriphClockCmd(MOT_SPI_MOSI_PIN_RCC,ENABLE);
    391          ////RCC_AHB1PeriphClockCmd(MOT_SPI_SCS_PIN_RCC,ENABLE);
    392          
    393          GPIO_PinAFConfig(MOT_SPI_SCK_PIN_GPIO, MOT_SPI_SCK_PIN_NPIN, MOT_SPI_AF);
    394          GPIO_PinAFConfig(MOT_SPI_MISO_PIN_GPIO, MOT_SPI_MISO_PIN_NPIN, MOT_SPI_AF);
    395          GPIO_PinAFConfig(MOT_SPI_MOSI_PIN_GPIO, MOT_SPI_MOSI_PIN_NPIN, MOT_SPI_AF);
    396          ////GPIO_PinAFConfig(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN_NPIN, MOT_SPI_AF);
    397          
    398          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    399          GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    400          ////GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    401          ///GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
    402          GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    403          GPIO_InitStructure.GPIO_Pin = MOT_SPI_MISO_PIN;
    404          GPIO_Init(MOT_SPI_MISO_PIN_GPIO, &GPIO_InitStructure);
    405          
    406          GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    407          GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCK_PIN;
    408          GPIO_Init(MOT_SPI_SCK_PIN_GPIO, &GPIO_InitStructure);
    409          ////GPIO_InitStructure.GPIO_Pin = MOT_SPI_MISO_PIN;
    410          /////GPIO_Init(MOT_SPI_MISO_PIN_GPIO, &GPIO_InitStructure);
    411          GPIO_InitStructure.GPIO_Pin = MOT_SPI_MOSI_PIN;
    412          GPIO_Init(MOT_SPI_MOSI_PIN_GPIO, &GPIO_InitStructure);
    413          
    414          ////GPIO_InitStructure.GPIO_Pin = MOT_SPI_SCS_PIN;
    415          /////GPIO_Init(MOT_SPI_SCS_PIN_GPIO, &GPIO_InitStructure);
    416          
    417          SPI_I2S_DeInit(MOT_SPI);
    418          SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    419          SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
    420          SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
    421          SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
    422          SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;///SPI_NSS_Hard;///SPI_NSS_Soft;///SPI_NSS_Hard;
    423          SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
    424          SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
    425          SPI_InitStructure.SPI_CRCPolynomial = 7;
    426          SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
    427          SPI_Init(MOT_SPI, &SPI_InitStructure);
    428          SPI_Cmd(MOT_SPI, ENABLE);
    429          }
    430          uint16_t mot_spi_transfer(uint16_t i_data)
    431          {
    432          uint16_t rez=0; 
    433          GPIO_SetBits(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN);
    434          
    435          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_TXE) == RESET);
    436          SPI_I2S_SendData(MOT_SPI, i_data);
    437          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_RXNE) == RESET);
    438          while (SPI_I2S_GetFlagStatus(MOT_SPI, SPI_I2S_FLAG_TXE) == RESET);
    439          rez=SPI_I2S_ReceiveData(MOT_SPI);
    440          GPIO_ResetBits(MOT_SPI_SCS_PIN_GPIO, MOT_SPI_SCS_PIN);
    441          return rez;
    442          }
    443          ////==============================================
    444          void mot_spi_set_br(u16 br)
    445          {
    446          uint16_t tmpreg = 0;
    447          tmpreg = MOT_SPI->CR1& ~(0x7<<3);
    448          tmpreg |=	br&(0x7<<3);
    449          MOT_SPI->CR1=tmpreg;
    450          }
    451          
    452          void mot_spi_wr(uint8_t addr,uint16_t idata)
    453          {
    454          uint16_t tmp;
    455          tmp=(addr&0x7)<<12;
    456          tmp|= idata&0xfff;
    457          mot_spi_transfer(tmp);
    458          }
    459          void mot_spi_wrp(uint8_t addr,uint16_t *pdata)
    460          {
    461          uint16_t tmp;
    462          memcpy(&tmp,pdata,sizeof(uint16_t));
    463          mot_spi_wr(addr,tmp);       
    464          }
    465          uint16_t mot_spi_rd(uint8_t addr)
    466          {
    467          uint16_t rez;
    468          uint16_t tmp;
    469          tmp=(addr&0x7)<<12;
    470          tmp|= 0x8000;
    471          rez=mot_spi_transfer(tmp);
    472          return rez&0xfff;
    473          }
    474          ////========================================================  
    475          
    476          CTRL_Register_t 	G_CTRL_REG;
    477          TORQUE_Register_t 	G_TORQUE_REG;
    478           OFF_Register_t 	G_OFF_REG;
    479          BLANK_Register_t	G_BLANK_REG;
    480          DECAY_Register_t 	G_DECAY_REG;
    481          STALL_Register_t 	G_STALL_REG;
    482          DRIVE_Register_t 	G_DRIVE_REG;
    483          STATUS_Register_t 	G_STATUS_REG;
    484          
    485          void init_step_mot(void)
    486          {
    487            
    488          // CTRL Register
    489          
    490          G_CTRL_REG.DTIME 	= 0x03;
    491          G_CTRL_REG.ISGAIN 	= 0x03;
    492          G_CTRL_REG.EXSTALL 	= 0x00;
    493          G_CTRL_REG.MODE 	= 0;///0x03;
    494          G_CTRL_REG.RSTEP 	= 0x00;
    495          G_CTRL_REG.RDIR 	= 0x00;
    496          G_CTRL_REG.ENBL 	= 0x01;
    497          
    498          // TORQUE Register
    499          G_TORQUE_REG.SIMPLTH = 0x00;
    500          G_TORQUE_REG.TORQUE  = 0xBA;
    501          
    502          // OFF Register
    503          G_OFF_REG.PWMMODE 	= 0x00;
    504          G_OFF_REG.TOFF 		= 0x30;
    505          
    506          // BLANK Register
    507          G_BLANK_REG.ABT 	= 0x01;
    508          G_BLANK_REG.TBLANK 	= 0x08;
    509          
    510          // DECAY Register.
    511          G_DECAY_REG.DECMOD  = 0x03;
    512          G_DECAY_REG.TDECAY 	= 0x10;
    513          
    514          // STALL Register
    515          G_STALL_REG.VDIV 	= 0x03;
    516          G_STALL_REG.SDCNT 	= 0x03;
    517          G_STALL_REG.SDTHR 	= 0x40;
    518          
    519          // DRIVE Register
    520          G_DRIVE_REG.OCPTH 	= 0x01;
    521          G_DRIVE_REG.IDRIVEP = 0x00;
    522          G_DRIVE_REG.IDRIVEN = 0x00;
    523          G_DRIVE_REG.TDRIVEP = 0x01;
    524          G_DRIVE_REG.TDRIVEN = 0x01;
    525          G_DRIVE_REG.OCPDEG 	= 0x01;
    526          
    527          mot_spi_wrp(ADDR_MOT_CTRL,(uint16_t*)&G_CTRL_REG);
    528          mot_spi_wrp(ADDR_MOT_TORQUE,(uint16_t*)&G_TORQUE_REG);
    529          mot_spi_wrp(ADDR_MOT_OFF,(uint16_t*)&G_OFF_REG);
    530          mot_spi_wrp(ADDR_MOT_BLANK,(uint16_t*)&G_BLANK_REG);
    531          mot_spi_wrp(ADDR_MOT_DECAY,(uint16_t*)&G_DECAY_REG);
    532          mot_spi_wrp(ADDR_MOT_STALL,(uint16_t*)&G_STALL_REG);
    533          mot_spi_wrp(ADDR_MOT_DRIVE,(uint16_t*)&G_DRIVE_REG);
    534          
    535          }
    536          ////========================================================  
    537          void set_mot_rej(uint8_t rej)
    538          {
    539          uint16_t tmp;
    540          CTRL_Register_t 	*t_ctrl_reg=(CTRL_Register_t*)&tmp;
    541          tmp=mot_spi_rd(ADDR_MOT_CTRL);
    542          t_ctrl_reg->MODE=rej;
    543          mot_spi_wr(ADDR_MOT_CTRL,tmp);
    544          }
    545          void tst_task( void *pvParameters )
    546          {
    547          ///uint8_t btst=0; 
    548          uint8_t psk=0; 
    549          ///uint16_t tst;
    550          char key=0;
    551          int nstep=300;
    552          uint8_t dir=0;
    553          uint8_t mot_rej=0;
    554          printk("\n\r tst_task"); 
    555          
    556          set_sleep_mot(1);
    557          ////set_ena_mot(1);
    558          set_reset_mot(1);
    559          uDelay(1000);
    560          set_reset_mot(0);
    561          uDelay(20000);
    562          init_step_mot();
    563          ////set_ena_mot(0);
    564          ///tst=mot_spi_rd(0x0);
    565          ///tst|=0x1;
    566          ///mot_spi_wr(0x0,tst);
    567          #if 0      
    568          for(;;)
    569            {
    570          //// sendchar2 (0x33) ; 
    571            put_tst_pin(btst);
    572            btst++;  
    573            ////delay__ms(1);  
    574            uDelay(20000);
    575          ///  mot_spi_transfer(0x1234);
    576          tst=mot_spi_rd(0x0);
    577          printk("\n\r rd[%x]",tst); 
    578          
    579            }
    580          #endif 
    581          
    582              ena_mot(0) ;
    583          
    584           for(;;)
    585            {
    586            key=dbg_get_byte() ;  
    587            switch(key)
    588              {
    589              case 'a':
    590                nstep += 20;
    591                break;
    592              case 's':
    593                if(nstep)
    594                  nstep-= 20;
    595                  break;
    596              case 'd':
    597                dir ++;
    598                dir&=0x1;
    599                break;
    600              case 'm':
    601                mot_rej ++;
    602                if(mot_rej>8)
    603                  mot_rej=0;
    604           ////     mot_rej&=0x7;
    605                break;
    606              case 'p':
    607               psk=1;
    608                break;
    609               
    610             }
    611            printk("\n\r nstep[%d] dir[%x] Mot_rej[%x]",nstep,dir,mot_rej); 
    612            set_dir_mot(dir);
    613            set_mot_rej(mot_rej);
    614            if(psk)
    615              {
    616              put_mot_nstep(nstep);
    617              psk=0;
    618              }
    619          ////  set_led_dutycycle (duty);
    620          
    621            } 
    622          }
    623          ////============================================
    624          
    625          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM1_CC_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> ena_mot
         8   -> stop_mot_step_tim
      24   UART_DBG_Init
        24   -> RCC_APB2PeriphClockCmd
        24   -> USART_Cmd
        24   -> USART_DeInit
        24   -> USART_Init
       8   _putk
         8   -> sendchar6
      16   ena_mot
        16   -> mot_spi_rd
        16   -> mot_spi_wr
       0   get_byte6
       8   get_conc
         8   -> GPIO_ReadInputDataBit
       8   hw_board_init
         8   -> NVIC_PriorityGroupConfig
         8   -> UART_DBG_Init
         8   -> init_gpio
         8   -> mot_spi_init
         8   -> mot_tim_init
      32   init_gpio
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
        32   -> RCC_AHB1PeriphClockCmd
      32   init_step_mot
        32   -> mot_spi_wrp
      40   mot_spi_init
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB1PeriphClockCmd
        40   -> SPI_Cmd
        40   -> SPI_I2S_DeInit
        40   -> SPI_Init
      16   mot_spi_rd
        16   -> mot_spi_transfer
       4   mot_spi_set_br
      24   mot_spi_transfer
        24   -> GPIO_ResetBits
        24   -> GPIO_SetBits
        24   -> SPI_I2S_GetFlagStatus
        24   -> SPI_I2S_ReceiveData
        24   -> SPI_I2S_SendData
      16   mot_spi_wr
        16   -> mot_spi_transfer
      32   mot_spi_wrp
        32   -> __aeabi_memcpy
        32   -> mot_spi_wr
       8   mot_tim_init
         8   -> NVIC_Init
         8   -> TIM_ClearITPendingBit
      16   put_mot_nstep
        16   -> TIM_Cmd
        16   -> TIM_ITConfig
        16   -> ena_mot
       0   sendchar6
       8   set_dir_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
      16   set_mot_rej
        16   -> mot_spi_rd
        16   -> mot_spi_wr
       8   set_reset_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   set_sleep_mot
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   stop_mot_step_tim
         8   -> TIM_Cmd
      32   tst_task
        32   -> _printk
        32   -> ena_mot
        32   -> get_byte6
        32   -> init_step_mot
        32   -> put_mot_nstep
        32   -> set_dir_mot
        32   -> set_mot_rej
        32   -> set_reset_mot
        32   -> set_sleep_mot
        32   -> uDelay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_20
       4  ??DataTable16_21
       4  ??DataTable16_22
       4  ??DataTable16_23
       4  ??DataTable16_24
       4  ??DataTable16_25
       4  ??DataTable16_26
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
      12  ?_0
      36  ?_1
       2  G_BLANK_REG
       2  G_CTRL_REG
       2  G_DECAY_REG
       2  G_DRIVE_REG
       2  G_OFF_REG
       2  G_STALL_REG
       2  G_STATUS_REG
       2  G_TORQUE_REG
      46  TIM1_CC_IRQHandler
      86  UART_DBG_Init
      14  _putk
      40  ena_mot
      20  get_byte6
      14  get_conc
       4  gsr
      28  hw_board_init
     658  init_gpio
     354  init_step_mot
     228  mot_spi_init
      32  mot_spi_rd
      26  mot_spi_set_br
      90  mot_spi_transfer
      32  mot_spi_wr
      40  mot_spi_wrp
     144  mot_tim_init
       4  num_step
      40  put_mot_nstep
      24  sendchar6
      36  set_dir_mot
      40  set_mot_rej
      36  set_reset_mot
      36  set_sleep_mot
      14  stop_mot_step_tim
     200  tst_task

 
    24 bytes in section .bss
    48 bytes in section .rodata
 2'386 bytes in section .text
 
 2'386 bytes of CODE  memory
    48 bytes of CONST memory
    24 bytes of DATA  memory

Errors: none
Warnings: none
