###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         08/May/2021  18:23:20
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  D:\proj\velograph\snail\stm32_snail\common\usb\usbd_desc.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWCA14.tmp
#        (D:\proj\velograph\snail\stm32_snail\common\usb\usbd_desc.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -D USE_USB_OTG_FS
#        -lcN D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\dbg\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\core\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\drv\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\hdlc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\cdc\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\List\usbd_desc.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\Obj\usbd_desc.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\common\usb\usbd_desc.c
      1          #include "usbd_desc.h"
      2          
      3          
      4          /** @defgroup USBD_DESC_Private_Defines
      5            * @{
      6            */ 
      7          
      8          USBD_DEVICE USR_desc =
      9          {
     10            USBD_USR_DeviceDescriptor,
     11            USBD_USR_LangIDStrDescriptor, 
     12            USBD_USR_ManufacturerStrDescriptor,
     13            USBD_USR_ProductStrDescriptor,
     14            USBD_USR_SerialStrDescriptor,
     15            USBD_USR_ConfigStrDescriptor,
     16            USBD_USR_InterfaceStrDescriptor,
     17          };
     18          
     19          ////#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     20          #pragma data_alignment=4   
     21          /////#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
     22          /* USB Standard Device Descriptor */
     23          __ALIGN_BEGIN uint8_t USBD_DeviceDesc[USB_SIZ_DEVICE_DESC] __ALIGN_END =
     24          {
     25            0x12,                       /*bLength */
     26            USB_DEVICE_DESCRIPTOR_TYPE, /*bDescriptorType*/
     27            0x00,                       /*bcdUSB */
     28            0x02,
     29          ////#if (USB_CLASS==MSC_CDC)
     30          ////  0xEF,
     31          ////  0x02,
     32          ////#elif (USB_CLASS==MSC)
     33          ////  0x0,
     34          ////  0x0,
     35          ////#else  
     36            DEVIECE_CLASS,                       /*bDeviceClass*/
     37            DEVIECE_SUBCLASS,                       /*bDeviceSubClass*/
     38          ////#endif  
     39          ///  0x00,                       /*bDeviceProtocol*/
     40            0x01,                       /*bDeviceProtocol*/
     41            USB_OTG_MAX_EP0_SIZE,      /*bMaxPacketSize*/
     42            LOBYTE(USBD_VID),           /*idVendor*/
     43            HIBYTE(USBD_VID),           /*idVendor*/
     44            LOBYTE(USBD_PID),           /*idVendor*/
     45            HIBYTE(USBD_PID),           /*idVendor*/
     46            0x00,                       /*bcdDevice rel. 2.00*/
     47            0x02,
     48          ///  0x00,                       /*bcdDevice rel. 1.00*/
     49          ///  0x01,
     50            USBD_IDX_MFC_STR,           /*Index of manufacturer  string*/
     51            USBD_IDX_PRODUCT_STR,       /*Index of product string*/
     52            USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
     53            USBD_CFG_MAX_NUM            /*bNumConfigurations*/
     54          } ; /* USB_DeviceDescriptor */
     55          
     56          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     57           #pragma data_alignment=4   
     58          #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
     59          /* USB Standard Device Descriptor */
     60          __ALIGN_BEGIN uint8_t USBD_DeviceQualifierDesc[USB_LEN_DEV_QUALIFIER_DESC] __ALIGN_END =
     61          {
     62            USB_LEN_DEV_QUALIFIER_DESC,
     63            USB_DESC_TYPE_DEVICE_QUALIFIER,
     64            0x00,
     65            0x02,
     66            0x00,
     67            0x00,
     68            0x00,
     69            0x40,
     70            0x01,
     71            0x00,
     72          };
     73          
     74          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     75          #pragma data_alignment=4   
     76          #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
     77          /* USB Standard Device Descriptor */
     78          __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_SIZ_STRING_LANGID] __ALIGN_END =
     79          {
     80            USB_SIZ_STRING_LANGID,         
     81            USB_DESC_TYPE_STRING,       
     82            LOBYTE(USBD_LANGID_STRING),
     83            HIBYTE(USBD_LANGID_STRING), 
     84          };
     85          
     86          uint8_t USBD_StringSerial[USB_SIZ_STRING_SERIAL] =
     87          {
     88            USB_SIZ_STRING_SERIAL,      
     89            USB_DESC_TYPE_STRING,    
     90          };
     91          
     92          ////#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     93          #pragma data_alignment=4   
     94          ////#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
     95          __ALIGN_BEGIN uint8_t USBD_StrDesc[USB_MAX_STR_DESC_SIZ] __ALIGN_END ;
     96          
     97          
     98          /** @defgroup USBD_DESC_Private_FunctionPrototypes
     99            * @{
    100            */ 
    101          static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len);
    102          static void Get_SerialNum(void);
    103          /**
    104            * @}
    105            */ 
    106          
    107          
    108          /** @defgroup USBD_DESC_Private_Functions
    109            * @{
    110            */ 
    111          
    112          /**
    113          * @brief  USBD_USR_DeviceDescriptor 
    114          *         return the device descriptor
    115          * @param  speed : current device speed
    116          * @param  length : pointer to data length variable
    117          * @retval pointer to descriptor buffer
    118          */
    119          uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
    120          {
    121            *length = sizeof(USBD_DeviceDesc);
    122            return (uint8_t*)USBD_DeviceDesc;
    123          }
    124          
    125          /**
    126          * @brief  USBD_USR_LangIDStrDescriptor 
    127          *         return the LangID string descriptor
    128          * @param  speed : current device speed
    129          * @param  length : pointer to data length variable
    130          * @retval pointer to descriptor buffer
    131          */
    132          uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
    133          {
    134            *length =  sizeof(USBD_LangIDDesc);  
    135            return (uint8_t*)USBD_LangIDDesc;
    136          }
    137          
    138          
    139          /**
    140          * @brief  USBD_USR_ProductStrDescriptor 
    141          *         return the product string descriptor
    142          * @param  speed : current device speed
    143          * @param  length : pointer to data length variable
    144          * @retval pointer to descriptor buffer
    145          */
    146          uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
    147          {
    148            if(speed == 0)
    149            {   
    150              USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
    151            }
    152            else
    153            {
    154              USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
    155            }
    156            return USBD_StrDesc;
    157          }
    158          
    159          /**
    160          * @brief  USBD_USR_ManufacturerStrDescriptor 
    161          *         return the manufacturer string descriptor
    162          * @param  speed : current device speed
    163          * @param  length : pointer to data length variable
    164          * @retval pointer to descriptor buffer
    165          */
    166          uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
    167          {
    168            USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
    169            return USBD_StrDesc;
    170          }
    171          
    172          /**
    173          * @brief  USBD_USR_SerialStrDescriptor 
    174          *         return the serial number string descriptor
    175          * @param  speed : current device speed
    176          * @param  length : pointer to data length variable
    177          * @retval pointer to descriptor buffer
    178          */
    179          uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
    180          {
    181            *length = USB_SIZ_STRING_SERIAL;
    182            
    183            /* Update the serial number string descriptor with the data from the unique ID*/
    184            Get_SerialNum();
    185            
    186            return (uint8_t*)USBD_StringSerial;
    187          }
    188          
    189          /**
    190          * @brief  USBD_USR_ConfigStrDescriptor 
    191          *         return the configuration string descriptor
    192          * @param  speed : current device speed
    193          * @param  length : pointer to data length variable
    194          * @retval pointer to descriptor buffer
    195          */
    196          uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
    197          {
    198            if(speed  == USB_OTG_SPEED_HIGH)
    199            {  
    200              USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
    201            }
    202            else
    203            {
    204              USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
    205            }
    206            return USBD_StrDesc;  
    207          }
    208          
    209          
    210          /**
    211          * @brief  USBD_USR_InterfaceStrDescriptor 
    212          *         return the interface string descriptor
    213          * @param  speed : current device speed
    214          * @param  length : pointer to data length variable
    215          * @retval pointer to descriptor buffer
    216          */
    217          uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
    218          {
    219            if(speed == 0)
    220            {
    221              USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
    222            }
    223            else
    224            {
    225              USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
    226            }
    227            return USBD_StrDesc;  
    228          }
    229          /**
    230            * @brief  Create the serial number string descriptor 
    231            * @param  None 
    232            * @retval None
    233            */
    234          static void Get_SerialNum(void)
    235          {
    236            uint32_t deviceserial0, deviceserial1, deviceserial2;
    237            
    238            deviceserial0 = *(uint32_t*)DEVICE_ID1;
    239            deviceserial1 = *(uint32_t*)DEVICE_ID2;
    240            deviceserial2 = *(uint32_t*)DEVICE_ID3;
    241            
    242            deviceserial0 += deviceserial2;
    243            
    244            if (deviceserial0 != 0)
    245            {
    246              IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
    247              IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
    248            }
    249          }
    250          
    251          /**
    252            * @brief  Convert Hex 32Bits value into char 
    253            * @param  value: value to convert
    254            * @param  pbuf: pointer to the buffer 
    255            * @param  len: buffer length
    256            * @retval None
    257            */
    258          static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
    259          {
    260            uint8_t idx = 0;
    261            
    262            for( idx = 0 ; idx < len ; idx ++)
    263            {
    264              if( ((value >> 28)) < 0xA )
    265              {
    266                pbuf[ 2* idx] = (value >> 28) + '0';
    267              }
    268              else
    269              {
    270                pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    271              }
    272              
    273              value = value << 4;
    274              
    275              pbuf[ 2* idx + 1] = 0;
    276            }
    277          }
    278          
    279          
    280          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    281          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   Get_SerialNum
        24   -> IntToUnicode
       8   IntToUnicode
      16   USBD_USR_ConfigStrDescriptor
        16   -> USBD_GetString
       0   USBD_USR_DeviceDescriptor
      16   USBD_USR_InterfaceStrDescriptor
        16   -> USBD_GetString
       0   USBD_USR_LangIDStrDescriptor
      16   USBD_USR_ManufacturerStrDescriptor
        16   -> USBD_GetString
      16   USBD_USR_ProductStrDescriptor
        16   -> USBD_GetString
      16   USBD_USR_SerialStrDescriptor
        16   -> Get_SerialNum


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      16  ?_0
      12  ?_1
      20  ?_2
      12  ?_3
      16  ?_4
      46  Get_SerialNum
      78  IntToUnicode
      20  USBD_DeviceDesc
      12  USBD_DeviceQualifierDesc
       4  USBD_LangIDDesc
     256  USBD_StrDesc
      28  USBD_StringSerial
      40  USBD_USR_ConfigStrDescriptor
      10  USBD_USR_DeviceDescriptor
      40  USBD_USR_InterfaceStrDescriptor
      10  USBD_USR_LangIDStrDescriptor
      22  USBD_USR_ManufacturerStrDescriptor
      40  USBD_USR_ProductStrDescriptor
      18  USBD_USR_SerialStrDescriptor
      28  USR_desc

 
 256 bytes in section .bss
  92 bytes in section .data
  76 bytes in section .rodata
 352 bytes in section .text
 
 352 bytes of CODE  memory
  76 bytes of CONST memory
 348 bytes of DATA  memory

Errors: none
Warnings: none
