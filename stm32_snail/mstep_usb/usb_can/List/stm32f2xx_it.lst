###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         05/Dec/2020  20:45:04
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\proj\velograph\snail\stm32_snail\common\startup\stm32f2xx_it.c
#    Command line =
#        -f C:\Users\vova\AppData\Local\Temp\EWB6D3.tmp
#        (D:\proj\velograph\snail\stm32_snail\common\startup\stm32f2xx_it.c -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D USEUSB -D MSTEP_BRD -D USE_USB_OTG_FS
#        -lcN D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\List
#        --diag_suppress Pa082,pe191 -o
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\.\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\src\board\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\src\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\freertos\source\port\ARM_CM3\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\dbg\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\libraries\STM32F2xx_StdPeriph_Driver\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\core\inc\
#        -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\drv\inc\
#        -I D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\inc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\hdlc\ -I
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\..\common\usb\cdc\ -On
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\List\stm32f2xx_it.lst
#    Object file  =
#        D:\proj\velograph\snail\stm32_snail\mstep_usb\usb_can\Obj\stm32f2xx_it.o
#
###############################################################################

D:\proj\velograph\snail\stm32_snail\common\startup\stm32f2xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_it.c
      4            * @author  MCD Application Team
      5            * @version V1.0.2
      6            * @date    06-June-2011
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stdio.h"
     26          #include "stm32f2xx_it.h"
     27          
     28          extern void vPortSVCHandler(void);
     29          extern void xPortPendSVHandler(void);
     30          extern void xPortSysTickHandler(void);
     31          extern void usart1_irq(void);
     32          extern void usart2_irq(void);
     33          
     34          
     35          /******************************************************************************/
     36          /*            Cortex-M3 Processor Exceptions Handlers                         */
     37          /******************************************************************************/
     38          
     39          
     40          /**
     41            * @brief   This function handles NMI exception.
     42            * @param  None
     43            * @retval None
     44            */
     45          void NMI_Handler(void)
     46          {
     47            /* Go to infinite loop when Memory Manage exception occurs */
     48            while (1)
     49            {
     50            }
     51          }
     52          
     53          
     54          void hard_fault_handler_c (unsigned int * hardfault_args)
     55          {
     56          #if 1
     57            volatile unsigned int stacked_r0;
     58            volatile unsigned int stacked_r1;
     59            volatile unsigned int stacked_r2;
     60            volatile unsigned int stacked_r3;
     61            volatile unsigned int stacked_r12;
     62            volatile unsigned int stacked_lr;
     63            volatile unsigned int stacked_pc;
     64            volatile unsigned int stacked_psr;
     65           
     66            stacked_r0 = ((unsigned long) hardfault_args[0]);
     67            stacked_r1 = ((unsigned long) hardfault_args[1]);
     68            stacked_r2 = ((unsigned long) hardfault_args[2]);
     69            stacked_r3 = ((unsigned long) hardfault_args[3]);
     70           
     71            stacked_r12 = ((unsigned long) hardfault_args[4]);
     72            stacked_lr = ((unsigned long) hardfault_args[5]);
     73            stacked_pc = ((unsigned long) hardfault_args[6]);
     74            stacked_psr = ((unsigned long) hardfault_args[7]);
     75          #endif
     76           while (1);
     77          #if 0
     78            printf ("\r\n\r\n[Hard fault handler - all numbers in hex]\r\n");
     79            printf ("R0 = %x\r\n", stacked_r0);
     80            printf ("R1 = %x\r\n", stacked_r1);
     81            printf ("R2 = %x\r\n", stacked_r2);
     82            printf ("R3 = %x\r\n", stacked_r3);
     83            printf ("R12 = %x\r\n", stacked_r12);
     84            printf ("LR [R14] = %x  subroutine call return address\r\n", stacked_lr);
     85            printf ("PC [R15] = %x  program counter\r\n", stacked_pc);
     86            printf ("PSR = %x\r\n", stacked_psr);
     87            printf ("BFAR = %x\r\n", (*((volatile unsigned long *)(0xE000ED38))));
     88            printf ("CFSR = %x\r\n", (*((volatile unsigned long *)(0xE000ED28))));
     89            printf ("HFSR = %x\r\n", (*((volatile unsigned long *)(0xE000ED2C))));
     90            printf ("DFSR = %x\r\n", (*((volatile unsigned long *)(0xE000ED30))));
     91            printf ("AFSR = %x\r\n", (*((volatile unsigned long *)(0xE000ED3C))));
     92            printf ("SCB_SHCSR = %x\r\n", SCB->SHCSR);
     93           
     94            while (1);
     95          #endif
     96          }
     97          #if 1
     98          void __HardFault_Handler(void)
     99          {
    100          	/* Go to infinite loop when Hard Fault exception occurs */
    101          	while (1)
    102          	{
    103          	}
    104          }
    105          #endif
    106          /**
    107            * @brief  This function handles Memory Manage exception.
    108            * @param  None
    109            * @retval None
    110            */
    111          void MemManage_Handler(void)
    112          {
    113            /* Go to infinite loop when Memory Manage exception occurs */
    114            while (1)
    115            {
    116            }
    117          }
    118          
    119          /**
    120            * @brief  This function handles Bus Fault exception.
    121            * @param  None
    122            * @retval None
    123            */
    124          void BusFault_Handler(void)
    125          {
    126            /* Go to infinite loop when Bus Fault exception occurs */
    127            while (1)
    128            {
    129            }
    130          }
    131          
    132          /**
    133            * @brief  This function handles Usage Fault exception.
    134            * @param  None
    135            * @retval None
    136            */
    137          void UsageFault_Handler(void)
    138          {
    139            /* Go to infinite loop when Usage Fault exception occurs */
    140            while (1)
    141            {
    142            }
    143          }
    144          
    145          /**
    146            * @brief  This function handles SVCall exception.
    147            * @param  None
    148            * @retval None
    149            */
    150          
    151          void SVC_Handler(void) 
    152          {
    153            vPortSVCHandler();
    154          }
    155          
    156          /**
    157            * @brief  This function handles Debug Monitor exception.
    158            * @param  None
    159            * @retval None
    160            */
    161          void DebugMon_Handler(void)
    162          {
    163          }
    164          
    165          /**
    166            * @brief  This function handles PendSVC exception.
    167            * @param  None
    168            * @retval None
    169            */
    170          void PendSV_Handler(void)
    171          {
    172            xPortPendSVHandler();
    173          }
    174          extern void user_tick_hnd(void);
    175          /**
    176            * @brief  This function handles SysTick Handler.
    177            * @param  None
    178            * @retval None
    179            */
    180          void SysTick_Handler(void) 
    181          {
    182            xPortSysTickHandler();
    183            
    184          }
    185          
    186          /******************************************************************************/
    187          /*                 STM32F2xx Peripherals Interrupt Handlers                   */
    188          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    189          /*  available peripheral interrupt handler's name please refer to the startup */
    190          /*  file (startup_stm32f2xx.s).                                            */
    191          /******************************************************************************/
    192          
    193          /**
    194            * @brief  This function handles PPP interrupt request.
    195            * @param  None
    196            * @retval None
    197            */
    198          /*void PPP_IRQHandler(void)
    199          {
    200          }*/
    201           /*******************************************************************************
    202          * Function Name  : SDIO_IRQHandler
    203          * Description    : This function handles SDIO global interrupt request.
    204          * Input          : None
    205          * Output         : None
    206          * Return         : None
    207          *******************************************************************************/
    208          void SDIO_IRQHandler(void)
    209          {
    210            /* Process All SDIO Interrupt Sources */
    211           ///// sdio_irq();
    212          }
    213          ////extern void sdio_dma_irq(void);
    214          void DMA2_Stream3_IRQHandler(void)
    215          {
    216          ////sdio_dma_irq();
    217          }
    218          void USART1_IRQHandler(void)
    219          {  
    220          ////usart1_irq();
    221          }
    222          extern void usart1_tx_dma_irq(void);
    223          void DMA2_Stream7_IRQHandler(void)
    224          { 
    225          //// usart1_tx_dma_irq();
    226          }
    227          //// extern void usart1_rx_dma_irq(void);
    228          void DMA2_Stream2_IRQHandler(void)
    229          { 
    230          //// usart1_rx_dma_irq();
    231          }
    232          ////=============================
    233          #if 0
    234          /*Bluretooth UART API */
    235          void DMA2_Stream1_IRQHandler(void)
    236          { 
    237          ////  usart6_rx_dma_irq();
    238          }
    239          
    240          void DMA2_Stream6_IRQHandler(void)
    241          {
    242           //// usart6_tx_dma_irq();
    243          }
    244          
    245          void USART6_IRQHandler(void)
    246          {  
    247           ////   usart6_irq();
    248          }
    249          #endif
    250          ////=============================
    251          
    252          /*EXTI ISR*/
    253          void EXTI0_IRQHandler(void)
    254          {
    255          ////gpio_irq();//SDIO OOB interrupt
    256          }
    257          
    258          void EXTI1_IRQHandler(void)
    259          {
    260          ////    gpio_irq();
    261          }
    262          
    263          void EXTI2_IRQHandler(void)
    264          {
    265           ////   gpio_irq();
    266          }
    267          
    268          void EXTI3_IRQHandler(void)
    269          {
    270           ////   gpio_irq();//User defined external interrupt, EMW3162 button 1: PA3
    271          }
    272          
    273          void EXTI4_IRQHandler(void)
    274          {
    275          ////    gpio_irq();
    276          }
    277          
    278          void EXTI9_5_IRQHandler(void)
    279          {
    280          ////    gpio_irq(); //User defined external interrupt, EMW3161 button 1: PH9
    281          }
    282          
    283          void EXTI15_10_IRQHandler(void)
    284          {
    285          ////    gpio_irq();
    286          }
    287          ///==================================================
    288          #include "usb_core.h"
    289          #include "FreeRTOS.h"
    290          #include "task.h"
    291          #include "queue.h"
    292          
    293          extern USB_OTG_CORE_HANDLE           USB_OTG_dev;
    294          extern uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev);
    295          /////extern void my_USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev);
    296          extern xQueueHandle q_usb_in;
    297          ////USB_OTG_CORE_HANDLE           *pUSB_OTG_dev;
    298          /**
    299          * @brief  This function handles OTG_HS Handler.
    300          * @param  None
    301          * @retval None
    302          */
    303          void OTG_FS_IRQHandler(void)
    304          {
    305          USBD_OTG_ISR_Handler(&USB_OTG_dev) ; 
    306          #if 0  
    307          ///signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    308          ///pUSB_OTG_dev=&USB_OTG_dev;
    309          ////xQueueSendFromISR(q_usb_in, &pUSB_OTG_dev, &xHigherPriorityTaskWoken);
    310          my_USBD_OTG_ISR_Handler (&USB_OTG_dev);
    311          #endif  
    312          }
    313          
    314          #ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED 
    315          /**
    316          * @brief  This function handles EP1_IN Handler.
    317          * @param  None
    318          * @retval None
    319          */
    320          void OTG_HS_EP1_IN_IRQHandler(void)
    321          {
    322            USBD_OTG_EP1IN_ISR_Handler (&USB_OTG_dev);
    323          }
    324          
    325          /**
    326          * @brief  This function handles EP1_OUT Handler.
    327          * @param  None
    328          * @retval None
    329          */
    330          void OTG_HS_EP1_OUT_IRQHandler(void)
    331          {
    332            USBD_OTG_EP1OUT_ISR_Handler (&USB_OTG_dev);
    333          }
    334          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DMA2_Stream2_IRQHandler
       0   DMA2_Stream3_IRQHandler
       0   DMA2_Stream7_IRQHandler
       0   DebugMon_Handler
       0   EXTI0_IRQHandler
       0   EXTI15_10_IRQHandler
       0   EXTI1_IRQHandler
       0   EXTI2_IRQHandler
       0   EXTI3_IRQHandler
       0   EXTI4_IRQHandler
       0   EXTI9_5_IRQHandler
       0   MemManage_Handler
       0   NMI_Handler
       8   OTG_FS_IRQHandler
         8   -> USBD_OTG_ISR_Handler
       8   PendSV_Handler
         8   -> xPortPendSVHandler
       0   SDIO_IRQHandler
       8   SVC_Handler
         8   -> vPortSVCHandler
       8   SysTick_Handler
         8   -> xPortSysTickHandler
       0   USART1_IRQHandler
       0   UsageFault_Handler
       0   __HardFault_Handler
      32   hard_fault_handler_c


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       2  BusFault_Handler
       2  DMA2_Stream2_IRQHandler
       2  DMA2_Stream3_IRQHandler
       2  DMA2_Stream7_IRQHandler
       2  DebugMon_Handler
       2  EXTI0_IRQHandler
       2  EXTI15_10_IRQHandler
       2  EXTI1_IRQHandler
       2  EXTI2_IRQHandler
       2  EXTI3_IRQHandler
       2  EXTI4_IRQHandler
       2  EXTI9_5_IRQHandler
       2  MemManage_Handler
       2  NMI_Handler
      10  OTG_FS_IRQHandler
       8  PendSV_Handler
       2  SDIO_IRQHandler
       8  SVC_Handler
       8  SysTick_Handler
       2  USART1_IRQHandler
       2  UsageFault_Handler
       2  __HardFault_Handler
      36  hard_fault_handler_c

 
 110 bytes in section .text
 
 110 bytes of CODE memory

Errors: none
Warnings: none
