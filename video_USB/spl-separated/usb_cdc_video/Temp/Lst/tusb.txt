; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\tusb.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\tusb.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\tusb.crf ..\tinyusb\src\tusb.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_truncate_unsigned
                          REQUIRE _printf_truncate_signed
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_i
                          REQUIRE _printf_u
                          REQUIRE _printf_o
                          REQUIRE _printf_lc
                          REQUIRE _printf_longlong_oct
                          REQUIRE _printf_str
                          REQUIRE _printf_wctomb
                  tusb_init PROC
;;;45     
;;;46     bool tusb_init(void)
000000  e92d4010          PUSH     {r4,lr}
;;;47     {
;;;48     #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
;;;49       // init device stack CFG_TUSB_RHPORTx_MODE must be defined
;;;50       TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
000004  e1a00000          MOV      r0,r0
000008  e3a00000          MOV      r0,#0
00000c  ebfffffe          BL       tud_init
000010  e3500000          CMP      r0,#0
000014  1a000007          BNE      |L1.56|
000018  e3a02032          MOV      r2,#0x32
00001c  e59f1208          LDR      r1,|L1.556|
000020  e28f0f82          ADR      r0,|L1.560|
000024  ebfffffe          BL       __2printf
000028  e1a00000          MOV      r0,r0
00002c  e1a00000          MOV      r0,r0
000030  e3a00000          MOV      r0,#0
                  |L1.52|
;;;51     #endif
;;;52     
;;;53     #if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
;;;54       // init host stack CFG_TUSB_RHPORTx_MODE must be defined
;;;55       TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
;;;56     #endif
;;;57     
;;;58       return true;
;;;59     }
000034  e8bd8010          POP      {r4,pc}
                  |L1.56|
000038  e1a00000          MOV      r0,r0                 ;50
00003c  e3a00001          MOV      r0,#1                 ;58
000040  eafffffb          B        |L1.52|
;;;60     
                          ENDP

                  tusb_inited PROC
;;;61     bool tusb_inited(void)
000044  e92d4010          PUSH     {r4,lr}
;;;62     {
;;;63       bool ret = false;
000048  e3a04000          MOV      r4,#0
;;;64     
;;;65     #if CFG_TUD_ENABLED
;;;66       ret = ret || tud_inited();
00004c  e3540000          CMP      r4,#0
000050  1a000002          BNE      |L1.96|
000054  ebfffffe          BL       tud_inited
000058  e3500000          CMP      r0,#0
00005c  0a000001          BEQ      |L1.104|
                  |L1.96|
000060  e3a00001          MOV      r0,#1
000064  ea000000          B        |L1.108|
                  |L1.104|
000068  e3a00000          MOV      r0,#0
                  |L1.108|
00006c  e1a04000          MOV      r4,r0
;;;67     #endif
;;;68     
;;;69     #if CFG_TUH_ENABLED
;;;70       ret = ret || tuh_inited();
;;;71     #endif
;;;72     
;;;73       return ret;
000070  e1a00004          MOV      r0,r4
;;;74     }
000074  e8bd8010          POP      {r4,pc}
;;;75     
                          ENDP

                  tu_desc_find PROC
;;;79     
;;;80     uint8_t const * tu_desc_find(uint8_t const* desc, uint8_t const* end, uint8_t byte1)
000078  e1a03000          MOV      r3,r0
;;;81     {
;;;82       while(desc+1 < end)
00007c  ea000006          B        |L1.156|
                  |L1.128|
;;;83       {
;;;84         if ( desc[1] == byte1 ) return desc;
000080  e5d30001          LDRB     r0,[r3,#1]
000084  e1500002          CMP      r0,r2
000088  1a000001          BNE      |L1.148|
00008c  e1a00003          MOV      r0,r3
                  |L1.144|
;;;85         desc += desc[DESC_OFFSET_LEN];
;;;86       }
;;;87       return NULL;
;;;88     }
000090  e12fff1e          BX       lr
                  |L1.148|
000094  e5d30000          LDRB     r0,[r3,#0]            ;85
000098  e0833000          ADD      r3,r3,r0              ;85
                  |L1.156|
00009c  e2830001          ADD      r0,r3,#1              ;82
0000a0  e1500001          CMP      r0,r1                 ;82
0000a4  3afffff5          BCC      |L1.128|
0000a8  e3a00000          MOV      r0,#0                 ;87
0000ac  eafffff7          B        |L1.144|
;;;89     
                          ENDP

                  tu_desc_find2 PROC
;;;90     uint8_t const * tu_desc_find2(uint8_t const* desc, uint8_t const* end, uint8_t byte1, uint8_t byte2)
0000b0  e1a0c000          MOV      r12,r0
;;;91     {
;;;92       while(desc+2 < end)
0000b4  ea000009          B        |L1.224|
                  |L1.184|
;;;93       {
;;;94         if ( desc[1] == byte1 && desc[2] == byte2) return desc;
0000b8  e5dc0001          LDRB     r0,[r12,#1]
0000bc  e1500002          CMP      r0,r2
0000c0  1a000004          BNE      |L1.216|
0000c4  e5dc0002          LDRB     r0,[r12,#2]
0000c8  e1500003          CMP      r0,r3
0000cc  1a000001          BNE      |L1.216|
0000d0  e1a0000c          MOV      r0,r12
                  |L1.212|
;;;95         desc += desc[DESC_OFFSET_LEN];
;;;96       }
;;;97       return NULL;
;;;98     }
0000d4  e12fff1e          BX       lr
                  |L1.216|
0000d8  e5dc0000          LDRB     r0,[r12,#0]           ;95
0000dc  e08cc000          ADD      r12,r12,r0            ;95
                  |L1.224|
0000e0  e28c0002          ADD      r0,r12,#2             ;92
0000e4  e1500001          CMP      r0,r1                 ;92
0000e8  3afffff2          BCC      |L1.184|
0000ec  e3a00000          MOV      r0,#0                 ;97
0000f0  eafffff7          B        |L1.212|
;;;99     
                          ENDP

                  tu_desc_find3 PROC
;;;100    uint8_t const * tu_desc_find3(uint8_t const* desc, uint8_t const* end, uint8_t byte1, uint8_t byte2, uint8_t byte3)
0000f4  e92d4010          PUSH     {r4,lr}
;;;101    {
0000f8  e1a0c000          MOV      r12,r0
0000fc  e59d4008          LDR      r4,[sp,#8]
;;;102      while(desc+3 < end)
000100  ea00000c          B        |L1.312|
                  |L1.260|
;;;103      {
;;;104        if (desc[1] == byte1 && desc[2] == byte2 && desc[3] == byte3) return desc;
000104  e5dc0001          LDRB     r0,[r12,#1]
000108  e1500002          CMP      r0,r2
00010c  1a000007          BNE      |L1.304|
000110  e5dc0002          LDRB     r0,[r12,#2]
000114  e1500003          CMP      r0,r3
000118  1a000004          BNE      |L1.304|
00011c  e5dc0003          LDRB     r0,[r12,#3]
000120  e1500004          CMP      r0,r4
000124  1a000001          BNE      |L1.304|
000128  e1a0000c          MOV      r0,r12
                  |L1.300|
;;;105        desc += desc[DESC_OFFSET_LEN];
;;;106      }
;;;107      return NULL;
;;;108    }
00012c  e8bd8010          POP      {r4,pc}
                  |L1.304|
000130  e5dc0000          LDRB     r0,[r12,#0]           ;105
000134  e08cc000          ADD      r12,r12,r0            ;105
                  |L1.312|
000138  e28c0003          ADD      r0,r12,#3             ;102
00013c  e1500001          CMP      r0,r1                 ;102
000140  3affffef          BCC      |L1.260|
000144  e3a00000          MOV      r0,#0                 ;107
000148  eafffff7          B        |L1.300|
;;;109    
                          ENDP

                  tu_edpt_claim PROC
;;;114    
;;;115    bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
00014c  e92d47f0          PUSH     {r4-r10,lr}
;;;116    {
000150  e1a04000          MOV      r4,r0
000154  e1a05001          MOV      r5,r1
;;;117      (void) mutex;
;;;118    
;;;119      // pre-check to help reducing mutex lock
;;;120      TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
000158  e1a00000          MOV      r0,r0
00015c  e5d40000          LDRB     r0,[r4,#0]
000160  e2000001          AND      r0,r0,#1
000164  e3500000          CMP      r0,#0
000168  1a000004          BNE      |L1.384|
00016c  e5d40000          LDRB     r0,[r4,#0]
000170  e1a00e80          LSL      r0,r0,#29
000174  e1a00fa0          LSR      r0,r0,#31
000178  e3500000          CMP      r0,#0
00017c  0a000001          BEQ      |L1.392|
                  |L1.384|
000180  e3a00000          MOV      r0,#0
                  |L1.388|
;;;121      (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
;;;122    
;;;123      // can only claim the endpoint if it is not busy and not claimed yet.
;;;124      bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
;;;125      if (available)
;;;126      {
;;;127        ep_state->claimed = 1;
;;;128      }
;;;129    
;;;130      (void) osal_mutex_unlock(mutex);
;;;131    
;;;132      return available;
;;;133    }
000184  e8bd87f0          POP      {r4-r10,pc}
                  |L1.392|
000188  e1a00000          MOV      r0,r0                 ;120
00018c  e1a08005          MOV      r8,r5                 ;121
000190  e3e06000          MVN      r6,#0                 ;121
000194  e1a00006          MOV      r0,r6                 ;121
000198  e3700001          CMN      r0,#1                 ;121
00019c  1a000001          BNE      |L1.424|
0001a0  e1a01826          LSR      r1,r6,#16             ;121
0001a4  ea000005          B        |L1.448|
                  |L1.424|
0001a8  e59f1098          LDR      r1,|L1.584|
0001ac  e1500001          CMP      r0,r1                 ;121
0001b0  3a000000          BCC      |L1.440|
0001b4  ea000001          B        |L1.448|
                  |L1.440|
0001b8  e1a01800          LSL      r1,r0,#16             ;121
0001bc  e1a01821          LSR      r1,r1,#16             ;121
                  |L1.448|
0001c0  e1a00000          MOV      r0,r0                 ;121
0001c4  e1a09001          MOV      r9,r1                 ;121
0001c8  e1a00008          MOV      r0,r8                 ;121
0001cc  ebfffffe          BL       os_mut_wait
0001d0  e5d40000          LDRB     r0,[r4,#0]            ;124
0001d4  e2000001          AND      r0,r0,#1              ;124
0001d8  e3500000          CMP      r0,#0                 ;124
0001dc  1a000006          BNE      |L1.508|
0001e0  e5d40000          LDRB     r0,[r4,#0]            ;124
0001e4  e1a00e80          LSL      r0,r0,#29             ;124
0001e8  e1a00fa0          LSR      r0,r0,#31             ;124
0001ec  e3500000          CMP      r0,#0                 ;124
0001f0  1a000001          BNE      |L1.508|
0001f4  e3a00001          MOV      r0,#1                 ;124
0001f8  ea000000          B        |L1.512|
                  |L1.508|
0001fc  e3a00000          MOV      r0,#0                 ;124
                  |L1.512|
000200  e1a07000          MOV      r7,r0                 ;124
000204  e3570000          CMP      r7,#0                 ;125
000208  0a000002          BEQ      |L1.536|
00020c  e5d40000          LDRB     r0,[r4,#0]            ;127
000210  e3800004          ORR      r0,r0,#4              ;127
000214  e5c40000          STRB     r0,[r4,#0]            ;127
                  |L1.536|
000218  e1a06005          MOV      r6,r5                 ;130
00021c  e1a00006          MOV      r0,r6                 ;130
000220  ebfffffe          BL       os_mut_release
000224  e1a00007          MOV      r0,r7                 ;132
000228  eaffffd5          B        |L1.388|
                  |L1.556|
                          DCD      __func__
                  |L1.560|
000230  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
000234  643a2041
000238  53534552
00023c  54204641
000240  494c4544
000244  0d0a00  
000247  00                DCB      0
                  |L1.584|
                          DCD      0x0000fffe
                          ENDP

                  tu_edpt_release PROC
;;;134    
;;;135    bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
00024c  e92d47f0          PUSH     {r4-r10,lr}
;;;136    {
000250  e1a04000          MOV      r4,r0
000254  e1a05001          MOV      r5,r1
;;;137      (void) mutex;
;;;138    
;;;139      (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
000258  e1a08005          MOV      r8,r5
00025c  e3e06000          MVN      r6,#0
000260  e1a00006          MOV      r0,r6
000264  e3700001          CMN      r0,#1
000268  1a000001          BNE      |L1.628|
00026c  e1a01826          LSR      r1,r6,#16
000270  ea000005          B        |L1.652|
                  |L1.628|
000274  e51f1034          LDR      r1,|L1.584|
000278  e1500001          CMP      r0,r1
00027c  3a000000          BCC      |L1.644|
000280  ea000001          B        |L1.652|
                  |L1.644|
000284  e1a01800          LSL      r1,r0,#16
000288  e1a01821          LSR      r1,r1,#16
                  |L1.652|
00028c  e1a00000          MOV      r0,r0
000290  e1a09001          MOV      r9,r1
000294  e1a00008          MOV      r0,r8
000298  ebfffffe          BL       os_mut_wait
;;;140    
;;;141      // can only release the endpoint if it is claimed and not busy
;;;142      bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
00029c  e5d40000          LDRB     r0,[r4,#0]
0002a0  e2000004          AND      r0,r0,#4
0002a4  e3500004          CMP      r0,#4
0002a8  1a000005          BNE      |L1.708|
0002ac  e5d40000          LDRB     r0,[r4,#0]
0002b0  e2000001          AND      r0,r0,#1
0002b4  e3500000          CMP      r0,#0
0002b8  1a000001          BNE      |L1.708|
0002bc  e3a00001          MOV      r0,#1
0002c0  ea000000          B        |L1.712|
                  |L1.708|
0002c4  e3a00000          MOV      r0,#0
                  |L1.712|
0002c8  e1a07000          MOV      r7,r0
;;;143      if (ret)
0002cc  e3570000          CMP      r7,#0
0002d0  0a000002          BEQ      |L1.736|
;;;144      {
;;;145        ep_state->claimed = 0;
0002d4  e5d40000          LDRB     r0,[r4,#0]
0002d8  e3c00004          BIC      r0,r0,#4
0002dc  e5c40000          STRB     r0,[r4,#0]
                  |L1.736|
;;;146      }
;;;147    
;;;148      (void) osal_mutex_unlock(mutex);
0002e0  e1a06005          MOV      r6,r5
0002e4  e1a00006          MOV      r0,r6
0002e8  ebfffffe          BL       os_mut_release
;;;149    
;;;150      return ret;
0002ec  e1a00007          MOV      r0,r7
;;;151    }
0002f0  e8bd87f0          POP      {r4-r10,pc}
;;;152    
                          ENDP

                  tu_edpt_validate PROC
;;;153    bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
0002f4  e92d41f0          PUSH     {r4-r8,lr}
;;;154    {
0002f8  e1a06000          MOV      r6,r0
0002fc  e1a04001          MOV      r4,r1
;;;155      uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
000300  e1a00000          MOV      r0,r0
000304  e5d60005          LDRB     r0,[r6,#5]
000308  e5d61004          LDRB     r1,[r6,#4]
00030c  e1810400          ORR      r0,r1,r0,LSL #8
000310  e3c00b3e          BIC      r0,r0,#0xf800
000314  e1a05000          MOV      r5,r0
;;;156      TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);
;;;157    
;;;158      switch (desc_ep->bmAttributes.xfer)
000318  e5d60003          LDRB     r0,[r6,#3]
00031c  e2000003          AND      r0,r0,#3
000320  e3500001          CMP      r0,#1
000324  0a000004          BEQ      |L1.828|
000328  e3500002          CMP      r0,#2
00032c  0a000016          BEQ      |L1.908|
000330  e3500003          CMP      r0,#3
000334  1a000044          BNE      |L1.1100|
000338  ea00002f          B        |L1.1020|
                  |L1.828|
;;;159      {
;;;160        case TUSB_XFER_ISOCHRONOUS:
00033c  e1a00000          MOV      r0,r0
;;;161        {
;;;162          uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
000340  e3540002          CMP      r4,#2
000344  1a000001          BNE      |L1.848|
000348  e3a00b01          MOV      r0,#0x400
00034c  ea000000          B        |L1.852|
                  |L1.848|
000350  e59f0910          LDR      r0,|L1.3176|
                  |L1.852|
000354  e1a07000          MOV      r7,r0
;;;163          TU_ASSERT(max_packet_size <= spec_size);
000358  e1a00000          MOV      r0,r0
00035c  e1550007          CMP      r5,r7
000360  da000007          BLE      |L1.900|
000364  e3a020a3          MOV      r2,#0xa3
000368  e59f18fc          LDR      r1,|L1.3180|
00036c  e24f0f51          ADR      r0,|L1.560|
000370  ebfffffe          BL       __2printf
000374  e1a00000          MOV      r0,r0
000378  e1a00000          MOV      r0,r0
00037c  e3a00000          MOV      r0,#0
                  |L1.896|
;;;164        }
;;;165        break;
;;;166    
;;;167        case TUSB_XFER_BULK:
;;;168          if (speed == TUSB_SPEED_HIGH)
;;;169          {
;;;170            // Bulk highspeed must be EXACTLY 512
;;;171            TU_ASSERT(max_packet_size == 512);
;;;172          }else
;;;173          {
;;;174            // TODO Bulk fullspeed can only be 8, 16, 32, 64
;;;175            TU_ASSERT(max_packet_size <= 64);
;;;176          }
;;;177        break;
;;;178    
;;;179        case TUSB_XFER_INTERRUPT:
;;;180        {
;;;181          uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
;;;182          TU_ASSERT(max_packet_size <= spec_size);
;;;183        }
;;;184        break;
;;;185    
;;;186        default: return false;
;;;187      }
;;;188    
;;;189      return true;
;;;190    }
000380  e8bd81f0          POP      {r4-r8,pc}
                  |L1.900|
000384  e1a00000          MOV      r0,r0                 ;163
000388  ea000032          B        |L1.1112|
                  |L1.908|
00038c  e1a00000          MOV      r0,r0                 ;167
000390  e3540002          CMP      r4,#2                 ;168
000394  1a00000b          BNE      |L1.968|
000398  e1a00000          MOV      r0,r0                 ;171
00039c  e3550c02          CMP      r5,#0x200             ;171
0003a0  0a000007          BEQ      |L1.964|
0003a4  e3a020ab          MOV      r2,#0xab              ;171
0003a8  e59f18bc          LDR      r1,|L1.3180|
0003ac  e24f0f61          ADR      r0,|L1.560|
0003b0  ebfffffe          BL       __2printf
0003b4  e1a00000          MOV      r0,r0                 ;171
0003b8  e1a00000          MOV      r0,r0                 ;171
0003bc  e3a00000          MOV      r0,#0                 ;171
0003c0  eaffffee          B        |L1.896|
                  |L1.964|
0003c4  ea00000b          B        |L1.1016|
                  |L1.968|
0003c8  e1a00000          MOV      r0,r0                 ;175
0003cc  e3550040          CMP      r5,#0x40              ;175
0003d0  da000007          BLE      |L1.1012|
0003d4  e3a020af          MOV      r2,#0xaf              ;175
0003d8  e59f188c          LDR      r1,|L1.3180|
0003dc  e24f0f6d          ADR      r0,|L1.560|
0003e0  ebfffffe          BL       __2printf
0003e4  e1a00000          MOV      r0,r0                 ;175
0003e8  e1a00000          MOV      r0,r0                 ;175
0003ec  e3a00000          MOV      r0,#0                 ;175
0003f0  eaffffe2          B        |L1.896|
                  |L1.1012|
0003f4  e1a00000          MOV      r0,r0                 ;175
                  |L1.1016|
0003f8  ea000016          B        |L1.1112|
                  |L1.1020|
0003fc  e1a00000          MOV      r0,r0                 ;179
000400  e3540002          CMP      r4,#2                 ;181
000404  1a000001          BNE      |L1.1040|
000408  e3a00b01          MOV      r0,#0x400             ;181
00040c  ea000000          B        |L1.1044|
                  |L1.1040|
000410  e3a00040          MOV      r0,#0x40              ;181
                  |L1.1044|
000414  e1a07000          MOV      r7,r0                 ;181
000418  e1a00000          MOV      r0,r0                 ;182
00041c  e1550007          CMP      r5,r7                 ;182
000420  da000007          BLE      |L1.1092|
000424  e3a020b6          MOV      r2,#0xb6              ;182
000428  e59f183c          LDR      r1,|L1.3180|
00042c  e24f0f81          ADR      r0,|L1.560|
000430  ebfffffe          BL       __2printf
000434  e1a00000          MOV      r0,r0                 ;182
000438  e1a00000          MOV      r0,r0                 ;182
00043c  e3a00000          MOV      r0,#0                 ;182
000440  eaffffce          B        |L1.896|
                  |L1.1092|
000444  e1a00000          MOV      r0,r0                 ;182
000448  ea000002          B        |L1.1112|
                  |L1.1100|
00044c  e1a00000          MOV      r0,r0                 ;186
000450  e3a00000          MOV      r0,#0                 ;186
000454  eaffffc9          B        |L1.896|
                  |L1.1112|
000458  e1a00000          MOV      r0,r0                 ;165
00045c  e3a00001          MOV      r0,#1                 ;189
000460  eaffffc6          B        |L1.896|
;;;191    
                          ENDP

                  tu_edpt_bind_driver PROC
;;;192    void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
000464  e92d41f0          PUSH     {r4-r8,lr}
;;;193    {
000468  e1a04000          MOV      r4,r0
00046c  e1a0c001          MOV      r12,r1
;;;194      uint8_t const* p_desc = (uint8_t const*) desc_itf;
000470  e1a0000c          MOV      r0,r12
;;;195      uint8_t const* desc_end = p_desc + desc_len;
000474  e0806002          ADD      r6,r0,r2
;;;196    
;;;197      while( p_desc < desc_end )
000478  ea000011          B        |L1.1220|
                  |L1.1148|
;;;198      {
;;;199        if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
00047c  e1a00000          MOV      r0,r0
000480  e5d01001          LDRB     r1,[r0,#1]
000484  e3510005          CMP      r1,#5
000488  1a000008          BNE      |L1.1200|
;;;200        {
;;;201          uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
00048c  e5d01002          LDRB     r1,[r0,#2]
;;;202    
;;;203          TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
;;;204          ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
000490  e1a05001          MOV      r5,r1
000494  e3c57080          BIC      r7,r5,#0x80
000498  e0848087          ADD      r8,r4,r7,LSL #1
00049c  e1a05001          MOV      r5,r1
0004a0  e2057080          AND      r7,r5,#0x80
0004a4  e1a073a7          LSR      r7,r7,#7
0004a8  e7c83007          STRB     r3,[r8,r7]
;;;205        }
0004ac  e1a00000          MOV      r0,r0
                  |L1.1200|
;;;206    
;;;207        p_desc = tu_desc_next(p_desc);
0004b0  e1a01000          MOV      r1,r0
0004b4  e1a05001          MOV      r5,r1
0004b8  e5d57000          LDRB     r7,[r5,#0]
0004bc  e0877005          ADD      r7,r7,r5
0004c0  e1a00007          MOV      r0,r7
                  |L1.1220|
0004c4  e1500006          CMP      r0,r6                 ;197
0004c8  3affffeb          BCC      |L1.1148|
;;;208      }
;;;209    }
0004cc  e8bd81f0          POP      {r4-r8,pc}
;;;210    
                          ENDP

                  tu_desc_get_interface_total_len PROC
;;;211    uint16_t tu_desc_get_interface_total_len(tusb_desc_interface_t const* desc_itf, uint8_t itf_count, uint16_t max_len)
0004d0  e92d4070          PUSH     {r4-r6,lr}
;;;212    {
0004d4  e1a03000          MOV      r3,r0
0004d8  e1a0c001          MOV      r12,r1
0004dc  e1a04002          MOV      r4,r2
;;;213      uint8_t const* p_desc = (uint8_t const*) desc_itf;
0004e0  e1a01003          MOV      r1,r3
;;;214      uint16_t len = 0;
0004e4  e3a00000          MOV      r0,#0
;;;215    
;;;216      while (itf_count--)
0004e8  ea000024          B        |L1.1408|
                  |L1.1260|
;;;217      {
;;;218        // Next on interface desc
;;;219        len += tu_desc_len(desc_itf);
0004ec  e1a00000          MOV      r0,r0
0004f0  e5d32000          LDRB     r2,[r3,#0]
0004f4  e0822000          ADD      r2,r2,r0
0004f8  e1a00802          LSL      r0,r2,#16
0004fc  e1a00820          LSR      r0,r0,#16
;;;220        p_desc = tu_desc_next(p_desc);
000500  e1a02001          MOV      r2,r1
000504  e1a05002          MOV      r5,r2
000508  e5d56000          LDRB     r6,[r5,#0]
00050c  e0866005          ADD      r6,r6,r5
000510  e1a01006          MOV      r1,r6
;;;221    
;;;222        while (len < max_len)
000514  ea000016          B        |L1.1396|
                  |L1.1304|
;;;223        {
;;;224          // return on IAD regardless of itf count
;;;225          if ( tu_desc_type(p_desc) == TUSB_DESC_INTERFACE_ASSOCIATION ) return len;
000518  e1a00000          MOV      r0,r0
00051c  e5d12001          LDRB     r2,[r1,#1]
000520  e352000b          CMP      r2,#0xb
000524  1a000000          BNE      |L1.1324|
                  |L1.1320|
;;;226    
;;;227          if ( (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) &&
;;;228               ((tusb_desc_interface_t const*) p_desc)->bAlternateSetting == 0 )
;;;229          {
;;;230            break;
;;;231          }
;;;232    
;;;233          len += tu_desc_len(p_desc);
;;;234          p_desc = tu_desc_next(p_desc);
;;;235        }
;;;236      }
;;;237    
;;;238      return len;
;;;239    }
000528  e8bd8070          POP      {r4-r6,pc}
                  |L1.1324|
00052c  e1a00000          MOV      r0,r0                 ;227
000530  e5d12001          LDRB     r2,[r1,#1]            ;227
000534  e3520004          CMP      r2,#4                 ;227
000538  1a000003          BNE      |L1.1356|
00053c  e5d12003          LDRB     r2,[r1,#3]            ;228
000540  e3520000          CMP      r2,#0                 ;228
000544  1a000000          BNE      |L1.1356|
000548  ea00000b          B        |L1.1404|
                  |L1.1356|
00054c  e1a00000          MOV      r0,r0                 ;233
000550  e5d12000          LDRB     r2,[r1,#0]            ;233
000554  e0822000          ADD      r2,r2,r0              ;233
000558  e1a00802          LSL      r0,r2,#16             ;233
00055c  e1a00820          LSR      r0,r0,#16             ;233
000560  e1a02001          MOV      r2,r1                 ;234
000564  e1a05002          MOV      r5,r2                 ;234
000568  e5d56000          LDRB     r6,[r5,#0]            ;234
00056c  e0866005          ADD      r6,r6,r5              ;234
000570  e1a01006          MOV      r1,r6                 ;234
                  |L1.1396|
000574  e1500004          CMP      r0,r4                 ;222
000578  baffffe6          BLT      |L1.1304|
                  |L1.1404|
00057c  e1a00000          MOV      r0,r0                 ;230
                  |L1.1408|
000580  e25c2000          SUBS     r2,r12,#0             ;216
000584  e24c5001          SUB      r5,r12,#1             ;216
000588  e205c0ff          AND      r12,r5,#0xff          ;216
00058c  1affffd6          BNE      |L1.1260|
000590  e1a00000          MOV      r0,r0                 ;238
000594  eaffffe3          B        |L1.1320|
;;;240    
                          ENDP

                  tu_edpt_stream_init PROC
;;;244    
;;;245    bool tu_edpt_stream_init(tu_edpt_stream_t* s, bool is_host, bool is_tx, bool overwritable,
000598  e92d5ffc          PUSH     {r2-r12,lr}
;;;246                             void* ff_buf, uint16_t ff_bufsize, uint8_t* ep_buf, uint16_t ep_bufsize)
;;;247    {
00059c  e1a04000          MOV      r4,r0
0005a0  e1a07001          MOV      r7,r1
0005a4  e1a05002          MOV      r5,r2
0005a8  e1a08003          MOV      r8,r3
0005ac  e59d9030          LDR      r9,[sp,#0x30]
0005b0  e1cda3d8          LDRD     r10,r11,[sp,#0x38]
;;;248      osal_mutex_t new_mutex = osal_mutex_create(&s->ff_mutex);
0005b4  e2846020          ADD      r6,r4,#0x20
0005b8  e1a00006          MOV      r0,r6
0005bc  ebfffffe          BL       os_mut_init
0005c0  e1a00000          MOV      r0,r0
0005c4  e58d6004          STR      r6,[sp,#4]
;;;249      (void) new_mutex;
;;;250      (void) is_tx;
;;;251    
;;;252      s->is_host = is_host;
0005c8  e5c47000          STRB     r7,[r4,#0]
;;;253      tu_fifo_config(&s->ff, ff_buf, ff_bufsize, 1, overwritable);
0005cc  e3a03001          MOV      r3,#1
0005d0  e58d8000          STR      r8,[sp,#0]
0005d4  e1a01009          MOV      r1,r9
0005d8  e284000c          ADD      r0,r4,#0xc
0005dc  e59d2034          LDR      r2,[sp,#0x34]
0005e0  ebfffffe          BL       tu_fifo_config
;;;254      tu_fifo_config_mutex(&s->ff, is_tx ? new_mutex : NULL, is_tx ? NULL : new_mutex);
0005e4  e3550000          CMP      r5,#0
0005e8  0a000001          BEQ      |L1.1524|
0005ec  e59d2004          LDR      r2,[sp,#4]
0005f0  ea000000          B        |L1.1528|
                  |L1.1524|
0005f4  e3a02000          MOV      r2,#0
                  |L1.1528|
0005f8  e1a00002          MOV      r0,r2
0005fc  e3550000          CMP      r5,#0
000600  0a000001          BEQ      |L1.1548|
000604  e3a02000          MOV      r2,#0
000608  ea000000          B        |L1.1552|
                  |L1.1548|
00060c  e59d2004          LDR      r2,[sp,#4]
                  |L1.1552|
000610  e1a01002          MOV      r1,r2
000614  e5840018          STR      r0,[r4,#0x18]
000618  e584101c          STR      r1,[r4,#0x1c]
00061c  e1a00000          MOV      r0,r0
;;;255    
;;;256      s->ep_buf = ep_buf;
000620  e584a008          STR      r10,[r4,#8]
;;;257      s->ep_bufsize = ep_bufsize;
000624  e1c4b0b6          STRH     r11,[r4,#6]
;;;258    
;;;259      return true;
000628  e3a00001          MOV      r0,#1
;;;260    }
00062c  e8bd9ffc          POP      {r2-r12,pc}
;;;261    
                          ENDP

                  tu_edpt_stream_write_zlp_if_needed PROC
;;;319    
;;;320    bool tu_edpt_stream_write_zlp_if_needed(tu_edpt_stream_t* s, uint32_t last_xferred_bytes)
000630  e92d4070          PUSH     {r4-r6,lr}
;;;321    {
000634  e1a04000          MOV      r4,r0
000638  e1a05001          MOV      r5,r1
;;;322      // ZLP condition: no pending data, last transferred bytes is multiple of packet size
;;;323      TU_VERIFY( !tu_fifo_count(&s->ff) && last_xferred_bytes && (0 == (last_xferred_bytes & (s->ep_packetsize-1))) );
00063c  e1a00000          MOV      r0,r0
000640  e284000c          ADD      r0,r4,#0xc
000644  ebfffffe          BL       tu_fifo_count
000648  e3500000          CMP      r0,#0
00064c  1a000006          BNE      |L1.1644|
000650  e3550000          CMP      r5,#0
000654  0a000004          BEQ      |L1.1644|
000658  e1d400b4          LDRH     r0,[r4,#4]
00065c  e2400001          SUB      r0,r0,#1
000660  e0000005          AND      r0,r0,r5
000664  e3500000          CMP      r0,#0
000668  0a000001          BEQ      |L1.1652|
                  |L1.1644|
00066c  e3a00000          MOV      r0,#0
                  |L1.1648|
;;;324    
;;;325      TU_VERIFY( stream_claim(s) );
;;;326      TU_ASSERT( stream_xfer(s, 0) );
;;;327    
;;;328      return true;
;;;329    }
000670  e8bd8070          POP      {r4-r6,pc}
                  |L1.1652|
000674  e1a00000          MOV      r0,r0                 ;323
000678  e1a00000          MOV      r0,r0                 ;325
00067c  e1a00000          MOV      r0,r0                 ;325
000680  e5d40000          LDRB     r0,[r4,#0]            ;325
000684  e3500000          CMP      r0,#0                 ;325
000688  1a000003          BNE      |L1.1692|
00068c  e5d41002          LDRB     r1,[r4,#2]            ;325
000690  e5d40001          LDRB     r0,[r4,#1]            ;325
000694  ebfffffe          BL       usbd_edpt_claim
000698  ea000000          B        |L1.1696|
                  |L1.1692|
00069c  e3a00000          MOV      r0,#0                 ;325
                  |L1.1696|
0006a0  e3500000          CMP      r0,#0                 ;325
0006a4  1a000001          BNE      |L1.1712|
0006a8  e3a00000          MOV      r0,#0                 ;325
0006ac  eaffffef          B        |L1.1648|
                  |L1.1712|
0006b0  e1a00000          MOV      r0,r0                 ;325
0006b4  e1a00000          MOV      r0,r0                 ;326
0006b8  e3a06000          MOV      r6,#0                 ;326
0006bc  e5d40000          LDRB     r0,[r4,#0]            ;326
0006c0  e3500000          CMP      r0,#0                 ;326
0006c4  1a00000a          BNE      |L1.1780|
0006c8  e3560000          CMP      r6,#0                 ;326
0006cc  0a000001          BEQ      |L1.1752|
0006d0  e5943008          LDR      r3,[r4,#8]            ;326
0006d4  ea000000          B        |L1.1756|
                  |L1.1752|
0006d8  e3a03000          MOV      r3,#0                 ;326
                  |L1.1756|
0006dc  e1a02003          MOV      r2,r3                 ;326
0006e0  e5d41002          LDRB     r1,[r4,#2]            ;326
0006e4  e5d40001          LDRB     r0,[r4,#1]            ;326
0006e8  e1a03006          MOV      r3,r6                 ;326
0006ec  ebfffffe          BL       usbd_edpt_xfer
0006f0  ea000000          B        |L1.1784|
                  |L1.1780|
0006f4  e3a00000          MOV      r0,#0                 ;326
                  |L1.1784|
0006f8  e3500000          CMP      r0,#0                 ;326
0006fc  1a000007          BNE      |L1.1824|
000700  e59f2568          LDR      r2,|L1.3184|
000704  e59f1568          LDR      r1,|L1.3188|
000708  e59f0568          LDR      r0,|L1.3192|
00070c  ebfffffe          BL       __2printf
000710  e1a00000          MOV      r0,r0                 ;326
000714  e1a00000          MOV      r0,r0                 ;326
000718  e3a00000          MOV      r0,#0                 ;326
00071c  eaffffd3          B        |L1.1648|
                  |L1.1824|
000720  e1a00000          MOV      r0,r0                 ;326
000724  e3a00001          MOV      r0,#1                 ;328
000728  eaffffd0          B        |L1.1648|
;;;330    
                          ENDP

                  tu_edpt_stream_write_xfer PROC
;;;331    uint32_t tu_edpt_stream_write_xfer(tu_edpt_stream_t* s)
00072c  e92d4070          PUSH     {r4-r6,lr}
;;;332    {
000730  e1a04000          MOV      r4,r0
;;;333      // skip if no data
;;;334      TU_VERIFY( tu_fifo_count(&s->ff), 0 );
000734  e1a00000          MOV      r0,r0
000738  e284000c          ADD      r0,r4,#0xc
00073c  ebfffffe          BL       tu_fifo_count
000740  e3500000          CMP      r0,#0
000744  1a000001          BNE      |L1.1872|
000748  e3a00000          MOV      r0,#0
                  |L1.1868|
;;;335    
;;;336      // Claim the endpoint
;;;337      TU_VERIFY( stream_claim(s), 0 );
;;;338    
;;;339      // Pull data from FIFO -> EP buf
;;;340      uint16_t const count = tu_fifo_read_n(&s->ff, s->ep_buf, s->ep_bufsize);
;;;341    
;;;342      if ( count )
;;;343      {
;;;344        TU_ASSERT( stream_xfer(s, count), 0 );
;;;345        return count;
;;;346      }else
;;;347      {
;;;348        // Release endpoint since we don't make any transfer
;;;349        // Note: data is dropped if terminal is not connected
;;;350        stream_release(s);
;;;351        return 0;
;;;352      }
;;;353    }
00074c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1872|
000750  e1a00000          MOV      r0,r0                 ;334
000754  e1a00000          MOV      r0,r0                 ;337
000758  e1a00000          MOV      r0,r0                 ;337
00075c  e5d40000          LDRB     r0,[r4,#0]            ;337
000760  e3500000          CMP      r0,#0                 ;337
000764  1a000003          BNE      |L1.1912|
000768  e5d41002          LDRB     r1,[r4,#2]            ;337
00076c  e5d40001          LDRB     r0,[r4,#1]            ;337
000770  ebfffffe          BL       usbd_edpt_claim
000774  ea000000          B        |L1.1916|
                  |L1.1912|
000778  e3a00000          MOV      r0,#0                 ;337
                  |L1.1916|
00077c  e3500000          CMP      r0,#0                 ;337
000780  1a000001          BNE      |L1.1932|
000784  e3a00000          MOV      r0,#0                 ;337
000788  eaffffef          B        |L1.1868|
                  |L1.1932|
00078c  e1a00000          MOV      r0,r0                 ;337
000790  e1d420b6          LDRH     r2,[r4,#6]            ;340
000794  e5941008          LDR      r1,[r4,#8]            ;340
000798  e284000c          ADD      r0,r4,#0xc            ;340
00079c  ebfffffe          BL       tu_fifo_read_n
0007a0  e1a05000          MOV      r5,r0                 ;340
0007a4  e3550000          CMP      r5,#0                 ;342
0007a8  0a00001d          BEQ      |L1.2084|
0007ac  e1a00000          MOV      r0,r0                 ;344
0007b0  e1a06005          MOV      r6,r5                 ;344
0007b4  e5d40000          LDRB     r0,[r4,#0]            ;344
0007b8  e3500000          CMP      r0,#0                 ;344
0007bc  1a00000a          BNE      |L1.2028|
0007c0  e3560000          CMP      r6,#0                 ;344
0007c4  0a000001          BEQ      |L1.2000|
0007c8  e5943008          LDR      r3,[r4,#8]            ;344
0007cc  ea000000          B        |L1.2004|
                  |L1.2000|
0007d0  e3a03000          MOV      r3,#0                 ;344
                  |L1.2004|
0007d4  e1a02003          MOV      r2,r3                 ;344
0007d8  e5d41002          LDRB     r1,[r4,#2]            ;344
0007dc  e5d40001          LDRB     r0,[r4,#1]            ;344
0007e0  e1a03006          MOV      r3,r6                 ;344
0007e4  ebfffffe          BL       usbd_edpt_xfer
0007e8  ea000000          B        |L1.2032|
                  |L1.2028|
0007ec  e3a00000          MOV      r0,#0                 ;344
                  |L1.2032|
0007f0  e3500000          CMP      r0,#0                 ;344
0007f4  1a000007          BNE      |L1.2072|
0007f8  e3a02f56          MOV      r2,#0x158             ;344
0007fc  e59f1478          LDR      r1,|L1.3196|
000800  e59f0470          LDR      r0,|L1.3192|
000804  ebfffffe          BL       __2printf
000808  e1a00000          MOV      r0,r0                 ;344
00080c  e1a00000          MOV      r0,r0                 ;344
000810  e3a00000          MOV      r0,#0                 ;344
000814  eaffffcc          B        |L1.1868|
                  |L1.2072|
000818  e1a00000          MOV      r0,r0                 ;344
00081c  e1a00005          MOV      r0,r5                 ;345
000820  eaffffc9          B        |L1.1868|
                  |L1.2084|
000824  e1a00000          MOV      r0,r0                 ;350
000828  e5d40000          LDRB     r0,[r4,#0]            ;350
00082c  e3500000          CMP      r0,#0                 ;350
000830  1a000003          BNE      |L1.2116|
000834  e5d41002          LDRB     r1,[r4,#2]            ;350
000838  e5d40001          LDRB     r0,[r4,#1]            ;350
00083c  ebfffffe          BL       usbd_edpt_release
000840  ea000000          B        |L1.2120|
                  |L1.2116|
000844  e1a00000          MOV      r0,r0                 ;350
                  |L1.2120|
000848  e1a00000          MOV      r0,r0                 ;350
00084c  e3a00000          MOV      r0,#0                 ;351
000850  eaffffbd          B        |L1.1868|
;;;354    
                          ENDP

                  tu_edpt_stream_write PROC
;;;355    uint32_t tu_edpt_stream_write(tu_edpt_stream_t* s, void const *buffer, uint32_t bufsize)
000854  e92d41f0          PUSH     {r4-r8,lr}
;;;356    {
000858  e1a04000          MOV      r4,r0
00085c  e1a06001          MOV      r6,r1
000860  e1a05002          MOV      r5,r2
;;;357      TU_VERIFY(bufsize); // TODO support ZLP
000864  e1a00000          MOV      r0,r0
000868  e3550000          CMP      r5,#0
00086c  1a000001          BNE      |L1.2168|
000870  e3a00000          MOV      r0,#0
                  |L1.2164|
;;;358    
;;;359      uint16_t ret = tu_fifo_write_n(&s->ff, buffer, (uint16_t) bufsize);
;;;360    
;;;361      // flush if fifo has more than packet size or
;;;362      // in rare case: fifo depth is configured too small (which never reach packet size)
;;;363      if ( (tu_fifo_count(&s->ff) >= s->ep_packetsize) || (tu_fifo_depth(&s->ff) < s->ep_packetsize) )
;;;364      {
;;;365        tu_edpt_stream_write_xfer(s);
;;;366      }
;;;367    
;;;368      return ret;
;;;369    }
000874  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2168|
000878  e1a00000          MOV      r0,r0                 ;357
00087c  e1a02805          LSL      r2,r5,#16             ;359
000880  e1a02822          LSR      r2,r2,#16             ;359
000884  e1a01006          MOV      r1,r6                 ;359
000888  e284000c          ADD      r0,r4,#0xc            ;359
00088c  ebfffffe          BL       tu_fifo_write_n
000890  e1a07000          MOV      r7,r0                 ;359
000894  e284000c          ADD      r0,r4,#0xc            ;363
000898  ebfffffe          BL       tu_fifo_count
00089c  e1d410b4          LDRH     r1,[r4,#4]            ;363
0008a0  e1500001          CMP      r0,r1                 ;363
0008a4  aa000004          BGE      |L1.2236|
0008a8  e1a00000          MOV      r0,r0                 ;363
0008ac  e1d401b0          LDRH     r0,[r4,#0x10]         ;363
0008b0  e1d410b4          LDRH     r1,[r4,#4]            ;363
0008b4  e1500001          CMP      r0,r1                 ;363
0008b8  aa000001          BGE      |L1.2244|
                  |L1.2236|
0008bc  e1a00004          MOV      r0,r4                 ;365
0008c0  ebfffffe          BL       tu_edpt_stream_write_xfer
                  |L1.2244|
0008c4  e1a00007          MOV      r0,r7                 ;368
0008c8  eaffffe9          B        |L1.2164|
;;;370    
                          ENDP

                  tu_edpt_stream_read_xfer PROC
;;;374    
;;;375    uint32_t tu_edpt_stream_read_xfer(tu_edpt_stream_t* s)
0008cc  e92d41f0          PUSH     {r4-r8,lr}
;;;376    {
0008d0  e1a04000          MOV      r4,r0
;;;377      uint16_t available = tu_fifo_remaining(&s->ff);
0008d4  e284000c          ADD      r0,r4,#0xc
0008d8  ebfffffe          BL       tu_fifo_remaining
0008dc  e1a06000          MOV      r6,r0
;;;378    
;;;379      // Prepare for incoming data but only allow what we can store in the ring buffer.
;;;380      // TODO Actually we can still carry out the transfer, keeping count of received bytes
;;;381      // and slowly move it to the FIFO when read().
;;;382      // This pre-check reduces endpoint claiming
;;;383      TU_VERIFY(available >= s->ep_packetsize);
0008e0  e1a00000          MOV      r0,r0
0008e4  e1d400b4          LDRH     r0,[r4,#4]
0008e8  e1500006          CMP      r0,r6
0008ec  da000001          BLE      |L1.2296|
0008f0  e3a00000          MOV      r0,#0
                  |L1.2292|
;;;384    
;;;385      // claim endpoint
;;;386      TU_VERIFY(stream_claim(s), 0);
;;;387    
;;;388      // get available again since fifo can be changed before endpoint is claimed
;;;389      available = tu_fifo_remaining(&s->ff);
;;;390    
;;;391      if ( available >= s->ep_packetsize )
;;;392      {
;;;393        // multiple of packet size limit by ep bufsize
;;;394        uint16_t count = (uint16_t) (available & ~(s->ep_packetsize -1));
;;;395        count = tu_min16(count, s->ep_bufsize);
;;;396    
;;;397        TU_ASSERT( stream_xfer(s, count), 0 );
;;;398    
;;;399        return count;
;;;400      }else
;;;401      {
;;;402        // Release endpoint since we don't make any transfer
;;;403        stream_release(s);
;;;404        return 0;
;;;405      }
;;;406    }
0008f4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2296|
0008f8  e1a00000          MOV      r0,r0                 ;383
0008fc  e1a00000          MOV      r0,r0                 ;386
000900  e1a00000          MOV      r0,r0                 ;386
000904  e5d40000          LDRB     r0,[r4,#0]            ;386
000908  e3500000          CMP      r0,#0                 ;386
00090c  1a000003          BNE      |L1.2336|
000910  e5d41002          LDRB     r1,[r4,#2]            ;386
000914  e5d40001          LDRB     r0,[r4,#1]            ;386
000918  ebfffffe          BL       usbd_edpt_claim
00091c  ea000000          B        |L1.2340|
                  |L1.2336|
000920  e3a00000          MOV      r0,#0                 ;386
                  |L1.2340|
000924  e3500000          CMP      r0,#0                 ;386
000928  1a000001          BNE      |L1.2356|
00092c  e3a00000          MOV      r0,#0                 ;386
000930  eaffffef          B        |L1.2292|
                  |L1.2356|
000934  e1a00000          MOV      r0,r0                 ;386
000938  e284000c          ADD      r0,r4,#0xc            ;389
00093c  ebfffffe          BL       tu_fifo_remaining
000940  e1a06000          MOV      r6,r0                 ;389
000944  e1d400b4          LDRH     r0,[r4,#4]            ;391
000948  e1500006          CMP      r0,r6                 ;391
00094c  ca000029          BGT      |L1.2552|
000950  e1d400b4          LDRH     r0,[r4,#4]            ;394
000954  e2400001          SUB      r0,r0,#1              ;394
000958  e1c65000          BIC      r5,r6,r0              ;394
00095c  e1a00005          MOV      r0,r5                 ;395
000960  e1d410b6          LDRH     r1,[r4,#6]            ;395
000964  e1500001          CMP      r0,r1                 ;395
000968  aa000001          BGE      |L1.2420|
00096c  e1a02000          MOV      r2,r0                 ;395
000970  ea000000          B        |L1.2424|
                  |L1.2420|
000974  e1a02001          MOV      r2,r1                 ;395
                  |L1.2424|
000978  e1a00000          MOV      r0,r0                 ;395
00097c  e1a05002          MOV      r5,r2                 ;395
000980  e1a00000          MOV      r0,r0                 ;397
000984  e1a07005          MOV      r7,r5                 ;397
000988  e5d40000          LDRB     r0,[r4,#0]            ;397
00098c  e3500000          CMP      r0,#0                 ;397
000990  1a00000a          BNE      |L1.2496|
000994  e3570000          CMP      r7,#0                 ;397
000998  0a000001          BEQ      |L1.2468|
00099c  e5943008          LDR      r3,[r4,#8]            ;397
0009a0  ea000000          B        |L1.2472|
                  |L1.2468|
0009a4  e3a03000          MOV      r3,#0                 ;397
                  |L1.2472|
0009a8  e1a02003          MOV      r2,r3                 ;397
0009ac  e5d41002          LDRB     r1,[r4,#2]            ;397
0009b0  e5d40001          LDRB     r0,[r4,#1]            ;397
0009b4  e1a03007          MOV      r3,r7                 ;397
0009b8  ebfffffe          BL       usbd_edpt_xfer
0009bc  ea000000          B        |L1.2500|
                  |L1.2496|
0009c0  e3a00000          MOV      r0,#0                 ;397
                  |L1.2500|
0009c4  e3500000          CMP      r0,#0                 ;397
0009c8  1a000007          BNE      |L1.2540|
0009cc  e59f22ac          LDR      r2,|L1.3200|
0009d0  e59f12ac          LDR      r1,|L1.3204|
0009d4  e59f029c          LDR      r0,|L1.3192|
0009d8  ebfffffe          BL       __2printf
0009dc  e1a00000          MOV      r0,r0                 ;397
0009e0  e1a00000          MOV      r0,r0                 ;397
0009e4  e3a00000          MOV      r0,#0                 ;397
0009e8  eaffffc1          B        |L1.2292|
                  |L1.2540|
0009ec  e1a00000          MOV      r0,r0                 ;397
0009f0  e1a00005          MOV      r0,r5                 ;399
0009f4  eaffffbe          B        |L1.2292|
                  |L1.2552|
0009f8  e1a00000          MOV      r0,r0                 ;400
0009fc  e1a00000          MOV      r0,r0                 ;403
000a00  e5d40000          LDRB     r0,[r4,#0]            ;403
000a04  e3500000          CMP      r0,#0                 ;403
000a08  1a000003          BNE      |L1.2588|
000a0c  e5d41002          LDRB     r1,[r4,#2]            ;403
000a10  e5d40001          LDRB     r0,[r4,#1]            ;403
000a14  ebfffffe          BL       usbd_edpt_release
000a18  ea000000          B        |L1.2592|
                  |L1.2588|
000a1c  e1a00000          MOV      r0,r0                 ;403
                  |L1.2592|
000a20  e1a00000          MOV      r0,r0                 ;403
000a24  e3a00000          MOV      r0,#0                 ;404
000a28  eaffffb1          B        |L1.2292|
;;;407    
                          ENDP

                  tu_edpt_stream_read PROC
;;;408    uint32_t tu_edpt_stream_read(tu_edpt_stream_t* s, void* buffer, uint32_t bufsize)
000a2c  e92d41f0          PUSH     {r4-r8,lr}
;;;409    {
000a30  e1a04000          MOV      r4,r0
000a34  e1a06001          MOV      r6,r1
000a38  e1a05002          MOV      r5,r2
;;;410      uint32_t num_read = tu_fifo_read_n(&s->ff, buffer, (uint16_t) bufsize);
000a3c  e1a02805          LSL      r2,r5,#16
000a40  e1a02822          LSR      r2,r2,#16
000a44  e1a01006          MOV      r1,r6
000a48  e284000c          ADD      r0,r4,#0xc
000a4c  ebfffffe          BL       tu_fifo_read_n
000a50  e1a07000          MOV      r7,r0
;;;411      tu_edpt_stream_read_xfer(s);
000a54  e1a00004          MOV      r0,r4
000a58  ebfffffe          BL       tu_edpt_stream_read_xfer
;;;412      return num_read;
000a5c  e1a00007          MOV      r0,r7
;;;413    }
000a60  e8bd81f0          POP      {r4-r8,pc}
;;;414    
                          ENDP

                  dump_str_line PROC
;;;447    
;;;448    static void dump_str_line(uint8_t const* buf, uint16_t count)
000a64  e92d41f0          PUSH     {r4-r8,lr}
;;;449    {
000a68  e1a05000          MOV      r5,r0
000a6c  e1a06001          MOV      r6,r1
;;;450      tu_printf("  |");
000a70  e28f0e21          ADR      r0,|L1.3208|
000a74  ebfffffe          BL       __2printf
;;;451    
;;;452      // each line is 16 bytes
;;;453      for(uint16_t i=0; i<count; i++)
000a78  e3a04000          MOV      r4,#0
000a7c  ea000010          B        |L1.2756|
                  |L1.2688|
;;;454      {
;;;455        const char ch = buf[i];
000a80  e7d57004          LDRB     r7,[r5,r4]
;;;456        tu_printf("%c", isprint(ch) ? ch : '.');
000a84  ebfffffe          BL       __rt_ctype_table
000a88  e5900000          LDR      r0,[r0,#0]
000a8c  e7d00007          LDRB     r0,[r0,r7]
000a90  e200003e          AND      r0,r0,#0x3e
000a94  e3500000          CMP      r0,#0
000a98  0a000001          BEQ      |L1.2724|
000a9c  e1a00007          MOV      r0,r7
000aa0  ea000000          B        |L1.2728|
                  |L1.2724|
000aa4  e3a0002e          MOV      r0,#0x2e
                  |L1.2728|
000aa8  e1a08000          MOV      r8,r0
000aac  e1a01008          MOV      r1,r8
000ab0  e28f0f75          ADR      r0,|L1.3212|
000ab4  ebfffffe          BL       __2printf
000ab8  e2840001          ADD      r0,r4,#1              ;453
000abc  e1a04800          LSL      r4,r0,#16             ;453
000ac0  e1a04824          LSR      r4,r4,#16             ;453
                  |L1.2756|
000ac4  e1540006          CMP      r4,r6                 ;453
000ac8  baffffec          BLT      |L1.2688|
;;;457      }
;;;458    
;;;459      tu_printf("|\r\n");
000acc  e28f0f6f          ADR      r0,|L1.3216|
000ad0  ebfffffe          BL       __2printf
;;;460    }
000ad4  e8bd81f0          POP      {r4-r8,pc}
;;;461    
                          ENDP

                  tu_print_mem PROC
;;;466     */
;;;467    void tu_print_mem(void const *buf, uint32_t count, uint8_t indent)
000ad8  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;468    {
000adc  e24dd020          SUB      sp,sp,#0x20
000ae0  e1a08000          MOV      r8,r0
000ae4  e1a06001          MOV      r6,r1
;;;469      uint8_t const size = 1; // fixed 1 byte for now
000ae8  e3a00001          MOV      r0,#1
000aec  e58d001c          STR      r0,[sp,#0x1c]
;;;470    
;;;471      if ( !buf || !count )
000af0  e3580000          CMP      r8,#0
000af4  0a000001          BEQ      |L1.2816|
000af8  e3560000          CMP      r6,#0
000afc  1a000003          BNE      |L1.2832|
                  |L1.2816|
;;;472      {
;;;473        tu_printf("NULL\r\n");
000b00  e28f0f63          ADR      r0,|L1.3220|
000b04  ebfffffe          BL       __2printf
                  |L1.2824|
;;;474        return;
;;;475      }
;;;476    
;;;477      uint8_t const *buf8 = (uint8_t const *) buf;
;;;478    
;;;479      char format[] = "%00X";
;;;480      format[2] += 2*size;
;;;481    
;;;482      const uint8_t item_per_line  = 16 / size;
;;;483    
;;;484      for(unsigned int i=0; i<count; i++)
;;;485      {
;;;486        unsigned int value=0;
;;;487    
;;;488        if ( i%item_per_line == 0 )
;;;489        {
;;;490          // Print Ascii
;;;491          if ( i != 0 )
;;;492          {
;;;493            dump_str_line(buf8-16, 16);
;;;494          }
;;;495    
;;;496          for(uint8_t s=0; s < indent; s++) tu_printf(" ");
;;;497    
;;;498          // print offset or absolute address
;;;499          tu_printf("%04X: ", 16*i/item_per_line);
;;;500        }
;;;501    
;;;502        tu_memcpy_s(&value, sizeof(value), buf8, size);
;;;503        buf8 += size;
;;;504    
;;;505        tu_printf(" ");
;;;506        tu_printf(format, value);
;;;507      }
;;;508    
;;;509      // fill up last row to 16 for printing ascii
;;;510      const uint32_t remain = count%16;
;;;511      uint8_t nback = (uint8_t)(remain ? remain : 16);
;;;512    
;;;513      if ( remain )
;;;514      {
;;;515        for(uint32_t i=0; i< 16-remain; i++)
;;;516        {
;;;517          tu_printf(" ");
;;;518          for(int j=0; j<2*size; j++) tu_printf(" ");
;;;519        }
;;;520      }
;;;521    
;;;522      dump_str_line(buf8-nback, nback);
;;;523    }
000b08  e28dd02c          ADD      sp,sp,#0x2c
000b0c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2832|
000b10  e1a04008          MOV      r4,r8                 ;477
000b14  e28f1d06          ADR      r1,|L1.3228|
000b18  e8910003          LDM      r1,{r0,r1}            ;479
000b1c  e58d0014          STR      r0,[sp,#0x14]         ;479
000b20  e58d1018          STR      r1,[sp,#0x18]         ;479
000b24  e5dd0016          LDRB     r0,[sp,#0x16]         ;480
000b28  e2800002          ADD      r0,r0,#2              ;480
000b2c  e5cd0016          STRB     r0,[sp,#0x16]         ;480
000b30  e3a00010          MOV      r0,#0x10              ;482
000b34  e58d0010          STR      r0,[sp,#0x10]         ;482
000b38  e3a05000          MOV      r5,#0                 ;484
000b3c  ea00002a          B        |L1.3052|
                  |L1.2880|
000b40  e3a00000          MOV      r0,#0                 ;486
000b44  e58d000c          STR      r0,[sp,#0xc]          ;486
000b48  e205000f          AND      r0,r5,#0xf            ;488
000b4c  e3500000          CMP      r0,#0                 ;488
000b50  1a000010          BNE      |L1.2968|
000b54  e3550000          CMP      r5,#0                 ;491
000b58  0a000002          BEQ      |L1.2920|
000b5c  e2440010          SUB      r0,r4,#0x10           ;493
000b60  e3a01010          MOV      r1,#0x10              ;493
000b64  ebfffffe          BL       dump_str_line
                  |L1.2920|
000b68  e3a0a000          MOV      r10,#0                ;496
000b6c  ea000003          B        |L1.2944|
                  |L1.2928|
000b70  e28f0f4b          ADR      r0,|L1.3236|
000b74  ebfffffe          BL       __2printf
000b78  e28a0001          ADD      r0,r10,#1             ;496
000b7c  e200a0ff          AND      r10,r0,#0xff          ;496
                  |L1.2944|
000b80  e59d0028          LDR      r0,[sp,#0x28]         ;496
000b84  e15a0000          CMP      r10,r0                ;496
000b88  bafffff8          BLT      |L1.2928|
000b8c  e3c5120f          BIC      r1,r5,#0xf0000000     ;499
000b90  e28f0e11          ADR      r0,|L1.3240|
000b94  ebfffffe          BL       __2printf
                  |L1.2968|
000b98  e28db00c          ADD      r11,sp,#0xc           ;502
000b9c  e3a00004          MOV      r0,#4                 ;502
000ba0  e3a0a001          MOV      r10,#1                ;502
000ba4  e98d0011          STMIB    sp,{r0,r4}            ;502
000ba8  e59d0004          LDR      r0,[sp,#4]            ;502
000bac  e15a0000          CMP      r10,r0                ;502
000bb0  9a000000          BLS      |L1.3000|
000bb4  ea000004          B        |L1.3020|
                  |L1.3000|
000bb8  e1a0200a          MOV      r2,r10                ;502
000bbc  e1a0000b          MOV      r0,r11                ;502
000bc0  e59d1008          LDR      r1,[sp,#8]            ;502
000bc4  ebfffffe          BL       __aeabi_memcpy
000bc8  e1a00000          MOV      r0,r0                 ;502
                  |L1.3020|
000bcc  e1a00000          MOV      r0,r0                 ;502
000bd0  e2844001          ADD      r4,r4,#1              ;503
000bd4  e28f00c8          ADR      r0,|L1.3236|
000bd8  ebfffffe          BL       __2printf
000bdc  e59d100c          LDR      r1,[sp,#0xc]          ;506
000be0  e28d0014          ADD      r0,sp,#0x14           ;506
000be4  ebfffffe          BL       __2printf
000be8  e2855001          ADD      r5,r5,#1              ;484
                  |L1.3052|
000bec  e1550006          CMP      r5,r6                 ;484
000bf0  3affffd2          BCC      |L1.2880|
000bf4  e206700f          AND      r7,r6,#0xf            ;510
000bf8  e3570000          CMP      r7,#0                 ;511
000bfc  0a000001          BEQ      |L1.3080|
000c00  e1a00007          MOV      r0,r7                 ;511
000c04  ea000000          B        |L1.3084|
                  |L1.3080|
000c08  e3a00010          MOV      r0,#0x10              ;511
                  |L1.3084|
000c0c  e20090ff          AND      r9,r0,#0xff           ;511
000c10  e3570000          CMP      r7,#0                 ;513
000c14  0a00000e          BEQ      |L1.3156|
000c18  e3a05000          MOV      r5,#0                 ;515
000c1c  ea000009          B        |L1.3144|
                  |L1.3104|
000c20  e28f007c          ADR      r0,|L1.3236|
000c24  ebfffffe          BL       __2printf
000c28  e3a0a000          MOV      r10,#0                ;518
000c2c  ea000002          B        |L1.3132|
                  |L1.3120|
000c30  e28f006c          ADR      r0,|L1.3236|
000c34  ebfffffe          BL       __2printf
000c38  e28aa001          ADD      r10,r10,#1            ;518
                  |L1.3132|
000c3c  e35a0002          CMP      r10,#2                ;518
000c40  bafffffa          BLT      |L1.3120|
000c44  e2855001          ADD      r5,r5,#1              ;515
                  |L1.3144|
000c48  e2670010          RSB      r0,r7,#0x10           ;515
000c4c  e1500005          CMP      r0,r5                 ;515
000c50  8afffff2          BHI      |L1.3104|
                  |L1.3156|
000c54  e0440009          SUB      r0,r4,r9              ;522
000c58  e1a01009          MOV      r1,r9                 ;522
000c5c  ebfffffe          BL       dump_str_line
000c60  e1a00000          MOV      r0,r0
000c64  eaffffa7          B        |L1.2824|
                  |L1.3176|
                          DCD      0x000003ff
                  |L1.3180|
                          DCD      |symbol_number.10|
                  |L1.3184|
                          DCD      0x00000146
                  |L1.3188|
                          DCD      |symbol_number.11|
                  |L1.3192|
                          DCD      ||.text||+0x230
                  |L1.3196|
                          DCD      |symbol_number.12|
                  |L1.3200|
                          DCD      0x0000018d
                  |L1.3204|
                          DCD      |symbol_number.13|
                  |L1.3208|
000c88  20207c00          DCB      "  |",0
                  |L1.3212|
000c8c  256300            DCB      "%c",0
000c8f  00                DCB      0
                  |L1.3216|
000c90  7c0d0a00          DCB      "|\r\n",0
                  |L1.3220|
000c94  4e554c4c          DCB      "NULL\r\n",0
000c98  0d0a00  
000c9b  00                DCB      0
                  |L1.3228|
000c9c  25303058          DCB      "%00X",0
000ca0  00      
000ca1  00                DCB      0
000ca2  00                DCB      0
000ca3  00                DCB      0
                  |L1.3236|
000ca4  2000              DCB      " ",0
000ca6  00                DCB      0
000ca7  00                DCB      0
                  |L1.3240|
000ca8  25303458          DCB      "%04X: ",0
000cac  3a2000  
000caf  00                DCB      0
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  74757362          DCB      0x74,0x75,0x73,0x62
000004  5f696e69          DCB      0x5f,0x69,0x6e,0x69
000008  7400              DCB      0x74,0x00
                  |symbol_number.10|
00000a  7475              DCB      0x74,0x75
00000c  5f656470          DCB      0x5f,0x65,0x64,0x70
000010  745f7661          DCB      0x74,0x5f,0x76,0x61
000014  6c696461          DCB      0x6c,0x69,0x64,0x61
000018  746500            DCB      0x74,0x65,0x00
                  |symbol_number.11|
00001b  74                DCB      0x74
00001c  755f6564          DCB      0x75,0x5f,0x65,0x64
000020  70745f73          DCB      0x70,0x74,0x5f,0x73
000024  74726561          DCB      0x74,0x72,0x65,0x61
000028  6d5f7772          DCB      0x6d,0x5f,0x77,0x72
00002c  6974655f          DCB      0x69,0x74,0x65,0x5f
000030  7a6c705f          DCB      0x7a,0x6c,0x70,0x5f
000034  69665f6e          DCB      0x69,0x66,0x5f,0x6e
000038  65656465          DCB      0x65,0x65,0x64,0x65
00003c  6400              DCB      0x64,0x00
                  |symbol_number.12|
00003e  7475              DCB      0x74,0x75
000040  5f656470          DCB      0x5f,0x65,0x64,0x70
000044  745f7374          DCB      0x74,0x5f,0x73,0x74
000048  7265616d          DCB      0x72,0x65,0x61,0x6d
00004c  5f777269          DCB      0x5f,0x77,0x72,0x69
000050  74655f78          DCB      0x74,0x65,0x5f,0x78
000054  66657200          DCB      0x66,0x65,0x72,0x00
                  |symbol_number.13|
000058  74755f65          DCB      0x74,0x75,0x5f,0x65
00005c  6470745f          DCB      0x64,0x70,0x74,0x5f
000060  73747265          DCB      0x73,0x74,0x72,0x65
000064  616d5f72          DCB      0x61,0x6d,0x5f,0x72
000068  6561645f          DCB      0x65,0x61,0x64,0x5f
00006c  78666572          DCB      0x78,0x66,0x65,0x72
000070  00                DCB      0x00
