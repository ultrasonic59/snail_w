; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\fb-f1c100s.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\fb-f1c100s.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\fb-f1c100s.crf ..\periph\fb-f1c100s.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  f1c100s_debe_set_mode PROC
;;;135    
;;;136    inline static void f1c100s_debe_set_mode(fb_f1c100s_priv_data_t* pdat)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;137    {
000004  e1a05000          MOV      r5,r0
;;;138      struct f1c100s_debe_reg_t* debe = (struct f1c100s_debe_reg_t*)(pdat->virtdebe);
000008  e5954004          LDR      r4,[r5,#4]
;;;139      uint32_t val;
;;;140    
;;;141      // enable debe
;;;142      val = read32((uint32_t)&debe->mode);
00000c  e2840b02          ADD      r0,r4,#0x800
000010  ebfffffe          BL       read32
000014  e1a06000          MOV      r6,r0
;;;143      val |= (1 << 0);
000018  e3866001          ORR      r6,r6,#1
;;;144      write32((uint32_t)&debe->mode, val);
00001c  e1a01006          MOV      r1,r6
000020  e2840b02          ADD      r0,r4,#0x800
000024  ebfffffe          BL       write32
;;;145    
;;;146      // non-documentation
;;;147      write32((uint32_t)&debe->disp_size, (((pdat->height) - 1) << 16) | (((pdat->width) - 1) << 0));
000028  e5950024          LDR      r0,[r5,#0x24]
00002c  e2400001          SUB      r0,r0,#1
000030  e1d522b8          LDRH     r2,[r5,#0x28]
000034  e2422001          SUB      r2,r2,#1
000038  e1801802          ORR      r1,r0,r2,LSL #16
00003c  e2840b02          ADD      r0,r4,#0x800
000040  e2800008          ADD      r0,r0,#8
000044  ebfffffe          BL       write32
;;;148      write32((uint32_t)&debe->layer0_size, (((pdat->height) - 1) << 16) | (((pdat->width) - 1) << 0));
000048  e5950024          LDR      r0,[r5,#0x24]
00004c  e2400001          SUB      r0,r0,#1
000050  e1d522b8          LDRH     r2,[r5,#0x28]
000054  e2422001          SUB      r2,r2,#1
000058  e1801802          ORR      r1,r0,r2,LSL #16
00005c  e2840e81          ADD      r0,r4,#0x810
000060  ebfffffe          BL       write32
;;;149    #if LCD_CTRL_BPP == 16
;;;150      // Layer frame buffer line width in bits (16bits)
;;;151      write32((uint32_t)&debe->layer0_stride, ((pdat->width) << 4));
;;;152    #else
;;;153      // Layer frame buffer line width in bits (32bits)
;;;154      write32((uint32_t)&debe->layer0_stride, ((pdat->width) << 5));
000064  e5950024          LDR      r0,[r5,#0x24]
000068  e1a01280          LSL      r1,r0,#5
00006c  e2840d21          ADD      r0,r4,#0x840
000070  ebfffffe          BL       write32
;;;155    #endif
;;;156    
;;;157      // frame-buffer address in bits
;;;158      write32((uint32_t)&debe->layer0_addr_low32b, (uint32_t)(pdat->vram[pdat->index]) << 3);
000074  e595003c          LDR      r0,[r5,#0x3c]
000078  e2852040          ADD      r2,r5,#0x40
00007c  e7920100          LDR      r0,[r2,r0,LSL #2]
000080  e1a01180          LSL      r1,r0,#3
000084  e2840e85          ADD      r0,r4,#0x850
000088  ebfffffe          BL       write32
;;;159      write32((uint32_t)&debe->layer0_addr_high4b, (uint32_t)(pdat->vram[pdat->index]) >> 29);
00008c  e595003c          LDR      r0,[r5,#0x3c]
000090  e2852040          ADD      r2,r5,#0x40
000094  e7920100          LDR      r0,[r2,r0,LSL #2]
000098  e1a01ea0          LSR      r1,r0,#29
00009c  e2840e86          ADD      r0,r4,#0x860
0000a0  ebfffffe          BL       write32
;;;160    #if LCD_CTRL_BPP == 16
;;;161      // color 16-bpp (R:5/G:6/B:5) and  R/B channel swap
;;;162      write32((uint32_t)&debe->layer0_attr1_ctrl, (0x05 << 8) | (1 << 2));  /* 此处设置像素格式 */
;;;163    #else
;;;164      // color 32-bpp (Padding:8/R:8/G:8/B:8) and  R/B channel swap
;;;165      write32((uint32_t)&debe->layer0_attr1_ctrl, (0x09 << 8) | (1 << 2));  /* 此处设置像素格式 */
0000a4  e59f1820          LDR      r1,|L1.2252|
0000a8  e2840e8a          ADD      r0,r4,#0x8a0
0000ac  ebfffffe          BL       write32
;;;166    #endif
;;;167    
;;;168    
;;;169      // enable layer-0
;;;170      val = read32((uint32_t)&debe->mode);
0000b0  e2840b02          ADD      r0,r4,#0x800
0000b4  ebfffffe          BL       read32
0000b8  e1a06000          MOV      r6,r0
;;;171      val |= (1 << 8);
0000bc  e3866c01          ORR      r6,r6,#0x100
;;;172      write32((uint32_t)&debe->mode, val);
0000c0  e1a01006          MOV      r1,r6
0000c4  e2840b02          ADD      r0,r4,#0x800
0000c8  ebfffffe          BL       write32
;;;173    
;;;174      // Register load control
;;;175      val = read32((uint32_t)&debe->reg_ctrl);
0000cc  e2840e87          ADD      r0,r4,#0x870
0000d0  ebfffffe          BL       read32
0000d4  e1a06000          MOV      r6,r0
;;;176      val |= (1 << 0);
0000d8  e3866001          ORR      r6,r6,#1
;;;177      write32((uint32_t)&debe->reg_ctrl, val);
0000dc  e1a01006          MOV      r1,r6
0000e0  e2840e87          ADD      r0,r4,#0x870
0000e4  ebfffffe          BL       write32
;;;178    
;;;179      // Normal output channel Start & Reset control
;;;180      val = read32((uint32_t)&debe->mode);
0000e8  e2840b02          ADD      r0,r4,#0x800
0000ec  ebfffffe          BL       read32
0000f0  e1a06000          MOV      r6,r0
;;;181      val |= (1 << 1);
0000f4  e3866002          ORR      r6,r6,#2
;;;182      write32((uint32_t)&debe->mode, val);
0000f8  e1a01006          MOV      r1,r6
0000fc  e2840b02          ADD      r0,r4,#0x800
000100  ebfffffe          BL       write32
;;;183    }
000104  e8bd8070          POP      {r4-r6,pc}
;;;184    
                          ENDP

                  f1c100s_debe_set_address PROC
;;;185    inline static void f1c100s_debe_set_address(fb_f1c100s_priv_data_t* pdat, void* vram)
000108  e92d4070          PUSH     {r4-r6,lr}
;;;186    {
00010c  e1a05000          MOV      r5,r0
000110  e1a04001          MOV      r4,r1
;;;187      struct f1c100s_debe_reg_t* debe = (struct f1c100s_debe_reg_t*)(pdat->virtdebe);
000114  e5956004          LDR      r6,[r5,#4]
;;;188    
;;;189      write32((uint32_t)&debe->layer0_addr_low32b, (uint32_t)vram << 3);
000118  e1a01184          LSL      r1,r4,#3
00011c  e2860e85          ADD      r0,r6,#0x850
000120  ebfffffe          BL       write32
;;;190      write32((uint32_t)&debe->layer0_addr_high4b, (uint32_t)vram >> 29);
000124  e1a01ea4          LSR      r1,r4,#29
000128  e2860e86          ADD      r0,r6,#0x860
00012c  ebfffffe          BL       write32
;;;191    }
000130  e8bd8070          POP      {r4-r6,pc}
;;;192    
                          ENDP

                  clk_divider_set_rate PROC
;;;245    
;;;246    static void clk_divider_set_rate(uint32_t virt, uint32_t width, uint32_t shift, bool onebased, uint64_t prate, uint64_t rate)
000134  e92d5fff          PUSH     {r0-r12,lr}
;;;247    {
000138  e1a09002          MOV      r9,r2
00013c  e59d5040          LDR      r5,[sp,#0x40]
000140  e59d6044          LDR      r6,[sp,#0x44]
000144  e59d7038          LDR      r7,[sp,#0x38]
000148  e59d803c          LDR      r8,[sp,#0x3c]
;;;248      uint32_t mask = ((1 << (width)) - 1);
00014c  e3a01001          MOV      r1,#1
000150  e59d0004          LDR      r0,[sp,#4]
000154  e1a00011          LSL      r0,r1,r0
000158  e240a001          SUB      r10,r0,#1
00015c  e3a01000          MOV      r1,#0
000160  e1a00001          MOV      r0,r1
000164  e0211005          EOR      r1,r1,r5
000168  e0200006          EOR      r0,r0,r6
;;;249      uint32_t div;
;;;250      uint32_t val;
;;;251    
;;;252      if (rate == 0)
00016c  e1900001          ORRS     r0,r0,r1
000170  1a000001          BNE      |L1.380|
;;;253        rate = prate;
000174  e1a05007          MOV      r5,r7
000178  e1a06008          MOV      r6,r8
                  |L1.380|
;;;254    
;;;255      div = prate / rate;
00017c  e1a02005          MOV      r2,r5
000180  e1a03006          MOV      r3,r6
000184  e1a00007          MOV      r0,r7
000188  e1a01008          MOV      r1,r8
00018c  ebfffffe          BL       __aeabi_uldivmod
000190  e1a04000          MOV      r4,r0
;;;256      if (onebased)
000194  e59d000c          LDR      r0,[sp,#0xc]
000198  e3500000          CMP      r0,#0
00019c  0a000000          BEQ      |L1.420|
;;;257        div--;
0001a0  e2444001          SUB      r4,r4,#1
                  |L1.420|
;;;258      if (div > mask)
0001a4  e154000a          CMP      r4,r10
0001a8  9a000000          BLS      |L1.432|
;;;259        div = mask;
0001ac  e1a0400a          MOV      r4,r10
                  |L1.432|
;;;260    
;;;261      val = read32(virt);
0001b0  e59d0000          LDR      r0,[sp,#0]
0001b4  ebfffffe          BL       read32
0001b8  e1a0b000          MOV      r11,r0
;;;262      val &= ~(mask << shift);
0001bc  e1cbb91a          BIC      r11,r11,r10,LSL r9
;;;263      val |= div << shift;
0001c0  e18bb914          ORR      r11,r11,r4,LSL r9
;;;264      write32(virt, val);
0001c4  e1a0100b          MOV      r1,r11
0001c8  e59d0000          LDR      r0,[sp,#0]
0001cc  ebfffffe          BL       write32
;;;265    }
0001d0  e8bd9fff          POP      {r0-r12,pc}
;;;266    
                          ENDP

                  clk_mux_set_parent PROC
;;;267    static void clk_mux_set_parent(uint32_t virt, uint32_t width, uint32_t shift, uint32_t parent_val)
0001d4  e92d41f0          PUSH     {r4-r8,lr}
;;;268    {
0001d8  e1a08000          MOV      r8,r0
0001dc  e1a06001          MOV      r6,r1
0001e0  e1a04002          MOV      r4,r2
0001e4  e1a07003          MOV      r7,r3
;;;269      uint32_t val;
;;;270      val = read32(virt);
0001e8  e1a00008          MOV      r0,r8
0001ec  ebfffffe          BL       read32
0001f0  e1a05000          MOV      r5,r0
;;;271      val &= ~(((1 << width) - 1) << shift);
0001f4  e3a00001          MOV      r0,#1
0001f8  e1a00610          LSL      r0,r0,r6
0001fc  e2400001          SUB      r0,r0,#1
000200  e1c55410          BIC      r5,r5,r0,LSL r4
;;;272      val |= parent_val << shift;
000204  e1855417          ORR      r5,r5,r7,LSL r4
;;;273      write32(virt, val);
000208  e1a01005          MOV      r1,r5
00020c  e1a00008          MOV      r0,r8
000210  ebfffffe          BL       write32
;;;274    }
000214  e8bd81f0          POP      {r4-r8,pc}
;;;275    
                          ENDP

                  f1c100s_clk_defe_init PROC
;;;276    static void f1c100s_clk_defe_init(void)
000218  e92d41ff          PUSH     {r0-r8,lr}
;;;277    {
;;;278      // select Clock Source for defe
;;;279      clk_mux_set_parent(0x01c2010c, 3, 24, 0);
00021c  e3a03000          MOV      r3,#0
000220  e3a02018          MOV      r2,#0x18
000224  e3a01003          MOV      r1,#3
000228  e59f06a0          LDR      r0,|L1.2256|
00022c  ebfffffe          BL       clk_mux_set_parent
;;;280      // set defe Clock divide ratio
;;;281      clk_divider_set_rate(0x01c2010c, 4, 0, true, f1c100s_tcon_clk_get_rate(), f1c100s_tcon_clk_get_rate());
000230  ebfffffe          BL       f1c100s_tcon_clk_get_rate
000234  e1a04000          MOV      r4,r0
000238  e1a05001          MOV      r5,r1
00023c  ebfffffe          BL       f1c100s_tcon_clk_get_rate
000240  e3a03001          MOV      r3,#1
000244  e3a02000          MOV      r2,#0
000248  e88d0033          STM      sp,{r0,r1,r4,r5}
00024c  e3a01004          MOV      r1,#4
000250  e59f0678          LDR      r0,|L1.2256|
000254  ebfffffe          BL       clk_divider_set_rate
;;;282    }
000258  e8bd81ff          POP      {r0-r8,pc}
;;;283    
                          ENDP

                  f1c100s_clk_debe_init PROC
;;;309    
;;;310    static void f1c100s_clk_debe_init(void)
00025c  e92d41ff          PUSH     {r0-r8,lr}
;;;311    {
;;;312      // select Clock Source for debe
;;;313      clk_mux_set_parent(0x01c20104, 3, 24, 0);
000260  e3a03000          MOV      r3,#0
000264  e3a02018          MOV      r2,#0x18
000268  e3a01003          MOV      r1,#3
00026c  e59f0660          LDR      r0,|L1.2260|
000270  ebfffffe          BL       clk_mux_set_parent
;;;314      // set debe Clock divide ratio
;;;315      clk_divider_set_rate(0x01c20104, 4, 0, true, f1c100s_tcon_clk_get_rate(), f1c100s_tcon_clk_get_rate());
000274  ebfffffe          BL       f1c100s_tcon_clk_get_rate
000278  e1a04000          MOV      r4,r0
00027c  e1a05001          MOV      r5,r1
000280  ebfffffe          BL       f1c100s_tcon_clk_get_rate
000284  e3a03001          MOV      r3,#1
000288  e3a02000          MOV      r2,#0
00028c  e88d0033          STM      sp,{r0,r1,r4,r5}
000290  e3a01004          MOV      r1,#4
000294  e59f0638          LDR      r0,|L1.2260|
000298  ebfffffe          BL       clk_divider_set_rate
;;;316    }
00029c  e8bd81ff          POP      {r0-r8,pc}
;;;317    
                          ENDP

                  f1c100s_tcon_set_mode PROC
;;;342    
;;;343    inline static void f1c100s_tcon_set_mode(fb_f1c100s_priv_data_t* pdat)
0002a0  e92d47fc          PUSH     {r2-r10,lr}
;;;344    {
0002a4  e1a04000          MOV      r4,r0
;;;345      struct f1c100s_tcon_reg_t* tcon = (struct f1c100s_tcon_reg_t*)pdat->virttcon;
0002a8  e5945008          LDR      r5,[r4,#8]
;;;346      int32_t bp, total;
;;;347      uint32_t val;
;;;348    
;;;349      // use tcon0
;;;350      val = read32((uint32_t)&tcon->ctrl);
0002ac  e1a00005          MOV      r0,r5
0002b0  ebfffffe          BL       read32
0002b4  e1a06000          MOV      r6,r0
;;;351      val &= ~(0x1 << 0);
0002b8  e3c66001          BIC      r6,r6,#1
;;;352      write32((uint32_t)&tcon->ctrl, val);
0002bc  e1a01006          MOV      r1,r6
0002c0  e1a00005          MOV      r0,r5
0002c4  ebfffffe          BL       write32
;;;353    
;;;354      // set panel configurations
;;;355      val = (pdat->timing.v_front_porch + pdat->timing.v_back_porch + pdat->timing.v_sync_len);
0002c8  e5940058          LDR      r0,[r4,#0x58]
0002cc  e594105c          LDR      r1,[r4,#0x5c]
0002d0  e0800001          ADD      r0,r0,r1
0002d4  e5941060          LDR      r1,[r4,#0x60]
0002d8  e0806001          ADD      r6,r0,r1
;;;356      write32((uint32_t)&tcon->tcon0_ctrl, (1UL << 31) | ((val & 0x1f) << 4));
0002dc  e206001f          AND      r0,r6,#0x1f
0002e0  e3a02102          MOV      r2,#0x80000000
0002e4  e1821200          ORR      r1,r2,r0,LSL #4
0002e8  e2850040          ADD      r0,r5,#0x40
0002ec  ebfffffe          BL       write32
;;;357    
;;;358      //val = clk_get_rate(pdat->clktcon) / pdat->timing.pixel_clock_hz;
;;;359      val = f1c100s_tcon_clk_get_rate() / pdat->timing.pixel_clock_hz;
0002f0  ebfffffe          BL       f1c100s_tcon_clk_get_rate
0002f4  e1cd00f0          STRD     r0,r1,[sp,#0]
0002f8  e5940048          LDR      r0,[r4,#0x48]
0002fc  e1a03fc0          ASR      r3,r0,#31
000300  e1a07000          MOV      r7,r0
000304  e1a02007          MOV      r2,r7
000308  e59d0000          LDR      r0,[sp,#0]
00030c  ebfffffe          BL       __aeabi_uldivmod
000310  e1a06000          MOV      r6,r0
;;;360      write32((uint32_t)&tcon->tcon0_dclk, (0xFUL << 28) | (val << 0));
000314  e386120f          ORR      r1,r6,#0xf0000000
000318  e2850044          ADD      r0,r5,#0x44
00031c  ebfffffe          BL       write32
;;;361    
;;;362      // panel height and width
;;;363      write32((uint32_t)&tcon->tcon0_timing_active, ((pdat->width - 1) << 16) | ((pdat->height - 1) << 0));
000320  e5940028          LDR      r0,[r4,#0x28]
000324  e2400001          SUB      r0,r0,#1
000328  e1d422b4          LDRH     r2,[r4,#0x24]
00032c  e2422001          SUB      r2,r2,#1
000330  e1801802          ORR      r1,r0,r2,LSL #16
000334  e2850048          ADD      r0,r5,#0x48
000338  ebfffffe          BL       write32
;;;364    
;;;365      // 横向时序
;;;366      bp = pdat->timing.h_sync_len + pdat->timing.h_back_porch;
00033c  e5940054          LDR      r0,[r4,#0x54]
000340  e5941050          LDR      r1,[r4,#0x50]
000344  e0809001          ADD      r9,r0,r1
;;;367      total = pdat->width + pdat->timing.h_front_porch + bp;
000348  e5940024          LDR      r0,[r4,#0x24]
00034c  e594104c          LDR      r1,[r4,#0x4c]
000350  e0800001          ADD      r0,r0,r1
000354  e080a009          ADD      r10,r0,r9
;;;368      write32((uint32_t)&tcon->tcon0_timing_h, ((total - 1) << 16) | ((bp - 1) << 0));
000358  e2490001          SUB      r0,r9,#1
00035c  e24a2001          SUB      r2,r10,#1
000360  e1801802          ORR      r1,r0,r2,LSL #16
000364  e285004c          ADD      r0,r5,#0x4c
000368  ebfffffe          BL       write32
;;;369    
;;;370      // 纵向时序
;;;371      bp = pdat->timing.v_sync_len + pdat->timing.v_back_porch;
00036c  e5940060          LDR      r0,[r4,#0x60]
000370  e594105c          LDR      r1,[r4,#0x5c]
000374  e0809001          ADD      r9,r0,r1
;;;372      total = pdat->height + pdat->timing.v_front_porch + bp;
000378  e5940028          LDR      r0,[r4,#0x28]
00037c  e5941058          LDR      r1,[r4,#0x58]
000380  e0800001          ADD      r0,r0,r1
000384  e080a009          ADD      r10,r0,r9
;;;373      write32((uint32_t)&tcon->tcon0_timing_v, ((total * 2) << 16) | ((bp - 1) << 0));
000388  e2490001          SUB      r0,r9,#1
00038c  e180188a          ORR      r1,r0,r10,LSL #17
000390  e2850050          ADD      r0,r5,#0x50
000394  ebfffffe          BL       write32
;;;374    
;;;375      // 同步信号宽度
;;;376      write32((uint32_t)&tcon->tcon0_timing_sync, ((pdat->timing.h_sync_len - 1) << 16) | ((pdat->timing.v_sync_len - 1) << 0));
000398  e5940060          LDR      r0,[r4,#0x60]
00039c  e2400001          SUB      r0,r0,#1
0003a0  e1d425b4          LDRH     r2,[r4,#0x54]
0003a4  e2422001          SUB      r2,r2,#1
0003a8  e1801802          ORR      r1,r0,r2,LSL #16
0003ac  e2850054          ADD      r0,r5,#0x54
0003b0  ebfffffe          BL       write32
;;;377    
;;;378      // 这里要注意，可能跟bpp有关？
;;;379      write32((uint32_t)&tcon->tcon0_hv_intf, 0);
0003b4  e3a01000          MOV      r1,#0
0003b8  e2850058          ADD      r0,r5,#0x58
0003bc  ebfffffe          BL       write32
;;;380      write32((uint32_t)&tcon->tcon0_cpu_intf, 0);
0003c0  e3a01000          MOV      r1,#0
0003c4  e2850060          ADD      r0,r5,#0x60
0003c8  ebfffffe          BL       write32
;;;381    
;;;382      if (pdat->bits_per_pixel == 18 || pdat->bits_per_pixel == 16) {
0003cc  e5940034          LDR      r0,[r4,#0x34]
0003d0  e3500012          CMP      r0,#0x12
0003d4  0a000002          BEQ      |L1.996|
0003d8  e5940034          LDR      r0,[r4,#0x34]
0003dc  e3500010          CMP      r0,#0x10
0003e0  1a000026          BNE      |L1.1152|
                  |L1.996|
;;;383        write32((uint32_t)&tcon->tcon0_frm_seed[0], 0x11111111);
0003e4  e59f14ec          LDR      r1,|L1.2264|
0003e8  e2850014          ADD      r0,r5,#0x14
0003ec  ebfffffe          BL       write32
;;;384        write32((uint32_t)&tcon->tcon0_frm_seed[1], 0x11111111);
0003f0  e59f14e0          LDR      r1,|L1.2264|
0003f4  e2850018          ADD      r0,r5,#0x18
0003f8  ebfffffe          BL       write32
;;;385        write32((uint32_t)&tcon->tcon0_frm_seed[2], 0x11111111);
0003fc  e59f14d4          LDR      r1,|L1.2264|
000400  e285001c          ADD      r0,r5,#0x1c
000404  ebfffffe          BL       write32
;;;386        write32((uint32_t)&tcon->tcon0_frm_seed[3], 0x11111111);
000408  e59f14c8          LDR      r1,|L1.2264|
00040c  e2850020          ADD      r0,r5,#0x20
000410  ebfffffe          BL       write32
;;;387        write32((uint32_t)&tcon->tcon0_frm_seed[4], 0x11111111);
000414  e59f14bc          LDR      r1,|L1.2264|
000418  e2850024          ADD      r0,r5,#0x24
00041c  ebfffffe          BL       write32
;;;388        write32((uint32_t)&tcon->tcon0_frm_seed[5], 0x11111111);
000420  e59f14b0          LDR      r1,|L1.2264|
000424  e2850028          ADD      r0,r5,#0x28
000428  ebfffffe          BL       write32
;;;389        write32((uint32_t)&tcon->tcon0_frm_table[0], 0x01010000);
00042c  e59f14a8          LDR      r1,|L1.2268|
000430  e285002c          ADD      r0,r5,#0x2c
000434  ebfffffe          BL       write32
;;;390        write32((uint32_t)&tcon->tcon0_frm_table[1], 0x15151111);
000438  e59f14a0          LDR      r1,|L1.2272|
00043c  e2850030          ADD      r0,r5,#0x30
000440  ebfffffe          BL       write32
;;;391        write32((uint32_t)&tcon->tcon0_frm_table[2], 0x57575555);
000444  e59f1498          LDR      r1,|L1.2276|
000448  e2850034          ADD      r0,r5,#0x34
00044c  ebfffffe          BL       write32
;;;392        write32((uint32_t)&tcon->tcon0_frm_table[3], 0x7f7f7777);
000450  e59f1490          LDR      r1,|L1.2280|
000454  e2850038          ADD      r0,r5,#0x38
000458  ebfffffe          BL       write32
;;;393        write32((uint32_t)&tcon->tcon0_frm_ctrl, (pdat->bits_per_pixel == 18) ? ((1UL << 31) | (0 << 4)) : ((1UL << 31) | (5 << 4)));
00045c  e5940034          LDR      r0,[r4,#0x34]
000460  e3500012          CMP      r0,#0x12
000464  1a000001          BNE      |L1.1136|
000468  e3a00102          MOV      r0,#0x80000000
00046c  ea000000          B        |L1.1140|
                  |L1.1136|
000470  e59f0474          LDR      r0,|L1.2284|
                  |L1.1140|
000474  e1a01000          MOV      r1,r0
000478  e2850010          ADD      r0,r5,#0x10
00047c  ebfffffe          BL       write32
                  |L1.1152|
;;;394      }
;;;395    
;;;396      val = (1 << 28);
000480  e3a06201          MOV      r6,#0x10000000
;;;397      if (!pdat->timing.h_sync_active)
000484  e5940064          LDR      r0,[r4,#0x64]
000488  e3500000          CMP      r0,#0
00048c  1a000000          BNE      |L1.1172|
;;;398        val |= (1 << 25);
000490  e3866402          ORR      r6,r6,#0x2000000
                  |L1.1172|
;;;399      if (!pdat->timing.h_sync_active)
000494  e5940064          LDR      r0,[r4,#0x64]
000498  e3500000          CMP      r0,#0
00049c  1a000000          BNE      |L1.1188|
;;;400        val |= (1 << 24);
0004a0  e3866401          ORR      r6,r6,#0x1000000
                  |L1.1188|
;;;401      write32((uint32_t)&tcon->tcon0_io_polarity, val);
0004a4  e1a01006          MOV      r1,r6
0004a8  e2850088          ADD      r0,r5,#0x88
0004ac  ebfffffe          BL       write32
;;;402      write32((uint32_t)&tcon->tcon0_io_tristate, 0);
0004b0  e3a01000          MOV      r1,#0
0004b4  e285008c          ADD      r0,r5,#0x8c
0004b8  ebfffffe          BL       write32
;;;403    }
0004bc  e8bd87fc          POP      {r2-r10,pc}
;;;404    
                          ENDP

                  fb_f1c100s_init_hw PROC
;;;414    
;;;415    static void fb_f1c100s_init_hw(fb_f1c100s_priv_data_t* pdat)
0004c0  e92d5ff0          PUSH     {r4-r12,lr}
;;;416    {
0004c4  e1a05000          MOV      r5,r0
;;;417      // enable PLL_ENABLE bit in PLL_VEDIO register
;;;418      f1c100s_clk_pll_video_set_enable(true);
0004c8  e3a04001          MOV      r4,#1
0004cc  e1a01004          MOV      r1,r4
0004d0  e59f0418          LDR      r0,|L1.2288|
0004d4  ebfffffe          BL       clk_f1c100s_pll_set_enable
0004d8  e1a00000          MOV      r0,r0
;;;419      f1c100s_clk_debe_init();
0004dc  ebfffffe          BL       f1c100s_clk_debe_init
;;;420      f1c100s_clk_defe_init();
0004e0  ebfffffe          BL       f1c100s_clk_defe_init
;;;421    
;;;422      // Set LCD panel pin-function
;;;423    #ifdef PCB_TINY200V2
;;;424      fb_f1c100s_cfg_gpios(&GPIO_PD, 1, 12, 0x2, GPIO_PULL_NONE, GPIO_DRV_STRONG);
;;;425      fb_f1c100s_cfg_gpios(&GPIO_PD, 13, 22, 0x2, GPIO_PULL_NONE, GPIO_DRV_STRONG);
;;;426    #else
;;;427      fb_f1c100s_cfg_gpios(&GPIO_PD, 0, 22, 0x2, GPIO_PULL_NONE, GPIO_DRV_STRONG);
0004e4  e59f6408          LDR      r6,|L1.2292|
0004e8  e3a07000          MOV      r7,#0
0004ec  e3a08016          MOV      r8,#0x16
0004f0  e3a09002          MOV      r9,#2
0004f4  e1a0a009          MOV      r10,r9
0004f8  e3a0b003          MOV      r11,#3
0004fc  e1a04007          MOV      r4,r7
000500  ea00000c          B        |L1.1336|
                  |L1.1284|
000504  e1a02009          MOV      r2,r9
000508  e1a01004          MOV      r1,r4
00050c  e1a00006          MOV      r0,r6
000510  ebfffffe          BL       gpio_f1c100s_set_cfg
000514  e1a0200a          MOV      r2,r10
000518  e1a01004          MOV      r1,r4
00051c  e1a00006          MOV      r0,r6
000520  ebfffffe          BL       gpio_f1c100s_set_pull
000524  e1a0200b          MOV      r2,r11
000528  e1a01004          MOV      r1,r4
00052c  e1a00006          MOV      r0,r6
000530  ebfffffe          BL       gpio_f1c100s_set_drv
000534  e2844001          ADD      r4,r4,#1
                  |L1.1336|
000538  e1540008          CMP      r4,r8
00053c  bafffff0          BLT      |L1.1284|
000540  e1a00000          MOV      r0,r0
;;;428    #endif
;;;429    
;;;430      // disable/initialize tcon0
;;;431      f1c100s_tcon_disable(pdat);
000544  e1a00000          MOV      r0,r0
000548  e5954008          LDR      r4,[r5,#8]
00054c  e3a01000          MOV      r1,#0
000550  e1a00004          MOV      r0,r4
000554  ebfffffe          BL       write32
000558  e3a01000          MOV      r1,#0
00055c  e2840004          ADD      r0,r4,#4
000560  ebfffffe          BL       write32
000564  e2840044          ADD      r0,r4,#0x44
000568  ebfffffe          BL       read32
00056c  e1a06000          MOV      r6,r0
000570  e3c6620f          BIC      r6,r6,#0xf0000000
000574  e1a01006          MOV      r1,r6
000578  e2840044          ADD      r0,r4,#0x44
00057c  ebfffffe          BL       write32
000580  e3e01000          MVN      r1,#0
000584  e284008c          ADD      r0,r4,#0x8c
000588  ebfffffe          BL       write32
00058c  e3e01000          MVN      r1,#0
000590  e28400f4          ADD      r0,r4,#0xf4
000594  ebfffffe          BL       write32
000598  e1a00000          MOV      r0,r0
;;;432    
;;;433      f1c100s_debe_set_mode(pdat);
00059c  e1a00005          MOV      r0,r5
0005a0  ebfffffe          BL       f1c100s_debe_set_mode
;;;434      f1c100s_tcon_set_mode(pdat);
0005a4  e1a00005          MOV      r0,r5
0005a8  ebfffffe          BL       f1c100s_tcon_set_mode
;;;435      f1c100s_tcon_enable(pdat);
0005ac  e1a00000          MOV      r0,r0
0005b0  e5956008          LDR      r6,[r5,#8]
0005b4  e1a00006          MOV      r0,r6
0005b8  ebfffffe          BL       read32
0005bc  e1a04000          MOV      r4,r0
0005c0  e3844102          ORR      r4,r4,#0x80000000
0005c4  e1a01004          MOV      r1,r4
0005c8  e1a00006          MOV      r0,r6
0005cc  ebfffffe          BL       write32
0005d0  e1a00000          MOV      r0,r0
;;;436    
;;;437      // enable panel back-light
;;;438      pwm_f1c100s_init(pdat->backlight);
0005d4  e5950074          LDR      r0,[r5,#0x74]
0005d8  ebfffffe          BL       pwm_f1c100s_init
;;;439    }
0005dc  e8bd9ff0          POP      {r4-r12,pc}
;;;440    
                          ENDP

                  fb_f1c100s_setbl PROC
;;;441    void fb_f1c100s_setbl(framebuffer_t* fb, int32_t brightness)
0005e0  e92d4070          PUSH     {r4-r6,lr}
;;;442    {
0005e4  e1a04000          MOV      r4,r0
0005e8  e1a05001          MOV      r5,r1
;;;443      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
0005ec  e5946018          LDR      r6,[r4,#0x18]
;;;444      //led_set_brightness(pdat->backlight, brightness);
;;;445      pwm_f1c100s_set_duty(pdat->backlight, brightness);
0005f0  e1a01005          MOV      r1,r5
0005f4  e5960074          LDR      r0,[r6,#0x74]
0005f8  ebfffffe          BL       pwm_f1c100s_set_duty
;;;446    }
0005fc  e8bd8070          POP      {r4-r6,pc}
;;;447    
                          ENDP

                  fb_f1c100s_getbl PROC
;;;448    int32_t fb_f1c100s_getbl(framebuffer_t* fb)
000600  e1a01000          MOV      r1,r0
;;;449    {
;;;450      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
000604  e5912018          LDR      r2,[r1,#0x18]
;;;451      // return led_get_brightness(pdat->backlight);
;;;452      return pwm_f1c100s_get_duty(pdat->backlight);
000608  e5920074          LDR      r0,[r2,#0x74]
00060c  e5903008          LDR      r3,[r0,#8]
000610  e1a00003          MOV      r0,r3
;;;453    }
000614  e12fff1e          BX       lr
;;;454    
                          ENDP

                  fb_f1c100s_present PROC
;;;455    void fb_f1c100s_present(framebuffer_t* fb, int index)
000618  e92d4070          PUSH     {r4-r6,lr}
;;;456    {
00061c  e1a06000          MOV      r6,r0
000620  e1a04001          MOV      r4,r1
;;;457      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
000624  e5965018          LDR      r5,[r6,#0x18]
;;;458    
;;;459      if (pdat && (index == 0 || index == 1)) {
000628  e3550000          CMP      r5,#0
00062c  0a000007          BEQ      |L1.1616|
000630  e3540000          CMP      r4,#0
000634  0a000001          BEQ      |L1.1600|
000638  e3540001          CMP      r4,#1
00063c  1a000003          BNE      |L1.1616|
                  |L1.1600|
;;;460        f1c100s_debe_set_address(pdat, pdat->vram[index]);
000640  e2850040          ADD      r0,r5,#0x40
000644  e7901104          LDR      r1,[r0,r4,LSL #2]
000648  e1a00005          MOV      r0,r5
00064c  ebfffffe          BL       f1c100s_debe_set_address
                  |L1.1616|
;;;461      }
;;;462    }
000650  e8bd8070          POP      {r4-r6,pc}
;;;463    
                          ENDP

                  fb_f1c100s_init PROC
;;;464    void fb_f1c100s_init(framebuffer_t* fb)
000654  e92d41f0          PUSH     {r4-r8,lr}
;;;465    {
000658  e1a05000          MOV      r5,r0
;;;466      int32_t i;
;;;467      fb_f1c100s_priv_data_t* pdat = &fb_f1c100s_priv_object;
00065c  e59f4294          LDR      r4,|L1.2296|
;;;468    
;;;469      pdat->virtdefe = phys_to_virt(F1C100S_DEFE_BASE);
000660  e3a0061e          MOV      r0,#0x1e00000
000664  e5840000          STR      r0,[r4,#0]
;;;470      pdat->virtdebe = phys_to_virt(F1C100S_DEBE_BASE);
000668  e2800806          ADD      r0,r0,#0x60000
00066c  e5840004          STR      r0,[r4,#4]
;;;471      pdat->virttcon = phys_to_virt(F1C100S_TCON_BASE);
000670  e2400995          SUB      r0,r0,#0x254000
000674  e5840008          STR      r0,[r4,#8]
;;;472      pdat->clkdefe = "clkdefe";
000678  e28f0f9f          ADR      r0,|L1.2300|
00067c  e584000c          STR      r0,[r4,#0xc]
;;;473      pdat->clkdebe = "clkdebe";
000680  e28f0f9f          ADR      r0,|L1.2308|
000684  e5840010          STR      r0,[r4,#0x10]
;;;474      pdat->clktcon = "clktcon";
000688  e28f0f9f          ADR      r0,|L1.2316|
00068c  e5840014          STR      r0,[r4,#0x14]
;;;475      pdat->rstdefe = 46;
000690  e3a0002e          MOV      r0,#0x2e
000694  e5840018          STR      r0,[r4,#0x18]
;;;476      pdat->rstdebe = 44;
000698  e3a0002c          MOV      r0,#0x2c
00069c  e584001c          STR      r0,[r4,#0x1c]
;;;477      pdat->rsttcon = 36;
0006a0  e3a00024          MOV      r0,#0x24
0006a4  e5840020          STR      r0,[r4,#0x20]
;;;478      pdat->width = FB_LCD_XSIZE;
0006a8  e3a00e1e          MOV      r0,#0x1e0
0006ac  e5840024          STR      r0,[r4,#0x24]
;;;479      pdat->height = FB_LCD_YSIZE;
0006b0  e3a00e11          MOV      r0,#0x110
0006b4  e5840028          STR      r0,[r4,#0x28]
;;;480      pdat->pwidth = 216;
0006b8  e3a000d8          MOV      r0,#0xd8
0006bc  e584002c          STR      r0,[r4,#0x2c]
;;;481      pdat->pheight = 135;
0006c0  e3a00087          MOV      r0,#0x87
0006c4  e5840030          STR      r0,[r4,#0x30]
;;;482      pdat->bits_per_pixel = LCD_CTRL_BPP;
0006c8  e3a00020          MOV      r0,#0x20
0006cc  e5840034          STR      r0,[r4,#0x34]
;;;483      pdat->bytes_per_pixel = LCD_BYTE_PP;
0006d0  e3a00004          MOV      r0,#4
0006d4  e5840038          STR      r0,[r4,#0x38]
;;;484      pdat->index = 0;
0006d8  e3a00000          MOV      r0,#0
0006dc  e584003c          STR      r0,[r4,#0x3c]
;;;485      pdat->vram[0] = fb_mem[0];
0006e0  e59f022c          LDR      r0,|L1.2324|
0006e4  e5840040          STR      r0,[r4,#0x40]
;;;486      pdat->vram[1] = fb_mem[1];
0006e8  e59f0228          LDR      r0,|L1.2328|
0006ec  e5840044          STR      r0,[r4,#0x44]
;;;487    
;;;488      // hclock = 40+87+1+width=128+width;
;;;489      // vlines = 13+31+1+height=45+height;
;;;490      pdat->timing.pixel_clock_hz = PIXEL_CLOCK;
0006f0  e59f0224          LDR      r0,|L1.2332|
0006f4  e5840048          STR      r0,[r4,#0x48]
;;;491      pdat->timing.h_front_porch = 40;
0006f8  e3a00028          MOV      r0,#0x28
0006fc  e584004c          STR      r0,[r4,#0x4c]
;;;492      pdat->timing.h_back_porch = 87;
000700  e3a00057          MOV      r0,#0x57
000704  e5840050          STR      r0,[r4,#0x50]
;;;493      pdat->timing.h_sync_len = 1;
000708  e3a00001          MOV      r0,#1
00070c  e5840054          STR      r0,[r4,#0x54]
;;;494      pdat->timing.v_front_porch = 13;
000710  e3a0000d          MOV      r0,#0xd
000714  e5840058          STR      r0,[r4,#0x58]
;;;495      pdat->timing.v_back_porch = 31;
000718  e3a0001f          MOV      r0,#0x1f
00071c  e584005c          STR      r0,[r4,#0x5c]
;;;496      pdat->timing.v_sync_len = 1;
000720  e3a00001          MOV      r0,#1
000724  e5840060          STR      r0,[r4,#0x60]
;;;497      pdat->timing.h_sync_active = false;
000728  e3a00000          MOV      r0,#0
00072c  e5840064          STR      r0,[r4,#0x64]
;;;498      pdat->timing.v_sync_active = false;
000730  e5840068          STR      r0,[r4,#0x68]
;;;499      pdat->timing.den_active = false;
000734  e584006c          STR      r0,[r4,#0x6c]
;;;500      pdat->timing.clk_active = false;
000738  e5840070          STR      r0,[r4,#0x70]
;;;501      pdat->backlight = &led_pwm_bl;
00073c  e59f01dc          LDR      r0,|L1.2336|
000740  e5840074          STR      r0,[r4,#0x74]
;;;502    
;;;503      fb->name = "fb-f1c100s";
000744  e28f0f76          ADR      r0,|L1.2340|
000748  e5850000          STR      r0,[r5,#0]
;;;504      fb->width = pdat->width;
00074c  e5940024          LDR      r0,[r4,#0x24]
000750  e5850004          STR      r0,[r5,#4]
;;;505      fb->height = pdat->height;
000754  e5940028          LDR      r0,[r4,#0x28]
000758  e5850008          STR      r0,[r5,#8]
;;;506      fb->pwidth = pdat->pwidth;
00075c  e594002c          LDR      r0,[r4,#0x2c]
000760  e585000c          STR      r0,[r5,#0xc]
;;;507      fb->pheight = pdat->pheight;
000764  e5940030          LDR      r0,[r4,#0x30]
000768  e5850010          STR      r0,[r5,#0x10]
;;;508      fb->bpp = pdat->bytes_per_pixel * 8;
00076c  e5940038          LDR      r0,[r4,#0x38]
000770  e1a00180          LSL      r0,r0,#3
000774  e5850014          STR      r0,[r5,#0x14]
;;;509      fb->priv = pdat;
000778  e5854018          STR      r4,[r5,#0x18]
;;;510    
;;;511      f1c100s_clk_defe_enable();
00077c  e1a00000          MOV      r0,r0
000780  e59f0148          LDR      r0,|L1.2256|
000784  ebfffffe          BL       read32
000788  e3807102          ORR      r7,r0,#0x80000000
00078c  e1a01007          MOV      r1,r7
000790  e59f0138          LDR      r0,|L1.2256|
000794  ebfffffe          BL       write32
000798  e59f0190          LDR      r0,|L1.2352|
00079c  ebfffffe          BL       read32
0007a0  e3807901          ORR      r7,r0,#0x4000
0007a4  e1a01007          MOV      r1,r7
0007a8  e59f0180          LDR      r0,|L1.2352|
0007ac  ebfffffe          BL       write32
0007b0  e1a00000          MOV      r0,r0
;;;512      f1c100s_clk_debe_enable();
0007b4  e1a00000          MOV      r0,r0
0007b8  e59f0114          LDR      r0,|L1.2260|
0007bc  ebfffffe          BL       read32
0007c0  e3807102          ORR      r7,r0,#0x80000000
0007c4  e1a01007          MOV      r1,r7
0007c8  e59f0104          LDR      r0,|L1.2260|
0007cc  ebfffffe          BL       write32
0007d0  e59f0158          LDR      r0,|L1.2352|
0007d4  ebfffffe          BL       read32
0007d8  e3807a01          ORR      r7,r0,#0x1000
0007dc  e1a01007          MOV      r1,r7
0007e0  e59f0148          LDR      r0,|L1.2352|
0007e4  ebfffffe          BL       write32
0007e8  e1a00000          MOV      r0,r0
;;;513      f1c100s_clk_tcon_enable();
0007ec  e1a00000          MOV      r0,r0
0007f0  e59f013c          LDR      r0,|L1.2356|
0007f4  ebfffffe          BL       read32
0007f8  e3807102          ORR      r7,r0,#0x80000000
0007fc  e1a01007          MOV      r1,r7
000800  e59f012c          LDR      r0,|L1.2356|
000804  ebfffffe          BL       write32
000808  e59f0120          LDR      r0,|L1.2352|
00080c  ebfffffe          BL       read32
000810  e3807010          ORR      r7,r0,#0x10
000814  e1a01007          MOV      r1,r7
000818  e59f0110          LDR      r0,|L1.2352|
00081c  ebfffffe          BL       write32
000820  e1a00000          MOV      r0,r0
;;;514    
;;;515      if (pdat->rstdefe >= 0) // De-assert DEFE_RST
000824  e5940018          LDR      r0,[r4,#0x18]
000828  e3500000          CMP      r0,#0
00082c  ba000005          BLT      |L1.2120|
;;;516        reset_f1c100s_deassert(&reset_2, pdat->rstdefe - reset_2.base);
000830  e59f2100          LDR      r2,|L1.2360|
000834  e5940018          LDR      r0,[r4,#0x18]
000838  e5922004          LDR      r2,[r2,#4]  ; reset_2
00083c  e0401002          SUB      r1,r0,r2
000840  e59f00f0          LDR      r0,|L1.2360|
000844  ebfffffe          BL       reset_f1c100s_deassert
                  |L1.2120|
;;;517      if (pdat->rstdebe >= 0) // De-assert DEBE_RST
000848  e594001c          LDR      r0,[r4,#0x1c]
00084c  e3500000          CMP      r0,#0
000850  ba000005          BLT      |L1.2156|
;;;518        reset_f1c100s_deassert(&reset_2, pdat->rstdebe - reset_2.base);
000854  e59f20dc          LDR      r2,|L1.2360|
000858  e594001c          LDR      r0,[r4,#0x1c]
00085c  e5922004          LDR      r2,[r2,#4]  ; reset_2
000860  e0401002          SUB      r1,r0,r2
000864  e59f00cc          LDR      r0,|L1.2360|
000868  ebfffffe          BL       reset_f1c100s_deassert
                  |L1.2156|
;;;519      if (pdat->rsttcon >= 0) // De-assert LCD_RST
00086c  e5940020          LDR      r0,[r4,#0x20]
000870  e3500000          CMP      r0,#0
000874  ba000005          BLT      |L1.2192|
;;;520        reset_f1c100s_deassert(&reset_2, pdat->rsttcon - reset_2.base);
000878  e59f20b8          LDR      r2,|L1.2360|
00087c  e5940020          LDR      r0,[r4,#0x20]
000880  e5922004          LDR      r2,[r2,#4]  ; reset_2
000884  e0401002          SUB      r1,r0,r2
000888  e59f00a8          LDR      r0,|L1.2360|
00088c  ebfffffe          BL       reset_f1c100s_deassert
                  |L1.2192|
;;;521    
;;;522      // F1C100S_DEBE_BASE寄存器组全清零
;;;523      for (i = 0x0800; i < 0x1000; i += 4)
000890  e3a06b02          MOV      r6,#0x800
000894  ea000004          B        |L1.2220|
                  |L1.2200|
;;;524        write32(pdat->virtdebe + i, 0);
000898  e5941004          LDR      r1,[r4,#4]
00089c  e0810006          ADD      r0,r1,r6
0008a0  e3a01000          MOV      r1,#0
0008a4  ebfffffe          BL       write32
0008a8  e2866004          ADD      r6,r6,#4              ;523
                  |L1.2220|
0008ac  e3560a01          CMP      r6,#0x1000            ;523
0008b0  bafffff8          BLT      |L1.2200|
;;;525    
;;;526      // 开始配置LCD控制器
;;;527      fb_f1c100s_init_hw(pdat);
0008b4  e1a00004          MOV      r0,r4
0008b8  ebfffffe          BL       fb_f1c100s_init_hw
;;;528      f1c100s_debe_set_address(pdat, pdat->vram[0]);
0008bc  e5941040          LDR      r1,[r4,#0x40]
0008c0  e1a00004          MOV      r0,r4
0008c4  ebfffffe          BL       f1c100s_debe_set_address
;;;529    }
0008c8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2252|
                          DCD      0x00000904
                  |L1.2256|
                          DCD      0x01c2010c
                  |L1.2260|
                          DCD      0x01c20104
                  |L1.2264|
                          DCD      0x11111111
                  |L1.2268|
                          DCD      0x01010000
                  |L1.2272|
                          DCD      0x15151111
                  |L1.2276|
                          DCD      0x57575555
                  |L1.2280|
                          DCD      0x7f7f7777
                  |L1.2284|
                          DCD      0x80000050
                  |L1.2288|
                          DCD      clk_pll_video
                  |L1.2292|
                          DCD      GPIO_PD
                  |L1.2296|
                          DCD      fb_f1c100s_priv_object
                  |L1.2300|
0008fc  636c6b64          DCB      "clkdefe",0
000900  65666500
                  |L1.2308|
000904  636c6b64          DCB      "clkdebe",0
000908  65626500
                  |L1.2316|
00090c  636c6b74          DCB      "clktcon",0
000910  636f6e00
                  |L1.2324|
                          DCD      fb_mem
                  |L1.2328|
                          DCD      fb_mem+0x7f800
                  |L1.2332|
                          DCD      0x00a7d8c0
                  |L1.2336|
                          DCD      led_pwm_bl
                  |L1.2340|
000924  66622d66          DCB      "fb-f1c100s",0
000928  31633130
00092c  307300  
00092f  00                DCB      0
                  |L1.2352|
                          DCD      0x01c20064
                  |L1.2356|
                          DCD      0x01c20118
                  |L1.2360|
                          DCD      reset_2
                          ENDP

                  fb_f1c100s_get_vram1 PROC
;;;530    
;;;531    void* fb_f1c100s_get_vram1(void)
00093c  e51f0030          LDR      r0,|L1.2324|
;;;532    {
;;;533      return fb_mem[0];
;;;534    }
000940  e12fff1e          BX       lr
;;;535    
                          ENDP

                  fb_f1c100s_get_vram2 PROC
;;;536    void* fb_f1c100s_get_vram2(void)
000944  e51f0034          LDR      r0,|L1.2328|
;;;537    {
;;;538      return fb_mem[1];
;;;539    }
000948  e12fff1e          BX       lr
;;;540    
                          ENDP

                  fb_f1c100s_remove PROC
;;;541    void fb_f1c100s_remove(framebuffer_t* fb)
00094c  e92d4070          PUSH     {r4-r6,lr}
;;;542    {
000950  e1a04000          MOV      r4,r0
;;;543      //fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
;;;544    
;;;545      if (fb) {
000954  e3540000          CMP      r4,#0
000958  0a00002a          BEQ      |L1.2568|
;;;546        f1c100s_clk_defe_disable();
00095c  e1a00000          MOV      r0,r0
000960  e51f0098          LDR      r0,|L1.2256|
000964  ebfffffe          BL       read32
000968  e3c05102          BIC      r5,r0,#0x80000000
00096c  e1a01005          MOV      r1,r5
000970  e51f00a8          LDR      r0,|L1.2256|
000974  ebfffffe          BL       write32
000978  e51f0050          LDR      r0,|L1.2352|
00097c  ebfffffe          BL       read32
000980  e3c05901          BIC      r5,r0,#0x4000
000984  e1a01005          MOV      r1,r5
000988  e51f0060          LDR      r0,|L1.2352|
00098c  ebfffffe          BL       write32
000990  e1a00000          MOV      r0,r0
;;;547        f1c100s_clk_debe_disable();
000994  e1a00000          MOV      r0,r0
000998  e51f00cc          LDR      r0,|L1.2260|
00099c  ebfffffe          BL       read32
0009a0  e3c05102          BIC      r5,r0,#0x80000000
0009a4  e1a01005          MOV      r1,r5
0009a8  e51f00dc          LDR      r0,|L1.2260|
0009ac  ebfffffe          BL       write32
0009b0  e51f0088          LDR      r0,|L1.2352|
0009b4  ebfffffe          BL       read32
0009b8  e3c05a01          BIC      r5,r0,#0x1000
0009bc  e1a01005          MOV      r1,r5
0009c0  e51f0098          LDR      r0,|L1.2352|
0009c4  ebfffffe          BL       write32
0009c8  e1a00000          MOV      r0,r0
;;;548        f1c100s_clk_tcon_disable();
0009cc  e1a00000          MOV      r0,r0
0009d0  e51f00a4          LDR      r0,|L1.2356|
0009d4  ebfffffe          BL       read32
0009d8  e3c05102          BIC      r5,r0,#0x80000000
0009dc  e1a01005          MOV      r1,r5
0009e0  e51f00b4          LDR      r0,|L1.2356|
0009e4  ebfffffe          BL       write32
0009e8  e51f00c0          LDR      r0,|L1.2352|
0009ec  ebfffffe          BL       read32
0009f0  e3c05010          BIC      r5,r0,#0x10
0009f4  e1a01005          MOV      r1,r5
0009f8  e51f00d0          LDR      r0,|L1.2352|
0009fc  ebfffffe          BL       write32
000a00  e1a00000          MOV      r0,r0
000a04  e1a00000          MOV      r0,r0
                  |L1.2568|
;;;549      }
;;;550    }
000a08  e8bd8070          POP      {r4-r6,pc}
;;;551    
                          ENDP

                  fb_f1c100s_suspend PROC
;;;552    void fb_f1c100s_suspend(framebuffer_t* fb)
000a0c  e92d4070          PUSH     {r4-r6,lr}
;;;553    {
000a10  e1a05000          MOV      r5,r0
;;;554      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
000a14  e5954018          LDR      r4,[r5,#0x18]
;;;555    
;;;556      //pdat->brightness = led_get_brightness(pdat->backlight);
;;;557      pdat->brightness = pwm_f1c100s_get_duty(pdat->backlight);
000a18  e5940074          LDR      r0,[r4,#0x74]
000a1c  e5901008          LDR      r1,[r0,#8]
000a20  e5841078          STR      r1,[r4,#0x78]
;;;558      //led_set_brightness(pdat->backlight, 0);
;;;559      pwm_f1c100s_set_duty(pdat->backlight, 0);
000a24  e3a01000          MOV      r1,#0
000a28  e5940074          LDR      r0,[r4,#0x74]
000a2c  ebfffffe          BL       pwm_f1c100s_set_duty
;;;560    }
000a30  e8bd8070          POP      {r4-r6,pc}
;;;561    
                          ENDP

                  fb_f1c100s_resume PROC
;;;562    void fb_f1c100s_resume(framebuffer_t* fb)
000a34  e92d4070          PUSH     {r4-r6,lr}
;;;563    {
000a38  e1a04000          MOV      r4,r0
;;;564      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
000a3c  e5945018          LDR      r5,[r4,#0x18]
;;;565    
;;;566      //led_set_brightness(pdat->backlight, pdat->brightness);
;;;567      pwm_f1c100s_set_duty(pdat->backlight, pdat->brightness);
000a40  e5950074          LDR      r0,[r5,#0x74]
000a44  e5951078          LDR      r1,[r5,#0x78]
000a48  ebfffffe          BL       pwm_f1c100s_set_duty
;;;568    }
000a4c  e8bd8070          POP      {r4-r6,pc}
                          ENDP

                  read32 PROC
;;;19     
;;;20     static __inline uint32_t read32(uint32_t addr)
000a50  e1a01000          MOV      r1,r0
;;;21     {
;;;22       return (*((volatile uint32_t*)(addr)));
000a54  e5910000          LDR      r0,[r1,#0]
;;;23     }
000a58  e12fff1e          BX       lr
;;;24     
                          ENDP

                  write32 PROC
;;;39     
;;;40     static __inline void write32(uint32_t addr, uint32_t value)
000a5c  e5801000          STR      r1,[r0,#0]
;;;41     {
;;;42       *((volatile uint32_t*)(addr)) = value;
;;;43     }
000a60  e12fff1e          BX       lr
;;;44     
                          ENDP

                  f1c100s_tcon_clk_get_rate PROC
;;;218    
;;;219    inline static uint64_t f1c100s_tcon_clk_get_rate()
000a64  e92d4010          PUSH     {r4,lr}
;;;220    {
;;;221      return clk_f1c100s_pll_get_rate(&clk_pll_video, clk_pll_video.prate);
000a68  e51f0180          LDR      r0,|L1.2288|
000a6c  e590100c          LDR      r1,[r0,#0xc]  ; clk_pll_video
000a70  e1a02001          MOV      r2,r1
000a74  e3a03000          MOV      r3,#0
000a78  ebfffffe          BL       clk_f1c100s_pll_get_rate
;;;222    }
000a7c  e8bd8010          POP      {r4,pc}
;;;223    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=5

                  fb_f1c100s_priv_object
                          %        128
                  fb_mem
                          %        1044480

                          AREA ||.data||, DATA, ALIGN=2

                  led_pwm_bl
                          DCD      0x01c21000
                          DCD      0x00000000
                          DCD      0x00000064
                          DCD      0x000f4240
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      GPIO_PE
                          DCD      0x00000006
                          DCD      0x00000003
                  reset_1
                          DCD      0x01c202c0
                          DCD      0x00000000
                          DCD      0x00000020
                  reset_2
                          DCD      0x01c202c4
                          DCD      0x00000020
                          DCD      0x00000020
                  reset_3
                          DCD      0x01c202d0
                          DCD      0x00000040
                          DCD      0x00000020
                  clk_pll_video
                          DCD      0x01c20000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x016e3600
