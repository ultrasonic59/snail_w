; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\f1c100s_tve.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\f1c100s_tve.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\f1c100s_tve.crf ..\periph\f1c100s_tve.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tve_init PROC
;;;6      
;;;7      void tve_init(tve_mode_e mode) {
000000  e92d4070          PUSH     {r4-r6,lr}
000004  e1a04000          MOV      r4,r0
;;;8          // Determine tve clock division value. PLL_VIDEO should be configured and enabled!
;;;9          uint32_t tve_clk_div = clk_pll_get_freq(PLL_VIDEO) / 27000000LU;
000008  e3a00010          MOV      r0,#0x10
00000c  ebfffffe          BL       clk_pll_get_freq
000010  e1a06000          MOV      r6,r0
000014  e59f12f8          LDR      r1,|L1.788|
000018  ebfffffe          BL       __aeabi_uidivmod
00001c  e1a05000          MOV      r5,r0
;;;10         clk_tve_config(tve_clk_div);
000020  e20500ff          AND      r0,r5,#0xff
000024  ebfffffe          BL       clk_tve_config
;;;11         clk_enable(CCU_BUS_CLK_GATE1, 10);
000028  e3a0100a          MOV      r1,#0xa
00002c  e3a00064          MOV      r0,#0x64
000030  ebfffffe          BL       clk_enable
;;;12         clk_reset_clear(CCU_BUS_SOFT_RST1, 10);
000034  e3a0100a          MOV      r1,#0xa
000038  e3a00fb1          MOV      r0,#0x2c4
00003c  ebfffffe          BL       clk_reset_clear
;;;13     
;;;14         write32(TVE_BASE + TVE_DAC1, 0x433810A1);
000040  e59f12d0          LDR      r1,|L1.792|
000044  e59f02d0          LDR      r0,|L1.796|
000048  ebfffffe          BL       write32
;;;15         if(mode == TVE_MODE_NTSC) { // NTSC
00004c  e3540000          CMP      r4,#0
000050  1a000045          BNE      |L1.364|
;;;16             write32(TVE_BASE + TVE_CFG1, 0x07030000);
000054  e59f12c4          LDR      r1,|L1.800|
000058  e59f02c4          LDR      r0,|L1.804|
00005c  ebfffffe          BL       write32
;;;17             write32(TVE_BASE + TVE_NOTCH_DELAY, 0x00000120);
000060  e3a01e12          MOV      r1,#0x120
000064  e59f02bc          LDR      r0,|L1.808|
000068  ebfffffe          BL       write32
;;;18             write32(TVE_BASE + TVE_CHROMA_FREQ, 0x21F07C1F);
00006c  e59f12b8          LDR      r1,|L1.812|
000070  e59f02b8          LDR      r0,|L1.816|
000074  ebfffffe          BL       write32
;;;19             write32(TVE_BASE + TVE_FB_PORCH, 0x00760020);
000078  e59f12b4          LDR      r1,|L1.820|
00007c  e59f02b4          LDR      r0,|L1.824|
000080  ebfffffe          BL       write32
;;;20             write32(TVE_BASE + TVE_HD_VS, 0x00000016);
000084  e3a01016          MOV      r1,#0x16
000088  e59f02ac          LDR      r0,|L1.828|
00008c  ebfffffe          BL       write32
;;;21             write32(TVE_BASE + TVE_LINE_NUM, 0x0016020D);
000090  e59f12a8          LDR      r1,|L1.832|
000094  e59f02a8          LDR      r0,|L1.836|
000098  ebfffffe          BL       write32
;;;22             write32(TVE_BASE + TVE_LEVEL, 0x00F0011A);
00009c  e59f12a4          LDR      r1,|L1.840|
0000a0  e59f02a4          LDR      r0,|L1.844|
0000a4  ebfffffe          BL       write32
;;;23             write32(TVE_BASE + TVE_CB_RESET, 0x00000001);
0000a8  e3a01001          MOV      r1,#1
0000ac  e59f029c          LDR      r0,|L1.848|
0000b0  ebfffffe          BL       write32
;;;24             write32(TVE_BASE + TVE_VS_NUM, 0x00000000);
0000b4  e3a01000          MOV      r1,#0
0000b8  e59f0294          LDR      r0,|L1.852|
0000bc  ebfffffe          BL       write32
;;;25             write32(TVE_BASE + TVE_FILTER, 0x00000002);
0000c0  e3a01002          MOV      r1,#2
0000c4  e59f028c          LDR      r0,|L1.856|
0000c8  ebfffffe          BL       write32
;;;26             write32(TVE_BASE + TVE_CBCR_LEVEL, 0x0000004F);
0000cc  e3a0104f          MOV      r1,#0x4f
0000d0  e59f0284          LDR      r0,|L1.860|
0000d4  ebfffffe          BL       write32
;;;27             write32(TVE_BASE + TVE_TINT_PHASE, 0x00000000);
0000d8  e3a01000          MOV      r1,#0
0000dc  e59f027c          LDR      r0,|L1.864|
0000e0  ebfffffe          BL       write32
;;;28             write32(TVE_BASE + TVE_B_WIDTH, 0x0016447E);
0000e4  e59f1278          LDR      r1,|L1.868|
0000e8  e59f0278          LDR      r0,|L1.872|
0000ec  ebfffffe          BL       write32
;;;29             write32(TVE_BASE + TVE_CBCR_GAIN, 0x0000A0A0);
0000f0  e59f1274          LDR      r1,|L1.876|
0000f4  e59f0274          LDR      r0,|L1.880|
0000f8  ebfffffe          BL       write32
;;;30             write32(TVE_BASE + TVE_SYNC_LEVEL, 0x001000F0);
0000fc  e59f1270          LDR      r1,|L1.884|
000100  e59f0270          LDR      r0,|L1.888|
000104  ebfffffe          BL       write32
;;;31             write32(TVE_BASE + TVE_WHITE_LEVEL, 0x01E80320);
000108  e59f126c          LDR      r1,|L1.892|
00010c  e59f026c          LDR      r0,|L1.896|
000110  ebfffffe          BL       write32
;;;32             write32(TVE_BASE + TVE_ACT_LINE, 0x000005A0);
000114  e3a01e5a          MOV      r1,#0x5a0
000118  e59f0264          LDR      r0,|L1.900|
00011c  ebfffffe          BL       write32
;;;33             write32(TVE_BASE + TVE_CHROMA_BW, 0x00000000);
000120  e3a01000          MOV      r1,#0
000124  e59f025c          LDR      r0,|L1.904|
000128  ebfffffe          BL       write32
;;;34             write32(TVE_BASE + TVE_CFG2, 0x00000101);
00012c  e59f1258          LDR      r1,|L1.908|
000130  e59f0258          LDR      r0,|L1.912|
000134  ebfffffe          BL       write32
;;;35             write32(TVE_BASE + TVE_RESYNC, 0x000E000C);
000138  e59f1254          LDR      r1,|L1.916|
00013c  e59f0254          LDR      r0,|L1.920|
000140  ebfffffe          BL       write32
;;;36             write32(TVE_BASE + TVE_SLAVE, 0x00000000);
000144  e3a01000          MOV      r1,#0
000148  e59f024c          LDR      r0,|L1.924|
00014c  ebfffffe          BL       write32
;;;37             write32(TVE_BASE + TVE_CFG3, 0x00000000);
000150  e3a01000          MOV      r1,#0
000154  e59f0244          LDR      r0,|L1.928|
000158  ebfffffe          BL       write32
;;;38             write32(TVE_BASE + TVE_CFG4, 0x00000000);
00015c  e3a01000          MOV      r1,#0
000160  e59f023c          LDR      r0,|L1.932|
000164  ebfffffe          BL       write32
000168  ea000044          B        |L1.640|
                  |L1.364|
;;;39         } else { // PAL
;;;40             write32(TVE_BASE + TVE_CFG1, 0x07030001);
00016c  e59f1234          LDR      r1,|L1.936|
000170  e59f01ac          LDR      r0,|L1.804|
000174  ebfffffe          BL       write32
;;;41             write32(TVE_BASE + TVE_NOTCH_DELAY, 0x00000120);
000178  e3a01e12          MOV      r1,#0x120
00017c  e59f01a4          LDR      r0,|L1.808|
000180  ebfffffe          BL       write32
;;;42             write32(TVE_BASE + TVE_CHROMA_FREQ, 0x2A098ACB);
000184  e59f1220          LDR      r1,|L1.940|
000188  e59f01a0          LDR      r0,|L1.816|
00018c  ebfffffe          BL       write32
;;;43             write32(TVE_BASE + TVE_FB_PORCH, 0x008A0018);
000190  e59f1218          LDR      r1,|L1.944|
000194  e59f019c          LDR      r0,|L1.824|
000198  ebfffffe          BL       write32
;;;44             write32(TVE_BASE + TVE_HD_VS, 0x00000016);
00019c  e3a01016          MOV      r1,#0x16
0001a0  e59f0194          LDR      r0,|L1.828|
0001a4  ebfffffe          BL       write32
;;;45             write32(TVE_BASE + TVE_LINE_NUM, 0x00160271);
0001a8  e59f1204          LDR      r1,|L1.948|
0001ac  e59f0190          LDR      r0,|L1.836|
0001b0  ebfffffe          BL       write32
;;;46             write32(TVE_BASE + TVE_LEVEL, 0x00FC00FC);
0001b4  e59f11fc          LDR      r1,|L1.952|
0001b8  e59f018c          LDR      r0,|L1.844|
0001bc  ebfffffe          BL       write32
;;;47             write32(TVE_BASE + TVE_CB_RESET, 0x00000000);
0001c0  e3a01000          MOV      r1,#0
0001c4  e59f0184          LDR      r0,|L1.848|
0001c8  ebfffffe          BL       write32
;;;48             write32(TVE_BASE + TVE_VS_NUM, 0x00000001);
0001cc  e3a01001          MOV      r1,#1
0001d0  e59f017c          LDR      r0,|L1.852|
0001d4  ebfffffe          BL       write32
;;;49             write32(TVE_BASE + TVE_FILTER, 0x00000005);
0001d8  e3a01005          MOV      r1,#5
0001dc  e59f0174          LDR      r0,|L1.856|
0001e0  ebfffffe          BL       write32
;;;50             write32(TVE_BASE + TVE_CBCR_LEVEL, 0x00002828);
0001e4  e59f11d0          LDR      r1,|L1.956|
0001e8  e59f016c          LDR      r0,|L1.860|
0001ec  ebfffffe          BL       write32
;;;51             write32(TVE_BASE + TVE_TINT_PHASE, 0x00000000);
0001f0  e3a01000          MOV      r1,#0
0001f4  e59f0164          LDR      r0,|L1.864|
0001f8  ebfffffe          BL       write32
;;;52             write32(TVE_BASE + TVE_B_WIDTH, 0x0016447E);
0001fc  e59f1160          LDR      r1,|L1.868|
000200  e59f0160          LDR      r0,|L1.872|
000204  ebfffffe          BL       write32
;;;53             write32(TVE_BASE + TVE_CBCR_GAIN, 0x0000E0E0);
000208  e59f11b0          LDR      r1,|L1.960|
00020c  e59f015c          LDR      r0,|L1.880|
000210  ebfffffe          BL       write32
;;;54             write32(TVE_BASE + TVE_SYNC_LEVEL, 0x001000F0);
000214  e59f1158          LDR      r1,|L1.884|
000218  e59f0158          LDR      r0,|L1.888|
00021c  ebfffffe          BL       write32
;;;55             write32(TVE_BASE + TVE_WHITE_LEVEL, 0x01E80320);
000220  e59f1154          LDR      r1,|L1.892|
000224  e59f0154          LDR      r0,|L1.896|
000228  ebfffffe          BL       write32
;;;56             write32(TVE_BASE + TVE_ACT_LINE, 0x000005A0);
00022c  e3a01e5a          MOV      r1,#0x5a0
000230  e59f014c          LDR      r0,|L1.900|
000234  ebfffffe          BL       write32
;;;57             write32(TVE_BASE + TVE_CHROMA_BW, 0x00000000);
000238  e3a01000          MOV      r1,#0
00023c  e59f0144          LDR      r0,|L1.904|
000240  ebfffffe          BL       write32
;;;58             write32(TVE_BASE + TVE_CFG2, 0x00000101);
000244  e59f1140          LDR      r1,|L1.908|
000248  e59f0140          LDR      r0,|L1.912|
00024c  ebfffffe          BL       write32
;;;59             write32(TVE_BASE + TVE_RESYNC, 0x800D000C);
000250  e59f116c          LDR      r1,|L1.964|
000254  e59f013c          LDR      r0,|L1.920|
000258  ebfffffe          BL       write32
;;;60             write32(TVE_BASE + TVE_SLAVE, 0x00000000);
00025c  e3a01000          MOV      r1,#0
000260  e59f0134          LDR      r0,|L1.924|
000264  ebfffffe          BL       write32
;;;61             write32(TVE_BASE + TVE_CFG3, 0x00000000);
000268  e3a01000          MOV      r1,#0
00026c  e59f012c          LDR      r0,|L1.928|
000270  ebfffffe          BL       write32
;;;62             write32(TVE_BASE + TVE_CFG4, 0x00000000);
000274  e3a01000          MOV      r1,#0
000278  e59f0124          LDR      r0,|L1.932|
00027c  ebfffffe          BL       write32
                  |L1.640|
;;;63         }
;;;64         write32(TVE_BASE + TVE_ENABLE, 1);
000280  e3a01001          MOV      r1,#1
000284  e59f013c          LDR      r0,|L1.968|
000288  ebfffffe          BL       write32
;;;65     }
00028c  e8bd8070          POP      {r4-r6,pc}
;;;66     
                          ENDP

                  tve_enable PROC
;;;67     void tve_enable(void) {
000290  e92d4010          PUSH     {r4,lr}
;;;68         set32(TVE_BASE + TVE_DAC1, (0x1 << 0));
000294  e59f0080          LDR      r0,|L1.796|
000298  ebfffffe          BL       read32
00029c  e3804001          ORR      r4,r0,#1
0002a0  e1a01004          MOV      r1,r4
0002a4  e59f0070          LDR      r0,|L1.796|
0002a8  ebfffffe          BL       write32
;;;69         set32(TVE_BASE + TVE_ENABLE, (0x1 << 0));
0002ac  e59f0114          LDR      r0,|L1.968|
0002b0  ebfffffe          BL       read32
0002b4  e3804001          ORR      r4,r0,#1
0002b8  e1a01004          MOV      r1,r4
0002bc  e59f0104          LDR      r0,|L1.968|
0002c0  ebfffffe          BL       write32
;;;70     }
0002c4  e8bd8010          POP      {r4,pc}
;;;71     
                          ENDP

                  tve_disable PROC
;;;72     void tve_disable(void) {
0002c8  e92d4010          PUSH     {r4,lr}
;;;73         clear32(TVE_BASE + TVE_DAC1, (0x1 << 0));
0002cc  e59f0048          LDR      r0,|L1.796|
0002d0  ebfffffe          BL       read32
0002d4  e3c04001          BIC      r4,r0,#1
0002d8  e1a01004          MOV      r1,r4
0002dc  e59f0038          LDR      r0,|L1.796|
0002e0  ebfffffe          BL       write32
;;;74         clear32(TVE_BASE + TVE_ENABLE, (0x1 << 0));
0002e4  e59f00dc          LDR      r0,|L1.968|
0002e8  ebfffffe          BL       read32
0002ec  e3c04001          BIC      r4,r0,#1
0002f0  e1a01004          MOV      r1,r4
0002f4  e59f00cc          LDR      r0,|L1.968|
0002f8  ebfffffe          BL       write32
;;;75     }
0002fc  e8bd8010          POP      {r4,pc}
                          ENDP

                  read32 PROC
;;;19     
;;;20     static __inline uint32_t read32(uint32_t addr)
000300  e1a01000          MOV      r1,r0
;;;21     {
;;;22       return (*((volatile uint32_t*)(addr)));
000304  e5910000          LDR      r0,[r1,#0]
;;;23     }
000308  e12fff1e          BX       lr
;;;24     
                          ENDP

                  write32 PROC
;;;39     
;;;40     static __inline void write32(uint32_t addr, uint32_t value)
00030c  e5801000          STR      r1,[r0,#0]
;;;41     {
;;;42       *((volatile uint32_t*)(addr)) = value;
;;;43     }
000310  e12fff1e          BX       lr
;;;44     
                          ENDP

                  |L1.788|
                          DCD      0x019bfcc0
                  |L1.792|
                          DCD      0x433810a1
                  |L1.796|
                          DCD      0x01c0a008
                  |L1.800|
                          DCD      0x07030000
                  |L1.804|
                          DCD      0x01c0a004
                  |L1.808|
                          DCD      0x01c0a00c
                  |L1.812|
                          DCD      0x21f07c1f
                  |L1.816|
                          DCD      0x01c0a010
                  |L1.820|
                          DCD      0x00760020
                  |L1.824|
                          DCD      0x01c0a014
                  |L1.828|
                          DCD      0x01c0a018
                  |L1.832|
                          DCD      0x0016020d
                  |L1.836|
                          DCD      0x01c0a01c
                  |L1.840|
                          DCD      0x00f0011a
                  |L1.844|
                          DCD      0x01c0a020
                  |L1.848|
                          DCD      0x01c0a100
                  |L1.852|
                          DCD      0x01c0a104
                  |L1.856|
                          DCD      0x01c0a108
                  |L1.860|
                          DCD      0x01c0a10c
                  |L1.864|
                          DCD      0x01c0a110
                  |L1.868|
                          DCD      0x0016447e
                  |L1.872|
                          DCD      0x01c0a114
                  |L1.876|
                          DCD      0x0000a0a0
                  |L1.880|
                          DCD      0x01c0a118
                  |L1.884|
                          DCD      0x001000f0
                  |L1.888|
                          DCD      0x01c0a11c
                  |L1.892|
                          DCD      0x01e80320
                  |L1.896|
                          DCD      0x01c0a120
                  |L1.900|
                          DCD      0x01c0a124
                  |L1.904|
                          DCD      0x01c0a128
                  |L1.908|
                          DCD      0x00000101
                  |L1.912|
                          DCD      0x01c0a12c
                  |L1.916|
                          DCD      0x000e000c
                  |L1.920|
                          DCD      0x01c0a130
                  |L1.924|
                          DCD      0x01c0a134
                  |L1.928|
                          DCD      0x01c0a138
                  |L1.932|
                          DCD      0x01c0a13c
                  |L1.936|
                          DCD      0x07030001
                  |L1.940|
                          DCD      0x2a098acb
                  |L1.944|
                          DCD      0x008a0018
                  |L1.948|
                          DCD      0x00160271
                  |L1.952|
                          DCD      0x00fc00fc
                  |L1.956|
                          DCD      0x00002828
                  |L1.960|
                          DCD      0x0000e0e0
                  |L1.964|
                          DCD      0x800d000c
                  |L1.968|
                          DCD      0x01c0a000
