; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\f1c100s_tvd.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\f1c100s_tvd.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\f1c100s_tvd.crf ..\periph\f1c100s_tvd.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tvd_set_ch PROC
;;;246    // Input channel select
;;;247    void tvd_set_ch(uint8_t ch) {
000000  e92d4070          PUSH     {r4-r6,lr}
000004  e1a04000          MOV      r4,r0
;;;248        if(ch == 0)
000008  e3540000          CMP      r4,#0
00000c  1a000006          BNE      |L1.44|
;;;249            clear32(TVD_BASE + TVD_REG_E04, (1 << 0));
000010  e59f065c          LDR      r0,|L1.1652|
000014  ebfffffe          BL       read32
000018  e3c05001          BIC      r5,r0,#1
00001c  e1a01005          MOV      r1,r5
000020  e59f064c          LDR      r0,|L1.1652|
000024  ebfffffe          BL       write32
000028  ea000005          B        |L1.68|
                  |L1.44|
;;;250        else
;;;251            set32(TVD_BASE + TVD_REG_E04, (1 << 0));
00002c  e59f0640          LDR      r0,|L1.1652|
000030  ebfffffe          BL       read32
000034  e3805001          ORR      r5,r0,#1
000038  e1a01005          MOV      r1,r5
00003c  e59f0630          LDR      r0,|L1.1652|
000040  ebfffffe          BL       write32
                  |L1.68|
;;;252    }
000044  e8bd8070          POP      {r4-r6,pc}
;;;253    
                          ENDP

                  tvd_set_out_buf PROC
;;;207    
;;;208    void tvd_set_out_buf(void* buf_y, void* buf_c) {
000048  e92d4070          PUSH     {r4-r6,lr}
00004c  e1a04000          MOV      r4,r0
000050  e1a05001          MOV      r5,r1
;;;209        write32(TVD_BASE + TVD_DMA_ADDR_Y, (uint32_t)buf_y);
000054  e1a01004          MOV      r1,r4
000058  e59f0618          LDR      r0,|L1.1656|
00005c  ebfffffe          BL       write32
;;;210        write32(TVD_BASE + TVD_DMA_ADDR_C, (uint32_t)buf_c);
000060  e1a01005          MOV      r1,r5
000064  e59f0610          LDR      r0,|L1.1660|
000068  ebfffffe          BL       write32
;;;211        set32(TVD_BASE + TVD_DMA_CFG, (1 << 28)); // addr_valid
00006c  e59f060c          LDR      r0,|L1.1664|
000070  ebfffffe          BL       read32
000074  e3806201          ORR      r6,r0,#0x10000000
000078  e1a01006          MOV      r1,r6
00007c  e59f05fc          LDR      r0,|L1.1664|
000080  ebfffffe          BL       write32
;;;212    }
000084  e8bd8070          POP      {r4-r6,pc}
;;;213    
                          ENDP

                  tvd_set_out_size PROC
;;;214    void tvd_set_out_size(uint16_t w, uint16_t h) {
000088  e92d4070          PUSH     {r4-r6,lr}
00008c  e1a04000          MOV      r4,r0
000090  e1a05001          MOV      r5,r1
;;;215        write32(TVD_BASE + TVD_DMA_SIZE, ((h / 2) << 16) | (w));
000094  e1a06005          MOV      r6,r5
000098  e0850fa6          ADD      r0,r5,r6,LSR #31
00009c  e1a000c0          ASR      r0,r0,#1
0000a0  e1841800          ORR      r1,r4,r0,LSL #16
0000a4  e59f05d8          LDR      r0,|L1.1668|
0000a8  ebfffffe          BL       write32
;;;216        write32(TVD_BASE + TVD_DMA_STRIDE, w);
0000ac  e1a01004          MOV      r1,r4
0000b0  e59f05d0          LDR      r0,|L1.1672|
0000b4  ebfffffe          BL       write32
;;;217        set32(TVD_BASE + TVD_DMA_CFG, (1 << 26)); // size_valid ?
0000b8  e59f05c0          LDR      r0,|L1.1664|
0000bc  ebfffffe          BL       read32
0000c0  e3806301          ORR      r6,r0,#0x4000000
0000c4  e1a01006          MOV      r1,r6
0000c8  e59f05b0          LDR      r0,|L1.1664|
0000cc  ebfffffe          BL       write32
;;;218        tvd.width  = w;
0000d0  e59f05b4          LDR      r0,|L1.1676|
0000d4  e1c040b0          STRH     r4,[r0,#0]  ; tvd
;;;219        tvd.height = h;
0000d8  e1c050b2          STRH     r5,[r0,#2]  ; tvd
;;;220    }
0000dc  e8bd8070          POP      {r4-r6,pc}
;;;221    
                          ENDP

                  tvd_set_mode PROC
;;;55     
;;;56     void tvd_set_mode(tvd_mode_e mode) {
0000e0  e92d4010          PUSH     {r4,lr}
0000e4  e1a04000          MOV      r4,r0
;;;57     /*	
;;;58         write32(TVD_BASE + TVD_REG_E04, 0x8002AAA8);
;;;59         write32(TVD_BASE + TVD_REG_E2C, 0x00110000);
;;;60         write32(TVD_BASE + TVD_REG_040, 0x04000310);
;;;61         write32(TVD_BASE + TVD_REG_000, 0x00000000);
;;;62         write32(TVD_BASE + TVD_REG_014, 0x20000000);
;;;63         write32(TVD_BASE + TVD_REG_F24, 0x0682810A);
;;;64     
;;;65         write32(TVD_BASE + TVD_REG_F28, 0x00006440);
;;;66         write32(TVD_BASE + TVD_REG_F4C, 0x0E70106C);
;;;67         write32(TVD_BASE + TVD_REG_F54, 0x00000000);
;;;68         write32(TVD_BASE + TVD_REG_F58, 0x00000082);
;;;69         write32(TVD_BASE + TVD_REG_F6C, 0x00FFFAD0);
;;;70         write32(TVD_BASE + TVD_REG_F70, 0x0000A010);
;;;71     */
;;;72     	
;;;73         switch(mode) {
0000e8  e3540006          CMP      r4,#6
0000ec  308ff104          ADDCC    pc,pc,r4,LSL #2
0000f0  ea00010a          B        |L1.1312|
0000f4  ea000109          B        |L1.1312|
0000f8  ea000003          B        |L1.268|
0000fc  ea000037          B        |L1.480|
000100  ea000067          B        |L1.676|
000104  ea00009b          B        |L1.888|
000108  ea0000cf          B        |L1.1100|
                  |L1.268|
;;;74         case TVD_MODE_NTSC: // NTSC 720x480
00010c  e1a00000          MOV      r0,r0
;;;75             write32(TVD_BASE + TVD_REG_008, 0x00010001);
000110  e59f1578          LDR      r1,|L1.1680|
000114  e59f0578          LDR      r0,|L1.1684|
000118  ebfffffe          BL       write32
;;;76             write32(TVD_BASE + TVD_REG_00C, 0x00202068);
00011c  e59f1574          LDR      r1,|L1.1688|
000120  e59f0574          LDR      r0,|L1.1692|
000124  ebfffffe          BL       write32
;;;77             write32(TVD_BASE + TVD_REG_010, 0x00300080);
000128  e59f1570          LDR      r1,|L1.1696|
00012c  e59f0570          LDR      r0,|L1.1700|
000130  ebfffffe          BL       write32
;;;78             write32(TVD_BASE + TVD_REG_018, 0x21F07C1F);
000134  e59f156c          LDR      r1,|L1.1704|
000138  e59f056c          LDR      r0,|L1.1708|
00013c  ebfffffe          BL       write32
;;;79             write32(TVD_BASE + TVD_REG_01C, 0x00820022);
000140  e59f1568          LDR      r1,|L1.1712|
000144  e59f0568          LDR      r0,|L1.1716|
000148  ebfffffe          BL       write32
;;;80     
;;;81             write32(TVD_BASE + TVD_REG_F08, 0x00590100);
00014c  e59f1564          LDR      r1,|L1.1720|
000150  e59f0564          LDR      r0,|L1.1724|
000154  ebfffffe          BL       write32
;;;82             write32(TVD_BASE + TVD_REG_F0C, 0x00000010);
000158  e3a01010          MOV      r1,#0x10
00015c  e59f055c          LDR      r0,|L1.1728|
000160  ebfffffe          BL       write32
;;;83             write32(TVD_BASE + TVD_REG_F10, 0x008A32DD);
000164  e59f1558          LDR      r1,|L1.1732|
000168  e59f0558          LDR      r0,|L1.1736|
00016c  ebfffffe          BL       write32
;;;84             write32(TVD_BASE + TVD_REG_F14, 0x800000A0);
000170  e59f1554          LDR      r1,|L1.1740|
000174  e59f0554          LDR      r0,|L1.1744|
000178  ebfffffe          BL       write32
;;;85             write32(TVD_BASE + TVD_REG_F1C, 0x008A0000);
00017c  e3a0188a          MOV      r1,#0x8a0000
000180  e59f054c          LDR      r0,|L1.1748|
000184  ebfffffe          BL       write32
;;;86             write32(TVD_BASE + TVD_REG_F2C, 0x0000CB74);
000188  e59f1548          LDR      r1,|L1.1752|
00018c  e59f0548          LDR      r0,|L1.1756|
000190  ebfffffe          BL       write32
;;;87             write32(TVD_BASE + TVD_REG_F44, 0x00004632);
000194  e59f1544          LDR      r1,|L1.1760|
000198  e59f0544          LDR      r0,|L1.1764|
00019c  ebfffffe          BL       write32
;;;88             write32(TVD_BASE + TVD_REG_F74, 0x000003C3);
0001a0  e59f1540          LDR      r1,|L1.1768|
0001a4  e59f0540          LDR      r0,|L1.1772|
0001a8  ebfffffe          BL       write32
;;;89             write32(TVD_BASE + TVD_REG_F80, 0x00500000);
0001ac  e3a01605          MOV      r1,#0x500000
0001b0  e59f0538          LDR      r0,|L1.1776|
0001b4  ebfffffe          BL       write32
;;;90             write32(TVD_BASE + TVD_REG_F84, 0x00610000);
0001b8  e3a01861          MOV      r1,#0x610000
0001bc  e59f0530          LDR      r0,|L1.1780|
0001c0  ebfffffe          BL       write32
;;;91     
;;;92             write32(TVD_BASE + TVD_REG_000, 0x00000001);
0001c4  e3a01001          MOV      r1,#1
0001c8  e59f0528          LDR      r0,|L1.1784|
0001cc  ebfffffe          BL       write32
;;;93     
;;;94             tvd_set_out_size(720, 480);
0001d0  e3a01e1e          MOV      r1,#0x1e0
0001d4  e3a00e2d          MOV      r0,#0x2d0
0001d8  ebfffffe          BL       tvd_set_out_size
;;;95             break;
0001dc  ea0000d1          B        |L1.1320|
                  |L1.480|
;;;96         case TVD_MODE_PAL_B: // PAL-B/G 720x576
0001e0  e1a00000          MOV      r0,r0
;;;97     				TVD_RegWrite(TVD_REG_BASE + 0x0008, 0x01111001);
0001e4  e59f0510          LDR      r0,|L1.1788|
0001e8  e59f1508          LDR      r1,|L1.1784|
0001ec  e5810008          STR      r0,[r1,#8]
;;;98     ////        write32(TVD_BASE + TVD_REG_008, 0x01101001);
;;;99     				TVD_RegWrite(TVD_REG_BASE + 0x000c,0x03714080); /* adjust luma brightness */
0001f0  e59f0508          LDR      r0,|L1.1792|
0001f4  e581000c          STR      r0,[r1,#0xc]
;;;100     ////       write32(TVD_BASE + TVD_REG_00C, 0x00202068);
;;;101    				TVD_RegWrite(TVD_REG_BASE + 0x0010, 0x00310080);
0001f8  e59f0504          LDR      r0,|L1.1796|
0001fc  e5810010          STR      r0,[r1,#0x10]
;;;102     ////       write32(TVD_BASE + TVD_REG_010, 0x00300050);
;;;103    				TVD_RegWrite(TVD_REG_BASE + 0x0018, 0x2a098acb); /* chroma dto */
000200  e59f0500          LDR      r0,|L1.1800|
000204  e5810018          STR      r0,[r1,#0x18]
;;;104     /////       write32(TVD_BASE + TVD_REG_018, 0x2A098ACB);
;;;105    				TVD_RegWrite(TVD_REG_BASE + 0x001c, 0x0087002f); /* hactive and vactive start */
000208  e59f04fc          LDR      r0,|L1.1804|
00020c  e581001c          STR      r0,[r1,#0x1c]
;;;106    ////        write32(TVD_BASE + TVD_REG_01C, 0x0087002A);
;;;107    			TVD_RegWrite(TVD_REG_BASE + 0x0f08,0x11590902); /* disable black level correction */
000210  e59f04f8          LDR      r0,|L1.1808|
000214  e59f14a0          LDR      r1,|L1.1724|
000218  e5810000          STR      r0,[r1,#0]
;;;108    ////        write32(TVD_BASE + TVD_REG_F08, 0x11590902);
;;;109    			/* for 7.5 blank-to-black setup */
;;;110    			/* cagc en */
;;;111    			TVD_RegWrite(TVD_REG_BASE + 0x0f0c, 0x00000016); /* YC sep */
00021c  e3a00016          MOV      r0,#0x16
000220  e2811004          ADD      r1,r1,#4
000224  e5810000          STR      r0,[r1,#0]
;;;112         ////  write32(TVD_BASE + TVD_REG_F0C, 0x00000016);
;;;113    			TVD_RegWrite(TVD_REG_BASE + 0x0f10, 0x008a32ec); /* */
000228  e59f04e4          LDR      r0,|L1.1812|
00022c  e0811ac0          ADD      r1,r1,r0,ASR #21
000230  e5810000          STR      r0,[r1,#0]
;;;114    		////        write32(TVD_BASE + TVD_REG_F10, 0x008A32EC);
;;;115    			TVD_RegWrite(TVD_REG_BASE + 0x0f14,0x80000080); /* adjust YC delay */
000234  e59f04dc          LDR      r0,|L1.1816|
000238  e0411ec0          SUB      r1,r1,r0,ASR #29
00023c  e5810000          STR      r0,[r1,#0]
;;;116          ////  write32(TVD_BASE + TVD_REG_F14, 0x800000A0);
;;;117    			TVD_RegWrite(TVD_REG_BASE + 0x0f1c, 0x00930000); /* chroma AGC target */
000240  e3a00893          MOV      r0,#0x930000
000244  e1811a41          ORR      r1,r1,r1,ASR #20
000248  e5810000          STR      r0,[r1,#0]
;;;118    	////    write32(TVD_BASE + TVD_REG_F1C, 0x00930000);
;;;119    			TVD_RegWrite(TVD_REG_BASE + 0x0f2c, 0x00000d74);
00024c  e59f04c8          LDR      r0,|L1.1820|
000250  e2811010          ADD      r1,r1,#0x10
000254  e5810000          STR      r0,[r1,#0]
;;;120            ////write32(TVD_BASE + TVD_REG_F2C, 0x00000D74);
;;;121    			TVD_RegWrite(TVD_REG_BASE + 0x0f44,0x0000412d); /* burst gate */
000258  e59f04c0          LDR      r0,|L1.1824|
00025c  e2811018          ADD      r1,r1,#0x18
000260  e5810000          STR      r0,[r1,#0]
;;;122            ////write32(TVD_BASE + TVD_REG_F44, 0x0000412D);
;;;123    			/* TVD_RegWrite(TVD_REG_BASE+0x0f6c, 0x00fffa0a); // */
;;;124    			TVD_RegWrite(TVD_REG_BASE + 0x0f74, 0x00000343); /* */
000264  e59f04b8          LDR      r0,|L1.1828|
000268  e1811240          ORR      r1,r1,r0,ASR #4
00026c  e5810000          STR      r0,[r1,#0]
;;;125          ////  write32(TVD_BASE + TVD_REG_F74, 0x00000343);
;;;126    			TVD_RegWrite(TVD_REG_BASE + 0x0f80, 0x00500000); /* hactive width */
000270  e3a00605          MOV      r0,#0x500000
000274  e281100c          ADD      r1,r1,#0xc
000278  e5810000          STR      r0,[r1,#0]
;;;127    ////        write32(TVD_BASE + TVD_REG_F80, 0x00500000);
;;;128    			TVD_RegWrite(TVD_REG_BASE + 0x0f84, 0x00c10000); /* vactive height */
00027c  e3a008c1          MOV      r0,#0xc10000
000280  e1811740          ORR      r1,r1,r0,ASR #14
000284  e5810000          STR      r0,[r1,#0]
;;;129     /////       write32(TVD_BASE + TVD_REG_F84, 0x00C10000);
;;;130    			TVD_RegWrite(TVD_REG_BASE + 0x0000, 0x00000001); /* */
000288  e3a00001          MOV      r0,#1
00028c  e59f1464          LDR      r1,|L1.1784|
000290  e5810000          STR      r0,[r1,#0]
;;;131    /////        write32(TVD_BASE + TVD_REG_000, 0x00000001);
;;;132    
;;;133            tvd_set_out_size(720, 576);  ////???
000294  e3a01d09          MOV      r1,#0x240
000298  e3a00e2d          MOV      r0,#0x2d0
00029c  ebfffffe          BL       tvd_set_out_size
;;;134            break;
0002a0  ea0000a0          B        |L1.1320|
                  |L1.676|
;;;135        case TVD_MODE_PAL_M: // PAL-M  - not tested
0002a4  e1a00000          MOV      r0,r0
;;;136            write32(TVD_BASE + TVD_REG_008, 0x00002001);
0002a8  e59f1478          LDR      r1,|L1.1832|
0002ac  e59f03e0          LDR      r0,|L1.1684|
0002b0  ebfffffe          BL       write32
;;;137            write32(TVD_BASE + TVD_REG_00C, 0x00002080);
0002b4  e3a01d82          MOV      r1,#0x2080
0002b8  e59f03dc          LDR      r0,|L1.1692|
0002bc  ebfffffe          BL       write32
;;;138            write32(TVD_BASE + TVD_REG_010, 0x00300080);
0002c0  e59f13d8          LDR      r1,|L1.1696|
0002c4  e59f03d8          LDR      r0,|L1.1700|
0002c8  ebfffffe          BL       write32
;;;139            write32(TVD_BASE + TVD_REG_018, 0x21E6EFE3);
0002cc  e59f1458          LDR      r1,|L1.1836|
0002d0  e59f03d4          LDR      r0,|L1.1708|
0002d4  ebfffffe          BL       write32
;;;140            write32(TVD_BASE + TVD_REG_01C, 0x00820022);
0002d8  e59f13d0          LDR      r1,|L1.1712|
0002dc  e59f03d0          LDR      r0,|L1.1716|
0002e0  ebfffffe          BL       write32
;;;141    
;;;142            write32(TVD_BASE + TVD_REG_F08, 0x00590100);
0002e4  e59f13cc          LDR      r1,|L1.1720|
0002e8  e59f03cc          LDR      r0,|L1.1724|
0002ec  ebfffffe          BL       write32
;;;143            write32(TVD_BASE + TVD_REG_F0C, 0x00000040);
0002f0  e3a01040          MOV      r1,#0x40
0002f4  e59f03c4          LDR      r0,|L1.1728|
0002f8  ebfffffe          BL       write32
;;;144            write32(TVD_BASE + TVD_REG_F10, 0x008A32DD);
0002fc  e59f13c0          LDR      r1,|L1.1732|
000300  e59f03c0          LDR      r0,|L1.1736|
000304  ebfffffe          BL       write32
;;;145            write32(TVD_BASE + TVD_REG_F14, 0x800000A0);
000308  e59f13bc          LDR      r1,|L1.1740|
00030c  e59f03bc          LDR      r0,|L1.1744|
000310  ebfffffe          BL       write32
;;;146            write32(TVD_BASE + TVD_REG_F1C, 0x008A0000);
000314  e3a0188a          MOV      r1,#0x8a0000
000318  e59f03b4          LDR      r0,|L1.1748|
00031c  ebfffffe          BL       write32
;;;147            write32(TVD_BASE + TVD_REG_F2C, 0x0000CB74);
000320  e59f13b0          LDR      r1,|L1.1752|
000324  e59f03b0          LDR      r0,|L1.1756|
000328  ebfffffe          BL       write32
;;;148            write32(TVD_BASE + TVD_REG_F44, 0x00004632);
00032c  e59f13ac          LDR      r1,|L1.1760|
000330  e59f03ac          LDR      r0,|L1.1764|
000334  ebfffffe          BL       write32
;;;149            write32(TVD_BASE + TVD_REG_F74, 0x000003C3);
000338  e59f13a8          LDR      r1,|L1.1768|
00033c  e59f03a8          LDR      r0,|L1.1772|
000340  ebfffffe          BL       write32
;;;150            write32(TVD_BASE + TVD_REG_F80, 0x00500000);
000344  e3a01605          MOV      r1,#0x500000
000348  e59f03a0          LDR      r0,|L1.1776|
00034c  ebfffffe          BL       write32
;;;151            write32(TVD_BASE + TVD_REG_F84, 0x00610000);
000350  e3a01861          MOV      r1,#0x610000
000354  e59f0398          LDR      r0,|L1.1780|
000358  ebfffffe          BL       write32
;;;152    
;;;153            write32(TVD_BASE + TVD_REG_000, 0x00000001);
00035c  e3a01001          MOV      r1,#1
000360  e59f0390          LDR      r0,|L1.1784|
000364  ebfffffe          BL       write32
;;;154    
;;;155            tvd_set_out_size(720, 480);
000368  e3a01e1e          MOV      r1,#0x1e0
00036c  e3a00e2d          MOV      r0,#0x2d0
000370  ebfffffe          BL       tvd_set_out_size
;;;156            break;
000374  ea00006b          B        |L1.1320|
                  |L1.888|
;;;157        case TVD_MODE_PAL_N: // PAL-N - not tested
000378  e1a00000          MOV      r0,r0
;;;158            write32(TVD_BASE + TVD_REG_008, 0x01103001);
00037c  e59f13ac          LDR      r1,|L1.1840|
000380  e59f030c          LDR      r0,|L1.1684|
000384  ebfffffe          BL       write32
;;;159            write32(TVD_BASE + TVD_REG_00C, 0x00002080);
000388  e3a01d82          MOV      r1,#0x2080
00038c  e59f0308          LDR      r0,|L1.1692|
000390  ebfffffe          BL       write32
;;;160            write32(TVD_BASE + TVD_REG_010, 0x00300080);
000394  e59f1304          LDR      r1,|L1.1696|
000398  e59f0304          LDR      r0,|L1.1700|
00039c  ebfffffe          BL       write32
;;;161            write32(TVD_BASE + TVD_REG_018, 0x21F69446);
0003a0  e59f138c          LDR      r1,|L1.1844|
0003a4  e59f0300          LDR      r0,|L1.1708|
0003a8  ebfffffe          BL       write32
;;;162            write32(TVD_BASE + TVD_REG_01C, 0x00870026);
0003ac  e59f1384          LDR      r1,|L1.1848|
0003b0  e59f02fc          LDR      r0,|L1.1716|
0003b4  ebfffffe          BL       write32
;;;163    
;;;164            write32(TVD_BASE + TVD_REG_F08, 0x11590902);
0003b8  e59f1350          LDR      r1,|L1.1808|
0003bc  e59f02f8          LDR      r0,|L1.1724|
0003c0  ebfffffe          BL       write32
;;;165            write32(TVD_BASE + TVD_REG_F0C, 0x00000040);
0003c4  e3a01040          MOV      r1,#0x40
0003c8  e59f02f0          LDR      r0,|L1.1728|
0003cc  ebfffffe          BL       write32
;;;166            write32(TVD_BASE + TVD_REG_F10, 0x008A32EC);
0003d0  e59f133c          LDR      r1,|L1.1812|
0003d4  e59f02ec          LDR      r0,|L1.1736|
0003d8  ebfffffe          BL       write32
;;;167            write32(TVD_BASE + TVD_REG_F14, 0x800000A0);
0003dc  e59f12e8          LDR      r1,|L1.1740|
0003e0  e59f02e8          LDR      r0,|L1.1744|
0003e4  ebfffffe          BL       write32
;;;168            write32(TVD_BASE + TVD_REG_F1C, 0x00DC0000);
0003e8  e3a01737          MOV      r1,#0xdc0000
0003ec  e59f02e0          LDR      r0,|L1.1748|
0003f0  ebfffffe          BL       write32
;;;169            write32(TVD_BASE + TVD_REG_F2C, 0x00000D74);
0003f4  e59f1320          LDR      r1,|L1.1820|
0003f8  e59f02dc          LDR      r0,|L1.1756|
0003fc  ebfffffe          BL       write32
;;;170            write32(TVD_BASE + TVD_REG_F44, 0x00004632);
000400  e59f12d8          LDR      r1,|L1.1760|
000404  e59f02d8          LDR      r0,|L1.1764|
000408  ebfffffe          BL       write32
;;;171            write32(TVD_BASE + TVD_REG_F74, 0x00000343);
00040c  e59f1310          LDR      r1,|L1.1828|
000410  e59f02d4          LDR      r0,|L1.1772|
000414  ebfffffe          BL       write32
;;;172            write32(TVD_BASE + TVD_REG_F80, 0x00500000);
000418  e3a01605          MOV      r1,#0x500000
00041c  e59f02cc          LDR      r0,|L1.1776|
000420  ebfffffe          BL       write32
;;;173            write32(TVD_BASE + TVD_REG_F84, 0x00C10000);
000424  e3a018c1          MOV      r1,#0xc10000
000428  e59f02c4          LDR      r0,|L1.1780|
00042c  ebfffffe          BL       write32
;;;174    
;;;175            write32(TVD_BASE + TVD_REG_000, 0x00000001);
000430  e3a01001          MOV      r1,#1
000434  e59f02bc          LDR      r0,|L1.1784|
000438  ebfffffe          BL       write32
;;;176    
;;;177            tvd_set_out_size(720, 576);
00043c  e3a01d09          MOV      r1,#0x240
000440  e3a00e2d          MOV      r0,#0x2d0
000444  ebfffffe          BL       tvd_set_out_size
;;;178            break;
000448  ea000036          B        |L1.1320|
                  |L1.1100|
;;;179        case TVD_MODE_SECAM: // SECAM? 720x576 - not tested
00044c  e1a00000          MOV      r0,r0
;;;180            write32(TVD_BASE + TVD_REG_008, 0x01104001);
000450  e59f12e4          LDR      r1,|L1.1852|
000454  e59f0238          LDR      r0,|L1.1684|
000458  ebfffffe          BL       write32
;;;181            write32(TVD_BASE + TVD_REG_00C, 0x00002080);
00045c  e3a01d82          MOV      r1,#0x2080
000460  e59f0234          LDR      r0,|L1.1692|
000464  ebfffffe          BL       write32
;;;182            write32(TVD_BASE + TVD_REG_010, 0x003100B0);
000468  e59f12d0          LDR      r1,|L1.1856|
00046c  e59f0230          LDR      r0,|L1.1700|
000470  ebfffffe          BL       write32
;;;183            write32(TVD_BASE + TVD_REG_018, 0x28A33BB2);
000474  e59f12c8          LDR      r1,|L1.1860|
000478  e59f022c          LDR      r0,|L1.1708|
00047c  ebfffffe          BL       write32
;;;184            write32(TVD_BASE + TVD_REG_01C, 0x00870026);
000480  e59f12b0          LDR      r1,|L1.1848|
000484  e59f0228          LDR      r0,|L1.1716|
000488  ebfffffe          BL       write32
;;;185    
;;;186            write32(TVD_BASE + TVD_REG_F08, 0x11590902);
00048c  e59f127c          LDR      r1,|L1.1808|
000490  e59f0224          LDR      r0,|L1.1724|
000494  ebfffffe          BL       write32
;;;187            write32(TVD_BASE + TVD_REG_F0C, 0x00000040);
000498  e3a01040          MOV      r1,#0x40
00049c  e59f021c          LDR      r0,|L1.1728|
0004a0  ebfffffe          BL       write32
;;;188            write32(TVD_BASE + TVD_REG_F10, 0x008A32EC);
0004a4  e59f1268          LDR      r1,|L1.1812|
0004a8  e59f0218          LDR      r0,|L1.1736|
0004ac  ebfffffe          BL       write32
;;;189            write32(TVD_BASE + TVD_REG_F14, 0x800000A0);
0004b0  e59f1214          LDR      r1,|L1.1740|
0004b4  e59f0214          LDR      r0,|L1.1744|
0004b8  ebfffffe          BL       write32
;;;190            write32(TVD_BASE + TVD_REG_F1C, 0x00DC0000);
0004bc  e3a01737          MOV      r1,#0xdc0000
0004c0  e59f020c          LDR      r0,|L1.1748|
0004c4  ebfffffe          BL       write32
;;;191            write32(TVD_BASE + TVD_REG_F2C, 0x00000D74);
0004c8  e59f124c          LDR      r1,|L1.1820|
0004cc  e59f0208          LDR      r0,|L1.1756|
0004d0  ebfffffe          BL       write32
;;;192            write32(TVD_BASE + TVD_REG_F44, 0x00005036);
0004d4  e59f126c          LDR      r1,|L1.1864|
0004d8  e59f0204          LDR      r0,|L1.1764|
0004dc  ebfffffe          BL       write32
;;;193            write32(TVD_BASE + TVD_REG_F74, 0x00000343);
0004e0  e59f123c          LDR      r1,|L1.1828|
0004e4  e59f0200          LDR      r0,|L1.1772|
0004e8  ebfffffe          BL       write32
;;;194            write32(TVD_BASE + TVD_REG_F80, 0x00500000);
0004ec  e3a01605          MOV      r1,#0x500000
0004f0  e59f01f8          LDR      r0,|L1.1776|
0004f4  ebfffffe          BL       write32
;;;195            write32(TVD_BASE + TVD_REG_F84, 0x00C10000);
0004f8  e3a018c1          MOV      r1,#0xc10000
0004fc  e59f01f0          LDR      r0,|L1.1780|
000500  ebfffffe          BL       write32
;;;196    
;;;197            write32(TVD_BASE + TVD_REG_000, 0x00000001);
000504  e3a01001          MOV      r1,#1
000508  e59f01e8          LDR      r0,|L1.1784|
00050c  ebfffffe          BL       write32
;;;198    
;;;199            tvd_set_out_size(720, 576);
000510  e3a01d09          MOV      r1,#0x240
000514  e3a00e2d          MOV      r0,#0x2d0
000518  ebfffffe          BL       tvd_set_out_size
;;;200            break;
00051c  ea000001          B        |L1.1320|
                  |L1.1312|
;;;201        default:
000520  e1a00000          MOV      r0,r0
;;;202            break;
000524  e1a00000          MOV      r0,r0
                  |L1.1320|
000528  e1a00000          MOV      r0,r0                 ;95
;;;203        }
;;;204        write32(TVD_BASE + TVD_REG_E2C, 0x60000000);
00052c  e3a01206          MOV      r1,#0x60000000
000530  e59f0214          LDR      r0,|L1.1868|
000534  ebfffffe          BL       write32
;;;205        tvd.mode = mode;
000538  e59f014c          LDR      r0,|L1.1676|
00053c  e5c04004          STRB     r4,[r0,#4]  ; tvd
;;;206    }
000540  e8bd8010          POP      {r4,pc}
;;;207    
                          ENDP

                  tvd_init PROC
;;;33     
;;;34     void tvd_init(tvd_mode_e mode, void* buf_y, void* buf_c, uint8_t ch) {
000544  e92d41f0          PUSH     {r4-r8,lr}
000548  e1a07000          MOV      r7,r0
00054c  e1a04001          MOV      r4,r1
000550  e1a05002          MOV      r5,r2
000554  e1a06003          MOV      r6,r3
;;;35     #if 0	
;;;36         clk_enable(CCU_BUS_CLK_GATE1, 9); // TVD bus clock
;;;37         clk_enable(CCU_DRAM_CLK_GATE, 3); // DRAM access clock
;;;38     
;;;39         // Determine tvd clock division value. PLL_VIDEO should be configured and enabled!
;;;40         uint32_t tvd_clk_div = clk_pll_get_freq(PLL_VIDEO) / 27000000LU;
;;;41     
;;;42         clk_tvd_config(tvd_clk_div);
;;;43         clk_reset_clear(CCU_BUS_SOFT_RST1, 9);
;;;44     #endif	
;;;45     ////		tvd_open_clock();
;;;46     
;;;47     		tvd_bsp_init(0);
000558  e3a00000          MOV      r0,#0
00055c  ebfffffe          BL       tvd_bsp_init
;;;48     	
;;;49         tvd_set_mode(mode);
000560  e1a00007          MOV      r0,r7
000564  ebfffffe          BL       tvd_set_mode
;;;50     
;;;51         tvd_set_out_buf(buf_y, buf_c);
000568  e1a01005          MOV      r1,r5
00056c  e1a00004          MOV      r0,r4
000570  ebfffffe          BL       tvd_set_out_buf
;;;52      ////   tvd_set_mode(mode);
;;;53         tvd_set_ch(ch);
000574  e1a00006          MOV      r0,r6
000578  ebfffffe          BL       tvd_set_ch
;;;54     }
00057c  e8bd81f0          POP      {r4-r8,pc}
;;;55     
                          ENDP

                  tvd_get_out_size PROC
;;;221    
;;;222    void tvd_get_out_size(uint16_t* w, uint16_t* h) {
000580  e59f2104          LDR      r2,|L1.1676|
;;;223        *w = tvd.width;
000584  e1d220b0          LDRH     r2,[r2,#0]  ; tvd
000588  e1c020b0          STRH     r2,[r0,#0]
;;;224        *h = tvd.height;
00058c  e59f20f8          LDR      r2,|L1.1676|
000590  e1d220b2          LDRH     r2,[r2,#2]  ; tvd
000594  e1c120b0          STRH     r2,[r1,#0]
;;;225    }
000598  e12fff1e          BX       lr
;;;226    
                          ENDP

                  tvd_set_out_fmt PROC
;;;227    // Set output format (4:2:0/4:2:2, planar(semi-planar?)/mb(packed?/macroblock?), U/V swap)
;;;228    void tvd_set_out_fmt(tvd_out_fmt_e fmt) {
00059c  e92d4070          PUSH     {r4-r6,lr}
0005a0  e1a04000          MOV      r4,r0
;;;229        uint32_t val = read32(TVD_BASE + TVD_DMA_CFG) & ~((1 << 4) | (1 << 24) | (1 << 8));
0005a4  e59f00d4          LDR      r0,|L1.1664|
0005a8  ebfffffe          BL       read32
0005ac  e3c05401          BIC      r5,r0,#0x1000000
0005b0  e3c55e11          BIC      r5,r5,#0x110
;;;230        write32(TVD_BASE + TVD_DMA_CFG, val | fmt);
0005b4  e1851004          ORR      r1,r5,r4
0005b8  e59f00c0          LDR      r0,|L1.1664|
0005bc  ebfffffe          BL       write32
;;;231    }
0005c0  e8bd8070          POP      {r4-r6,pc}
;;;232    
                          ENDP

                  tvd_set_bluescreen_mode PROC
;;;233    void tvd_set_bluescreen_mode(tvd_blue_mode_e mode) {
0005c4  e92d4070          PUSH     {r4-r6,lr}
0005c8  e1a04000          MOV      r4,r0
;;;234        uint32_t val = read32(TVD_BASE + TVD_REG_F14) & ~(3 << 4);
0005cc  e59f00fc          LDR      r0,|L1.1744|
0005d0  ebfffffe          BL       read32
0005d4  e3c05030          BIC      r5,r0,#0x30
;;;235        write32(TVD_BASE + TVD_REG_F14, val | (mode << 4));
0005d8  e1851204          ORR      r1,r5,r4,LSL #4
0005dc  e59f00ec          LDR      r0,|L1.1744|
0005e0  ebfffffe          BL       write32
;;;236    }
0005e4  e8bd8070          POP      {r4-r6,pc}
;;;237    
                          ENDP

                  tvd_dma_enable PROC
;;;238    static void tvd_dma_enable(void) {
0005e8  e92d4010          PUSH     {r4,lr}
;;;239        set32(TVD_BASE + TVD_DMA_CFG, (1 << 0));
0005ec  e59f008c          LDR      r0,|L1.1664|
0005f0  ebfffffe          BL       read32
0005f4  e3804001          ORR      r4,r0,#1
0005f8  e1a01004          MOV      r1,r4
0005fc  e59f007c          LDR      r0,|L1.1664|
000600  ebfffffe          BL       write32
;;;240    }
000604  e8bd8010          POP      {r4,pc}
;;;241    
                          ENDP

                  tvd_dma_disable PROC
;;;242    static void tvd_dma_disable(void) {
000608  e92d4010          PUSH     {r4,lr}
;;;243        clear32(TVD_BASE + TVD_DMA_CFG, (1 << 0));
00060c  e59f006c          LDR      r0,|L1.1664|
000610  ebfffffe          BL       read32
000614  e3c04001          BIC      r4,r0,#1
000618  e1a01004          MOV      r1,r4
00061c  e59f005c          LDR      r0,|L1.1664|
000620  ebfffffe          BL       write32
;;;244    }
000624  e8bd8010          POP      {r4,pc}
;;;245    
                          ENDP

                  tvd_autoset PROC
;;;253    
;;;254    uint8_t tvd_autoset(void) {
000628  e3a00000          MOV      r0,#0
;;;255        return 0; // TODO:
;;;256    }
00062c  e12fff1e          BX       lr
;;;257    
                          ENDP

                  tvd_get_state PROC
;;;258    uint32_t tvd_get_state(void) {
000630  e92d4010          PUSH     {r4,lr}
;;;259        return read32(TVD_BASE + TVD_STATE_0);
000634  e59f0114          LDR      r0,|L1.1872|
000638  ebfffffe          BL       read32
;;;260    }
00063c  e8bd8010          POP      {r4,pc}
;;;261    
                          ENDP

                  tvd_get_input_mode PROC
;;;262    tvd_mode_e tvd_get_input_mode(void) {
000640  e3a00000          MOV      r0,#0
;;;263        return (tvd_mode_e)0; // TODO::
;;;264    }
000644  e12fff1e          BX       lr
;;;265    
                          ENDP

                  tvd_enable PROC
;;;266    void tvd_enable(void) {
000648  e92d4010          PUSH     {r4,lr}
;;;267        tvd_dma_enable();
00064c  ebfffffe          BL       tvd_dma_enable
;;;268    }
000650  e8bd8010          POP      {r4,pc}
;;;269    
                          ENDP

                  tvd_disable PROC
;;;270    void tvd_disable(void) {
000654  e92d4010          PUSH     {r4,lr}
;;;271        tvd_dma_disable();
000658  ebfffffe          BL       tvd_dma_disable
;;;272        // TODO:
;;;273    }
00065c  e8bd8010          POP      {r4,pc}
                          ENDP

                  read32 PROC
;;;19     
;;;20     static __inline uint32_t read32(uint32_t addr)
000660  e1a01000          MOV      r1,r0
;;;21     {
;;;22       return (*((volatile uint32_t*)(addr)));
000664  e5910000          LDR      r0,[r1,#0]
;;;23     }
000668  e12fff1e          BX       lr
;;;24     
                          ENDP

                  write32 PROC
;;;39     
;;;40     static __inline void write32(uint32_t addr, uint32_t value)
00066c  e5801000          STR      r1,[r0,#0]
;;;41     {
;;;42       *((volatile uint32_t*)(addr)) = value;
;;;43     }
000670  e12fff1e          BX       lr
;;;44     
                          ENDP

                  |L1.1652|
                          DCD      0x01c0be04
                  |L1.1656|
                          DCD      0x01c0b080
                  |L1.1660|
                          DCD      0x01c0b084
                  |L1.1664|
                          DCD      0x01c0b088
                  |L1.1668|
                          DCD      0x01c0b08c
                  |L1.1672|
                          DCD      0x01c0b090
                  |L1.1676|
                          DCD      tvd
                  |L1.1680|
                          DCD      0x00010001
                  |L1.1684|
                          DCD      0x01c0b008
                  |L1.1688|
                          DCD      0x00202068
                  |L1.1692|
                          DCD      0x01c0b00c
                  |L1.1696|
                          DCD      0x00300080
                  |L1.1700|
                          DCD      0x01c0b010
                  |L1.1704|
                          DCD      0x21f07c1f
                  |L1.1708|
                          DCD      0x01c0b018
                  |L1.1712|
                          DCD      0x00820022
                  |L1.1716|
                          DCD      0x01c0b01c
                  |L1.1720|
                          DCD      0x00590100
                  |L1.1724|
                          DCD      0x01c0bf08
                  |L1.1728|
                          DCD      0x01c0bf0c
                  |L1.1732|
                          DCD      0x008a32dd
                  |L1.1736|
                          DCD      0x01c0bf10
                  |L1.1740|
                          DCD      0x800000a0
                  |L1.1744|
                          DCD      0x01c0bf14
                  |L1.1748|
                          DCD      0x01c0bf1c
                  |L1.1752|
                          DCD      0x0000cb74
                  |L1.1756|
                          DCD      0x01c0bf2c
                  |L1.1760|
                          DCD      0x00004632
                  |L1.1764|
                          DCD      0x01c0bf44
                  |L1.1768|
                          DCD      0x000003c3
                  |L1.1772|
                          DCD      0x01c0bf74
                  |L1.1776|
                          DCD      0x01c0bf80
                  |L1.1780|
                          DCD      0x01c0bf84
                  |L1.1784|
                          DCD      0x01c0b000
                  |L1.1788|
                          DCD      0x01111001
                  |L1.1792|
                          DCD      0x03714080
                  |L1.1796|
                          DCD      0x00310080
                  |L1.1800|
                          DCD      0x2a098acb
                  |L1.1804|
                          DCD      0x0087002f
                  |L1.1808|
                          DCD      0x11590902
                  |L1.1812|
                          DCD      0x008a32ec
                  |L1.1816|
                          DCD      0x80000080
                  |L1.1820|
                          DCD      0x00000d74
                  |L1.1824|
                          DCD      0x0000412d
                  |L1.1828|
                          DCD      0x00000343
                  |L1.1832|
                          DCD      0x00002001
                  |L1.1836|
                          DCD      0x21e6efe3
                  |L1.1840|
                          DCD      0x01103001
                  |L1.1844|
                          DCD      0x21f69446
                  |L1.1848|
                          DCD      0x00870026
                  |L1.1852|
                          DCD      0x01104001
                  |L1.1856|
                          DCD      0x003100b0
                  |L1.1860|
                          DCD      0x28a33bb2
                  |L1.1864|
                          DCD      0x00005036
                  |L1.1868|
                          DCD      0x01c0be2c
                  |L1.1872|
                          DCD      0x01c0be40

                          AREA ||.data||, DATA, ALIGN=1

                  tvd
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00
