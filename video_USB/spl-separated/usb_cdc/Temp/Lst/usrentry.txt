; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usrentry.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usrentry.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usrentry.crf users\usrentry.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                  tud_cdc_rx_cb PROC
;;;29     uint8_t buf[512];
;;;30     void tud_cdc_rx_cb(uint8_t itf) {
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;31     	uint32_t count = tud_cdc_n_read(itf, buf, sizeof(buf));
000004  e59f10c8          LDR      r1,|L1.212|
000008  e1a07000          MOV      r7,r0                 ;30
00000c  e3a02c02          MOV      r2,#0x200
000010  ebfffffe          BL       tud_cdc_n_read
;;;32     
;;;33     	// echo back to both serial ports
;;;34     	echo_serial_port(itf, buf, count);
000014  e59f50b8          LDR      r5,|L1.212|
000018  e1b06000          MOVS     r6,r0                 ;31
00001c  e3a04000          MOV      r4,#0                 ;31
000020  0a000012          BEQ      |L1.112|
000024  ebfffffe          BL       __rt_ctype_table
000028  e1a08000          MOV      r8,r0                 ;31
                  |L1.44|
00002c  e7d50004          LDRB     r0,[r5,r4]            ;31
000030  e5981000          LDR      r1,[r8,#0]            ;31
000034  e3570000          CMP      r7,#0                 ;31
000038  e7d11000          LDRB     r1,[r1,r0]            ;31
00003c  0a00000e          BEQ      |L1.124|
000040  e3110008          TST      r1,#8                 ;31
000044  12400020          SUBNE    r0,r0,#0x20           ;31
000048  0a000000          BEQ      |L1.80|
                  |L1.76|
00004c  e7c50004          STRB     r0,[r5,r4]            ;31
                  |L1.80|
000050  e5cd0000          STRB     r0,[sp,#0]            ;31
000054  e3a02001          MOV      r2,#1                 ;31
000058  e1a0100d          MOV      r1,sp                 ;31
00005c  e1a00007          MOV      r0,r7                 ;31
000060  ebfffffe          BL       tud_cdc_n_write
000064  e2844001          ADD      r4,r4,#1              ;31
000068  e1540006          CMP      r4,r6                 ;31
00006c  3affffee          BCC      |L1.44|
                  |L1.112|
000070  e1a00007          MOV      r0,r7                 ;31
000074  e8bd43f8          POP      {r3-r9,lr}            ;31
000078  eafffffe          B        tud_cdc_n_write_flush
                  |L1.124|
00007c  e3110010          TST      r1,#0x10              ;31
000080  12800020          ADDNE    r0,r0,#0x20           ;31
000084  1afffff0          BNE      |L1.76|
000088  eafffff0          B        |L1.80|
;;;35     }
;;;36     
                          ENDP

                  usb_task PROC
                  |L1.140|
;;;37     __task void usb_task() {
00008c  e3a01000          MOV      r1,#0
;;;38       for (;;) {
;;;39     		tud_task();
000090  e3e00000          MVN      r0,#0
000094  ebfffffe          BL       tud_task_ext
000098  eafffffb          B        |L1.140|
;;;40     	}
;;;41     }
;;;42     
                          ENDP

                  UserEntryInit PROC
;;;55     ////////////////////////////////////////////////////////////////////////////////
;;;56     void UserEntryInit(void)
00009c  e92d4010          PUSH     {r4,lr}
;;;57     {
;;;58       target_wdt_feed();
0000a0  ebfffffe          BL       target_wdt_feed
;;;59     
;;;60       printf("DDR size: %uMB\n", (*(uint32_t*)0x5c) & 0xFFFFFF);
0000a4  e3a00000          MOV      r0,#0
0000a8  e590005c          LDR      r0,[r0,#0x5c]
0000ac  e3c014ff          BIC      r1,r0,#0xff000000
0000b0  e28f0020          ADR      r0,|L1.216|
0000b4  ebfffffe          BL       __2printf
;;;61     	tusb_init();
0000b8  ebfffffe          BL       tusb_init
;;;62     	os_tsk_create(usb_task, 10);
0000bc  e8bd4010          POP      {r4,lr}
0000c0  e3a03000          MOV      r3,#0
0000c4  e1a02003          MOV      r2,r3
0000c8  e3a0100a          MOV      r1,#0xa
0000cc  e24f0048          ADR      r0,|L1.140|
0000d0  eafffffe          B        os_tsk_create0
                  |L1.212|
                          DCD      ||.bss||
                  |L1.216|
0000d8  44445220          DCB      "DDR size: %uMB\n",0
0000dc  73697a65
0000e0  3a202575
0000e4  4d420a00
                          ENDP

                  UserEntryLoop PROC
                  |L1.232|
;;;76     ////////////////////////////////////////////////////////////////////////////////
;;;77     void UserEntryLoop(void)
0000e8  ebfffffe          BL       target_wdt_feed
;;;78     {
;;;79       for (;;) {
;;;80         target_wdt_feed();
;;;81     		sys_delay(500);
0000ec  e3a00f7d          MOV      r0,#0x1f4
0000f0  ebfffffe          BL       os_dly_wait
0000f4  eafffffb          B        |L1.232|
;;;82     #if 0
;;;83         // ´®¿ÚÇý¶¯²âÊÔ
;;;84         if (f1c100s_uart_isTxEnd(UART0_MID)) {
;;;85           rCnt = f1c100s_uart_readFifo(UART0_MID, rbuffer, sizeof(rbuffer));
;;;86           if (rCnt > 0) {
;;;87             f1c100s_uart_asyncTx(UART0_MID, rbuffer, rCnt);
;;;88           }
;;;89         }
;;;90     #endif
;;;91       }
;;;92     }
;;;93     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  buf
                          %        512
