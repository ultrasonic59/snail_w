; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\f1c100s-intc.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\f1c100s-intc.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\f1c100s-intc.crf ..\machine\f1c100s-intc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  f1c100s_intc_get_nirq PROC
;;;67     */
;;;68     uint8_t f1c100s_intc_get_nirq(void)
000000  e59f0214          LDR      r0,|L1.540|
;;;69     {
;;;70       return ((INTC->INTC_VECTOR_REG >> 2) & 0x3F);
000004  e5900000          LDR      r0,[r0,#0]
000008  e1a00c00          LSL      r0,r0,#24
00000c  e1a00d20          LSR      r0,r0,#26
;;;71     }
000010  e12fff1e          BX       lr
;;;72     
                          ENDP

                  f1c100s_intc_dispatch PROC
;;;77     */
;;;78     void f1c100s_intc_dispatch(uint8_t nIRQ)
000014  e59f1204          LDR      r1,|L1.544|
;;;79     {
;;;80       IRQHandleTypeDef handle = irq_table[nIRQ];
000018  e7910100          LDR      r0,[r1,r0,LSL #2]
;;;81       if (handle)
00001c  e3500000          CMP      r0,#0
;;;82         handle();
;;;83     }
000020  012fff1e          BXEQ     lr
000024  e12fff10          BX       r0                    ;82
;;;84     
                          ENDP

                  f1c100s_intc_set_isr PROC
;;;90     */
;;;91     void f1c100s_intc_set_isr(uint8_t nIRQ, void (*handle)(void))
000028  e3500040          CMP      r0,#0x40
;;;92     {
;;;93       if (nIRQ < COUNTOF(irq_table)) {
;;;94         irq_table[nIRQ] = handle;
00002c  359f21ec          LDRCC    r2,|L1.544|
000030  37821100          STRCC    r1,[r2,r0,LSL #2]
;;;95       }
;;;96     }
000034  e12fff1e          BX       lr
;;;97     
                          ENDP

                  f1c100s_intc_enable_irq PROC
;;;102    */
;;;103    void f1c100s_intc_enable_irq(uint8_t nIRQ)
000038  e10f1000          MRS      r1,APSR ; formerly CPSR
00003c  e38120c0          ORR      r2,r1,#0xc0
000040  e121f002          MSR      CPSR_c,r2
;;;104    {
;;;105      CPU_SR_DECL;
;;;106    
;;;107      CPU_ENTER_CRITICAL();
;;;108      INTC->INTC_EN_REG[nIRQ / 32] |= (1 << (nIRQ % 32));
000044  e1a032a0          LSR      r3,r0,#5
000048  e200201f          AND      r2,r0,#0x1f
00004c  e1a00103          LSL      r0,r3,#2
000050  e2800401          ADD      r0,r0,#0x1000000
000054  e28008c2          ADD      r0,r0,#0xc20000
000058  e590c420          LDR      r12,[r0,#0x420]
00005c  e3a03001          MOV      r3,#1
000060  e18c2213          ORR      r2,r12,r3,LSL r2
000064  e5802420          STR      r2,[r0,#0x420]
000068  e121f001          MSR      CPSR_c,r1
;;;109      CPU_EXIT_CRITICAL();
;;;110    }
00006c  e12fff1e          BX       lr
;;;111    
                          ENDP

                  f1c100s_intc_disable_irq PROC
;;;116    */
;;;117    void f1c100s_intc_disable_irq(uint8_t nIRQ)
000070  e10f1000          MRS      r1,APSR ; formerly CPSR
000074  e38120c0          ORR      r2,r1,#0xc0
000078  e121f002          MSR      CPSR_c,r2
;;;118    {
;;;119      CPU_SR_DECL;
;;;120    
;;;121      CPU_ENTER_CRITICAL();
;;;122      INTC->INTC_EN_REG[nIRQ / 32] &= ~(1 << (nIRQ % 32));
00007c  e1a032a0          LSR      r3,r0,#5
000080  e200201f          AND      r2,r0,#0x1f
000084  e1a00103          LSL      r0,r3,#2
000088  e2800401          ADD      r0,r0,#0x1000000
00008c  e28008c2          ADD      r0,r0,#0xc20000
000090  e590c420          LDR      r12,[r0,#0x420]
000094  e3a03001          MOV      r3,#1
000098  e1cc2213          BIC      r2,r12,r3,LSL r2
00009c  e5802420          STR      r2,[r0,#0x420]
0000a0  e121f001          MSR      CPSR_c,r1
;;;123      CPU_EXIT_CRITICAL();
;;;124    }
0000a4  e12fff1e          BX       lr
;;;125    
                          ENDP

                  f1c100s_intc_mask_irq PROC
;;;130    */
;;;131    void f1c100s_intc_mask_irq(uint8_t nIRQ)
0000a8  e10f1000          MRS      r1,APSR ; formerly CPSR
0000ac  e38120c0          ORR      r2,r1,#0xc0
0000b0  e121f002          MSR      CPSR_c,r2
;;;132    {
;;;133      CPU_SR_DECL;
;;;134    
;;;135      CPU_ENTER_CRITICAL();
;;;136      INTC->INTC_MASK_REG[nIRQ / 32] |= (1 << (nIRQ % 32));
0000b4  e1a032a0          LSR      r3,r0,#5
0000b8  e200201f          AND      r2,r0,#0x1f
0000bc  e1a00103          LSL      r0,r3,#2
0000c0  e2800401          ADD      r0,r0,#0x1000000
0000c4  e28008c2          ADD      r0,r0,#0xc20000
0000c8  e590c430          LDR      r12,[r0,#0x430]
0000cc  e3a03001          MOV      r3,#1
0000d0  e18c2213          ORR      r2,r12,r3,LSL r2
0000d4  e5802430          STR      r2,[r0,#0x430]
0000d8  e121f001          MSR      CPSR_c,r1
;;;137      CPU_EXIT_CRITICAL();
;;;138    }
0000dc  e12fff1e          BX       lr
;;;139    
                          ENDP

                  f1c100s_intc_unmask_irq PROC
;;;144    */
;;;145    void f1c100s_intc_unmask_irq(uint8_t nIRQ)
0000e0  e10f1000          MRS      r1,APSR ; formerly CPSR
0000e4  e38120c0          ORR      r2,r1,#0xc0
0000e8  e121f002          MSR      CPSR_c,r2
;;;146    {
;;;147      CPU_SR_DECL;
;;;148    
;;;149      CPU_ENTER_CRITICAL();
;;;150      INTC->INTC_MASK_REG[nIRQ / 32] &= ~(1 << (nIRQ % 32));
0000ec  e1a032a0          LSR      r3,r0,#5
0000f0  e200201f          AND      r2,r0,#0x1f
0000f4  e1a00103          LSL      r0,r3,#2
0000f8  e2800401          ADD      r0,r0,#0x1000000
0000fc  e28008c2          ADD      r0,r0,#0xc20000
000100  e590c430          LDR      r12,[r0,#0x430]
000104  e3a03001          MOV      r3,#1
000108  e1cc2213          BIC      r2,r12,r3,LSL r2
00010c  e5802430          STR      r2,[r0,#0x430]
000110  e121f001          MSR      CPSR_c,r1
;;;151      CPU_EXIT_CRITICAL();
;;;152    }
000114  e12fff1e          BX       lr
;;;153    
                          ENDP

                  f1c100s_intc_force_irq PROC
;;;158    */
;;;159    void f1c100s_intc_force_irq(uint8_t nIRQ)
000118  e10f1000          MRS      r1,APSR ; formerly CPSR
00011c  e38120c0          ORR      r2,r1,#0xc0
000120  e121f002          MSR      CPSR_c,r2
;;;160    {
;;;161      CPU_SR_DECL;
;;;162    
;;;163      // 这里只负责置位，必须由IRQ处理函数清除，否则会连续进入中断！
;;;164      CPU_ENTER_CRITICAL();
;;;165      INTC->INTC_FF_REG[nIRQ / 32] = (1 << (nIRQ % 32));
000124  e1a022a0          LSR      r2,r0,#5
000128  e200001f          AND      r0,r0,#0x1f
00012c  e3a03001          MOV      r3,#1
000130  e1a02102          LSL      r2,r2,#2
000134  e1a00013          LSL      r0,r3,r0
000138  e2822401          ADD      r2,r2,#0x1000000
00013c  e28228c2          ADD      r2,r2,#0xc20000
000140  e5820450          STR      r0,[r2,#0x450]
000144  e121f001          MSR      CPSR_c,r1
;;;166      CPU_EXIT_CRITICAL();
;;;167    }
000148  e12fff1e          BX       lr
;;;168    
                          ENDP

                  f1c100s_intc_clear_pend PROC
;;;173    */
;;;174    void f1c100s_intc_clear_pend(uint8_t nIRQ)
00014c  e1a012a0          LSR      r1,r0,#5
;;;175    {
;;;176      INTC->INTC_PEND_REG[nIRQ / 32] = (1 << (nIRQ % 32));
000150  e200001f          AND      r0,r0,#0x1f
000154  e3a02001          MOV      r2,#1
000158  e1a01101          LSL      r1,r1,#2
00015c  e1a00012          LSL      r0,r2,r0
000160  e2811401          ADD      r1,r1,#0x1000000
000164  e28118c2          ADD      r1,r1,#0xc20000
000168  e5810410          STR      r0,[r1,#0x410]
;;;177    }
00016c  e12fff1e          BX       lr
;;;178    
                          ENDP

                  f1c100s_intc_init PROC
;;;183    */
;;;184    void f1c100s_intc_init(void)
000170  e92d0070          PUSH     {r4-r6}
;;;185    {
000174  e3a02000          MOV      r2,#0
000178  e10f0000          MRS      r0,APSR ; formerly CPSR
00017c  e38010c0          ORR      r1,r0,#0xc0
000180  e121f001          MSR      CPSR_c,r1
;;;186      CPU_SR_DECL;
;;;187    
;;;188      CPU_ENTER_CRITICAL();
;;;189      INTC->INTC_EN_REG[0] = INTC->INTC_EN_REG[1] = 0;
000184  e59f1098          LDR      r1,|L1.548|
000188  e2413004          SUB      r3,r1,#4
;;;190      INTC->INTC_MASK_REG[0] = INTC->INTC_MASK_REG[1] = 0;
00018c  e281c010          ADD      r12,r1,#0x10
000190  e281400c          ADD      r4,r1,#0xc
000194  e5812000          STR      r2,[r1,#0]            ;189
;;;191      INTC->INTC_FF_REG[0] = INTC->INTC_FF_REG[1] = 0;
000198  e2811030          ADD      r1,r1,#0x30
00019c  e5832000          STR      r2,[r3,#0]            ;189
0001a0  e2413004          SUB      r3,r1,#4
0001a4  e58c2000          STR      r2,[r12,#0]           ;190
;;;192      INTC->INTC_RESP_REG[0] = INTC->INTC_RESP_REG[1] = 0;
0001a8  e241c010          SUB      r12,r1,#0x10
0001ac  e5842000          STR      r2,[r4,#0]            ;190
0001b0  e2414014          SUB      r4,r1,#0x14
0001b4  e5812000          STR      r2,[r1,#0]            ;191
;;;193      INTC->INTC_PEND_REG[0] = INTC->INTC_PEND_REG[1] = ~0UL;
0001b8  e3e01000          MVN      r1,#0
0001bc  e243503c          SUB      r5,r3,#0x3c
0001c0  e5832000          STR      r2,[r3,#0]            ;191
0001c4  e1c53e21          BIC      r3,r5,r1,LSR #28
0001c8  e58c2000          STR      r2,[r12,#0]           ;192
;;;194      INTC->INTC_BASE_ADDR_REG = 0;
0001cc  e085c201          ADD      r12,r5,r1,LSL #4
;;;195      INTC->NMI_INT_CTRL_REG = 0;
0001d0  e0836101          ADD      r6,r3,r1,LSL #2
0001d4  e5842000          STR      r2,[r4,#0]            ;192
0001d8  e5851000          STR      r1,[r5,#0]            ;193
0001dc  e5831000          STR      r1,[r3,#0]            ;193
0001e0  e58c2000          STR      r2,[r12,#0]           ;194
0001e4  e5862000          STR      r2,[r6,#0]
0001e8  e121f000          MSR      CPSR_c,r0
;;;196      CPU_EXIT_CRITICAL();
;;;197      for (int i = 0; i < COUNTOF(irq_table); i++) {
;;;198        irq_table[i] = 0;
0001ec  e59f302c          LDR      r3,|L1.544|
0001f0  e3a01000          MOV      r1,#0                 ;197
0001f4  e1a00001          MOV      r0,r1                 ;197
                  |L1.504|
0001f8  e7832101          STR      r2,[r3,r1,LSL #2]
;;;199      }
0001fc  e2811001          ADD      r1,r1,#1
000200  e2800002          ADD      r0,r0,#2              ;198
000204  e7832101          STR      r2,[r3,r1,LSL #2]     ;198
000208  e3500040          CMP      r0,#0x40
00020c  e2811001          ADD      r1,r1,#1              ;198
000210  bafffff8          BLT      |L1.504|
;;;200    }
000214  e8bd0070          POP      {r4-r6}
000218  e12fff1e          BX       lr
;;;201    
                          ENDP

                  |L1.540|
                          DCD      0x01c20400
                  |L1.544|
                          DCD      ||.bss||
                  |L1.548|
                          DCD      0x01c20424

                          AREA ||.bss||, DATA, NOINIT, ALIGN=5

                  irq_table
                  ||__tagsym$$used||
                          %        256
