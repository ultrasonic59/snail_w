; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\pwm-f1c100s.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\pwm-f1c100s.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\pwm-f1c100s.crf ..\periph\pwm-f1c100s.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  pwm_f1c100s_config PROC
;;;51     
;;;52     void pwm_f1c100s_config(pwm_t* pwm, int32_t duty, int32_t period, int32_t polarity)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;53     {
000004  e59f7300          LDR      r7,|L1.780|
000008  e1a06002          MOV      r6,r2
00000c  e1a09001          MOV      r9,r1
;;;54       uint64_t rate = 24000000;//hosc =24MHz //clk_get_rate(pwm->clk);
;;;55       uint64_t div;
;;;56       uint32_t prd, dty, gate;
;;;57       uint32_t prescaler = 0;
;;;58       uint32_t ctrl;
;;;59     
;;;60       //if(pwm->duty != duty || pwm->period != period)
;;;61       {
;;;62         prescaler = 0xf;
;;;63         div = rate * period + 1000000000 / 2;
000010  e1a0afc2          ASR      r10,r2,#31
000014  e0821697          UMULL    r1,r2,r7,r6
000018  e3a08000          MOV      r8,#0                 ;53
00001c  e0222698          MLA      r2,r8,r6,r2
000020  e1a04000          MOV      r4,r0                 ;53
000024  e59f02e4          LDR      r0,|L1.784|
000028  e0222a97          MLA      r2,r7,r10,r2
00002c  e0900001          ADDS     r0,r0,r1
000030  e2a21000          ADC      r1,r2,#0
;;;64         div = div / 1000000000;
000034  e59f22d8          LDR      r2,|L1.788|
000038  e3a0500f          MOV      r5,#0xf               ;62
00003c  e1a03008          MOV      r3,r8
000040  ebfffffe          BL       __aeabi_uldivmod
000044  e59f22cc          LDR      r2,|L1.792|
000048  e250c001          SUBS     r12,r0,#1
00004c  e2c1b000          SBC      r11,r1,#0
000050  e052200c          SUBS     r2,r2,r12
000054  e2fb2000          RSCS     r2,r11,#0
;;;65         if (div - 1 > 0xffff)
;;;66           prescaler = 0;
;;;67     
;;;68         if (prescaler == 0) {
;;;69           for (prescaler = 0; prescaler < 0xf; prescaler++) {
;;;70             if (!prescaler_table[prescaler])
000058  359fb2bc          LDRCC    r11,|L1.796|
00005c  33a05000          MOVCC    r5,#0                 ;66
000060  2a00001d          BCS      |L1.220|
                  |L1.100|
000064  e79b2105          LDR      r2,[r11,r5,LSL #2]
000068  e3520000          CMP      r2,#0
00006c  0a000010          BEQ      |L1.180|
;;;71               continue;
;;;72             div = rate;
000070  e1a00007          MOV      r0,r7
000074  e1a01008          MOV      r1,r8
;;;73             div = div / prescaler_table[prescaler];
000078  e3a03000          MOV      r3,#0
00007c  ebfffffe          BL       __aeabi_uldivmod
000080  e1a02000          MOV      r2,r0
000084  e0830692          UMULL    r0,r3,r2,r6
000088  e0213196          MLA      r1,r6,r1,r3
;;;74             div = div * period;
;;;75             div = div / 1000000000;
00008c  e3a03000          MOV      r3,#0
000090  e0211a92          MLA      r1,r2,r10,r1          ;73
000094  e59f2278          LDR      r2,|L1.788|
000098  ebfffffe          BL       __aeabi_uldivmod
00009c  e59f2274          LDR      r2,|L1.792|
0000a0  e250c001          SUBS     r12,r0,#1
0000a4  e2c1e000          SBC      lr,r1,#0
0000a8  e052200c          SUBS     r2,r2,r12
0000ac  e2fe2000          RSCS     r2,lr,#0
;;;76             if (div - 1 <= 0xffff)
0000b0  2a000002          BCS      |L1.192|
                  |L1.180|
0000b4  e2855001          ADD      r5,r5,#1              ;71
0000b8  e355000f          CMP      r5,#0xf               ;69
0000bc  3affffe8          BCC      |L1.100|
                  |L1.192|
;;;77               break;
0000c0  e59f7250          LDR      r7,|L1.792|
0000c4  e250c001          SUBS     r12,r0,#1
0000c8  e2c13000          SBC      r3,r1,#0
0000cc  e057c00c          SUBS     r12,r7,r12
0000d0  e2f32000          RSCS     r2,r3,#0
;;;78           }
;;;79     
;;;80           if (div - 1 > 0xffff) {
;;;81             return;
;;;82           }
;;;83         }
;;;84     
;;;85         prd = div;
;;;86         div *= duty;
;;;87         div = div / 100;//div / period;
;;;88         dty = div;
;;;89     
;;;90         gate = (read32(pwm->virt + PWM_CTRL) & PWM_BIT(pwm->channel, 6)) ? 1 : 0;
;;;91         if (gate) {
;;;92           ctrl = read32(pwm->virt + PWM_CTRL);
;;;93           ctrl &= ~PWM_BIT(pwm->channel, 6);
;;;94           write32(pwm->virt + PWM_CTRL, ctrl);
;;;95         }
;;;96         ctrl = read32(pwm->virt + PWM_CTRL);
;;;97         ctrl &= ~(0xf << (pwm->channel * 15));
;;;98         ctrl |= (prescaler << (pwm->channel * 15));
;;;99         write32(pwm->virt + PWM_CTRL, ctrl);
;;;100        write32(pwm->virt + PWM_PERIOD(pwm->channel), ((prd - 1) << 16) | (dty & 0xffff));
;;;101        if (gate) {
;;;102          ctrl = read32(pwm->virt + PWM_CTRL);
;;;103          ctrl |= PWM_BIT(pwm->channel, 6);
;;;104          write32(pwm->virt + PWM_CTRL, ctrl);
;;;105        }
;;;106        pwm->duty = duty;
;;;107        pwm->period = period;
;;;108      }
;;;109    
;;;110      //if(pwm->polarity != polarity)
;;;111      {
;;;112        ctrl = read32(pwm->virt + PWM_CTRL);
;;;113        if (polarity)
;;;114          ctrl |= PWM_BIT(pwm->channel, 5);
;;;115        else
;;;116          ctrl &= ~PWM_BIT(pwm->channel, 5);
;;;117        write32(pwm->virt + PWM_CTRL, ctrl);
;;;118    
;;;119        pwm->polarity = polarity;
;;;120      }
;;;121    }
0000d4  328dd010          ADDCC    sp,sp,#0x10
0000d8  38bd9ff0          POPCC    {r4-r12,pc}
                  |L1.220|
0000dc  e083c990          UMULL    r12,r3,r0,r9          ;86
0000e0  e1a02fc9          ASR      r2,r9,#31             ;86
0000e4  e0213199          MLA      r1,r9,r1,r3           ;86
0000e8  e1a07000          MOV      r7,r0                 ;85
0000ec  e0211290          MLA      r1,r0,r2,r1           ;86
0000f0  e3a02064          MOV      r2,#0x64              ;87
0000f4  e3a03000          MOV      r3,#0                 ;87
0000f8  e1a0000c          MOV      r0,r12                ;87
0000fc  ebfffffe          BL       __aeabi_uldivmod
000100  e5943000          LDR      r3,[r4,#0]            ;90
000104  e5d41010          LDRB     r1,[r4,#0x10]         ;90
000108  e5932000          LDR      r2,[r3,#0]            ;90
00010c  e061c201          RSB      r12,r1,r1,LSL #4      ;90
000110  e3a01040          MOV      r1,#0x40              ;90
000114  e1a0cc11          LSL      r12,r1,r12            ;90
000118  e112000c          TST      r2,r12                ;90
00011c  e1a0b000          MOV      r11,r0                ;88
000120  03a02000          MOVEQ    r2,#0                 ;90
000124  0a000003          BEQ      |L1.312|
000128  e5930000          LDR      r0,[r3,#0]            ;90
00012c  e3a02001          MOV      r2,#1                 ;90
000130  e1c0000c          BIC      r0,r0,r12             ;93
000134  e5830000          STR      r0,[r3,#0]            ;94
                  |L1.312|
000138  e5940000          LDR      r0,[r4,#0]            ;96
00013c  e5d4c010          LDRB     r12,[r4,#0x10]        ;97
000140  e5903000          LDR      r3,[r0,#0]            ;97
000144  e3a0800f          MOV      r8,#0xf               ;97
000148  e3a0a004          MOV      r10,#4                ;100
00014c  e06cc20c          RSB      r12,r12,r12,LSL #4    ;97
000150  e1a08c18          LSL      r8,r8,r12             ;97
000154  e1a0cc15          LSL      r12,r5,r12            ;98
000158  e1a0b80b          LSL      r11,r11,#16           ;100
00015c  e1c33008          BIC      r3,r3,r8              ;97
000160  e1a0b82b          LSR      r11,r11,#16           ;100
000164  e2477001          SUB      r7,r7,#1              ;97
000168  e183300c          ORR      r3,r3,r12             ;98
00016c  e3520000          CMP      r2,#0                 ;101
000170  e18b5807          ORR      r5,r11,r7,LSL #16     ;100
000174  e5803000          STR      r3,[r0,#0]            ;99
000178  e5940010          LDR      r0,[r4,#0x10]         ;100
00017c  e5942000          LDR      r2,[r4,#0]            ;100
000180  e08a0100          ADD      r0,r10,r0,LSL #2      ;100
000184  e7825000          STR      r5,[r2,r0]            ;100
000188  0a000005          BEQ      |L1.420|
00018c  e5d42010          LDRB     r2,[r4,#0x10]         ;103
000190  e5940000          LDR      r0,[r4,#0]            ;102
000194  e0623202          RSB      r3,r2,r2,LSL #4       ;103
000198  e5902000          LDR      r2,[r0,#0]            ;103
00019c  e1821311          ORR      r1,r2,r1,LSL r3       ;103
0001a0  e5801000          STR      r1,[r0,#0]            ;104
                  |L1.420|
0001a4  e584600c          STR      r6,[r4,#0xc]          ;112
0001a8  e5849008          STR      r9,[r4,#8]            ;112
0001ac  e59d100c          LDR      r1,[sp,#0xc]          ;113
0001b0  e5940000          LDR      r0,[r4,#0]            ;113
0001b4  e3510000          CMP      r1,#0                 ;113
0001b8  e5901000          LDR      r1,[r0,#0]            ;113
0001bc  e3a02020          MOV      r2,#0x20              ;114
0001c0  e5d43010          LDRB     r3,[r4,#0x10]         ;116
0001c4  e0633203          RSB      r3,r3,r3,LSL #4       ;116
0001c8  e1a02312          LSL      r2,r2,r3              ;116
0001cc  11811002          ORRNE    r1,r1,r2              ;114
0001d0  01c11002          BICEQ    r1,r1,r2              ;116
0001d4  e5801000          STR      r1,[r0,#0]            ;117
0001d8  e59d000c          LDR      r0,[sp,#0xc]          ;119
0001dc  e5840014          STR      r0,[r4,#0x14]         ;119
0001e0  e28dd010          ADD      sp,sp,#0x10
0001e4  e8bd9ff0          POP      {r4-r12,pc}
;;;122    
                          ENDP

                  pwm_f1c100s_set_duty PROC
;;;123    void pwm_f1c100s_set_duty(pwm_t* pwm, int32_t duty)
0001e8  e590200c          LDR      r2,[r0,#0xc]
;;;124    {
;;;125      pwm_f1c100s_config(pwm, duty, pwm->period, pwm->polarity);
0001ec  e5903014          LDR      r3,[r0,#0x14]
0001f0  eafffffe          B        pwm_f1c100s_config
;;;126    }
;;;127    
                          ENDP

                  pwm_f1c100s_enable PROC
;;;128    void pwm_f1c100s_enable(pwm_t* pwm)
0001f4  e92d4010          PUSH     {r4,lr}
;;;129    {
;;;130      uint32_t ctrl;
;;;131    
;;;132      if ((pwm->pwm_pin >= 0) && (pwm->pwm_pin_cfg >= 0))
0001f8  e590101c          LDR      r1,[r0,#0x1c]
0001fc  e1a04000          MOV      r4,r0                 ;129
000200  e3510000          CMP      r1,#0
000204  a5942020          LDRGE    r2,[r4,#0x20]
000208  a3520000          CMPGE    r2,#0
00020c  ba000001          BLT      |L1.536|
;;;133        gpio_f1c100s_set_cfg(pwm->pwm_port, pwm->pwm_pin, pwm->pwm_pin_cfg);
000210  e5940018          LDR      r0,[r4,#0x18]
000214  ebfffffe          BL       gpio_f1c100s_set_cfg
                  |L1.536|
;;;134      //clk_enable(pwm->clk);
;;;135    
;;;136      ctrl = read32(pwm->virt + PWM_CTRL);
000218  e5940000          LDR      r0,[r4,#0]
;;;137      ctrl |= PWM_BIT(pwm->channel, 4);
00021c  e5d42010          LDRB     r2,[r4,#0x10]
000220  e5901000          LDR      r1,[r0,#0]
000224  e3a0c010          MOV      r12,#0x10
;;;138      ctrl |= PWM_BIT(pwm->channel, 6);
000228  e3a03040          MOV      r3,#0x40
00022c  e0622202          RSB      r2,r2,r2,LSL #4       ;137
000230  e1a0c21c          LSL      r12,r12,r2            ;137
000234  e181100c          ORR      r1,r1,r12             ;137
000238  e1811213          ORR      r1,r1,r3,LSL r2
;;;139      write32(pwm->virt + PWM_CTRL, ctrl);
00023c  e5801000          STR      r1,[r0,#0]
;;;140    }
000240  e8bd8010          POP      {r4,pc}
;;;141    
                          ENDP

                  pwm_f1c100s_disable PROC
;;;142    void pwm_f1c100s_disable(pwm_t* pwm)
000244  e5d01010          LDRB     r1,[r0,#0x10]
;;;143    {
;;;144      uint32_t ctrl;
;;;145    
;;;146      ctrl = read32(pwm->virt + PWM_CTRL);
000248  e5900000          LDR      r0,[r0,#0]
;;;147      ctrl &= ~PWM_BIT(pwm->channel, 4);
00024c  e3a0c010          MOV      r12,#0x10
000250  e5902000          LDR      r2,[r0,#0]
;;;148      ctrl &= ~PWM_BIT(pwm->channel, 6);
000254  e3a03040          MOV      r3,#0x40
000258  e0611201          RSB      r1,r1,r1,LSL #4       ;147
00025c  e1a03113          LSL      r3,r3,r1
000260  e1c2111c          BIC      r1,r2,r12,LSL r1      ;147
000264  e1c11003          BIC      r1,r1,r3
;;;149      write32(pwm->virt + PWM_CTRL, ctrl);
000268  e5801000          STR      r1,[r0,#0]
;;;150      //clk_disable(pwm->clk);
;;;151    }
00026c  e12fff1e          BX       lr
;;;152    
                          ENDP

                  pwm_f1c100s_init PROC
;;;153    int32_t pwm_f1c100s_init(pwm_t* pwm)
000270  e92d4070          PUSH     {r4-r6,lr}
;;;154    {
000274  e5d0c010          LDRB     r12,[r0,#0x10]
000278  e1a04000          MOV      r4,r0
;;;155      write32(pwm->virt + PWM_CTRL, read32(pwm->virt + PWM_CTRL) & ~(0x3fff << (pwm->channel * 15)));
00027c  e5900000          LDR      r0,[r0,#0]
000280  e59f1098          LDR      r1,|L1.800|
000284  e5905000          LDR      r5,[r0,#0]
;;;156      write32(pwm->virt + PWM_PERIOD(pwm->channel), 0);
000288  e3a03004          MOV      r3,#4
00028c  e3a02000          MOV      r2,#0
000290  e06cc20c          RSB      r12,r12,r12,LSL #4
000294  e1c51c11          BIC      r1,r5,r1,LSL r12
000298  e5801000          STR      r1,[r0,#0]            ;155
00029c  e5941010          LDR      r1,[r4,#0x10]
0002a0  e5940000          LDR      r0,[r4,#0]
0002a4  e0831101          ADD      r1,r3,r1,LSL #2
0002a8  e7802001          STR      r2,[r0,r1]
;;;157    
;;;158      pwm_f1c100s_config(pwm, pwm->duty, pwm->period, pwm->polarity);
0002ac  e5941008          LDR      r1,[r4,#8]
0002b0  e594200c          LDR      r2,[r4,#0xc]
0002b4  e5943014          LDR      r3,[r4,#0x14]
0002b8  e1a00004          MOV      r0,r4
0002bc  ebfffffe          BL       pwm_f1c100s_config
0002c0  e594101c          LDR      r1,[r4,#0x1c]
0002c4  e3510000          CMP      r1,#0
0002c8  a5942020          LDRGE    r2,[r4,#0x20]
0002cc  a3520000          CMPGE    r2,#0
0002d0  ba000001          BLT      |L1.732|
0002d4  e5940018          LDR      r0,[r4,#0x18]
0002d8  ebfffffe          BL       gpio_f1c100s_set_cfg
                  |L1.732|
0002dc  e5940000          LDR      r0,[r4,#0]
0002e0  e5d42010          LDRB     r2,[r4,#0x10]
0002e4  e5901000          LDR      r1,[r0,#0]
0002e8  e3a0c010          MOV      r12,#0x10
0002ec  e3a03040          MOV      r3,#0x40
0002f0  e0622202          RSB      r2,r2,r2,LSL #4
0002f4  e1a0c21c          LSL      r12,r12,r2
0002f8  e181100c          ORR      r1,r1,r12
0002fc  e1811213          ORR      r1,r1,r3,LSL r2
000300  e5801000          STR      r1,[r0,#0]
;;;159      pwm_f1c100s_enable(pwm);
;;;160      return 0;
000304  e3a00000          MOV      r0,#0
;;;161    }
000308  e8bd8070          POP      {r4-r6,pc}
;;;162    
                          ENDP

                  |L1.780|
                          DCD      0x016e3600
                  |L1.784|
                          DCD      0x1dcd6500
                  |L1.788|
                          DCD      0x3b9aca00
                  |L1.792|
                          DCD      0x0000ffff
                  |L1.796|
                          DCD      ||.constdata||
                  |L1.800|
                          DCD      0x00003fff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  prescaler_table
                          DCD      0x00000078
                          DCD      0x000000b4
                          DCD      0x000000f0
                          DCD      0x00000168
                          DCD      0x000001e0
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00002ee0
                          DCD      0x00005dc0
                          DCD      0x00008ca0
                          DCD      0x0000bb80
                          DCD      0x00011940
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
