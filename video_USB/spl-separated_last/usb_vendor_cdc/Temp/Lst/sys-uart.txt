; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\sys-uart.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\sys-uart.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\sys-uart.crf ..\machine\sys-uart.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sys_uart_init PROC
;;;38     
;;;39     void sys_uart_init(void)
000000  e92d0070          PUSH     {r4-r6}
;;;40     {
;;;41       uint32_t addr;
;;;42       uint32_t val;
;;;43     
;;;44       /* UART管脚配置PA2&PA3 */
;;;45       addr = PIO_REG_BASE + PA_OFFSET + 0x00;
000004  e59f00a8          LDR      r0,|L1.180|
;;;46       val = read32(addr);
;;;47       val &= ~((0x7 << 12) | (0x7 << 8));
;;;48       val |= ((0x5 << 12) | (0x5 << 8));
;;;49       write32(addr, val);
;;;50     
;;;51       /* 打开UART时钟源 */
;;;52       addr = F1C100S_CCU_BASE + CCU_BUS_CLK_GATE2;
000008  e59f30a8          LDR      r3,|L1.184|
00000c  e5901000          LDR      r1,[r0,#0]            ;46
;;;53       val = read32(addr);
;;;54       val |= (1 << 21);
;;;55       write32(addr, val);
;;;56     
;;;57       /* 撤销UART总线复位 */
;;;58       addr = F1C100S_CCU_BASE + CCU_BUS_SOFT_RST2;
;;;59       val = read32(addr);
;;;60       val |= (1 << 21);
;;;61       write32(addr, val);
;;;62     
;;;63       /* 配置UART参数115200-8-1-0 */
;;;64       addr = UART1_REG_BASE;
;;;65       write32(addr + UART_IER_REG, 0x0);
000010  e59fc0a4          LDR      r12,|L1.188|
000014  e3c11c77          BIC      r1,r1,#0x7700         ;47
000018  e3811c55          ORR      r1,r1,#0x5500         ;48
00001c  e2404e53          SUB      r4,r0,#0x530          ;58
000020  e5801000          STR      r1,[r0,#0]            ;49
000024  e5932000          LDR      r2,[r3,#0]            ;53
;;;66       write32(addr + UART_FCR_REG, 0xf7);
000028  e28c5004          ADD      r5,r12,#4
;;;67       write32(addr + UART_MCR_REG, 0x0);
00002c  e2856008          ADD      r6,r5,#8
000030  e3822602          ORR      r2,r2,#0x200000       ;54
000034  e3a01000          MOV      r1,#0                 ;65
;;;68       val = read32(addr + UART_LCR_REG);
;;;69       val |= (1 << 7);
;;;70       write32(addr + UART_LCR_REG, val);
;;;71       write32(addr + UART_DLL_REG, (54 & 0xff));        // APB=100Mhz时div=54
;;;72       write32(addr + UART_DLH_REG, ((54 >> 8) & 0xff));
;;;73       val = read32(addr + UART_LCR_REG);
;;;74       val &= ~(1 << 7);
;;;75       write32(addr + UART_LCR_REG, val);
;;;76       val = read32(addr + UART_LCR_REG);
;;;77       val &= ~0x3f;
;;;78       val |= ((0x3 << 0) | (0 << 2) | (0x0 << 3));
;;;79       write32(addr + UART_LCR_REG, val);
;;;80     }
000038  e0260a40          EOR      r0,r6,r0,ASR #20
00003c  e5832000          STR      r2,[r3,#0]            ;55
000040  e5942000          LDR      r2,[r4,#0]            ;59
000044  e3a030f7          MOV      r3,#0xf7              ;66
000048  e3822602          ORR      r2,r2,#0x200000       ;60
00004c  e5842000          STR      r2,[r4,#0]            ;61
000050  e58c1000          STR      r1,[r12,#0]           ;65
000054  e5853000          STR      r3,[r5,#0]            ;66
000058  e5861000          STR      r1,[r6,#0]            ;67
00005c  e5902000          LDR      r2,[r0,#0]            ;67
000060  e240300c          SUB      r3,r0,#0xc            ;64
000064  e3822080          ORR      r2,r2,#0x80           ;69
000068  e3a04036          MOV      r4,#0x36              ;71
00006c  e5802000          STR      r2,[r0,#0]            ;70
000070  e5834000          STR      r4,[r3,#0]            ;71
000074  e58c1000          STR      r1,[r12,#0]           ;72
000078  e5901000          LDR      r1,[r0,#0]            ;72
00007c  e3c11080          BIC      r1,r1,#0x80           ;74
000080  e5801000          STR      r1,[r0,#0]            ;75
000084  e5901000          LDR      r1,[r0,#0]            ;75
000088  e3c1103f          BIC      r1,r1,#0x3f           ;77
00008c  e3811003          ORR      r1,r1,#3              ;78
000090  e5801000          STR      r1,[r0,#0]            ;79
000094  e8bd0070          POP      {r4-r6}
000098  e12fff1e          BX       lr
;;;81     
                          ENDP

                  sys_uart_putc PROC
;;;82     void sys_uart_putc(char c)
00009c  e59f101c          LDR      r1,|L1.192|
                  |L1.160|
;;;83     {
;;;84       uint32_t addr = UART1_REG_BASE;
0000a0  e591207c          LDR      r2,[r1,#0x7c]
0000a4  e3120002          TST      r2,#2
0000a8  0afffffc          BEQ      |L1.160|
;;;85       // Wait for transmit FIFO Not Full!
;;;86       while ((read32(addr + UART_USR_REG) & (1 << 1)) == 0);
;;;87       write32(addr + UART_THR_REG, c);
0000ac  e5810000          STR      r0,[r1,#0]
;;;88     }
0000b0  e12fff1e          BX       lr
;;;89     
                          ENDP

                  |L1.180|
                          DCD      0x01c20800
                  |L1.184|
                          DCD      0x01c20068
                  |L1.188|
                          DCD      0x01c25404
                  |L1.192|
                          DCD      0x01c25400
