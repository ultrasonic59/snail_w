; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\tusb.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\tusb.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\tusb.crf ..\tinyusb\src\tusb.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tusb_init PROC
;;;45     
;;;46     bool tusb_init(void)
000000  e92d4010          PUSH     {r4,lr}
;;;47     {
;;;48     #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
;;;49       // init device stack CFG_TUSB_RHPORTx_MODE must be defined
;;;50       TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
000004  e3a00000          MOV      r0,#0
000008  ebfffffe          BL       tud_init
00000c  e3500000          CMP      r0,#0
;;;51     #endif
;;;52     
;;;53     #if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
;;;54       // init host stack CFG_TUSB_RHPORTx_MODE must be defined
;;;55       TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
;;;56     #endif
;;;57     
;;;58       return true;
000010  13a00001          MOVNE    r0,#1
;;;59     }
000014  e8bd8010          POP      {r4,pc}
;;;60     
                          ENDP

                  tusb_inited PROC
;;;61     bool tusb_inited(void)
000018  e92d4010          PUSH     {r4,lr}
;;;62     {
;;;63       bool ret = false;
;;;64     
;;;65     #if CFG_TUD_ENABLED
;;;66       ret = ret || tud_inited();
00001c  ebfffffe          BL       tud_inited
000020  e3500000          CMP      r0,#0
000024  13a00001          MOVNE    r0,#1
;;;67     #endif
;;;68     
;;;69     #if CFG_TUH_ENABLED
;;;70       ret = ret || tuh_inited();
;;;71     #endif
;;;72     
;;;73       return ret;
;;;74     }
000028  e8bd8010          POP      {r4,pc}
;;;75     
                          ENDP

                  tu_desc_find PROC
;;;79     
;;;80     uint8_t const * tu_desc_find(uint8_t const* desc, uint8_t const* end, uint8_t byte1)
00002c  e2803001          ADD      r3,r0,#1
;;;81     {
;;;82       while(desc+1 < end)
000030  e1530001          CMP      r3,r1
000034  2a000007          BCS      |L1.88|
                  |L1.56|
;;;83       {
;;;84         if ( desc[1] == byte1 ) return desc;
000038  e5d03001          LDRB     r3,[r0,#1]
00003c  e1530002          CMP      r3,r2
;;;85         desc += desc[DESC_OFFSET_LEN];
;;;86       }
;;;87       return NULL;
;;;88     }
000040  012fff1e          BXEQ     lr
000044  e5d03000          LDRB     r3,[r0,#0]            ;85
000048  e0800003          ADD      r0,r0,r3              ;85
00004c  e2803001          ADD      r3,r0,#1              ;82
000050  e1530001          CMP      r3,r1                 ;82
000054  3afffff7          BCC      |L1.56|
                  |L1.88|
000058  e3a00000          MOV      r0,#0                 ;87
00005c  e12fff1e          BX       lr
;;;89     
                          ENDP

                  tu_desc_find2 PROC
;;;90     uint8_t const * tu_desc_find2(uint8_t const* desc, uint8_t const* end, uint8_t byte1, uint8_t byte2)
000060  e280c002          ADD      r12,r0,#2
;;;91     {
;;;92       while(desc+2 < end)
000064  e15c0001          CMP      r12,r1
000068  2a000009          BCS      |L1.148|
                  |L1.108|
;;;93       {
;;;94         if ( desc[1] == byte1 && desc[2] == byte2) return desc;
00006c  e5d0c001          LDRB     r12,[r0,#1]
000070  e15c0002          CMP      r12,r2
000074  05d0c002          LDRBEQ   r12,[r0,#2]
000078  015c0003          CMPEQ    r12,r3
;;;95         desc += desc[DESC_OFFSET_LEN];
;;;96       }
;;;97       return NULL;
;;;98     }
00007c  012fff1e          BXEQ     lr
000080  e5d0c000          LDRB     r12,[r0,#0]           ;95
000084  e080000c          ADD      r0,r0,r12             ;95
000088  e280c002          ADD      r12,r0,#2             ;92
00008c  e15c0001          CMP      r12,r1                ;92
000090  3afffff5          BCC      |L1.108|
                  |L1.148|
000094  e3a00000          MOV      r0,#0                 ;97
000098  e12fff1e          BX       lr
;;;99     
                          ENDP

                  tu_desc_find3 PROC
;;;100    uint8_t const * tu_desc_find3(uint8_t const* desc, uint8_t const* end, uint8_t byte1, uint8_t byte2, uint8_t byte3)
00009c  e52d4004          PUSH     {r4}
;;;101    {
;;;102      while(desc+3 < end)
0000a0  e59dc004          LDR      r12,[sp,#4]
0000a4  e2804003          ADD      r4,r0,#3
0000a8  e1540001          CMP      r4,r1
0000ac  2a00000c          BCS      |L1.228|
                  |L1.176|
;;;103      {
;;;104        if (desc[1] == byte1 && desc[2] == byte2 && desc[3] == byte3) return desc;
0000b0  e5d04001          LDRB     r4,[r0,#1]
0000b4  e1540002          CMP      r4,r2
0000b8  05d04002          LDRBEQ   r4,[r0,#2]
0000bc  01540003          CMPEQ    r4,r3
0000c0  05d04003          LDRBEQ   r4,[r0,#3]
0000c4  0154000c          CMPEQ    r4,r12
0000c8  049d4004          POPEQ    {r4}
;;;105        desc += desc[DESC_OFFSET_LEN];
;;;106      }
;;;107      return NULL;
;;;108    }
0000cc  012fff1e          BXEQ     lr
0000d0  e5d04000          LDRB     r4,[r0,#0]            ;105
0000d4  e0800004          ADD      r0,r0,r4              ;105
0000d8  e2804003          ADD      r4,r0,#3              ;102
0000dc  e1540001          CMP      r4,r1                 ;102
0000e0  3afffff2          BCC      |L1.176|
                  |L1.228|
0000e4  e49d4004          POP      {r4}                  ;107
0000e8  e3a00000          MOV      r0,#0                 ;107
0000ec  e12fff1e          BX       lr
;;;109    
                          ENDP

                  tu_edpt_claim PROC
;;;114    
;;;115    bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
0000f0  e92d4070          PUSH     {r4-r6,lr}
;;;116    {
0000f4  e1a04000          MOV      r4,r0
;;;117      (void) mutex;
;;;118    
;;;119      // pre-check to help reducing mutex lock
;;;120      TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
0000f8  e5d00000          LDRB     r0,[r0,#0]
0000fc  e1a06001          MOV      r6,r1                 ;116
000100  e3100001          TST      r0,#1
000104  05d40000          LDRBEQ   r0,[r4,#0]
000108  03100004          TSTEQ    r0,#4
00010c  13a00000          MOVNE    r0,#0
;;;121      (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
;;;122    
;;;123      // can only claim the endpoint if it is not busy and not claimed yet.
;;;124      bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
;;;125      if (available)
;;;126      {
;;;127        ep_state->claimed = 1;
;;;128      }
;;;129    
;;;130      (void) osal_mutex_unlock(mutex);
;;;131    
;;;132      return available;
;;;133    }
000110  18bd8070          POPNE    {r4-r6,pc}
000114  e1a00006          MOV      r0,r6                 ;121
000118  e59f15c4          LDR      r1,|L1.1764|
00011c  ebfffffe          BL       os_mut_wait
000120  e5d40000          LDRB     r0,[r4,#0]            ;124
000124  e3100001          TST      r0,#1                 ;124
000128  05d40000          LDRBEQ   r0,[r4,#0]            ;124
00012c  03100004          TSTEQ    r0,#4                 ;124
000130  13a05000          MOVNE    r5,#0                 ;124
000134  0a000003          BEQ      |L1.328|
                  |L1.312|
000138  e1a00006          MOV      r0,r6                 ;130
00013c  ebfffffe          BL       os_mut_release
000140  e1a00005          MOV      r0,r5                 ;132
000144  e8bd8070          POP      {r4-r6,pc}
                  |L1.328|
000148  e5d40000          LDRB     r0,[r4,#0]            ;127
00014c  e3a05001          MOV      r5,#1                 ;124
000150  e3800004          ORR      r0,r0,#4              ;127
000154  e5c40000          STRB     r0,[r4,#0]            ;127
000158  eafffff6          B        |L1.312|
;;;134    
                          ENDP

                  tu_edpt_release PROC
;;;135    bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
00015c  e92d4070          PUSH     {r4-r6,lr}
;;;136    {
000160  e1a06001          MOV      r6,r1
000164  e1a04000          MOV      r4,r0
000168  e59f1574          LDR      r1,|L1.1764|
;;;137      (void) mutex;
;;;138    
;;;139      (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
00016c  e1a00006          MOV      r0,r6
000170  ebfffffe          BL       os_mut_wait
;;;140    
;;;141      // can only release the endpoint if it is claimed and not busy
;;;142      bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
000174  e5d40000          LDRB     r0,[r4,#0]
000178  e3100004          TST      r0,#4
00017c  0a000002          BEQ      |L1.396|
000180  e5d40000          LDRB     r0,[r4,#0]
000184  e3100001          TST      r0,#1
000188  0a000004          BEQ      |L1.416|
                  |L1.396|
00018c  e3a05000          MOV      r5,#0
                  |L1.400|
;;;143      if (ret)
;;;144      {
;;;145        ep_state->claimed = 0;
;;;146      }
;;;147    
;;;148      (void) osal_mutex_unlock(mutex);
000190  e1a00006          MOV      r0,r6
000194  ebfffffe          BL       os_mut_release
;;;149    
;;;150      return ret;
000198  e1a00005          MOV      r0,r5
;;;151    }
00019c  e8bd8070          POP      {r4-r6,pc}
                  |L1.416|
0001a0  e5d40000          LDRB     r0,[r4,#0]            ;145
0001a4  e3a05001          MOV      r5,#1                 ;142
0001a8  e3c00004          BIC      r0,r0,#4              ;145
0001ac  e5c40000          STRB     r0,[r4,#0]            ;145
0001b0  eafffff6          B        |L1.400|
;;;152    
                          ENDP

                  tu_edpt_validate PROC
;;;153    bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
0001b4  e5d02005          LDRB     r2,[r0,#5]
;;;154    {
;;;155      uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
0001b8  e5d03004          LDRB     r3,[r0,#4]
;;;156      TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);
;;;157    
;;;158      switch (desc_ep->bmAttributes.xfer)
0001bc  e5d00003          LDRB     r0,[r0,#3]
0001c0  e1833402          ORR      r3,r3,r2,LSL #8       ;155
0001c4  e2002003          AND      r2,r0,#3
0001c8  e3520001          CMP      r2,#1
0001cc  e3c30b3e          BIC      r0,r3,#0xf800         ;155
0001d0  0a000004          BEQ      |L1.488|
0001d4  e3520002          CMP      r2,#2
0001d8  0a000008          BEQ      |L1.512|
0001dc  e3520003          CMP      r2,#3
0001e0  0a00000f          BEQ      |L1.548|
0001e4  ea00000c          B        |L1.540|
                  |L1.488|
;;;159      {
;;;160        case TUSB_XFER_ISOCHRONOUS:
;;;161        {
;;;162          uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
0001e8  e3510002          CMP      r1,#2
0001ec  159f14f4          LDRNE    r1,|L1.1768|
0001f0  03a01b01          MOVEQ    r1,#0x400
;;;163          TU_ASSERT(max_packet_size <= spec_size);
0001f4  e1500001          CMP      r0,r1
0001f8  8a000007          BHI      |L1.540|
0001fc  ea00000d          B        |L1.568|
                  |L1.512|
;;;164        }
;;;165        break;
;;;166    
;;;167        case TUSB_XFER_BULK:
;;;168          if (speed == TUSB_SPEED_HIGH)
000200  e3510002          CMP      r1,#2
000204  0a000002          BEQ      |L1.532|
;;;169          {
;;;170            // Bulk highspeed must be EXACTLY 512
;;;171            TU_ASSERT(max_packet_size == 512);
;;;172          }else
;;;173          {
;;;174            // TODO Bulk fullspeed can only be 8, 16, 32, 64
;;;175            TU_ASSERT(max_packet_size <= 64);
000208  e3500040          CMP      r0,#0x40
00020c  9a000009          BLS      |L1.568|
000210  ea000001          B        |L1.540|
                  |L1.532|
000214  e3500c02          CMP      r0,#0x200             ;171
000218  0a000006          BEQ      |L1.568|
                  |L1.540|
;;;176          }
;;;177        break;
;;;178    
;;;179        case TUSB_XFER_INTERRUPT:
;;;180        {
;;;181          uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
;;;182          TU_ASSERT(max_packet_size <= spec_size);
;;;183        }
;;;184        break;
;;;185    
;;;186        default: return false;
00021c  e3a00000          MOV      r0,#0
;;;187      }
;;;188    
;;;189      return true;
;;;190    }
000220  e12fff1e          BX       lr
                  |L1.548|
000224  e3510002          CMP      r1,#2                 ;181
000228  13a01040          MOVNE    r1,#0x40              ;181
00022c  03a01b01          MOVEQ    r1,#0x400             ;181
000230  e1500001          CMP      r0,r1                 ;182
000234  8afffff8          BHI      |L1.540|
                  |L1.568|
000238  e3a00001          MOV      r0,#1                 ;189
00023c  e12fff1e          BX       lr
;;;191    
                          ENDP

                  tu_edpt_bind_driver PROC
;;;192    void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
000240  e0822001          ADD      r2,r2,r1
;;;193    {
;;;194      uint8_t const* p_desc = (uint8_t const*) desc_itf;
;;;195      uint8_t const* desc_end = p_desc + desc_len;
;;;196    
;;;197      while( p_desc < desc_end )
000244  e1510002          CMP      r1,r2
000248  e52d4004          PUSH     {r4}                  ;193
;;;198      {
;;;199        if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
;;;200        {
;;;201          uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
;;;202    
;;;203          TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
;;;204          ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
;;;205        }
;;;206    
;;;207        p_desc = tu_desc_next(p_desc);
;;;208      }
;;;209    }
00024c  249d4004          POPCS    {r4}
000250  212fff1e          BXCS     lr
                  |L1.596|
000254  e5d1c001          LDRB     r12,[r1,#1]           ;199
000258  e35c0005          CMP      r12,#5                ;199
00025c  1a000003          BNE      |L1.624|
000260  e5d1c002          LDRB     r12,[r1,#2]           ;201
000264  e3cc4080          BIC      r4,r12,#0x80          ;204
000268  e0804084          ADD      r4,r0,r4,LSL #1       ;204
00026c  e7c433ac          STRB     r3,[r4,r12,LSR #7]    ;204
                  |L1.624|
000270  e5d1c000          LDRB     r12,[r1,#0]           ;204
000274  e081100c          ADD      r1,r1,r12             ;204
000278  e1510002          CMP      r1,r2                 ;197
00027c  3afffff4          BCC      |L1.596|
000280  e49d4004          POP      {r4}
000284  e12fff1e          BX       lr
;;;210    
                          ENDP

                  tu_desc_get_interface_total_len PROC
;;;211    uint16_t tu_desc_get_interface_total_len(tusb_desc_interface_t const* desc_itf, uint8_t itf_count, uint16_t max_len)
000288  e2513001          SUBS     r3,r1,#1
;;;212    {
00028c  e52d4004          PUSH     {r4}
;;;213      uint8_t const* p_desc = (uint8_t const*) desc_itf;
;;;214      uint16_t len = 0;
;;;215    
;;;216      while (itf_count--)
;;;217      {
;;;218        // Next on interface desc
;;;219        len += tu_desc_len(desc_itf);
000290  25d04000          LDRBCS   r4,[r0,#0]
000294  e203c0ff          AND      r12,r3,#0xff          ;216
000298  e3a01000          MOV      r1,#0                 ;214
00029c  3a000015          BCC      |L1.760|
                  |L1.672|
0002a0  e5d03000          LDRB     r3,[r0,#0]            ;212
0002a4  e0811004          ADD      r1,r1,r4
0002a8  e3c11801          BIC      r1,r1,#0x10000
;;;220        p_desc = tu_desc_next(p_desc);
;;;221    
;;;222        while (len < max_len)
0002ac  e1510002          CMP      r1,r2
0002b0  e0800003          ADD      r0,r0,r3
0002b4  2a00000c          BCS      |L1.748|
                  |L1.696|
;;;223        {
;;;224          // return on IAD regardless of itf count
;;;225          if ( tu_desc_type(p_desc) == TUSB_DESC_INTERFACE_ASSOCIATION ) return len;
0002b8  e5d03001          LDRB     r3,[r0,#1]
0002bc  e353000b          CMP      r3,#0xb
0002c0  0a00000c          BEQ      |L1.760|
;;;226    
;;;227          if ( (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) &&
0002c4  e3530004          CMP      r3,#4
;;;228               ((tusb_desc_interface_t const*) p_desc)->bAlternateSetting == 0 )
0002c8  05d03003          LDRBEQ   r3,[r0,#3]
0002cc  03530000          CMPEQ    r3,#0
0002d0  0a000005          BEQ      |L1.748|
;;;229          {
;;;230            break;
;;;231          }
;;;232    
;;;233          len += tu_desc_len(p_desc);
0002d4  e5d03000          LDRB     r3,[r0,#0]
0002d8  e0811003          ADD      r1,r1,r3
0002dc  e3c11801          BIC      r1,r1,#0x10000
0002e0  e1510002          CMP      r1,r2                 ;222
0002e4  e0800003          ADD      r0,r0,r3              ;222
0002e8  3afffff2          BCC      |L1.696|
                  |L1.748|
0002ec  e25c3001          SUBS     r3,r12,#1             ;216
0002f0  e203c0ff          AND      r12,r3,#0xff          ;216
0002f4  2affffe9          BCS      |L1.672|
                  |L1.760|
;;;234          p_desc = tu_desc_next(p_desc);
;;;235        }
;;;236      }
;;;237    
;;;238      return len;
0002f8  e49d4004          POP      {r4}
0002fc  e1a00001          MOV      r0,r1
;;;239    }
000300  e12fff1e          BX       lr
;;;240    
                          ENDP

                  tu_edpt_stream_init PROC
;;;244    
;;;245    bool tu_edpt_stream_init(tu_edpt_stream_t* s, bool is_host, bool is_tx, bool overwritable,
000304  e92d4ff8          PUSH     {r3-r11,lr}
;;;246                             void* ff_buf, uint16_t ff_bufsize, uint8_t* ep_buf, uint16_t ep_bufsize)
;;;247    {
000308  e1a05000          MOV      r5,r0
;;;248      osal_mutex_t new_mutex = osal_mutex_create(&s->ff_mutex);
00030c  e2804020          ADD      r4,r0,#0x20
000310  e59d9034          LDR      r9,[sp,#0x34]
000314  e59da030          LDR      r10,[sp,#0x30]
000318  e59db02c          LDR      r11,[sp,#0x2c]
00031c  e1a06003          MOV      r6,r3                 ;247
000320  e1a07002          MOV      r7,r2                 ;247
000324  e1a08001          MOV      r8,r1                 ;247
000328  e1a00004          MOV      r0,r4                 ;247
00032c  ebfffffe          BL       os_mut_init
;;;249      (void) new_mutex;
;;;250      (void) is_tx;
;;;251    
;;;252      s->is_host = is_host;
000330  e5c58000          STRB     r8,[r5,#0]
;;;253      tu_fifo_config(&s->ff, ff_buf, ff_bufsize, 1, overwritable);
000334  e58d6000          STR      r6,[sp,#0]
000338  e59d1028          LDR      r1,[sp,#0x28]
00033c  e3a03001          MOV      r3,#1
000340  e1a0200b          MOV      r2,r11
000344  e285000c          ADD      r0,r5,#0xc
000348  ebfffffe          BL       tu_fifo_config
;;;254      tu_fifo_config_mutex(&s->ff, is_tx ? new_mutex : NULL, is_tx ? NULL : new_mutex);
00034c  e3570000          CMP      r7,#0
000350  13a00000          MOVNE    r0,#0
000354  01a00004          MOVEQ    r0,r4
;;;255    
;;;256      s->ep_buf = ep_buf;
000358  e585001c          STR      r0,[r5,#0x1c]
00035c  11a01004          MOVNE    r1,r4                 ;254
000360  03a01000          MOVEQ    r1,#0                 ;254
000364  e5851018          STR      r1,[r5,#0x18]
000368  e585a008          STR      r10,[r5,#8]
;;;257      s->ep_bufsize = ep_bufsize;
;;;258    
;;;259      return true;
00036c  e3a00001          MOV      r0,#1
000370  e1c590b6          STRH     r9,[r5,#6]            ;257
;;;260    }
000374  e8bd8ff8          POP      {r3-r11,pc}
;;;261    
                          ENDP

                  tu_edpt_stream_write_zlp_if_needed PROC
;;;319    
;;;320    bool tu_edpt_stream_write_zlp_if_needed(tu_edpt_stream_t* s, uint32_t last_xferred_bytes)
000378  e92d4070          PUSH     {r4-r6,lr}
;;;321    {
00037c  e1a04000          MOV      r4,r0
000380  e1a05001          MOV      r5,r1
;;;322      // ZLP condition: no pending data, last transferred bytes is multiple of packet size
;;;323      TU_VERIFY( !tu_fifo_count(&s->ff) && last_xferred_bytes && (0 == (last_xferred_bytes & (s->ep_packetsize-1))) );
000384  e280000c          ADD      r0,r0,#0xc
000388  ebfffffe          BL       tu_fifo_count
00038c  e3500000          CMP      r0,#0
000390  1a000017          BNE      |L1.1012|
000394  e3550000          CMP      r5,#0
000398  0a000015          BEQ      |L1.1012|
00039c  e1d400b4          LDRH     r0,[r4,#4]
0003a0  e2400001          SUB      r0,r0,#1
0003a4  e1100005          TST      r0,r5
0003a8  05d40000          LDRBEQ   r0,[r4,#0]
0003ac  03500000          CMPEQ    r0,#0
0003b0  1a00000f          BNE      |L1.1012|
0003b4  e5d41002          LDRB     r1,[r4,#2]
0003b8  e5d40001          LDRB     r0,[r4,#1]
0003bc  ebfffffe          BL       usbd_edpt_claim
;;;324    
;;;325      TU_VERIFY( stream_claim(s) );
0003c0  e3500000          CMP      r0,#0
0003c4  0a00000a          BEQ      |L1.1012|
0003c8  e5d40000          LDRB     r0,[r4,#0]
0003cc  e3500000          CMP      r0,#0
0003d0  1a000007          BNE      |L1.1012|
0003d4  e3a03000          MOV      r3,#0
0003d8  e5d41002          LDRB     r1,[r4,#2]
0003dc  e5d40001          LDRB     r0,[r4,#1]
0003e0  e1a02003          MOV      r2,r3
0003e4  ebfffffe          BL       usbd_edpt_xfer
;;;326      TU_ASSERT( stream_xfer(s, 0) );
0003e8  e3500000          CMP      r0,#0
;;;327    
;;;328      return true;
0003ec  13a00001          MOVNE    r0,#1
;;;329    }
0003f0  18bd8070          POPNE    {r4-r6,pc}
                  |L1.1012|
0003f4  e3a00000          MOV      r0,#0                 ;326
0003f8  e8bd8070          POP      {r4-r6,pc}
;;;330    
                          ENDP

                  tu_edpt_stream_write_xfer PROC
;;;331    uint32_t tu_edpt_stream_write_xfer(tu_edpt_stream_t* s)
0003fc  e92d4070          PUSH     {r4-r6,lr}
;;;332    {
000400  e1a04000          MOV      r4,r0
;;;333      // skip if no data
;;;334      TU_VERIFY( tu_fifo_count(&s->ff), 0 );
000404  e280000c          ADD      r0,r0,#0xc
000408  ebfffffe          BL       tu_fifo_count
00040c  e3500000          CMP      r0,#0
;;;335    
;;;336      // Claim the endpoint
;;;337      TU_VERIFY( stream_claim(s), 0 );
;;;338    
;;;339      // Pull data from FIFO -> EP buf
;;;340      uint16_t const count = tu_fifo_read_n(&s->ff, s->ep_buf, s->ep_bufsize);
;;;341    
;;;342      if ( count )
;;;343      {
;;;344        TU_ASSERT( stream_xfer(s, count), 0 );
;;;345        return count;
;;;346      }else
;;;347      {
;;;348        // Release endpoint since we don't make any transfer
;;;349        // Note: data is dropped if terminal is not connected
;;;350        stream_release(s);
;;;351        return 0;
;;;352      }
;;;353    }
000410  08bd8070          POPEQ    {r4-r6,pc}
000414  e5d40000          LDRB     r0,[r4,#0]
000418  e3500000          CMP      r0,#0
00041c  1a00001b          BNE      |L1.1168|
000420  e5d41002          LDRB     r1,[r4,#2]
000424  e5d40001          LDRB     r0,[r4,#1]
000428  ebfffffe          BL       usbd_edpt_claim
00042c  e3500000          CMP      r0,#0                 ;337
000430  0a000016          BEQ      |L1.1168|
000434  e1d420b6          LDRH     r2,[r4,#6]            ;340
000438  e5941008          LDR      r1,[r4,#8]            ;340
00043c  e284000c          ADD      r0,r4,#0xc            ;340
000440  ebfffffe          BL       tu_fifo_read_n
000444  e1b05000          MOVS     r5,r0                 ;340
000448  e5d40000          LDRB     r0,[r4,#0]            ;340
00044c  0a00000a          BEQ      |L1.1148|
000450  e3500000          CMP      r0,#0                 ;342
000454  e1a03005          MOV      r3,r5                 ;344
000458  1a00000c          BNE      |L1.1168|
00045c  e5942008          LDR      r2,[r4,#8]            ;344
000460  e5d41002          LDRB     r1,[r4,#2]            ;344
000464  e5d40001          LDRB     r0,[r4,#1]            ;344
000468  ebfffffe          BL       usbd_edpt_xfer
00046c  e3500000          CMP      r0,#0                 ;344
000470  11a00005          MOVNE    r0,r5                 ;345
000474  18bd8070          POPNE    {r4-r6,pc}
000478  ea000004          B        |L1.1168|
                  |L1.1148|
00047c  e3500000          CMP      r0,#0
000480  1a000002          BNE      |L1.1168|
000484  e5d41002          LDRB     r1,[r4,#2]            ;350
000488  e5d40001          LDRB     r0,[r4,#1]            ;350
00048c  ebfffffe          BL       usbd_edpt_release
                  |L1.1168|
000490  e3a00000          MOV      r0,#0                 ;351
000494  e8bd8070          POP      {r4-r6,pc}
;;;354    
                          ENDP

                  tu_edpt_stream_write PROC
;;;355    uint32_t tu_edpt_stream_write(tu_edpt_stream_t* s, void const *buffer, uint32_t bufsize)
000498  e3520000          CMP      r2,#0
;;;356    {
;;;357      TU_VERIFY(bufsize); // TODO support ZLP
00049c  03a00000          MOVEQ    r0,#0
;;;358    
;;;359      uint16_t ret = tu_fifo_write_n(&s->ff, buffer, (uint16_t) bufsize);
;;;360    
;;;361      // flush if fifo has more than packet size or
;;;362      // in rare case: fifo depth is configured too small (which never reach packet size)
;;;363      if ( (tu_fifo_count(&s->ff) >= s->ep_packetsize) || (tu_fifo_depth(&s->ff) < s->ep_packetsize) )
;;;364      {
;;;365        tu_edpt_stream_write_xfer(s);
;;;366      }
;;;367    
;;;368      return ret;
;;;369    }
0004a0  012fff1e          BXEQ     lr
0004a4  e92d4070          PUSH     {r4-r6,lr}            ;356
0004a8  e1a04000          MOV      r4,r0                 ;356
0004ac  e1a02802          LSL      r2,r2,#16             ;359
0004b0  e1a02822          LSR      r2,r2,#16             ;359
0004b4  e280000c          ADD      r0,r0,#0xc            ;359
0004b8  ebfffffe          BL       tu_fifo_write_n
0004bc  e1a05000          MOV      r5,r0                 ;359
0004c0  e284000c          ADD      r0,r4,#0xc            ;363
0004c4  ebfffffe          BL       tu_fifo_count
0004c8  e1a01000          MOV      r1,r0                 ;363
0004cc  e1d400b4          LDRH     r0,[r4,#4]            ;363
0004d0  e1510000          CMP      r1,r0                 ;363
0004d4  2a000002          BCS      |L1.1252|
0004d8  e1d411b0          LDRH     r1,[r4,#0x10]         ;363
0004dc  e1510000          CMP      r1,r0                 ;363
0004e0  2a000020          BCS      |L1.1384|
                  |L1.1252|
0004e4  e284000c          ADD      r0,r4,#0xc            ;363
0004e8  ebfffffe          BL       tu_fifo_count
0004ec  e3500000          CMP      r0,#0                 ;363
0004f0  0a00001c          BEQ      |L1.1384|
0004f4  e5d40000          LDRB     r0,[r4,#0]            ;363
0004f8  e3500000          CMP      r0,#0                 ;363
0004fc  1a000019          BNE      |L1.1384|
000500  e5d41002          LDRB     r1,[r4,#2]            ;363
000504  e5d40001          LDRB     r0,[r4,#1]            ;363
000508  ebfffffe          BL       usbd_edpt_claim
00050c  e3500000          CMP      r0,#0                 ;363
000510  0a000014          BEQ      |L1.1384|
000514  e1d420b6          LDRH     r2,[r4,#6]            ;363
000518  e5941008          LDR      r1,[r4,#8]            ;363
00051c  e284000c          ADD      r0,r4,#0xc            ;363
000520  ebfffffe          BL       tu_fifo_read_n
000524  e3500000          CMP      r0,#0                 ;363
000528  0a000008          BEQ      |L1.1360|
00052c  e5d41000          LDRB     r1,[r4,#0]            ;363
000530  e1a03000          MOV      r3,r0                 ;363
000534  e3510000          CMP      r1,#0                 ;363
000538  1a00000a          BNE      |L1.1384|
00053c  e5942008          LDR      r2,[r4,#8]            ;363
000540  e5d41002          LDRB     r1,[r4,#2]            ;363
000544  e5d40001          LDRB     r0,[r4,#1]            ;363
000548  ebfffffe          BL       usbd_edpt_xfer
00054c  ea000005          B        |L1.1384|
                  |L1.1360|
000550  e5d40000          LDRB     r0,[r4,#0]            ;363
000554  e3500000          CMP      r0,#0                 ;363
000558  1a000002          BNE      |L1.1384|
00055c  e5d41002          LDRB     r1,[r4,#2]            ;363
000560  e5d40001          LDRB     r0,[r4,#1]            ;363
000564  ebfffffe          BL       usbd_edpt_release
                  |L1.1384|
000568  e1a00005          MOV      r0,r5                 ;368
00056c  e8bd8070          POP      {r4-r6,pc}
;;;370    
                          ENDP

                  tu_edpt_stream_read_xfer PROC
;;;374    
;;;375    uint32_t tu_edpt_stream_read_xfer(tu_edpt_stream_t* s)
000570  e92d4070          PUSH     {r4-r6,lr}
;;;376    {
000574  e1a04000          MOV      r4,r0
;;;377      uint16_t available = tu_fifo_remaining(&s->ff);
000578  e280000c          ADD      r0,r0,#0xc
00057c  ebfffffe          BL       tu_fifo_remaining
;;;378    
;;;379      // Prepare for incoming data but only allow what we can store in the ring buffer.
;;;380      // TODO Actually we can still carry out the transfer, keeping count of received bytes
;;;381      // and slowly move it to the FIFO when read().
;;;382      // This pre-check reduces endpoint claiming
;;;383      TU_VERIFY(available >= s->ep_packetsize);
000580  e1d410b4          LDRH     r1,[r4,#4]
000584  e1510000          CMP      r1,r0
000588  95d40000          LDRBLS   r0,[r4,#0]
00058c  93500000          CMPLS    r0,#0
000590  1a000022          BNE      |L1.1568|
000594  e5d41002          LDRB     r1,[r4,#2]
000598  e5d40001          LDRB     r0,[r4,#1]
00059c  ebfffffe          BL       usbd_edpt_claim
;;;384    
;;;385      // claim endpoint
;;;386      TU_VERIFY(stream_claim(s), 0);
0005a0  e3500000          CMP      r0,#0
0005a4  0a00001d          BEQ      |L1.1568|
;;;387    
;;;388      // get available again since fifo can be changed before endpoint is claimed
;;;389      available = tu_fifo_remaining(&s->ff);
0005a8  e284000c          ADD      r0,r4,#0xc
0005ac  ebfffffe          BL       tu_fifo_remaining
;;;390    
;;;391      if ( available >= s->ep_packetsize )
0005b0  e1d410b4          LDRH     r1,[r4,#4]
0005b4  e1510000          CMP      r1,r0
0005b8  8a000012          BHI      |L1.1544|
;;;392      {
;;;393        // multiple of packet size limit by ep bufsize
;;;394        uint16_t count = (uint16_t) (available & ~(s->ep_packetsize -1));
;;;395        count = tu_min16(count, s->ep_bufsize);
0005bc  e1d450b6          LDRH     r5,[r4,#6]
0005c0  e2411001          SUB      r1,r1,#1
0005c4  e1c00001          BIC      r0,r0,r1              ;394
0005c8  e1500005          CMP      r0,r5
0005cc  31a05000          MOVCC    r5,r0
0005d0  e5d40000          LDRB     r0,[r4,#0]
;;;396    
;;;397        TU_ASSERT( stream_xfer(s, count), 0 );
0005d4  e1a03005          MOV      r3,r5
0005d8  e3500000          CMP      r0,#0
0005dc  1a00000f          BNE      |L1.1568|
0005e0  e3530000          CMP      r3,#0                 ;395
0005e4  15942008          LDRNE    r2,[r4,#8]            ;395
0005e8  e5d41002          LDRB     r1,[r4,#2]            ;395
0005ec  e5d40001          LDRB     r0,[r4,#1]            ;395
0005f0  03a02000          MOVEQ    r2,#0                 ;395
0005f4  ebfffffe          BL       usbd_edpt_xfer
0005f8  e3500000          CMP      r0,#0
;;;398    
;;;399        return count;
0005fc  11a00005          MOVNE    r0,r5
;;;400      }else
;;;401      {
;;;402        // Release endpoint since we don't make any transfer
;;;403        stream_release(s);
;;;404        return 0;
;;;405      }
;;;406    }
000600  18bd8070          POPNE    {r4-r6,pc}
000604  ea000005          B        |L1.1568|
                  |L1.1544|
000608  e5d40000          LDRB     r0,[r4,#0]
00060c  e3500000          CMP      r0,#0
000610  1a000002          BNE      |L1.1568|
000614  e5d41002          LDRB     r1,[r4,#2]            ;403
000618  e5d40001          LDRB     r0,[r4,#1]            ;403
00061c  ebfffffe          BL       usbd_edpt_release
                  |L1.1568|
000620  e3a00000          MOV      r0,#0                 ;404
000624  e8bd8070          POP      {r4-r6,pc}
;;;407    
                          ENDP

                  tu_edpt_stream_read PROC
;;;408    uint32_t tu_edpt_stream_read(tu_edpt_stream_t* s, void* buffer, uint32_t bufsize)
000628  e92d4070          PUSH     {r4-r6,lr}
;;;409    {
00062c  e1a04000          MOV      r4,r0
;;;410      uint32_t num_read = tu_fifo_read_n(&s->ff, buffer, (uint16_t) bufsize);
000630  e1a02802          LSL      r2,r2,#16
000634  e1a02822          LSR      r2,r2,#16
000638  e280000c          ADD      r0,r0,#0xc
00063c  ebfffffe          BL       tu_fifo_read_n
000640  e1a05000          MOV      r5,r0
000644  e284000c          ADD      r0,r4,#0xc
000648  ebfffffe          BL       tu_fifo_remaining
00064c  e1d410b4          LDRH     r1,[r4,#4]
000650  e1510000          CMP      r1,r0
000654  95d40000          LDRBLS   r0,[r4,#0]
000658  93500000          CMPLS    r0,#0
00065c  1a00001e          BNE      |L1.1756|
000660  e5d41002          LDRB     r1,[r4,#2]
000664  e5d40001          LDRB     r0,[r4,#1]
000668  ebfffffe          BL       usbd_edpt_claim
00066c  e3500000          CMP      r0,#0
000670  0a000019          BEQ      |L1.1756|
000674  e284000c          ADD      r0,r4,#0xc
000678  ebfffffe          BL       tu_fifo_remaining
00067c  e1d410b4          LDRH     r1,[r4,#4]
000680  e1510000          CMP      r1,r0
000684  8a00000e          BHI      |L1.1732|
000688  e1d430b6          LDRH     r3,[r4,#6]
00068c  e2411001          SUB      r1,r1,#1
000690  e1c00001          BIC      r0,r0,r1
000694  e1500003          CMP      r0,r3
000698  31a03000          MOVCC    r3,r0
00069c  e5d40000          LDRB     r0,[r4,#0]
0006a0  e3500000          CMP      r0,#0
0006a4  1a00000c          BNE      |L1.1756|
0006a8  e3530000          CMP      r3,#0
0006ac  15942008          LDRNE    r2,[r4,#8]
0006b0  e5d41002          LDRB     r1,[r4,#2]
0006b4  e5d40001          LDRB     r0,[r4,#1]
0006b8  03a02000          MOVEQ    r2,#0
0006bc  ebfffffe          BL       usbd_edpt_xfer
0006c0  ea000005          B        |L1.1756|
                  |L1.1732|
0006c4  e5d40000          LDRB     r0,[r4,#0]
0006c8  e3500000          CMP      r0,#0
0006cc  1a000002          BNE      |L1.1756|
0006d0  e5d41002          LDRB     r1,[r4,#2]
0006d4  e5d40001          LDRB     r0,[r4,#1]
0006d8  ebfffffe          BL       usbd_edpt_release
                  |L1.1756|
;;;411      tu_edpt_stream_read_xfer(s);
;;;412      return num_read;
0006dc  e1a00005          MOV      r0,r5
;;;413    }
0006e0  e8bd8070          POP      {r4-r6,pc}
;;;414    
                          ENDP

                  |L1.1764|
                          DCD      0x0000ffff
                  |L1.1768|
                          DCD      0x000003ff
