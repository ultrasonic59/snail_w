; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\pwm-f1c100s.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\pwm-f1c100s.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\pwm-f1c100s.crf ..\periph\pwm-f1c100s.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  pwm_f1c100s_config PROC
;;;51     
;;;52     void pwm_f1c100s_config(pwm_t* pwm, int32_t duty, int32_t period, int32_t polarity)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;53     {
000004  e24dd014          SUB      sp,sp,#0x14
000008  e1a04000          MOV      r4,r0
00000c  e1a09001          MOV      r9,r1
000010  e1a07002          MOV      r7,r2
000014  e59f041c          LDR      r0,|L1.1080|
000018  e3a01000          MOV      r1,#0
;;;54       uint64_t rate = 24000000;//hosc =24MHz //clk_get_rate(pwm->clk);
00001c  e1cd00f8          STRD     r0,r1,[sp,#8]
;;;55       uint64_t div;
;;;56       uint32_t prd, dty, gate;
;;;57       uint32_t prescaler = 0;
000020  e3a0a000          MOV      r10,#0
;;;58       uint32_t ctrl;
;;;59     
;;;60       //if(pwm->duty != duty || pwm->period != period)
;;;61       {
;;;62         prescaler = 0xf;
000024  e3a0a00f          MOV      r10,#0xf
;;;63         div = rate * period + 1000000000 / 2;
000028  e1a03fc7          ASR      r3,r7,#31
00002c  e59d1008          LDR      r1,[sp,#8]
000030  e08c2791          UMULL    r2,r12,r1,r7
000034  e59d000c          LDR      r0,[sp,#0xc]
000038  e020c097          MLA      r0,r7,r0,r12
00003c  e0230391          MLA      r3,r1,r3,r0
000040  e59f13f4          LDR      r1,|L1.1084|
000044  e0925001          ADDS     r5,r2,r1
000048  e2a36000          ADC      r6,r3,#0
00004c  e1a02081          LSL      r2,r1,#1
000050  e3a03000          MOV      r3,#0
;;;64         div = div / 1000000000;
000054  e1a00005          MOV      r0,r5
000058  e1a01006          MOV      r1,r6
00005c  ebfffffe          BL       __aeabi_uldivmod
000060  e1a05000          MOV      r5,r0
000064  e1a06001          MOV      r6,r1
000068  e2551001          SUBS     r1,r5,#1
00006c  e2c63000          SBC      r3,r6,#0
000070  e59f03c8          LDR      r0,|L1.1088|
000074  e0500001          SUBS     r0,r0,r1
000078  e2f30000          RSCS     r0,r3,#0
;;;65         if (div - 1 > 0xffff)
00007c  2a000000          BCS      |L1.132|
;;;66           prescaler = 0;
000080  e3a0a000          MOV      r10,#0
                  |L1.132|
;;;67     
;;;68         if (prescaler == 0) {
000084  e35a0000          CMP      r10,#0
000088  1a000032          BNE      |L1.344|
;;;69           for (prescaler = 0; prescaler < 0xf; prescaler++) {
00008c  e3a0a000          MOV      r10,#0
000090  ea000025          B        |L1.300|
                  |L1.148|
;;;70             if (!prescaler_table[prescaler])
000094  e59f03a8          LDR      r0,|L1.1092|
000098  e790010a          LDR      r0,[r0,r10,LSL #2]
00009c  e3500000          CMP      r0,#0
0000a0  1a000000          BNE      |L1.168|
;;;71               continue;
0000a4  ea00001f          B        |L1.296|
                  |L1.168|
;;;72             div = rate;
0000a8  e59d5008          LDR      r5,[sp,#8]
0000ac  e59d600c          LDR      r6,[sp,#0xc]
;;;73             div = div / prescaler_table[prescaler];
0000b0  e59f038c          LDR      r0,|L1.1092|
0000b4  e790c10a          LDR      r12,[r0,r10,LSL #2]
0000b8  e1a0200c          MOV      r2,r12
0000bc  e3a03000          MOV      r3,#0
0000c0  e1a00005          MOV      r0,r5
0000c4  e1a01006          MOV      r1,r6
0000c8  ebfffffe          BL       __aeabi_uldivmod
0000cc  e1a05000          MOV      r5,r0
0000d0  e1a06001          MOV      r6,r1
;;;74             div = div * period;
0000d4  e1a00fc7          ASR      r0,r7,#31
0000d8  e1a01005          MOV      r1,r5
0000dc  e08c3791          UMULL    r3,r12,r1,r7
0000e0  e022c796          MLA      r2,r6,r7,r12
0000e4  e0262095          MLA      r6,r5,r0,r2
0000e8  e1a05003          MOV      r5,r3
0000ec  e59f2354          LDR      r2,|L1.1096|
0000f0  e3a03000          MOV      r3,#0
;;;75             div = div / 1000000000;
0000f4  e1a00005          MOV      r0,r5
0000f8  e1a01006          MOV      r1,r6
0000fc  ebfffffe          BL       __aeabi_uldivmod
000100  e1a05000          MOV      r5,r0
000104  e1a06001          MOV      r6,r1
000108  e2551001          SUBS     r1,r5,#1
00010c  e2c60000          SBC      r0,r6,#0
000110  e59f2328          LDR      r2,|L1.1088|
000114  e0521001          SUBS     r1,r2,r1
000118  e2f00000          RSCS     r0,r0,#0
;;;76             if (div - 1 <= 0xffff)
00011c  3a000000          BCC      |L1.292|
;;;77               break;
000120  ea000003          B        |L1.308|
                  |L1.292|
000124  e1a00000          MOV      r0,r0                 ;71
                  |L1.296|
000128  e28aa001          ADD      r10,r10,#1            ;69
                  |L1.300|
00012c  e35a000f          CMP      r10,#0xf              ;69
000130  3affffd7          BCC      |L1.148|
                  |L1.308|
000134  e1a00000          MOV      r0,r0
000138  e2551001          SUBS     r1,r5,#1
00013c  e2c60000          SBC      r0,r6,#0
000140  e59f22f8          LDR      r2,|L1.1088|
000144  e0521001          SUBS     r1,r2,r1
000148  e2f00000          RSCS     r0,r0,#0
;;;78           }
;;;79     
;;;80           if (div - 1 > 0xffff) {
00014c  2a000001          BCS      |L1.344|
                  |L1.336|
;;;81             return;
;;;82           }
;;;83         }
;;;84     
;;;85         prd = div;
;;;86         div *= duty;
;;;87         div = div / 100;//div / period;
;;;88         dty = div;
;;;89     
;;;90         gate = (read32(pwm->virt + PWM_CTRL) & PWM_BIT(pwm->channel, 6)) ? 1 : 0;
;;;91         if (gate) {
;;;92           ctrl = read32(pwm->virt + PWM_CTRL);
;;;93           ctrl &= ~PWM_BIT(pwm->channel, 6);
;;;94           write32(pwm->virt + PWM_CTRL, ctrl);
;;;95         }
;;;96         ctrl = read32(pwm->virt + PWM_CTRL);
;;;97         ctrl &= ~(0xf << (pwm->channel * 15));
;;;98         ctrl |= (prescaler << (pwm->channel * 15));
;;;99         write32(pwm->virt + PWM_CTRL, ctrl);
;;;100        write32(pwm->virt + PWM_PERIOD(pwm->channel), ((prd - 1) << 16) | (dty & 0xffff));
;;;101        if (gate) {
;;;102          ctrl = read32(pwm->virt + PWM_CTRL);
;;;103          ctrl |= PWM_BIT(pwm->channel, 6);
;;;104          write32(pwm->virt + PWM_CTRL, ctrl);
;;;105        }
;;;106        pwm->duty = duty;
;;;107        pwm->period = period;
;;;108      }
;;;109    
;;;110      //if(pwm->polarity != polarity)
;;;111      {
;;;112        ctrl = read32(pwm->virt + PWM_CTRL);
;;;113        if (polarity)
;;;114          ctrl |= PWM_BIT(pwm->channel, 5);
;;;115        else
;;;116          ctrl &= ~PWM_BIT(pwm->channel, 5);
;;;117        write32(pwm->virt + PWM_CTRL, ctrl);
;;;118    
;;;119        pwm->polarity = polarity;
;;;120      }
;;;121    }
000150  e28dd024          ADD      sp,sp,#0x24
000154  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.344|
000158  e1a0b005          MOV      r11,r5                ;85
00015c  e1a00fc9          ASR      r0,r9,#31             ;86
000160  e1a0b005          MOV      r11,r5                ;86
000164  e083299b          UMULL    r2,r3,r11,r9          ;86
000168  e0213996          MLA      r1,r6,r9,r3           ;86
00016c  e0261095          MLA      r6,r5,r0,r1           ;86
000170  e1a05002          MOV      r5,r2                 ;86
000174  e3a02064          MOV      r2,#0x64              ;86
000178  e3a03000          MOV      r3,#0                 ;86
00017c  e1a00005          MOV      r0,r5                 ;87
000180  e1a01006          MOV      r1,r6                 ;87
000184  ebfffffe          BL       __aeabi_uldivmod
000188  e1a05000          MOV      r5,r0                 ;87
00018c  e58d5004          STR      r5,[sp,#4]            ;88
000190  e5940000          LDR      r0,[r4,#0]            ;90
000194  ebfffffe          BL       read32
000198  e5d41010          LDRB     r1,[r4,#0x10]         ;90
00019c  e0611201          RSB      r1,r1,r1,LSL #4       ;90
0001a0  e3a02040          MOV      r2,#0x40              ;90
0001a4  e0000112          AND      r0,r0,r2,LSL r1       ;90
0001a8  e3500000          CMP      r0,#0                 ;90
0001ac  0a000001          BEQ      |L1.440|
0001b0  e3a00001          MOV      r0,#1                 ;90
0001b4  ea000000          B        |L1.444|
                  |L1.440|
0001b8  e3a00000          MOV      r0,#0                 ;90
                  |L1.444|
0001bc  e58d0000          STR      r0,[sp,#0]            ;90
0001c0  e59d0000          LDR      r0,[sp,#0]            ;91
0001c4  e3500000          CMP      r0,#0                 ;91
0001c8  0a000009          BEQ      |L1.500|
0001cc  e5940000          LDR      r0,[r4,#0]            ;92
0001d0  ebfffffe          BL       read32
0001d4  e1a08000          MOV      r8,r0                 ;92
0001d8  e5d40010          LDRB     r0,[r4,#0x10]         ;93
0001dc  e0600200          RSB      r0,r0,r0,LSL #4       ;93
0001e0  e3a01040          MOV      r1,#0x40              ;93
0001e4  e1c88011          BIC      r8,r8,r1,LSL r0       ;93
0001e8  e1a01008          MOV      r1,r8                 ;94
0001ec  e5940000          LDR      r0,[r4,#0]            ;94
0001f0  ebfffffe          BL       write32
                  |L1.500|
0001f4  e5940000          LDR      r0,[r4,#0]            ;96
0001f8  ebfffffe          BL       read32
0001fc  e1a08000          MOV      r8,r0                 ;96
000200  e5d40010          LDRB     r0,[r4,#0x10]         ;97
000204  e0600200          RSB      r0,r0,r0,LSL #4       ;97
000208  e3a0100f          MOV      r1,#0xf               ;97
00020c  e1c88011          BIC      r8,r8,r1,LSL r0       ;97
000210  e5d40010          LDRB     r0,[r4,#0x10]         ;98
000214  e0600200          RSB      r0,r0,r0,LSL #4       ;98
000218  e188801a          ORR      r8,r8,r10,LSL r0      ;98
00021c  e1a01008          MOV      r1,r8                 ;99
000220  e5940000          LDR      r0,[r4,#0]            ;99
000224  ebfffffe          BL       write32
000228  e59d2004          LDR      r2,[sp,#4]            ;100
00022c  e1a02802          LSL      r2,r2,#16             ;100
000230  e1a02822          LSR      r2,r2,#16             ;100
000234  e24b3001          SUB      r3,r11,#1             ;100
000238  e1821803          ORR      r1,r2,r3,LSL #16      ;100
00023c  e3a0c004          MOV      r12,#4                ;100
000240  e5942010          LDR      r2,[r4,#0x10]         ;100
000244  e08c2102          ADD      r2,r12,r2,LSL #2      ;100
000248  e5943000          LDR      r3,[r4,#0]            ;100
00024c  e0830002          ADD      r0,r3,r2              ;100
000250  ebfffffe          BL       write32
000254  e59d0000          LDR      r0,[sp,#0]            ;101
000258  e3500000          CMP      r0,#0                 ;101
00025c  0a000009          BEQ      |L1.648|
000260  e5940000          LDR      r0,[r4,#0]            ;102
000264  ebfffffe          BL       read32
000268  e1a08000          MOV      r8,r0                 ;102
00026c  e5d40010          LDRB     r0,[r4,#0x10]         ;103
000270  e0600200          RSB      r0,r0,r0,LSL #4       ;103
000274  e3a01040          MOV      r1,#0x40              ;103
000278  e1888011          ORR      r8,r8,r1,LSL r0       ;103
00027c  e1a01008          MOV      r1,r8                 ;104
000280  e5940000          LDR      r0,[r4,#0]            ;104
000284  ebfffffe          BL       write32
                  |L1.648|
000288  e5849008          STR      r9,[r4,#8]            ;106
00028c  e584700c          STR      r7,[r4,#0xc]          ;107
000290  e5940000          LDR      r0,[r4,#0]            ;112
000294  ebfffffe          BL       read32
000298  e1a08000          MOV      r8,r0                 ;112
00029c  e59d0020          LDR      r0,[sp,#0x20]         ;113
0002a0  e3500000          CMP      r0,#0                 ;113
0002a4  0a000004          BEQ      |L1.700|
0002a8  e5d40010          LDRB     r0,[r4,#0x10]         ;114
0002ac  e0600200          RSB      r0,r0,r0,LSL #4       ;114
0002b0  e3a01020          MOV      r1,#0x20              ;114
0002b4  e1888011          ORR      r8,r8,r1,LSL r0       ;114
0002b8  ea000003          B        |L1.716|
                  |L1.700|
0002bc  e5d40010          LDRB     r0,[r4,#0x10]         ;116
0002c0  e0600200          RSB      r0,r0,r0,LSL #4       ;116
0002c4  e3a01020          MOV      r1,#0x20              ;116
0002c8  e1c88011          BIC      r8,r8,r1,LSL r0       ;116
                  |L1.716|
0002cc  e1a01008          MOV      r1,r8                 ;117
0002d0  e5940000          LDR      r0,[r4,#0]            ;117
0002d4  ebfffffe          BL       write32
0002d8  e59d0020          LDR      r0,[sp,#0x20]         ;119
0002dc  e5840014          STR      r0,[r4,#0x14]         ;119
0002e0  e1a00000          MOV      r0,r0
0002e4  eaffff99          B        |L1.336|
;;;122    
                          ENDP

                  pwm_f1c100s_set_duty PROC
;;;123    void pwm_f1c100s_set_duty(pwm_t* pwm, int32_t duty)
0002e8  e92d4070          PUSH     {r4-r6,lr}
;;;124    {
0002ec  e1a04000          MOV      r4,r0
0002f0  e1a05001          MOV      r5,r1
;;;125      pwm_f1c100s_config(pwm, duty, pwm->period, pwm->polarity);
0002f4  e1a01005          MOV      r1,r5
0002f8  e594200c          LDR      r2,[r4,#0xc]
0002fc  e5943014          LDR      r3,[r4,#0x14]
000300  e1a00004          MOV      r0,r4
000304  ebfffffe          BL       pwm_f1c100s_config
;;;126    }
000308  e8bd8070          POP      {r4-r6,pc}
;;;127    
                          ENDP

                  pwm_f1c100s_enable PROC
;;;128    void pwm_f1c100s_enable(pwm_t* pwm)
00030c  e92d4070          PUSH     {r4-r6,lr}
;;;129    {
000310  e1a04000          MOV      r4,r0
;;;130      uint32_t ctrl;
;;;131    
;;;132      if ((pwm->pwm_pin >= 0) && (pwm->pwm_pin_cfg >= 0))
000314  e594001c          LDR      r0,[r4,#0x1c]
000318  e3500000          CMP      r0,#0
00031c  ba000005          BLT      |L1.824|
000320  e5940020          LDR      r0,[r4,#0x20]
000324  e3500000          CMP      r0,#0
000328  ba000002          BLT      |L1.824|
;;;133        gpio_f1c100s_set_cfg(pwm->pwm_port, pwm->pwm_pin, pwm->pwm_pin_cfg);
00032c  e2842018          ADD      r2,r4,#0x18
000330  e8920007          LDM      r2,{r0-r2}
000334  ebfffffe          BL       gpio_f1c100s_set_cfg
                  |L1.824|
;;;134      //clk_enable(pwm->clk);
;;;135    
;;;136      ctrl = read32(pwm->virt + PWM_CTRL);
000338  e5940000          LDR      r0,[r4,#0]
00033c  ebfffffe          BL       read32
000340  e1a05000          MOV      r5,r0
;;;137      ctrl |= PWM_BIT(pwm->channel, 4);
000344  e5d40010          LDRB     r0,[r4,#0x10]
000348  e0600200          RSB      r0,r0,r0,LSL #4
00034c  e3a01010          MOV      r1,#0x10
000350  e1855011          ORR      r5,r5,r1,LSL r0
;;;138      ctrl |= PWM_BIT(pwm->channel, 6);
000354  e5d40010          LDRB     r0,[r4,#0x10]
000358  e0600200          RSB      r0,r0,r0,LSL #4
00035c  e3a01040          MOV      r1,#0x40
000360  e1855011          ORR      r5,r5,r1,LSL r0
;;;139      write32(pwm->virt + PWM_CTRL, ctrl);
000364  e1a01005          MOV      r1,r5
000368  e5940000          LDR      r0,[r4,#0]
00036c  ebfffffe          BL       write32
;;;140    }
000370  e8bd8070          POP      {r4-r6,pc}
;;;141    
                          ENDP

                  pwm_f1c100s_disable PROC
;;;142    void pwm_f1c100s_disable(pwm_t* pwm)
000374  e92d4070          PUSH     {r4-r6,lr}
;;;143    {
000378  e1a04000          MOV      r4,r0
;;;144      uint32_t ctrl;
;;;145    
;;;146      ctrl = read32(pwm->virt + PWM_CTRL);
00037c  e5940000          LDR      r0,[r4,#0]
000380  ebfffffe          BL       read32
000384  e1a05000          MOV      r5,r0
;;;147      ctrl &= ~PWM_BIT(pwm->channel, 4);
000388  e5d40010          LDRB     r0,[r4,#0x10]
00038c  e0600200          RSB      r0,r0,r0,LSL #4
000390  e3a01010          MOV      r1,#0x10
000394  e1c55011          BIC      r5,r5,r1,LSL r0
;;;148      ctrl &= ~PWM_BIT(pwm->channel, 6);
000398  e5d40010          LDRB     r0,[r4,#0x10]
00039c  e0600200          RSB      r0,r0,r0,LSL #4
0003a0  e3a01040          MOV      r1,#0x40
0003a4  e1c55011          BIC      r5,r5,r1,LSL r0
;;;149      write32(pwm->virt + PWM_CTRL, ctrl);
0003a8  e1a01005          MOV      r1,r5
0003ac  e5940000          LDR      r0,[r4,#0]
0003b0  ebfffffe          BL       write32
;;;150      //clk_disable(pwm->clk);
;;;151    }
0003b4  e8bd8070          POP      {r4-r6,pc}
;;;152    
                          ENDP

                  pwm_f1c100s_init PROC
;;;153    int32_t pwm_f1c100s_init(pwm_t* pwm)
0003b8  e92d4070          PUSH     {r4-r6,lr}
;;;154    {
0003bc  e1a04000          MOV      r4,r0
;;;155      write32(pwm->virt + PWM_CTRL, read32(pwm->virt + PWM_CTRL) & ~(0x3fff << (pwm->channel * 15)));
0003c0  e5940000          LDR      r0,[r4,#0]
0003c4  ebfffffe          BL       read32
0003c8  e5d41010          LDRB     r1,[r4,#0x10]
0003cc  e0611201          RSB      r1,r1,r1,LSL #4
0003d0  e59f2074          LDR      r2,|L1.1100|
0003d4  e1c05112          BIC      r5,r0,r2,LSL r1
0003d8  e1a01005          MOV      r1,r5
0003dc  e5940000          LDR      r0,[r4,#0]
0003e0  ebfffffe          BL       write32
;;;156      write32(pwm->virt + PWM_PERIOD(pwm->channel), 0);
0003e4  e3a03004          MOV      r3,#4
0003e8  e5941010          LDR      r1,[r4,#0x10]
0003ec  e0831101          ADD      r1,r3,r1,LSL #2
0003f0  e5942000          LDR      r2,[r4,#0]
0003f4  e0820001          ADD      r0,r2,r1
0003f8  e3a01000          MOV      r1,#0
0003fc  ebfffffe          BL       write32
;;;157    
;;;158      pwm_f1c100s_config(pwm, pwm->duty, pwm->period, pwm->polarity);
000400  e5941008          LDR      r1,[r4,#8]
000404  e594200c          LDR      r2,[r4,#0xc]
000408  e5943014          LDR      r3,[r4,#0x14]
00040c  e1a00004          MOV      r0,r4
000410  ebfffffe          BL       pwm_f1c100s_config
;;;159      pwm_f1c100s_enable(pwm);
000414  e1a00004          MOV      r0,r4
000418  ebfffffe          BL       pwm_f1c100s_enable
;;;160      return 0;
00041c  e3a00000          MOV      r0,#0
;;;161    }
000420  e8bd8070          POP      {r4-r6,pc}
;;;162    
                          ENDP

                  read32 PROC
;;;19     
;;;20     static __inline uint32_t read32(uint32_t addr)
000424  e1a01000          MOV      r1,r0
;;;21     {
;;;22       return (*((volatile uint32_t*)(addr)));
000428  e5910000          LDR      r0,[r1,#0]
;;;23     }
00042c  e12fff1e          BX       lr
;;;24     
                          ENDP

                  write32 PROC
;;;39     
;;;40     static __inline void write32(uint32_t addr, uint32_t value)
000430  e5801000          STR      r1,[r0,#0]
;;;41     {
;;;42       *((volatile uint32_t*)(addr)) = value;
;;;43     }
000434  e12fff1e          BX       lr
;;;44     
                          ENDP

                  |L1.1080|
                          DCD      0x016e3600
                  |L1.1084|
                          DCD      0x1dcd6500
                  |L1.1088|
                          DCD      0x0000ffff
                  |L1.1092|
                          DCD      prescaler_table
                  |L1.1096|
                          DCD      0x3b9aca00
                  |L1.1100|
                          DCD      0x00003fff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  prescaler_table
                          DCD      0x00000078
                          DCD      0x000000b4
                          DCD      0x000000f0
                          DCD      0x00000168
                          DCD      0x000001e0
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00002ee0
                          DCD      0x00005dc0
                          DCD      0x00008ca0
                          DCD      0x0000bb80
                          DCD      0x00011940
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
