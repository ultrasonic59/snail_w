; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\f1c100s_de.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\f1c100s_de.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\f1c100s_de.crf ..\periph\f1c100s_de.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  debe_set_bg_color PROC
;;;51     
;;;52     void debe_set_bg_color(uint32_t color) {
000000  e92d4010          PUSH     {r4,lr}
000004  e1a04000          MOV      r4,r0
;;;53         write32(DEBE_BASE + DEBE_BACKCOLOR, color);
000008  e1a01004          MOV      r1,r4
00000c  e59f0aec          LDR      r0,|L1.2816|
000010  ebfffffe          BL       write32
;;;54     }
000014  e8bd8010          POP      {r4,pc}
;;;55     
                          ENDP

                  debe_layer_enable PROC
;;;56     void debe_layer_enable(uint8_t layer) {
000018  e92d4070          PUSH     {r4-r6,lr}
00001c  e1a04000          MOV      r4,r0
;;;57         set32(DEBE_BASE + DEBE_MODE, (1 << (layer + 8)));
000020  e59f0adc          LDR      r0,|L1.2820|
000024  ebfffffe          BL       read32
000028  e2841008          ADD      r1,r4,#8
00002c  e3a02001          MOV      r2,#1
000030  e1805112          ORR      r5,r0,r2,LSL r1
000034  e1a01005          MOV      r1,r5
000038  e59f0ac4          LDR      r0,|L1.2820|
00003c  ebfffffe          BL       write32
;;;58     }
000040  e8bd8070          POP      {r4-r6,pc}
;;;59     
                          ENDP

                  debe_layer_disable PROC
;;;60     void debe_layer_disable(uint8_t layer) {
000044  e92d4070          PUSH     {r4-r6,lr}
000048  e1a04000          MOV      r4,r0
;;;61         clear32(DEBE_BASE + DEBE_MODE, (1 << (layer + 8)));
00004c  e59f0ab0          LDR      r0,|L1.2820|
000050  ebfffffe          BL       read32
000054  e2841008          ADD      r1,r4,#8
000058  e3a02001          MOV      r2,#1
00005c  e1c05112          BIC      r5,r0,r2,LSL r1
000060  e1a01005          MOV      r1,r5
000064  e59f0a98          LDR      r0,|L1.2820|
000068  ebfffffe          BL       write32
;;;62     }
00006c  e8bd8070          POP      {r4-r6,pc}
;;;63     
                          ENDP

                  debe_update_linewidth PROC
;;;132    
;;;133    static void debe_update_linewidth(uint8_t layer) {
000070  e92d4070          PUSH     {r4-r6,lr}
000074  e1a04000          MOV      r4,r0
;;;134        if(layer > 3) return;
000078  e3540003          CMP      r4,#3
00007c  da000000          BLE      |L1.132|
                  |L1.128|
;;;135        uint32_t val = de.layer[layer].width * de.layer[layer].bits_per_pixel;
;;;136        write32(DEBE_BASE + DEBE_LAY_STRIDE + layer * 4, val);
;;;137    }
000080  e8bd8070          POP      {r4-r6,pc}
                  |L1.132|
000084  e0840084          ADD      r0,r4,r4,LSL #1       ;135
000088  e59f1a78          LDR      r1,|L1.2824|
00008c  e0810080          ADD      r0,r1,r0,LSL #1       ;135
000090  e1d000b0          LDRH     r0,[r0,#0]            ;135
000094  e0841084          ADD      r1,r4,r4,LSL #1       ;135
000098  e59f2a68          LDR      r2,|L1.2824|
00009c  e0821081          ADD      r1,r2,r1,LSL #1       ;135
0000a0  e5d11004          LDRB     r1,[r1,#4]            ;135
0000a4  e0050190          MUL      r5,r0,r1              ;135
0000a8  e59f1a5c          LDR      r1,|L1.2828|
0000ac  e0810104          ADD      r0,r1,r4,LSL #2       ;136
0000b0  e1a01005          MOV      r1,r5                 ;136
0000b4  ebfffffe          BL       write32
0000b8  e1a00000          MOV      r0,r0
0000bc  eaffffef          B        |L1.128|
;;;138    
                          ENDP

                  debe_layer_init PROC
;;;63     
;;;64     void debe_layer_init(uint8_t layer) {
0000c0  e92d4010          PUSH     {r4,lr}
0000c4  e1a04000          MOV      r4,r0
;;;65         if(layer > 3) return;
0000c8  e3540003          CMP      r4,#3
0000cc  da000000          BLE      |L1.212|
                  |L1.208|
;;;66         de.layer[layer].width  = de.width;
;;;67         de.layer[layer].height = de.height;
;;;68     
;;;69         write32(DEBE_BASE + DEBE_LAY_POS + layer * 4, 0);
;;;70         write32(DEBE_BASE + DEBE_LAY_SIZE + layer * 4, ((de.height - 1) << 16) | (de.width - 1));
;;;71     
;;;72         debe_update_linewidth(layer);
;;;73     }
0000d0  e8bd8010          POP      {r4,pc}
                  |L1.212|
0000d4  e59f0a34          LDR      r0,|L1.2832|
0000d8  e1d000b0          LDRH     r0,[r0,#0]            ;66  ; de
0000dc  e0841084          ADD      r1,r4,r4,LSL #1       ;66
0000e0  e59f2a20          LDR      r2,|L1.2824|
0000e4  e0821081          ADD      r1,r2,r1,LSL #1       ;66
0000e8  e1c100b0          STRH     r0,[r1,#0]            ;66
0000ec  e2420008          SUB      r0,r2,#8              ;67
0000f0  e1d000b4          LDRH     r0,[r0,#4]            ;67  ; de
0000f4  e0841084          ADD      r1,r4,r4,LSL #1       ;67
0000f8  e0821081          ADD      r1,r2,r1,LSL #1       ;67
0000fc  e1c100b2          STRH     r0,[r1,#2]            ;67
000100  e59f1a0c          LDR      r1,|L1.2836|
000104  e0810104          ADD      r0,r1,r4,LSL #2       ;69
000108  e3a01000          MOV      r1,#0                 ;69
00010c  ebfffffe          BL       write32
000110  e59f29f8          LDR      r2,|L1.2832|
000114  e5922000          LDR      r2,[r2,#0]            ;70  ; de
000118  e2422001          SUB      r2,r2,#1              ;70
00011c  e59f39ec          LDR      r3,|L1.2832|
000120  e1d330b4          LDRH     r3,[r3,#4]            ;70  ; de
000124  e2433001          SUB      r3,r3,#1              ;70
000128  e1821803          ORR      r1,r2,r3,LSL #16      ;70
00012c  e59f29e4          LDR      r2,|L1.2840|
000130  e0820104          ADD      r0,r2,r4,LSL #2       ;70
000134  ebfffffe          BL       write32
000138  e1a00004          MOV      r0,r4                 ;72
00013c  ebfffffe          BL       debe_update_linewidth
000140  e1a00000          MOV      r0,r0
000144  eaffffe1          B        |L1.208|
;;;74     
                          ENDP

                  debe_layer_set_pos PROC
;;;75     void debe_layer_set_pos(uint8_t layer, int16_t x, int16_t y) {
000148  e92d4070          PUSH     {r4-r6,lr}
00014c  e1a04000          MOV      r4,r0
000150  e1a05001          MOV      r5,r1
000154  e1a06002          MOV      r6,r2
;;;76         if(layer > 3) return;
000158  e3540003          CMP      r4,#3
00015c  da000000          BLE      |L1.356|
                  |L1.352|
;;;77         write32(DEBE_BASE + DEBE_LAY_POS + layer * 4, (y << 16) | (x & 0xFFFF));
;;;78     }
000160  e8bd8070          POP      {r4-r6,pc}
                  |L1.356|
000164  e1a02805          LSL      r2,r5,#16             ;77
000168  e1a02822          LSR      r2,r2,#16             ;77
00016c  e1821806          ORR      r1,r2,r6,LSL #16      ;77
000170  e59f299c          LDR      r2,|L1.2836|
000174  e0820104          ADD      r0,r2,r4,LSL #2       ;77
000178  ebfffffe          BL       write32
00017c  e1a00000          MOV      r0,r0
000180  eafffff6          B        |L1.352|
;;;79     
                          ENDP

                  debe_layer_set_size PROC
;;;80     void debe_layer_set_size(uint8_t layer, uint16_t w, uint16_t h) {
000184  e92d4070          PUSH     {r4-r6,lr}
000188  e1a04000          MOV      r4,r0
00018c  e1a05001          MOV      r5,r1
000190  e1a06002          MOV      r6,r2
;;;81         if(layer > 3) return;
000194  e3540003          CMP      r4,#3
000198  da000000          BLE      |L1.416|
                  |L1.412|
;;;82         de.layer[layer].width  = w;
;;;83         de.layer[layer].height = h;
;;;84     
;;;85         write32(DEBE_BASE + DEBE_LAY_SIZE + layer * 4, ((h - 1) << 16) | (w - 1));
;;;86     
;;;87         debe_update_linewidth(layer);
;;;88     }
00019c  e8bd8070          POP      {r4-r6,pc}
                  |L1.416|
0001a0  e0840084          ADD      r0,r4,r4,LSL #1       ;82
0001a4  e59f195c          LDR      r1,|L1.2824|
0001a8  e0810080          ADD      r0,r1,r0,LSL #1       ;82
0001ac  e1c050b0          STRH     r5,[r0,#0]            ;82
0001b0  e0840084          ADD      r0,r4,r4,LSL #1       ;83
0001b4  e0810080          ADD      r0,r1,r0,LSL #1       ;83
0001b8  e1c060b2          STRH     r6,[r0,#2]            ;83
0001bc  e2452001          SUB      r2,r5,#1              ;85
0001c0  e2463001          SUB      r3,r6,#1              ;85
0001c4  e1821803          ORR      r1,r2,r3,LSL #16      ;85
0001c8  e59f2948          LDR      r2,|L1.2840|
0001cc  e0820104          ADD      r0,r2,r4,LSL #2       ;85
0001d0  ebfffffe          BL       write32
0001d4  e1a00004          MOV      r0,r4                 ;87
0001d8  ebfffffe          BL       debe_update_linewidth
0001dc  e1a00000          MOV      r0,r0
0001e0  eaffffed          B        |L1.412|
;;;89     
                          ENDP

                  debe_layer_set_mode PROC
;;;90     void debe_layer_set_mode(uint8_t layer, debe_color_mode_e mode) {
0001e4  e92d41f0          PUSH     {r4-r8,lr}
0001e8  e1a04000          MOV      r4,r0
0001ec  e1a05001          MOV      r5,r1
;;;91         if(layer > 3) return;
0001f0  e3540003          CMP      r4,#3
0001f4  da000000          BLE      |L1.508|
                  |L1.504|
;;;92     
;;;93         if(mode == DEBE_MODE_DEFE_VIDEO) {
;;;94             uint32_t val = read32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4) & ~(3 << 1);
;;;95             write32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4, val | (1 << 1));
;;;96         } else if(mode == DEBE_MODE_YUV) {
;;;97             uint32_t val = read32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4) & ~(3 << 1);
;;;98             write32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4, val | (1 << 2));
;;;99         } else {
;;;100            de.layer[layer].bits_per_pixel = (mode >> 8) & 0x00FF;
;;;101    
;;;102            if(mode & DEBE_PALETTE_EN) {
;;;103                set32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4, (1 << 22));
;;;104            } else {
;;;105                clear32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4, (1 << 22));
;;;106            }
;;;107    
;;;108            uint32_t val = read32(DEBE_BASE + DEBE_LAY_ATTR1 + layer * 4) & ~(0x0F << 8);
;;;109            write32(DEBE_BASE + DEBE_LAY_ATTR1 + layer * 4, val | ((mode & 0x0F) << 8));
;;;110    
;;;111            debe_update_linewidth(layer);
;;;112        }
;;;113    }
0001f8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.508|
0001fc  e3550040          CMP      r5,#0x40              ;93
000200  1a000008          BNE      |L1.552|
000204  e59f1910          LDR      r1,|L1.2844|
000208  e0810104          ADD      r0,r1,r4,LSL #2       ;94
00020c  ebfffffe          BL       read32
000210  e3c06006          BIC      r6,r0,#6              ;94
000214  e3861002          ORR      r1,r6,#2              ;95
000218  e59f28fc          LDR      r2,|L1.2844|
00021c  e0820104          ADD      r0,r2,r4,LSL #2       ;95
000220  ebfffffe          BL       write32
000224  ea000030          B        |L1.748|
                  |L1.552|
000228  e3550041          CMP      r5,#0x41              ;96
00022c  1a000008          BNE      |L1.596|
000230  e59f18e4          LDR      r1,|L1.2844|
000234  e0810104          ADD      r0,r1,r4,LSL #2       ;97
000238  ebfffffe          BL       read32
00023c  e3c06006          BIC      r6,r0,#6              ;97
000240  e3861004          ORR      r1,r6,#4              ;98
000244  e59f28d0          LDR      r2,|L1.2844|
000248  e0820104          ADD      r0,r2,r4,LSL #2       ;98
00024c  ebfffffe          BL       write32
000250  ea000025          B        |L1.748|
                  |L1.596|
000254  e1a00805          LSL      r0,r5,#16             ;100
000258  e1a00c20          LSR      r0,r0,#24             ;100
00025c  e0841084          ADD      r1,r4,r4,LSL #1       ;100
000260  e59f28a0          LDR      r2,|L1.2824|
000264  e0821081          ADD      r1,r2,r1,LSL #1       ;100
000268  e5c10004          STRB     r0,[r1,#4]            ;100
00026c  e2050080          AND      r0,r5,#0x80           ;102
000270  e3500000          CMP      r0,#0                 ;102
000274  0a000008          BEQ      |L1.668|
000278  e59f189c          LDR      r1,|L1.2844|
00027c  e0810104          ADD      r0,r1,r4,LSL #2       ;103
000280  ebfffffe          BL       read32
000284  e3807501          ORR      r7,r0,#0x400000       ;103
000288  e59f188c          LDR      r1,|L1.2844|
00028c  e0810104          ADD      r0,r1,r4,LSL #2       ;103
000290  e1a01007          MOV      r1,r7                 ;103
000294  ebfffffe          BL       write32
000298  ea000007          B        |L1.700|
                  |L1.668|
00029c  e59f1878          LDR      r1,|L1.2844|
0002a0  e0810104          ADD      r0,r1,r4,LSL #2       ;105
0002a4  ebfffffe          BL       read32
0002a8  e3c07501          BIC      r7,r0,#0x400000       ;105
0002ac  e59f1868          LDR      r1,|L1.2844|
0002b0  e0810104          ADD      r0,r1,r4,LSL #2       ;105
0002b4  e1a01007          MOV      r1,r7                 ;105
0002b8  ebfffffe          BL       write32
                  |L1.700|
0002bc  e59f185c          LDR      r1,|L1.2848|
0002c0  e0810104          ADD      r0,r1,r4,LSL #2       ;108
0002c4  ebfffffe          BL       read32
0002c8  e3c06c0f          BIC      r6,r0,#0xf00          ;108
0002cc  e205200f          AND      r2,r5,#0xf            ;109
0002d0  e1861402          ORR      r1,r6,r2,LSL #8       ;109
0002d4  e59f2844          LDR      r2,|L1.2848|
0002d8  e0820104          ADD      r0,r2,r4,LSL #2       ;109
0002dc  ebfffffe          BL       write32
0002e0  e1a00004          MOV      r0,r4                 ;111
0002e4  ebfffffe          BL       debe_update_linewidth
0002e8  e1a00000          MOV      r0,r0                 ;112
                  |L1.748|
0002ec  e1a00000          MOV      r0,r0
0002f0  eaffffc0          B        |L1.504|
;;;114    
                          ENDP

                  debe_layer_set_addr PROC
;;;115    // Set framebufer address
;;;116    void debe_layer_set_addr(uint8_t layer, void* buf) {
0002f4  e92d4070          PUSH     {r4-r6,lr}
0002f8  e1a04000          MOV      r4,r0
0002fc  e1a05001          MOV      r5,r1
;;;117        if(layer > 3) return;
000300  e3540003          CMP      r4,#3
000304  da000000          BLE      |L1.780|
                  |L1.776|
;;;118        write32(DEBE_BASE + DEBE_LAY_ADDR + layer * 4, ((uint32_t)buf) << 3);
;;;119    }
000308  e8bd8070          POP      {r4-r6,pc}
                  |L1.780|
00030c  e1a01185          LSL      r1,r5,#3              ;118
000310  e59f280c          LDR      r2,|L1.2852|
000314  e0820104          ADD      r0,r2,r4,LSL #2       ;118
000318  ebfffffe          BL       write32
00031c  e1a00000          MOV      r0,r0
000320  eafffff8          B        |L1.776|
;;;120    
                          ENDP

                  debe_layer_set_alpha PROC
;;;121    void debe_layer_set_alpha(uint8_t layer, uint8_t alpha) {
000324  e92d41f0          PUSH     {r4-r8,lr}
000328  e1a04000          MOV      r4,r0
00032c  e1a05001          MOV      r5,r1
;;;122        if(layer > 3) return;
000330  e3540003          CMP      r4,#3
000334  da000000          BLE      |L1.828|
                  |L1.824|
;;;123        uint32_t val = read32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4) & ~(0xFF << 24);
;;;124        write32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4, val | (alpha << 24));
;;;125    
;;;126        if(alpha != 0) {
;;;127            set32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4, (1 << 0));
;;;128        } else {
;;;129            clear32(DEBE_BASE + DEBE_LAY_ATTR0 + layer * 4, (1 << 0));
;;;130        }
;;;131    }
000338  e8bd81f0          POP      {r4-r8,pc}
                  |L1.828|
00033c  e59f17d8          LDR      r1,|L1.2844|
000340  e0810104          ADD      r0,r1,r4,LSL #2       ;123
000344  ebfffffe          BL       read32
000348  e3c064ff          BIC      r6,r0,#0xff000000     ;123
00034c  e1861c05          ORR      r1,r6,r5,LSL #24      ;124
000350  e59f27c4          LDR      r2,|L1.2844|
000354  e0820104          ADD      r0,r2,r4,LSL #2       ;124
000358  ebfffffe          BL       write32
00035c  e3550000          CMP      r5,#0                 ;126
000360  0a000008          BEQ      |L1.904|
000364  e59f17b0          LDR      r1,|L1.2844|
000368  e0810104          ADD      r0,r1,r4,LSL #2       ;127
00036c  ebfffffe          BL       read32
000370  e3807001          ORR      r7,r0,#1              ;127
000374  e59f17a0          LDR      r1,|L1.2844|
000378  e0810104          ADD      r0,r1,r4,LSL #2       ;127
00037c  e1a01007          MOV      r1,r7                 ;127
000380  ebfffffe          BL       write32
000384  ea000007          B        |L1.936|
                  |L1.904|
000388  e59f178c          LDR      r1,|L1.2844|
00038c  e0810104          ADD      r0,r1,r4,LSL #2       ;129
000390  ebfffffe          BL       read32
000394  e3c07001          BIC      r7,r0,#1              ;129
000398  e59f177c          LDR      r1,|L1.2844|
00039c  e0810104          ADD      r0,r1,r4,LSL #2       ;129
0003a0  e1a01007          MOV      r1,r7                 ;129
0003a4  ebfffffe          BL       write32
                  |L1.936|
0003a8  e1a00000          MOV      r0,r0
0003ac  eaffffe1          B        |L1.824|
;;;132    
                          ENDP

                  debe_write_palette PROC
;;;138    
;;;139    void debe_write_palette(uint32_t* data, uint16_t len) {
0003b0  e92d4070          PUSH     {r4-r6,lr}
0003b4  e1a04000          MOV      r4,r0
0003b8  e1a05001          MOV      r5,r1
;;;140        memcpy((void*)(DEBE_BASE + DEBE_PALETTE), data, len * 4);
0003bc  e1a02105          LSL      r2,r5,#2
0003c0  e1a01004          MOV      r1,r4
0003c4  e59f075c          LDR      r0,|L1.2856|
0003c8  ebfffffe          BL       __aeabi_memcpy4
;;;141    }
0003cc  e8bd8070          POP      {r4-r6,pc}
;;;142    
                          ENDP

                  de_lcd_8080_write PROC
;;;143    void de_lcd_8080_write(uint16_t data, bool is_cmd) {
0003d0  e92d41f0          PUSH     {r4-r8,lr}
0003d4  e1a04000          MOV      r4,r0
0003d8  e1a05001          MOV      r5,r1
;;;144        while(read32(TCON_BASE + TCON0_CPU_INTF) & 0x00C00000)
0003dc  e1a00000          MOV      r0,r0
                  |L1.992|
0003e0  e59f0744          LDR      r0,|L1.2860|
0003e4  ebfffffe          BL       read32
0003e8  e2000503          AND      r0,r0,#0xc00000
0003ec  e3500000          CMP      r0,#0
0003f0  1afffffa          BNE      |L1.992|
;;;145            ;
;;;146    
;;;147        if(is_cmd) {
0003f4  e3550000          CMP      r5,#0
0003f8  0a000006          BEQ      |L1.1048|
;;;148            clear32(TCON_BASE + TCON0_CPU_INTF, (1 << 25));
0003fc  e59f0728          LDR      r0,|L1.2860|
000400  ebfffffe          BL       read32
000404  e3c07402          BIC      r7,r0,#0x2000000
000408  e1a01007          MOV      r1,r7
00040c  e59f0718          LDR      r0,|L1.2860|
000410  ebfffffe          BL       write32
000414  ea000005          B        |L1.1072|
                  |L1.1048|
;;;149        } else {
;;;150            set32(TCON_BASE + TCON0_CPU_INTF, (1 << 25));
000418  e59f070c          LDR      r0,|L1.2860|
00041c  ebfffffe          BL       read32
000420  e3807402          ORR      r7,r0,#0x2000000
000424  e1a01007          MOV      r1,r7
000428  e59f06fc          LDR      r0,|L1.2860|
00042c  ebfffffe          BL       write32
                  |L1.1072|
;;;151        }
;;;152    
;;;153        while(read32(TCON_BASE + TCON0_CPU_INTF) & 0x00C00000)
000430  e1a00000          MOV      r0,r0
                  |L1.1076|
000434  e59f06f0          LDR      r0,|L1.2860|
000438  ebfffffe          BL       read32
00043c  e2000503          AND      r0,r0,#0xc00000
000440  e3500000          CMP      r0,#0
000444  1afffffa          BNE      |L1.1076|
;;;154            ;
;;;155    
;;;156        uint32_t reg_data = ((data & 0xfc00) << 8) | ((data & 0x0300) << 6) | ((data & 0x00e0) << 5) |
000448  e2040b3f          AND      r0,r4,#0xfc00
00044c  e1a00400          LSL      r0,r0,#8
000450  e2041c03          AND      r1,r4,#0x300
000454  e1800301          ORR      r0,r0,r1,LSL #6
000458  e20410e0          AND      r1,r4,#0xe0
00045c  e1800281          ORR      r0,r0,r1,LSL #5
000460  e204101f          AND      r1,r4,#0x1f
000464  e1806181          ORR      r6,r0,r1,LSL #3
;;;157                            ((data & 0x001f) << 3);
;;;158    
;;;159        write32(TCON_BASE + TCON0_CPU_WR_DAT, reg_data);
000468  e1a01006          MOV      r1,r6
00046c  e59f06bc          LDR      r0,|L1.2864|
000470  ebfffffe          BL       write32
;;;160    }
000474  e8bd81f0          POP      {r4-r8,pc}
;;;161    
                          ENDP

                  de_lcd_8080_auto_mode PROC
;;;162    void de_lcd_8080_auto_mode(bool enabled) {
000478  e92d4070          PUSH     {r4-r6,lr}
00047c  e1a04000          MOV      r4,r0
;;;163        if(enabled) {
000480  e3540000          CMP      r4,#0
000484  0a000006          BEQ      |L1.1188|
;;;164            set32(TCON_BASE + TCON0_CPU_INTF, (1 << 28));
000488  e59f069c          LDR      r0,|L1.2860|
00048c  ebfffffe          BL       read32
000490  e3805201          ORR      r5,r0,#0x10000000
000494  e1a01005          MOV      r1,r5
000498  e59f068c          LDR      r0,|L1.2860|
00049c  ebfffffe          BL       write32
0004a0  ea000005          B        |L1.1212|
                  |L1.1188|
;;;165        } else {
;;;166            clear32(TCON_BASE + TCON0_CPU_INTF, (1 << 28));
0004a4  e59f0680          LDR      r0,|L1.2860|
0004a8  ebfffffe          BL       read32
0004ac  e3c05201          BIC      r5,r0,#0x10000000
0004b0  e1a01005          MOV      r1,r5
0004b4  e59f0670          LDR      r0,|L1.2860|
0004b8  ebfffffe          BL       write32
                  |L1.1212|
;;;167        }
;;;168    }
0004bc  e8bd8070          POP      {r4-r6,pc}
;;;169    
                          ENDP

                  debe_load PROC
;;;297    // Update DEBE registers
;;;298    void debe_load(debe_reg_update_e mode) {
0004c0  e92d4010          PUSH     {r4,lr}
0004c4  e1a04000          MOV      r4,r0
;;;299        write32(DEBE_BASE + DEBE_REGBUF_CTRL, mode);
0004c8  e1a01004          MOV      r1,r4
0004cc  e59f0660          LDR      r0,|L1.2868|
0004d0  ebfffffe          BL       write32
;;;300    }
0004d4  e8bd8010          POP      {r4,pc}
;;;301    
                          ENDP

                  de_enable PROC
;;;277    
;;;278    void de_enable(void) {
0004d8  e92d4010          PUSH     {r4,lr}
;;;279        if(de.mode == DE_LCD) {
0004dc  e59f062c          LDR      r0,|L1.2832|
0004e0  e5d00020          LDRB     r0,[r0,#0x20]  ; de
0004e4  e3500000          CMP      r0,#0
0004e8  1a000006          BNE      |L1.1288|
;;;280            set32(TCON_BASE + TCON0_CTRL, (1 << 31));
0004ec  e59f0644          LDR      r0,|L1.2872|
0004f0  ebfffffe          BL       read32
0004f4  e3804102          ORR      r4,r0,#0x80000000
0004f8  e1a01004          MOV      r1,r4
0004fc  e59f0634          LDR      r0,|L1.2872|
000500  ebfffffe          BL       write32
000504  ea00000a          B        |L1.1332|
                  |L1.1288|
;;;281        } else if(de.mode == DE_TV) {
000508  e59f0600          LDR      r0,|L1.2832|
00050c  e5d00020          LDRB     r0,[r0,#0x20]  ; de
000510  e3500001          CMP      r0,#1
000514  1a000006          BNE      |L1.1332|
;;;282            set32(TCON_BASE + TCON1_CTRL, (1 << 31));
000518  e59f061c          LDR      r0,|L1.2876|
00051c  ebfffffe          BL       read32
000520  e3804102          ORR      r4,r0,#0x80000000
000524  e1a01004          MOV      r1,r4
000528  e59f060c          LDR      r0,|L1.2876|
00052c  ebfffffe          BL       write32
;;;283            tve_enable();
000530  ebfffffe          BL       tve_enable
                  |L1.1332|
;;;284        }
;;;285        set32(TCON_BASE + TCON_CTRL, (1 << 31));
000534  e59f0604          LDR      r0,|L1.2880|
000538  ebfffffe          BL       read32
00053c  e3804102          ORR      r4,r0,#0x80000000
000540  e1a01004          MOV      r1,r4
000544  e59f05f4          LDR      r0,|L1.2880|
000548  ebfffffe          BL       write32
;;;286        set32(DEBE_BASE + DEBE_MODE, (1 << 0));
00054c  e59f05b0          LDR      r0,|L1.2820|
000550  ebfffffe          BL       read32
000554  e3804001          ORR      r4,r0,#1
000558  e1a01004          MOV      r1,r4
00055c  e59f05a0          LDR      r0,|L1.2820|
000560  ebfffffe          BL       write32
;;;287    }
000564  e8bd8010          POP      {r4,pc}
;;;288    
                          ENDP

                  tcon0_init PROC
;;;351    // TCON0 -> LCD
;;;352    static void tcon0_init(de_lcd_config_t* params) {
000568  e92d47f0          PUSH     {r4-r10,lr}
00056c  e1a04000          MOV      r4,r0
;;;353        int32_t bp, total;
;;;354        uint32_t val;
;;;355    
;;;356        uint32_t tcon_clk = clk_pll_get_freq(PLL_VIDEO);
000570  e3a00010          MOV      r0,#0x10
000574  ebfffffe          BL       clk_pll_get_freq
000578  e1a09000          MOV      r9,r0
;;;357    
;;;358        val = (params->v_front_porch + params->v_back_porch + params->v_sync_len);
00057c  e5940024          LDR      r0,[r4,#0x24]
000580  e5941028          LDR      r1,[r4,#0x28]
000584  e0800001          ADD      r0,r0,r1
000588  e594102c          LDR      r1,[r4,#0x2c]
00058c  e0805001          ADD      r5,r0,r1
;;;359        write32(TCON_BASE + TCON0_CTRL, ((val & 0x1f) << 4));
000590  e1a00d85          LSL      r0,r5,#27
000594  e1a01ba0          LSR      r1,r0,#23
000598  e59f0598          LDR      r0,|L1.2872|
00059c  ebfffffe          BL       write32
;;;360        val = tcon_clk / params->pixel_clock_hz;
0005a0  e1a00009          MOV      r0,r9
0005a4  e5941014          LDR      r1,[r4,#0x14]
0005a8  ebfffffe          BL       __aeabi_uidivmod
0005ac  e1a05000          MOV      r5,r0
;;;361        write32(TCON_BASE + TCON0_DCLK, (0xf << 28) | (val << 0));
0005b0  e385120f          ORR      r1,r5,#0xf0000000
0005b4  e59f0588          LDR      r0,|L1.2884|
0005b8  ebfffffe          BL       write32
;;;362        write32(TCON_BASE + TCON0_TIMING_ACT, ((de.width - 1) << 16) | ((de.height - 1) << 0));
0005bc  e59f054c          LDR      r0,|L1.2832|
0005c0  e5900004          LDR      r0,[r0,#4]  ; de
0005c4  e2400001          SUB      r0,r0,#1
0005c8  e59f2540          LDR      r2,|L1.2832|
0005cc  e1d220b0          LDRH     r2,[r2,#0]  ; de
0005d0  e2422001          SUB      r2,r2,#1
0005d4  e1801802          ORR      r1,r0,r2,LSL #16
0005d8  e59f0568          LDR      r0,|L1.2888|
0005dc  ebfffffe          BL       write32
;;;363    
;;;364        bp    = params->h_sync_len + params->h_back_porch;
0005e0  e5940020          LDR      r0,[r4,#0x20]
0005e4  e594101c          LDR      r1,[r4,#0x1c]
0005e8  e0806001          ADD      r6,r0,r1
;;;365        total = de.width + params->h_front_porch + bp;
0005ec  e59f051c          LDR      r0,|L1.2832|
0005f0  e5900000          LDR      r0,[r0,#0]  ; de
0005f4  e5941018          LDR      r1,[r4,#0x18]
0005f8  e0800001          ADD      r0,r0,r1
0005fc  e0807006          ADD      r7,r0,r6
;;;366        write32(TCON_BASE + TCON0_TIMING_H, ((total - 1) << 16) | ((bp - 1) << 0));
000600  e2460001          SUB      r0,r6,#1
000604  e2472001          SUB      r2,r7,#1
000608  e1801802          ORR      r1,r0,r2,LSL #16
00060c  e59f0538          LDR      r0,|L1.2892|
000610  ebfffffe          BL       write32
;;;367    
;;;368        bp    = params->v_sync_len + params->v_back_porch;
000614  e594002c          LDR      r0,[r4,#0x2c]
000618  e5941028          LDR      r1,[r4,#0x28]
00061c  e0806001          ADD      r6,r0,r1
;;;369        total = de.height + params->v_front_porch + bp;
000620  e59f04e8          LDR      r0,|L1.2832|
000624  e5900004          LDR      r0,[r0,#4]  ; de
000628  e5941024          LDR      r1,[r4,#0x24]
00062c  e0800001          ADD      r0,r0,r1
000630  e0807006          ADD      r7,r0,r6
;;;370        write32(TCON_BASE + TCON0_TIMING_V, ((total * 2) << 16) | ((bp - 1) << 0));
000634  e2460001          SUB      r0,r6,#1
000638  e1801887          ORR      r1,r0,r7,LSL #17
00063c  e59f050c          LDR      r0,|L1.2896|
000640  ebfffffe          BL       write32
;;;371        write32(
000644  e594002c          LDR      r0,[r4,#0x2c]
000648  e2400001          SUB      r0,r0,#1
00064c  e1d422b0          LDRH     r2,[r4,#0x20]
000650  e2422001          SUB      r2,r2,#1
000654  e1801802          ORR      r1,r0,r2,LSL #16
000658  e59f04f4          LDR      r0,|L1.2900|
00065c  ebfffffe          BL       write32
;;;372            TCON_BASE + TCON0_TIMING_SYNC,
;;;373            ((params->h_sync_len - 1) << 16) | ((params->v_sync_len - 1) << 0));
;;;374    
;;;375        if(params->bus_mode == DE_LCD_CPU_8080) {
000660  e594000c          LDR      r0,[r4,#0xc]
000664  e3500003          CMP      r0,#3
000668  1a00000e          BNE      |L1.1704|
;;;376            set32(TCON_BASE + TCON0_CTRL, (1 << 24));
00066c  e59f04c4          LDR      r0,|L1.2872|
000670  ebfffffe          BL       read32
000674  e3808401          ORR      r8,r0,#0x1000000
000678  e1a01008          MOV      r1,r8
00067c  e59f04b4          LDR      r0,|L1.2872|
000680  ebfffffe          BL       write32
;;;377            write32(TCON_BASE + TCON0_HV_INTF, 0);
000684  e3a01000          MOV      r1,#0
000688  e59f04c8          LDR      r0,|L1.2904|
00068c  ebfffffe          BL       write32
;;;378            write32(TCON_BASE + TCON0_CPU_INTF, (params->bus_8080_type << 29) | (1 << 26));
000690  e5d40010          LDRB     r0,[r4,#0x10]
000694  e3a02301          MOV      r2,#0x4000000
000698  e1821e80          ORR      r1,r2,r0,LSL #29
00069c  e59f0488          LDR      r0,|L1.2860|
0006a0  ebfffffe          BL       write32
0006a4  ea000019          B        |L1.1808|
                  |L1.1704|
;;;379        } else {
;;;380            clear32(TCON_BASE + TCON0_CTRL, (1 << 24));
0006a8  e59f0488          LDR      r0,|L1.2872|
0006ac  ebfffffe          BL       read32
0006b0  e3c08401          BIC      r8,r0,#0x1000000
0006b4  e1a01008          MOV      r1,r8
0006b8  e59f0478          LDR      r0,|L1.2872|
0006bc  ebfffffe          BL       write32
;;;381            if(params->bus_mode == DE_LCD_SERIAL_RGB) { // TODO: RGB order
0006c0  e594000c          LDR      r0,[r4,#0xc]
0006c4  e3500001          CMP      r0,#1
0006c8  1a000003          BNE      |L1.1756|
;;;382                write32(TCON_BASE + TCON0_HV_INTF, (1UL << 31));
0006cc  e3a01102          MOV      r1,#0x80000000
0006d0  e59f0480          LDR      r0,|L1.2904|
0006d4  ebfffffe          BL       write32
0006d8  ea000009          B        |L1.1796|
                  |L1.1756|
;;;383            } else if(params->bus_mode == DE_LCD_SERIAL_YUV) { // TODO: YUV order
0006dc  e594000c          LDR      r0,[r4,#0xc]
0006e0  e3500002          CMP      r0,#2
0006e4  1a000003          BNE      |L1.1784|
;;;384                write32(TCON_BASE + TCON0_HV_INTF, (1UL << 31) | (1UL << 31));
0006e8  e3a01102          MOV      r1,#0x80000000
0006ec  e59f0464          LDR      r0,|L1.2904|
0006f0  ebfffffe          BL       write32
0006f4  ea000002          B        |L1.1796|
                  |L1.1784|
;;;385            } else {
;;;386                write32(TCON_BASE + TCON0_HV_INTF, 0);
0006f8  e3a01000          MOV      r1,#0
0006fc  e59f0454          LDR      r0,|L1.2904|
000700  ebfffffe          BL       write32
                  |L1.1796|
;;;387            }
;;;388            write32(TCON_BASE + TCON0_CPU_INTF, 0);
000704  e3a01000          MOV      r1,#0
000708  e59f041c          LDR      r0,|L1.2860|
00070c  ebfffffe          BL       write32
                  |L1.1808|
;;;389        }
;;;390    
;;;391        write32(TCON_BASE + TCON_FRM_SEED + 0 * 4, 0x11111111);
000710  e59f1444          LDR      r1,|L1.2908|
000714  e59f0444          LDR      r0,|L1.2912|
000718  ebfffffe          BL       write32
;;;392        write32(TCON_BASE + TCON_FRM_SEED + 1 * 4, 0x11111111);
00071c  e59f1438          LDR      r1,|L1.2908|
000720  e59f043c          LDR      r0,|L1.2916|
000724  ebfffffe          BL       write32
;;;393        write32(TCON_BASE + TCON_FRM_SEED + 2 * 4, 0x11111111);
000728  e59f142c          LDR      r1,|L1.2908|
00072c  e59f0434          LDR      r0,|L1.2920|
000730  ebfffffe          BL       write32
;;;394        write32(TCON_BASE + TCON_FRM_SEED + 3 * 4, 0x11111111);
000734  e59f1420          LDR      r1,|L1.2908|
000738  e59f042c          LDR      r0,|L1.2924|
00073c  ebfffffe          BL       write32
;;;395        write32(TCON_BASE + TCON_FRM_SEED + 4 * 4, 0x11111111);
000740  e59f1414          LDR      r1,|L1.2908|
000744  e59f0424          LDR      r0,|L1.2928|
000748  ebfffffe          BL       write32
;;;396        write32(TCON_BASE + TCON_FRM_SEED + 5 * 4, 0x11111111);
00074c  e59f1408          LDR      r1,|L1.2908|
000750  e59f041c          LDR      r0,|L1.2932|
000754  ebfffffe          BL       write32
;;;397    
;;;398        write32(TCON_BASE + TCON_FRM_TABLE + 0 * 4, 0x01010000);
000758  e59f1418          LDR      r1,|L1.2936|
00075c  e59f0418          LDR      r0,|L1.2940|
000760  ebfffffe          BL       write32
;;;399        write32(TCON_BASE + TCON_FRM_TABLE + 1 * 4, 0x15151111);
000764  e59f1414          LDR      r1,|L1.2944|
000768  e59f0414          LDR      r0,|L1.2948|
00076c  ebfffffe          BL       write32
;;;400        write32(TCON_BASE + TCON_FRM_TABLE + 2 * 4, 0x57575555);
000770  e59f1410          LDR      r1,|L1.2952|
000774  e59f0410          LDR      r0,|L1.2956|
000778  ebfffffe          BL       write32
;;;401        write32(TCON_BASE + TCON_FRM_TABLE + 3 * 4, 0x7f7f7777);
00077c  e59f140c          LDR      r1,|L1.2960|
000780  e59f040c          LDR      r0,|L1.2964|
000784  ebfffffe          BL       write32
;;;402    
;;;403        write32(TCON_BASE + TCON_FRM_CTRL, (params->bus_width << 4) | (1 << 31));
000788  e3a02102          MOV      r2,#0x80000000
00078c  e5940008          LDR      r0,[r4,#8]
000790  e1821200          ORR      r1,r2,r0,LSL #4
000794  e59f03fc          LDR      r0,|L1.2968|
000798  ebfffffe          BL       write32
;;;404    
;;;405        val = (1 << 28);
00079c  e3a05201          MOV      r5,#0x10000000
;;;406        if(params->h_sync_invert) val |= (1 << 25); // io1 ?
0007a0  e5940030          LDR      r0,[r4,#0x30]
0007a4  e3500000          CMP      r0,#0
0007a8  0a000000          BEQ      |L1.1968|
0007ac  e3855402          ORR      r5,r5,#0x2000000
                  |L1.1968|
;;;407        if(params->v_sync_invert) val |= (1 << 24); // io0 ?
0007b0  e5940034          LDR      r0,[r4,#0x34]
0007b4  e3500000          CMP      r0,#0
0007b8  0a000000          BEQ      |L1.1984|
0007bc  e3855401          ORR      r5,r5,#0x1000000
                  |L1.1984|
;;;408        write32(TCON_BASE + TCON0_IO_POLARITY, val);
0007c0  e1a01005          MOV      r1,r5
0007c4  e59f03d0          LDR      r0,|L1.2972|
0007c8  ebfffffe          BL       write32
;;;409        write32(TCON_BASE + TCON0_IO_TRISTATE, 0);
0007cc  e3a01000          MOV      r1,#0
0007d0  e59f03c8          LDR      r0,|L1.2976|
0007d4  ebfffffe          BL       write32
;;;410    }
0007d8  e8bd87f0          POP      {r4-r10,pc}
;;;411    
                          ENDP

                  debe_init PROC
;;;434    
;;;435    static void debe_init(void) {
0007dc  e92d4010          PUSH     {r4,lr}
;;;436        write32(DEBE_BASE + DEBE_MODE, (1 << 1));
0007e0  e3a01002          MOV      r1,#2
0007e4  e59f0318          LDR      r0,|L1.2820|
0007e8  ebfffffe          BL       write32
;;;437    
;;;438        for(uint8_t i = 0; i < 4; i++) {
0007ec  e3a04000          MOV      r4,#0
0007f0  ea000015          B        |L1.2124|
                  |L1.2036|
;;;439            write32(DEBE_BASE + DEBE_LAY_ATTR0 + i * 4, (i << 10) | ((i & 1) << 15));
0007f4  e1a02504          LSL      r2,r4,#10
0007f8  e2043001          AND      r3,r4,#1
0007fc  e1821783          ORR      r1,r2,r3,LSL #15
000800  e59f2314          LDR      r2,|L1.2844|
000804  e0820104          ADD      r0,r2,r4,LSL #2
000808  ebfffffe          BL       write32
;;;440            write32(DEBE_BASE + DEBE_LAY_ATTR1 + i * 4, 0);
00080c  e59f130c          LDR      r1,|L1.2848|
000810  e0810104          ADD      r0,r1,r4,LSL #2
000814  e3a01000          MOV      r1,#0
000818  ebfffffe          BL       write32
;;;441            de.layer[i].bits_per_pixel = 32;
00081c  e3a00020          MOV      r0,#0x20
000820  e0841084          ADD      r1,r4,r4,LSL #1
000824  e59f22dc          LDR      r2,|L1.2824|
000828  e0821081          ADD      r1,r2,r1,LSL #1
00082c  e5c10004          STRB     r0,[r1,#4]
;;;442            debe_layer_init(i);
000830  e1a00004          MOV      r0,r4
000834  ebfffffe          BL       debe_layer_init
;;;443            debe_layer_set_mode(i, DEBE_MODE_32BPP_RGB_888);
000838  e59f1364          LDR      r1,|L1.2980|
00083c  e1a00004          MOV      r0,r4
000840  ebfffffe          BL       debe_layer_set_mode
000844  e2840001          ADD      r0,r4,#1              ;438
000848  e20040ff          AND      r4,r0,#0xff           ;438
                  |L1.2124|
00084c  e3540004          CMP      r4,#4                 ;438
000850  baffffe7          BLT      |L1.2036|
;;;444        }
;;;445    
;;;446        debe_load(DEBE_UPDATE_MANUAL);
000854  e3a00003          MOV      r0,#3
000858  ebfffffe          BL       debe_load
;;;447    }
00085c  e8bd8010          POP      {r4,pc}
;;;448    
                          ENDP

                  tcon_deinit PROC
;;;449    static void tcon_deinit(void) {
000860  e92d4010          PUSH     {r4,lr}
;;;450        write32(DEBE_BASE + TCON_CTRL, 0);
000864  e3a01000          MOV      r1,#0
000868  e59f0338          LDR      r0,|L1.2984|
00086c  ebfffffe          BL       write32
;;;451        write32(DEBE_BASE + TCON_INT0, 0);
000870  e3a01000          MOV      r1,#0
000874  e59f0330          LDR      r0,|L1.2988|
000878  ebfffffe          BL       write32
;;;452    
;;;453        write32(DEBE_BASE + TCON0_DCLK, (0xF << 28));
00087c  e3a0120f          MOV      r1,#0xf0000000
000880  e59f0328          LDR      r0,|L1.2992|
000884  ebfffffe          BL       write32
;;;454    
;;;455        write32(DEBE_BASE + TCON0_IO_TRISTATE, 0xFFFFFFFF);
000888  e3e01000          MVN      r1,#0
00088c  e59f0320          LDR      r0,|L1.2996|
000890  ebfffffe          BL       write32
;;;456        write32(DEBE_BASE + TCON1_IO_TRISTATE, 0xFFFFFFFF);
000894  e3e01000          MVN      r1,#0
000898  e59f0318          LDR      r0,|L1.3000|
00089c  ebfffffe          BL       write32
;;;457    }
0008a0  e8bd8010          POP      {r4,pc}
;;;458    
                          ENDP

                  tcon_clk_enable PROC
;;;462    
;;;463    static void tcon_clk_enable(void) {
0008a4  e92d4010          PUSH     {r4,lr}
;;;464        clk_enable(CCU_TCON_CLK, 31);
0008a8  e3a0101f          MOV      r1,#0x1f
0008ac  e3a00f46          MOV      r0,#0x118
0008b0  ebfffffe          BL       clk_enable
;;;465        clk_enable(CCU_BUS_CLK_GATE1, 4);
0008b4  e3a01004          MOV      r1,#4
0008b8  e3a00064          MOV      r0,#0x64
0008bc  ebfffffe          BL       clk_enable
;;;466    }
0008c0  e8bd8010          POP      {r4,pc}
;;;467    
                          ENDP

                  debe_clk_enable PROC
;;;481    
;;;482    static void debe_clk_enable(void) {
0008c4  e92d4010          PUSH     {r4,lr}
;;;483        clk_enable(CCU_DRAM_CLK_GATE, 26);
0008c8  e3a0101a          MOV      r1,#0x1a
0008cc  e3a00c01          MOV      r0,#0x100
0008d0  ebfffffe          BL       clk_enable
;;;484        clk_enable(CCU_DEBE_CLK, 31);
0008d4  e3a0101f          MOV      r1,#0x1f
0008d8  e3a00f41          MOV      r0,#0x104
0008dc  ebfffffe          BL       clk_enable
;;;485        clk_enable(CCU_BUS_CLK_GATE1, 12);
0008e0  e3a0100c          MOV      r1,#0xc
0008e4  e3a00064          MOV      r0,#0x64
0008e8  ebfffffe          BL       clk_enable
;;;486    }
0008ec  e8bd8010          POP      {r4,pc}
                          ENDP

                  defe_clk_enable PROC
;;;471    
;;;472    static void defe_clk_enable(void) {
0008f0  e92d4010          PUSH     {r4,lr}
;;;473        clk_enable(CCU_DRAM_CLK_GATE, 24);
0008f4  e3a01018          MOV      r1,#0x18
0008f8  e3a00c01          MOV      r0,#0x100
0008fc  ebfffffe          BL       clk_enable
;;;474        clk_enable(CCU_DEFE_CLK, 31);
000900  e3a0101f          MOV      r1,#0x1f
000904  e3a00f43          MOV      r0,#0x10c
000908  ebfffffe          BL       clk_enable
;;;475        clk_enable(CCU_BUS_CLK_GATE1, 14);
00090c  e3a0100e          MOV      r1,#0xe
000910  e3a00064          MOV      r0,#0x64
000914  ebfffffe          BL       clk_enable
;;;476    }
000918  e8bd8010          POP      {r4,pc}
;;;477    
                          ENDP

                  tcon_clk_init PROC
;;;458    
;;;459    static void tcon_clk_init(void) {
00091c  e92d4010          PUSH     {r4,lr}
;;;460        clk_tcon_config(CLK_VID_SRC_PLL_VIDEO_1X);
000920  e3a00000          MOV      r0,#0
000924  ebfffffe          BL       clk_tcon_config
;;;461    }
000928  e8bd8010          POP      {r4,pc}
;;;462    
                          ENDP

                  defe_clk_init PROC
;;;467    
;;;468    static void defe_clk_init(void) {
00092c  e92d4010          PUSH     {r4,lr}
;;;469        clk_de_config(CCU_DEFE_CLK, CLK_DE_SRC_PLL_VIDEO, 1);
000930  e3a02001          MOV      r2,#1
000934  e3a01000          MOV      r1,#0
000938  e3a00f43          MOV      r0,#0x10c
00093c  ebfffffe          BL       clk_de_config
;;;470    }
000940  e8bd8010          POP      {r4,pc}
;;;471    
                          ENDP

                  debe_clk_init PROC
;;;477    
;;;478    static void debe_clk_init(void) {
000944  e92d4010          PUSH     {r4,lr}
;;;479        clk_de_config(CCU_DEBE_CLK, CLK_DE_SRC_PLL_VIDEO, 1);
000948  e3a02001          MOV      r2,#1
00094c  e3a01000          MOV      r1,#0
000950  e3a00f41          MOV      r0,#0x104
000954  ebfffffe          BL       clk_de_config
;;;480    }
000958  e8bd8010          POP      {r4,pc}
;;;481    
                          ENDP

                  de_lcd_init PROC
;;;170    /************** Initialization ***************/
;;;171    void de_lcd_init(de_lcd_config_t* params) {
00095c  e92d4070          PUSH     {r4-r6,lr}
000960  e1a04000          MOV      r4,r0
;;;172        de.height = params->height;
000964  e59f11a4          LDR      r1,|L1.2832|
000968  e5940004          LDR      r0,[r4,#4]
00096c  e5810004          STR      r0,[r1,#4]  ; de
;;;173        de.width  = params->width;
000970  e5940000          LDR      r0,[r4,#0]
000974  e5810000          STR      r0,[r1,#0]  ; de
;;;174        de.mode   = DE_LCD;
000978  e3a00000          MOV      r0,#0
00097c  e5c10020          STRB     r0,[r1,#0x20]  ; de
;;;175    
;;;176        clk_reset_set(CCU_BUS_SOFT_RST1, 14);
000980  e3a0100e          MOV      r1,#0xe
000984  e3a00fb1          MOV      r0,#0x2c4
000988  ebfffffe          BL       clk_reset_set
;;;177        clk_reset_set(CCU_BUS_SOFT_RST1, 12);
00098c  e3a0100c          MOV      r1,#0xc
000990  e3a00fb1          MOV      r0,#0x2c4
000994  ebfffffe          BL       clk_reset_set
;;;178        clk_reset_set(CCU_BUS_SOFT_RST1, 4);
000998  e3a01004          MOV      r1,#4
00099c  e3a00fb1          MOV      r0,#0x2c4
0009a0  ebfffffe          BL       clk_reset_set
;;;179    
;;;180        debe_clk_init();
0009a4  ebfffffe          BL       debe_clk_init
;;;181        defe_clk_init();
0009a8  ebfffffe          BL       defe_clk_init
;;;182        tcon_clk_init();
0009ac  ebfffffe          BL       tcon_clk_init
;;;183    
;;;184        defe_clk_enable();
0009b0  ebfffffe          BL       defe_clk_enable
;;;185        debe_clk_enable();
0009b4  ebfffffe          BL       debe_clk_enable
;;;186        tcon_clk_enable();
0009b8  ebfffffe          BL       tcon_clk_enable
;;;187    
;;;188        clk_reset_clear(CCU_BUS_SOFT_RST1, 14);
0009bc  e3a0100e          MOV      r1,#0xe
0009c0  e3a00fb1          MOV      r0,#0x2c4
0009c4  ebfffffe          BL       clk_reset_clear
;;;189        clk_reset_clear(CCU_BUS_SOFT_RST1, 12);
0009c8  e3a0100c          MOV      r1,#0xc
0009cc  e3a00fb1          MOV      r0,#0x2c4
0009d0  ebfffffe          BL       clk_reset_clear
;;;190        clk_reset_clear(CCU_BUS_SOFT_RST1, 4);
0009d4  e3a01004          MOV      r1,#4
0009d8  e3a00fb1          MOV      r0,#0x2c4
0009dc  ebfffffe          BL       clk_reset_clear
;;;191    
;;;192        for(uint32_t i = 0x0800; i < 0x1000; i += 4) {
0009e0  e3a05b02          MOV      r5,#0x800
0009e4  ea000004          B        |L1.2556|
                  |L1.2536|
;;;193            write32(DEBE_BASE + i, 0);
0009e8  e2850401          ADD      r0,r5,#0x1000000
0009ec  e28008e6          ADD      r0,r0,#0xe60000
0009f0  e3a01000          MOV      r1,#0
0009f4  ebfffffe          BL       write32
0009f8  e2855004          ADD      r5,r5,#4              ;192
                  |L1.2556|
0009fc  e3550a01          CMP      r5,#0x1000            ;192
000a00  3afffff8          BCC      |L1.2536|
;;;194        }
;;;195    
;;;196        tcon_deinit();
000a04  ebfffffe          BL       tcon_deinit
;;;197        debe_init();
000a08  ebfffffe          BL       debe_init
;;;198        tcon0_init(params);
000a0c  e1a00004          MOV      r0,r4
000a10  ebfffffe          BL       tcon0_init
;;;199        debe_set_bg_color(0);
000a14  e3a00000          MOV      r0,#0
000a18  ebfffffe          BL       debe_set_bg_color
;;;200        de_enable();
000a1c  ebfffffe          BL       de_enable
;;;201        debe_load(DEBE_UPDATE_MANUAL);
000a20  e3a00003          MOV      r0,#3
000a24  ebfffffe          BL       debe_load
;;;202    }
000a28  e8bd8070          POP      {r4-r6,pc}
;;;203    
                          ENDP

                  tcon1_init PROC
;;;412    // TCON1 -> TVE
;;;413    static void tcon1_init(tve_mode_e mode) {
000a2c  e92d4010          PUSH     {r4,lr}
000a30  e1a04000          MOV      r4,r0
;;;414        if(mode == TVE_MODE_NTSC) {
000a34  e3540000          CMP      r4,#0
000a38  1a000012          BNE      |L1.2696|
;;;415            write32(TCON_BASE + TCON1_CTRL, 0x00100130);
000a3c  e59f1178          LDR      r1,|L1.3004|
000a40  e59f00f4          LDR      r0,|L1.2876|
000a44  ebfffffe          BL       write32
;;;416            write32(TCON_BASE + TCON1_TIMING_SRC, ((720 - 1) << 16) | (480 / 2 - 1));
000a48  e59f1170          LDR      r1,|L1.3008|
000a4c  e59f0170          LDR      r0,|L1.3012|
000a50  ebfffffe          BL       write32
;;;417            write32(TCON_BASE + TCON1_TIMING_SCALE, ((720 - 1) << 16) | (480 / 2 - 1));
000a54  e59f1164          LDR      r1,|L1.3008|
000a58  e59f0168          LDR      r0,|L1.3016|
000a5c  ebfffffe          BL       write32
;;;418            write32(TCON_BASE + TCON1_TIMING_OUT, ((720 - 1) << 16) | (480 / 2 - 1));
000a60  e59f1158          LDR      r1,|L1.3008|
000a64  e59f0160          LDR      r0,|L1.3020|
000a68  ebfffffe          BL       write32
;;;419            write32(TCON_BASE + TCON1_TIMING_H, ((858 - 1) << 16) | (117));
000a6c  e59f115c          LDR      r1,|L1.3024|
000a70  e59f015c          LDR      r0,|L1.3028|
000a74  ebfffffe          BL       write32
;;;420            write32(TCON_BASE + TCON1_TIMING_V, (525 << 16) | (18));
000a78  e59f1158          LDR      r1,|L1.3032|
000a7c  e59f0158          LDR      r0,|L1.3036|
000a80  ebfffffe          BL       write32
000a84  ea000013          B        |L1.2776|
                  |L1.2696|
;;;421        } else if(mode == TVE_MODE_PAL) {
000a88  e3540001          CMP      r4,#1
000a8c  1a000011          BNE      |L1.2776|
;;;422            write32(TCON_BASE + TCON1_CTRL, 0x00100150);
000a90  e59f1148          LDR      r1,|L1.3040|
000a94  e59f00a0          LDR      r0,|L1.2876|
000a98  ebfffffe          BL       write32
;;;423            write32(TCON_BASE + TCON1_TIMING_SRC, ((720 - 1) << 16) | (575 / 2 - 1));
000a9c  e59f1140          LDR      r1,|L1.3044|
000aa0  e59f011c          LDR      r0,|L1.3012|
000aa4  ebfffffe          BL       write32
;;;424            write32(TCON_BASE + TCON1_TIMING_SCALE, ((720 - 1) << 16) | (575 / 2 - 1));
000aa8  e59f1134          LDR      r1,|L1.3044|
000aac  e59f0114          LDR      r0,|L1.3016|
000ab0  ebfffffe          BL       write32
;;;425            write32(TCON_BASE + TCON1_TIMING_OUT, ((720 - 1) << 16) | (575 / 2 - 1));
000ab4  e59f1128          LDR      r1,|L1.3044|
000ab8  e59f010c          LDR      r0,|L1.3020|
000abc  ebfffffe          BL       write32
;;;426            write32(TCON_BASE + TCON1_TIMING_H, ((864 - 1) << 16) | (138));
000ac0  e59f1120          LDR      r1,|L1.3048|
000ac4  e59f0108          LDR      r0,|L1.3028|
000ac8  ebfffffe          BL       write32
;;;427            write32(TCON_BASE + TCON1_TIMING_V, (625 << 16) | (22));
000acc  e59f1118          LDR      r1,|L1.3052|
000ad0  e59f0104          LDR      r0,|L1.3036|
000ad4  ebfffffe          BL       write32
                  |L1.2776|
;;;428        }
;;;429    
;;;430        write32(TCON_BASE + TCON1_TIMING_SYNC, 0x00010001);
000ad8  e59f1110          LDR      r1,|L1.3056|
000adc  e59f0110          LDR      r0,|L1.3060|
000ae0  ebfffffe          BL       write32
;;;431        write32(TCON_BASE + TCON1_IO_POLARITY, 0x00000000);
000ae4  e3a01000          MOV      r1,#0
000ae8  e59f0108          LDR      r0,|L1.3064|
000aec  ebfffffe          BL       write32
;;;432        write32(TCON_BASE + TCON1_IO_TRISTATE, 0x0FFFFFFF);
000af0  e3e0120f          MVN      r1,#0xf0000000
000af4  e59f0100          LDR      r0,|L1.3068|
000af8  ebfffffe          BL       write32
;;;433    }
000afc  e8bd8010          POP      {r4,pc}
                  |L1.2816|
                          DCD      0x01e60804
                  |L1.2820|
                          DCD      0x01e60800
                  |L1.2824|
                          DCD      ||de||+0x8
                  |L1.2828|
                          DCD      0x01e60840
                  |L1.2832|
                          DCD      ||de||
                  |L1.2836|
                          DCD      0x01e60820
                  |L1.2840|
                          DCD      0x01e60810
                  |L1.2844|
                          DCD      0x01e60890
                  |L1.2848|
                          DCD      0x01e608a0
                  |L1.2852|
                          DCD      0x01e60850
                  |L1.2856|
                          DCD      0x01e61000
                  |L1.2860|
                          DCD      0x01c0c060
                  |L1.2864|
                          DCD      0x01c0c064
                  |L1.2868|
                          DCD      0x01e60870
                  |L1.2872|
                          DCD      0x01c0c040
                  |L1.2876|
                          DCD      0x01c0c090
                  |L1.2880|
                          DCD      0x01c0c000
                  |L1.2884|
                          DCD      0x01c0c044
                  |L1.2888|
                          DCD      0x01c0c048
                  |L1.2892|
                          DCD      0x01c0c04c
                  |L1.2896|
                          DCD      0x01c0c050
                  |L1.2900|
                          DCD      0x01c0c054
                  |L1.2904|
                          DCD      0x01c0c058
                  |L1.2908|
                          DCD      0x11111111
                  |L1.2912|
                          DCD      0x01c0c014
                  |L1.2916|
                          DCD      0x01c0c018
                  |L1.2920|
                          DCD      0x01c0c01c
                  |L1.2924|
                          DCD      0x01c0c020
                  |L1.2928|
                          DCD      0x01c0c024
                  |L1.2932|
                          DCD      0x01c0c028
                  |L1.2936|
                          DCD      0x01010000
                  |L1.2940|
                          DCD      0x01c0c02c
                  |L1.2944|
                          DCD      0x15151111
                  |L1.2948|
                          DCD      0x01c0c030
                  |L1.2952|
                          DCD      0x57575555
                  |L1.2956|
                          DCD      0x01c0c034
                  |L1.2960|
                          DCD      0x7f7f7777
                  |L1.2964|
                          DCD      0x01c0c038
                  |L1.2968|
                          DCD      0x01c0c010
                  |L1.2972|
                          DCD      0x01c0c088
                  |L1.2976|
                          DCD      0x01c0c08c
                  |L1.2980|
                          DCD      0x00002009
                  |L1.2984|
                          DCD      0x01e60000
                  |L1.2988|
                          DCD      0x01e60004
                  |L1.2992|
                          DCD      0x01e60044
                  |L1.2996|
                          DCD      0x01e6008c
                  |L1.3000|
                          DCD      0x01e600f4
                  |L1.3004|
                          DCD      0x00100130
                  |L1.3008|
                          DCD      0x02cf00ef
                  |L1.3012|
                          DCD      0x01c0c094
                  |L1.3016|
                          DCD      0x01c0c098
                  |L1.3020|
                          DCD      0x01c0c09c
                  |L1.3024|
                          DCD      0x03590075
                  |L1.3028|
                          DCD      0x01c0c0a0
                  |L1.3032|
                          DCD      0x020d0012
                  |L1.3036|
                          DCD      0x01c0c0a4
                  |L1.3040|
                          DCD      0x00100150
                  |L1.3044|
                          DCD      0x02cf011e
                  |L1.3048|
                          DCD      0x035f008a
                  |L1.3052|
                          DCD      0x02710016
                  |L1.3056|
                          DCD      0x00010001
                  |L1.3060|
                          DCD      0x01c0c0a8
                  |L1.3064|
                          DCD      0x01c0c0f0
                  |L1.3068|
                          DCD      0x01c0c0f4
                          ENDP

                  de_tv_init PROC
;;;232    
;;;233    void de_tv_init(tve_mode_e mode, uint16_t hor_lines) {
000c00  e92d4070          PUSH     {r4-r6,lr}
000c04  e1a05000          MOV      r5,r0
000c08  e1a06001          MOV      r6,r1
;;;234        de.mode   = DE_TV;
000c0c  e3a00001          MOV      r0,#1
000c10  e51f1108          LDR      r1,|L1.2832|
000c14  e5c10020          STRB     r0,[r1,#0x20]  ; de
;;;235        de.width  = 720;
000c18  e3a00e2d          MOV      r0,#0x2d0
000c1c  e5810000          STR      r0,[r1,#0]  ; de
;;;236        de.height = (mode == TVE_MODE_NTSC) ? (480) : (576);
000c20  e3550000          CMP      r5,#0
000c24  1a000001          BNE      |L1.3120|
000c28  e3a00e1e          MOV      r0,#0x1e0
000c2c  ea000000          B        |L1.3124|
                  |L1.3120|
000c30  e3a00d09          MOV      r0,#0x240
                  |L1.3124|
000c34  e51f112c          LDR      r1,|L1.2832|
000c38  e5810004          STR      r0,[r1,#4]  ; de
;;;237    
;;;238        clk_reset_set(CCU_BUS_SOFT_RST1, 14);
000c3c  e3a0100e          MOV      r1,#0xe
000c40  e3a00fb1          MOV      r0,#0x2c4
000c44  ebfffffe          BL       clk_reset_set
;;;239        clk_reset_set(CCU_BUS_SOFT_RST1, 12);
000c48  e3a0100c          MOV      r1,#0xc
000c4c  e3a00fb1          MOV      r0,#0x2c4
000c50  ebfffffe          BL       clk_reset_set
;;;240        clk_reset_set(CCU_BUS_SOFT_RST1, 4);
000c54  e3a01004          MOV      r1,#4
000c58  e3a00fb1          MOV      r0,#0x2c4
000c5c  ebfffffe          BL       clk_reset_set
;;;241    
;;;242        debe_clk_init();
000c60  ebfffffe          BL       debe_clk_init
;;;243        defe_clk_init();
000c64  ebfffffe          BL       defe_clk_init
;;;244        tcon_clk_init();
000c68  ebfffffe          BL       tcon_clk_init
;;;245    
;;;246        defe_clk_enable();
000c6c  ebfffffe          BL       defe_clk_enable
;;;247        debe_clk_enable();
000c70  ebfffffe          BL       debe_clk_enable
;;;248        tcon_clk_enable();
000c74  ebfffffe          BL       tcon_clk_enable
;;;249    
;;;250        clk_reset_clear(CCU_BUS_SOFT_RST1, 14);
000c78  e3a0100e          MOV      r1,#0xe
000c7c  e3a00fb1          MOV      r0,#0x2c4
000c80  ebfffffe          BL       clk_reset_clear
;;;251        clk_reset_clear(CCU_BUS_SOFT_RST1, 12);
000c84  e3a0100c          MOV      r1,#0xc
000c88  e3a00fb1          MOV      r0,#0x2c4
000c8c  ebfffffe          BL       clk_reset_clear
;;;252        clk_reset_clear(CCU_BUS_SOFT_RST1, 4);
000c90  e3a01004          MOV      r1,#4
000c94  e3a00fb1          MOV      r0,#0x2c4
000c98  ebfffffe          BL       clk_reset_clear
;;;253    
;;;254        for(uint32_t i = 0x0800; i < 0x1000; i += 4) {
000c9c  e3a04b02          MOV      r4,#0x800
000ca0  ea000004          B        |L1.3256|
                  |L1.3236|
;;;255            write32(DEBE_BASE + i, 0);
000ca4  e2840401          ADD      r0,r4,#0x1000000
000ca8  e28008e6          ADD      r0,r0,#0xe60000
000cac  e3a01000          MOV      r1,#0
000cb0  ebfffffe          BL       write32
000cb4  e2844004          ADD      r4,r4,#4              ;254
                  |L1.3256|
000cb8  e3540a01          CMP      r4,#0x1000            ;254
000cbc  3afffff8          BCC      |L1.3236|
;;;256        }
;;;257    
;;;258        tcon_deinit();
000cc0  ebfffffe          BL       tcon_deinit
;;;259        debe_init();
000cc4  ebfffffe          BL       debe_init
;;;260        tcon1_init(mode);
000cc8  e1a00005          MOV      r0,r5
000ccc  ebfffffe          BL       tcon1_init
;;;261    
;;;262        // CSC configuration
;;;263        for(uint8_t i = 0; i < 4; i++) {
000cd0  e3a04000          MOV      r4,#0
000cd4  ea000018          B        |L1.3388|
                  |L1.3288|
;;;264            write32(DEBE_BASE + DEBE_COLOR_COEF + i * 4 + 0 * 4, csc_tab[12 * 3 + i] << 16);
000cd8  e2842024          ADD      r2,r4,#0x24
000cdc  e59f32d4          LDR      r3,|L1.4024|
000ce0  e7932102          LDR      r2,[r3,r2,LSL #2]
000ce4  e1a01802          LSL      r1,r2,#16
000ce8  e59f22cc          LDR      r2,|L1.4028|
000cec  e0820104          ADD      r0,r2,r4,LSL #2
000cf0  ebfffffe          BL       write32
;;;265            write32(DEBE_BASE + DEBE_COLOR_COEF + i * 4 + 4 * 4, csc_tab[12 * 3 + i + 4] << 16);
000cf4  e2842028          ADD      r2,r4,#0x28
000cf8  e59f32b8          LDR      r3,|L1.4024|
000cfc  e7932102          LDR      r2,[r3,r2,LSL #2]
000d00  e1a01802          LSL      r1,r2,#16
000d04  e59f22b0          LDR      r2,|L1.4028|
000d08  e0822104          ADD      r2,r2,r4,LSL #2
000d0c  e2820010          ADD      r0,r2,#0x10
000d10  ebfffffe          BL       write32
;;;266            write32(DEBE_BASE + DEBE_COLOR_COEF + i * 4 + 8 * 4, csc_tab[12 * 3 + i + 8] << 16);
000d14  e284202c          ADD      r2,r4,#0x2c
000d18  e59f3298          LDR      r3,|L1.4024|
000d1c  e7932102          LDR      r2,[r3,r2,LSL #2]
000d20  e1a01802          LSL      r1,r2,#16
000d24  e59f2290          LDR      r2,|L1.4028|
000d28  e0822104          ADD      r2,r2,r4,LSL #2
000d2c  e2820020          ADD      r0,r2,#0x20
000d30  ebfffffe          BL       write32
000d34  e2840001          ADD      r0,r4,#1              ;263
000d38  e20040ff          AND      r4,r0,#0xff           ;263
                  |L1.3388|
000d3c  e3540004          CMP      r4,#4                 ;263
000d40  baffffe4          BLT      |L1.3288|
;;;267        }
;;;268    
;;;269        set32(DEBE_BASE + DEBE_MODE, (1 << 5)); // CSC enable
000d44  e51f0248          LDR      r0,|L1.2820|
000d48  ebfffffe          BL       read32
000d4c  e3804020          ORR      r4,r0,#0x20
000d50  e1a01004          MOV      r1,r4
000d54  e51f0258          LDR      r0,|L1.2820|
000d58  ebfffffe          BL       write32
;;;270    
;;;271        debe_set_bg_color(0);
000d5c  e3a00000          MOV      r0,#0
000d60  ebfffffe          BL       debe_set_bg_color
;;;272        de_enable();
000d64  ebfffffe          BL       de_enable
;;;273        debe_load(DEBE_UPDATE_MANUAL);
000d68  e3a00003          MOV      r0,#3
000d6c  ebfffffe          BL       debe_load
;;;274    
;;;275        tve_init(mode);
000d70  e1a00005          MOV      r0,r5
000d74  ebfffffe          BL       tve_init
;;;276    }
000d78  e8bd8070          POP      {r4-r6,pc}
;;;277    
                          ENDP

                  de_diable PROC
;;;288    
;;;289    void de_diable(void) {
000d7c  e92d4010          PUSH     {r4,lr}
;;;290        if(de.mode == DE_TV) {
000d80  e51f0278          LDR      r0,|L1.2832|
000d84  e5d00020          LDRB     r0,[r0,#0x20]  ; de
000d88  e3500001          CMP      r0,#1
000d8c  1a000000          BNE      |L1.3476|
;;;291            tve_disable();
000d90  ebfffffe          BL       tve_disable
                  |L1.3476|
;;;292        }
;;;293        clear32(TCON_BASE + TCON_CTRL, (1 << 31));
000d94  e51f025c          LDR      r0,|L1.2880|
000d98  ebfffffe          BL       read32
000d9c  e3c04102          BIC      r4,r0,#0x80000000
000da0  e1a01004          MOV      r1,r4
000da4  e51f026c          LDR      r0,|L1.2880|
000da8  ebfffffe          BL       write32
;;;294        clear32(DEBE_BASE + DEBE_MODE, (1 << 0));
000dac  e51f02b0          LDR      r0,|L1.2820|
000db0  ebfffffe          BL       read32
000db4  e3c04001          BIC      r4,r0,#1
000db8  e1a01004          MOV      r1,r4
000dbc  e51f02c0          LDR      r0,|L1.2820|
000dc0  ebfffffe          BL       write32
;;;295    }
000dc4  e8bd8010          POP      {r4,pc}
;;;296    
                          ENDP

                  defe_init_spl_422 PROC
;;;302    // Initialize DEFE in semi-planar YUV 4:2:2 input mode
;;;303    void defe_init_spl_422(uint16_t in_w, uint16_t in_h, uint8_t* buf_y, uint8_t* buf_uv) {
000dc8  e92d41f0          PUSH     {r4-r8,lr}
000dcc  e1a05000          MOV      r5,r0
000dd0  e1a06001          MOV      r6,r1
000dd4  e1a07002          MOV      r7,r2
000dd8  e1a08003          MOV      r8,r3
;;;304        set32(DEFE_BASE + DEFE_EN, 0x01); // Enable DEFE
000ddc  e3a0061e          MOV      r0,#0x1e00000
000de0  ebfffffe          BL       read32
000de4  e3804001          ORR      r4,r0,#1
000de8  e1a01004          MOV      r1,r4
000dec  e3a0061e          MOV      r0,#0x1e00000
000df0  ebfffffe          BL       write32
;;;305        set32(DEFE_BASE + DEFE_EN, (1 << 31)); // Enable CPU access
000df4  e3a0061e          MOV      r0,#0x1e00000
000df8  ebfffffe          BL       read32
000dfc  e3804102          ORR      r4,r0,#0x80000000
000e00  e1a01004          MOV      r1,r4
000e04  e3a0061e          MOV      r0,#0x1e00000
000e08  ebfffffe          BL       write32
;;;306    
;;;307        write32(DEFE_BASE + DEFE_BYPASS, (0 << 0) | (0 << 1)); // CSC/scaler bypass disabled
000e0c  e3a01000          MOV      r1,#0
000e10  e59f01a8          LDR      r0,|L1.4032|
000e14  ebfffffe          BL       write32
;;;308    
;;;309        write32(DEFE_BASE + DEFE_ADDR0, (uint32_t)buf_y);
000e18  e1a01007          MOV      r1,r7
000e1c  e59f01a0          LDR      r0,|L1.4036|
000e20  ebfffffe          BL       write32
;;;310        write32(DEFE_BASE + DEFE_ADDR1, (uint32_t)buf_uv);
000e24  e1a01008          MOV      r1,r8
000e28  e59f0198          LDR      r0,|L1.4040|
000e2c  ebfffffe          BL       write32
;;;311        write32(DEFE_BASE + DEFE_STRIDE0, in_w);
000e30  e1a01005          MOV      r1,r5
000e34  e59f0190          LDR      r0,|L1.4044|
000e38  ebfffffe          BL       write32
;;;312        write32(DEFE_BASE + DEFE_STRIDE1, in_w);
000e3c  e1a01005          MOV      r1,r5
000e40  e59f0188          LDR      r0,|L1.4048|
000e44  ebfffffe          BL       write32
;;;313    
;;;314        write32(DEFE_BASE + DEFE_IN_SIZE, (in_w - 1) | ((in_h - 1) << 16)); // Out size = In size
000e48  e2450001          SUB      r0,r5,#1
000e4c  e2462001          SUB      r2,r6,#1
000e50  e1801802          ORR      r1,r0,r2,LSL #16
000e54  e59f0178          LDR      r0,|L1.4052|
000e58  ebfffffe          BL       write32
;;;315        write32(DEFE_BASE + DEFE_OUT_SIZE, (in_w - 1) | ((in_h - 1) << 16));
000e5c  e2450001          SUB      r0,r5,#1
000e60  e2462001          SUB      r2,r6,#1
000e64  e1801802          ORR      r1,r0,r2,LSL #16
000e68  e59f0168          LDR      r0,|L1.4056|
000e6c  ebfffffe          BL       write32
;;;316        write32(DEFE_BASE + DEFE_H_FACT, (1 << 16)); // H scale: 1
000e70  e3a01801          MOV      r1,#0x10000
000e74  e59f0160          LDR      r0,|L1.4060|
000e78  ebfffffe          BL       write32
;;;317        if(de.mode == DE_LCD)
000e7c  e51f0374          LDR      r0,|L1.2832|
000e80  e5d00020          LDRB     r0,[r0,#0x20]  ; de
000e84  e3500000          CMP      r0,#0
000e88  1a000003          BNE      |L1.3740|
;;;318            write32(DEFE_BASE + DEFE_V_FACT, (1 << 16)); // V scale: 1
000e8c  e3a01801          MOV      r1,#0x10000
000e90  e59f0148          LDR      r0,|L1.4064|
000e94  ebfffffe          BL       write32
000e98  ea000006          B        |L1.3768|
                  |L1.3740|
;;;319        else if(de.mode == DE_TV)
000e9c  e51f0394          LDR      r0,|L1.2832|
000ea0  e5d00020          LDRB     r0,[r0,#0x20]  ; de
000ea4  e3500001          CMP      r0,#1
000ea8  1a000002          BNE      |L1.3768|
;;;320            write32(DEFE_BASE + DEFE_V_FACT, (2 << 16)); // V scale: 1/2 (??)
000eac  e3a01802          MOV      r1,#0x20000
000eb0  e59f0128          LDR      r0,|L1.4064|
000eb4  ebfffffe          BL       write32
                  |L1.3768|
;;;321    
;;;322        write32(DEFE_BASE + DEFE_IN_FMT, (2 << 8) | (1 << 4)); // UV combined | 422
000eb8  e3a01e21          MOV      r1,#0x210
000ebc  e59f0120          LDR      r0,|L1.4068|
000ec0  ebfffffe          BL       write32
;;;323        set32(DEFE_BASE + DEFE_OUT_FMT, (1 << 4)); //??
000ec4  e59f011c          LDR      r0,|L1.4072|
000ec8  ebfffffe          BL       read32
000ecc  e3804010          ORR      r4,r0,#0x10
000ed0  e1a01004          MOV      r1,r4
000ed4  e59f010c          LDR      r0,|L1.4072|
000ed8  ebfffffe          BL       write32
;;;324        //write32(DEFE_BASE+DEFE_FIELD_CTRL, (1 << 12)); //?
;;;325    
;;;326        for(uint8_t i = 0; i < 4; i++) // Color conversion table
000edc  e3a04000          MOV      r4,#0
000ee0  ea000014          B        |L1.3896|
                  |L1.3812|
;;;327        {
;;;328            write32(DEFE_BASE + DEFE_CSC_COEF + i * 4 + 0 * 4, csc_tab[i]);
000ee4  e59f20cc          LDR      r2,|L1.4024|
000ee8  e7921104          LDR      r1,[r2,r4,LSL #2]
000eec  e59f20f8          LDR      r2,|L1.4076|
000ef0  e0820104          ADD      r0,r2,r4,LSL #2
000ef4  ebfffffe          BL       write32
;;;329            write32(DEFE_BASE + DEFE_CSC_COEF + i * 4 + 4 * 4, csc_tab[i + 4]);
000ef8  e59f20b8          LDR      r2,|L1.4024|
000efc  e2843004          ADD      r3,r4,#4
000f00  e7921103          LDR      r1,[r2,r3,LSL #2]
000f04  e59f20e0          LDR      r2,|L1.4076|
000f08  e0822104          ADD      r2,r2,r4,LSL #2
000f0c  e2820010          ADD      r0,r2,#0x10
000f10  ebfffffe          BL       write32
;;;330            write32(DEFE_BASE + DEFE_CSC_COEF + i * 4 + 8 * 4, csc_tab[i + 8]);
000f14  e59f209c          LDR      r2,|L1.4024|
000f18  e2843008          ADD      r3,r4,#8
000f1c  e7921103          LDR      r1,[r2,r3,LSL #2]
000f20  e59f20c4          LDR      r2,|L1.4076|
000f24  e0822104          ADD      r2,r2,r4,LSL #2
000f28  e2820020          ADD      r0,r2,#0x20
000f2c  ebfffffe          BL       write32
000f30  e2840001          ADD      r0,r4,#1              ;326
000f34  e20040ff          AND      r4,r0,#0xff           ;326
                  |L1.3896|
000f38  e3540004          CMP      r4,#4                 ;326
000f3c  baffffe8          BLT      |L1.3812|
;;;331        }
;;;332    
;;;333        set32(
000f40  e59f00a8          LDR      r0,|L1.4080|
000f44  ebfffffe          BL       read32
000f48  e3804502          ORR      r4,r0,#0x800000
000f4c  e1a01004          MOV      r1,r4
000f50  e59f0098          LDR      r0,|L1.4080|
000f54  ebfffffe          BL       write32
;;;334            DEFE_BASE + DEFE_FRM_CTRL,
;;;335            (1 << 23)); // Enable CPU access to filter RAM (if enabled, filter is bypassed?)
;;;336    
;;;337        //    for (uint16_t i = 0; i < 32; i++) // TODO:
;;;338        //    {
;;;339        //        write32(DEFE_BASE+DEFE_CH0_H_COEF+i*4, fir_tab[32*1+i]);
;;;340        //        write32(DEFE_BASE+DEFE_CH0_V_COEF+i*4, fir_tab[32*1+i]);
;;;341        //        write32(DEFE_BASE+DEFE_CH1_H_COEF+i*4, fir_tab[32*1+i]);
;;;342        //        write32(DEFE_BASE+DEFE_CH1_V_COEF+i*4, fir_tab[32*1+i]);
;;;343        //    }
;;;344        //    clear32(DEFE_BASE+DEFE_FRM_CTRL, (1 << 23)); // Disable CPU access to filter RAM (enable filter?)
;;;345    
;;;346        clear32(DEFE_BASE + DEFE_EN, (1 << 31)); // Disable CPU access (?)
000f58  e3a0061e          MOV      r0,#0x1e00000
000f5c  ebfffffe          BL       read32
000f60  e3c04102          BIC      r4,r0,#0x80000000
000f64  e1a01004          MOV      r1,r4
000f68  e3a0061e          MOV      r0,#0x1e00000
000f6c  ebfffffe          BL       write32
;;;347        set32(DEFE_BASE + DEFE_FRM_CTRL, (1 << 0)); // Registers ready
000f70  e59f0078          LDR      r0,|L1.4080|
000f74  ebfffffe          BL       read32
000f78  e3804001          ORR      r4,r0,#1
000f7c  e1a01004          MOV      r1,r4
000f80  e59f0068          LDR      r0,|L1.4080|
000f84  ebfffffe          BL       write32
;;;348        set32(DEFE_BASE + DEFE_FRM_CTRL, (1 << 16)); // Start frame processing
000f88  e59f0060          LDR      r0,|L1.4080|
000f8c  ebfffffe          BL       read32
000f90  e3804801          ORR      r4,r0,#0x10000
000f94  e1a01004          MOV      r1,r4
000f98  e59f0050          LDR      r0,|L1.4080|
000f9c  ebfffffe          BL       write32
;;;349    }
000fa0  e8bd81f0          POP      {r4-r8,pc}
;;;350    
                          ENDP

                  read32 PROC
;;;19     
;;;20     static __inline uint32_t read32(uint32_t addr)
000fa4  e1a01000          MOV      r1,r0
;;;21     {
;;;22       return (*((volatile uint32_t*)(addr)));
000fa8  e5910000          LDR      r0,[r1,#0]
;;;23     }
000fac  e12fff1e          BX       lr
;;;24     
                          ENDP

                  write32 PROC
;;;39     
;;;40     static __inline void write32(uint32_t addr, uint32_t value)
000fb0  e5801000          STR      r1,[r0,#0]
;;;41     {
;;;42       *((volatile uint32_t*)(addr)) = value;
;;;43     }
000fb4  e12fff1e          BX       lr
;;;44     
                          ENDP

                  |L1.4024|
                          DCD      csc_tab
                  |L1.4028|
                          DCD      0x01e60950
                  |L1.4032|
                          DCD      0x01e00008
                  |L1.4036|
                          DCD      0x01e00020
                  |L1.4040|
                          DCD      0x01e00024
                  |L1.4044|
                          DCD      0x01e00040
                  |L1.4048|
                          DCD      0x01e00044
                  |L1.4052|
                          DCD      0x01e00100
                  |L1.4056|
                          DCD      0x01e00104
                  |L1.4060|
                          DCD      0x01e00108
                  |L1.4064|
                          DCD      0x01e0010c
                  |L1.4068|
                          DCD      0x01e0004c
                  |L1.4072|
                          DCD      0x01e0005c
                  |L1.4076|
                          DCD      0x01e00070
                  |L1.4080|
                          DCD      0x01e00004

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||de||
                          %        36

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  csc_tab
                          DCD      0x000004a8
                          DCD      0x00001e70
                          DCD      0x00001cbf
                          DCD      0x00000878
                          DCD      0x000004a8
                          DCD      0x00000000
                          DCD      0x00000662
                          DCD      0x00003211
                          DCD      0x000004a8
                          DCD      0x00000812
                          DCD      0x00000000
                          DCD      0x00002eb1
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000204
                          DCD      0x00000107
                          DCD      0x00000064
                          DCD      0x00000100
                          DCD      0x00001ed6
                          DCD      0x00001f68
                          DCD      0x000001c2
                          DCD      0x00000800
                          DCD      0x00001e87
                          DCD      0x000001c2
                          DCD      0x00001fb7
                          DCD      0x00000800
                          DCD      0x000004a8
                          DCD      0x00001f26
                          DCD      0x00001ddd
                          DCD      0x000004d0
                          DCD      0x000004a8
                          DCD      0x00000000
                          DCD      0x0000072c
                          DCD      0x0000307e
                          DCD      0x000004a8
                          DCD      0x00000876
                          DCD      0x00000000
                          DCD      0x00002dea
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000275
                          DCD      0x000000bb
                          DCD      0x0000003f
                          DCD      0x00000100
                          DCD      0x00001ea6
                          DCD      0x00001f99
                          DCD      0x000001c2
                          DCD      0x00000800
                          DCD      0x00001e67
                          DCD      0x000001c2
                          DCD      0x00001fd7
                          DCD      0x00000800
                          DCD      0x00000400
                          DCD      0x00001e9e
                          DCD      0x00001d24
                          DCD      0x0000087b
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x0000059c
                          DCD      0x000034c8
                          DCD      0x00000400
                          DCD      0x00000716
                          DCD      0x00000000
                          DCD      0x000031d5
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000259
                          DCD      0x00000132
                          DCD      0x00000075
                          DCD      0x00000000
                          DCD      0x00001ead
                          DCD      0x00001f53
                          DCD      0x00000200
                          DCD      0x00000800
                          DCD      0x00001e54
                          DCD      0x00000200
                          DCD      0x00001fac
                          DCD      0x00000800
                          DCD      0x000004a8
                          DCD      0x00001f26
                          DCD      0x00001ddd
                          DCD      0x000004d0
                          DCD      0x000004a8
                          DCD      0x00000000
                          DCD      0x0000072c
                          DCD      0x0000307e
                          DCD      0x000004a8
                          DCD      0x00000876
                          DCD      0x00000000
                          DCD      0x00002dea
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000400
                          DCD      0x00000000
                          DCD      0x00000275
                          DCD      0x000000bb
                          DCD      0x0000003f
                          DCD      0x00000100
                          DCD      0x00001ea6
                          DCD      0x00001f99
                          DCD      0x000001c2
                          DCD      0x00000800
                          DCD      0x00001e67
                          DCD      0x000001c2
                          DCD      0x00001fd7
                          DCD      0x00000800
