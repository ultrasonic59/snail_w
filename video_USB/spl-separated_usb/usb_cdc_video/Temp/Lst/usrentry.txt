; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usrentry.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usrentry.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usrentry.crf users\usrentry.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                  usb_task PROC
                  |L1.0|
;;;58     #endif
;;;59     __task void usb_task() {
000000  e1a00000          MOV      r0,r0
                  |L1.4|
;;;60       for (;;) {
;;;61     		tud_task();
000004  e1a00000          MOV      r0,r0
000008  e3a01000          MOV      r1,#0
00000c  e3e00000          MVN      r0,#0
000010  ebfffffe          BL       tud_task_ext
000014  e1a00000          MOV      r0,r0
000018  eafffff9          B        |L1.4|
;;;62     	}
;;;63     }
;;;64     ///==================================================================
                          ENDP

                  tvin_init PROC
;;;65     int tvin_init()
00001c  e92d401c          PUSH     {r2-r4,lr}
;;;66     {
;;;67     uint16_t tv_w, tv_h;
;;;68     tvd_init(TVD_MODE_PAL_B, fb_y, fb_c, 0);
000020  e3a03000          MOV      r3,#0
000024  e59f20d0          LDR      r2,|L1.252|
000028  e59f10d0          LDR      r1,|L1.256|
00002c  e3a00002          MOV      r0,#2
000030  ebfffffe          BL       tvd_init
;;;69     tvd_set_out_fmt(TVD_FMT_422_PL);
000034  e3a00010          MOV      r0,#0x10
000038  ebfffffe          BL       tvd_set_out_fmt
;;;70      //// tvd_set_out_fmt(TVD_FMT_422_PL|TVD_FMT_SWAP_UV);
;;;71     //// tvd_set_out_fmt(TVD_FMT_420_PL);
;;;72     ////  tvd_set_out_fmt(TVD_FMT_420_MB);
;;;73     	
;;;74         tvd_get_out_size(&tv_w, &tv_h);
00003c  e1a0100d          MOV      r1,sp
000040  e28d0004          ADD      r0,sp,#4
000044  ebfffffe          BL       tvd_get_out_size
;;;75     	
;;;76     		printf("tvin_init Size: [%u][%u]\n", tv_w,tv_h);
000048  e1dd20b0          LDRH     r2,[sp,#0]
00004c  e1dd10b4          LDRH     r1,[sp,#4]
000050  e28f00ac          ADR      r0,|L1.260|
000054  ebfffffe          BL       __2printf
;;;77     	
;;;78         tvd_set_bluescreen_mode(TVD_BLUE_OFF);
000058  e3a00000          MOV      r0,#0
00005c  ebfffffe          BL       tvd_set_bluescreen_mode
;;;79     
;;;80         defe_init_spl_422(tv_w, tv_h, fb_y, fb_c);
000060  e59f3094          LDR      r3,|L1.252|
000064  e59f2094          LDR      r2,|L1.256|
000068  e1dd10b0          LDRH     r1,[sp,#0]
00006c  e1dd00b4          LDRH     r0,[sp,#4]
000070  ebfffffe          BL       defe_init_spl_422
;;;81     
;;;82         debe_layer_init(0); // Layer 0 - video
000074  e3a00000          MOV      r0,#0
000078  ebfffffe          BL       debe_layer_init
;;;83         debe_layer_set_size(0, tv_w, tv_h);
00007c  e1dd20b0          LDRH     r2,[sp,#0]
000080  e1dd10b4          LDRH     r1,[sp,#4]
000084  e3a00000          MOV      r0,#0
000088  ebfffffe          BL       debe_layer_set_size
;;;84     		
;;;85         debe_layer_set_mode(0, DEBE_MODE_DEFE_VIDEO);
00008c  e3a01040          MOV      r1,#0x40
000090  e3a00000          MOV      r0,#0
000094  ebfffffe          BL       debe_layer_set_mode
;;;86      ////   debe_layer_set_mode(0, DEBE_MODE_YUV);
;;;87     		
;;;88         debe_layer_enable(0);
000098  e3a00000          MOV      r0,#0
00009c  ebfffffe          BL       debe_layer_enable
;;;89         tvd_enable();
0000a0  ebfffffe          BL       tvd_enable
;;;90     	
;;;91     return 0;	
0000a4  e3a00000          MOV      r0,#0
;;;92     }
0000a8  e8bd801c          POP      {r2-r4,pc}
;;;93     ////=====================================================================
                          ENDP

                  UserEntryInit PROC
;;;100    ///==================================================================
;;;101    void UserEntryInit(void)
0000ac  e92d4010          PUSH     {r4,lr}
;;;102    {
;;;103    uint32_t *p_val;
;;;104    target_wdt_feed();
0000b0  ebfffffe          BL       target_wdt_feed
;;;105    
;;;106    printf("DDR Size: %uMB\n", (*(uint32_t*)0x5c) & 0xFFFFFF);
0000b4  e3a00000          MOV      r0,#0
0000b8  e590005c          LDR      r0,[r0,#0x5c]
0000bc  e3c014ff          BIC      r1,r0,#0xff000000
0000c0  e28f0058          ADR      r0,|L1.288|
0000c4  ebfffffe          BL       __2printf
;;;107    ///===========================================
;;;108    	
;;;109    #if 0	
;;;110    display_init();
;;;111    display_set_bl(100);
;;;112    debe_set_bg_color(0xFFFF0000);
;;;113    debe_load(DEBE_UPDATE_AUTO);
;;;114    #endif
;;;115    ///==================================	
;;;116    ///// tvin_init();
;;;117    ///==================================	
;;;118    #if 0	
;;;119        lcd_init(1); // Layer 1 - overlay
;;;120     ////   lcd_init(0); // Layer 1 - overlay
;;;121        lcd_fill(0, 0, DISPLAY_W, DISPLAY_H, COLOR_TRANSPARENT);
;;;122        lcd_set_bg_color(0x80080000);
;;;123        lcd_set_text_color(COLOR_WHITE);
;;;124        lcd_set_text_pos(300, 0);
;;;125        lcd_printf("====== PAL==========");
;;;126    #if 0		
;;;127    while(1) {
;;;128            lcd_set_text_pos(600, 0);
;;;129            uint32_t val = read32(TVD_BASE + TVD_STATE_0);
;;;130            lcd_printf("%08lX\n", val);
;;;131            val = read32(TVD_BASE + TVD_STATE_1);
;;;132            lcd_printf("%08lX\n", val);
;;;133            val = read32(TVD_BASE + TVD_STATE_2);
;;;134            lcd_printf("ST2=%08lX\n", val);
;;;135            val = read32(TVD_BASE + TVD_STATE_3);
;;;136            lcd_printf("%08lX\n", val);
;;;137            val = read32(TVD_BASE + TVD_STATE_4);
;;;138            lcd_printf("%08lX\n", val);
;;;139    	////====================================
;;;140    	p_val= (uint32_t *)&fb_c[4420];
;;;141            val = *p_val;
;;;142            lcd_printf("%08lX\n", val);
;;;143    	p_val= (uint32_t *)&fb_y[4420];
;;;144            val = *p_val;
;;;145            lcd_printf("%08lX\n", val);
;;;146        }
;;;147    		#endif
;;;148    #endif
;;;149    ///===========================================
;;;150    ////	os_tsk_create(lcd_task, 11);
;;;151    
;;;152    tusb_init();
0000c8  ebfffffe          BL       tusb_init
;;;153    	
;;;154    ////  printf("DDR size: %uMB\n", (*(uint32_t*)0x5c) & 0xFFFFFF);
;;;155    	os_tsk_create(usb_task, 10);
0000cc  e3a03000          MOV      r3,#0
0000d0  e1a02003          MOV      r2,r3
0000d4  e3a0100a          MOV      r1,#0xa
0000d8  e24f00e0          ADR      r0,|L1.0|
0000dc  ebfffffe          BL       os_tsk_create0
;;;156      /////printf("time: %x\n", board_millis());
;;;157    ////	os_tsk_create(video_task, 8);
;;;158      /////printf("time1: %x\n", board_millis());
;;;159    /////	os_tsk_create(video_task, 10);
;;;160    	
;;;161    /////  printf("\n\rvideo_probe_and_commit_control_t [%u]\n", sizeof(video_probe_and_commit_control_t));
;;;162    	
;;;163    }
0000e0  e8bd8010          POP      {r4,pc}
;;;164    extern void video_tsk(void);
                          ENDP

                  UserEntryLoop PROC
;;;167    #define BEG_POS 20
;;;168    void UserEntryLoop(void)
0000e4  e1a00000          MOV      r0,r0
                  |L1.232|
;;;169    {
;;;170    ////	uint32_t *p_val;
;;;171    ////	uint32_t val;
;;;172      for (;;) {
;;;173        target_wdt_feed();
0000e8  ebfffffe          BL       target_wdt_feed
;;;174    ////		sys_delay(500);
;;;175    		sys_delay(2);
0000ec  e3a00002          MOV      r0,#2
0000f0  ebfffffe          BL       os_dly_wait
;;;176    		video_tsk();
0000f4  ebfffffe          BL       video_tsk
0000f8  eafffffa          B        |L1.232|
;;;177    		
;;;178    	////	  printf("time1: %x\n", board_millis());
;;;179    		#if 0
;;;180    /////while(1) 
;;;181    	{
;;;182            lcd_set_text_pos(600, 0);
;;;183    	#if 0	
;;;184            uint32_t val = read32(TVD_BASE + TVD_STATE_0);
;;;185            lcd_printf("%08lX\n", val);
;;;186            val = read32(TVD_BASE + TVD_STATE_1);
;;;187            lcd_printf("%08lX\n", val);
;;;188            val = read32(TVD_BASE + TVD_STATE_2);
;;;189            lcd_printf("ST2=%08lX\n", val);
;;;190            val = read32(TVD_BASE + TVD_STATE_3);
;;;191            lcd_printf("%08lX\n", val);
;;;192            val = read32(TVD_BASE + TVD_STATE_4);
;;;193            lcd_printf("%08lX\n", val);
;;;194    		#endif
;;;195    	////====================================
;;;196    		#if 0
;;;197    				p_val= (uint32_t *)&fb_c[BEG_POS];
;;;198            val = *p_val;
;;;199            lcd_printf("%08lX\n", val);
;;;200    				p_val= (uint32_t *)&fb_y[BEG_POS];
;;;201            val = *p_val;
;;;202            lcd_printf("%08lX\n", val);
;;;203    		
;;;204    				p_val= (uint32_t *)&fb_c[BEG_POS+4];
;;;205            val = *p_val;
;;;206            lcd_printf("%08lX\n", val);
;;;207    				p_val= (uint32_t *)&fb_y[BEG_POS+4];
;;;208            val = *p_val;
;;;209            lcd_printf("%08lX\n", val);
;;;210    		
;;;211    		
;;;212    				p_val= (uint32_t *)&fb_c[BEG_POS+8];
;;;213            val = *p_val;
;;;214            lcd_printf("%08lX\n", val);
;;;215    				p_val= (uint32_t *)&fb_y[BEG_POS+8];
;;;216            val = *p_val;
;;;217            lcd_printf("%08lX\n", val);
;;;218    		
;;;219    				p_val= (uint32_t *)&fb_c[BEG_POS+12];
;;;220            val = *p_val;
;;;221            lcd_printf("%08lX\n", val);
;;;222    				p_val= (uint32_t *)&fb_y[BEG_POS+12];
;;;223            val = *p_val;
;;;224            lcd_printf("%08lX\n", val);
;;;225    	#endif	
;;;226    	
;;;227    		
;;;228        }
;;;229    	#endif
;;;230      }
;;;231    }
;;;232    
                          ENDP

                  |L1.252|
                          DCD      fb_c
                  |L1.256|
                          DCD      fb_y
                  |L1.260|
000104  7476696e          DCB      "tvin_init Size: [%u][%u]\n",0
000108  5f696e69
00010c  74205369
000110  7a653a20
000114  5b25755d
000118  5b25755d
00011c  0a00    
00011e  00                DCB      0
00011f  00                DCB      0
                  |L1.288|
000120  44445220          DCB      "DDR Size: %uMB\n",0
000124  53697a65
000128  3a202575
00012c  4d420a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fb_y
                          %        414720
                  fb_c
                          %        414720
                  buf
                          %        512
                  fb_f1c100s
                          %        28

                          AREA ||.data||, DATA, ALIGN=2

                  render
                          DCD      0x00000000
