; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\fb-f1c100s.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\fb-f1c100s.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\fb-f1c100s.crf ..\periph\fb-f1c100s.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  f1c100s_debe_set_mode PROC
;;;143    
;;;144    inline static void f1c100s_debe_set_mode(fb_f1c100s_priv_data_t* pdat)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;145    {
000004  e1a05000          MOV      r5,r0
;;;146      struct f1c100s_debe_reg_t* debe = (struct f1c100s_debe_reg_t*)(pdat->virtdebe);
000008  e5954004          LDR      r4,[r5,#4]
;;;147      uint32_t val;
;;;148    
;;;149      // enable debe
;;;150      val = read32((uint32_t)&debe->mode);
00000c  e2840b02          ADD      r0,r4,#0x800
000010  ebfffffe          BL       read32
000014  e1a06000          MOV      r6,r0
;;;151      val |= (1 << 0);
000018  e3866001          ORR      r6,r6,#1
;;;152      write32((uint32_t)&debe->mode, val);
00001c  e1a01006          MOV      r1,r6
000020  e2840b02          ADD      r0,r4,#0x800
000024  ebfffffe          BL       write32
;;;153    
;;;154      // non-documentation
;;;155      write32((uint32_t)&debe->disp_size, (((pdat->height) - 1) << 16) | (((pdat->width) - 1) << 0));
000028  e5950024          LDR      r0,[r5,#0x24]
00002c  e2400001          SUB      r0,r0,#1
000030  e1d522b8          LDRH     r2,[r5,#0x28]
000034  e2422001          SUB      r2,r2,#1
000038  e1801802          ORR      r1,r0,r2,LSL #16
00003c  e2840b02          ADD      r0,r4,#0x800
000040  e2800008          ADD      r0,r0,#8
000044  ebfffffe          BL       write32
;;;156      write32((uint32_t)&debe->layer0_size, (((pdat->height) - 1) << 16) | (((pdat->width) - 1) << 0));
000048  e5950024          LDR      r0,[r5,#0x24]
00004c  e2400001          SUB      r0,r0,#1
000050  e1d522b8          LDRH     r2,[r5,#0x28]
000054  e2422001          SUB      r2,r2,#1
000058  e1801802          ORR      r1,r0,r2,LSL #16
00005c  e2840e81          ADD      r0,r4,#0x810
000060  ebfffffe          BL       write32
;;;157    #if LCD_CTRL_BPP == 16
;;;158      // Layer frame buffer line width in bits (16bits)
;;;159      write32((uint32_t)&debe->layer0_stride, ((pdat->width) << 4));
;;;160    #else
;;;161      // Layer frame buffer line width in bits (32bits)
;;;162      write32((uint32_t)&debe->layer0_stride, ((pdat->width) << 5));
000064  e5950024          LDR      r0,[r5,#0x24]
000068  e1a01280          LSL      r1,r0,#5
00006c  e2840d21          ADD      r0,r4,#0x840
000070  ebfffffe          BL       write32
;;;163    #endif
;;;164    
;;;165      // frame-buffer address in bits
;;;166      write32((uint32_t)&debe->layer0_addr_low32b, (uint32_t)(pdat->vram[pdat->index]) << 3);
000074  e595003c          LDR      r0,[r5,#0x3c]
000078  e2852040          ADD      r2,r5,#0x40
00007c  e7920100          LDR      r0,[r2,r0,LSL #2]
000080  e1a01180          LSL      r1,r0,#3
000084  e2840e85          ADD      r0,r4,#0x850
000088  ebfffffe          BL       write32
;;;167      write32((uint32_t)&debe->layer0_addr_high4b, (uint32_t)(pdat->vram[pdat->index]) >> 29);
00008c  e595003c          LDR      r0,[r5,#0x3c]
000090  e2852040          ADD      r2,r5,#0x40
000094  e7920100          LDR      r0,[r2,r0,LSL #2]
000098  e1a01ea0          LSR      r1,r0,#29
00009c  e2840e86          ADD      r0,r4,#0x860
0000a0  ebfffffe          BL       write32
;;;168    #if LCD_CTRL_BPP == 16
;;;169      // color 16-bpp (R:5/G:6/B:5) and  R/B channel swap
;;;170      write32((uint32_t)&debe->layer0_attr1_ctrl, (0x05 << 8) | (1 << 2));  /* 此处设置像素格式 */
;;;171    #else
;;;172      // color 32-bpp (Padding:8/R:8/G:8/B:8) and  R/B channel swap
;;;173      write32((uint32_t)&debe->layer0_attr1_ctrl, (0x09 << 8) | (1 << 2));  /* 此处设置像素格式 */
0000a4  e59f18ec          LDR      r1,|L1.2456|
0000a8  e2840e8a          ADD      r0,r4,#0x8a0
0000ac  ebfffffe          BL       write32
;;;174    #endif
;;;175    
;;;176    
;;;177      // enable layer-0
;;;178      val = read32((uint32_t)&debe->mode);
0000b0  e2840b02          ADD      r0,r4,#0x800
0000b4  ebfffffe          BL       read32
0000b8  e1a06000          MOV      r6,r0
;;;179      val |= (1 << 8);
0000bc  e3866c01          ORR      r6,r6,#0x100
;;;180      write32((uint32_t)&debe->mode, val);
0000c0  e1a01006          MOV      r1,r6
0000c4  e2840b02          ADD      r0,r4,#0x800
0000c8  ebfffffe          BL       write32
;;;181    
;;;182      // Register load control
;;;183      val = read32((uint32_t)&debe->reg_ctrl);
0000cc  e2840e87          ADD      r0,r4,#0x870
0000d0  ebfffffe          BL       read32
0000d4  e1a06000          MOV      r6,r0
;;;184      val |= (1 << 0);
0000d8  e3866001          ORR      r6,r6,#1
;;;185      write32((uint32_t)&debe->reg_ctrl, val);
0000dc  e1a01006          MOV      r1,r6
0000e0  e2840e87          ADD      r0,r4,#0x870
0000e4  ebfffffe          BL       write32
;;;186    
;;;187      // Normal output channel Start & Reset control
;;;188      val = read32((uint32_t)&debe->mode);
0000e8  e2840b02          ADD      r0,r4,#0x800
0000ec  ebfffffe          BL       read32
0000f0  e1a06000          MOV      r6,r0
;;;189      val |= (1 << 1);
0000f4  e3866002          ORR      r6,r6,#2
;;;190      write32((uint32_t)&debe->mode, val);
0000f8  e1a01006          MOV      r1,r6
0000fc  e2840b02          ADD      r0,r4,#0x800
000100  ebfffffe          BL       write32
;;;191    }
000104  e8bd8070          POP      {r4-r6,pc}
;;;192    
                          ENDP

                  f1c100s_debe_set_address PROC
;;;193    inline static void f1c100s_debe_set_address(fb_f1c100s_priv_data_t* pdat, void* vram)
000108  e92d4070          PUSH     {r4-r6,lr}
;;;194    {
00010c  e1a05000          MOV      r5,r0
000110  e1a04001          MOV      r4,r1
;;;195      struct f1c100s_debe_reg_t* debe = (struct f1c100s_debe_reg_t*)(pdat->virtdebe);
000114  e5956004          LDR      r6,[r5,#4]
;;;196    
;;;197      write32((uint32_t)&debe->layer0_addr_low32b, (uint32_t)vram << 3);
000118  e1a01184          LSL      r1,r4,#3
00011c  e2860e85          ADD      r0,r6,#0x850
000120  ebfffffe          BL       write32
;;;198      write32((uint32_t)&debe->layer0_addr_high4b, (uint32_t)vram >> 29);
000124  e1a01ea4          LSR      r1,r4,#29
000128  e2860e86          ADD      r0,r6,#0x860
00012c  ebfffffe          BL       write32
;;;199    }
000130  e8bd8070          POP      {r4-r6,pc}
;;;200    
                          ENDP

                  clk_divider_set_rate PROC
;;;253    
;;;254    static void clk_divider_set_rate(uint32_t virt, uint32_t width, uint32_t shift, bool onebased, uint64_t prate, uint64_t rate)
000134  e92d5fff          PUSH     {r0-r12,lr}
;;;255    {
000138  e1a09002          MOV      r9,r2
00013c  e59d5040          LDR      r5,[sp,#0x40]
000140  e59d6044          LDR      r6,[sp,#0x44]
000144  e59d7038          LDR      r7,[sp,#0x38]
000148  e59d803c          LDR      r8,[sp,#0x3c]
;;;256      uint32_t mask = ((1 << (width)) - 1);
00014c  e3a01001          MOV      r1,#1
000150  e59d0004          LDR      r0,[sp,#4]
000154  e1a00011          LSL      r0,r1,r0
000158  e240a001          SUB      r10,r0,#1
00015c  e3a01000          MOV      r1,#0
000160  e1a00001          MOV      r0,r1
000164  e0211005          EOR      r1,r1,r5
000168  e0200006          EOR      r0,r0,r6
;;;257      uint32_t div;
;;;258      uint32_t val;
;;;259    
;;;260      if (rate == 0)
00016c  e1900001          ORRS     r0,r0,r1
000170  1a000001          BNE      |L1.380|
;;;261        rate = prate;
000174  e1a05007          MOV      r5,r7
000178  e1a06008          MOV      r6,r8
                  |L1.380|
;;;262    
;;;263      div = prate / rate;
00017c  e1a02005          MOV      r2,r5
000180  e1a03006          MOV      r3,r6
000184  e1a00007          MOV      r0,r7
000188  e1a01008          MOV      r1,r8
00018c  ebfffffe          BL       __aeabi_uldivmod
000190  e1a04000          MOV      r4,r0
;;;264      if (onebased)
000194  e59d000c          LDR      r0,[sp,#0xc]
000198  e3500000          CMP      r0,#0
00019c  0a000000          BEQ      |L1.420|
;;;265        div--;
0001a0  e2444001          SUB      r4,r4,#1
                  |L1.420|
;;;266      if (div > mask)
0001a4  e154000a          CMP      r4,r10
0001a8  9a000000          BLS      |L1.432|
;;;267        div = mask;
0001ac  e1a0400a          MOV      r4,r10
                  |L1.432|
;;;268    
;;;269      val = read32(virt);
0001b0  e59d0000          LDR      r0,[sp,#0]
0001b4  ebfffffe          BL       read32
0001b8  e1a0b000          MOV      r11,r0
;;;270      val &= ~(mask << shift);
0001bc  e1cbb91a          BIC      r11,r11,r10,LSL r9
;;;271      val |= div << shift;
0001c0  e18bb914          ORR      r11,r11,r4,LSL r9
;;;272      write32(virt, val);
0001c4  e1a0100b          MOV      r1,r11
0001c8  e59d0000          LDR      r0,[sp,#0]
0001cc  ebfffffe          BL       write32
;;;273    }
0001d0  e8bd9fff          POP      {r0-r12,pc}
;;;274    
                          ENDP

                  clk_mux_set_parent PROC
;;;275    static void clk_mux_set_parent(uint32_t virt, uint32_t width, uint32_t shift, uint32_t parent_val)
0001d4  e92d41f0          PUSH     {r4-r8,lr}
;;;276    {
0001d8  e1a08000          MOV      r8,r0
0001dc  e1a06001          MOV      r6,r1
0001e0  e1a04002          MOV      r4,r2
0001e4  e1a07003          MOV      r7,r3
;;;277      uint32_t val;
;;;278      val = read32(virt);
0001e8  e1a00008          MOV      r0,r8
0001ec  ebfffffe          BL       read32
0001f0  e1a05000          MOV      r5,r0
;;;279      val &= ~(((1 << width) - 1) << shift);
0001f4  e3a00001          MOV      r0,#1
0001f8  e1a00610          LSL      r0,r0,r6
0001fc  e2400001          SUB      r0,r0,#1
000200  e1c55410          BIC      r5,r5,r0,LSL r4
;;;280      val |= parent_val << shift;
000204  e1855417          ORR      r5,r5,r7,LSL r4
;;;281      write32(virt, val);
000208  e1a01005          MOV      r1,r5
00020c  e1a00008          MOV      r0,r8
000210  ebfffffe          BL       write32
;;;282    }
000214  e8bd81f0          POP      {r4-r8,pc}
;;;283    
                          ENDP

                  f1c100s_clk_defe_init PROC
;;;284    static void f1c100s_clk_defe_init(void)
000218  e92d41ff          PUSH     {r0-r8,lr}
;;;285    {
;;;286      // select Clock Source for defe
;;;287      clk_mux_set_parent(0x01c2010c, 3, 24, 0);
00021c  e3a03000          MOV      r3,#0
000220  e3a02018          MOV      r2,#0x18
000224  e3a01003          MOV      r1,#3
000228  e59f076c          LDR      r0,|L1.2460|
00022c  ebfffffe          BL       clk_mux_set_parent
;;;288      // set defe Clock divide ratio
;;;289      clk_divider_set_rate(0x01c2010c, 4, 0, true, f1c100s_tcon_clk_get_rate(), f1c100s_tcon_clk_get_rate());
000230  ebfffffe          BL       f1c100s_tcon_clk_get_rate
000234  e1a04000          MOV      r4,r0
000238  e1a05001          MOV      r5,r1
00023c  ebfffffe          BL       f1c100s_tcon_clk_get_rate
000240  e3a03001          MOV      r3,#1
000244  e3a02000          MOV      r2,#0
000248  e88d0033          STM      sp,{r0,r1,r4,r5}
00024c  e3a01004          MOV      r1,#4
000250  e59f0744          LDR      r0,|L1.2460|
000254  ebfffffe          BL       clk_divider_set_rate
;;;290    }
000258  e8bd81ff          POP      {r0-r8,pc}
;;;291    
                          ENDP

                  f1c100s_clk_debe_init PROC
;;;317    
;;;318    static void f1c100s_clk_debe_init(void)
00025c  e92d41ff          PUSH     {r0-r8,lr}
;;;319    {
;;;320      // select Clock Source for debe
;;;321      clk_mux_set_parent(0x01c20104, 3, 24, 0);
000260  e3a03000          MOV      r3,#0
000264  e3a02018          MOV      r2,#0x18
000268  e3a01003          MOV      r1,#3
00026c  e59f072c          LDR      r0,|L1.2464|
000270  ebfffffe          BL       clk_mux_set_parent
;;;322      // set debe Clock divide ratio
;;;323      clk_divider_set_rate(0x01c20104, 4, 0, true, f1c100s_tcon_clk_get_rate(), f1c100s_tcon_clk_get_rate());
000274  ebfffffe          BL       f1c100s_tcon_clk_get_rate
000278  e1a04000          MOV      r4,r0
00027c  e1a05001          MOV      r5,r1
000280  ebfffffe          BL       f1c100s_tcon_clk_get_rate
000284  e3a03001          MOV      r3,#1
000288  e3a02000          MOV      r2,#0
00028c  e88d0033          STM      sp,{r0,r1,r4,r5}
000290  e3a01004          MOV      r1,#4
000294  e59f0704          LDR      r0,|L1.2464|
000298  ebfffffe          BL       clk_divider_set_rate
;;;324    }
00029c  e8bd81ff          POP      {r0-r8,pc}
;;;325    
                          ENDP

                  f1c100s_tcon_set_mode PROC
;;;350    
;;;351    inline static void f1c100s_tcon_set_mode(fb_f1c100s_priv_data_t* pdat)
0002a0  e92d47fc          PUSH     {r2-r10,lr}
;;;352    {
0002a4  e1a04000          MOV      r4,r0
;;;353      struct f1c100s_tcon_reg_t* tcon = (struct f1c100s_tcon_reg_t*)pdat->virttcon;
0002a8  e5945008          LDR      r5,[r4,#8]
;;;354      int32_t bp, total;
;;;355      uint32_t val;
;;;356    
;;;357      // use tcon0
;;;358      val = read32((uint32_t)&tcon->ctrl);
0002ac  e1a00005          MOV      r0,r5
0002b0  ebfffffe          BL       read32
0002b4  e1a06000          MOV      r6,r0
;;;359      val &= ~(0x1 << 0);
0002b8  e3c66001          BIC      r6,r6,#1
;;;360      write32((uint32_t)&tcon->ctrl, val);
0002bc  e1a01006          MOV      r1,r6
0002c0  e1a00005          MOV      r0,r5
0002c4  ebfffffe          BL       write32
;;;361    
;;;362      // set panel configurations
;;;363      val = (pdat->timing.v_front_porch + pdat->timing.v_back_porch + pdat->timing.v_sync_len);
0002c8  e5940058          LDR      r0,[r4,#0x58]
0002cc  e594105c          LDR      r1,[r4,#0x5c]
0002d0  e0800001          ADD      r0,r0,r1
0002d4  e5941060          LDR      r1,[r4,#0x60]
0002d8  e0806001          ADD      r6,r0,r1
;;;364      write32((uint32_t)&tcon->tcon0_ctrl, (1UL << 31) | ((val & 0x1f) << 4));
0002dc  e206001f          AND      r0,r6,#0x1f
0002e0  e3a02102          MOV      r2,#0x80000000
0002e4  e1821200          ORR      r1,r2,r0,LSL #4
0002e8  e2850040          ADD      r0,r5,#0x40
0002ec  ebfffffe          BL       write32
;;;365    
;;;366      //val = clk_get_rate(pdat->clktcon) / pdat->timing.pixel_clock_hz;
;;;367      val = f1c100s_tcon_clk_get_rate() / pdat->timing.pixel_clock_hz;
0002f0  ebfffffe          BL       f1c100s_tcon_clk_get_rate
0002f4  e1cd00f0          STRD     r0,r1,[sp,#0]
0002f8  e5940048          LDR      r0,[r4,#0x48]
0002fc  e1a03fc0          ASR      r3,r0,#31
000300  e1a07000          MOV      r7,r0
000304  e1a02007          MOV      r2,r7
000308  e59d0000          LDR      r0,[sp,#0]
00030c  ebfffffe          BL       __aeabi_uldivmod
000310  e1a06000          MOV      r6,r0
;;;368      write32((uint32_t)&tcon->tcon0_dclk, (0xFUL << 28) | (val << 0));
000314  e386120f          ORR      r1,r6,#0xf0000000
000318  e2850044          ADD      r0,r5,#0x44
00031c  ebfffffe          BL       write32
;;;369    
;;;370      // panel height and width
;;;371      write32((uint32_t)&tcon->tcon0_timing_active, ((pdat->width - 1) << 16) | ((pdat->height - 1) << 0));
000320  e5940028          LDR      r0,[r4,#0x28]
000324  e2400001          SUB      r0,r0,#1
000328  e1d422b4          LDRH     r2,[r4,#0x24]
00032c  e2422001          SUB      r2,r2,#1
000330  e1801802          ORR      r1,r0,r2,LSL #16
000334  e2850048          ADD      r0,r5,#0x48
000338  ebfffffe          BL       write32
;;;372    
;;;373      // 横向时序
;;;374      bp = pdat->timing.h_sync_len + pdat->timing.h_back_porch;
00033c  e5940054          LDR      r0,[r4,#0x54]
000340  e5941050          LDR      r1,[r4,#0x50]
000344  e0809001          ADD      r9,r0,r1
;;;375      total = pdat->width + pdat->timing.h_front_porch + bp;
000348  e5940024          LDR      r0,[r4,#0x24]
00034c  e594104c          LDR      r1,[r4,#0x4c]
000350  e0800001          ADD      r0,r0,r1
000354  e080a009          ADD      r10,r0,r9
;;;376      write32((uint32_t)&tcon->tcon0_timing_h, ((total - 1) << 16) | ((bp - 1) << 0));
000358  e2490001          SUB      r0,r9,#1
00035c  e24a2001          SUB      r2,r10,#1
000360  e1801802          ORR      r1,r0,r2,LSL #16
000364  e285004c          ADD      r0,r5,#0x4c
000368  ebfffffe          BL       write32
;;;377    
;;;378      // 纵向时序
;;;379      bp = pdat->timing.v_sync_len + pdat->timing.v_back_porch;
00036c  e5940060          LDR      r0,[r4,#0x60]
000370  e594105c          LDR      r1,[r4,#0x5c]
000374  e0809001          ADD      r9,r0,r1
;;;380      total = pdat->height + pdat->timing.v_front_porch + bp;
000378  e5940028          LDR      r0,[r4,#0x28]
00037c  e5941058          LDR      r1,[r4,#0x58]
000380  e0800001          ADD      r0,r0,r1
000384  e080a009          ADD      r10,r0,r9
;;;381      write32((uint32_t)&tcon->tcon0_timing_v, ((total * 2) << 16) | ((bp - 1) << 0));
000388  e2490001          SUB      r0,r9,#1
00038c  e180188a          ORR      r1,r0,r10,LSL #17
000390  e2850050          ADD      r0,r5,#0x50
000394  ebfffffe          BL       write32
;;;382    
;;;383      // 同步信号宽度
;;;384      write32((uint32_t)&tcon->tcon0_timing_sync, ((pdat->timing.h_sync_len - 1) << 16) | ((pdat->timing.v_sync_len - 1) << 0));
000398  e5940060          LDR      r0,[r4,#0x60]
00039c  e2400001          SUB      r0,r0,#1
0003a0  e1d425b4          LDRH     r2,[r4,#0x54]
0003a4  e2422001          SUB      r2,r2,#1
0003a8  e1801802          ORR      r1,r0,r2,LSL #16
0003ac  e2850054          ADD      r0,r5,#0x54
0003b0  ebfffffe          BL       write32
;;;385    
;;;386      // 这里要注意，可能跟bpp有关？
;;;387      write32((uint32_t)&tcon->tcon0_hv_intf, 0);
0003b4  e3a01000          MOV      r1,#0
0003b8  e2850058          ADD      r0,r5,#0x58
0003bc  ebfffffe          BL       write32
;;;388      write32((uint32_t)&tcon->tcon0_cpu_intf, 0);
0003c0  e3a01000          MOV      r1,#0
0003c4  e2850060          ADD      r0,r5,#0x60
0003c8  ebfffffe          BL       write32
;;;389    
;;;390      if (pdat->bits_per_pixel == 18 || pdat->bits_per_pixel == 16) {
0003cc  e5940034          LDR      r0,[r4,#0x34]
0003d0  e3500012          CMP      r0,#0x12
0003d4  0a000002          BEQ      |L1.996|
0003d8  e5940034          LDR      r0,[r4,#0x34]
0003dc  e3500010          CMP      r0,#0x10
0003e0  1a000026          BNE      |L1.1152|
                  |L1.996|
;;;391        write32((uint32_t)&tcon->tcon0_frm_seed[0], 0x11111111);
0003e4  e59f15b8          LDR      r1,|L1.2468|
0003e8  e2850014          ADD      r0,r5,#0x14
0003ec  ebfffffe          BL       write32
;;;392        write32((uint32_t)&tcon->tcon0_frm_seed[1], 0x11111111);
0003f0  e59f15ac          LDR      r1,|L1.2468|
0003f4  e2850018          ADD      r0,r5,#0x18
0003f8  ebfffffe          BL       write32
;;;393        write32((uint32_t)&tcon->tcon0_frm_seed[2], 0x11111111);
0003fc  e59f15a0          LDR      r1,|L1.2468|
000400  e285001c          ADD      r0,r5,#0x1c
000404  ebfffffe          BL       write32
;;;394        write32((uint32_t)&tcon->tcon0_frm_seed[3], 0x11111111);
000408  e59f1594          LDR      r1,|L1.2468|
00040c  e2850020          ADD      r0,r5,#0x20
000410  ebfffffe          BL       write32
;;;395        write32((uint32_t)&tcon->tcon0_frm_seed[4], 0x11111111);
000414  e59f1588          LDR      r1,|L1.2468|
000418  e2850024          ADD      r0,r5,#0x24
00041c  ebfffffe          BL       write32
;;;396        write32((uint32_t)&tcon->tcon0_frm_seed[5], 0x11111111);
000420  e59f157c          LDR      r1,|L1.2468|
000424  e2850028          ADD      r0,r5,#0x28
000428  ebfffffe          BL       write32
;;;397        write32((uint32_t)&tcon->tcon0_frm_table[0], 0x01010000);
00042c  e59f1574          LDR      r1,|L1.2472|
000430  e285002c          ADD      r0,r5,#0x2c
000434  ebfffffe          BL       write32
;;;398        write32((uint32_t)&tcon->tcon0_frm_table[1], 0x15151111);
000438  e59f156c          LDR      r1,|L1.2476|
00043c  e2850030          ADD      r0,r5,#0x30
000440  ebfffffe          BL       write32
;;;399        write32((uint32_t)&tcon->tcon0_frm_table[2], 0x57575555);
000444  e59f1564          LDR      r1,|L1.2480|
000448  e2850034          ADD      r0,r5,#0x34
00044c  ebfffffe          BL       write32
;;;400        write32((uint32_t)&tcon->tcon0_frm_table[3], 0x7f7f7777);
000450  e59f155c          LDR      r1,|L1.2484|
000454  e2850038          ADD      r0,r5,#0x38
000458  ebfffffe          BL       write32
;;;401        write32((uint32_t)&tcon->tcon0_frm_ctrl, (pdat->bits_per_pixel == 18) ? ((1UL << 31) | (0 << 4)) : ((1UL << 31) | (5 << 4)));
00045c  e5940034          LDR      r0,[r4,#0x34]
000460  e3500012          CMP      r0,#0x12
000464  1a000001          BNE      |L1.1136|
000468  e3a00102          MOV      r0,#0x80000000
00046c  ea000000          B        |L1.1140|
                  |L1.1136|
000470  e59f0540          LDR      r0,|L1.2488|
                  |L1.1140|
000474  e1a01000          MOV      r1,r0
000478  e2850010          ADD      r0,r5,#0x10
00047c  ebfffffe          BL       write32
                  |L1.1152|
;;;402      }
;;;403    
;;;404      val = (1 << 28);
000480  e3a06201          MOV      r6,#0x10000000
;;;405      if (!pdat->timing.h_sync_active)
000484  e5940064          LDR      r0,[r4,#0x64]
000488  e3500000          CMP      r0,#0
00048c  1a000000          BNE      |L1.1172|
;;;406        val |= (1 << 25);
000490  e3866402          ORR      r6,r6,#0x2000000
                  |L1.1172|
;;;407      if (!pdat->timing.h_sync_active)
000494  e5940064          LDR      r0,[r4,#0x64]
000498  e3500000          CMP      r0,#0
00049c  1a000000          BNE      |L1.1188|
;;;408        val |= (1 << 24);
0004a0  e3866401          ORR      r6,r6,#0x1000000
                  |L1.1188|
;;;409      write32((uint32_t)&tcon->tcon0_io_polarity, val);
0004a4  e1a01006          MOV      r1,r6
0004a8  e2850088          ADD      r0,r5,#0x88
0004ac  ebfffffe          BL       write32
;;;410      write32((uint32_t)&tcon->tcon0_io_tristate, 0);
0004b0  e3a01000          MOV      r1,#0
0004b4  e285008c          ADD      r0,r5,#0x8c
0004b8  ebfffffe          BL       write32
;;;411    }
0004bc  e8bd87fc          POP      {r2-r10,pc}
;;;412    
                          ENDP

                  fb_f1c100s_init_hw PROC
;;;422    
;;;423    static void fb_f1c100s_init_hw(fb_f1c100s_priv_data_t* pdat)
0004c0  e92d5ff0          PUSH     {r4-r12,lr}
;;;424    {
0004c4  e1a05000          MOV      r5,r0
;;;425      // enable PLL_ENABLE bit in PLL_VEDIO register
;;;426      f1c100s_clk_pll_video_set_enable(true);
0004c8  e3a04001          MOV      r4,#1
0004cc  e1a01004          MOV      r1,r4
0004d0  e59f04e4          LDR      r0,|L1.2492|
0004d4  ebfffffe          BL       clk_f1c100s_pll_set_enable
0004d8  e1a00000          MOV      r0,r0
;;;427      f1c100s_clk_debe_init();
0004dc  ebfffffe          BL       f1c100s_clk_debe_init
;;;428      f1c100s_clk_defe_init();
0004e0  ebfffffe          BL       f1c100s_clk_defe_init
;;;429    
;;;430      // Set LCD panel pin-function
;;;431    #ifdef PCB_TINY200V2
;;;432      fb_f1c100s_cfg_gpios(&GPIO_PD, 1, 12, 0x2, GPIO_PULL_NONE, GPIO_DRV_STRONG);
;;;433      fb_f1c100s_cfg_gpios(&GPIO_PD, 13, 22, 0x2, GPIO_PULL_NONE, GPIO_DRV_STRONG);
;;;434    #else
;;;435      fb_f1c100s_cfg_gpios(&GPIO_PD, 0, 22, 0x2, GPIO_PULL_NONE, GPIO_DRV_STRONG);
0004e4  e59f64d4          LDR      r6,|L1.2496|
0004e8  e3a07000          MOV      r7,#0
0004ec  e3a08016          MOV      r8,#0x16
0004f0  e3a09002          MOV      r9,#2
0004f4  e1a0a009          MOV      r10,r9
0004f8  e3a0b003          MOV      r11,#3
0004fc  e1a04007          MOV      r4,r7
000500  ea00000c          B        |L1.1336|
                  |L1.1284|
000504  e1a02009          MOV      r2,r9
000508  e1a01004          MOV      r1,r4
00050c  e1a00006          MOV      r0,r6
000510  ebfffffe          BL       gpio_f1c100s_set_cfg
000514  e1a0200a          MOV      r2,r10
000518  e1a01004          MOV      r1,r4
00051c  e1a00006          MOV      r0,r6
000520  ebfffffe          BL       gpio_f1c100s_set_pull
000524  e1a0200b          MOV      r2,r11
000528  e1a01004          MOV      r1,r4
00052c  e1a00006          MOV      r0,r6
000530  ebfffffe          BL       gpio_f1c100s_set_drv
000534  e2844001          ADD      r4,r4,#1
                  |L1.1336|
000538  e1540008          CMP      r4,r8
00053c  bafffff0          BLT      |L1.1284|
000540  e1a00000          MOV      r0,r0
;;;436    #endif
;;;437    
;;;438      // disable/initialize tcon0
;;;439      f1c100s_tcon_disable(pdat);
000544  e1a00000          MOV      r0,r0
000548  e5954008          LDR      r4,[r5,#8]
00054c  e3a01000          MOV      r1,#0
000550  e1a00004          MOV      r0,r4
000554  ebfffffe          BL       write32
000558  e3a01000          MOV      r1,#0
00055c  e2840004          ADD      r0,r4,#4
000560  ebfffffe          BL       write32
000564  e2840044          ADD      r0,r4,#0x44
000568  ebfffffe          BL       read32
00056c  e1a06000          MOV      r6,r0
000570  e3c6620f          BIC      r6,r6,#0xf0000000
000574  e1a01006          MOV      r1,r6
000578  e2840044          ADD      r0,r4,#0x44
00057c  ebfffffe          BL       write32
000580  e3e01000          MVN      r1,#0
000584  e284008c          ADD      r0,r4,#0x8c
000588  ebfffffe          BL       write32
00058c  e3e01000          MVN      r1,#0
000590  e28400f4          ADD      r0,r4,#0xf4
000594  ebfffffe          BL       write32
000598  e1a00000          MOV      r0,r0
;;;440    
;;;441      f1c100s_debe_set_mode(pdat);
00059c  e1a00005          MOV      r0,r5
0005a0  ebfffffe          BL       f1c100s_debe_set_mode
;;;442      f1c100s_tcon_set_mode(pdat);
0005a4  e1a00005          MOV      r0,r5
0005a8  ebfffffe          BL       f1c100s_tcon_set_mode
;;;443      f1c100s_tcon_enable(pdat);
0005ac  e1a00000          MOV      r0,r0
0005b0  e5956008          LDR      r6,[r5,#8]
0005b4  e1a00006          MOV      r0,r6
0005b8  ebfffffe          BL       read32
0005bc  e1a04000          MOV      r4,r0
0005c0  e3844102          ORR      r4,r4,#0x80000000
0005c4  e1a01004          MOV      r1,r4
0005c8  e1a00006          MOV      r0,r6
0005cc  ebfffffe          BL       write32
0005d0  e1a00000          MOV      r0,r0
;;;444    
;;;445      // enable panel back-light
;;;446      pwm_f1c100s_init(pdat->backlight);
0005d4  e5950074          LDR      r0,[r5,#0x74]
0005d8  ebfffffe          BL       pwm_f1c100s_init
;;;447    }
0005dc  e8bd9ff0          POP      {r4-r12,pc}
;;;448    
                          ENDP

                  fb_f1c100s_setbl PROC
;;;449    void fb_f1c100s_setbl(framebuffer_t* fb, int32_t brightness)
0005e0  e92d4070          PUSH     {r4-r6,lr}
;;;450    {
0005e4  e1a04000          MOV      r4,r0
0005e8  e1a05001          MOV      r5,r1
;;;451      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
0005ec  e5946018          LDR      r6,[r4,#0x18]
;;;452      //led_set_brightness(pdat->backlight, brightness);
;;;453      pwm_f1c100s_set_duty(pdat->backlight, brightness);
0005f0  e1a01005          MOV      r1,r5
0005f4  e5960074          LDR      r0,[r6,#0x74]
0005f8  ebfffffe          BL       pwm_f1c100s_set_duty
;;;454    }
0005fc  e8bd8070          POP      {r4-r6,pc}
;;;455    
                          ENDP

                  fb_f1c100s_getbl PROC
;;;456    int32_t fb_f1c100s_getbl(framebuffer_t* fb)
000600  e1a01000          MOV      r1,r0
;;;457    {
;;;458      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
000604  e5912018          LDR      r2,[r1,#0x18]
;;;459      // return led_get_brightness(pdat->backlight);
;;;460      return pwm_f1c100s_get_duty(pdat->backlight);
000608  e5920074          LDR      r0,[r2,#0x74]
00060c  e5903008          LDR      r3,[r0,#8]
000610  e1a00003          MOV      r0,r3
;;;461    }
000614  e12fff1e          BX       lr
;;;462    #if 1
                          ENDP

                  fb_f1c100s_create PROC
;;;463    render_t * fb_f1c100s_create(framebuffer_t * fb)
000618  e92d41f0          PUSH     {r4-r8,lr}
;;;464    {
00061c  e1a07000          MOV      r7,r0
;;;465    	fb_f1c100s_priv_data_t * pdat = (fb_f1c100s_priv_data_t *)fb->priv;
000620  e5975018          LDR      r5,[r7,#0x18]
;;;466    	render_t * render;
;;;467    
;;;468    __align(4)	uint8_t *pixels;
;;;469    	size_t pixlen;
;;;470    
;;;471    	pixlen = pdat->width * pdat->height * pdat->bytes_per_pixel;
000624  e5950024          LDR      r0,[r5,#0x24]
000628  e5951028          LDR      r1,[r5,#0x28]
00062c  e0000091          MUL      r0,r1,r0
000630  e5951038          LDR      r1,[r5,#0x38]
000634  e0080190          MUL      r8,r0,r1
;;;472    	////pixels = memalign(4, pixlen);
;;;473    		pixels = (uint8_t *)malloc(pixlen);
000638  e1a00008          MOV      r0,r8
00063c  ebfffffe          BL       malloc
000640  e1a06000          MOV      r6,r0
;;;474    #if 1		
;;;475    	if(!pixels)
000644  e3560000          CMP      r6,#0
000648  1a000001          BNE      |L1.1620|
;;;476    		{
;;;477    			return NULL;
00064c  e3a00000          MOV      r0,#0
                  |L1.1616|
;;;478    		}
;;;479    
;;;480    	render = malloc(sizeof(render_t));
;;;481    	if(!render)
;;;482    	{
;;;483    		free(pixels);
;;;484    		return NULL;
;;;485    	}
;;;486    
;;;487    	render->width = pdat->width;
;;;488    	render->height = pdat->height;
;;;489    	render->pitch = (pdat->width * pdat->bytes_per_pixel + 0x3) & ~0x3;
;;;490    	render->format = PIXEL_FORMAT_ARGB32;
;;;491    	render->pixels = pixels;
;;;492    	render->pixlen = pixlen;
;;;493    	render->priv = NULL;
;;;494    #endif
;;;495    	return render;
;;;496    }
000650  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1620|
000654  e3a0001c          MOV      r0,#0x1c              ;480
000658  ebfffffe          BL       malloc
00065c  e1a04000          MOV      r4,r0                 ;480
000660  e3540000          CMP      r4,#0                 ;481
000664  1a000003          BNE      |L1.1656|
000668  e1a00006          MOV      r0,r6                 ;483
00066c  ebfffffe          BL       free
000670  e3a00000          MOV      r0,#0                 ;484
000674  eafffff5          B        |L1.1616|
                  |L1.1656|
000678  e5950024          LDR      r0,[r5,#0x24]         ;487
00067c  e5840000          STR      r0,[r4,#0]            ;487
000680  e5950028          LDR      r0,[r5,#0x28]         ;488
000684  e5840004          STR      r0,[r4,#4]            ;488
000688  e5950024          LDR      r0,[r5,#0x24]         ;489
00068c  e5951038          LDR      r1,[r5,#0x38]         ;489
000690  e0000091          MUL      r0,r1,r0              ;489
000694  e2800003          ADD      r0,r0,#3              ;489
000698  e3c00003          BIC      r0,r0,#3              ;489
00069c  e5840008          STR      r0,[r4,#8]            ;489
0006a0  e3a00000          MOV      r0,#0                 ;490
0006a4  e5c4000c          STRB     r0,[r4,#0xc]          ;490
0006a8  e5846010          STR      r6,[r4,#0x10]         ;491
0006ac  e5848014          STR      r8,[r4,#0x14]         ;492
0006b0  e5840018          STR      r0,[r4,#0x18]         ;493
0006b4  e1a00004          MOV      r0,r4                 ;495
0006b8  eaffffe4          B        |L1.1616|
;;;497    #endif
                          ENDP

                  fb_f1c100s_destroy PROC
;;;498    
;;;499    void fb_f1c100s_destroy(framebuffer_t * fb, render_t * render)
0006bc  e92d4070          PUSH     {r4-r6,lr}
;;;500    {
0006c0  e1a05000          MOV      r5,r0
0006c4  e1a04001          MOV      r4,r1
;;;501    	if(render)
0006c8  e3540000          CMP      r4,#0
0006cc  0a000003          BEQ      |L1.1760|
;;;502    	{
;;;503    		free(render->pixels);
0006d0  e5940010          LDR      r0,[r4,#0x10]
0006d4  ebfffffe          BL       free
;;;504    		free(render);
0006d8  e1a00004          MOV      r0,r4
0006dc  ebfffffe          BL       free
                  |L1.1760|
;;;505    	}
;;;506    }
0006e0  e8bd8070          POP      {r4-r6,pc}
;;;507    
                          ENDP

                  fb_f1c100s_present PROC
;;;508    
;;;509    void fb_f1c100s_present(framebuffer_t* fb, int index)
0006e4  e92d4070          PUSH     {r4-r6,lr}
;;;510    {
0006e8  e1a06000          MOV      r6,r0
0006ec  e1a04001          MOV      r4,r1
;;;511      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
0006f0  e5965018          LDR      r5,[r6,#0x18]
;;;512    
;;;513      if (pdat && (index == 0 || index == 1)) {
0006f4  e3550000          CMP      r5,#0
0006f8  0a000007          BEQ      |L1.1820|
0006fc  e3540000          CMP      r4,#0
000700  0a000001          BEQ      |L1.1804|
000704  e3540001          CMP      r4,#1
000708  1a000003          BNE      |L1.1820|
                  |L1.1804|
;;;514        f1c100s_debe_set_address(pdat, pdat->vram[index]);
00070c  e2850040          ADD      r0,r5,#0x40
000710  e7901104          LDR      r1,[r0,r4,LSL #2]
000714  e1a00005          MOV      r0,r5
000718  ebfffffe          BL       f1c100s_debe_set_address
                  |L1.1820|
;;;515      }
;;;516    }
00071c  e8bd8070          POP      {r4-r6,pc}
;;;517    
                          ENDP

                  fb_f1c100s_init PROC
;;;518    void fb_f1c100s_init(framebuffer_t* fb)
000720  e92d41f0          PUSH     {r4-r8,lr}
;;;519    {
000724  e1a05000          MOV      r5,r0
;;;520      int32_t i;
;;;521      fb_f1c100s_priv_data_t* pdat = &fb_f1c100s_priv_object;
000728  e59f4294          LDR      r4,|L1.2500|
;;;522    
;;;523      pdat->virtdefe = phys_to_virt(F1C100S_DEFE_BASE);
00072c  e3a0061e          MOV      r0,#0x1e00000
000730  e5840000          STR      r0,[r4,#0]
;;;524      pdat->virtdebe = phys_to_virt(F1C100S_DEBE_BASE);
000734  e2800806          ADD      r0,r0,#0x60000
000738  e5840004          STR      r0,[r4,#4]
;;;525      pdat->virttcon = phys_to_virt(F1C100S_TCON_BASE);
00073c  e2400995          SUB      r0,r0,#0x254000
000740  e5840008          STR      r0,[r4,#8]
;;;526      pdat->clkdefe = "clkdefe";
000744  e28f0f9f          ADR      r0,|L1.2504|
000748  e584000c          STR      r0,[r4,#0xc]
;;;527      pdat->clkdebe = "clkdebe";
00074c  e28f0f9f          ADR      r0,|L1.2512|
000750  e5840010          STR      r0,[r4,#0x10]
;;;528      pdat->clktcon = "clktcon";
000754  e28f0f9f          ADR      r0,|L1.2520|
000758  e5840014          STR      r0,[r4,#0x14]
;;;529      pdat->rstdefe = 46;
00075c  e3a0002e          MOV      r0,#0x2e
000760  e5840018          STR      r0,[r4,#0x18]
;;;530      pdat->rstdebe = 44;
000764  e3a0002c          MOV      r0,#0x2c
000768  e584001c          STR      r0,[r4,#0x1c]
;;;531      pdat->rsttcon = 36;
00076c  e3a00024          MOV      r0,#0x24
000770  e5840020          STR      r0,[r4,#0x20]
;;;532      pdat->width = FB_LCD_XSIZE;
000774  e3a00e32          MOV      r0,#0x320
000778  e5840024          STR      r0,[r4,#0x24]
;;;533      pdat->height = FB_LCD_YSIZE;
00077c  e3a00f96          MOV      r0,#0x258
000780  e5840028          STR      r0,[r4,#0x28]
;;;534      pdat->pwidth = 216;
000784  e3a000d8          MOV      r0,#0xd8
000788  e584002c          STR      r0,[r4,#0x2c]
;;;535      pdat->pheight = 135;
00078c  e3a00087          MOV      r0,#0x87
000790  e5840030          STR      r0,[r4,#0x30]
;;;536      pdat->bits_per_pixel = LCD_CTRL_BPP;
000794  e3a00020          MOV      r0,#0x20
000798  e5840034          STR      r0,[r4,#0x34]
;;;537      pdat->bytes_per_pixel = LCD_BYTE_PP;
00079c  e3a00004          MOV      r0,#4
0007a0  e5840038          STR      r0,[r4,#0x38]
;;;538      pdat->index = 0;
0007a4  e3a00000          MOV      r0,#0
0007a8  e584003c          STR      r0,[r4,#0x3c]
;;;539      pdat->vram[0] = fb_mem[0];
0007ac  e59f022c          LDR      r0,|L1.2528|
0007b0  e5840040          STR      r0,[r4,#0x40]
;;;540      pdat->vram[1] = fb_mem[1];
0007b4  e59f0228          LDR      r0,|L1.2532|
0007b8  e5840044          STR      r0,[r4,#0x44]
;;;541    
;;;542      // hclock = 40+87+1+width=128+width;
;;;543      // vlines = 13+31+1+height=45+height;
;;;544      pdat->timing.pixel_clock_hz = PIXEL_CLOCK;
0007bc  e59f0224          LDR      r0,|L1.2536|
0007c0  e5840048          STR      r0,[r4,#0x48]
;;;545      pdat->timing.h_front_porch = 40;
0007c4  e3a00028          MOV      r0,#0x28
0007c8  e584004c          STR      r0,[r4,#0x4c]
;;;546      pdat->timing.h_back_porch = 87;
0007cc  e3a00057          MOV      r0,#0x57
0007d0  e5840050          STR      r0,[r4,#0x50]
;;;547      pdat->timing.h_sync_len = 1;
0007d4  e3a00001          MOV      r0,#1
0007d8  e5840054          STR      r0,[r4,#0x54]
;;;548      pdat->timing.v_front_porch = 13;
0007dc  e3a0000d          MOV      r0,#0xd
0007e0  e5840058          STR      r0,[r4,#0x58]
;;;549      pdat->timing.v_back_porch = 31;
0007e4  e3a0001f          MOV      r0,#0x1f
0007e8  e584005c          STR      r0,[r4,#0x5c]
;;;550      pdat->timing.v_sync_len = 1;
0007ec  e3a00001          MOV      r0,#1
0007f0  e5840060          STR      r0,[r4,#0x60]
;;;551      pdat->timing.h_sync_active = false;
0007f4  e3a00000          MOV      r0,#0
0007f8  e5840064          STR      r0,[r4,#0x64]
;;;552      pdat->timing.v_sync_active = false;
0007fc  e5840068          STR      r0,[r4,#0x68]
;;;553      pdat->timing.den_active = false;
000800  e584006c          STR      r0,[r4,#0x6c]
;;;554      pdat->timing.clk_active = false;
000804  e5840070          STR      r0,[r4,#0x70]
;;;555      pdat->backlight = &led_pwm_bl;
000808  e59f01dc          LDR      r0,|L1.2540|
00080c  e5840074          STR      r0,[r4,#0x74]
;;;556    
;;;557      fb->name = "fb-f1c100s";
000810  e28f0f76          ADR      r0,|L1.2544|
000814  e5850000          STR      r0,[r5,#0]
;;;558      fb->width = pdat->width;
000818  e5940024          LDR      r0,[r4,#0x24]
00081c  e5850004          STR      r0,[r5,#4]
;;;559      fb->height = pdat->height;
000820  e5940028          LDR      r0,[r4,#0x28]
000824  e5850008          STR      r0,[r5,#8]
;;;560      fb->pwidth = pdat->pwidth;
000828  e594002c          LDR      r0,[r4,#0x2c]
00082c  e585000c          STR      r0,[r5,#0xc]
;;;561      fb->pheight = pdat->pheight;
000830  e5940030          LDR      r0,[r4,#0x30]
000834  e5850010          STR      r0,[r5,#0x10]
;;;562      fb->bpp = pdat->bytes_per_pixel * 8;
000838  e5940038          LDR      r0,[r4,#0x38]
00083c  e1a00180          LSL      r0,r0,#3
000840  e5850014          STR      r0,[r5,#0x14]
;;;563      fb->priv = pdat;
000844  e5854018          STR      r4,[r5,#0x18]
;;;564    
;;;565      f1c100s_clk_defe_enable();
000848  e1a00000          MOV      r0,r0
00084c  e59f0148          LDR      r0,|L1.2460|
000850  ebfffffe          BL       read32
000854  e3807102          ORR      r7,r0,#0x80000000
000858  e1a01007          MOV      r1,r7
00085c  e59f0138          LDR      r0,|L1.2460|
000860  ebfffffe          BL       write32
000864  e59f0190          LDR      r0,|L1.2556|
000868  ebfffffe          BL       read32
00086c  e3807901          ORR      r7,r0,#0x4000
000870  e1a01007          MOV      r1,r7
000874  e59f0180          LDR      r0,|L1.2556|
000878  ebfffffe          BL       write32
00087c  e1a00000          MOV      r0,r0
;;;566      f1c100s_clk_debe_enable();
000880  e1a00000          MOV      r0,r0
000884  e59f0114          LDR      r0,|L1.2464|
000888  ebfffffe          BL       read32
00088c  e3807102          ORR      r7,r0,#0x80000000
000890  e1a01007          MOV      r1,r7
000894  e59f0104          LDR      r0,|L1.2464|
000898  ebfffffe          BL       write32
00089c  e59f0158          LDR      r0,|L1.2556|
0008a0  ebfffffe          BL       read32
0008a4  e3807a01          ORR      r7,r0,#0x1000
0008a8  e1a01007          MOV      r1,r7
0008ac  e59f0148          LDR      r0,|L1.2556|
0008b0  ebfffffe          BL       write32
0008b4  e1a00000          MOV      r0,r0
;;;567      f1c100s_clk_tcon_enable();
0008b8  e1a00000          MOV      r0,r0
0008bc  e59f013c          LDR      r0,|L1.2560|
0008c0  ebfffffe          BL       read32
0008c4  e3807102          ORR      r7,r0,#0x80000000
0008c8  e1a01007          MOV      r1,r7
0008cc  e59f012c          LDR      r0,|L1.2560|
0008d0  ebfffffe          BL       write32
0008d4  e59f0120          LDR      r0,|L1.2556|
0008d8  ebfffffe          BL       read32
0008dc  e3807010          ORR      r7,r0,#0x10
0008e0  e1a01007          MOV      r1,r7
0008e4  e59f0110          LDR      r0,|L1.2556|
0008e8  ebfffffe          BL       write32
0008ec  e1a00000          MOV      r0,r0
;;;568    
;;;569      if (pdat->rstdefe >= 0) // De-assert DEFE_RST
0008f0  e5940018          LDR      r0,[r4,#0x18]
0008f4  e3500000          CMP      r0,#0
0008f8  ba000005          BLT      |L1.2324|
;;;570        reset_f1c100s_deassert(&reset_2, pdat->rstdefe - reset_2.base);
0008fc  e59f2100          LDR      r2,|L1.2564|
000900  e5940018          LDR      r0,[r4,#0x18]
000904  e5922004          LDR      r2,[r2,#4]  ; reset_2
000908  e0401002          SUB      r1,r0,r2
00090c  e59f00f0          LDR      r0,|L1.2564|
000910  ebfffffe          BL       reset_f1c100s_deassert
                  |L1.2324|
;;;571      if (pdat->rstdebe >= 0) // De-assert DEBE_RST
000914  e594001c          LDR      r0,[r4,#0x1c]
000918  e3500000          CMP      r0,#0
00091c  ba000005          BLT      |L1.2360|
;;;572        reset_f1c100s_deassert(&reset_2, pdat->rstdebe - reset_2.base);
000920  e59f20dc          LDR      r2,|L1.2564|
000924  e594001c          LDR      r0,[r4,#0x1c]
000928  e5922004          LDR      r2,[r2,#4]  ; reset_2
00092c  e0401002          SUB      r1,r0,r2
000930  e59f00cc          LDR      r0,|L1.2564|
000934  ebfffffe          BL       reset_f1c100s_deassert
                  |L1.2360|
;;;573      if (pdat->rsttcon >= 0) // De-assert LCD_RST
000938  e5940020          LDR      r0,[r4,#0x20]
00093c  e3500000          CMP      r0,#0
000940  ba000005          BLT      |L1.2396|
;;;574        reset_f1c100s_deassert(&reset_2, pdat->rsttcon - reset_2.base);
000944  e59f20b8          LDR      r2,|L1.2564|
000948  e5940020          LDR      r0,[r4,#0x20]
00094c  e5922004          LDR      r2,[r2,#4]  ; reset_2
000950  e0401002          SUB      r1,r0,r2
000954  e59f00a8          LDR      r0,|L1.2564|
000958  ebfffffe          BL       reset_f1c100s_deassert
                  |L1.2396|
;;;575    
;;;576      // F1C100S_DEBE_BASE寄存器组全清零
;;;577      for (i = 0x0800; i < 0x1000; i += 4)
00095c  e3a06b02          MOV      r6,#0x800
000960  ea000004          B        |L1.2424|
                  |L1.2404|
;;;578        write32(pdat->virtdebe + i, 0);
000964  e5941004          LDR      r1,[r4,#4]
000968  e0810006          ADD      r0,r1,r6
00096c  e3a01000          MOV      r1,#0
000970  ebfffffe          BL       write32
000974  e2866004          ADD      r6,r6,#4              ;577
                  |L1.2424|
000978  e3560a01          CMP      r6,#0x1000            ;577
00097c  bafffff8          BLT      |L1.2404|
;;;579    
;;;580      // 开始配置LCD控制器
;;;581      fb_f1c100s_init_hw(pdat);
000980  e1a00004          MOV      r0,r4
000984  ebfffffe          BL       fb_f1c100s_init_hw
;;;582      f1c100s_debe_set_address(pdat, pdat->vram[0]);
000988  e5941040          LDR      r1,[r4,#0x40]
00098c  e1a00004          MOV      r0,r4
000990  ebfffffe          BL       f1c100s_debe_set_address
;;;583    }
000994  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2456|
                          DCD      0x00000904
                  |L1.2460|
                          DCD      0x01c2010c
                  |L1.2464|
                          DCD      0x01c20104
                  |L1.2468|
                          DCD      0x11111111
                  |L1.2472|
                          DCD      0x01010000
                  |L1.2476|
                          DCD      0x15151111
                  |L1.2480|
                          DCD      0x57575555
                  |L1.2484|
                          DCD      0x7f7f7777
                  |L1.2488|
                          DCD      0x80000050
                  |L1.2492|
                          DCD      clk_pll_video
                  |L1.2496|
                          DCD      GPIO_PD
                  |L1.2500|
                          DCD      fb_f1c100s_priv_object
                  |L1.2504|
0009c8  636c6b64          DCB      "clkdefe",0
0009cc  65666500
                  |L1.2512|
0009d0  636c6b64          DCB      "clkdebe",0
0009d4  65626500
                  |L1.2520|
0009d8  636c6b74          DCB      "clktcon",0
0009dc  636f6e00
                  |L1.2528|
                          DCD      fb_mem
                  |L1.2532|
                          DCD      fb_mem+0x1d4c00
                  |L1.2536|
                          DCD      0x01f78a40
                  |L1.2540|
                          DCD      led_pwm_bl
                  |L1.2544|
0009f0  66622d66          DCB      "fb-f1c100s",0
0009f4  31633130
0009f8  307300  
0009fb  00                DCB      0
                  |L1.2556|
                          DCD      0x01c20064
                  |L1.2560|
                          DCD      0x01c20118
                  |L1.2564|
                          DCD      reset_2
                          ENDP

                  fb_f1c100s_get_vram1 PROC
;;;584    
;;;585    void* fb_f1c100s_get_vram1(void)
000a08  e51f0030          LDR      r0,|L1.2528|
;;;586    {
;;;587      return fb_mem[0];
;;;588    }
000a0c  e12fff1e          BX       lr
;;;589    
                          ENDP

                  fb_f1c100s_get_vram2 PROC
;;;590    void* fb_f1c100s_get_vram2(void)
000a10  e51f0034          LDR      r0,|L1.2532|
;;;591    {
;;;592      return fb_mem[1];
;;;593    }
000a14  e12fff1e          BX       lr
;;;594    
                          ENDP

                  fb_f1c100s_remove PROC
;;;595    void fb_f1c100s_remove(framebuffer_t* fb)
000a18  e92d4070          PUSH     {r4-r6,lr}
;;;596    {
000a1c  e1a04000          MOV      r4,r0
;;;597      //fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
;;;598    
;;;599      if (fb) {
000a20  e3540000          CMP      r4,#0
000a24  0a00002a          BEQ      |L1.2772|
;;;600        f1c100s_clk_defe_disable();
000a28  e1a00000          MOV      r0,r0
000a2c  e51f0098          LDR      r0,|L1.2460|
000a30  ebfffffe          BL       read32
000a34  e3c05102          BIC      r5,r0,#0x80000000
000a38  e1a01005          MOV      r1,r5
000a3c  e51f00a8          LDR      r0,|L1.2460|
000a40  ebfffffe          BL       write32
000a44  e51f0050          LDR      r0,|L1.2556|
000a48  ebfffffe          BL       read32
000a4c  e3c05901          BIC      r5,r0,#0x4000
000a50  e1a01005          MOV      r1,r5
000a54  e51f0060          LDR      r0,|L1.2556|
000a58  ebfffffe          BL       write32
000a5c  e1a00000          MOV      r0,r0
;;;601        f1c100s_clk_debe_disable();
000a60  e1a00000          MOV      r0,r0
000a64  e51f00cc          LDR      r0,|L1.2464|
000a68  ebfffffe          BL       read32
000a6c  e3c05102          BIC      r5,r0,#0x80000000
000a70  e1a01005          MOV      r1,r5
000a74  e51f00dc          LDR      r0,|L1.2464|
000a78  ebfffffe          BL       write32
000a7c  e51f0088          LDR      r0,|L1.2556|
000a80  ebfffffe          BL       read32
000a84  e3c05a01          BIC      r5,r0,#0x1000
000a88  e1a01005          MOV      r1,r5
000a8c  e51f0098          LDR      r0,|L1.2556|
000a90  ebfffffe          BL       write32
000a94  e1a00000          MOV      r0,r0
;;;602        f1c100s_clk_tcon_disable();
000a98  e1a00000          MOV      r0,r0
000a9c  e51f00a4          LDR      r0,|L1.2560|
000aa0  ebfffffe          BL       read32
000aa4  e3c05102          BIC      r5,r0,#0x80000000
000aa8  e1a01005          MOV      r1,r5
000aac  e51f00b4          LDR      r0,|L1.2560|
000ab0  ebfffffe          BL       write32
000ab4  e51f00c0          LDR      r0,|L1.2556|
000ab8  ebfffffe          BL       read32
000abc  e3c05010          BIC      r5,r0,#0x10
000ac0  e1a01005          MOV      r1,r5
000ac4  e51f00d0          LDR      r0,|L1.2556|
000ac8  ebfffffe          BL       write32
000acc  e1a00000          MOV      r0,r0
000ad0  e1a00000          MOV      r0,r0
                  |L1.2772|
;;;603      }
;;;604    }
000ad4  e8bd8070          POP      {r4-r6,pc}
;;;605    
                          ENDP

                  fb_f1c100s_suspend PROC
;;;606    void fb_f1c100s_suspend(framebuffer_t* fb)
000ad8  e92d4070          PUSH     {r4-r6,lr}
;;;607    {
000adc  e1a05000          MOV      r5,r0
;;;608      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
000ae0  e5954018          LDR      r4,[r5,#0x18]
;;;609    
;;;610      //pdat->brightness = led_get_brightness(pdat->backlight);
;;;611      pdat->brightness = pwm_f1c100s_get_duty(pdat->backlight);
000ae4  e5940074          LDR      r0,[r4,#0x74]
000ae8  e5901008          LDR      r1,[r0,#8]
000aec  e5841078          STR      r1,[r4,#0x78]
;;;612      //led_set_brightness(pdat->backlight, 0);
;;;613      pwm_f1c100s_set_duty(pdat->backlight, 0);
000af0  e3a01000          MOV      r1,#0
000af4  e5940074          LDR      r0,[r4,#0x74]
000af8  ebfffffe          BL       pwm_f1c100s_set_duty
;;;614    }
000afc  e8bd8070          POP      {r4-r6,pc}
;;;615    
                          ENDP

                  fb_f1c100s_resume PROC
;;;616    void fb_f1c100s_resume(framebuffer_t* fb)
000b00  e92d4070          PUSH     {r4-r6,lr}
;;;617    {
000b04  e1a04000          MOV      r4,r0
;;;618      fb_f1c100s_priv_data_t* pdat = (fb_f1c100s_priv_data_t*)fb->priv;
000b08  e5945018          LDR      r5,[r4,#0x18]
;;;619    
;;;620      //led_set_brightness(pdat->backlight, pdat->brightness);
;;;621      pwm_f1c100s_set_duty(pdat->backlight, pdat->brightness);
000b0c  e5950074          LDR      r0,[r5,#0x74]
000b10  e5951078          LDR      r1,[r5,#0x78]
000b14  ebfffffe          BL       pwm_f1c100s_set_duty
;;;622    }
000b18  e8bd8070          POP      {r4-r6,pc}
                          ENDP

                  read32 PROC
;;;19     
;;;20     static __inline uint32_t read32(uint32_t addr)
000b1c  e1a01000          MOV      r1,r0
;;;21     {
;;;22       return (*((volatile uint32_t*)(addr)));
000b20  e5910000          LDR      r0,[r1,#0]
;;;23     }
000b24  e12fff1e          BX       lr
;;;24     
                          ENDP

                  write32 PROC
;;;39     
;;;40     static __inline void write32(uint32_t addr, uint32_t value)
000b28  e5801000          STR      r1,[r0,#0]
;;;41     {
;;;42       *((volatile uint32_t*)(addr)) = value;
;;;43     }
000b2c  e12fff1e          BX       lr
;;;44     
                          ENDP

                  f1c100s_tcon_clk_get_rate PROC
;;;226    
;;;227    inline static uint64_t f1c100s_tcon_clk_get_rate()
000b30  e92d4010          PUSH     {r4,lr}
;;;228    {
;;;229      return clk_f1c100s_pll_get_rate(&clk_pll_video, clk_pll_video.prate);
000b34  e51f0180          LDR      r0,|L1.2492|
000b38  e590100c          LDR      r1,[r0,#0xc]  ; clk_pll_video
000b3c  e1a02001          MOV      r2,r1
000b40  e3a03000          MOV      r3,#0
000b44  ebfffffe          BL       clk_f1c100s_pll_get_rate
;;;230    }
000b48  e8bd8010          POP      {r4,pc}
;;;231    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=5

                  fb_f1c100s_priv_object
                          %        128
                  fb_mem
                          %        3840000

                          AREA ||.data||, DATA, ALIGN=2

                  led_pwm_bl
                          DCD      0x01c21000
                          DCD      0x00000000
                          DCD      0x00000064
                          DCD      0x000f4240
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      GPIO_PE
                          DCD      0x00000006
                          DCD      0x00000003
                  reset_1
                          DCD      0x01c202c0
                          DCD      0x00000000
                          DCD      0x00000020
                  reset_2
                          DCD      0x01c202c4
                          DCD      0x00000020
                          DCD      0x00000020
                  reset_3
                          DCD      0x01c202d0
                          DCD      0x00000040
                          DCD      0x00000020
                  clk_pll_video
                          DCD      0x01c20000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x016e3600
