; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\dcd_sunxi_musb.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\dcd_sunxi_musb.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\dcd_sunxi_musb.crf ..\tinyusb\src\portable\sunxi\dcd_sunxi_musb.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USBC_SelectBus PROC
;;;186    
;;;187    void USBC_SelectBus(u32 io_type, u32 ep_type, u32 ep_index)
000000  e59f3938          LDR      r3,|L1.2368|
;;;188    {
;;;189    	u32 reg_val = 0;
;;;190    
;;;191    	reg_val = USBC_Readb(USBC_REG_VEND0(USBC0_BASE));
;;;192    	if (io_type == USBC_IO_TYPE_DMA) {
000004  e3500001          CMP      r0,#1
000008  e5d30043          LDRB     r0,[r3,#0x43]         ;191
;;;193    		if (ep_type == USBC_EP_TYPE_TX) {
;;;194    			reg_val |= ((ep_index - 0x01) << 1) << USBC_BP_VEND0_DRQ_SEL;  //drq_sel
;;;195    			reg_val |= 0x1<<USBC_BP_VEND0_BUS_SEL;   //io_dma
;;;196    		} else {
;;;197    			reg_val |= ((ep_index << 1) - 0x01) << USBC_BP_VEND0_DRQ_SEL;
;;;198    			reg_val |= 0x1<<USBC_BP_VEND0_BUS_SEL;
;;;199    		}
;;;200    	} else {
;;;201    		//reg_val &= ~(0x1 << USBC_BP_VEND0_DRQ_SEL);  //clear drq_sel, select pio
;;;202    		reg_val &= 0x00;  // clear drq_sel, select pio
00000c  13a00000          MOVNE    r0,#0
000010  0a000001          BEQ      |L1.28|
                  |L1.20|
;;;203    	}
;;;204    
;;;205    	/* in 1667 1673 and later ic, FIFO_BUS_SEL bit(bit24 of reg0x40 for host/device)
;;;206    	 * is fixed to 1, the hw guarantee that it's ok for cpu/inner_dma/outer_dma transfer */
;;;207    
;;;208    //	reg_val |= 0x1<<USBC_BP_VEND0_BUS_SEL;  //for 1663 set 1: enable dma, set 0: enable fifo
;;;209    
;;;210    	USBC_Writeb(reg_val, USBC_REG_VEND0(USBC0_BASE));
000014  e5c30043          STRB     r0,[r3,#0x43]
;;;211    }
000018  e12fff1e          BX       lr
                  |L1.28|
00001c  e3510002          CMP      r1,#2                 ;193
000020  03e01003          MVNEQ    r1,#3                 ;194
000024  13e01001          MVNNE    r1,#1                 ;197
000028  e0811102          ADD      r1,r1,r2,LSL #2       ;197
00002c  e1800001          ORR      r0,r0,r1              ;197
000030  e3800001          ORR      r0,r0,#1              ;198
000034  eafffff6          B        |L1.20|
;;;212    
                          ENDP

                  pipe_write_packet PROC
;;;478    
;;;479    static void pipe_write_packet(void *buff, volatile void *fifo, unsigned cnt)
000038  e1a03122          LSR      r3,r2,#2
;;;480    {
;;;481     	u32 len = 0;
;;;482    	u32 i32 = 0;
;;;483    	u32 i8  = 0;
;;;484    	u8  *buf8  = 0;
;;;485    	u32 *buf32 = 0;
;;;486    
;;;487    	//--<1>-- adjust data
;;;488    	buf32 = buff;
;;;489    	len   = cnt;
;;;490    
;;;491    	i32 = len >> 2;
;;;492    	i8  = len & 0x03;
;;;493    
;;;494    	//--<2>-- deal with 4byte part
;;;495    	while (i32--) {
00003c  e3530000          CMP      r3,#0
000040  e2022003          AND      r2,r2,#3              ;492
000044  da000004          BLE      |L1.92|
                  |L1.72|
;;;496    		USBC_Writel(*buf32++, fifo);
000048  e490c004          LDR      r12,[r0],#4
00004c  e581c000          STR      r12,[r1,#0]
000050  e2433001          SUB      r3,r3,#1
000054  e3530000          CMP      r3,#0
000058  cafffffa          BGT      |L1.72|
                  |L1.92|
;;;497    	}
;;;498    
;;;499    	//--<3>-- deal with no 4byte part
;;;500    	buf8 = (u8 *)buf32;
;;;501    	while (i8--) {
00005c  e3520000          CMP      r2,#0
;;;502    		USBC_Writeb(*buf8++, fifo);
;;;503    	}
;;;504    }
000060  d12fff1e          BXLE     lr
                  |L1.100|
000064  e4d03001          LDRB     r3,[r0],#1            ;502
000068  e5c13000          STRB     r3,[r1,#0]            ;502
00006c  e2422001          SUB      r2,r2,#1              ;502
000070  e3520000          CMP      r2,#0                 ;502
000074  cafffffa          BGT      |L1.100|
000078  e12fff1e          BX       lr
;;;505    
                          ENDP

                  pipe_read_packet PROC
;;;506    static void pipe_read_packet(void *buff, volatile void *fifo, unsigned cnt)
00007c  e1a03122          LSR      r3,r2,#2
;;;507    {
;;;508    	u32 len = 0;
;;;509    	u32 i32 = 0;
;;;510    	u32 i8  = 0;
;;;511    	u8  *buf8  = 0;
;;;512    	u32 *buf32 = 0;
;;;513    
;;;514    	//--<1>-- adjust data
;;;515    	buf32 = buff;
;;;516    	len   = cnt;
;;;517    
;;;518    	i32 = len >> 2;
;;;519    	i8  = len & 0x03;
;;;520    
;;;521    	//--<2>-- deal with 4byte part
;;;522    	while (i32--) {
000080  e3530000          CMP      r3,#0
000084  e2022003          AND      r2,r2,#3              ;519
000088  da000004          BLE      |L1.160|
                  |L1.140|
;;;523    		*buf32++ = USBC_Readl(fifo);
00008c  e591c000          LDR      r12,[r1,#0]
000090  e2433001          SUB      r3,r3,#1
000094  e3530000          CMP      r3,#0
000098  e480c004          STR      r12,[r0],#4
00009c  cafffffa          BGT      |L1.140|
                  |L1.160|
;;;524    	}
;;;525    
;;;526    	//--<3>-- deal with no 4byte part
;;;527    	buf8 = (u8 *)buf32;
;;;528    	while (i8--) {
0000a0  e3520000          CMP      r2,#0
;;;529    		*buf8++ = USBC_Readb(fifo);
;;;530    	}
;;;531    }
0000a4  d12fff1e          BXLE     lr
                  |L1.168|
0000a8  e5d13000          LDRB     r3,[r1,#0]            ;529
0000ac  e2422001          SUB      r2,r2,#1              ;529
0000b0  e3520000          CMP      r2,#0                 ;529
0000b4  e4c03001          STRB     r3,[r0],#1            ;529
0000b8  cafffffa          BGT      |L1.168|
0000bc  e12fff1e          BX       lr
;;;532    
                          ENDP

                  process_edpt_n PROC
;;;812    
;;;813    static void process_edpt_n(uint8_t rhport, uint_fast8_t ep_addr)
0000c0  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;814    {
;;;815      bool completed;
;;;816      const unsigned dir_in     = tu_edpt_dir(ep_addr);
0000c4  e1a00c01          LSL      r0,r1,#24
0000c8  e1b0afa0          LSRS     r10,r0,#31
0000cc  e59f086c          LDR      r0,|L1.2368|
0000d0  e1a06001          MOV      r6,r1                 ;814
0000d4  e24dd054          SUB      sp,sp,#0x54           ;814
;;;817      const unsigned epn        = tu_edpt_number(ep_addr);
0000d8  e201107f          AND      r1,r1,#0x7f
0000dc  e5c01042          STRB     r1,[r0,#0x42]
0000e0  e206107f          AND      r1,r6,#0x7f
0000e4  e58d104c          STR      r1,[sp,#0x4c]
0000e8  0a00000e          BEQ      |L1.296|
0000ec  e1d018b2          LDRH     r1,[r0,#0x82]         ;814
0000f0  e3110020          TST      r1,#0x20              ;814
;;;818    
;;;819      USBC_SelectActiveEp(epn);
;;;820    
;;;821      if (dir_in) {
;;;822        // TU_LOG1(" TXCSRL%d = %x\n", epn_minus1 + 1, regs->TXCSRL);
;;;823        if (__USBC_Dev_Tx_IsEpStall()) {
0000f4  0a000005          BEQ      |L1.272|
0000f8  e1d018b2          LDRH     r1,[r0,#0x82]
0000fc  e3c11034          BIC      r1,r1,#0x34
000100  e3811040          ORR      r1,r1,#0x40
000104  e1c018b2          STRH     r1,[r0,#0x82]
;;;824    	  __USBC_Dev_Tx_ClearStall();
;;;825          return;
;;;826        }
;;;827        completed = handle_xfer_in(ep_addr);
;;;828      } else {
;;;829        // TU_LOG1(" RXCSRL%d = %x\n", epn_minus1 + 1, regs->RXCSRL);
;;;830        if (__USBC_Dev_Rx_IsEpStall()) {
;;;831    	    __USBC_Dev_Rx_ClearStall();
;;;832          return;
;;;833        }
;;;834        completed = handle_xfer_out(ep_addr);
;;;835      }
;;;836    
;;;837      if (completed) {
;;;838        pipe_state_t *pipe = &_dcd.pipe[dir_in][tu_edpt_number(ep_addr) - 1];
;;;839        dcd_event_xfer_complete(rhport, ep_addr,
;;;840                                pipe->length - pipe->remaining,
;;;841                                XFER_RESULT_SUCCESS, true);
;;;842      }
;;;843    }
000108  e28dd05c          ADD      sp,sp,#0x5c
00010c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.272|
000110  e1a00006          MOV      r0,r6                 ;827
000114  ebfffffe          BL       handle_xfer_in
000118  e3500000          CMP      r0,#0                 ;837
00011c  1a000083          BNE      |L1.816|
000120  e28dd05c          ADD      sp,sp,#0x5c
000124  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.296|
000128  e1d018b6          LDRH     r1,[r0,#0x86]
00012c  e3110040          TST      r1,#0x40
000130  0a000005          BEQ      |L1.332|
000134  e1d018b6          LDRH     r1,[r0,#0x86]         ;830
000138  e3c11064          BIC      r1,r1,#0x64           ;830
00013c  e3811080          ORR      r1,r1,#0x80           ;830
000140  e1c018b6          STRH     r1,[r0,#0x86]         ;830
000144  e28dd05c          ADD      sp,sp,#0x5c
000148  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.332|
00014c  e1d048b6          LDRH     r4,[r0,#0x86]
000150  e59f27ec          LDR      r2,|L1.2372|
000154  e59d104c          LDR      r1,[sp,#0x4c]
000158  e06a318a          RSB      r3,r10,r10,LSL #3
00015c  e082c183          ADD      r12,r2,r3,LSL #3
000160  e2411001          SUB      r1,r1,#1
000164  e3140001          TST      r4,#1
000168  e08cc181          ADD      r12,r12,r1,LSL #3
00016c  e28c8013          ADD      r8,r12,#0x13
000170  028dd05c          ADDEQ    sp,sp,#0x5c
000174  08bd8ff0          POPEQ    {r4-r11,pc}
000178  e5d8c007          LDRB     r12,[r8,#7]
00017c  e59f07bc          LDR      r0,|L1.2368|
000180  e5d83006          LDRB     r3,[r8,#6]
000184  e1d0b8b4          LDRH     r11,[r0,#0x84]
000188  e1d048b8          LDRH     r4,[r0,#0x88]
00018c  e183940c          ORR      r9,r3,r12,LSL #8
000190  e15b0009          CMP      r11,r9
000194  91a0000b          MOVLS    r0,r11
000198  81a00009          MOVHI    r0,r9
00019c  e1500004          CMP      r0,r4
0001a0  2a000002          BCS      |L1.432|
0001a4  e159000b          CMP      r9,r11
0001a8  21a0400b          MOVCS    r4,r11
0001ac  31a04009          MOVCC    r4,r9
                  |L1.432|
0001b0  e5d8e000          LDRB     lr,[r8,#0]
0001b4  e3a00000          MOV      r0,#0
0001b8  e5d83001          LDRB     r3,[r8,#1]
0001bc  e1a05000          MOV      r5,r0
0001c0  e5d8c002          LDRB     r12,[r8,#2]
0001c4  e5d87003          LDRB     r7,[r8,#3]
0001c8  e185500e          ORR      r5,r5,lr
0001cc  e1855403          ORR      r5,r5,r3,LSL #8
0001d0  e185580c          ORR      r5,r5,r12,LSL #16
0001d4  e3540000          CMP      r4,#0
0001d8  e3a00001          MOV      r0,#1
0001dc  e1855c07          ORR      r5,r5,r7,LSL #24
0001e0  0a000046          BEQ      |L1.768|
0001e4  e1d228b4          LDRH     r2,[r2,#0x84]  ; _dcd
0001e8  e59f3758          LDR      r3,|L1.2376|
0001ec  e1120110          TST      r2,r0,LSL r1
0001f0  e0833101          ADD      r3,r3,r1,LSL #2
0001f4  0a000024          BEQ      |L1.652|
0001f8  e59f074c          LDR      r0,|L1.2380|
0001fc  e58d301c          STR      r3,[sp,#0x1c]
000200  e5902000          LDR      r2,[r0,#0]
000204  e28d103c          ADD      r1,sp,#0x3c
000208  e1a00005          MOV      r0,r5
00020c  e12fff32          BLX      r2
000210  e1dd73bc          LDRH     r7,[sp,#0x3c]
000214  e59f0730          LDR      r0,|L1.2380|
000218  e59d101c          LDR      r1,[sp,#0x1c]
00021c  e1570004          CMP      r7,r4
000220  e5903008          LDR      r3,[r0,#8]
000224  81a07004          MOVHI    r7,r4
000228  e59d0040          LDR      r0,[sp,#0x40]
00022c  e1a02007          MOV      r2,r7
000230  e12fff33          BLX      r3
000234  e0547007          SUBS     r7,r4,r7
000238  0a00000b          BEQ      |L1.620|
00023c  e1dd03be          LDRH     r0,[sp,#0x3e]
000240  e59d101c          LDR      r1,[sp,#0x1c]
000244  e1500007          CMP      r0,r7
000248  81a00007          MOVHI    r0,r7
00024c  e58d0000          STR      r0,[sp,#0]
000250  e59f06f4          LDR      r0,|L1.2380|
000254  e59d2000          LDR      r2,[sp,#0]
000258  e5903008          LDR      r3,[r0,#8]
00025c  e59d0044          LDR      r0,[sp,#0x44]
000260  e12fff33          BLX      r3
000264  e59d0000          LDR      r0,[sp,#0]
000268  e0477000          SUB      r7,r7,r0
                  |L1.620|
00026c  e59f06d8          LDR      r0,|L1.2380|
000270  e0441007          SUB      r1,r4,r7
000274  e5902004          LDR      r2,[r0,#4]
000278  e1a01801          LSL      r1,r1,#16
00027c  e1a01821          LSR      r1,r1,#16
000280  e1a00005          MOV      r0,r5
000284  e12fff32          BLX      r2
000288  ea000018          B        |L1.752|
                  |L1.652|
00028c  e1a01124          LSR      r1,r4,#2
000290  e3510000          CMP      r1,#0
000294  e1a00005          MOV      r0,r5
000298  e2042003          AND      r2,r4,#3
00029c  da000004          BLE      |L1.692|
                  |L1.672|
0002a0  e593c000          LDR      r12,[r3,#0]
0002a4  e2411001          SUB      r1,r1,#1
0002a8  e3510000          CMP      r1,#0
0002ac  e480c004          STR      r12,[r0],#4
0002b0  cafffffa          BGT      |L1.672|
                  |L1.692|
0002b4  e3520000          CMP      r2,#0
0002b8  da000004          BLE      |L1.720|
                  |L1.700|
0002bc  e5d31000          LDRB     r1,[r3,#0]
0002c0  e2422001          SUB      r2,r2,#1
0002c4  e3520000          CMP      r2,#0
0002c8  e4c01001          STRB     r1,[r0],#1
0002cc  cafffffa          BGT      |L1.700|
                  |L1.720|
0002d0  e0850004          ADD      r0,r5,r4
0002d4  e1a01420          LSR      r1,r0,#8
0002d8  e5c80000          STRB     r0,[r8,#0]
0002dc  e1a02820          LSR      r2,r0,#16
0002e0  e5c81001          STRB     r1,[r8,#1]
0002e4  e1a03c20          LSR      r3,r0,#24
0002e8  e5c82002          STRB     r2,[r8,#2]
0002ec  e5c83003          STRB     r3,[r8,#3]
                  |L1.752|
0002f0  e0490004          SUB      r0,r9,r4
0002f4  e1a01420          LSR      r1,r0,#8
0002f8  e5c80006          STRB     r0,[r8,#6]
0002fc  e5c81007          STRB     r1,[r8,#7]
                  |L1.768|
000300  e154000b          CMP      r4,r11
000304  3a000001          BCC      |L1.784|
000308  e1590004          CMP      r9,r4
00030c  1a000024          BNE      |L1.932|
                  |L1.784|
000310  e3a00000          MOV      r0,#0
000314  e5c80000          STRB     r0,[r8,#0]
000318  e5c80001          STRB     r0,[r8,#1]
00031c  e5c80002          STRB     r0,[r8,#2]
000320  e3550000          CMP      r5,#0
000324  e5c80003          STRB     r0,[r8,#3]
000328  028dd05c          ADDEQ    sp,sp,#0x5c
00032c  08bd8ff0          POPEQ    {r4-r11,pc}
                  |L1.816|
000330  e06a118a          RSB      r1,r10,r10,LSL #3     ;838
000334  e59f0608          LDR      r0,|L1.2372|
000338  e0801181          ADD      r1,r0,r1,LSL #3       ;838
00033c  e59d004c          LDR      r0,[sp,#0x4c]         ;838
000340  e0810180          ADD      r0,r1,r0,LSL #3       ;838
000344  e280100b          ADD      r1,r0,#0xb            ;838
000348  e5d13007          LDRB     r3,[r1,#7]            ;839
00034c  e5d1c005          LDRB     r12,[r1,#5]           ;839
000350  e5d12004          LDRB     r2,[r1,#4]            ;839
000354  e1a04403          LSL      r4,r3,#8              ;839
000358  e5d11006          LDRB     r1,[r1,#6]            ;839
00035c  e182340c          ORR      r3,r2,r12,LSL #8      ;839
000360  e59fc5e8          LDR      r12,|L1.2384|
000364  e1811004          ORR      r1,r1,r4              ;839
000368  e59c4018          LDR      r4,[r12,#0x18]        ;839  ; <Data3>, <Data3>
00036c  e59d0054          LDR      r0,[sp,#0x54]         ;839
000370  e59cc01c          LDR      r12,[r12,#0x1c]       ;839
000374  e98d1010          STMIB    sp,{r4,r12}           ;839
000378  e0433001          SUB      r3,r3,r1              ;839
00037c  e3a02000          MOV      r2,#0                 ;839
000380  e5cd0004          STRB     r0,[sp,#4]            ;839
000384  e5cd6008          STRB     r6,[sp,#8]            ;839
000388  e3a01001          MOV      r1,#1                 ;839
00038c  e28d0004          ADD      r0,sp,#4              ;839
000390  e58d300c          STR      r3,[sp,#0xc]          ;839
000394  e5cd2009          STRB     r2,[sp,#9]            ;839
000398  ebfffffe          BL       dcd_event_handler
00039c  e28dd05c          ADD      sp,sp,#0x5c
0003a0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.932|
0003a4  e59f1594          LDR      r1,|L1.2368|
0003a8  e3a00000          MOV      r0,#0
0003ac  e5c10086          STRB     r0,[r1,#0x86]
0003b0  e28dd05c          ADD      sp,sp,#0x5c
0003b4  e8bd8ff0          POP      {r4-r11,pc}
;;;844    
                          ENDP

                  dcd_int_handler PROC
;;;1167   
;;;1168   void dcd_int_handler(uint8_t rhport)
0003b8  e92d4ff0          PUSH     {r4-r11,lr}
;;;1169   {
;;;1170     uint8_t is;
;;;1171     uint16_t txis, rxis;
;;;1172   
;;;1173     is   = USBC_Readb(USBC_REG_INTUSB(USBC0_BASE));   /* read interrupt status */
0003bc  e59f557c          LDR      r5,|L1.2368|
0003c0  e1a07000          MOV      r7,r0                 ;1169
0003c4  e5d5004c          LDRB     r0,[r5,#0x4c]
0003c8  e24dd014          SUB      sp,sp,#0x14           ;1169
0003cc  e3a08000          MOV      r8,#0
;;;1174     txis = USBC_Readw(USBC_REG_INTTx(USBC0_BASE)); /* read interrupt status */
0003d0  e1d544b4          LDRH     r4,[r5,#0x44]
;;;1175     rxis = USBC_Readw(USBC_REG_INTRx(USBC0_BASE)); /* read interrupt status */
0003d4  e1d514b6          LDRH     r1,[r5,#0x46]
0003d8  e58d1000          STR      r1,[sp,#0]
;;;1176   
;;;1177     is &= USBC_Readb(USBC_REG_INTUSBE(USBC0_BASE)); /* ignore disabled interrupts */
0003dc  e5d51050          LDRB     r1,[r5,#0x50]
0003e0  e001a000          AND      r10,r1,r0
;;;1178     USBC_Writeb(is, USBC_REG_INTUSB(USBC0_BASE)); /* sunxi musb requires a write to interrupt register to clear */
;;;1179     if (is & USBC_INTUSB_DISCONNECT) {
0003e4  e31a0020          TST      r10,#0x20
0003e8  e5c5a04c          STRB     r10,[r5,#0x4c]        ;1178
0003ec  0a000008          BEQ      |L1.1044|
0003f0  e58d8004          STR      r8,[sp,#4]            ;1169
;;;1180   	dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
0003f4  e3a00002          MOV      r0,#2
0003f8  e5cd7004          STRB     r7,[sp,#4]
0003fc  e5cd0005          STRB     r0,[sp,#5]
000400  e3a01001          MOV      r1,#1
000404  e28d0004          ADD      r0,sp,#4
000408  e58d8008          STR      r8,[sp,#8]
00040c  e58d800c          STR      r8,[sp,#0xc]
000410  ebfffffe          BL       dcd_event_handler
                  |L1.1044|
;;;1181     }
;;;1182     if (is & USBC_INTUSB_SOF) {
000414  e31a0008          TST      r10,#8
000418  0a000008          BEQ      |L1.1088|
00041c  e58d8004          STR      r8,[sp,#4]
;;;1183       dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
000420  e3a00003          MOV      r0,#3
000424  e5cd7004          STRB     r7,[sp,#4]
000428  e5cd0005          STRB     r0,[sp,#5]
00042c  e3a01001          MOV      r1,#1
000430  e28d0004          ADD      r0,sp,#4
000434  e58d8008          STR      r8,[sp,#8]
000438  e58d800c          STR      r8,[sp,#0xc]
00043c  ebfffffe          BL       dcd_event_handler
                  |L1.1088|
000440  e59f9508          LDR      r9,|L1.2384|
000444  e59f64f8          LDR      r6,|L1.2372|
;;;1184     }
;;;1185     if (is & USBC_INTUSB_RESET) {
000448  e31a0004          TST      r10,#4
00044c  e3a0b0ff          MOV      r11,#0xff
000450  0a000019          BEQ      |L1.1212|
;;;1186       /* ep0 FADDR must be 0 when (re)entering peripheral mode */
;;;1187       USBC_SelectActiveEp(0);
000454  e3a00000          MOV      r0,#0
000458  e5c50042          STRB     r0,[r5,#0x42]
00045c  e5c50098          STRB     r0,[r5,#0x98]
000460  e5c6b000          STRB     r11,[r6,#0]  ; _dcd
000464  e5c6800a          STRB     r8,[r6,#0xa]  ; _dcd
000468  e1a01428          LSR      r1,r8,#8
00046c  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
000470  e1a02828          LSR      r2,r8,#16
000474  e5c6100c          STRB     r1,[r6,#0xc]  ; _dcd
000478  e1a03c28          LSR      r3,r8,#24
00047c  e5c6200d          STRB     r2,[r6,#0xd]  ; _dcd
000480  e3a00001          MOV      r0,#1
000484  e5c6300e          STRB     r3,[r6,#0xe]  ; _dcd
000488  e1c504b8          STRH     r0,[r5,#0x48]
00048c  e1c584ba          STRH     r8,[r5,#0x4a]
000490  e5d50040          LDRB     r0,[r5,#0x40]
000494  e899100c          LDM      r9,{r2,r3,r12}
000498  e28de004          ADD      lr,sp,#4
00049c  e88e100c          STM      lr,{r2,r3,r12}
0004a0  e2100010          ANDS     r0,r0,#0x10
0004a4  13a00002          MOVNE    r0,#2
0004a8  e5cd0008          STRB     r0,[sp,#8]
0004ac  e3a01001          MOV      r1,#1
0004b0  e28d0004          ADD      r0,sp,#4
0004b4  e5cd7004          STRB     r7,[sp,#4]
0004b8  ebfffffe          BL       dcd_event_handler
                  |L1.1212|
;;;1188       USBC_Dev_SetAddress(0);
;;;1189       process_bus_reset(rhport);
;;;1190     }
;;;1191     if (is & USBC_INTUSB_RESUME) {
0004bc  e31a0002          TST      r10,#2
0004c0  0a000008          BEQ      |L1.1256|
0004c4  e58d8004          STR      r8,[sp,#4]
;;;1192       dcd_event_bus_signal(rhport, DCD_EVENT_RESUME, true);
0004c8  e3a00005          MOV      r0,#5
0004cc  e5cd7004          STRB     r7,[sp,#4]
0004d0  e5cd0005          STRB     r0,[sp,#5]
0004d4  e3a01001          MOV      r1,#1
0004d8  e28d0004          ADD      r0,sp,#4
0004dc  e58d8008          STR      r8,[sp,#8]
0004e0  e58d800c          STR      r8,[sp,#0xc]
0004e4  ebfffffe          BL       dcd_event_handler
                  |L1.1256|
;;;1193     }
;;;1194     if (is & USBC_INTUSB_SUSPEND) {
0004e8  e31a0001          TST      r10,#1
0004ec  0a000008          BEQ      |L1.1300|
0004f0  e58d8004          STR      r8,[sp,#4]
;;;1195       dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
0004f4  e3a00004          MOV      r0,#4
0004f8  e5cd7004          STRB     r7,[sp,#4]
0004fc  e5cd0005          STRB     r0,[sp,#5]
000500  e3a01001          MOV      r1,#1
000504  e28d0004          ADD      r0,sp,#4
000508  e58d8008          STR      r8,[sp,#8]
00050c  e58d800c          STR      r8,[sp,#0xc]
000510  ebfffffe          BL       dcd_event_handler
                  |L1.1300|
;;;1196     }
;;;1197   
;;;1198     txis &= USBC_Readw(USBC_REG_INTTxE(USBC0_BASE));
000514  e1d504b8          LDRH     r0,[r5,#0x48]
000518  e3a02080          MOV      r2,#0x80
00051c  e0044000          AND      r4,r4,r0
;;;1199     USBC_Writew(txis, USBC_REG_INTTx(USBC0_BASE));
;;;1200     if (txis & USBC_INTTx_FLAG_EP0) {
000520  e3140001          TST      r4,#1
000524  e1c544b4          STRH     r4,[r5,#0x44]         ;1199
000528  0a0000cf          BEQ      |L1.2156|
00052c  e3a00000          MOV      r0,#0
000530  e5c50042          STRB     r0,[r5,#0x42]
000534  e1d5a8b2          LDRH     r10,[r5,#0x82]
000538  e31a0004          TST      r10,#4
00053c  0a000006          BEQ      |L1.1372|
000540  e1d508b2          LDRH     r0,[r5,#0x82]
000544  e3c00020          BIC      r0,r0,#0x20
000548  e1c508b2          STRH     r0,[r5,#0x82]
00054c  e1d508b2          LDRH     r0,[r5,#0x82]
000550  e3c00004          BIC      r0,r0,#4
                  |L1.1364|
000554  e1c508b2          STRH     r0,[r5,#0x82]
000558  ea0000c2          B        |L1.2152|
                  |L1.1372|
00055c  e5d60000          LDRB     r0,[r6,#0]  ; _dcd
000560  e31a0010          TST      r10,#0x10
000564  0a000029          BEQ      |L1.1552|
000568  e1d518b2          LDRH     r1,[r5,#0x82]
00056c  e35000ff          CMP      r0,#0xff
000570  e3811080          ORR      r1,r1,#0x80
000574  e1c518b2          STRH     r1,[r5,#0x82]
000578  0a000021          BEQ      |L1.1540|
00057c  e5d6e00b          LDRB     lr,[r6,#0xb]  ; _dcd
000580  e5d6300c          LDRB     r3,[r6,#0xc]  ; _dcd
000584  e5d6c00d          LDRB     r12,[r6,#0xd]  ; _dcd
000588  e5d6200e          LDRB     r2,[r6,#0xe]  ; _dcd
00058c  e18e1403          ORR      r1,lr,r3,LSL #8
000590  e181180c          ORR      r1,r1,r12,LSL #16
000594  e1911c02          ORRS     r1,r1,r2,LSL #24
000598  0a000019          BEQ      |L1.1540|
00059c  e1a01428          LSR      r1,r8,#8
0005a0  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
0005a4  e1a02828          LSR      r2,r8,#16
0005a8  e5c6100c          STRB     r1,[r6,#0xc]  ; _dcd
0005ac  e1a03c28          LSR      r3,r8,#24
0005b0  e5c6200d          STRB     r2,[r6,#0xd]  ; _dcd
0005b4  e5c6300e          STRB     r3,[r6,#0xe]  ; _dcd
0005b8  e5c6b000          STRB     r11,[r6,#0]  ; _dcd
0005bc  e5d61010          LDRB     r1,[r6,#0x10]  ; _dcd
0005c0  e5d63012          LDRB     r3,[r6,#0x12]  ; _dcd
0005c4  e5d6c00f          LDRB     r12,[r6,#0xf]  ; _dcd
0005c8  e5d6b011          LDRB     r11,[r6,#0x11]  ; _dcd
0005cc  e2000080          AND      r0,r0,#0x80
0005d0  e18cc401          ORR      r12,r12,r1,LSL #8
0005d4  e18b3403          ORR      r3,r11,r3,LSL #8
0005d8  e599b018          LDR      r11,[r9,#0x18]  ; <Data3>, <Data3>
0005dc  e04c3003          SUB      r3,r12,r3
0005e0  e599c01c          LDR      r12,[r9,#0x1c]
0005e4  e98d1800          STMIB    sp,{r11,r12}
0005e8  e5cd0008          STRB     r0,[sp,#8]
0005ec  e3a01001          MOV      r1,#1
0005f0  e28d0004          ADD      r0,sp,#4
0005f4  e5cd7004          STRB     r7,[sp,#4]
0005f8  e58d300c          STR      r3,[sp,#0xc]
0005fc  e5cd8009          STRB     r8,[sp,#9]
000600  ebfffffe          BL       dcd_event_handler
                  |L1.1540|
000604  e31a0001          TST      r10,#1
000608  0a000096          BEQ      |L1.2152|
00060c  ea000046          B        |L1.1836|
                  |L1.1552|
000610  e31a0001          TST      r10,#1
000614  0a00006f          BEQ      |L1.2008|
000618  e35000ff          CMP      r0,#0xff
00061c  0a000042          BEQ      |L1.1836|
000620  e5d6c00b          LDRB     r12,[r6,#0xb]  ; _dcd
000624  e5d6200c          LDRB     r2,[r6,#0xc]  ; _dcd
000628  e5d6300d          LDRB     r3,[r6,#0xd]  ; _dcd
00062c  e5d6100e          LDRB     r1,[r6,#0xe]  ; _dcd
000630  e18c0402          ORR      r0,r12,r2,LSL #8
000634  e1800803          ORR      r0,r0,r3,LSL #16
000638  e1900c01          ORRS     r0,r0,r1,LSL #24
00063c  0a000089          BEQ      |L1.2152|
000640  e5d61012          LDRB     r1,[r6,#0x12]  ; _dcd
000644  e5d62011          LDRB     r2,[r6,#0x11]  ; _dcd
000648  e1d538b8          LDRH     r3,[r5,#0x88]
00064c  e182c401          ORR      r12,r2,r1,LSL #8
000650  e35c0040          CMP      r12,#0x40
000654  31a0100c          MOVCC    r1,r12
000658  23a01040          MOVCS    r1,#0x40
00065c  e1510003          CMP      r1,r3
000660  2a000002          BCS      |L1.1648|
000664  e35c0040          CMP      r12,#0x40
000668  23a03040          MOVCS    r3,#0x40
00066c  31a0300c          MOVCC    r3,r12
                  |L1.1648|
000670  e1a01123          LSR      r1,r3,#2
000674  e3510000          CMP      r1,#0
000678  e2032003          AND      r2,r3,#3
00067c  da000004          BLE      |L1.1684|
                  |L1.1664|
000680  e595a000          LDR      r10,[r5,#0]
000684  e2411001          SUB      r1,r1,#1
000688  e3510000          CMP      r1,#0
00068c  e480a004          STR      r10,[r0],#4
000690  cafffffa          BGT      |L1.1664|
                  |L1.1684|
000694  e3520000          CMP      r2,#0
000698  da000004          BLE      |L1.1712|
                  |L1.1692|
00069c  e5d51000          LDRB     r1,[r5,#0]
0006a0  e2422001          SUB      r2,r2,#1
0006a4  e3520000          CMP      r2,#0
0006a8  e4c01001          STRB     r1,[r0],#1
0006ac  cafffffa          BGT      |L1.1692|
                  |L1.1712|
0006b0  e04c0003          SUB      r0,r12,r3
0006b4  e1a02800          LSL      r2,r0,#16
0006b8  e1a02822          LSR      r2,r2,#16
0006bc  e1a00422          LSR      r0,r2,#8
0006c0  e5c62011          STRB     r2,[r6,#0x11]  ; _dcd
0006c4  e5c60012          STRB     r0,[r6,#0x12]  ; _dcd
0006c8  e1d600b8          LDRH     r0,[r6,#8]  ; _dcd
0006cc  e1a01428          LSR      r1,r8,#8
0006d0  e1a0c828          LSR      r12,r8,#16
0006d4  e0400003          SUB      r0,r0,r3
0006d8  e1c600b8          STRH     r0,[r6,#8]  ; _dcd
0006dc  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
0006e0  e5c6100c          STRB     r1,[r6,#0xc]  ; _dcd
0006e4  e1a0ac28          LSR      r10,r8,#24
0006e8  e5c6c00d          STRB     r12,[r6,#0xd]  ; _dcd
0006ec  e5c6a00e          STRB     r10,[r6,#0xe]  ; _dcd
0006f0  e5d63010          LDRB     r3,[r6,#0x10]  ; _dcd
0006f4  e5d6c00f          LDRB     r12,[r6,#0xf]  ; _dcd
0006f8  e3a01001          MOV      r1,#1
0006fc  e28d0004          ADD      r0,sp,#4
000700  e18c3403          ORR      r3,r12,r3,LSL #8
000704  e0432002          SUB      r2,r3,r2
000708  e5993018          LDR      r3,[r9,#0x18]  ; <Data3>, <Data3>
00070c  e599c01c          LDR      r12,[r9,#0x1c]
000710  e98d1008          STMIB    sp,{r3,r12}
000714  e5cd8008          STRB     r8,[sp,#8]
000718  e5cd7004          STRB     r7,[sp,#4]
00071c  e58d200c          STR      r2,[sp,#0xc]
000720  e5cd8009          STRB     r8,[sp,#9]
000724  ebfffffe          BL       dcd_event_handler
000728  ea00004e          B        |L1.2152|
                  |L1.1836|
00072c  e1d508b8          LDRH     r0,[r5,#0x88]
000730  e3500008          CMP      r0,#8
000734  1a00004b          BNE      |L1.2152|
000738  e59f1204          LDR      r1,|L1.2372|
00073c  e5952000          LDR      r2,[r5,#0]
000740  e5812000          STR      r2,[r1,#0]
000744  e5952000          LDR      r2,[r5,#0]
000748  e1a03428          LSR      r3,r8,#8
00074c  e5812004          STR      r2,[r1,#4]
000750  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
000754  e1a0c828          LSR      r12,r8,#16
000758  e5c6300c          STRB     r3,[r6,#0xc]  ; _dcd
00075c  e1a0ac28          LSR      r10,r8,#24
000760  e5c6c00d          STRB     r12,[r6,#0xd]  ; _dcd
000764  e5c6a00e          STRB     r10,[r6,#0xe]  ; _dcd
000768  e1a01428          LSR      r1,r8,#8
00076c  e5c6800f          STRB     r8,[r6,#0xf]  ; _dcd
000770  e5c61010          STRB     r1,[r6,#0x10]  ; _dcd
000774  e1a02428          LSR      r2,r8,#8
000778  e5c68011          STRB     r8,[r6,#0x11]  ; _dcd
00077c  e5c62012          STRB     r2,[r6,#0x12]  ; _dcd
000780  e289900c          ADD      r9,r9,#0xc
000784  e8991208          LDM      r9,{r3,r9,r12}
000788  e28d0004          ADD      r0,sp,#4
00078c  e8801208          STM      r0,{r3,r9,r12}
000790  e28d2008          ADD      r2,sp,#8
000794  e59f11a8          LDR      r1,|L1.2372|
000798  e3a08001          MOV      r8,#1
00079c  e1a00002          MOV      r0,r2
0007a0  e5cd7004          STRB     r7,[sp,#4]
0007a4  ebfffffe          BL       __ARM_common_memcpy1_8
0007a8  e1a01008          MOV      r1,r8
0007ac  e28d0004          ADD      r0,sp,#4
0007b0  ebfffffe          BL       dcd_event_handler
0007b4  e1d600b6          LDRH     r0,[r6,#6]  ; _dcd
0007b8  e1c600b8          STRH     r0,[r6,#8]  ; _dcd
0007bc  e5d61000          LDRB     r1,[r6,#0]  ; _dcd
0007c0  e3500000          CMP      r0,#0
0007c4  e1a003a1          LSR      r0,r1,#7
0007c8  13500000          CMPNE    r0,#0
0007cc  13a00040          MOVNE    r0,#0x40
0007d0  1affff5f          BNE      |L1.1364|
0007d4  ea000023          B        |L1.2152|
                  |L1.2008|
0007d8  e35000ff          CMP      r0,#0xff
0007dc  0a000001          BEQ      |L1.2024|
0007e0  e3100080          TST      r0,#0x80
0007e4  0a00003d          BEQ      |L1.2272|
                  |L1.2024|
0007e8  e5d6300b          LDRB     r3,[r6,#0xb]  ; _dcd
0007ec  e5d6100c          LDRB     r1,[r6,#0xc]  ; _dcd
0007f0  e5d6c00d          LDRB     r12,[r6,#0xd]  ; _dcd
0007f4  e5d6a00e          LDRB     r10,[r6,#0xe]  ; _dcd
0007f8  e1830401          ORR      r0,r3,r1,LSL #8
0007fc  e180080c          ORR      r0,r0,r12,LSL #16
000800  e1900c0a          ORRS     r0,r0,r10,LSL #24
000804  0a000017          BEQ      |L1.2152|
000808  e1a00428          LSR      r0,r8,#8
00080c  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
000810  e5c6000c          STRB     r0,[r6,#0xc]  ; _dcd
000814  e1a01828          LSR      r1,r8,#16
000818  e5c6100d          STRB     r1,[r6,#0xd]  ; _dcd
00081c  e1a03c28          LSR      r3,r8,#24
000820  e5c6300e          STRB     r3,[r6,#0xe]  ; _dcd
000824  e5d63010          LDRB     r3,[r6,#0x10]  ; _dcd
000828  e5d6a00f          LDRB     r10,[r6,#0xf]  ; _dcd
00082c  e5d6c012          LDRB     r12,[r6,#0x12]  ; _dcd
000830  e5d66011          LDRB     r6,[r6,#0x11]  ; _dcd
000834  e18a3403          ORR      r3,r10,r3,LSL #8
000838  e3a01001          MOV      r1,#1
00083c  e186c40c          ORR      r12,r6,r12,LSL #8
000840  e5996018          LDR      r6,[r9,#0x18]  ; <Data3>, <Data3>
000844  e043300c          SUB      r3,r3,r12
000848  e599c01c          LDR      r12,[r9,#0x1c]
00084c  e98d1040          STMIB    sp,{r6,r12}
000850  e5cd2008          STRB     r2,[sp,#8]
000854  e28d0004          ADD      r0,sp,#4
000858  e5cd7004          STRB     r7,[sp,#4]
00085c  e58d300c          STR      r3,[sp,#0xc]
000860  e5cd8009          STRB     r8,[sp,#9]
000864  ebfffffe          BL       dcd_event_handler
                  |L1.2152|
;;;1201       process_ep0(rhport);
;;;1202       txis &= ~TU_BIT(0);
000868  e3c44001          BIC      r4,r4,#1
                  |L1.2156|
;;;1203     }
;;;1204     while (txis) {
00086c  e3540000          CMP      r4,#0
000870  13a08001          MOVNE    r8,#1                 ;1180
000874  0a000008          BEQ      |L1.2204|
                  |L1.2168|
;;;1205       unsigned const num = __builtin_ctz(txis);
000878  e1a00004          MOV      r0,r4
00087c  ebfffffe          BL       __ARM_common_ctz
000880  e1a06000          MOV      r6,r0
;;;1206       process_edpt_n(rhport, tu_edpt_addr(num, TUSB_DIR_IN));
000884  e20000ff          AND      r0,r0,#0xff
000888  e3801080          ORR      r1,r0,#0x80
00088c  e1a00007          MOV      r0,r7
000890  ebfffffe          BL       process_edpt_n
;;;1207       txis &= ~TU_BIT(num);
000894  e1d44618          BICS     r4,r4,r8,LSL r6
000898  1afffff6          BNE      |L1.2168|
                  |L1.2204|
;;;1208     }
;;;1209   
;;;1210     rxis &= USBC_Readw(USBC_REG_INTRxE(USBC0_BASE));
00089c  e1d514ba          LDRH     r1,[r5,#0x4a]
0008a0  e59d0000          LDR      r0,[sp,#0]
0008a4  e0114000          ANDS     r4,r1,r0
;;;1211     USBC_Writew(rxis, USBC_REG_INTRx(USBC0_BASE));
0008a8  e1c544b6          STRH     r4,[r5,#0x46]
0008ac  13a06001          MOVNE    r6,#1                 ;1180
;;;1212     while (rxis) {
;;;1213       unsigned const num = __builtin_ctz(rxis);
;;;1214       process_edpt_n(rhport, tu_edpt_addr(num, TUSB_DIR_OUT));
;;;1215       rxis &= ~TU_BIT(num);
;;;1216     }
;;;1217   }
0008b0  028dd014          ADDEQ    sp,sp,#0x14
0008b4  08bd8ff0          POPEQ    {r4-r11,pc}
                  |L1.2232|
0008b8  e1a00004          MOV      r0,r4                 ;1213
0008bc  ebfffffe          BL       __ARM_common_ctz
0008c0  e1a05000          MOV      r5,r0                 ;1213
0008c4  e20010ff          AND      r1,r0,#0xff           ;1214
0008c8  e1a00007          MOV      r0,r7                 ;1214
0008cc  ebfffffe          BL       process_edpt_n
0008d0  e1d44516          BICS     r4,r4,r6,LSL r5       ;1215
0008d4  1afffff7          BNE      |L1.2232|
0008d8  e28dd014          ADD      sp,sp,#0x14
0008dc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2272|
0008e0  e1d600b0          LDRH     r0,[r6,#0]  ; _dcd
0008e4  e3500c05          CMP      r0,#0x500
0008e8  05d60002          LDRBEQ   r0,[r6,#2]  ; _dcd
0008ec  05c50098          STRBEQ   r0,[r5,#0x98]
0008f0  e5c6b000          STRB     r11,[r6,#0]  ; _dcd
0008f4  e5d61010          LDRB     r1,[r6,#0x10]  ; _dcd
0008f8  e5d6800f          LDRB     r8,[r6,#0xf]  ; _dcd
0008fc  e5d63012          LDRB     r3,[r6,#0x12]  ; _dcd
000900  e5d66011          LDRB     r6,[r6,#0x11]  ; _dcd
000904  e1888401          ORR      r8,r8,r1,LSL #8
000908  e3a0c000          MOV      r12,#0
00090c  e1863403          ORR      r3,r6,r3,LSL #8
000910  e5996018          LDR      r6,[r9,#0x18]  ; <Data3>, <Data3>
000914  e0483003          SUB      r3,r8,r3
000918  e599801c          LDR      r8,[r9,#0x1c]
00091c  e98d0140          STMIB    sp,{r6,r8}
000920  e5cd2008          STRB     r2,[sp,#8]
000924  e3a01001          MOV      r1,#1
000928  e28d0004          ADD      r0,sp,#4
00092c  e5cd7004          STRB     r7,[sp,#4]
000930  e58d300c          STR      r3,[sp,#0xc]
000934  e5cdc009          STRB     r12,[sp,#9]
000938  ebfffffe          BL       dcd_event_handler
00093c  eaffffc9          B        |L1.2152|
                  |L1.2368|
                          DCD      0x01c13000
                  |L1.2372|
                          DCD      ||.bss||
                  |L1.2376|
                          DCD      0x01c13004
                  |L1.2380|
                          DCD      ||.constdata||+0x24
                  |L1.2384|
                          DCD      ||.constdata||
                          ENDP

                  usb_isr_handler PROC
;;;863    
;;;864    static void usb_isr_handler(void) {
000954  e3a00000          MOV      r0,#0
;;;865    	dcd_int_handler(0);
000958  eafffffe          B        dcd_int_handler
;;;866    }
;;;867    
                          ENDP

                  dcd_connect PROC
;;;898    // Connect by enabling internal pull-up resistor on D+/D-
;;;899    void dcd_connect(uint8_t rhport)
00095c  e51f0024          LDR      r0,|L1.2368|
;;;900    {
;;;901      (void)rhport;
;;;902      USBC_REG_set_bit_b(USBC_BP_POWER_D_SOFT_CONNECT, USBC_REG_PCTL(USBC0_BASE));
000960  e5d01040          LDRB     r1,[r0,#0x40]
000964  e3811040          ORR      r1,r1,#0x40
000968  e5c01040          STRB     r1,[r0,#0x40]
;;;903    }
00096c  e12fff1e          BX       lr
;;;904    
                          ENDP

                  dcd_edpt_close_all PROC
;;;1037   
;;;1038   void dcd_edpt_close_all(uint8_t rhport)
000970  e92d4010          PUSH     {r4,lr}
;;;1039   {
000974  e3a0001a          MOV      r0,#0x1a
000978  ebfffffe          BL       f1c100s_intc_mask_irq
;;;1040     (void) rhport;
;;;1041     musb_int_mask();
;;;1042     USBC_Writew(1, USBC_REG_INTTxE(USBC0_BASE)); /* Enable only EP0 */
00097c  e51f0044          LDR      r0,|L1.2368|
000980  e3a02001          MOV      r2,#1
;;;1043     USBC_Writew(0, USBC_REG_INTRxE(USBC0_BASE));
000984  e3a01000          MOV      r1,#0
000988  e1c024b8          STRH     r2,[r0,#0x48]         ;1042
00098c  e1c014ba          STRH     r1,[r0,#0x4a]
;;;1044     for (unsigned i = 1; i < TUP_DCD_ENDPOINT_MAX; ++i) {
;;;1045       USBC_SelectActiveEp(i);
;;;1046       USBC_Writew(0, USBC_REG_TXMAXP(USBC0_BASE));
;;;1047   		USBC_Writew((1 << USBC_BP_TXCSR_D_MODE) | (1 << USBC_BP_TXCSR_D_CLEAR_DATA_TOGGLE) | (1 << USBC_BP_TXCSR_D_FLUSH_FIFO),
000990  e59fc834          LDR      r12,|L1.4556|
;;;1048         USBC_REG_TXCSR(USBC0_BASE));
;;;1049   
;;;1050       USBC_Writew(0, USBC_REG_RXMAXP(USBC0_BASE));
;;;1051   	  USBC_Writew((1 << USBC_BP_RXCSR_D_CLEAR_DATA_TOGGLE) | (1 << USBC_BP_RXCSR_D_FLUSH_FIFO),
000994  e3a03090          MOV      r3,#0x90
                  |L1.2456|
000998  e5c02042          STRB     r2,[r0,#0x42]
00099c  e1c018b0          STRH     r1,[r0,#0x80]         ;1046
0009a0  e1c0c8b2          STRH     r12,[r0,#0x82]        ;1047
0009a4  e1c018b4          STRH     r1,[r0,#0x84]         ;1050
0009a8  e1c038b6          STRH     r3,[r0,#0x86]
;;;1052         USBC_REG_RXCSR(USBC0_BASE));
;;;1053   
;;;1054       USBC_Writew(0, USBC_REG_TXFIFOAD(USBC0_BASE));
0009ac  e1c019b2          STRH     r1,[r0,#0x92]
;;;1055       USBC_Writeb(0, USBC_REG_TXFIFOSZ(USBC0_BASE));
0009b0  e5c01090          STRB     r1,[r0,#0x90]
;;;1056       USBC_Writew(0, USBC_REG_RXFIFOAD(USBC0_BASE));
0009b4  e1c019b6          STRH     r1,[r0,#0x96]
;;;1057       USBC_Writeb(0, USBC_REG_RXFIFOSZ(USBC0_BASE));
0009b8  e5c01094          STRB     r1,[r0,#0x94]
0009bc  e2822001          ADD      r2,r2,#1
0009c0  e3520004          CMP      r2,#4                 ;1044
0009c4  3afffff3          BCC      |L1.2456|
0009c8  e8bd4010          POP      {r4,lr}               ;1044
0009cc  e3a0001a          MOV      r0,#0x1a              ;1044
0009d0  eafffffe          B        f1c100s_intc_unmask_irq
;;;1058     }
;;;1059     musb_int_unmask();
;;;1060   }
;;;1061   
                          ENDP

                  dcd_disconnect PROC
;;;905    // Disconnect by disabling internal pull-up resistor on D+/D-
;;;906    void dcd_disconnect(uint8_t rhport)
0009d4  e51f009c          LDR      r0,|L1.2368|
;;;907    {
;;;908      (void)rhport;
;;;909      USBC_REG_clear_bit_b(USBC_BP_POWER_D_SOFT_CONNECT, USBC_REG_PCTL(USBC0_BASE));
0009d8  e5d01040          LDRB     r1,[r0,#0x40]
0009dc  e3c11040          BIC      r1,r1,#0x40
0009e0  e5c01040          STRB     r1,[r0,#0x40]
;;;910    }
0009e4  e12fff1e          BX       lr
;;;911    
                          ENDP

                  dcd_init PROC
;;;867    
;;;868    void dcd_init(uint8_t rhport)
0009e8  e92d41f0          PUSH     {r4-r8,lr}
;;;869    {
0009ec  e1a06000          MOV      r6,r0
;;;870      dcd_disconnect(rhport);
0009f0  ebfffffe          BL       dcd_disconnect
0009f4  e59f47d4          LDR      r4,|L1.4560|
0009f8  e59400cc          LDR      r0,[r4,#0xcc]
0009fc  e3800001          ORR      r0,r0,#1
000a00  e58400cc          STR      r0,[r4,#0xcc]
000a04  e59402c0          LDR      r0,[r4,#0x2c0]
000a08  e3800401          ORR      r0,r0,#0x1000000
000a0c  e58402c0          STR      r0,[r4,#0x2c0]
000a10  e3a00002          MOV      r0,#2
000a14  ebfffffe          BL       os_dly_wait
000a18  e59400cc          LDR      r0,[r4,#0xcc]
000a1c  e3800002          ORR      r0,r0,#2
000a20  e58400cc          STR      r0,[r4,#0xcc]
000a24  e59400cc          LDR      r0,[r4,#0xcc]
000a28  e3800001          ORR      r0,r0,#1
000a2c  e58400cc          STR      r0,[r4,#0xcc]
000a30  e5940060          LDR      r0,[r4,#0x60]
000a34  e3800401          ORR      r0,r0,#0x1000000
000a38  e5840060          STR      r0,[r4,#0x60]
000a3c  e59402c0          LDR      r0,[r4,#0x2c0]
000a40  e3800401          ORR      r0,r0,#0x1000000
000a44  e58402c0          STR      r0,[r4,#0x2c0]
000a48  e59f1784          LDR      r1,|L1.4564|
000a4c  e5910000          LDR      r0,[r1,#0]
000a50  e3c00cff          BIC      r0,r0,#0xff00
000a54  e5810000          STR      r0,[r1,#0]
000a58  e5910000          LDR      r0,[r1,#0]
000a5c  e3800b03          ORR      r0,r0,#0xc00
000a60  e5810000          STR      r0,[r1,#0]
000a64  e5910000          LDR      r0,[r1,#0]
000a68  e3c00001          BIC      r0,r0,#1
000a6c  e5810000          STR      r0,[r1,#0]
000a70  e5910000          LDR      r0,[r1,#0]
000a74  e3800080          ORR      r0,r0,#0x80
000a78  e5810000          STR      r0,[r1,#0]
000a7c  e5910000          LDR      r0,[r1,#0]
000a80  e3800001          ORR      r0,r0,#1
000a84  e5810000          STR      r0,[r1,#0]
000a88  e5910000          LDR      r0,[r1,#0]
;;;871      USBC_HardwareReset();
;;;872      USBC_PhyConfig();
;;;873      USBC_ConfigFIFO_Base();
;;;874      USBC_EnableDpDmPullUp();
;;;875      USBC_ForceIdToHigh(); // Force device mode
;;;876      USBC_ForceVbusValidToHigh();
;;;877      USBC_SelectBus(USBC_IO_TYPE_PIO, 0, 0);
;;;878      dcd_edpt_close_all(rhport);
;;;879    
;;;880      #if TUD_OPT_HIGH_SPEED
;;;881        USBC_REG_set_bit_b(USBC_BP_POWER_D_HIGH_SPEED_EN, USBC_REG_PCTL(USBC0_BASE));
;;;882      #else
;;;883        USBC_REG_clear_bit_b(USBC_BP_POWER_D_HIGH_SPEED_EN, USBC_REG_PCTL(USBC0_BASE));
;;;884      #endif
;;;885    
;;;886      USBC_Writeb((1 << USBC_BP_INTUSBE_EN_SUSPEND)
;;;887        | (1 << USBC_BP_INTUSBE_EN_RESUME)
;;;888        | (1 << USBC_BP_INTUSBE_EN_RESET)
;;;889        | (1 << USBC_BP_INTUSBE_EN_SOF)
;;;890        | (1 << USBC_BP_INTUSBE_EN_DISCONNECT)
;;;891        , USBC_REG_INTUSBE(USBC0_BASE));
;;;892      f1c100s_intc_clear_pend(F1C100S_IRQ_USBOTG);
;;;893      f1c100s_intc_set_isr(F1C100S_IRQ_USBOTG, usb_isr_handler);
;;;894    
;;;895      dcd_connect(rhport);
;;;896    }
000a8c  e3a07001          MOV      r7,#1
000a90  e3c00001          BIC      r0,r0,#1
000a94  e5810000          STR      r0,[r1,#0]
000a98  e3a0c020          MOV      r12,#0x20
000a9c  e3a02014          MOV      r2,#0x14
000aa0  e3a03005          MOV      r3,#5
000aa4  e3a00000          MOV      r0,#0
                  |L1.2728|
000aa8  e5914000          LDR      r4,[r1,#0]
000aac  e08c5000          ADD      r5,r12,r0
000ab0  e3c44cff          BIC      r4,r4,#0xff00
000ab4  e5814000          STR      r4,[r1,#0]
000ab8  e5914000          LDR      r4,[r1,#0]
000abc  e3120001          TST      r2,#1
000ac0  e1844405          ORR      r4,r4,r5,LSL #8
000ac4  e5814000          STR      r4,[r1,#0]
000ac8  e5914000          LDR      r4,[r1,#0]
000acc  e3c44001          BIC      r4,r4,#1
000ad0  e5814000          STR      r4,[r1,#0]
000ad4  e5914000          LDR      r4,[r1,#0]
000ad8  13844080          ORRNE    r4,r4,#0x80
000adc  03c44080          BICEQ    r4,r4,#0x80
000ae0  e5814000          STR      r4,[r1,#0]
000ae4  e5914000          LDR      r4,[r1,#0]
000ae8  e2800001          ADD      r0,r0,#1
000aec  e3844001          ORR      r4,r4,#1
000af0  e1500003          CMP      r0,r3
000af4  e1a020c2          ASR      r2,r2,#1
000af8  e5814000          STR      r4,[r1,#0]
000afc  e5914000          LDR      r4,[r1,#0]
000b00  e3c44001          BIC      r4,r4,#1
000b04  e5814000          STR      r4,[r1,#0]
000b08  baffffe6          BLT      |L1.2728|
000b0c  e3a0c02a          MOV      r12,#0x2a
000b10  e3a02003          MOV      r2,#3
000b14  e3a03002          MOV      r3,#2
000b18  e3a00000          MOV      r0,#0
                  |L1.2844|
000b1c  e5914000          LDR      r4,[r1,#0]
000b20  e08c5000          ADD      r5,r12,r0
000b24  e3c44cff          BIC      r4,r4,#0xff00
000b28  e5814000          STR      r4,[r1,#0]
000b2c  e5914000          LDR      r4,[r1,#0]
000b30  e3120001          TST      r2,#1
000b34  e1844405          ORR      r4,r4,r5,LSL #8
000b38  e5814000          STR      r4,[r1,#0]
000b3c  e5914000          LDR      r4,[r1,#0]
000b40  e3c44001          BIC      r4,r4,#1
000b44  e5814000          STR      r4,[r1,#0]
000b48  e5914000          LDR      r4,[r1,#0]
000b4c  13844080          ORRNE    r4,r4,#0x80
000b50  03c44080          BICEQ    r4,r4,#0x80
000b54  e5814000          STR      r4,[r1,#0]
000b58  e5914000          LDR      r4,[r1,#0]
000b5c  e2800001          ADD      r0,r0,#1
000b60  e3844001          ORR      r4,r4,#1
000b64  e1500003          CMP      r0,r3
000b68  e1a020c2          ASR      r2,r2,#1
000b6c  e5814000          STR      r4,[r1,#0]
000b70  e5914000          LDR      r4,[r1,#0]
000b74  e3c44001          BIC      r4,r4,#1
000b78  e5814000          STR      r4,[r1,#0]
000b7c  baffffe6          BLT      |L1.2844|
000b80  e3a00507          MOV      r0,#0x1c00000
000b84  e5901004          LDR      r1,[r0,#4]
000b88  e3c11003          BIC      r1,r1,#3
000b8c  e3811001          ORR      r1,r1,#1
000b90  e5801004          STR      r1,[r0,#4]
000b94  e2801b4d          ADD      r1,r0,#0x13400
000b98  e5910000          LDR      r0,[r1,#0]
000b9c  e3c00070          BIC      r0,r0,#0x70
000ba0  e3800b43          ORR      r0,r0,#0x10c00
000ba4  e5810000          STR      r0,[r1,#0]
000ba8  e5910000          LDR      r0,[r1,#0]
000bac  e3c00070          BIC      r0,r0,#0x70
000bb0  e3800903          ORR      r0,r0,#0xc000
000bb4  e5810000          STR      r0,[r1,#0]
000bb8  e5910000          LDR      r0,[r1,#0]
000bbc  e3c00070          BIC      r0,r0,#0x70
000bc0  e3800a03          ORR      r0,r0,#0x3000
000bc4  e5810000          STR      r0,[r1,#0]
000bc8  e2414b01          SUB      r4,r1,#0x400
000bcc  e5d40043          LDRB     r0,[r4,#0x43]
000bd0  e3a05000          MOV      r5,#0
000bd4  e5c45043          STRB     r5,[r4,#0x43]
000bd8  e3a0001a          MOV      r0,#0x1a
000bdc  ebfffffe          BL       f1c100s_intc_mask_irq
000be0  e1c474b8          STRH     r7,[r4,#0x48]
000be4  e1c454ba          STRH     r5,[r4,#0x4a]
000be8  e59f25dc          LDR      r2,|L1.4556|
000bec  e3a01001          MOV      r1,#1
000bf0  e3a00090          MOV      r0,#0x90
                  |L1.3060|
000bf4  e5c41042          STRB     r1,[r4,#0x42]
000bf8  e1c458b0          STRH     r5,[r4,#0x80]
000bfc  e1c428b2          STRH     r2,[r4,#0x82]
000c00  e1c458b4          STRH     r5,[r4,#0x84]
000c04  e1c408b6          STRH     r0,[r4,#0x86]
000c08  e1c459b2          STRH     r5,[r4,#0x92]
000c0c  e5c45090          STRB     r5,[r4,#0x90]
000c10  e1c459b6          STRH     r5,[r4,#0x96]
000c14  e5c45094          STRB     r5,[r4,#0x94]
000c18  e2811001          ADD      r1,r1,#1
000c1c  e3510004          CMP      r1,#4
000c20  3afffff3          BCC      |L1.3060|
000c24  e3a0001a          MOV      r0,#0x1a
000c28  ebfffffe          BL       f1c100s_intc_unmask_irq
000c2c  e5d41040          LDRB     r1,[r4,#0x40]         ;881
000c30  e3a0002f          MOV      r0,#0x2f              ;886
000c34  e3811020          ORR      r1,r1,#0x20           ;881
000c38  e5c41040          STRB     r1,[r4,#0x40]         ;881
000c3c  e5c40050          STRB     r0,[r4,#0x50]         ;886
000c40  e3a0001a          MOV      r0,#0x1a              ;892
000c44  ebfffffe          BL       f1c100s_intc_clear_pend
000c48  e59f1588          LDR      r1,|L1.4568|
000c4c  e3a0001a          MOV      r0,#0x1a              ;893
000c50  ebfffffe          BL       f1c100s_intc_set_isr
000c54  e1a00006          MOV      r0,r6                 ;895
000c58  ebfffffe          BL       dcd_connect
000c5c  e8bd81f0          POP      {r4-r8,pc}
;;;897    
                          ENDP

                  dcd_sof_enable PROC
;;;911    
;;;912    void dcd_sof_enable(uint8_t rhport, bool en)
000c60  e12fff1e          BX       lr
;;;913    {
;;;914      (void) rhport;
;;;915      (void) en;
;;;916    
;;;917      // TODO implement later
;;;918    }
;;;919    
                          ENDP

                  dcd_int_enable PROC
;;;920    void dcd_int_enable(uint8_t rhport)
000c64  e3a0001a          MOV      r0,#0x1a
;;;921    {
;;;922      (void)rhport;
;;;923      f1c100s_intc_enable_irq(F1C100S_IRQ_USBOTG);
000c68  eafffffe          B        f1c100s_intc_enable_irq
;;;924    }
;;;925    
                          ENDP

                  dcd_int_disable PROC
;;;930    
;;;931    void dcd_int_disable(uint8_t rhport)
000c6c  e3a0001a          MOV      r0,#0x1a
;;;932    {
;;;933      (void)rhport;
;;;934      f1c100s_intc_disable_irq(F1C100S_IRQ_USBOTG);
000c70  eafffffe          B        f1c100s_intc_disable_irq
;;;935    }
;;;936    
                          ENDP

                  dcd_set_address PROC
;;;942    // Receive Set Address request, mcu port must also include status IN response
;;;943    void dcd_set_address(uint8_t rhport, uint8_t dev_addr)
000c74  e51f1338          LDR      r1,|L1.2372|
;;;944    {
;;;945      (void)rhport;
;;;946      (void)dev_addr;
;;;947      _dcd.pipe0.buf       = NULL;
000c78  e3a00000          MOV      r0,#0
000c7c  e5c1000b          STRB     r0,[r1,#0xb]  ; _dcd
000c80  e5c1000c          STRB     r0,[r1,#0xc]  ; _dcd
000c84  e5c1000d          STRB     r0,[r1,#0xd]  ; _dcd
000c88  e5c1000e          STRB     r0,[r1,#0xe]  ; _dcd
;;;948      _dcd.pipe0.length    = 0;
000c8c  e5c1000f          STRB     r0,[r1,#0xf]  ; _dcd
000c90  e5c10010          STRB     r0,[r1,#0x10]  ; _dcd
;;;949      _dcd.pipe0.remaining = 0;
000c94  e5c10011          STRB     r0,[r1,#0x11]  ; _dcd
000c98  e5c10012          STRB     r0,[r1,#0x12]  ; _dcd
000c9c  e51f1364          LDR      r1,|L1.2368|
000ca0  e5c10042          STRB     r0,[r1,#0x42]
000ca4  e3a00048          MOV      r0,#0x48
000ca8  e1c108b2          STRH     r0,[r1,#0x82]
;;;950      /* Clear RX FIFO to return ACK. */
;;;951      USBC_SelectActiveEp(0);
;;;952      __USBC_Dev_ep0_ReadDataComplete();
;;;953    }
000cac  e12fff1e          BX       lr
;;;954    
                          ENDP

                  dcd_remote_wakeup PROC
;;;955    // Wake up host
;;;956    void dcd_remote_wakeup(uint8_t rhport)
000cb0  e92d4010          PUSH     {r4,lr}
;;;957    {
;;;958      (void)rhport;
;;;959      USBC_REG_set_bit_b(USBC_BP_POWER_D_RESUME, USBC_REG_PCTL(USBC0_BASE));
000cb4  e51f437c          LDR      r4,|L1.2368|
000cb8  e5d40040          LDRB     r0,[r4,#0x40]
000cbc  e3800004          ORR      r0,r0,#4
000cc0  e5c40040          STRB     r0,[r4,#0x40]
000cc4  e3a0000a          MOV      r0,#0xa
000cc8  ebfffffe          BL       os_dly_wait
;;;960      delay_ms(10);
;;;961      USBC_REG_clear_bit_b(USBC_BP_POWER_D_RESUME, USBC_REG_PCTL(USBC0_BASE));
000ccc  e5d40040          LDRB     r0,[r4,#0x40]
000cd0  e3c00004          BIC      r0,r0,#4
000cd4  e5c40040          STRB     r0,[r4,#0x40]
;;;962    }
000cd8  e8bd8010          POP      {r4,pc}
;;;963    
                          ENDP

                  dcd_edpt_open PROC
;;;972    // Configure endpoint's registers according to descriptor
;;;973    bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * ep_desc)
000cdc  e92d4ff0          PUSH     {r4-r11,lr}
;;;974    {
;;;975      (void) rhport;
;;;976    
;;;977      uint16_t reg_val;
;;;978    
;;;979      const unsigned ep_addr = ep_desc->bEndpointAddress;
000ce0  e5d10002          LDRB     r0,[r1,#2]
;;;980      const unsigned epn     = tu_edpt_number(ep_addr);
;;;981      const unsigned dir_in  = tu_edpt_dir(ep_addr);
;;;982      const unsigned xfer    = ep_desc->bmAttributes.xfer;
;;;983      const unsigned mps     = tu_edpt_packet_size(ep_desc);
000ce4  e5d12005          LDRB     r2,[r1,#5]
000ce8  e5d1c004          LDRB     r12,[r1,#4]
000cec  e5d13003          LDRB     r3,[r1,#3]            ;982
000cf0  e200407f          AND      r4,r0,#0x7f           ;980
000cf4  e18c1402          ORR      r1,r12,r2,LSL #8
000cf8  e1a00c00          LSL      r0,r0,#24             ;981
;;;984    
;;;985      TU_ASSERT(epn < TUP_DCD_ENDPOINT_MAX);
000cfc  e3540004          CMP      r4,#4
000d00  e24dd034          SUB      sp,sp,#0x34           ;974
000d04  e2038003          AND      r8,r3,#3              ;982
000d08  e3c16b3e          BIC      r6,r1,#0xf800         ;983
000d0c  e1a05fa0          LSR      r5,r0,#31             ;981
000d10  2a000108          BCS      |L1.4408|
;;;986    
;;;987      pipe_state_t *pipe = &_dcd.pipe[dir_in][epn - 1];
000d14  e51f13d8          LDR      r1,|L1.2372|
000d18  e0652185          RSB      r2,r5,r5,LSL #3
000d1c  e0811182          ADD      r1,r1,r2,LSL #3
;;;988      pipe->buf       = NULL;
000d20  e3a00000          MOV      r0,#0
000d24  e0811184          ADD      r1,r1,r4,LSL #3       ;987
000d28  e5c1000b          STRB     r0,[r1,#0xb]
000d2c  e5c1000c          STRB     r0,[r1,#0xc]
000d30  e5c1000d          STRB     r0,[r1,#0xd]
000d34  e5c1000e          STRB     r0,[r1,#0xe]
;;;989      pipe->length    = 0;
000d38  e5c1000f          STRB     r0,[r1,#0xf]
000d3c  e5c10010          STRB     r0,[r1,#0x10]
;;;990      pipe->remaining = 0;
000d40  e5c10011          STRB     r0,[r1,#0x11]
000d44  e5c10012          STRB     r0,[r1,#0x12]
000d48  e3a0001a          MOV      r0,#0x1a
000d4c  ebfffffe          BL       f1c100s_intc_mask_irq
000d50  e51f3418          LDR      r3,|L1.2368|
000d54  e5c34042          STRB     r4,[r3,#0x42]
;;;991    
;;;992      musb_int_mask();
;;;993    
;;;994      // volatile hw_endpoint_t *regs = edpt_regs(epn - 1);
;;;995      USBC_SelectActiveEp(epn);
;;;996      if (dir_in) {
000d58  e3550000          CMP      r5,#0
000d5c  e3a07001          MOV      r7,#1                 ;982
000d60  0a000047          BEQ      |L1.3716|
;;;997        USBC_Writew(mps, USBC_REG_TXMAXP(USBC0_BASE));
;;;998    
;;;999        reg_val = (1 << USBC_BP_TXCSR_D_MODE)
;;;1000         | (1 << USBC_BP_TXCSR_D_FLUSH_FIFO)
;;;1001         | (1 << USBC_BP_TXCSR_D_CLEAR_DATA_TOGGLE);
;;;1002       if  (xfer == TUSB_XFER_ISOCHRONOUS)
000d64  e3580001          CMP      r8,#1
000d68  e1c368b0          STRH     r6,[r3,#0x80]         ;997
000d6c  e59f0458          LDR      r0,|L1.4556|
;;;1003         reg_val |= (1 << USBC_BP_TXCSR_D_ISO);
000d70  02800901          ADDEQ    r0,r0,#0x4000
;;;1004   	  USBC_Writew(reg_val, USBC_REG_TXCSR(USBC0_BASE));
000d74  e1c308b2          STRH     r0,[r3,#0x82]
000d78  e1d304b8          LDRH     r0,[r3,#0x48]
000d7c  e1800417          ORR      r0,r0,r7,LSL r4
000d80  e1c304b8          STRH     r0,[r3,#0x48]
                  |L1.3460|
;;;1005   
;;;1006       USBC_INT_EnableTxEp(epn);
;;;1007     } else {
;;;1008       USBC_Writew(mps, USBC_REG_RXMAXP(USBC0_BASE));
;;;1009   
;;;1010       reg_val = (1 << USBC_BP_RXCSR_D_FLUSH_FIFO)
;;;1011         | (1 << USBC_BP_RXCSR_D_CLEAR_DATA_TOGGLE);
;;;1012       if  (xfer == TUSB_XFER_ISOCHRONOUS)
;;;1013         reg_val |= (1 << USBC_BP_RXCSR_D_ISO);
;;;1014       USBC_Writew(reg_val, USBC_REG_RXCSR(USBC0_BASE));
;;;1015   
;;;1016       USBC_INT_EnableRxEp(epn);
;;;1017     }
;;;1018   
;;;1019     /* Setup FIFO */
;;;1020     int size_in_log2_minus3 = 28 - TU_MIN(28, __clz((uint32_t)mps));
000d84  e16f0f16          CLZ      r0,r6
000d88  e350001c          CMP      r0,#0x1c
000d8c  83a0101c          MOVHI    r1,#0x1c
000d90  916f1f16          CLZLS    r1,r6
;;;1021     if ((8u << size_in_log2_minus3) < mps) ++size_in_log2_minus3;
000d94  e3a00008          MOV      r0,#8
000d98  e261401c          RSB      r4,r1,#0x1c           ;1020
000d9c  e1a01410          LSL      r1,r0,r4
000da0  e5d3e042          LDRB     lr,[r3,#0x42]
000da4  e1510006          CMP      r1,r6
000da8  32844001          ADDCC    r4,r4,#1
000dac  e3a01c02          MOV      r1,#0x200
000db0  e3a0c001          MOV      r12,#1
000db4  e1a0600c          MOV      r6,r12
000db8  e1a0b00d          MOV      r11,sp
000dbc  e1cd00f0          STRD     r0,r1,[sp,#0]
                  |L1.3520|
000dc0  e5c36042          STRB     r6,[r3,#0x42]
000dc4  e1d319b2          LDRH     r1,[r3,#0x92]
000dc8  e3510000          CMP      r1,#0
000dcc  0a000059          BEQ      |L1.3896|
000dd0  e5d38090          LDRB     r8,[r3,#0x90]
000dd4  e08b218c          ADD      r2,r11,r12,LSL #3
000dd8  e1a0000b          MOV      r0,r11
000ddc  e208900f          AND      r9,r8,#0xf
000de0  e1a08d88          LSL      r8,r8,#27
000de4  e0898fa8          ADD      r8,r9,r8,LSR #31
000de8  e1a08817          LSL      r8,r7,r8
                  |L1.3564|
000dec  e1520000          CMP      r2,r0
000df0  9a000005          BLS      |L1.3596|
000df4  e5909000          LDR      r9,[r0,#0]
000df8  e1510009          CMP      r1,r9
000dfc  25909004          LDRCS    r9,[r0,#4]
000e00  21590001          CMPCS    r9,r1
000e04  92800008          ADDLS    r0,r0,#8
000e08  9afffff7          BLS      |L1.3564|
                  |L1.3596|
000e0c  e1520000          CMP      r2,r0
000e10  0a0000c8          BEQ      |L1.4408|
000e14  e5909000          LDR      r9,[r0,#0]
000e18  e1590001          CMP      r9,r1
000e1c  1a000021          BNE      |L1.3752|
000e20  e5909004          LDR      r9,[r0,#4]
000e24  e0811008          ADD      r1,r1,r8
000e28  e1510009          CMP      r1,r9
000e2c  e5801000          STR      r1,[r0,#0]
000e30  1a00003e          BNE      |L1.3888|
000e34  e0421000          SUB      r1,r2,r0
000e38  e2419008          SUB      r9,r1,#8
000e3c  e3590000          CMP      r9,#0
000e40  da000034          BLE      |L1.3864|
000e44  e1a01e01          LSL      r1,r1,#28
000e48  e3510102          CMP      r1,#0x80000000
000e4c  5a000004          BPL      |L1.3684|
000e50  e5902008          LDR      r2,[r0,#8]
000e54  e590800c          LDR      r8,[r0,#0xc]
000e58  e1a01000          MOV      r1,r0
000e5c  e8810104          STM      r1,{r2,r8}
000e60  e2800008          ADD      r0,r0,#8
                  |L1.3684|
000e64  e1b01249          ASRS     r1,r9,#4
000e68  0a00002a          BEQ      |L1.3864|
                  |L1.3692|
000e6c  e2802008          ADD      r2,r0,#8
000e70  e8920704          LDM      r2,{r2,r8-r10}
000e74  e8a00704          STM      r0!,{r2,r8-r10}
000e78  e2511001          SUBS     r1,r1,#1
000e7c  1afffffa          BNE      |L1.3692|
000e80  ea000024          B        |L1.3864|
                  |L1.3716|
000e84  e3580001          CMP      r8,#1                 ;1012
000e88  e1c368b4          STRH     r6,[r3,#0x84]         ;1008
000e8c  e3a00090          MOV      r0,#0x90              ;1010
000e90  02800901          ADDEQ    r0,r0,#0x4000         ;1013
000e94  e1c308b6          STRH     r0,[r3,#0x86]         ;1014
000e98  e1d304ba          LDRH     r0,[r3,#0x4a]         ;1014
000e9c  e1800417          ORR      r0,r0,r7,LSL r4       ;1014
000ea0  e1c304ba          STRH     r0,[r3,#0x4a]         ;1014
000ea4  eaffffb6          B        |L1.3460|
                  |L1.3752|
000ea8  e590a004          LDR      r10,[r0,#4]           ;1012
000eac  e1590001          CMP      r9,r1                 ;1012
000eb0  e0888001          ADD      r8,r8,r1              ;1012
000eb4  e5801004          STR      r1,[r0,#4]            ;1012
000eb8  1a000018          BNE      |L1.3872|
000ebc  e158000a          CMP      r8,r10                ;1012
000ec0  18800500          STMNE    r0,{r8,r10}           ;1012
000ec4  13a01000          MOVNE    r1,#0                 ;1012
000ec8  1a000019          BNE      |L1.3892|
000ecc  e0421000          SUB      r1,r2,r0              ;1012
000ed0  e2419008          SUB      r9,r1,#8              ;1012
000ed4  e3590000          CMP      r9,#0                 ;1012
000ed8  da00000e          BLE      |L1.3864|
000edc  e1a01e01          LSL      r1,r1,#28             ;1012
000ee0  e3510102          CMP      r1,#0x80000000        ;1012
000ee4  5a000004          BPL      |L1.3836|
000ee8  e5902008          LDR      r2,[r0,#8]            ;1012
000eec  e590800c          LDR      r8,[r0,#0xc]          ;1012
000ef0  e1a01000          MOV      r1,r0                 ;1012
000ef4  e8810104          STM      r1,{r2,r8}            ;1012
000ef8  e2800008          ADD      r0,r0,#8              ;1012
                  |L1.3836|
000efc  e1b01249          ASRS     r1,r9,#4              ;1012
000f00  0a000004          BEQ      |L1.3864|
                  |L1.3844|
000f04  e2802008          ADD      r2,r0,#8              ;1012
000f08  e8920704          LDM      r2,{r2,r8-r10}        ;1012
000f0c  e8a00704          STM      r0!,{r2,r8-r10}       ;1012
000f10  e2511001          SUBS     r1,r1,#1              ;1012
000f14  1afffffa          BNE      |L1.3844|
                  |L1.3864|
000f18  e3e01000          MVN      r1,#0                 ;1012
000f1c  ea000004          B        |L1.3892|
                  |L1.3872|
000f20  e158000a          CMP      r8,r10                ;1012
000f24  18820500          STMNE    r2,{r8,r10}           ;1012
000f28  13a01001          MOVNE    r1,#1                 ;1012
000f2c  1a000000          BNE      |L1.3892|
                  |L1.3888|
000f30  e3a01000          MOV      r1,#0                 ;1012
                  |L1.3892|
000f34  e08cc001          ADD      r12,r12,r1            ;1012
                  |L1.3896|
000f38  e1d319b6          LDRH     r1,[r3,#0x96]         ;1012
000f3c  e3510000          CMP      r1,#0                 ;1012
000f40  0a000054          BEQ      |L1.4248|
000f44  e5d38094          LDRB     r8,[r3,#0x94]         ;1012
000f48  e08b218c          ADD      r2,r11,r12,LSL #3     ;1012
000f4c  e1a0000b          MOV      r0,r11                ;1012
000f50  e208900f          AND      r9,r8,#0xf            ;1012
000f54  e1a08d88          LSL      r8,r8,#27             ;1012
000f58  e0898fa8          ADD      r8,r9,r8,LSR #31      ;1012
000f5c  e1a08817          LSL      r8,r7,r8              ;1012
                  |L1.3936|
000f60  e1520000          CMP      r2,r0                 ;1012
000f64  9a000005          BLS      |L1.3968|
000f68  e5909000          LDR      r9,[r0,#0]            ;1012
000f6c  e1510009          CMP      r1,r9                 ;1012
000f70  25909004          LDRCS    r9,[r0,#4]            ;1012
000f74  21590001          CMPCS    r9,r1                 ;1012
000f78  92800008          ADDLS    r0,r0,#8              ;1012
000f7c  9afffff7          BLS      |L1.3936|
                  |L1.3968|
000f80  e1520000          CMP      r2,r0                 ;1012
000f84  0a00006b          BEQ      |L1.4408|
000f88  e5909000          LDR      r9,[r0,#0]            ;1012
000f8c  e1590001          CMP      r9,r1                 ;1012
000f90  1a000018          BNE      |L1.4088|
000f94  e5909004          LDR      r9,[r0,#4]            ;1012
000f98  e0811008          ADD      r1,r1,r8              ;1012
000f9c  e1510009          CMP      r1,r9                 ;1012
000fa0  e5801000          STR      r1,[r0,#0]            ;1012
000fa4  1a000035          BNE      |L1.4224|
000fa8  e0422000          SUB      r2,r2,r0              ;1012
000fac  e2421008          SUB      r1,r2,#8              ;1012
000fb0  e3510000          CMP      r1,#0                 ;1012
000fb4  da00002d          BLE      |L1.4208|
000fb8  e1a02e02          LSL      r2,r2,#28             ;1012
000fbc  e3520102          CMP      r2,#0x80000000        ;1012
000fc0  5a000004          BPL      |L1.4056|
000fc4  e5902008          LDR      r2,[r0,#8]            ;1012
000fc8  e590900c          LDR      r9,[r0,#0xc]          ;1012
000fcc  e1a08000          MOV      r8,r0                 ;1012
000fd0  e8880204          STM      r8,{r2,r9}            ;1012
000fd4  e2800008          ADD      r0,r0,#8              ;1012
                  |L1.4056|
000fd8  e1b01241          ASRS     r1,r1,#4              ;1012
000fdc  0a000023          BEQ      |L1.4208|
                  |L1.4064|
000fe0  e2802008          ADD      r2,r0,#8              ;1012
000fe4  e8920704          LDM      r2,{r2,r8-r10}        ;1012
000fe8  e8a00704          STM      r0!,{r2,r8-r10}       ;1012
000fec  e2511001          SUBS     r1,r1,#1              ;1012
000ff0  1afffffa          BNE      |L1.4064|
000ff4  ea00001d          B        |L1.4208|
                  |L1.4088|
000ff8  e081a008          ADD      r10,r1,r8             ;1012
000ffc  e5908004          LDR      r8,[r0,#4]            ;1012
001000  e1590001          CMP      r9,r1                 ;1012
001004  e5801004          STR      r1,[r0,#4]            ;1012
001008  1a00001a          BNE      |L1.4216|
00100c  e15a0008          CMP      r10,r8                ;1012
001010  0a000003          BEQ      |L1.4132|
001014  e5808004          STR      r8,[r0,#4]            ;1012
001018  e3a01000          MOV      r1,#0                 ;1012
00101c  e580a000          STR      r10,[r0,#0]           ;1012
001020  ea00001b          B        |L1.4244|
                  |L1.4132|
001024  e0422000          SUB      r2,r2,r0              ;1012
001028  e2421008          SUB      r1,r2,#8              ;1012
00102c  e3510000          CMP      r1,#0                 ;1012
001030  da00000e          BLE      |L1.4208|
001034  e1a02e02          LSL      r2,r2,#28             ;1012
001038  e3520102          CMP      r2,#0x80000000        ;1012
00103c  5a000004          BPL      |L1.4180|
001040  e5902008          LDR      r2,[r0,#8]            ;1012
001044  e590900c          LDR      r9,[r0,#0xc]          ;1012
001048  e1a08000          MOV      r8,r0                 ;1012
00104c  e8880204          STM      r8,{r2,r9}            ;1012
001050  e2800008          ADD      r0,r0,#8              ;1012
                  |L1.4180|
001054  e1b01241          ASRS     r1,r1,#4              ;1012
001058  0a000004          BEQ      |L1.4208|
                  |L1.4188|
00105c  e2802008          ADD      r2,r0,#8              ;1012
001060  e8920704          LDM      r2,{r2,r8-r10}        ;1012
001064  e8a00704          STM      r0!,{r2,r8-r10}       ;1012
001068  e2511001          SUBS     r1,r1,#1              ;1012
00106c  1afffffa          BNE      |L1.4188|
                  |L1.4208|
001070  e3e01000          MVN      r1,#0                 ;1012
001074  ea000006          B        |L1.4244|
                  |L1.4216|
001078  e15a0008          CMP      r10,r8                ;1012
00107c  1a000001          BNE      |L1.4232|
                  |L1.4224|
001080  e3a01000          MOV      r1,#0                 ;1012
001084  ea000002          B        |L1.4244|
                  |L1.4232|
001088  e5828004          STR      r8,[r2,#4]            ;1012
00108c  e3a01001          MOV      r1,#1                 ;1012
001090  e582a000          STR      r10,[r2,#0]           ;1012
                  |L1.4244|
001094  e08cc001          ADD      r12,r12,r1            ;1012
                  |L1.4248|
001098  e2866001          ADD      r6,r6,#1              ;1012
00109c  e3560004          CMP      r6,#4                 ;1012
0010a0  baffff46          BLT      |L1.3520|
0010a4  e5c3e042          STRB     lr,[r3,#0x42]         ;1012
0010a8  e08b118c          ADD      r1,r11,r12,LSL #3     ;1012
0010ac  e1a0000b          MOV      r0,r11                ;1012
0010b0  e1a0c417          LSL      r12,r7,r4             ;1012
0010b4  e0418000          SUB      r8,r1,r0              ;1012
0010b8  e15701c8          CMP      r7,r8,ASR #3          ;1012
0010bc  e3a01001          MOV      r1,#1                 ;1012
0010c0  e3a06000          MOV      r6,#0                 ;1012
0010c4  d0617801          RSBLE    r7,r1,r1,LSL #16      ;1012
0010c8  ca00001a          BGT      |L1.4408|
                  |L1.4300|
0010cc  e8900204          LDM      r0,{r2,r9}            ;1012
0010d0  e0492002          SUB      r2,r9,r2              ;1012
0010d4  e15c0002          CMP      r12,r2                ;1012
0010d8  8a00000f          BHI      |L1.4380|
0010dc  1a00000c          BNE      |L1.4372|
0010e0  e5900000          LDR      r0,[r0,#0]            ;1012
                  |L1.4324|
;;;1022     unsigned addr = find_free_memory(size_in_log2_minus3);
;;;1023     TU_ASSERT(addr);
0010e4  e3500000          CMP      r0,#0
0010e8  0a000012          BEQ      |L1.4408|
;;;1024   
;;;1025     if (dir_in) {
0010ec  e3550000          CMP      r5,#0
;;;1026       USBC_Writew(addr, USBC_REG_TXFIFOAD(USBC0_BASE));
;;;1027       USBC_Writeb(size_in_log2_minus3, USBC_REG_TXFIFOSZ(USBC0_BASE));
;;;1028     } else {
;;;1029       USBC_Writew(addr, USBC_REG_RXFIFOAD(USBC0_BASE));
0010f0  01c309b6          STRHEQ   r0,[r3,#0x96]
;;;1030       USBC_Writeb(size_in_log2_minus3, USBC_REG_RXFIFOSZ(USBC0_BASE));
0010f4  05c34094          STRBEQ   r4,[r3,#0x94]
0010f8  11c309b2          STRHNE   r0,[r3,#0x92]         ;1026
0010fc  15c34090          STRBNE   r4,[r3,#0x90]         ;1027
001100  e3a0001a          MOV      r0,#0x1a              ;1027
001104  ebfffffe          BL       f1c100s_intc_unmask_irq
;;;1031     }
;;;1032   
;;;1033     musb_int_unmask();
;;;1034   
;;;1035     return true;
001108  e3a00001          MOV      r0,#1
00110c  e28dd034          ADD      sp,sp,#0x34
;;;1036   }
001110  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4372|
001114  e1520007          CMP      r2,r7
001118  31a06000          MOVCC    r6,r0
                  |L1.4380|
00111c  e2811001          ADD      r1,r1,#1
001120  e15101c8          CMP      r1,r8,ASR #3
001124  e2800008          ADD      r0,r0,#8
001128  daffffe7          BLE      |L1.4300|
00112c  e3560000          CMP      r6,#0
001130  15960000          LDRNE    r0,[r6,#0]
001134  1affffea          BNE      |L1.4324|
                  |L1.4408|
001138  e3a00000          MOV      r0,#0                 ;1023
00113c  e28dd034          ADD      sp,sp,#0x34           ;1023
001140  e8bd8ff0          POP      {r4-r11,pc}
;;;1037   
                          ENDP

                  dcd_edpt_close PROC
;;;1061   
;;;1062   void dcd_edpt_close(uint8_t rhport, uint8_t ep_addr)
001144  e92d4070          PUSH     {r4-r6,lr}
;;;1063   {
001148  e1a05001          MOV      r5,r1
;;;1064     (void)rhport;
;;;1065     unsigned const epn    = tu_edpt_number(ep_addr);
00114c  e3c14080          BIC      r4,r1,#0x80
;;;1066     unsigned const dir_in = tu_edpt_dir(ep_addr);
001150  e1a063a1          LSR      r6,r1,#7
001154  e3a0001a          MOV      r0,#0x1a
001158  ebfffffe          BL       f1c100s_intc_mask_irq
00115c  e51f0824          LDR      r0,|L1.2368|
001160  e5c04042          STRB     r4,[r0,#0x42]
;;;1067   
;;;1068     musb_int_mask();
;;;1069     USBC_SelectActiveEp(epn);
;;;1070     if (dir_in) {
001164  e3560000          CMP      r6,#0
001168  e3c53080          BIC      r3,r5,#0x80           ;1065
00116c  e3a02001          MOV      r2,#1                 ;1065
001170  e1a02312          LSL      r2,r2,r3              ;1065
001174  e3a01000          MOV      r1,#0
001178  0a000008          BEQ      |L1.4512|
00117c  e1d034b8          LDRH     r3,[r0,#0x48]
001180  e1c32002          BIC      r2,r3,r2
001184  e1c024b8          STRH     r2,[r0,#0x48]
;;;1071       USBC_INT_DisableTxEp(epn);
;;;1072       USBC_Writew(0, USBC_REG_TXMAXP(USBC0_BASE));
;;;1073   		USBC_Writew((1 << USBC_BP_TXCSR_D_MODE) | (1 << USBC_BP_TXCSR_D_CLEAR_DATA_TOGGLE) | (1 << USBC_BP_TXCSR_D_FLUSH_FIFO),
001188  e59f203c          LDR      r2,|L1.4556|
00118c  e1c018b0          STRH     r1,[r0,#0x80]         ;1072
001190  e1c028b2          STRH     r2,[r0,#0x82]
;;;1074         USBC_REG_TXCSR(USBC0_BASE));
;;;1075   
;;;1076       USBC_Writew(0, USBC_REG_TXFIFOAD(USBC0_BASE));
001194  e1c019b2          STRH     r1,[r0,#0x92]
;;;1077       USBC_Writeb(0, USBC_REG_TXFIFOSZ(USBC0_BASE));
001198  e5c01090          STRB     r1,[r0,#0x90]
00119c  ea000007          B        |L1.4544|
                  |L1.4512|
0011a0  e1d034ba          LDRH     r3,[r0,#0x4a]
0011a4  e1c32002          BIC      r2,r3,r2
0011a8  e1c024ba          STRH     r2,[r0,#0x4a]
;;;1078     } else {
;;;1079       USBC_INT_DisableRxEp(epn);
;;;1080       USBC_Writew(0, USBC_REG_RXMAXP(USBC0_BASE));
;;;1081   	  USBC_Writew((1 << USBC_BP_RXCSR_D_CLEAR_DATA_TOGGLE) | (1 << USBC_BP_RXCSR_D_FLUSH_FIFO),
0011ac  e3a02090          MOV      r2,#0x90
0011b0  e1c018b4          STRH     r1,[r0,#0x84]         ;1080
0011b4  e1c028b6          STRH     r2,[r0,#0x86]
;;;1082         USBC_REG_RXCSR(USBC0_BASE));
;;;1083   
;;;1084       USBC_Writew(0, USBC_REG_RXFIFOAD(USBC0_BASE));
0011b8  e1c019b6          STRH     r1,[r0,#0x96]
;;;1085       USBC_Writeb(0, USBC_REG_RXFIFOSZ(USBC0_BASE));
0011bc  e5c01094          STRB     r1,[r0,#0x94]
                  |L1.4544|
0011c0  e8bd4070          POP      {r4-r6,lr}
0011c4  e3a0001a          MOV      r0,#0x1a
0011c8  eafffffe          B        f1c100s_intc_unmask_irq
                  |L1.4556|
                          DCD      0x00002048
                  |L1.4560|
                          DCD      0x01c20000
                  |L1.4564|
                          DCD      0x01c13410
                  |L1.4568|
                          DCD      usb_isr_handler
                          ENDP

                  dcd_edpt_xfer PROC
;;;1090   // Submit a transfer, When complete dcd_event_xfer_complete() is invoked to notify the stack
;;;1091   bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
0011dc  e92d47f0          PUSH     {r4-r10,lr}
;;;1092   {
0011e0  e1a09000          MOV      r9,r0
0011e4  e24dd010          SUB      sp,sp,#0x10
0011e8  e1a04003          MOV      r4,r3
0011ec  e1a07002          MOV      r7,r2
0011f0  e1a05001          MOV      r5,r1
;;;1093     (void)rhport;
;;;1094     bool ret;
;;;1095     // TU_LOG1("X %x %d\n", ep_addr, total_bytes);
;;;1096     unsigned const epnum = tu_edpt_number(ep_addr);
0011f4  e3c1a080          BIC      r10,r1,#0x80
0011f8  e3a0001a          MOV      r0,#0x1a
0011fc  ebfffffe          BL       f1c100s_intc_mask_irq
001200  e51f18c8          LDR      r1,|L1.2368|
;;;1097     musb_int_mask();
;;;1098   
;;;1099     if (epnum) {
;;;1100       _dcd.pipe_buf_is_fifo[tu_edpt_dir(ep_addr)] &= ~TU_BIT(epnum - 1);
001204  e51f08c8          LDR      r0,|L1.2372|
001208  e35a0000          CMP      r10,#0                ;1099
00120c  e1a023a5          LSR      r2,r5,#7              ;1099
001210  e3a06000          MOV      r6,#0                 ;1099
001214  e3a03002          MOV      r3,#2
001218  e3a08001          MOV      r8,#1
00121c  0a000022          BEQ      |L1.4780|
001220  e0033325          AND      r3,r3,r5,LSR #6
001224  e0833000          ADD      r3,r3,r0
001228  e1d398b4          LDRH     r9,[r3,#0x84]
00122c  e24ac001          SUB      r12,r10,#1
001230  e1c9cc18          BIC      r12,r9,r8,LSL r12
001234  e1c3c8b4          STRH     r12,[r3,#0x84]
001238  e062c182          RSB      r12,r2,r2,LSL #3
00123c  e3c53080          BIC      r3,r5,#0x80
001240  e080c18c          ADD      r12,r0,r12,LSL #3
001244  e2430001          SUB      r0,r3,#1
001248  e08c0180          ADD      r0,r12,r0,LSL #3
00124c  e1a03427          LSR      r3,r7,#8
001250  e5c07013          STRB     r7,[r0,#0x13]
001254  e1a0c827          LSR      r12,r7,#16
001258  e5c03014          STRB     r3,[r0,#0x14]
00125c  e1a07c27          LSR      r7,r7,#24
001260  e5c0c015          STRB     r12,[r0,#0x15]
001264  e5c07016          STRB     r7,[r0,#0x16]
001268  e1a03424          LSR      r3,r4,#8
00126c  e5c04017          STRB     r4,[r0,#0x17]
001270  e5c03018          STRB     r3,[r0,#0x18]
001274  e1a03424          LSR      r3,r4,#8
001278  e5c04019          STRB     r4,[r0,#0x19]
00127c  e5c0301a          STRB     r3,[r0,#0x1a]
001280  e3c50080          BIC      r0,r5,#0x80
001284  e5c10042          STRB     r0,[r1,#0x42]
001288  e3520000          CMP      r2,#0
00128c  0a000002          BEQ      |L1.4764|
001290  e1a00005          MOV      r0,r5
001294  ebfffffe          BL       handle_xfer_in
001298  ea000080          B        |L1.5280|
                  |L1.4764|
00129c  e1d108b6          LDRH     r0,[r1,#0x86]
0012a0  e3100001          TST      r0,#1
0012a4  15c16086          STRBNE   r6,[r1,#0x86]
0012a8  ea00007c          B        |L1.5280|
                  |L1.4780|
0012ac  e3540040          CMP      r4,#0x40
0012b0  9a000001          BLS      |L1.4796|
                  |L1.4788|
0012b4  e1a08006          MOV      r8,r6
0012b8  ea000078          B        |L1.5280|
                  |L1.4796|
0012bc  e5d0c000          LDRB     r12,[r0,#0]  ; _dcd
0012c0  e35c00ff          CMP      r12,#0xff
0012c4  1a000001          BNE      |L1.4816|
0012c8  e3540000          CMP      r4,#0
0012cc  1afffff8          BNE      |L1.4788|
                  |L1.4816|
0012d0  e3a0a000          MOV      r10,#0
0012d4  e5c1a042          STRB     r10,[r1,#0x42]
0012d8  e35c00ff          CMP      r12,#0xff
0012dc  0a000004          BEQ      |L1.4852|
0012e0  e5d0500a          LDRB     r5,[r0,#0xa]  ; _dcd
0012e4  e3550000          CMP      r5,#0
0012e8  15c0600a          STRBNE   r6,[r0,#0xa]  ; _dcd
0012ec  0a00000e          BEQ      |L1.4908|
0012f0  ea00006a          B        |L1.5280|
                  |L1.4852|
0012f4  e5c0600a          STRB     r6,[r0,#0xa]  ; _dcd
0012f8  e51f39b0          LDR      r3,|L1.2384|
0012fc  e3a00000          MOV      r0,#0
001300  e5932018          LDR      r2,[r3,#0x18]  ; <Data3>, <Data3>
001304  e593301c          LDR      r3,[r3,#0x1c]
001308  e1cd20f0          STRD     r2,r3,[sp,#0]
00130c  e5cd5004          STRB     r5,[sp,#4]
001310  e1a01000          MOV      r1,r0
001314  e5cd0005          STRB     r0,[sp,#5]
001318  e1a0000d          MOV      r0,sp
00131c  e5cd9000          STRB     r9,[sp,#0]
001320  e58d4008          STR      r4,[sp,#8]
001324  ebfffffe          BL       dcd_event_handler
001328  ea00005c          B        |L1.5280|
                  |L1.4908|
00132c  e1a0cc0c          LSL      r12,r12,#24
001330  e1520fac          CMP      r2,r12,LSR #31
001334  1a000048          BNE      |L1.5212|
001338  e1d0c0b8          LDRH     r12,[r0,#8]  ; _dcd
00133c  e15c0004          CMP      r12,r4
001340  3affffdb          BCC      |L1.4788|
001344  e35c0040          CMP      r12,#0x40
001348  31a0500c          MOVCC    r5,r12
00134c  23a05040          MOVCS    r5,#0x40
001350  e1550004          CMP      r5,r4
001354  2a000002          BCS      |L1.4964|
001358  e35c0040          CMP      r12,#0x40
00135c  23a04040          MOVCS    r4,#0x40
001360  31a0400c          MOVCC    r4,r12
                  |L1.4964|
001364  e3520000          CMP      r2,#0
001368  0a00002b          BEQ      |L1.5148|
00136c  e1a09124          LSR      r9,r4,#2
001370  e3590000          CMP      r9,#0
001374  e1a05007          MOV      r5,r7
001378  e2042003          AND      r2,r4,#3
00137c  da000004          BLE      |L1.5012|
                  |L1.4992|
001380  e495a004          LDR      r10,[r5],#4
001384  e581a000          STR      r10,[r1,#0]
001388  e2499001          SUB      r9,r9,#1
00138c  e3590000          CMP      r9,#0
001390  cafffffa          BGT      |L1.4992|
                  |L1.5012|
001394  e3520000          CMP      r2,#0
001398  da000004          BLE      |L1.5040|
                  |L1.5020|
00139c  e4d59001          LDRB     r9,[r5],#1
0013a0  e5c19000          STRB     r9,[r1,#0]
0013a4  e2422001          SUB      r2,r2,#1
0013a8  e3520000          CMP      r2,#0
0013ac  cafffffa          BGT      |L1.5020|
                  |L1.5040|
0013b0  e0872004          ADD      r2,r7,r4
0013b4  e1a05422          LSR      r5,r2,#8
0013b8  e5c0200b          STRB     r2,[r0,#0xb]  ; _dcd
0013bc  e1a07822          LSR      r7,r2,#16
0013c0  e5c0500c          STRB     r5,[r0,#0xc]  ; _dcd
0013c4  e1a02c22          LSR      r2,r2,#24
0013c8  e5c0700d          STRB     r7,[r0,#0xd]  ; _dcd
0013cc  e5c0200e          STRB     r2,[r0,#0xe]  ; _dcd
0013d0  e1a05424          LSR      r5,r4,#8
0013d4  e5c0400f          STRB     r4,[r0,#0xf]  ; _dcd
0013d8  e5c05010          STRB     r5,[r0,#0x10]  ; _dcd
0013dc  e1a05426          LSR      r5,r6,#8
0013e0  e5c06011          STRB     r6,[r0,#0x11]  ; _dcd
0013e4  e04c2004          SUB      r2,r12,r4
0013e8  e5c05012          STRB     r5,[r0,#0x12]  ; _dcd
0013ec  e3540040          CMP      r4,#0x40
0013f0  e1c020b8          STRH     r2,[r0,#8]  ; _dcd
0013f4  3a000002          BCC      |L1.5124|
0013f8  e15c0004          CMP      r12,r4
0013fc  11c138b2          STRHNE   r3,[r1,#0x82]
001400  1a000026          BNE      |L1.5280|
                  |L1.5124|
001404  e3a020ff          MOV      r2,#0xff
001408  e5c02000          STRB     r2,[r0,#0]  ; _dcd
00140c  e3a0300a          MOV      r3,#0xa
001410  e5c0800a          STRB     r8,[r0,#0xa]  ; _dcd
001414  e1c138b2          STRH     r3,[r1,#0x82]
001418  ea000020          B        |L1.5280|
                  |L1.5148|
00141c  e1a03427          LSR      r3,r7,#8
001420  e5c0700b          STRB     r7,[r0,#0xb]  ; _dcd
001424  e5c0300c          STRB     r3,[r0,#0xc]  ; _dcd
001428  e1a0c827          LSR      r12,r7,#16
00142c  e1a05c27          LSR      r5,r7,#24
001430  e5c0c00d          STRB     r12,[r0,#0xd]  ; _dcd
001434  e5c0500e          STRB     r5,[r0,#0xe]  ; _dcd
001438  e1a03424          LSR      r3,r4,#8
00143c  e5c0400f          STRB     r4,[r0,#0xf]  ; _dcd
001440  e5c03010          STRB     r3,[r0,#0x10]  ; _dcd
001444  e1a03424          LSR      r3,r4,#8
001448  e5c04011          STRB     r4,[r0,#0x11]  ; _dcd
00144c  e3a02040          MOV      r2,#0x40
001450  e5c03012          STRB     r3,[r0,#0x12]  ; _dcd
001454  e1c128b2          STRH     r2,[r1,#0x82]
001458  ea000010          B        |L1.5280|
                  |L1.5212|
00145c  e3520000          CMP      r2,#0
001460  0a00000e          BEQ      |L1.5280|
001464  e1a0c426          LSR      r12,r6,#8
001468  e5c0600b          STRB     r6,[r0,#0xb]  ; _dcd
00146c  e1a03826          LSR      r3,r6,#16
001470  e5c0c00c          STRB     r12,[r0,#0xc]  ; _dcd
001474  e5c0300d          STRB     r3,[r0,#0xd]  ; _dcd
001478  e1a04c26          LSR      r4,r6,#24
00147c  e5c0400e          STRB     r4,[r0,#0xe]  ; _dcd
001480  e1a02426          LSR      r2,r6,#8
001484  e5c0600f          STRB     r6,[r0,#0xf]  ; _dcd
001488  e5c02010          STRB     r2,[r0,#0x10]  ; _dcd
00148c  e1a03426          LSR      r3,r6,#8
001490  e5c06011          STRB     r6,[r0,#0x11]  ; _dcd
001494  e3a02048          MOV      r2,#0x48
001498  e5c03012          STRB     r3,[r0,#0x12]  ; _dcd
00149c  e1c128b2          STRH     r2,[r1,#0x82]
                  |L1.5280|
0014a0  e3a0001a          MOV      r0,#0x1a
0014a4  ebfffffe          BL       f1c100s_intc_unmask_irq
;;;1101       ret = edpt_n_xfer(rhport, ep_addr, buffer, total_bytes);
;;;1102     } else {
;;;1103       ret = edpt0_xfer(rhport, ep_addr, buffer, total_bytes);
;;;1104     }
;;;1105     musb_int_unmask();
;;;1106     return ret;
0014a8  e1a00008          MOV      r0,r8
0014ac  e28dd010          ADD      sp,sp,#0x10
;;;1107   }
0014b0  e8bd87f0          POP      {r4-r10,pc}
;;;1108   
                          ENDP

                  dcd_edpt_xfer_fifo PROC
;;;1109   // Submit a transfer where is managed by FIFO, When complete dcd_event_xfer_complete() is invoked to notify the stack - optional, however, must be listed in usbd.c
;;;1110   bool dcd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
0014b4  e92d41f0          PUSH     {r4-r8,lr}
;;;1111   {
;;;1112     (void)rhport;
;;;1113     bool ret;
;;;1114     // TU_LOG1("X %x %d\n", ep_addr, total_bytes);
;;;1115     unsigned const epnum = tu_edpt_number(ep_addr);
0014b8  e3d18080          BICS     r8,r1,#0x80
0014bc  e1a05003          MOV      r5,r3                 ;1111
0014c0  e1a06002          MOV      r6,r2                 ;1111
0014c4  e1a04001          MOV      r4,r1                 ;1111
;;;1116     TU_ASSERT(epnum);
0014c8  03a00000          MOVEQ    r0,#0
;;;1117   
;;;1118     musb_int_mask();
;;;1119     _dcd.pipe_buf_is_fifo[tu_edpt_dir(ep_addr)] |= TU_BIT(epnum - 1);
;;;1120     ret = edpt_n_xfer(rhport, ep_addr, (uint8_t*)ff, total_bytes);
;;;1121     musb_int_unmask();
;;;1122   
;;;1123     return ret;
;;;1124   }
0014cc  08bd81f0          POPEQ    {r4-r8,pc}
0014d0  e3a0001a          MOV      r0,#0x1a
0014d4  ebfffffe          BL       f1c100s_intc_mask_irq
0014d8  e51f1b9c          LDR      r1,|L1.2372|
0014dc  e3a00002          MOV      r0,#2                 ;1119
0014e0  e0000324          AND      r0,r0,r4,LSR #6       ;1119
0014e4  e0800001          ADD      r0,r0,r1              ;1119
0014e8  e1d038b4          LDRH     r3,[r0,#0x84]         ;1119
0014ec  e3a07001          MOV      r7,#1                 ;1119
0014f0  e2482001          SUB      r2,r8,#1              ;1119
0014f4  e1832217          ORR      r2,r3,r7,LSL r2       ;1119
0014f8  e1c028b4          STRH     r2,[r0,#0x84]         ;1119
0014fc  e1b023a4          LSRS     r2,r4,#7              ;1119
001500  e3c43080          BIC      r3,r4,#0x80           ;1119
001504  e062c182          RSB      r12,r2,r2,LSL #3      ;1119
001508  e081118c          ADD      r1,r1,r12,LSL #3      ;1119
00150c  e2433001          SUB      r3,r3,#1              ;1119
001510  e0811183          ADD      r1,r1,r3,LSL #3       ;1119
001514  e1a03426          LSR      r3,r6,#8              ;1119
001518  e5c16013          STRB     r6,[r1,#0x13]         ;1119
00151c  e5c13014          STRB     r3,[r1,#0x14]         ;1119
001520  e1a00004          MOV      r0,r4                 ;1120
001524  e1a0c826          LSR      r12,r6,#16            ;1120
001528  e1a04c26          LSR      r4,r6,#24             ;1120
00152c  e5c1c015          STRB     r12,[r1,#0x15]        ;1120
001530  e5c14016          STRB     r4,[r1,#0x16]         ;1120
001534  e1a03425          LSR      r3,r5,#8              ;1120
001538  e5c15017          STRB     r5,[r1,#0x17]         ;1120
00153c  e5c13018          STRB     r3,[r1,#0x18]         ;1120
001540  e1a03425          LSR      r3,r5,#8              ;1120
001544  e5c15019          STRB     r5,[r1,#0x19]         ;1120
001548  e5c1301a          STRB     r3,[r1,#0x1a]         ;1120
00154c  e51f1c14          LDR      r1,|L1.2368|
001550  e3c03080          BIC      r3,r0,#0x80           ;1120
001554  e5c13042          STRB     r3,[r1,#0x42]         ;1120
001558  0a000001          BEQ      |L1.5476|
00155c  ebfffffe          BL       handle_xfer_in
001560  ea000003          B        |L1.5492|
                  |L1.5476|
001564  e1d108b6          LDRH     r0,[r1,#0x86]         ;1120
001568  e3100001          TST      r0,#1                 ;1120
00156c  13a00000          MOVNE    r0,#0                 ;1120
001570  15c10086          STRBNE   r0,[r1,#0x86]         ;1120
                  |L1.5492|
001574  e3a0001a          MOV      r0,#0x1a              ;1120
001578  ebfffffe          BL       f1c100s_intc_unmask_irq
00157c  e1a00007          MOV      r0,r7                 ;1123
001580  e8bd81f0          POP      {r4-r8,pc}
;;;1125   
                          ENDP

                  dcd_edpt_stall PROC
;;;1126   // Stall endpoint
;;;1127   void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
001584  e92d4070          PUSH     {r4-r6,lr}
;;;1128   {
001588  e1a05001          MOV      r5,r1
;;;1129     (void)rhport;
;;;1130     unsigned const epn = tu_edpt_number(ep_addr);
00158c  e3c14080          BIC      r4,r1,#0x80
001590  e3a0001a          MOV      r0,#0x1a
001594  ebfffffe          BL       f1c100s_intc_mask_irq
001598  e51f0c60          LDR      r0,|L1.2368|
00159c  e5c04042          STRB     r4,[r0,#0x42]
;;;1131     musb_int_mask();
;;;1132     USBC_SelectActiveEp(epn);
;;;1133     if (0 == epn) {
0015a0  e3540000          CMP      r4,#0
0015a4  0a000005          BEQ      |L1.5568|
;;;1134       if (!ep_addr) { /* Ignore EP80 */
;;;1135         _dcd.setup_packet.bmRequestType = REQUEST_TYPE_INVALID;
;;;1136         _dcd.pipe0.buf = NULL;
;;;1137         __USBC_Dev_ep0_SendStall();
;;;1138       }
;;;1139     } else {
;;;1140       if (tu_edpt_dir(ep_addr)) { /* IN */
0015a8  e3150080          TST      r5,#0x80
0015ac  11d018b2          LDRHNE   r1,[r0,#0x82]
0015b0  13811010          ORRNE    r1,r1,#0x10
0015b4  0a00000e          BEQ      |L1.5620|
                  |L1.5560|
0015b8  e1c018b2          STRH     r1,[r0,#0x82]
0015bc  ea000012          B        |L1.5644|
                  |L1.5568|
0015c0  e3550000          CMP      r5,#0                 ;1134
0015c4  1a000010          BNE      |L1.5644|
0015c8  e51f1c8c          LDR      r1,|L1.2372|
0015cc  e3a030ff          MOV      r3,#0xff              ;1135
0015d0  e3a02000          MOV      r2,#0                 ;1136
0015d4  e5c13000          STRB     r3,[r1,#0]            ;1135  ; _dcd
0015d8  e5c1200b          STRB     r2,[r1,#0xb]          ;1136  ; _dcd
0015dc  e5c1200c          STRB     r2,[r1,#0xc]          ;1136  ; _dcd
0015e0  e5c1200d          STRB     r2,[r1,#0xd]          ;1136  ; _dcd
0015e4  e5c1200e          STRB     r2,[r1,#0xe]          ;1136  ; _dcd
0015e8  e1d018b2          LDRH     r1,[r0,#0x82]         ;1136
0015ec  e3811020          ORR      r1,r1,#0x20           ;1136
0015f0  eafffff0          B        |L1.5560|
                  |L1.5620|
0015f4  e1d018b6          LDRH     r1,[r0,#0x86]         ;1137
0015f8  e3110001          TST      r1,#1                 ;1137
;;;1141         __USBC_Dev_Tx_SendStall();
;;;1142       } else { /* OUT */
;;;1143         TU_ASSERT(!__USBC_Dev_Rx_IsReadDataReady(),);
;;;1144         __USBC_Dev_Rx_SendStall();
;;;1145       }
;;;1146     }
;;;1147     musb_int_unmask();
;;;1148   }
0015fc  18bd8070          POPNE    {r4-r6,pc}
001600  e1d018b6          LDRH     r1,[r0,#0x86]
001604  e3811020          ORR      r1,r1,#0x20
001608  e1c018b6          STRH     r1,[r0,#0x86]
                  |L1.5644|
00160c  e8bd4070          POP      {r4-r6,lr}
001610  e3a0001a          MOV      r0,#0x1a
001614  eafffffe          B        f1c100s_intc_unmask_irq
;;;1149   
                          ENDP

                  dcd_edpt_clear_stall PROC
;;;1150   // clear stall, data toggle is also reset to DATA0
;;;1151   void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
001618  e92d4070          PUSH     {r4-r6,lr}
;;;1152   {
00161c  e1a05001          MOV      r5,r1
;;;1153     (void)rhport;
;;;1154     unsigned const epn = tu_edpt_number(ep_addr);
001620  e3c14080          BIC      r4,r1,#0x80
001624  e3a0001a          MOV      r0,#0x1a
001628  ebfffffe          BL       f1c100s_intc_mask_irq
00162c  e51f0cf4          LDR      r0,|L1.2368|
001630  e5c04042          STRB     r4,[r0,#0x42]
;;;1155     musb_int_mask();
;;;1156     USBC_SelectActiveEp(epn);
;;;1157     if (0 != epn) {
001634  e3540000          CMP      r4,#0
001638  0a000008          BEQ      |L1.5728|
;;;1158       if (tu_edpt_dir(ep_addr)) { /* IN */
00163c  e3150080          TST      r5,#0x80
001640  01d018b6          LDRHEQ   r1,[r0,#0x86]
001644  03c11064          BICEQ    r1,r1,#0x64
001648  03811080          ORREQ    r1,r1,#0x80
00164c  01c018b6          STRHEQ   r1,[r0,#0x86]
001650  11d018b2          LDRHNE   r1,[r0,#0x82]
001654  13c11034          BICNE    r1,r1,#0x34
001658  13811040          ORRNE    r1,r1,#0x40
00165c  11c018b2          STRHNE   r1,[r0,#0x82]
                  |L1.5728|
001660  e8bd4070          POP      {r4-r6,lr}
001664  e3a0001a          MOV      r0,#0x1a
001668  eafffffe          B        f1c100s_intc_unmask_irq
;;;1159         __USBC_Dev_Tx_ClearStall();
;;;1160       } else { /* OUT */
;;;1161         __USBC_Dev_Rx_ClearStall();
;;;1162       }
;;;1163     }
;;;1164     musb_int_unmask();
;;;1165   }
;;;1166   
                          ENDP

                  handle_xfer_in PROC
;;;578    
;;;579    static bool handle_xfer_in(uint_fast8_t ep_addr)
00166c  e92d4ff0          PUSH     {r4-r11,lr}
;;;580    {
;;;581      unsigned epnum_minus1 = tu_edpt_number(ep_addr) - 1;
;;;582      pipe_state_t  *pipe = &_dcd.pipe[tu_edpt_dir(ep_addr)][epnum_minus1];
001670  e1a01c00          LSL      r1,r0,#24
001674  e1a02fa1          LSR      r2,r1,#31
001678  e51f1d3c          LDR      r1,|L1.2372|
00167c  e200007f          AND      r0,r0,#0x7f           ;581
001680  e0622182          RSB      r2,r2,r2,LSL #3
001684  e0812182          ADD      r2,r1,r2,LSL #3
001688  e2400001          SUB      r0,r0,#1
00168c  e0822180          ADD      r2,r2,r0,LSL #3
001690  e2825013          ADD      r5,r2,#0x13
;;;583      const unsigned rem  = pipe->remaining;
001694  e5d2201a          LDRB     r2,[r2,#0x1a]
001698  e5d53006          LDRB     r3,[r5,#6]
00169c  e24dd014          SUB      sp,sp,#0x14           ;580
0016a0  e1937402          ORRS     r7,r3,r2,LSL #8
0016a4  0a000038          BEQ      |L1.6028|
;;;584    
;;;585      if (!rem) {
;;;586        pipe->buf = NULL;
;;;587        return true;
;;;588      }
;;;589    
;;;590      const unsigned mps = USBC_Readw(USBC_REG_TXMAXP(USBC0_BASE));
0016a8  e51f8d70          LDR      r8,|L1.2368|
0016ac  e1d848b0          LDRH     r4,[r8,#0x80]
;;;591      const unsigned len = TU_MIN(mps, rem);
;;;592      uint8_t          *buf = pipe->buf;
0016b0  e3a02000          MOV      r2,#0
0016b4  e1a03002          MOV      r3,r2
0016b8  e5d52000          LDRB     r2,[r5,#0]
0016bc  e5d5c001          LDRB     r12,[r5,#1]
0016c0  e5d56002          LDRB     r6,[r5,#2]
0016c4  e5d5a003          LDRB     r10,[r5,#3]
0016c8  e1833002          ORR      r3,r3,r2
0016cc  e1570004          CMP      r7,r4                 ;591
0016d0  e183340c          ORR      r3,r3,r12,LSL #8
0016d4  91a04007          MOVLS    r4,r7                 ;591
0016d8  e1833806          ORR      r3,r3,r6,LSL #16
;;;593      // TU_LOG1("   %p mps %d len %d rem %d\n", buf, mps, len, rem);
;;;594      if (len) {
0016dc  e3540000          CMP      r4,#0
0016e0  e3a09001          MOV      r9,#1                 ;587
0016e4  e1833c0a          ORR      r3,r3,r10,LSL #24     ;592
0016e8  0a00004c          BEQ      |L1.6176|
;;;595        volatile void* addr = (volatile void*)(USBC_REG_EPFIFO1(USBC0_BASE) + (epnum_minus1 << 2));
;;;596        if (_dcd.pipe_buf_is_fifo[TUSB_DIR_IN] & TU_BIT(epnum_minus1)) {
0016ec  e1d118b6          LDRH     r1,[r1,#0x86]  ; _dcd
0016f0  e51f2db0          LDR      r2,|L1.2376|
0016f4  e1110019          TST      r1,r9,LSL r0
0016f8  e0826100          ADD      r6,r2,r0,LSL #2       ;595
0016fc  0a00002a          BEQ      |L1.6060|
001700  e51f0dbc          LDR      r0,|L1.2380|
001704  e58d3000          STR      r3,[sp,#0]
001708  e590200c          LDR      r2,[r0,#0xc]
00170c  e28d1004          ADD      r1,sp,#4
001710  e1a00003          MOV      r0,r3
001714  e12fff32          BLX      r2
001718  e1dda0b4          LDRH     r10,[sp,#4]
00171c  e51f1dd8          LDR      r1,|L1.2380|
001720  e59d0008          LDR      r0,[sp,#8]
001724  e15a0004          CMP      r10,r4
001728  e5913014          LDR      r3,[r1,#0x14]
00172c  81a0a004          MOVHI    r10,r4
001730  e1a0200a          MOV      r2,r10
001734  e1a01006          MOV      r1,r6
001738  e12fff33          BLX      r3
00173c  e054a00a          SUBS     r10,r4,r10
001740  0a000009          BEQ      |L1.5996|
001744  e1ddb0b6          LDRH     r11,[sp,#6]
001748  e51f1e04          LDR      r1,|L1.2380|
00174c  e59d000c          LDR      r0,[sp,#0xc]
001750  e15b000a          CMP      r11,r10
001754  e5913014          LDR      r3,[r1,#0x14]
001758  81a0b00a          MOVHI    r11,r10
00175c  e1a0200b          MOV      r2,r11
001760  e1a01006          MOV      r1,r6
001764  e12fff33          BLX      r3
001768  e04aa00b          SUB      r10,r10,r11
                  |L1.5996|
00176c  e51f0e28          LDR      r0,|L1.2380|
001770  e044100a          SUB      r1,r4,r10
001774  e5902010          LDR      r2,[r0,#0x10]
001778  e1a01801          LSL      r1,r1,#16
00177c  e59d0000          LDR      r0,[sp,#0]
001780  e1a01821          LSR      r1,r1,#16
001784  e12fff32          BLX      r2
;;;597          pipe_read_write_packet_ff((tu_fifo_t *)buf, addr, len, TUSB_DIR_IN);
001788  ea000020          B        |L1.6160|
                  |L1.6028|
00178c  e3a00000          MOV      r0,#0                 ;586
001790  e5c50000          STRB     r0,[r5,#0]            ;586
001794  e5c50001          STRB     r0,[r5,#1]            ;586
001798  e5c50002          STRB     r0,[r5,#2]            ;586
00179c  e5c50003          STRB     r0,[r5,#3]            ;586
0017a0  e3a00001          MOV      r0,#1                 ;587
0017a4  e28dd014          ADD      sp,sp,#0x14           ;587
;;;598        } else {
;;;599          pipe_write_packet(buf, addr, len);
;;;600          pipe->buf       = buf + len;
;;;601        }
;;;602        pipe->remaining = rem - len;
;;;603      }
;;;604      __USBC_Dev_Tx_WriteDataComplete();
;;;605      // TU_LOG1(" TXCSRL%d = %x %d\n", epnum_minus1 + 1, regs->TXCSRL, rem - len);
;;;606      return false;
;;;607    }
0017a8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.6060|
0017ac  e1a02124          LSR      r2,r4,#2
0017b0  e3520000          CMP      r2,#0
0017b4  e1a00003          MOV      r0,r3                 ;599
0017b8  e2041003          AND      r1,r4,#3              ;599
0017bc  da000004          BLE      |L1.6100|
                  |L1.6080|
0017c0  e490c004          LDR      r12,[r0],#4           ;599
0017c4  e586c000          STR      r12,[r6,#0]           ;599
0017c8  e2422001          SUB      r2,r2,#1              ;599
0017cc  e3520000          CMP      r2,#0                 ;599
0017d0  cafffffa          BGT      |L1.6080|
                  |L1.6100|
0017d4  e3510000          CMP      r1,#0                 ;599
0017d8  da000004          BLE      |L1.6128|
                  |L1.6108|
0017dc  e4d02001          LDRB     r2,[r0],#1            ;599
0017e0  e5c62000          STRB     r2,[r6,#0]            ;599
0017e4  e2411001          SUB      r1,r1,#1              ;599
0017e8  e3510000          CMP      r1,#0                 ;599
0017ec  cafffffa          BGT      |L1.6108|
                  |L1.6128|
0017f0  e0832004          ADD      r2,r3,r4              ;600
0017f4  e1a03422          LSR      r3,r2,#8              ;600
0017f8  e5c52000          STRB     r2,[r5,#0]            ;600
0017fc  e1a01822          LSR      r1,r2,#16             ;600
001800  e5c53001          STRB     r3,[r5,#1]            ;600
001804  e1a00c22          LSR      r0,r2,#24             ;600
001808  e5c51002          STRB     r1,[r5,#2]            ;600
00180c  e5c50003          STRB     r0,[r5,#3]            ;600
                  |L1.6160|
001810  e0470004          SUB      r0,r7,r4              ;602
001814  e1a01420          LSR      r1,r0,#8              ;602
001818  e5c50006          STRB     r0,[r5,#6]            ;602
00181c  e5c51007          STRB     r1,[r5,#7]            ;602
                  |L1.6176|
001820  e5c89082          STRB     r9,[r8,#0x82]         ;602
001824  e3a00000          MOV      r0,#0                 ;606
001828  e28dd014          ADD      sp,sp,#0x14           ;606
00182c  e8bd8ff0          POP      {r4-r11,pc}
;;;608    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  _dcd
                          %        136

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00010000          DCB      0x00,0x01,0x00,0x00
                          %        8
00000c  00060000          DCB      0x00,0x06,0x00,0x00
                          %        8
000018  00070000          DCB      0x00,0x07,0x00,0x00
                          %        8
                  ops
                          DCD      tu_fifo_get_write_info
                          DCD      tu_fifo_advance_write_pointer
                          DCD      pipe_read_packet
                          DCD      tu_fifo_get_read_info
                          DCD      tu_fifo_advance_read_pointer
                          DCD      pipe_write_packet

                          AREA ||i.__ARM_common_ctz||, COMGROUP=__ARM_common_ctz, CODE, READONLY, ALIGN=2

                  __ARM_common_ctz PROC
000000  e1a02800          LSL      r2,r0,#16
000004  e3520000          CMP      r2,#0
000008  e3a01020          MOV      r1,#0x20
00000c  11a00002          MOVNE    r0,r2
000010  12411010          SUBNE    r1,r1,#0x10
000014  e1a02400          LSL      r2,r0,#8
000018  e3520000          CMP      r2,#0
00001c  11a00002          MOVNE    r0,r2
000020  12411008          SUBNE    r1,r1,#8
000024  e1a02200          LSL      r2,r0,#4
000028  e3520000          CMP      r2,#0
00002c  11a00002          MOVNE    r0,r2
000030  12411004          SUBNE    r1,r1,#4
000034  e1a02100          LSL      r2,r0,#2
000038  e3520000          CMP      r2,#0
00003c  11a00002          MOVNE    r0,r2
000040  12411002          SUBNE    r1,r1,#2
000044  e1a02080          LSL      r2,r0,#1
000048  e3520000          CMP      r2,#0
00004c  12411001          SUBNE    r1,r1,#1
000050  11a00002          MOVNE    r0,r2
000054  e0410fa0          SUB      r0,r1,r0,LSR #31
000058  e12fff1e          BX       lr
                          ENDP


                          AREA ||i.__ARM_common_memcpy1_8||, COMGROUP=__ARM_common_memcpy1_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memcpy1_8 PROC
000000  e5d12000          LDRB     r2,[r1,#0]
000004  e5c02000          STRB     r2,[r0,#0]
000008  e5d13001          LDRB     r3,[r1,#1]
00000c  e5c03001          STRB     r3,[r0,#1]
000010  e5d1c002          LDRB     r12,[r1,#2]
000014  e5c0c002          STRB     r12,[r0,#2]
000018  e5d12003          LDRB     r2,[r1,#3]
00001c  e5c02003          STRB     r2,[r0,#3]
000020  e5d13004          LDRB     r3,[r1,#4]
000024  e5c03004          STRB     r3,[r0,#4]
000028  e5d1c005          LDRB     r12,[r1,#5]
00002c  e5c0c005          STRB     r12,[r0,#5]
000030  e5d12006          LDRB     r2,[r1,#6]
000034  e5c02006          STRB     r2,[r0,#6]
000038  e5d13007          LDRB     r3,[r1,#7]
00003c  e5c03007          STRB     r3,[r0,#7]
000040  e12fff1e          BX       lr
                          ENDP

