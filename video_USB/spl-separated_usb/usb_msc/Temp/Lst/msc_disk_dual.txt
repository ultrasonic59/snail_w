; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\msc_disk_dual.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\msc_disk_dual.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\msc_disk_dual.crf users\msc_disk_dual.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tud_msc_get_maxlun_cb PROC
;;;205    // Invoked to determine max LUN
;;;206    uint8_t tud_msc_get_maxlun_cb(void)
000000  e3a00001          MOV      r0,#1
;;;207    {
;;;208      return 1; // dual LUN
;;;209    }
000004  e12fff1e          BX       lr
;;;210    
                          ENDP

                  tud_msc_inquiry_cb PROC
;;;212    // Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
;;;213    void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
000008  e92d40f0          PUSH     {r4-r7,lr}
;;;214    {
00000c  e1a06002          MOV      r6,r2
000010  e1a07001          MOV      r7,r1
;;;215      (void) lun; // use same ID for both LUNs
;;;216    
;;;217      const char vid[] = "TinyUSB";
000014  e28f0078          ADR      r0,|L1.148|
000018  e8900006          LDM      r0,{r1,r2}
00001c  e24dd01c          SUB      sp,sp,#0x1c           ;214
000020  e58d1010          STR      r1,[sp,#0x10]
;;;218      const char pid[] = "Mass Storage";
000024  e28f0070          ADR      r0,|L1.156|
000028  e58d2014          STR      r2,[sp,#0x14]         ;217
00002c  e8901015          LDM      r0,{r0,r2,r4,r12}     ;217
;;;219      const char rev[] = "1.0";
000030  e88d1015          STM      sp,{r0,r2,r4,r12}
000034  e28f1070          ADR      r1,|L1.172|
000038  e5910000          LDR      r0,[r1,#0]
00003c  e1a05003          MOV      r5,r3                 ;214
000040  e58d0018          STR      r0,[sp,#0x18]
;;;220    
;;;221      memcpy(vendor_id  , vid, strlen(vid));
000044  e28d0010          ADD      r0,sp,#0x10
000048  ebfffffe          BL       strlen
00004c  e1a02000          MOV      r2,r0
000050  e28d1010          ADD      r1,sp,#0x10
000054  e1a00007          MOV      r0,r7
000058  ebfffffe          BL       __aeabi_memcpy
;;;222      memcpy(product_id , pid, strlen(pid));
00005c  e1a0000d          MOV      r0,sp
000060  ebfffffe          BL       strlen
000064  e1a02000          MOV      r2,r0
000068  e1a0100d          MOV      r1,sp
00006c  e1a00006          MOV      r0,r6
000070  ebfffffe          BL       __aeabi_memcpy
;;;223      memcpy(product_rev, rev, strlen(rev));
000074  e28d0018          ADD      r0,sp,#0x18
000078  ebfffffe          BL       strlen
00007c  e1a02000          MOV      r2,r0
000080  e28d1018          ADD      r1,sp,#0x18
000084  e1a00005          MOV      r0,r5
000088  ebfffffe          BL       __aeabi_memcpy
;;;224    }
00008c  e28dd01c          ADD      sp,sp,#0x1c
000090  e8bd80f0          POP      {r4-r7,pc}
                  |L1.148|
000094  54696e79          DCB      "TinyUSB",0
000098  55534200
                  |L1.156|
00009c  4d617373          DCB      "Mass Storage",0
0000a0  2053746f
0000a4  72616765
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L1.172|
0000ac  312e3000          DCB      "1.0",0
                          ENDP

                  tud_msc_test_unit_ready_cb PROC
;;;227    // return true allowing host to read/write this LUN e.g SD card inserted
;;;228    bool tud_msc_test_unit_ready_cb(uint8_t lun)
0000b0  e3a00001          MOV      r0,#1
;;;229    {
;;;230      (void) lun;
;;;231    
;;;232      return true; // RAM disk is always ready
;;;233    }
0000b4  e12fff1e          BX       lr
;;;234    
                          ENDP

                  tud_msc_capacity_cb PROC
;;;236    // Application update block count and block size
;;;237    void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size)
0000b8  e3a03903          MOV      r3,#0xc000
;;;238    {
;;;239      (void) lun;
;;;240    
;;;241      *block_count = DISK_BLOCK_NUM;
;;;242      *block_size  = DISK_BLOCK_SIZE;
0000bc  e3a00c02          MOV      r0,#0x200
0000c0  e5813000          STR      r3,[r1,#0]            ;241
0000c4  e1c200b0          STRH     r0,[r2,#0]
;;;243    }
0000c8  e12fff1e          BX       lr
;;;244    
                          ENDP

                  tud_msc_start_stop_cb PROC
;;;247    // - Start = 1 : active mode, if load_eject = 1 : load disk storage
;;;248    bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
0000cc  e3a00001          MOV      r0,#1
;;;249    {
;;;250      (void) lun;
;;;251      (void) power_condition;
;;;252    
;;;253      if ( load_eject )
;;;254      {
;;;255        if (start)
;;;256        {
;;;257          // load disk storage
;;;258        }else
;;;259        {
;;;260          // unload disk storage
;;;261        }
;;;262      }
;;;263    
;;;264      return true;
;;;265    }
0000d0  e12fff1e          BX       lr
;;;266    
                          ENDP

                  tud_msc_read10_cb PROC
;;;268    // Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
;;;269    int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize)
0000d4  e3510903          CMP      r1,#0xc000
;;;270    {
;;;271      // out of ramdisk
;;;272      if ( lba >= DISK_BLOCK_NUM ) return -1;
0000d8  23e00000          MVNCS    r0,#0
;;;273    
;;;274      uint8_t const* addr = msc_disk0[lba] /*(lun ? msc_disk1[lba] : msc_disk0[lba]) */ + offset;
;;;275      memcpy(buffer, addr, bufsize);
;;;276    
;;;277      return bufsize;
;;;278    }
0000dc  212fff1e          BXCS     lr
0000e0  e92d4010          PUSH     {r4,lr}               ;270
0000e4  e59d4008          LDR      r4,[sp,#8]            ;274
0000e8  e59f00a0          LDR      r0,|L1.400|
0000ec  e0800481          ADD      r0,r0,r1,LSL #9       ;274
0000f0  e0801002          ADD      r1,r0,r2              ;274
0000f4  e1a02004          MOV      r2,r4                 ;275
0000f8  e1a00003          MOV      r0,r3                 ;275
0000fc  ebfffffe          BL       __aeabi_memcpy
000100  e1a00004          MOV      r0,r4                 ;277
000104  e8bd8010          POP      {r4,pc}
;;;279    
                          ENDP

                  tud_msc_is_writable_cb PROC
;;;280    bool tud_msc_is_writable_cb (uint8_t lun)
000108  e3a00001          MOV      r0,#1
;;;281    {
;;;282      (void) lun;
;;;283    
;;;284    #ifdef CFG_EXAMPLE_MSC_READONLY
;;;285      return false;
;;;286    #else
;;;287      return true;
;;;288    #endif
;;;289    }
00010c  e12fff1e          BX       lr
;;;290    
                          ENDP

                  tud_msc_write10_cb PROC
;;;292    // Process data in buffer to disk's storage and return number of written bytes
;;;293    int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize)
000110  e3510903          CMP      r1,#0xc000
;;;294    {
;;;295      // out of ramdisk
;;;296      if ( lba >= DISK_BLOCK_NUM ) return -1;
000114  23e00000          MVNCS    r0,#0
;;;297    
;;;298    #ifndef CFG_EXAMPLE_MSC_READONLY
;;;299      uint8_t* addr = msc_disk0[lba] /*(lun ? msc_disk1[lba] : msc_disk0[lba]) */ + offset;
;;;300      memcpy(addr, buffer, bufsize);
;;;301    #else
;;;302      (void) lun; (void) lba; (void) offset; (void) buffer;
;;;303    #endif
;;;304    
;;;305      return bufsize;
;;;306    }
000118  212fff1e          BXCS     lr
00011c  e92d4010          PUSH     {r4,lr}               ;294
000120  e59d4008          LDR      r4,[sp,#8]            ;299
000124  e59f0064          LDR      r0,|L1.400|
000128  e0800481          ADD      r0,r0,r1,LSL #9       ;299
00012c  e0800002          ADD      r0,r0,r2              ;299
000130  e1a02004          MOV      r2,r4                 ;300
000134  e1a01003          MOV      r1,r3                 ;300
000138  ebfffffe          BL       __aeabi_memcpy
00013c  e1a00004          MOV      r0,r4                 ;305
000140  e8bd8010          POP      {r4,pc}
;;;307    
                          ENDP

                  tud_msc_scsi_cb PROC
;;;310    // - READ10 and WRITE10 has their own callbacks
;;;311    int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
000144  e92d4010          PUSH     {r4,lr}
;;;312    {
;;;313      // read10 & write10 has their own callback and MUST not be handled here
;;;314    
;;;315      void const* response = NULL;
;;;316      int32_t resplen = 0;
;;;317    
;;;318      // most scsi handled is input
;;;319      bool in_xfer = true;
;;;320    
;;;321      switch (scsi_cmd[0])
000148  e5d11000          LDRB     r1,[r1,#0]
00014c  e1a0c000          MOV      r12,r0                ;312
000150  e1a04003          MOV      r4,r3                 ;312
000154  e351001b          CMP      r1,#0x1b
000158  1351001e          CMPNE    r1,#0x1e
00015c  e3a00000          MOV      r0,#0                 ;316
000160  0a000005          BEQ      |L1.380|
;;;322      {
;;;323        case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
;;;324          // Host is about to read/write etc ... better not to disconnect disk
;;;325          resplen = 0;
;;;326        break;
;;;327    
;;;328        case SCSI_CMD_START_STOP_UNIT:
;;;329          // Host try to eject/safe remove/poweroff us. We could safely disconnect with disk storage, or go into lower power
;;;330          /* scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
;;;331            // Start bit = 0 : low power mode, if load_eject = 1 : unmount disk storage as well
;;;332            // Start bit = 1 : Ready mode, if load_eject = 1 : mount disk storage
;;;333            start_stop->start;
;;;334            start_stop->load_eject;
;;;335           */
;;;336           resplen = 0;
;;;337        break;
;;;338    
;;;339    
;;;340        default:
;;;341          // Set Sense = Invalid Command Operation
;;;342          tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
000164  e3a03000          MOV      r3,#0
000168  e3a02020          MOV      r2,#0x20
00016c  e3a01005          MOV      r1,#5
000170  e1a0000c          MOV      r0,r12
000174  ebfffffe          BL       tud_msc_set_sense
;;;343    
;;;344          // negative means error -> tinyusb could stall and/or response with failed status
;;;345          resplen = -1;
000178  e3e00000          MVN      r0,#0
                  |L1.380|
;;;346        break;
;;;347      }
;;;348    
;;;349      // return resplen must not larger than bufsize
;;;350      if ( resplen > bufsize ) resplen = bufsize;
00017c  e1500004          CMP      r0,r4
000180  ca000000          BGT      |L1.392|
;;;351    
;;;352      if ( response && (resplen > 0) )
;;;353      {
;;;354        if(in_xfer)
;;;355        {
;;;356          memcpy(buffer, response, resplen);
;;;357        }else
;;;358        {
;;;359          // SCSI output
;;;360        }
;;;361      }
;;;362    
;;;363      return resplen;
;;;364    }
000184  e8bd8010          POP      {r4,pc}
                  |L1.392|
000188  e1a00004          MOV      r0,r4                 ;350
00018c  e8bd8010          POP      {r4,pc}
;;;365    
                          ENDP

                  |L1.400|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  msc_disk0
000000  eb3c904d          DCB      0xeb,0x3c,0x90,0x4d
000004  53444f53          DCB      0x53,0x44,0x4f,0x53
000008  352e3000          DCB      0x35,0x2e,0x30,0x00
00000c  02010100          DCB      0x02,0x01,0x01,0x00
000010  01100010          DCB      0x01,0x10,0x00,0x10
000014  00f80100          DCB      0x00,0xf8,0x01,0x00
000018  01000100          DCB      0x01,0x00,0x01,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  80002934          DCB      0x80,0x00,0x29,0x34
000028  12000054          DCB      0x12,0x00,0x00,0x54
00002c  696e7955          DCB      0x69,0x6e,0x79,0x55
000030  53422030          DCB      0x53,0x42,0x20,0x30
000034  20204641          DCB      0x20,0x20,0x46,0x41
000038  54313220          DCB      0x54,0x31,0x32,0x20
00003c  20200000          DCB      0x20,0x20,0x00,0x00
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  00000000          DCB      0x00,0x00,0x00,0x00
000054  00000000          DCB      0x00,0x00,0x00,0x00
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00000000          DCB      0x00,0x00,0x00,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  00000000          DCB      0x00,0x00,0x00,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
000070  00000000          DCB      0x00,0x00,0x00,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
000078  00000000          DCB      0x00,0x00,0x00,0x00
00007c  00000000          DCB      0x00,0x00,0x00,0x00
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  00000000          DCB      0x00,0x00,0x00,0x00
00010c  00000000          DCB      0x00,0x00,0x00,0x00
000110  00000000          DCB      0x00,0x00,0x00,0x00
000114  00000000          DCB      0x00,0x00,0x00,0x00
000118  00000000          DCB      0x00,0x00,0x00,0x00
00011c  00000000          DCB      0x00,0x00,0x00,0x00
000120  00000000          DCB      0x00,0x00,0x00,0x00
000124  00000000          DCB      0x00,0x00,0x00,0x00
000128  00000000          DCB      0x00,0x00,0x00,0x00
00012c  00000000          DCB      0x00,0x00,0x00,0x00
000130  00000000          DCB      0x00,0x00,0x00,0x00
000134  00000000          DCB      0x00,0x00,0x00,0x00
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00000000          DCB      0x00,0x00,0x00,0x00
000144  00000000          DCB      0x00,0x00,0x00,0x00
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  00000000          DCB      0x00,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00000000          DCB      0x00,0x00,0x00,0x00
00016c  00000000          DCB      0x00,0x00,0x00,0x00
000170  00000000          DCB      0x00,0x00,0x00,0x00
000174  00000000          DCB      0x00,0x00,0x00,0x00
000178  00000000          DCB      0x00,0x00,0x00,0x00
00017c  00000000          DCB      0x00,0x00,0x00,0x00
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00000000          DCB      0x00,0x00,0x00,0x00
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
0001ac  00000000          DCB      0x00,0x00,0x00,0x00
0001b0  00000000          DCB      0x00,0x00,0x00,0x00
0001b4  00000000          DCB      0x00,0x00,0x00,0x00
0001b8  00000000          DCB      0x00,0x00,0x00,0x00
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  00000000          DCB      0x00,0x00,0x00,0x00
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  00000000          DCB      0x00,0x00,0x00,0x00
0001fc  000055aa          DCB      0x00,0x00,0x55,0xaa
000200  f8ffffff          DCB      0xf8,0xff,0xff,0xff
000204  0f000000          DCB      0x0f,0x00,0x00,0x00
                          %        504
000400  54696e79          DCB      0x54,0x69,0x6e,0x79
000404  55534220          DCB      0x55,0x53,0x42,0x20
000408  30202008          DCB      0x30,0x20,0x20,0x08
00040c  00000000          DCB      0x00,0x00,0x00,0x00
000410  00000000          DCB      0x00,0x00,0x00,0x00
000414  00004f6d          DCB      0x00,0x00,0x4f,0x6d
000418  65430000          DCB      0x65,0x43,0x00,0x00
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  52454144          DCB      0x52,0x45,0x41,0x44
000424  4d453020          DCB      0x4d,0x45,0x30,0x20
000428  54585420          DCB      0x54,0x58,0x54,0x20
00042c  00c6526d          DCB      0x00,0xc6,0x52,0x6d
000430  65436543          DCB      0x65,0x43,0x65,0x43
000434  0000886d          DCB      0x00,0x00,0x88,0x6d
000438  65430200          DCB      0x65,0x43,0x02,0x00
00043c  97000000          DCB      0x97,0x00,0x00,0x00
                          %        448
000600  4c554e30          DCB      0x4c,0x55,0x4e,0x30
000604  3a205468          DCB      0x3a,0x20,0x54,0x68
000608  69732069          DCB      0x69,0x73,0x20,0x69
00060c  73207469          DCB      0x73,0x20,0x74,0x69
000610  6e797573          DCB      0x6e,0x79,0x75,0x73
000614  62277320          DCB      0x62,0x27,0x73,0x20
000618  4d617373          DCB      0x4d,0x61,0x73,0x73
00061c  53746f72          DCB      0x53,0x74,0x6f,0x72
000620  61676520          DCB      0x61,0x67,0x65,0x20
000624  436c6173          DCB      0x43,0x6c,0x61,0x73
000628  73206465          DCB      0x73,0x20,0x64,0x65
00062c  6d6f2e0d          DCB      0x6d,0x6f,0x2e,0x0d
000630  0a0d0a49          DCB      0x0a,0x0d,0x0a,0x49
000634  6620796f          DCB      0x66,0x20,0x79,0x6f
000638  75206669          DCB      0x75,0x20,0x66,0x69
00063c  6e642061          DCB      0x6e,0x64,0x20,0x61
000640  6e792062          DCB      0x6e,0x79,0x20,0x62
000644  75677320          DCB      0x75,0x67,0x73,0x20
000648  6f722067          DCB      0x6f,0x72,0x20,0x67
00064c  65742061          DCB      0x65,0x74,0x20,0x61
000650  6e792071          DCB      0x6e,0x79,0x20,0x71
000654  75657374          DCB      0x75,0x65,0x73,0x74
000658  696f6e73          DCB      0x69,0x6f,0x6e,0x73
00065c  2c206665          DCB      0x2c,0x20,0x66,0x65
000660  656c2066          DCB      0x65,0x6c,0x20,0x66
000664  72656520          DCB      0x72,0x65,0x65,0x20
000668  746f2066          DCB      0x74,0x6f,0x20,0x66
00066c  696c6520          DCB      0x69,0x6c,0x65,0x20
000670  616e0d0a          DCB      0x61,0x6e,0x0d,0x0a
000674  69737375          DCB      0x69,0x73,0x73,0x75
000678  65206174          DCB      0x65,0x20,0x61,0x74
00067c  20676974          DCB      0x20,0x67,0x69,0x74
000680  6875622e          DCB      0x68,0x75,0x62,0x2e
000684  636f6d2f          DCB      0x63,0x6f,0x6d,0x2f
000688  68617468          DCB      0x68,0x61,0x74,0x68
00068c  6163682f          DCB      0x61,0x63,0x68,0x2f
000690  74696e79          DCB      0x74,0x69,0x6e,0x79
000694  75736200          DCB      0x75,0x73,0x62,0x00
                          %        25164136
