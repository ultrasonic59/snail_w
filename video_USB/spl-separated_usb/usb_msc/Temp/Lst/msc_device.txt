; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\msc_device.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\msc_device.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\msc_device.crf ..\tinyusb\src\class\msc\msc_device.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tud_msc_set_sense PROC
;;;230    //--------------------------------------------------------------------+
;;;231    bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
000000  e59f0324          LDR      r0,|L1.812|
;;;232    {
;;;233      (void) lun;
;;;234    
;;;235      _mscd_itf.sense_key           = sense_key;
000004  e5c0103c          STRB     r1,[r0,#0x3c]  ; _mscd_itf
;;;236      _mscd_itf.add_sense_code      = add_sense_code;
000008  e5c0203d          STRB     r2,[r0,#0x3d]  ; _mscd_itf
;;;237      _mscd_itf.add_sense_qualifier = add_sense_qualifier;
00000c  e5c0303e          STRB     r3,[r0,#0x3e]  ; _mscd_itf
;;;238    
;;;239      return true;
000010  e3a00001          MOV      r0,#1
;;;240    }
000014  e12fff1e          BX       lr
;;;241    
                          ENDP

                  fail_scsi_op PROC
;;;105    
;;;106    static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
000018  e92d00f0          PUSH     {r4-r7}
;;;107    {
;;;108      msc_cbw_t const * p_cbw = &p_msc->cbw;
;;;109      msc_csw_t       * p_csw = &p_msc->csw;
;;;110    
;;;111      p_csw->status       = status;
00001c  e5c1202c          STRB     r2,[r1,#0x2c]
;;;112      p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
000020  e5912008          LDR      r2,[r1,#8]
000024  e5914038          LDR      r4,[r1,#0x38]
;;;113      p_msc->stage        = MSC_STAGE_STATUS;
000028  e3a0c002          MOV      r12,#2
00002c  e0422004          SUB      r2,r2,r4              ;112
000030  e1a04422          LSR      r4,r2,#8              ;112
000034  e5c12028          STRB     r2,[r1,#0x28]         ;112
000038  e1a05822          LSR      r5,r2,#16             ;112
00003c  e5c14029          STRB     r4,[r1,#0x29]         ;112
000040  e1a06c22          LSR      r6,r2,#24             ;112
000044  e5c1502a          STRB     r5,[r1,#0x2a]         ;112
000048  e5c1602b          STRB     r6,[r1,#0x2b]         ;112
00004c  e5c1c030          STRB     r12,[r1,#0x30]
;;;114    
;;;115      // failed but sense key is not set: default to Illegal Request
;;;116      if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
000050  e5d1203c          LDRB     r2,[r1,#0x3c]
000054  e2813020          ADD      r3,r1,#0x20           ;109
000058  e3520000          CMP      r2,#0
00005c  1a000006          BNE      |L1.124|
000060  e59f22c4          LDR      r2,|L1.812|
000064  e3a05005          MOV      r5,#5
000068  e3a04020          MOV      r4,#0x20
00006c  e5c2503c          STRB     r5,[r2,#0x3c]  ; _mscd_itf
000070  e3a0c000          MOV      r12,#0
000074  e5c2403d          STRB     r4,[r2,#0x3d]  ; _mscd_itf
000078  e5c2c03e          STRB     r12,[r2,#0x3e]  ; _mscd_itf
                  |L1.124|
;;;117    
;;;118      // If there is data stage and not yet complete, stall it
;;;119      if ( p_cbw->total_bytes && p_csw->data_residue )
00007c  e5d15008          LDRB     r5,[r1,#8]
000080  e5d1c009          LDRB     r12,[r1,#9]
000084  e5d1400a          LDRB     r4,[r1,#0xa]
000088  e5d1600b          LDRB     r6,[r1,#0xb]
00008c  e185240c          ORR      r2,r5,r12,LSL #8
000090  e1822804          ORR      r2,r2,r4,LSL #16
000094  e1922c06          ORRS     r2,r2,r6,LSL #24
;;;120      {
;;;121        if ( is_data_in(p_cbw->dir) )
;;;122        {
;;;123          usbd_edpt_stall(rhport, p_msc->ep_in);
;;;124        }
;;;125        else
;;;126        {
;;;127          usbd_edpt_stall(rhport, p_msc->ep_out);
;;;128        }
;;;129      }
;;;130    }
000098  08bd00f0          POPEQ    {r4-r7}
00009c  012fff1e          BXEQ     lr
0000a0  e5d34008          LDRB     r4,[r3,#8]            ;119
0000a4  e2835008          ADD      r5,r3,#8              ;119
0000a8  e5d33009          LDRB     r3,[r3,#9]            ;119
0000ac  e5d5c002          LDRB     r12,[r5,#2]           ;119
0000b0  e5d55003          LDRB     r5,[r5,#3]            ;119
0000b4  e1842403          ORR      r2,r4,r3,LSL #8       ;119
0000b8  e182280c          ORR      r2,r2,r12,LSL #16     ;119
0000bc  e1922c05          ORRS     r2,r2,r5,LSL #24      ;119
0000c0  08bd00f0          POPEQ    {r4-r7}
0000c4  012fff1e          BXEQ     lr
0000c8  e5d1200c          LDRB     r2,[r1,#0xc]          ;121
0000cc  e3120080          TST      r2,#0x80              ;121
0000d0  0a000002          BEQ      |L1.224|
0000d4  e5d1102e          LDRB     r1,[r1,#0x2e]         ;123
0000d8  e8bd00f0          POP      {r4-r7}               ;123
0000dc  eafffffe          B        usbd_edpt_stall
                  |L1.224|
0000e0  e5d1102f          LDRB     r1,[r1,#0x2f]         ;127
0000e4  e8bd00f0          POP      {r4-r7}               ;127
0000e8  eafffffe          B        usbd_edpt_stall
;;;131    
                          ENDP

                  rdwr10_validate_cmd PROC
;;;157    
;;;158    uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
0000ec  e92d4070          PUSH     {r4-r6,lr}
;;;159    {
0000f0  e5d02017          LDRB     r2,[r0,#0x17]
0000f4  e5d01016          LDRB     r1,[r0,#0x16]
0000f8  e3e03cff          MVN      r3,#0xff00
;;;160      uint8_t status = MSC_CSW_STATUS_PASSED;
;;;161      uint16_t const block_count = rdwr10_get_blockcount(cbw);
;;;162    
;;;163      if ( cbw->total_bytes == 0 )
0000fc  e5d06008          LDRB     r6,[r0,#8]
000100  e1811402          ORR      r1,r1,r2,LSL #8
000104  e0212861          EOR      r2,r1,r1,ROR #16
000108  e0032422          AND      r2,r3,r2,LSR #8
00010c  e5d0c009          LDRB     r12,[r0,#9]
000110  e0221461          EOR      r1,r2,r1,ROR #8
000114  e5d0500a          LDRB     r5,[r0,#0xa]
000118  e3a04000          MOV      r4,#0                 ;160
00011c  e5d0300b          LDRB     r3,[r0,#0xb]
000120  e1842006          ORR      r2,r4,r6
000124  e182240c          ORR      r2,r2,r12,LSL #8
000128  e1822805          ORR      r2,r2,r5,LSL #16
00012c  e1922c03          ORRS     r2,r2,r3,LSL #24
000130  e1a01821          LSR      r1,r1,#16
000134  0a000005          BEQ      |L1.336|
;;;164      {
;;;165        if ( block_count )
;;;166        {
;;;167          TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
;;;168          status = MSC_CSW_STATUS_PHASE_ERROR;
;;;169        }else
;;;170        {
;;;171          // no data transfer, only exist in complaint test suite
;;;172        }
;;;173      }else
;;;174      {
;;;175        if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
000138  e5d0300f          LDRB     r3,[r0,#0xf]
00013c  e3530028          CMP      r3,#0x28
000140  0a000005          BEQ      |L1.348|
;;;176        {
;;;177          TU_LOG(MSC_DEBUG, "  SCSI case 10 (Ho <> Di)\r\n");
;;;178          status = MSC_CSW_STATUS_PHASE_ERROR;
;;;179        }
;;;180        else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
000144  e353002a          CMP      r3,#0x2a
000148  0a000007          BEQ      |L1.364|
00014c  ea00000b          B        |L1.384|
                  |L1.336|
000150  e3510000          CMP      r1,#0                 ;165
000154  1a000007          BNE      |L1.376|
000158  ea00000f          B        |L1.412|
                  |L1.348|
00015c  e5d0000c          LDRB     r0,[r0,#0xc]          ;175
000160  e3100080          TST      r0,#0x80              ;175
000164  1a000005          BNE      |L1.384|
000168  ea000002          B        |L1.376|
                  |L1.364|
00016c  e5d0000c          LDRB     r0,[r0,#0xc]
000170  e3100080          TST      r0,#0x80
000174  0a000001          BEQ      |L1.384|
                  |L1.376|
;;;181        {
;;;182          TU_LOG(MSC_DEBUG, "  SCSI case 8 (Hi <> Do)\r\n");
;;;183          status = MSC_CSW_STATUS_PHASE_ERROR;
000178  e3a04002          MOV      r4,#2
00017c  ea000006          B        |L1.412|
                  |L1.384|
;;;184        }
;;;185        else if ( 0 == block_count )
000180  e3510000          CMP      r1,#0
;;;186        {
;;;187          TU_LOG(MSC_DEBUG, "  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
;;;188          status =  MSC_CSW_STATUS_FAILED;
000184  03a04001          MOVEQ    r4,#1
000188  0a000003          BEQ      |L1.412|
00018c  e1a00002          MOV      r0,r2                 ;185
;;;189        }
;;;190        else if ( cbw->total_bytes / block_count == 0 )
000190  ebfffffe          BL       __aeabi_uidivmod
000194  e3500000          CMP      r0,#0
000198  0afffff6          BEQ      |L1.376|
                  |L1.412|
;;;191        {
;;;192          TU_LOG(MSC_DEBUG, " Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
;;;193          status = MSC_CSW_STATUS_PHASE_ERROR;
;;;194        }
;;;195      }
;;;196    
;;;197      return status;
00019c  e1a00004          MOV      r0,r4
;;;198    }
0001a0  e8bd8070          POP      {r4-r6,pc}
;;;199    
                          ENDP

                  mscd_init PROC
;;;250    //--------------------------------------------------------------------+
;;;251    void mscd_init(void)
0001a4  e59f0180          LDR      r0,|L1.812|
;;;252    {
;;;253      tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
0001a8  e3a01000          MOV      r1,#0
0001ac  e5801000          STR      r1,[r0,#0]  ; _mscd_itf
0001b0  e5801004          STR      r1,[r0,#4]  ; _mscd_itf
0001b4  e5801008          STR      r1,[r0,#8]  ; _mscd_itf
0001b8  e580100c          STR      r1,[r0,#0xc]  ; _mscd_itf
0001bc  e5801010          STR      r1,[r0,#0x10]  ; _mscd_itf
0001c0  e5801014          STR      r1,[r0,#0x14]  ; _mscd_itf
0001c4  e5801018          STR      r1,[r0,#0x18]  ; _mscd_itf
0001c8  e580101c          STR      r1,[r0,#0x1c]  ; _mscd_itf
0001cc  e5801020          STR      r1,[r0,#0x20]  ; _mscd_itf
0001d0  e5801024          STR      r1,[r0,#0x24]  ; _mscd_itf
0001d4  e5801028          STR      r1,[r0,#0x28]  ; _mscd_itf
0001d8  e580102c          STR      r1,[r0,#0x2c]  ; _mscd_itf
0001dc  e5801030          STR      r1,[r0,#0x30]  ; _mscd_itf
0001e0  e5801034          STR      r1,[r0,#0x34]  ; _mscd_itf
0001e4  e5801038          STR      r1,[r0,#0x38]  ; _mscd_itf
0001e8  e580103c          STR      r1,[r0,#0x3c]  ; _mscd_itf
;;;254    }
0001ec  e12fff1e          BX       lr
;;;255    
                          ENDP

                  mscd_reset PROC
;;;256    void mscd_reset(uint8_t rhport)
0001f0  e59f0134          LDR      r0,|L1.812|
;;;257    {
;;;258      (void) rhport;
;;;259      tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
0001f4  e3a01000          MOV      r1,#0
0001f8  e5801000          STR      r1,[r0,#0]  ; _mscd_itf
0001fc  e5801004          STR      r1,[r0,#4]  ; _mscd_itf
000200  e5801008          STR      r1,[r0,#8]  ; _mscd_itf
000204  e580100c          STR      r1,[r0,#0xc]  ; _mscd_itf
000208  e5801010          STR      r1,[r0,#0x10]  ; _mscd_itf
00020c  e5801014          STR      r1,[r0,#0x14]  ; _mscd_itf
000210  e5801018          STR      r1,[r0,#0x18]  ; _mscd_itf
000214  e580101c          STR      r1,[r0,#0x1c]  ; _mscd_itf
000218  e5801020          STR      r1,[r0,#0x20]  ; _mscd_itf
00021c  e5801024          STR      r1,[r0,#0x24]  ; _mscd_itf
000220  e5801028          STR      r1,[r0,#0x28]  ; _mscd_itf
000224  e580102c          STR      r1,[r0,#0x2c]  ; _mscd_itf
000228  e5801030          STR      r1,[r0,#0x30]  ; _mscd_itf
00022c  e5801034          STR      r1,[r0,#0x34]  ; _mscd_itf
000230  e5801038          STR      r1,[r0,#0x38]  ; _mscd_itf
000234  e580103c          STR      r1,[r0,#0x3c]  ; _mscd_itf
;;;260    }
000238  e12fff1e          BX       lr
;;;261    
                          ENDP

                  mscd_open PROC
;;;262    uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
00023c  e92d4030          PUSH     {r4,r5,lr}
;;;263    {
000240  e1a05000          MOV      r5,r0
;;;264      // only support SCSI's BOT protocol
;;;265      TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
000244  e5d10005          LDRB     r0,[r1,#5]
000248  e24dd00c          SUB      sp,sp,#0xc            ;263
00024c  e3500008          CMP      r0,#8
000250  05d10006          LDRBEQ   r0,[r1,#6]
000254  03500006          CMPEQ    r0,#6
000258  05d10007          LDRBEQ   r0,[r1,#7]
00025c  03500050          CMPEQ    r0,#0x50
000260  13a00000          MOVNE    r0,#0
000264  128dd00c          ADDNE    sp,sp,#0xc            ;263
;;;266                MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
;;;267                MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);
;;;268    
;;;269      // msc driver length is fixed
;;;270      uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
;;;271    
;;;272      // Max length must be at least 1 interface + 2 endpoints
;;;273      TU_ASSERT(max_len >= drv_len, 0);
;;;274    
;;;275      mscd_interface_t * p_msc = &_mscd_itf;
;;;276      p_msc->itf_num = itf_desc->bInterfaceNumber;
;;;277    
;;;278      // Open endpoint pair
;;;279      TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
;;;280    
;;;281      // Prepare for Command Block Wrapper
;;;282      TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
;;;283    
;;;284      return drv_len;
;;;285    }
000268  18bd8030          POPNE    {r4,r5,pc}
00026c  e3520017          CMP      r2,#0x17              ;273
000270  2a000006          BCS      |L1.656|
000274  e59f20b4          LDR      r2,|L1.816|
000278  e59f10b4          LDR      r1,|L1.820|
00027c  e28f00b4          ADR      r0,|L1.824|
000280  ebfffffe          BL       __2printf
000284  e3a00000          MOV      r0,#0                 ;273
000288  e28dd00c          ADD      sp,sp,#0xc            ;273
00028c  e8bd8030          POP      {r4,r5,pc}
                  |L1.656|
000290  e5d10002          LDRB     r0,[r1,#2]            ;276
000294  e59f4090          LDR      r4,|L1.812|
000298  e3a03002          MOV      r3,#2                 ;279
00029c  e5c4002d          STRB     r0,[r4,#0x2d]         ;276
0002a0  e5d10000          LDRB     r0,[r1,#0]            ;276
0002a4  e284202e          ADD      r2,r4,#0x2e           ;279
0002a8  e0811000          ADD      r1,r1,r0              ;279
0002ac  e284002f          ADD      r0,r4,#0x2f           ;279
0002b0  e88d0005          STM      sp,{r0,r2}            ;279
0002b4  e1a02003          MOV      r2,r3                 ;279
0002b8  e1a00005          MOV      r0,r5                 ;279
0002bc  ebfffffe          BL       usbd_open_edpt_pair
0002c0  e3500000          CMP      r0,#0                 ;279
0002c4  0a000011          BEQ      |L1.784|
0002c8  e3a01000          MOV      r1,#0                 ;279
0002cc  e5c41030          STRB     r1,[r4,#0x30]         ;279
0002d0  e5d4102f          LDRB     r1,[r4,#0x2f]         ;279
0002d4  e1a00005          MOV      r0,r5                 ;282
0002d8  e1a02004          MOV      r2,r4                 ;282
0002dc  e3a0301f          MOV      r3,#0x1f              ;282
0002e0  ebfffffe          BL       usbd_edpt_xfer
0002e4  e3500000          CMP      r0,#0                 ;282
0002e8  13a00017          MOVNE    r0,#0x17              ;284
0002ec  128dd00c          ADDNE    sp,sp,#0xc            ;282
0002f0  18bd8030          POPNE    {r4,r5,pc}
0002f4  e59f2054          LDR      r2,|L1.848|
0002f8  e59f1034          LDR      r1,|L1.820|
0002fc  e28f0034          ADR      r0,|L1.824|
000300  ebfffffe          BL       __2printf
000304  e3a00017          MOV      r0,#0x17              ;282
000308  e28dd00c          ADD      sp,sp,#0xc            ;282
00030c  e8bd8030          POP      {r4,r5,pc}
                  |L1.784|
000310  e59f203c          LDR      r2,|L1.852|
000314  e59f1018          LDR      r1,|L1.820|
000318  e28f0018          ADR      r0,|L1.824|
00031c  ebfffffe          BL       __2printf
000320  e3a00000          MOV      r0,#0                 ;279
000324  e28dd00c          ADD      sp,sp,#0xc            ;279
000328  e8bd8030          POP      {r4,r5,pc}
                  |L1.812|
                          DCD      ||.bss||
                  |L1.816|
                          DCD      0x00000111
                  |L1.820|
                          DCD      ||.constdata||+0x10
                  |L1.824|
000338  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
00033c  643a2041
000340  53534552
000344  54204641
000348  494c4544
00034c  0d0a00  
00034f  00                DCB      0
                  |L1.848|
                          DCD      0x0000011a
                  |L1.852|
                          DCD      0x00000117
                          ENDP

                  mscd_control_xfer_cb PROC
;;;300    // return false to stall control endpoint (e.g unsupported request)
;;;301    bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
000358  e3510001          CMP      r1,#1
;;;302    {
;;;303      // nothing to do with DATA & ACK stage
;;;304      if (stage != CONTROL_STAGE_SETUP) return true;
00035c  13a00001          MOVNE    r0,#1
;;;305    
;;;306      mscd_interface_t* p_msc = &_mscd_itf;
;;;307    
;;;308      // Clear Endpoint Feature (stall) for recovery
;;;309      if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
;;;310           TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
;;;311           TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
;;;312           TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
;;;313      {
;;;314        uint8_t const ep_addr = tu_u16_low(request->wIndex);
;;;315    
;;;316        if ( p_msc->stage == MSC_STAGE_NEED_RESET )
;;;317        {
;;;318          // reset recovery is required to recover from this stage
;;;319          // Clear Stall request cannot resolve this -> continue to stall endpoint
;;;320          usbd_edpt_stall(rhport, ep_addr);
;;;321        }
;;;322        else
;;;323        {
;;;324          if ( ep_addr == p_msc->ep_in )
;;;325          {
;;;326            if ( p_msc->stage == MSC_STAGE_STATUS )
;;;327            {
;;;328              // resume sending SCSI status if we are in this stage previously before stalled
;;;329              TU_ASSERT( send_csw(rhport, p_msc) );
;;;330            }
;;;331          }
;;;332          else if ( ep_addr == p_msc->ep_out )
;;;333          {
;;;334            if ( p_msc->stage == MSC_STAGE_CMD )
;;;335            {
;;;336              // part of reset recovery (probably due to invalid CBW) -> prepare for new command
;;;337              // Note: skip if already queued previously
;;;338              if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
;;;339              {
;;;340                TU_ASSERT( prepare_cbw(rhport, p_msc) );
;;;341              }
;;;342            }
;;;343          }
;;;344        }
;;;345    
;;;346        return true;
;;;347      }
;;;348    
;;;349      // From this point only handle class request only
;;;350      TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
;;;351    
;;;352      switch ( request->bRequest )
;;;353      {
;;;354        case MSC_REQ_RESET:
;;;355          TU_LOG(MSC_DEBUG, "  MSC BOT Reset\r\n");
;;;356          TU_VERIFY(request->wValue == 0 && request->wLength == 0);
;;;357    
;;;358          // driver state reset
;;;359          proc_bot_reset(p_msc);
;;;360    
;;;361          tud_control_status(rhport, request);
;;;362        break;
;;;363    
;;;364        case MSC_REQ_GET_MAX_LUN:
;;;365        {
;;;366          TU_LOG(MSC_DEBUG, "  MSC Get Max Lun\r\n");
;;;367          TU_VERIFY(request->wValue == 0 && request->wLength == 1);
;;;368    
;;;369          uint8_t maxlun = 1;
;;;370          if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
;;;371          TU_VERIFY(maxlun);
;;;372    
;;;373          // MAX LUN is minus 1 by specs
;;;374          maxlun--;
;;;375    
;;;376          tud_control_xfer(rhport, request, &maxlun, 1);
;;;377        }
;;;378        break;
;;;379    
;;;380        default: return false; // stall unsupported request
;;;381      }
;;;382    
;;;383      return true;
;;;384    }
000360  112fff1e          BXNE     lr
000364  e92d40f8          PUSH     {r3-r7,lr}            ;302
000368  e5d21000          LDRB     r1,[r2,#0]            ;309
00036c  e1a05002          MOV      r5,r2                 ;302
000370  e51f404c          LDR      r4,|L1.812|
000374  e201207f          AND      r2,r1,#0x7f           ;309
000378  e3520002          CMP      r2,#2                 ;309
00037c  05d52001          LDRBEQ   r2,[r5,#1]            ;309
000380  e1a07000          MOV      r7,r0                 ;302
000384  e3a06000          MOV      r6,#0                 ;306
000388  03520001          CMPEQ    r2,#1                 ;309
00038c  e3a00001          MOV      r0,#1                 ;302
000390  1a000003          BNE      |L1.932|
000394  e5d52003          LDRB     r2,[r5,#3]            ;309
000398  e5d53002          LDRB     r3,[r5,#2]            ;309
00039c  e1932402          ORRS     r2,r3,r2,LSL #8       ;309
0003a0  0a000008          BEQ      |L1.968|
                  |L1.932|
0003a4  e1a01c81          LSL      r1,r1,#25             ;350
0003a8  e1500f21          CMP      r0,r1,LSR #30         ;350
0003ac  1a000060          BNE      |L1.1332|
0003b0  e5d51001          LDRB     r1,[r5,#1]            ;352
0003b4  e35100fe          CMP      r1,#0xfe              ;352
0003b8  0a000054          BEQ      |L1.1296|
0003bc  e35100ff          CMP      r1,#0xff              ;352
0003c0  0a000040          BEQ      |L1.1224|
0003c4  ea00005a          B        |L1.1332|
                  |L1.968|
0003c8  e5d50005          LDRB     r0,[r5,#5]            ;314
0003cc  e5d51004          LDRB     r1,[r5,#4]            ;314
0003d0  e1a02400          LSL      r2,r0,#8              ;314
0003d4  e5d40030          LDRB     r0,[r4,#0x30]         ;316
0003d8  e1811002          ORR      r1,r1,r2              ;314
0003dc  e20110ff          AND      r1,r1,#0xff           ;314
0003e0  e3500004          CMP      r0,#4                 ;316
0003e4  0a000005          BEQ      |L1.1024|
0003e8  e5d4202e          LDRB     r2,[r4,#0x2e]         ;324
0003ec  e1520001          CMP      r2,r1                 ;324
0003f0  1a000018          BNE      |L1.1112|
0003f4  e3500002          CMP      r0,#2                 ;326
0003f8  1a00005f          BNE      |L1.1404|
0003fc  ea000002          B        |L1.1036|
                  |L1.1024|
000400  e1a00007          MOV      r0,r7                 ;320
000404  ebfffffe          BL       usbd_edpt_stall
000408  ea00005b          B        |L1.1404|
                  |L1.1036|
00040c  e5941008          LDR      r1,[r4,#8]            ;329
000410  e5943038          LDR      r3,[r4,#0x38]         ;329
000414  e3a02003          MOV      r2,#3                 ;329
000418  e0411003          SUB      r1,r1,r3              ;329
00041c  e5c42030          STRB     r2,[r4,#0x30]         ;329
000420  e5841028          STR      r1,[r4,#0x28]         ;329
000424  e5d4102e          LDRB     r1,[r4,#0x2e]         ;329
000428  e1a00007          MOV      r0,r7                 ;329
00042c  e3a0300d          MOV      r3,#0xd               ;329
000430  e2842020          ADD      r2,r4,#0x20           ;329
000434  ebfffffe          BL       usbd_edpt_xfer
000438  e3500000          CMP      r0,#0                 ;329
00043c  1a00004e          BNE      |L1.1404|
000440  e59f2bbc          LDR      r2,|L1.4100|
000444  e59f1bbc          LDR      r1,|L1.4104|
000448  e24f0f46          ADR      r0,|L1.824|
00044c  ebfffffe          BL       __2printf
000450  e3a00000          MOV      r0,#0                 ;329
000454  e8bd80f8          POP      {r3-r7,pc}
                  |L1.1112|
000458  e5d4502f          LDRB     r5,[r4,#0x2f]         ;332
00045c  e1550001          CMP      r5,r1                 ;332
000460  03500000          CMPEQ    r0,#0                 ;334
000464  1a000044          BNE      |L1.1404|
000468  e1a01005          MOV      r1,r5                 ;332
00046c  e1a00007          MOV      r0,r7                 ;332
000470  ebfffffe          BL       usbd_edpt_busy
000474  e3500000          CMP      r0,#0                 ;332
000478  1a00003f          BNE      |L1.1404|
00047c  e1a01005          MOV      r1,r5                 ;332
000480  e1a00007          MOV      r0,r7                 ;332
000484  ebfffffe          BL       usbd_edpt_stalled
000488  e3500000          CMP      r0,#0                 ;332
00048c  1a00003a          BNE      |L1.1404|
000490  e5c46030          STRB     r6,[r4,#0x30]         ;332
000494  e5d4102f          LDRB     r1,[r4,#0x2f]         ;332
000498  e1a00007          MOV      r0,r7                 ;340
00049c  e1a02004          MOV      r2,r4                 ;340
0004a0  e3a0301f          MOV      r3,#0x1f              ;340
0004a4  ebfffffe          BL       usbd_edpt_xfer
0004a8  e3500000          CMP      r0,#0                 ;340
0004ac  1a000032          BNE      |L1.1404|
0004b0  e59f1b50          LDR      r1,|L1.4104|
0004b4  e3a02f55          MOV      r2,#0x154             ;340
0004b8  e24f0f62          ADR      r0,|L1.824|
0004bc  ebfffffe          BL       __2printf
0004c0  e3a00000          MOV      r0,#0                 ;340
0004c4  e8bd80f8          POP      {r3-r7,pc}
                  |L1.1224|
0004c8  e5d50003          LDRB     r0,[r5,#3]            ;356
0004cc  e5d51002          LDRB     r1,[r5,#2]            ;356
0004d0  e1910400          ORRS     r0,r1,r0,LSL #8       ;356
0004d4  1a000016          BNE      |L1.1332|
0004d8  e5d50007          LDRB     r0,[r5,#7]            ;356
0004dc  e5d51006          LDRB     r1,[r5,#6]            ;356
0004e0  e1910400          ORRS     r0,r1,r0,LSL #8       ;356
0004e4  1a000012          BNE      |L1.1332|
0004e8  e5c46030          STRB     r6,[r4,#0x30]         ;356
0004ec  e5846034          STR      r6,[r4,#0x34]         ;356
0004f0  e5846038          STR      r6,[r4,#0x38]         ;356
0004f4  e5c4603c          STRB     r6,[r4,#0x3c]         ;356
0004f8  e5c4603d          STRB     r6,[r4,#0x3d]         ;356
0004fc  e1a01005          MOV      r1,r5                 ;361
000500  e1a00007          MOV      r0,r7                 ;361
000504  e5c4603e          STRB     r6,[r4,#0x3e]         ;361
000508  ebfffffe          BL       tud_control_status
00050c  ea00001a          B        |L1.1404|
                  |L1.1296|
000510  e5d51003          LDRB     r1,[r5,#3]            ;367
000514  e5d52002          LDRB     r2,[r5,#2]            ;367
000518  e1921401          ORRS     r1,r2,r1,LSL #8       ;367
00051c  1a000004          BNE      |L1.1332|
000520  e5d51007          LDRB     r1,[r5,#7]            ;367
000524  e5d52006          LDRB     r2,[r5,#6]            ;367
000528  e1821401          ORR      r1,r2,r1,LSL #8       ;367
00052c  e3510001          CMP      r1,#1                 ;367
000530  0a000001          BEQ      |L1.1340|
                  |L1.1332|
000534  e3a00000          MOV      r0,#0                 ;380
000538  e8bd80f8          POP      {r3-r7,pc}
                  |L1.1340|
00053c  e59f1ac8          LDR      r1,|L1.4108|
000540  e5cd0000          STRB     r0,[sp,#0]            ;369
000544  e3510000          CMP      r1,#0                 ;370
000548  0a000003          BEQ      |L1.1372|
00054c  ebfffffe          BL       tud_msc_get_maxlun_cb
000550  e3500000          CMP      r0,#0                 ;371
000554  e5cd0000          STRB     r0,[sp,#0]            ;370
000558  08bd80f8          POPEQ    {r3-r7,pc}
                  |L1.1372|
00055c  e20000ff          AND      r0,r0,#0xff           ;374
000560  e2400001          SUB      r0,r0,#1              ;374
000564  e5cd0000          STRB     r0,[sp,#0]            ;374
000568  e3a03001          MOV      r3,#1                 ;376
00056c  e1a0200d          MOV      r2,sp                 ;376
000570  e1a01005          MOV      r1,r5                 ;376
000574  e1a00007          MOV      r0,r7                 ;376
000578  ebfffffe          BL       tud_control_xfer
                  |L1.1404|
00057c  e3a00001          MOV      r0,#1                 ;383
000580  e8bd80f8          POP      {r3-r7,pc}
;;;385    
                          ENDP

                  mscd_xfer_cb PROC
;;;386    bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
000584  e92d4ff0          PUSH     {r4-r11,lr}
;;;387    {
;;;388      (void) event;
;;;389    
;;;390      mscd_interface_t* p_msc = &_mscd_itf;
000588  e51f4264          LDR      r4,|L1.812|
00058c  e1a07000          MOV      r7,r0                 ;387
;;;391      msc_cbw_t const * p_cbw = &p_msc->cbw;
;;;392      msc_csw_t       * p_csw = &p_msc->csw;
;;;393    
;;;394      switch (p_msc->stage)
000590  e5d45030          LDRB     r5,[r4,#0x30]
000594  e24dd02c          SUB      sp,sp,#0x2c           ;387
000598  e1a02001          MOV      r2,r1                 ;387
00059c  e3550000          CMP      r5,#0
0005a0  e2846000          ADD      r6,r4,#0              ;390
0005a4  e3a0a002          MOV      r10,#2
0005a8  e2840020          ADD      r0,r4,#0x20           ;392
0005ac  e3e0bcff          MVN      r11,#0xff00           ;392
0005b0  e3a0c001          MOV      r12,#1
0005b4  0a000009          BEQ      |L1.1504|
0005b8  e2840000          ADD      r0,r4,#0              ;390
0005bc  e5d0900d          LDRB     r9,[r0,#0xd]          ;390
0005c0  e5d0100f          LDRB     r1,[r0,#0xf]          ;390
0005c4  e3550001          CMP      r5,#1
0005c8  0a000196          BEQ      |L1.3112|
0005cc  e3550002          CMP      r5,#2
0005d0  0a000266          BEQ      |L1.3952|
0005d4  e3550003          CMP      r5,#3
0005d8  0a000236          BEQ      |L1.3768|
0005dc  ea00027e          B        |L1.4060|
                  |L1.1504|
;;;395      {
;;;396        case MSC_STAGE_CMD:
;;;397          //------------- new CBW received -------------//
;;;398          // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
;;;399          if(ep_addr != p_msc->ep_out) return true;
0005e0  e5d4102f          LDRB     r1,[r4,#0x2f]
0005e4  e1510002          CMP      r1,r2
0005e8  1a00027b          BNE      |L1.4060|
;;;400    
;;;401          if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
0005ec  e353001f          CMP      r3,#0x1f
0005f0  1a000003          BNE      |L1.1540|
0005f4  e5941000          LDR      r1,[r4,#0]
0005f8  e59f2a10          LDR      r2,|L1.4112|
0005fc  e1510002          CMP      r1,r2
000600  0a000008          BEQ      |L1.1576|
                  |L1.1540|
;;;402          {
;;;403            TU_LOG(MSC_DEBUG, "  SCSI CBW is not valid\r\n");
;;;404    
;;;405            // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
;;;406            p_msc->stage = MSC_STAGE_NEED_RESET;
000604  e3a00004          MOV      r0,#4
000608  e5c40030          STRB     r0,[r4,#0x30]
;;;407    
;;;408            // invalid CBW stall both endpoints
;;;409            usbd_edpt_stall(rhport, p_msc->ep_in);
00060c  e5d4102e          LDRB     r1,[r4,#0x2e]
000610  e1a00007          MOV      r0,r7
000614  ebfffffe          BL       usbd_edpt_stall
;;;410            usbd_edpt_stall(rhport, p_msc->ep_out);
000618  e5d4102f          LDRB     r1,[r4,#0x2f]
00061c  e1a00007          MOV      r0,r7
000620  ebfffffe          BL       usbd_edpt_stall
;;;411    
;;;412            return false;
000624  ea000273          B        |L1.4088|
                  |L1.1576|
;;;413          }
;;;414    
;;;415          TU_LOG(MSC_DEBUG, "  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
;;;416          //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);
;;;417    
;;;418          p_csw->signature    = MSC_CSW_SIGNATURE;
000628  e59f29e4          LDR      r2,|L1.4116|
;;;419          p_csw->tag          = p_cbw->tag;
;;;420          p_csw->data_residue = 0;
00062c  e3a01000          MOV      r1,#0
000630  e5802000          STR      r2,[r0,#0]            ;419
000634  e5942004          LDR      r2,[r4,#4]            ;419
000638  e5801008          STR      r1,[r0,#8]
00063c  e5802004          STR      r2,[r0,#4]
;;;421          p_csw->status       = MSC_CSW_STATUS_PASSED;
000640  e5c0100c          STRB     r1,[r0,#0xc]
;;;422    
;;;423          /*------------- Parse command and prepare DATA -------------*/
;;;424          p_msc->stage = MSC_STAGE_DATA;
000644  e5c4c030          STRB     r12,[r4,#0x30]
;;;425          p_msc->total_len = p_cbw->total_bytes;
000648  e5942008          LDR      r2,[r4,#8]
;;;426          p_msc->xferred_len = 0;
00064c  e5841038          STR      r1,[r4,#0x38]
000650  e5842034          STR      r2,[r4,#0x34]
;;;427    
;;;428          // Read10 or Write10
;;;429          if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
000654  e5d4500f          LDRB     r5,[r4,#0xf]
000658  e1a00004          MOV      r0,r4                 ;424
00065c  e3550028          CMP      r5,#0x28
000660  1355002a          CMPNE    r5,#0x2a
000664  0a000014          BEQ      |L1.1724|
;;;430          {
;;;431            uint8_t const status = rdwr10_validate_cmd(p_cbw);
;;;432    
;;;433            if ( status != MSC_CSW_STATUS_PASSED)
;;;434            {
;;;435              fail_scsi_op(rhport, p_msc, status);
;;;436            }else if ( p_cbw->total_bytes )
;;;437            {
;;;438              if (SCSI_CMD_READ_10 == p_cbw->command[0])
;;;439              {
;;;440                proc_read10_cmd(rhport, p_msc);
;;;441              }else
;;;442              {
;;;443                proc_write10_cmd(rhport, p_msc);
;;;444              }
;;;445            }else
;;;446            {
;;;447              // no data transfer, only exist in complaint test suite
;;;448              p_msc->stage = MSC_STAGE_STATUS;
;;;449            }
;;;450          }
;;;451          else
;;;452          {
;;;453            // For other SCSI commands
;;;454            // 1. OUT : queue transfer (invoke app callback after done)
;;;455            // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
;;;456            if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
000668  e5941008          LDR      r1,[r4,#8]
00066c  e3510000          CMP      r1,#0
000670  0a000002          BEQ      |L1.1664|
000674  e5d4000c          LDRB     r0,[r4,#0xc]
000678  e3100080          TST      r0,#0x80
00067c  0a00005c          BEQ      |L1.2036|
                  |L1.1664|
000680  e5d4100f          LDRB     r1,[r4,#0xf]
;;;457            {
;;;458              if (p_cbw->total_bytes > sizeof(_mscd_buf))
;;;459              {
;;;460                TU_LOG(MSC_DEBUG, "  SCSI reject non READ10/WRITE10 with large data\r\n");
;;;461                fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
;;;462              }else
;;;463              {
;;;464                // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
;;;465                // but it is OK to just receive data then responded with failed status
;;;466                TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
;;;467              }
;;;468            }else
;;;469            {
;;;470              // First process if it is a built-in commands
;;;471              int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
000684  e59f598c          LDR      r5,|L1.4120|
000688  e5d4900d          LDRB     r9,[r4,#0xd]
00068c  e351001a          CMP      r1,#0x1a
000690  e284000f          ADD      r0,r4,#0xf
000694  e2458040          SUB      r8,r5,#0x40
000698  0a000104          BEQ      |L1.2736|
00069c  ca000068          BGT      |L1.2116|
0006a0  e3510000          CMP      r1,#0
0006a4  0a00006e          BEQ      |L1.2148|
0006a8  e3510003          CMP      r1,#3
0006ac  0a000113          BEQ      |L1.2816|
0006b0  e3510012          CMP      r1,#0x12
0006b4  0a0000df          BEQ      |L1.2616|
0006b8  ea000067          B        |L1.2140|
                  |L1.1724|
0006bc  e5d02017          LDRB     r2,[r0,#0x17]
0006c0  e5d01016          LDRB     r1,[r0,#0x16]
0006c4  e1811402          ORR      r1,r1,r2,LSL #8
0006c8  e0212861          EOR      r2,r1,r1,ROR #16
0006cc  e00b2422          AND      r2,r11,r2,LSR #8
0006d0  e0221461          EOR      r1,r2,r1,ROR #8
0006d4  e5902008          LDR      r2,[r0,#8]
0006d8  e1a01821          LSR      r1,r1,#16
0006dc  e3520000          CMP      r2,#0
0006e0  0a000004          BEQ      |L1.1784|
0006e4  e3550028          CMP      r5,#0x28
0006e8  0a000005          BEQ      |L1.1796|
0006ec  e355002a          CMP      r5,#0x2a
0006f0  0a000007          BEQ      |L1.1812|
0006f4  ea000009          B        |L1.1824|
                  |L1.1784|
0006f8  e3510000          CMP      r1,#0
0006fc  1a000025          BNE      |L1.1944|
000700  ea000026          B        |L1.1952|
                  |L1.1796|
000704  e5d4000c          LDRB     r0,[r4,#0xc]
000708  e3100080          TST      r0,#0x80
00070c  1a000003          BNE      |L1.1824|
000710  ea000020          B        |L1.1944|
                  |L1.1812|
000714  e5d4000c          LDRB     r0,[r4,#0xc]
000718  e3100080          TST      r0,#0x80
00071c  1a00001d          BNE      |L1.1944|
                  |L1.1824|
000720  e3510000          CMP      r1,#0
000724  0a000034          BEQ      |L1.2044|
000728  e1a00002          MOV      r0,r2
00072c  ebfffffe          BL       __aeabi_uidivmod
000730  e3500000          CMP      r0,#0
000734  0a000017          BEQ      |L1.1944|
000738  e3550028          CMP      r5,#0x28              ;438
00073c  0a00001d          BEQ      |L1.1976|
000740  e59f08d4          LDR      r0,|L1.4124|
000744  e1a05004          MOV      r5,r4                 ;443
000748  e3500000          CMP      r0,#0                 ;443
00074c  0a000003          BEQ      |L1.1888|
000750  e5d5000d          LDRB     r0,[r5,#0xd]          ;443
000754  ebfffffe          BL       tud_msc_is_writable_cb
000758  e3500000          CMP      r0,#0                 ;443
00075c  0a000019          BEQ      |L1.1992|
                  |L1.1888|
000760  e5950008          LDR      r0,[r5,#8]            ;443
000764  e5951038          LDR      r1,[r5,#0x38]         ;443
000768  e59f28a8          LDR      r2,|L1.4120|
00076c  e0400001          SUB      r0,r0,r1              ;443
000770  e3500c02          CMP      r0,#0x200             ;443
000774  83a00c02          MOVHI    r0,#0x200             ;443
000778  e1a03800          LSL      r3,r0,#16             ;443
00077c  e5d5102f          LDRB     r1,[r5,#0x2f]         ;443
000780  e1a03823          LSR      r3,r3,#16             ;443
000784  e1a00007          MOV      r0,r7                 ;443
000788  ebfffffe          BL       usbd_edpt_xfer
00078c  e3500000          CMP      r0,#0                 ;443
000790  1a0001ce          BNE      |L1.3792|
000794  ea0001b0          B        |L1.3676|
                  |L1.1944|
000798  e3a02002          MOV      r2,#2                 ;443
00079c  ea000001          B        |L1.1960|
                  |L1.1952|
0007a0  e5c4a030          STRB     r10,[r4,#0x30]        ;448
0007a4  ea0001f1          B        |L1.3952|
                  |L1.1960|
0007a8  e1a01004          MOV      r1,r4                 ;435
0007ac  e1a00007          MOV      r0,r7                 ;435
0007b0  ebfffffe          BL       fail_scsi_op
0007b4  ea0001c5          B        |L1.3792|
                  |L1.1976|
0007b8  e1a01004          MOV      r1,r4                 ;440
0007bc  e1a00007          MOV      r0,r7                 ;440
0007c0  ebfffffe          BL       proc_read10_cmd
0007c4  ea0001c1          B        |L1.3792|
                  |L1.1992|
0007c8  e3a02007          MOV      r2,#7                 ;440
0007cc  e5c6203c          STRB     r2,[r6,#0x3c]         ;440  ; _mscd_itf
0007d0  e3a00027          MOV      r0,#0x27              ;440
0007d4  e5c6003d          STRB     r0,[r6,#0x3d]         ;440  ; _mscd_itf
0007d8  e3a01000          MOV      r1,#0                 ;440
0007dc  e5c6103e          STRB     r1,[r6,#0x3e]         ;440  ; _mscd_itf
0007e0  e3a02001          MOV      r2,#1                 ;440
0007e4  e1a01005          MOV      r1,r5                 ;440
0007e8  e1a00007          MOV      r0,r7                 ;440
0007ec  ebfffffe          BL       fail_scsi_op
0007f0  ea0001b6          B        |L1.3792|
                  |L1.2036|
0007f4  e3510c02          CMP      r1,#0x200             ;458
0007f8  9a000001          BLS      |L1.2052|
                  |L1.2044|
0007fc  e3a02001          MOV      r2,#1                 ;461
000800  eaffffe8          B        |L1.1960|
                  |L1.2052|
000804  e1d423b4          LDRH     r2,[r4,#0x34]         ;466
000808  e5d4102f          LDRB     r1,[r4,#0x2f]         ;466
00080c  e1a00007          MOV      r0,r7                 ;466
000810  e1a03802          LSL      r3,r2,#16             ;466
000814  e59f27fc          LDR      r2,|L1.4120|
000818  e1a03823          LSR      r3,r3,#16             ;466
00081c  ebfffffe          BL       usbd_edpt_xfer
000820  e3500000          CMP      r0,#0                 ;466
000824  1a0001a9          BNE      |L1.3792|
000828  e59f27f0          LDR      r2,|L1.4128|
00082c  e59f17f0          LDR      r1,|L1.4132|
000830  e59f07f0          LDR      r0,|L1.4136|
000834  ebfffffe          BL       __2printf
000838  e3a00000          MOV      r0,#0                 ;466
00083c  e28dd02c          ADD      sp,sp,#0x2c           ;466
;;;472    
;;;473              // Invoke user callback if not built-in
;;;474              if ( (resplen < 0) && (p_msc->sense_key == 0) )
;;;475              {
;;;476                resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
;;;477              }
;;;478    
;;;479              if ( resplen < 0 )
;;;480              {
;;;481                // unsupported command
;;;482                TU_LOG(MSC_DEBUG, "  SCSI unsupported or failed command\r\n");
;;;483                fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
;;;484              }
;;;485              else if (resplen == 0)
;;;486              {
;;;487                if (p_cbw->total_bytes)
;;;488                {
;;;489                  // 6.7 The 13 Cases: case 4 (Hi > Dn)
;;;490                  // TU_LOG(MSC_DEBUG, "  SCSI case 4 (Hi > Dn): %lu\r\n", p_cbw->total_bytes);
;;;491                  fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
;;;492                }else
;;;493                {
;;;494                  // case 1 Hn = Dn: all good
;;;495                  p_msc->stage = MSC_STAGE_STATUS;
;;;496                }
;;;497              }
;;;498              else
;;;499              {
;;;500                if ( p_cbw->total_bytes == 0 )
;;;501                {
;;;502                  // 6.7 The 13 Cases: case 2 (Hn < Di)
;;;503                  // TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di): %lu\r\n", p_cbw->total_bytes);
;;;504                  fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
;;;505                }else
;;;506                {
;;;507                  // cannot return more than host expect
;;;508                  p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
;;;509                  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
;;;510                }
;;;511              }
;;;512            }
;;;513          }
;;;514        break;
;;;515    
;;;516        case MSC_STAGE_DATA:
;;;517          TU_LOG(MSC_DEBUG, "  SCSI Data [Lun%u]\r\n", p_cbw->lun);
;;;518          //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);
;;;519    
;;;520          if (SCSI_CMD_READ_10 == p_cbw->command[0])
;;;521          {
;;;522            p_msc->xferred_len += xferred_bytes;
;;;523    
;;;524            if ( p_msc->xferred_len >= p_msc->total_len )
;;;525            {
;;;526              // Data Stage is complete
;;;527              p_msc->stage = MSC_STAGE_STATUS;
;;;528            }else
;;;529            {
;;;530              proc_read10_cmd(rhport, p_msc);
;;;531            }
;;;532          }
;;;533          else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
;;;534          {
;;;535            proc_write10_new_data(rhport, p_msc, xferred_bytes);
;;;536          }
;;;537          else
;;;538          {
;;;539            p_msc->xferred_len += xferred_bytes;
;;;540    
;;;541            // OUT transfer, invoke callback if needed
;;;542            if ( !is_data_in(p_cbw->dir) )
;;;543            {
;;;544              int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
;;;545    
;;;546              if ( cb_result < 0 )
;;;547              {
;;;548                // unsupported command
;;;549                TU_LOG(MSC_DEBUG, "  SCSI unsupported command\r\n");
;;;550                fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
;;;551              }else
;;;552              {
;;;553                // TODO haven't implement this scenario any further yet
;;;554              }
;;;555            }
;;;556    
;;;557            if ( p_msc->xferred_len >= p_msc->total_len )
;;;558            {
;;;559              // Data Stage is complete
;;;560              p_msc->stage = MSC_STAGE_STATUS;
;;;561            }
;;;562            else
;;;563            {
;;;564              // This scenario with command that take more than one transfer is already rejected at Command stage
;;;565              TU_BREAKPOINT();
;;;566            }
;;;567          }
;;;568        break;
;;;569    
;;;570        case MSC_STAGE_STATUS:
;;;571          // processed immediately after this switch, supposedly to be empty
;;;572        break;
;;;573    
;;;574        case MSC_STAGE_STATUS_SENT:
;;;575          // Wait for the Status phase to complete
;;;576          if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
;;;577          {
;;;578            TU_LOG(MSC_DEBUG, "  SCSI Status [Lun%u] = %u\r\n", p_cbw->lun, p_csw->status);
;;;579            // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);
;;;580    
;;;581            // Invoke complete callback if defined
;;;582            // Note: There is racing issue with samd51 + qspi flash testing with arduino
;;;583            // if complete_cb() is invoked after queuing the status.
;;;584            switch(p_cbw->command[0])
;;;585            {
;;;586              case SCSI_CMD_READ_10:
;;;587                if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
;;;588              break;
;;;589    
;;;590              case SCSI_CMD_WRITE_10:
;;;591                if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
;;;592              break;
;;;593    
;;;594              default:
;;;595                if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
;;;596              break;
;;;597            }
;;;598    
;;;599            TU_ASSERT( prepare_cbw(rhport, p_msc) );
;;;600          }else
;;;601          {
;;;602            // Any xfer ended here is consider unknown error, ignore it
;;;603            TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
;;;604          }
;;;605        break;
;;;606    
;;;607        default : break;
;;;608      }
;;;609    
;;;610      if ( p_msc->stage == MSC_STAGE_STATUS )
;;;611      {
;;;612        // skip status if epin is currently stalled, will do it when received Clear Stall request
;;;613        if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
;;;614        {
;;;615          if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
;;;616          {
;;;617            // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
;;;618            // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
;;;619            usbd_edpt_stall(rhport, p_msc->ep_in);
;;;620          }else
;;;621          {
;;;622            TU_ASSERT( send_csw(rhport, p_msc) );
;;;623          }
;;;624        }
;;;625    
;;;626        #if TU_CHECK_MCU(OPT_MCU_CXD56)
;;;627        // WORKAROUND: cxd56 has its own nuttx usb stack which does not forward Set/ClearFeature(Endpoint) to DCD.
;;;628        // There is no way for us to know when EP is un-stall, therefore we will unconditionally un-stall here and
;;;629        // hope everything will work
;;;630        if ( usbd_edpt_stalled(rhport, p_msc->ep_in) )
;;;631        {
;;;632          usbd_edpt_clear_stall(rhport, p_msc->ep_in);
;;;633          send_csw(rhport, p_msc);
;;;634        }
;;;635        #endif
;;;636      }
;;;637    
;;;638      return true;
;;;639    }
000840  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2116|
000844  e351001b          CMP      r1,#0x1b
000848  0a000014          BEQ      |L1.2208|
00084c  e3510023          CMP      r1,#0x23
000850  0a00004c          BEQ      |L1.2440|
000854  e3510025          CMP      r1,#0x25
000858  0a000026          BEQ      |L1.2296|
                  |L1.2140|
00085c  e3e00000          MVN      r0,#0
000860  ea000070          B        |L1.2600|
                  |L1.2148|
000864  e1a00009          MOV      r0,r9
000868  ebfffffe          BL       tud_msc_test_unit_ready_cb
00086c  e3500000          CMP      r0,#0
000870  1a0000e1          BNE      |L1.3068|
000874  e5d8003c          LDRB     r0,[r8,#0x3c]
000878  e3e08000          MVN      r8,#0
00087c  e3500000          CMP      r0,#0
000880  1a000067          BNE      |L1.2596|
000884  e3a02002          MOV      r2,#2
000888  e3a0103a          MOV      r1,#0x3a
00088c  e5c6203c          STRB     r2,[r6,#0x3c]  ; _mscd_itf
000890  e3a00000          MOV      r0,#0
000894  e5c6103d          STRB     r1,[r6,#0x3d]  ; _mscd_itf
000898  e5c6003e          STRB     r0,[r6,#0x3e]  ; _mscd_itf
00089c  ea000060          B        |L1.2596|
                  |L1.2208|
0008a0  e59f1784          LDR      r1,|L1.4140|
0008a4  e3510000          CMP      r1,#0
0008a8  0a0000d3          BEQ      |L1.3068|
0008ac  e5d00004          LDRB     r0,[r0,#4]
0008b0  e1a03f00          LSL      r3,r0,#30
0008b4  e2002001          AND      r2,r0,#1
0008b8  e1a01220          LSR      r1,r0,#4
0008bc  e1a03fa3          LSR      r3,r3,#31
0008c0  e1a00009          MOV      r0,r9
0008c4  ebfffffe          BL       tud_msc_start_stop_cb
0008c8  e3500000          CMP      r0,#0
0008cc  1a0000ca          BNE      |L1.3068|
0008d0  e5d8003c          LDRB     r0,[r8,#0x3c]
0008d4  e3e08000          MVN      r8,#0
0008d8  e3500000          CMP      r0,#0
0008dc  1a000050          BNE      |L1.2596|
0008e0  e3a02002          MOV      r2,#2
0008e4  e3a0103a          MOV      r1,#0x3a
0008e8  e5c6203c          STRB     r2,[r6,#0x3c]  ; _mscd_itf
0008ec  e3a00000          MOV      r0,#0
0008f0  e5c6103d          STRB     r1,[r6,#0x3d]  ; _mscd_itf
0008f4  ea000021          B        |L1.2432|
                  |L1.2296|
0008f8  e28d2028          ADD      r2,sp,#0x28
0008fc  e28d1024          ADD      r1,sp,#0x24
000900  e1a00009          MOV      r0,r9
000904  ebfffffe          BL       tud_msc_capacity_cb
000908  e1dd02b8          LDRH     r0,[sp,#0x28]
00090c  e59d1024          LDR      r1,[sp,#0x24]
000910  e3510000          CMP      r1,#0
000914  13500000          CMPNE    r0,#0
000918  0a00000f          BEQ      |L1.2396|
00091c  e2411001          SUB      r1,r1,#1
000920  e0212861          EOR      r2,r1,r1,ROR #16
000924  e00b2422          AND      r2,r11,r2,LSR #8
000928  e0221461          EOR      r1,r2,r1,ROR #8
00092c  e58d1000          STR      r1,[sp,#0]
000930  e0201860          EOR      r1,r0,r0,ROR #16
000934  e00b1421          AND      r1,r11,r1,LSR #8
000938  e0210460          EOR      r0,r1,r0,ROR #8
00093c  e3a08008          MOV      r8,#8
000940  e58d0004          STR      r0,[sp,#4]
000944  e1a0100d          MOV      r1,sp
000948  e1a02008          MOV      r2,r8
00094c  e1a00005          MOV      r0,r5
000950  ebfffffe          BL       __aeabi_memcpy
000954  e1a00008          MOV      r0,r8                 ;471
000958  ea000098          B        |L1.3008|
                  |L1.2396|
00095c  e5d8003c          LDRB     r0,[r8,#0x3c]         ;471
000960  e3e08000          MVN      r8,#0                 ;471
000964  e3500000          CMP      r0,#0                 ;471
000968  1a00002d          BNE      |L1.2596|
00096c  e3a01002          MOV      r1,#2                 ;471
000970  e3a0203a          MOV      r2,#0x3a              ;471
000974  e5c6103c          STRB     r1,[r6,#0x3c]         ;471  ; _mscd_itf
000978  e3a00000          MOV      r0,#0                 ;471
00097c  e5c6203d          STRB     r2,[r6,#0x3d]         ;471  ; _mscd_itf
                  |L1.2432|
000980  e5c6003e          STRB     r0,[r6,#0x3e]         ;471  ; _mscd_itf
000984  ea000026          B        |L1.2596|
                  |L1.2440|
000988  e59f06a0          LDR      r0,|L1.4144|
00098c  e28d3008          ADD      r3,sp,#8              ;471
000990  e8900007          LDM      r0,{r0-r2}            ;471
000994  e8830007          STM      r3,{r0-r2}            ;471
000998  e28d2004          ADD      r2,sp,#4              ;471
00099c  e1a0100d          MOV      r1,sp                 ;471
0009a0  e1a00009          MOV      r0,r9                 ;471
0009a4  ebfffffe          BL       tud_msc_capacity_cb
0009a8  e59d1000          LDR      r1,[sp,#0]            ;471
0009ac  e3510000          CMP      r1,#0                 ;471
0009b0  11dd00b4          LDRHNE   r0,[sp,#4]            ;471
0009b4  13500000          CMPNE    r0,#0                 ;471
0009b8  0a00000f          BEQ      |L1.2556|
0009bc  e0212861          EOR      r2,r1,r1,ROR #16      ;471
0009c0  e00b2422          AND      r2,r11,r2,LSR #8      ;471
0009c4  e0221461          EOR      r1,r2,r1,ROR #8       ;471
0009c8  e58d100c          STR      r1,[sp,#0xc]          ;471
0009cc  e0201860          EOR      r1,r0,r0,ROR #16      ;471
0009d0  e00b1421          AND      r1,r11,r1,LSR #8      ;471
0009d4  e0210460          EOR      r0,r1,r0,ROR #8       ;471
0009d8  e1a00820          LSR      r0,r0,#16             ;471
0009dc  e3a0800c          MOV      r8,#0xc               ;471
0009e0  e1cd01b2          STRH     r0,[sp,#0x12]         ;471
0009e4  e28d1008          ADD      r1,sp,#8              ;471
0009e8  e1a02008          MOV      r2,r8                 ;471
0009ec  e1a00005          MOV      r0,r5                 ;471
0009f0  ebfffffe          BL       __aeabi_memcpy
0009f4  e1a00008          MOV      r0,r8                 ;471
0009f8  ea000070          B        |L1.3008|
                  |L1.2556|
0009fc  e5d8003c          LDRB     r0,[r8,#0x3c]         ;471
000a00  e3e08000          MVN      r8,#0                 ;471
000a04  e3500000          CMP      r0,#0                 ;471
000a08  1a000005          BNE      |L1.2596|
000a0c  e3a00002          MOV      r0,#2                 ;471
000a10  e3a0203a          MOV      r2,#0x3a              ;471
000a14  e5c6003c          STRB     r0,[r6,#0x3c]         ;471  ; _mscd_itf
000a18  e3a01000          MOV      r1,#0                 ;471
000a1c  e5c6203d          STRB     r2,[r6,#0x3d]         ;471  ; _mscd_itf
000a20  e5c6103e          STRB     r1,[r6,#0x3e]         ;471  ; _mscd_itf
                  |L1.2596|
000a24  e1a00008          MOV      r0,r8                 ;471
                  |L1.2600|
000a28  e5d4103c          LDRB     r1,[r4,#0x3c]         ;474
000a2c  e3510000          CMP      r1,#0                 ;474
000a30  1a00005e          BNE      |L1.2992|
000a34  ea000056          B        |L1.2964|
                  |L1.2616|
000a38  e59f05f4          LDR      r0,|L1.4148|
000a3c  e28da010          ADD      r10,sp,#0x10          ;474
000a40  e8b01148          LDM      r0!,{r3,r6,r8,r12}    ;474
000a44  e88d1148          STM      sp,{r3,r6,r8,r12}     ;474
000a48  e8b01148          LDM      r0!,{r3,r6,r8,r12}    ;474
000a4c  e88a1148          STM      r10,{r3,r6,r8,r12}    ;474
000a50  e5900000          LDR      r0,[r0,#0]            ;474  ; <Data12>
000a54  e3a01020          MOV      r1,#0x20              ;474
000a58  e58d0020          STR      r0,[sp,#0x20]         ;474
000a5c  e28d0008          ADD      r0,sp,#8              ;474
000a60  ebfffffe          BL       __ARM_common_memset4_8
000a64  e3a02020          MOV      r2,#0x20              ;474
000a68  e3a01010          MOV      r1,#0x10              ;474
000a6c  e1a0600d          MOV      r6,sp                 ;474
000a70  e28d0010          ADD      r0,sp,#0x10           ;474
000a74  ebfffffe          BL       __aeabi_memset
000a78  e59f05b8          LDR      r0,|L1.4152|
000a7c  e2863020          ADD      r3,r6,#0x20           ;474
000a80  e58d0020          STR      r0,[sp,#0x20]         ;474
000a84  e2862010          ADD      r2,r6,#0x10           ;474
000a88  e2861008          ADD      r1,r6,#8              ;474
000a8c  e1a00009          MOV      r0,r9                 ;474
000a90  ebfffffe          BL       tud_msc_inquiry_cb
000a94  e3a08024          MOV      r8,#0x24              ;474
000a98  e1a0100d          MOV      r1,sp                 ;474
000a9c  e1a02008          MOV      r2,r8                 ;474
000aa0  e1a00005          MOV      r0,r5                 ;474
000aa4  ebfffffe          BL       __aeabi_memcpy
000aa8  e1a00008          MOV      r0,r8                 ;471
000aac  ea000043          B        |L1.3008|
                  |L1.2736|
000ab0  e59f0584          LDR      r0,|L1.4156|
000ab4  e59f1560          LDR      r1,|L1.4124|
000ab8  e5902000          LDR      r2,[r0,#0]            ;471  ; <Data13>
000abc  e3510000          CMP      r1,#0                 ;471
000ac0  e3a00001          MOV      r0,#1                 ;471
000ac4  11a00009          MOVNE    r0,r9                 ;471
000ac8  e58d2000          STR      r2,[sp,#0]            ;471
000acc  1bfffffe          BLNE     tud_msc_is_writable_cb
000ad0  e5ddc002          LDRB     r12,[sp,#2]           ;471
000ad4  e2203001          EOR      r3,r0,#1              ;471
000ad8  e3a08004          MOV      r8,#4                 ;471
000adc  e3ccc080          BIC      r12,r12,#0x80         ;471
000ae0  e18c3383          ORR      r3,r12,r3,LSL #7      ;471
000ae4  e1a0100d          MOV      r1,sp                 ;471
000ae8  e1a02008          MOV      r2,r8                 ;471
000aec  e1a00005          MOV      r0,r5                 ;471
000af0  e5cd3002          STRB     r3,[sp,#2]            ;471
000af4  ebfffffe          BL       __aeabi_memcpy
000af8  e1a00008          MOV      r0,r8                 ;471
000afc  ea00002f          B        |L1.3008|
                  |L1.2816|
000b00  e59f0534          LDR      r0,|L1.4156|
000b04  e280106c          ADD      r1,r0,#0x6c           ;471
000b08  e891100e          LDM      r1,{r1-r3,r12}        ;471
000b0c  e88d100e          STM      sp,{r1-r3,r12}        ;471
000b10  e590007c          LDR      r0,[r0,#0x7c]         ;471  ; <Data14>
000b14  e3a0100a          MOV      r1,#0xa               ;471
000b18  e58d0010          STR      r0,[sp,#0x10]         ;471
000b1c  e5cd1007          STRB     r1,[sp,#7]            ;471
000b20  e5dd0002          LDRB     r0,[sp,#2]            ;471
000b24  e5d8103c          LDRB     r1,[r8,#0x3c]         ;471
000b28  e3c0000f          BIC      r0,r0,#0xf            ;471
000b2c  e201100f          AND      r1,r1,#0xf            ;471
000b30  e1800001          ORR      r0,r0,r1              ;471
000b34  e5cd0002          STRB     r0,[sp,#2]            ;471
000b38  e5d8003d          LDRB     r0,[r8,#0x3d]         ;471
000b3c  e1a0100d          MOV      r1,sp                 ;471
000b40  e5cd000c          STRB     r0,[sp,#0xc]          ;471
000b44  e5d8303e          LDRB     r3,[r8,#0x3e]         ;471
000b48  e3a08012          MOV      r8,#0x12              ;471
000b4c  e1a00005          MOV      r0,r5                 ;471
000b50  e1a02008          MOV      r2,r8                 ;471
000b54  e5cd300d          STRB     r3,[sp,#0xd]          ;471
000b58  ebfffffe          BL       __aeabi_memcpy
000b5c  e59f04dc          LDR      r0,|L1.4160|
000b60  e3500000          CMP      r0,#0                 ;471
000b64  0a000004          BEQ      |L1.2940|
000b68  e3a02c02          MOV      r2,#0x200             ;471
000b6c  e1a01005          MOV      r1,r5                 ;471
000b70  e1a00009          MOV      r0,r9                 ;471
000b74  ebfffffe          BL       tud_msc_request_sense_cb
000b78  e1a08000          MOV      r8,r0                 ;471
                  |L1.2940|
000b7c  e3a00000          MOV      r0,#0                 ;471
000b80  e5c6003c          STRB     r0,[r6,#0x3c]         ;471  ; _mscd_itf
000b84  e5c6003d          STRB     r0,[r6,#0x3d]         ;471  ; _mscd_itf
000b88  e5c6003e          STRB     r0,[r6,#0x3e]         ;471  ; _mscd_itf
000b8c  e1b00008          MOVS     r0,r8                 ;471
000b90  5a000008          BPL      |L1.3000|
                  |L1.2964|
000b94  e1d403b4          LDRH     r0,[r4,#0x34]         ;476
000b98  e59f2478          LDR      r2,|L1.4120|
000b9c  e284100f          ADD      r1,r4,#0xf            ;476
000ba0  e1a03800          LSL      r3,r0,#16             ;476
000ba4  e5d4000d          LDRB     r0,[r4,#0xd]          ;476
000ba8  e1a03823          LSR      r3,r3,#16             ;476
000bac  ebfffffe          BL       tud_msc_scsi_cb
                  |L1.2992|
000bb0  e3500000          CMP      r0,#0                 ;479
000bb4  baffff10          BLT      |L1.2044|
                  |L1.3000|
000bb8  e3500000          CMP      r0,#0                 ;485
000bbc  0a00000e          BEQ      |L1.3068|
                  |L1.3008|
000bc0  e5941008          LDR      r1,[r4,#8]            ;500
000bc4  e3510000          CMP      r1,#0                 ;500
000bc8  0affff0b          BEQ      |L1.2044|
000bcc  e1500001          CMP      r0,r1                 ;508
000bd0  21a00001          MOVCS    r0,r1                 ;508
000bd4  e1a03800          LSL      r3,r0,#16             ;509
000bd8  e5840034          STR      r0,[r4,#0x34]         ;508
000bdc  e5d4102e          LDRB     r1,[r4,#0x2e]         ;509
000be0  e59f2430          LDR      r2,|L1.4120|
000be4  e1a03823          LSR      r3,r3,#16             ;509
000be8  e1a00007          MOV      r0,r7                 ;509
000bec  ebfffffe          BL       usbd_edpt_xfer
000bf0  e3500000          CMP      r0,#0                 ;509
000bf4  0a000004          BEQ      |L1.3084|
000bf8  ea0000b4          B        |L1.3792|
                  |L1.3068|
000bfc  e5940008          LDR      r0,[r4,#8]            ;487
000c00  e3500000          CMP      r0,#0                 ;487
000c04  1afffefc          BNE      |L1.2044|
000c08  eafffee4          B        |L1.1952|
                  |L1.3084|
000c0c  e59f2430          LDR      r2,|L1.4164|
000c10  e59f140c          LDR      r1,|L1.4132|
000c14  e59f040c          LDR      r0,|L1.4136|
000c18  ebfffffe          BL       __2printf
000c1c  e3a00000          MOV      r0,#0                 ;509
000c20  e28dd02c          ADD      sp,sp,#0x2c           ;509
000c24  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3112|
000c28  e51f0904          LDR      r0,|L1.812|
000c2c  e3510028          CMP      r1,#0x28              ;520
000c30  e5900038          LDR      r0,[r0,#0x38]         ;390
000c34  e58d0000          STR      r0,[sp,#0]            ;520
000c38  e0800003          ADD      r0,r0,r3              ;522
000c3c  0a000006          BEQ      |L1.3164|
000c40  e351002a          CMP      r1,#0x2a              ;533
000c44  0a00000c          BEQ      |L1.3196|
000c48  e5840038          STR      r0,[r4,#0x38]         ;539
000c4c  e5d4000c          LDRB     r0,[r4,#0xc]          ;542
000c50  e3100080          TST      r0,#0x80              ;542
000c54  0a000085          BEQ      |L1.3696|
000c58  ea000091          B        |L1.3748|
                  |L1.3164|
000c5c  e5942034          LDR      r2,[r4,#0x34]         ;522
000c60  e1a01004          MOV      r1,r4                 ;524
000c64  e1500002          CMP      r0,r2                 ;524
000c68  e5840038          STR      r0,[r4,#0x38]         ;522
000c6c  2afffecb          BCS      |L1.1952|
000c70  e1a00007          MOV      r0,r7                 ;530
000c74  ebfffffe          BL       proc_read10_cmd
000c78  ea000094          B        |L1.3792|
                  |L1.3196|
000c7c  e5d41017          LDRB     r1,[r4,#0x17]         ;530
000c80  e5d40016          LDRB     r0,[r4,#0x16]         ;530
000c84  e1a05004          MOV      r5,r4                 ;535
000c88  e1a08003          MOV      r8,r3                 ;535
000c8c  e1800401          ORR      r0,r0,r1,LSL #8       ;535
000c90  e0201860          EOR      r1,r0,r0,ROR #16      ;535
000c94  e00b1421          AND      r1,r11,r1,LSR #8      ;535
000c98  e0210460          EOR      r0,r1,r0,ROR #8       ;535
000c9c  e1b01820          LSRS     r1,r0,#16             ;535
000ca0  03a0e000          MOVEQ    lr,#0                 ;535
000ca4  0a000003          BEQ      |L1.3256|
000ca8  e5950008          LDR      r0,[r5,#8]            ;535
000cac  ebfffffe          BL       __aeabi_uidivmod
000cb0  e1a0e800          LSL      lr,r0,#16             ;535
000cb4  e1a0e82e          LSR      lr,lr,#16             ;535
                  |L1.3256|
000cb8  e3a02000          MOV      r2,#0                 ;535
000cbc  e5d5c011          LDRB     r12,[r5,#0x11]        ;535
000cc0  e1a00002          MOV      r0,r2                 ;535
000cc4  e5d52012          LDRB     r2,[r5,#0x12]         ;535
000cc8  e5d53013          LDRB     r3,[r5,#0x13]         ;535
000ccc  e5d51014          LDRB     r1,[r5,#0x14]         ;535
000cd0  e180000c          ORR      r0,r0,r12             ;535
000cd4  e1800402          ORR      r0,r0,r2,LSL #8       ;535
000cd8  e1800803          ORR      r0,r0,r3,LSL #16      ;535
000cdc  e1800c01          ORR      r0,r0,r1,LSL #24      ;535
000ce0  e0201860          EOR      r1,r0,r0,ROR #16      ;535
000ce4  e00b1421          AND      r1,r11,r1,LSR #8      ;535
000ce8  e021b460          EOR      r11,r1,r0,ROR #8      ;535
000cec  e59d0000          LDR      r0,[sp,#0]            ;535
000cf0  e1a0100e          MOV      r1,lr                 ;535
000cf4  ebfffffe          BL       __aeabi_uidivmod
000cf8  e08bc000          ADD      r12,r11,r0            ;535
000cfc  e1a02001          MOV      r2,r1                 ;535
000d00  e59f3310          LDR      r3,|L1.4120|
000d04  e1a00009          MOV      r0,r9                 ;535
000d08  e1a0100c          MOV      r1,r12                ;535
000d0c  e58d8000          STR      r8,[sp,#0]            ;535
000d10  ebfffffe          BL       tud_msc_write10_cb
000d14  e3500000          CMP      r0,#0                 ;535
000d18  aa00000c          BGE      |L1.3408|
000d1c  e5950038          LDR      r0,[r5,#0x38]         ;535
000d20  e3a02002          MOV      r2,#2                 ;535
000d24  e0800008          ADD      r0,r0,r8              ;535
000d28  e5850038          STR      r0,[r5,#0x38]         ;535
000d2c  e5c6203c          STRB     r2,[r6,#0x3c]         ;535  ; _mscd_itf
000d30  e3a0003a          MOV      r0,#0x3a              ;535
000d34  e5c6003d          STRB     r0,[r6,#0x3d]         ;535  ; _mscd_itf
000d38  e3a01000          MOV      r1,#0                 ;535
000d3c  e5c6103e          STRB     r1,[r6,#0x3e]         ;535  ; _mscd_itf
000d40  e3a02001          MOV      r2,#1                 ;535
000d44  e1a01005          MOV      r1,r5                 ;535
000d48  e1a00007          MOV      r0,r7                 ;535
000d4c  ea000040          B        |L1.3668|
                  |L1.3408|
000d50  e1500008          CMP      r0,r8                 ;535
000d54  2a000018          BCS      |L1.3516|
000d58  e3500000          CMP      r0,#0                 ;535
000d5c  e0486000          SUB      r6,r8,r0              ;535
000d60  da000009          BLE      |L1.3468|
000d64  e5951038          LDR      r1,[r5,#0x38]         ;535
000d68  e1a02800          LSL      r2,r0,#16             ;535
000d6c  e1a02822          LSR      r2,r2,#16             ;535
000d70  e0811002          ADD      r1,r1,r2              ;535
000d74  e5851038          STR      r1,[r5,#0x38]         ;535
000d78  e59f1298          LDR      r1,|L1.4120|
000d7c  e1a02006          MOV      r2,r6                 ;535
000d80  e0811000          ADD      r1,r1,r0              ;535
000d84  e59f028c          LDR      r0,|L1.4120|
000d88  ebfffffe          BL       __aeabi_memmove
                  |L1.3468|
000d8c  e59fc2a8          LDR      r12,|L1.4156|
000d90  e5d5302f          LDRB     r3,[r5,#0x2f]         ;535
000d94  e99c1020          LDMIB    r12,{r5,r12}          ;535  ; <Data1>, <Data1>
000d98  e88d1020          STM      sp,{r5,r12}           ;535
000d9c  e3a01000          MOV      r1,#0                 ;535
000da0  e5cd3004          STRB     r3,[sp,#4]            ;535
000da4  e1a0000d          MOV      r0,sp                 ;535
000da8  e5cd7000          STRB     r7,[sp,#0]            ;535
000dac  e58d6008          STR      r6,[sp,#8]            ;535
000db0  e5cd1005          STRB     r1,[sp,#5]            ;535
000db4  ebfffffe          BL       dcd_event_handler
000db8  ea000044          B        |L1.3792|
                  |L1.3516|
000dbc  e5950038          LDR      r0,[r5,#0x38]         ;535
000dc0  e5951034          LDR      r1,[r5,#0x34]         ;535
000dc4  e0800008          ADD      r0,r0,r8              ;535
000dc8  e1510000          CMP      r1,r0                 ;535
000dcc  e5850038          STR      r0,[r5,#0x38]         ;535
000dd0  95c5a030          STRBLS   r10,[r5,#0x30]        ;535
000dd4  9a000065          BLS      |L1.3952|
000dd8  e59f023c          LDR      r0,|L1.4124|
000ddc  e1a08007          MOV      r8,r7                 ;535
000de0  e3500000          CMP      r0,#0                 ;535
000de4  0a000003          BEQ      |L1.3576|
000de8  e5d5000d          LDRB     r0,[r5,#0xd]          ;535
000dec  ebfffffe          BL       tud_msc_is_writable_cb
000df0  e3500000          CMP      r0,#0                 ;535
000df4  0a00000d          BEQ      |L1.3632|
                  |L1.3576|
000df8  e5950008          LDR      r0,[r5,#8]            ;535
000dfc  e5951038          LDR      r1,[r5,#0x38]         ;535
000e00  e59f2210          LDR      r2,|L1.4120|
000e04  e0400001          SUB      r0,r0,r1              ;535
000e08  e3500c02          CMP      r0,#0x200             ;535
000e0c  83a00c02          MOVHI    r0,#0x200             ;535
000e10  e1a03800          LSL      r3,r0,#16             ;535
000e14  e5d5102f          LDRB     r1,[r5,#0x2f]         ;535
000e18  e1a03823          LSR      r3,r3,#16             ;535
000e1c  e1a00008          MOV      r0,r8                 ;535
000e20  ebfffffe          BL       usbd_edpt_xfer
000e24  e3500000          CMP      r0,#0                 ;535
000e28  1a000028          BNE      |L1.3792|
000e2c  ea00000a          B        |L1.3676|
                  |L1.3632|
000e30  e3a00007          MOV      r0,#7                 ;535
000e34  e5c6003c          STRB     r0,[r6,#0x3c]         ;535  ; _mscd_itf
000e38  e3a01027          MOV      r1,#0x27              ;535
000e3c  e5c6103d          STRB     r1,[r6,#0x3d]         ;535  ; _mscd_itf
000e40  e3a02000          MOV      r2,#0                 ;535
000e44  e5c6203e          STRB     r2,[r6,#0x3e]         ;535  ; _mscd_itf
000e48  e3a02001          MOV      r2,#1                 ;535
000e4c  e1a01005          MOV      r1,r5                 ;535
000e50  e1a00008          MOV      r0,r8                 ;535
                  |L1.3668|
000e54  ebfffffe          BL       fail_scsi_op
000e58  ea00001c          B        |L1.3792|
                  |L1.3676|
000e5c  e59f21e4          LDR      r2,|L1.4168|
000e60  e59f11e4          LDR      r1,|L1.4172|
000e64  e28f0f79          ADR      r0,|L1.4176|
000e68  ebfffffe          BL       __2printf
000e6c  ea000017          B        |L1.3792|
                  |L1.3696|
000e70  e1d403b4          LDRH     r0,[r4,#0x34]         ;544
000e74  e59f219c          LDR      r2,|L1.4120|
000e78  e284100f          ADD      r1,r4,#0xf            ;544
000e7c  e1a03800          LSL      r3,r0,#16             ;544
000e80  e5d4000d          LDRB     r0,[r4,#0xd]          ;544
000e84  e1a03823          LSR      r3,r3,#16             ;544
000e88  ebfffffe          BL       tud_msc_scsi_cb
000e8c  e3500000          CMP      r0,#0                 ;546
000e90  aa000003          BGE      |L1.3748|
000e94  e3a02001          MOV      r2,#1                 ;550
000e98  e1a01004          MOV      r1,r4                 ;550
000e9c  e1a00007          MOV      r0,r7                 ;550
000ea0  ebfffffe          BL       fail_scsi_op
                  |L1.3748|
000ea4  e5940034          LDR      r0,[r4,#0x34]         ;557
000ea8  e5941038          LDR      r1,[r4,#0x38]         ;557
000eac  e1510000          CMP      r1,r0                 ;557
000eb0  2afffe3a          BCS      |L1.1952|
000eb4  ea000005          B        |L1.3792|
                  |L1.3768|
000eb8  e5d4002e          LDRB     r0,[r4,#0x2e]         ;576
000ebc  e1500002          CMP      r0,r2                 ;576
000ec0  0353000d          CMPEQ    r3,#0xd               ;576
000ec4  0a000005          BEQ      |L1.3808|
000ec8  e28f0f66          ADR      r0,|L1.4200|
000ecc  ebfffffe          BL       __2printf
                  |L1.3792|
000ed0  e5d40030          LDRB     r0,[r4,#0x30]         ;610
000ed4  e3500002          CMP      r0,#2                 ;610
000ed8  1a00003f          BNE      |L1.4060|
000edc  ea000023          B        |L1.3952|
                  |L1.3808|
000ee0  e3510028          CMP      r1,#0x28              ;584
000ee4  0a000017          BEQ      |L1.3912|
000ee8  e351002a          CMP      r1,#0x2a              ;584
000eec  0a00001a          BEQ      |L1.3932|
000ef0  e59f01ac          LDR      r0,|L1.4260|
000ef4  e3500000          CMP      r0,#0                 ;595
000ef8  0a000002          BEQ      |L1.3848|
000efc  e1a00009          MOV      r0,r9                 ;595
000f00  e284100f          ADD      r1,r4,#0xf            ;595
000f04  ebfffffe          BL       tud_msc_scsi_complete_cb
                  |L1.3848|
000f08  e3a01000          MOV      r1,#0                 ;595
000f0c  e5c41030          STRB     r1,[r4,#0x30]         ;595
000f10  e5d4102f          LDRB     r1,[r4,#0x2f]         ;595
000f14  e1a00007          MOV      r0,r7                 ;599
000f18  e1a02004          MOV      r2,r4                 ;599
000f1c  e3a0301f          MOV      r3,#0x1f              ;599
000f20  ebfffffe          BL       usbd_edpt_xfer
000f24  e3500000          CMP      r0,#0                 ;599
000f28  1affffe8          BNE      |L1.3792|
000f2c  e59f2174          LDR      r2,|L1.4264|
000f30  e59f10ec          LDR      r1,|L1.4132|
000f34  e28f0f45          ADR      r0,|L1.4176|
000f38  ebfffffe          BL       __2printf
000f3c  e3a00000          MOV      r0,#0                 ;599
000f40  e28dd02c          ADD      sp,sp,#0x2c           ;599
000f44  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3912|
000f48  e59f015c          LDR      r0,|L1.4268|
000f4c  e3500000          CMP      r0,#0                 ;587
000f50  11a00009          MOVNE    r0,r9                 ;587
000f54  1bfffffe          BLNE     tud_msc_read10_complete_cb
000f58  eaffffea          B        |L1.3848|
                  |L1.3932|
000f5c  e59f014c          LDR      r0,|L1.4272|
000f60  e3500000          CMP      r0,#0                 ;591
000f64  11a00009          MOVNE    r0,r9                 ;591
000f68  1bfffffe          BLNE     tud_msc_write10_complete_cb
000f6c  eaffffe5          B        |L1.3848|
                  |L1.3952|
000f70  e5d4102e          LDRB     r1,[r4,#0x2e]         ;613
000f74  e1a00007          MOV      r0,r7                 ;613
000f78  ebfffffe          BL       usbd_edpt_stalled
000f7c  e3500000          CMP      r0,#0                 ;613
000f80  1a000015          BNE      |L1.4060|
000f84  e5941038          LDR      r1,[r4,#0x38]         ;615
000f88  e5942008          LDR      r2,[r4,#8]            ;615
000f8c  e1520001          CMP      r2,r1                 ;615
000f90  9a000006          BLS      |L1.4016|
000f94  e5d4000c          LDRB     r0,[r4,#0xc]          ;615
000f98  e3100080          TST      r0,#0x80              ;615
000f9c  0a000003          BEQ      |L1.4016|
000fa0  e5d4102e          LDRB     r1,[r4,#0x2e]         ;619
000fa4  e1a00007          MOV      r0,r7                 ;619
000fa8  ebfffffe          BL       usbd_edpt_stall
000fac  ea00000a          B        |L1.4060|
                  |L1.4016|
000fb0  e0422001          SUB      r2,r2,r1              ;619
000fb4  e5842028          STR      r2,[r4,#0x28]         ;619
000fb8  e3a01003          MOV      r1,#3                 ;619
000fbc  e5c41030          STRB     r1,[r4,#0x30]         ;619
000fc0  e5d4102e          LDRB     r1,[r4,#0x2e]         ;619
000fc4  e1a00007          MOV      r0,r7                 ;622
000fc8  e3a0300d          MOV      r3,#0xd               ;622
000fcc  e2842020          ADD      r2,r4,#0x20           ;622
000fd0  ebfffffe          BL       usbd_edpt_xfer
000fd4  e3500000          CMP      r0,#0                 ;622
000fd8  0a000002          BEQ      |L1.4072|
                  |L1.4060|
000fdc  e3a00001          MOV      r0,#1                 ;638
000fe0  e28dd02c          ADD      sp,sp,#0x2c           ;638
000fe4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4072|
000fe8  e59f20c4          LDR      r2,|L1.4276|
000fec  e59f1030          LDR      r1,|L1.4132|
000ff0  e28f0058          ADR      r0,|L1.4176|
000ff4  ebfffffe          BL       __2printf
                  |L1.4088|
000ff8  e3a00000          MOV      r0,#0                 ;622
000ffc  e28dd02c          ADD      sp,sp,#0x2c           ;622
001000  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4100|
                          DCD      0x00000149
                  |L1.4104|
                          DCD      ||.constdata||+0x1a
                  |L1.4108|
                          DCD      tud_msc_get_maxlun_cb
                  |L1.4112|
                          DCD      0x43425355
                  |L1.4116|
                          DCD      0x53425355
                  |L1.4120|
                          DCD      ||.bss||+0x40
                  |L1.4124|
                          DCD      tud_msc_is_writable_cb
                  |L1.4128|
                          DCD      0x000001d2
                  |L1.4132|
                          DCD      ||.constdata||+0x2f
                  |L1.4136|
                          DCD      ||.text||+0x338
                  |L1.4140|
                          DCD      tud_msc_start_stop_cb
                  |L1.4144|
                          DCD      ||.constdata||+0x3c
                  |L1.4148|
                          DCD      ||.constdata||+0x48
                  |L1.4152|
                          DCD      0x20202020
                  |L1.4156|
                          DCD      ||.constdata||
                  |L1.4160|
                          DCD      tud_msc_request_sense_cb
                  |L1.4164|
                          DCD      0x000001fd
                  |L1.4168|
                          DCD      0x00000379
                  |L1.4172|
                          DCD      ||.constdata||+0x8e
                  |L1.4176|
001050  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
001054  643a2041
001058  53534552
00105c  54204641
001060  494c4544
001064  0d0a00  
001067  00                DCB      0
                  |L1.4200|
001068  20205761          DCB      "  Warning expect SCSI Status but received unknown data\r"
00106c  726e696e
001070  67206578
001074  70656374
001078  20534353
00107c  49205374
001080  61747573
001084  20627574
001088  20726563
00108c  65697665
001090  6420756e
001094  6b6e6f77
001098  6e206461
00109c  74610d  
00109f  0a00              DCB      "\n",0
0010a1  00                DCB      0
0010a2  00                DCB      0
0010a3  00                DCB      0
                  |L1.4260|
                          DCD      tud_msc_scsi_complete_cb
                  |L1.4264|
                          DCD      0x00000257
                  |L1.4268|
                          DCD      tud_msc_read10_complete_cb
                  |L1.4272|
                          DCD      tud_msc_write10_complete_cb
                  |L1.4276|
                          DCD      0x0000026e
                          ENDP

                  proc_read10_cmd PROC
;;;827    
;;;828    static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
0010b8  e92d41f0          PUSH     {r4-r8,lr}
;;;829    {
0010bc  e1a06000          MOV      r6,r0
0010c0  e1a04001          MOV      r4,r1
0010c4  e2810016          ADD      r0,r1,#0x16
0010c8  e5d11017          LDRB     r1,[r1,#0x17]
0010cc  e5d00000          LDRB     r0,[r0,#0]
0010d0  e3e07cff          MVN      r7,#0xff00
0010d4  e5d4c008          LDRB     r12,[r4,#8]
0010d8  e1800401          ORR      r0,r0,r1,LSL #8
0010dc  e0201860          EOR      r1,r0,r0,ROR #16
0010e0  e0071421          AND      r1,r7,r1,LSR #8
0010e4  e5d42009          LDRB     r2,[r4,#9]
0010e8  e0210460          EOR      r0,r1,r0,ROR #8
0010ec  e5d4300a          LDRB     r3,[r4,#0xa]
0010f0  e1b01820          LSRS     r1,r0,#16
0010f4  e5d4000b          LDRB     r0,[r4,#0xb]
0010f8  e18c5402          ORR      r5,r12,r2,LSL #8
0010fc  e1855803          ORR      r5,r5,r3,LSL #16
001100  e1855c00          ORR      r5,r5,r0,LSL #24
001104  e24dd010          SUB      sp,sp,#0x10
001108  03a00000          MOVEQ    r0,#0
00110c  0a000003          BEQ      |L1.4384|
001110  e1a00005          MOV      r0,r5
001114  ebfffffe          BL       __aeabi_uidivmod
001118  e1a00800          LSL      r0,r0,#16
00111c  e1a00820          LSR      r0,r0,#16
                  |L1.4384|
001120  e3a03000          MOV      r3,#0
001124  e1a01003          MOV      r1,r3
001128  e5d43011          LDRB     r3,[r4,#0x11]
00112c  e2842011          ADD      r2,r4,#0x11
001130  e5d48012          LDRB     r8,[r4,#0x12]
001134  e1a0c002          MOV      r12,r2
001138  e5d42013          LDRB     r2,[r4,#0x13]
00113c  e5dcc003          LDRB     r12,[r12,#3]
001140  e1811003          ORR      r1,r1,r3
001144  e1811408          ORR      r1,r1,r8,LSL #8
001148  e1811802          ORR      r1,r1,r2,LSL #16
00114c  e1811c0c          ORR      r1,r1,r12,LSL #24
001150  e0212861          EOR      r2,r1,r1,ROR #16
001154  e0072422          AND      r2,r7,r2,LSR #8
;;;830      msc_cbw_t const * p_cbw = &p_msc->cbw;
;;;831    
;;;832      // block size already verified not zero
;;;833      uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
;;;834    
;;;835      // Adjust lba with transferred bytes
;;;836      uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
001158  e5947038          LDR      r7,[r4,#0x38]
00115c  e0228461          EOR      r8,r2,r1,ROR #8
001160  e1a01000          MOV      r1,r0
001164  e1a00007          MOV      r0,r7
001168  ebfffffe          BL       __aeabi_uidivmod
00116c  e1a02000          MOV      r2,r0
;;;837    
;;;838      // remaining bytes capped at class buffer
;;;839      int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
001170  e0450007          SUB      r0,r5,r7
001174  e3500c02          CMP      r0,#0x200
001178  e088c002          ADD      r12,r8,r2             ;836
00117c  83a00c02          MOVHI    r0,#0x200
;;;840    
;;;841      // Application can consume smaller bytes
;;;842      uint32_t const offset = p_msc->xferred_len % block_sz;
;;;843      nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
001180  e1a02001          MOV      r2,r1
001184  e58d0000          STR      r0,[sp,#0]
001188  e5d4000d          LDRB     r0,[r4,#0xd]
00118c  e51f317c          LDR      r3,|L1.4120|
001190  e1a0100c          MOV      r1,r12
001194  ebfffffe          BL       tud_msc_read10_cb
;;;844    
;;;845      if ( nbytes < 0 )
001198  e3500000          CMP      r0,#0
00119c  aa00000c          BGE      |L1.4564|
0011a0  e51f0e7c          LDR      r0,|L1.812|
;;;846      {
;;;847        // negative means error -> endpoint is stalled & status in CSW set to failed
;;;848        TU_LOG(MSC_DEBUG, "  tud_msc_read10_cb() return -1\r\n");
;;;849    
;;;850        // set sense
;;;851        set_sense_medium_not_present(p_cbw->lun);
0011a4  e3a03002          MOV      r3,#2
0011a8  e3a0203a          MOV      r2,#0x3a
0011ac  e5c0303c          STRB     r3,[r0,#0x3c]  ; _mscd_itf
0011b0  e5c0203d          STRB     r2,[r0,#0x3d]  ; _mscd_itf
0011b4  e3a01000          MOV      r1,#0
0011b8  e5c0103e          STRB     r1,[r0,#0x3e]  ; _mscd_itf
;;;852    
;;;853        fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
0011bc  e1a01004          MOV      r1,r4
0011c0  e1a00006          MOV      r0,r6
0011c4  e28dd010          ADD      sp,sp,#0x10
0011c8  e8bd41f0          POP      {r4-r8,lr}
0011cc  e3a02001          MOV      r2,#1
0011d0  eafffffe          B        fail_scsi_op
                  |L1.4564|
;;;854      }
;;;855      else if ( nbytes == 0 )
0011d4  1a00000d          BNE      |L1.4624|
0011d8  e51fc1a4          LDR      r12,|L1.4156|
;;;856      {
;;;857        // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
;;;858        dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
0011dc  e5d4302e          LDRB     r3,[r4,#0x2e]
0011e0  e99c1010          LDMIB    r12,{r4,r12}  ; <Data1>, <Data1>
0011e4  e88d1010          STM      sp,{r4,r12}
0011e8  e3a00000          MOV      r0,#0
0011ec  e5cd3004          STRB     r3,[sp,#4]
0011f0  e1a01000          MOV      r1,r0
0011f4  e58d0008          STR      r0,[sp,#8]
0011f8  e5cd0005          STRB     r0,[sp,#5]
0011fc  e1a0000d          MOV      r0,sp
001200  e5cd6000          STRB     r6,[sp,#0]
001204  ebfffffe          BL       dcd_event_handler
;;;859      }
;;;860      else
;;;861      {
;;;862        TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
;;;863      }
;;;864    }
001208  e28dd010          ADD      sp,sp,#0x10
00120c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4624|
001210  e1a03800          LSL      r3,r0,#16             ;862
001214  e5d4102e          LDRB     r1,[r4,#0x2e]         ;862
001218  e51f2208          LDR      r2,|L1.4120|
00121c  e1a03823          LSR      r3,r3,#16             ;862
001220  e1a00006          MOV      r0,r6                 ;862
001224  ebfffffe          BL       usbd_edpt_xfer
001228  e3500000          CMP      r0,#0                 ;862
00122c  128dd010          ADDNE    sp,sp,#0x10
001230  18bd81f0          POPNE    {r4-r8,pc}
001234  e28dd010          ADD      sp,sp,#0x10           ;862
001238  e8bd41f0          POP      {r4-r8,lr}            ;862
00123c  e59f2008          LDR      r2,|L1.4684|
001240  e59f1008          LDR      r1,|L1.4688|
001244  e24f0f7f          ADR      r0,|L1.4176|
001248  eafffffe          B        __2printf
;;;865    
                          ENDP

                  |L1.4684|
                          DCD      0x0000035e
                  |L1.4688|
                          DCD      ||.constdata||+0x7e

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _mscd_itf
                          %        64
                  _mscd_buf
                          %        512

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  03000000          DCB      0x03,0x00,0x00,0x00
000004  00070000          DCB      0x00,0x07,0x00,0x00
                          %        8
                  __func__
000010  6d736364          DCB      0x6d,0x73,0x63,0x64
000014  5f6f7065          DCB      0x5f,0x6f,0x70,0x65
000018  6e00              DCB      0x6e,0x00
                  |symbol_number.17|
00001a  6d73              DCB      0x6d,0x73
00001c  63645f63          DCB      0x63,0x64,0x5f,0x63
000020  6f6e7472          DCB      0x6f,0x6e,0x74,0x72
000024  6f6c5f78          DCB      0x6f,0x6c,0x5f,0x78
000028  6665725f          DCB      0x66,0x65,0x72,0x5f
00002c  636200            DCB      0x63,0x62,0x00
                  |symbol_number.18|
00002f  6d                DCB      0x6d
000030  7363645f          DCB      0x73,0x63,0x64,0x5f
000034  78666572          DCB      0x78,0x66,0x65,0x72
000038  5f636200          DCB      0x5f,0x63,0x62,0x00
00003c  00000008          DCB      0x00,0x00,0x00,0x08
                          DCD      0x00000000
000044  0200              DCB      0x02,0x00
000046  0000              DCW      0x0000
000048  00800202          DCB      0x00,0x80,0x02,0x02
00004c  1f000000          DCB      0x1f,0x00,0x00,0x00
                          %        24
                          DCD      0x00000000
00006c  f00000            DCB      0xf0,0x00,0x00
                          DCDU     0x00000000
000073  00                DCB      0x00
                          DCD      0x00000000
000078  00000000          DCB      0x00,0x00,0x00,0x00
00007c  0000              DCB      0x00,0x00
                  |symbol_number.19|
00007e  7072              DCB      0x70,0x72
000080  6f635f72          DCB      0x6f,0x63,0x5f,0x72
000084  65616431          DCB      0x65,0x61,0x64,0x31
000088  305f636d          DCB      0x30,0x5f,0x63,0x6d
00008c  6400              DCB      0x64,0x00
                  |symbol_number.20|
00008e  7072              DCB      0x70,0x72
000090  6f635f77          DCB      0x6f,0x63,0x5f,0x77
000094  72697465          DCB      0x72,0x69,0x74,0x65
000098  31305f63          DCB      0x31,0x30,0x5f,0x63
00009c  6d6400            DCB      0x6d,0x64,0x00

                          AREA ||i.__ARM_common_memset4_8||, COMGROUP=__ARM_common_memset4_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memset4_8 PROC
000000  e20110ff          AND      r1,r1,#0xff
000004  e1811401          ORR      r1,r1,r1,LSL #8
000008  e1811801          ORR      r1,r1,r1,LSL #16
00000c  e5801000          STR      r1,[r0,#0]
000010  e5801004          STR      r1,[r0,#4]
000014  e12fff1e          BX       lr
                          ENDP

