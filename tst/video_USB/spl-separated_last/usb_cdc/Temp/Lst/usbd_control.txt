; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usbd_control.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usbd_control.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usbd_control.crf ..\tinyusb\src\device\usbd_control.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tud_control_status PROC
;;;76     // Status phase
;;;77     bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;78     {
;;;79       _ctrl_xfer.request       = (*request);
000004  e59f418c          LDR      r4,|L1.408|
000008  e1a06000          MOV      r6,r0                 ;78
00000c  e1a05001          MOV      r5,r1                 ;78
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       __ARM_common_memcpy1_8
;;;80       _ctrl_xfer.buffer        = NULL;
000018  e3a00000          MOV      r0,#0
00001c  e5840008          STR      r0,[r4,#8]  ; _ctrl_xfer
;;;81       _ctrl_xfer.total_xferred = 0;
000020  e1c400be          STRH     r0,[r4,#0xe]  ; _ctrl_xfer
;;;82       _ctrl_xfer.data_len      = 0;
000024  e1c400bc          STRH     r0,[r4,#0xc]  ; _ctrl_xfer
000028  e5d51000          LDRB     r1,[r5,#0]
;;;83     
;;;84       return _status_stage_xact(rhport, request);
00002c  e1a00006          MOV      r0,r6
000030  e8bd4070          POP      {r4-r6,lr}
000034  e3110080          TST      r1,#0x80
000038  e3a03000          MOV      r3,#0
00003c  13a01000          MOVNE    r1,#0
000040  03a01080          MOVEQ    r1,#0x80
000044  e1a02003          MOV      r2,r3
000048  eafffffe          B        usbd_edpt_xfer
;;;85     }
;;;86     
                          ENDP

                  tud_control_xfer PROC
;;;108    // If the request's wLength is zero, a status packet is sent instead.
;;;109    bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
00004c  e92d41f0          PUSH     {r4-r8,lr}
;;;110    {
;;;111      _ctrl_xfer.request       = (*request);
000050  e59f5140          LDR      r5,|L1.408|
000054  e1a06000          MOV      r6,r0                 ;110
000058  e1a08003          MOV      r8,r3                 ;110
00005c  e1a07002          MOV      r7,r2                 ;110
000060  e1a04001          MOV      r4,r1                 ;110
000064  e1a00005          MOV      r0,r5
000068  ebfffffe          BL       __ARM_common_memcpy1_8
;;;112      _ctrl_xfer.buffer        = (uint8_t*) buffer;
;;;113      _ctrl_xfer.total_xferred = 0U;
00006c  e3a00000          MOV      r0,#0
000070  e5857008          STR      r7,[r5,#8]            ;112  ; _ctrl_xfer
000074  e1c500be          STRH     r0,[r5,#0xe]  ; _ctrl_xfer
;;;114      _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
000078  e5d40007          LDRB     r0,[r4,#7]
00007c  e5d42006          LDRB     r2,[r4,#6]
000080  e1a01007          MOV      r1,r7                 ;112
000084  e1820400          ORR      r0,r2,r0,LSL #8
000088  e1580000          CMP      r8,r0
00008c  31a03008          MOVCC    r3,r8
000090  21a03000          MOVCS    r3,r0
000094  e1c530bc          STRH     r3,[r5,#0xc]  ; _ctrl_xfer
;;;115    
;;;116      if (request->wLength > 0U)
000098  e5d40007          LDRB     r0,[r4,#7]
00009c  e5d42006          LDRB     r2,[r4,#6]
0000a0  e1920400          ORRS     r0,r2,r0,LSL #8
0000a4  0a000029          BEQ      |L1.336|
;;;117      {
;;;118        if(_ctrl_xfer.data_len > 0U)
0000a8  e3530000          CMP      r3,#0
0000ac  0a000001          BEQ      |L1.184|
;;;119        {
;;;120          TU_ASSERT(buffer);
0000b0  e3570000          CMP      r7,#0
0000b4  0a000012          BEQ      |L1.260|
                  |L1.184|
0000b8  e5d50000          LDRB     r0,[r5,#0]  ; _ctrl_xfer
0000bc  e3530040          CMP      r3,#0x40
0000c0  23a03040          MOVCS    r3,#0x40
0000c4  e3100080          TST      r0,#0x80
0000c8  e3a07000          MOV      r7,#0
0000cc  e1a04003          MOV      r4,r3
0000d0  0a000007          BEQ      |L1.244|
0000d4  e3540000          CMP      r4,#0
0000d8  e3a07080          MOV      r7,#0x80
0000dc  0a00000e          BEQ      |L1.284|
0000e0  e59f00b4          LDR      r0,|L1.412|
0000e4  e3530040          CMP      r3,#0x40
0000e8  e1a02003          MOV      r2,r3
0000ec  8a000011          BHI      |L1.312|
0000f0  ebfffffe          BL       __aeabi_memcpy
                  |L1.244|
0000f4  e3540000          CMP      r4,#0
0000f8  159f209c          LDRNE    r2,|L1.412|
0000fc  1a000007          BNE      |L1.288|
000100  ea000005          B        |L1.284|
                  |L1.260|
000104  e59f1094          LDR      r1,|L1.416|
000108  e3a02078          MOV      r2,#0x78
00010c  e28f0090          ADR      r0,|L1.420|
000110  ebfffffe          BL       __2printf
000114  e3a00000          MOV      r0,#0
;;;121        }
;;;122    
;;;123    //    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);
;;;124    
;;;125        // Data stage
;;;126        TU_ASSERT( _data_stage_xact(rhport) );
;;;127      }
;;;128      else
;;;129      {
;;;130        // Status stage
;;;131        TU_ASSERT( _status_stage_xact(rhport, request) );
;;;132      }
;;;133    
;;;134      return true;
;;;135    }
000118  e8bd81f0          POP      {r4-r8,pc}
                  |L1.284|
00011c  e3a02000          MOV      r2,#0
                  |L1.288|
000120  e1a03004          MOV      r3,r4
000124  e1a01007          MOV      r1,r7
000128  e1a00006          MOV      r0,r6
00012c  ebfffffe          BL       usbd_edpt_xfer
000130  e3500000          CMP      r0,#0                 ;126
000134  1a00000f          BNE      |L1.376|
                  |L1.312|
000138  e59f1060          LDR      r1,|L1.416|
00013c  e3a0207e          MOV      r2,#0x7e              ;126
000140  e28f005c          ADR      r0,|L1.420|
000144  ebfffffe          BL       __2printf
000148  e3a00000          MOV      r0,#0                 ;126
00014c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.336|
000150  e5d41000          LDRB     r1,[r4,#0]
000154  e3a03000          MOV      r3,#0
000158  e1a00006          MOV      r0,r6                 ;131
00015c  e3110080          TST      r1,#0x80              ;131
000160  13a01000          MOVNE    r1,#0                 ;131
000164  03a01080          MOVEQ    r1,#0x80              ;131
000168  e1a02003          MOV      r2,r3                 ;131
00016c  ebfffffe          BL       usbd_edpt_xfer
000170  e3500000          CMP      r0,#0                 ;131
000174  0a000001          BEQ      |L1.384|
                  |L1.376|
000178  e3a00001          MOV      r0,#1                 ;134
00017c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.384|
000180  e59f1018          LDR      r1,|L1.416|
000184  e3a02083          MOV      r2,#0x83              ;131
000188  e28f0014          ADR      r0,|L1.420|
00018c  ebfffffe          BL       __2printf
000190  e3a00000          MOV      r0,#0                 ;131
000194  e8bd81f0          POP      {r4-r8,pc}
                  |L1.408|
                          DCD      ||.bss||
                  |L1.412|
                          DCD      ||.bss||+0x14
                  |L1.416|
                          DCD      ||.constdata||
                  |L1.420|
0001a4  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
0001a8  643a2041
0001ac  53534552
0001b0  54204641
0001b4  494c4544
0001b8  0d0a00  
0001bb  00                DCB      0
                          ENDP

                  usbd_control_reset PROC
;;;145    
;;;146    void usbd_control_reset(void)
0001bc  e51f002c          LDR      r0,|L1.408|
;;;147    {
;;;148      tu_varclr(&_ctrl_xfer);
0001c0  e3a01000          MOV      r1,#0
0001c4  e5801000          STR      r1,[r0,#0]  ; _ctrl_xfer
0001c8  e5801004          STR      r1,[r0,#4]  ; _ctrl_xfer
0001cc  e5801008          STR      r1,[r0,#8]  ; _ctrl_xfer
0001d0  e580100c          STR      r1,[r0,#0xc]  ; _ctrl_xfer
0001d4  e5801010          STR      r1,[r0,#0x10]  ; _ctrl_xfer
;;;149    }
0001d8  e12fff1e          BX       lr
;;;150    
                          ENDP

                  usbd_control_set_complete_callback PROC
;;;151    // Set complete callback
;;;152    void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
0001dc  e51f104c          LDR      r1,|L1.408|
;;;153    {
;;;154      _ctrl_xfer.complete_cb = fp;
0001e0  e5810010          STR      r0,[r1,#0x10]  ; _ctrl_xfer
;;;155    }
0001e4  e12fff1e          BX       lr
;;;156    
                          ENDP

                  usbd_control_set_request PROC
;;;157    // for dcd_set_address where DCD is responsible for status response
;;;158    void usbd_control_set_request(tusb_control_request_t const *request)
0001e8  e92d4010          PUSH     {r4,lr}
;;;159    {
;;;160      _ctrl_xfer.request       = (*request);
0001ec  e51f405c          LDR      r4,|L1.408|
0001f0  e1a01000          MOV      r1,r0
0001f4  e1a00004          MOV      r0,r4
0001f8  ebfffffe          BL       __ARM_common_memcpy1_8
;;;161      _ctrl_xfer.buffer        = NULL;
0001fc  e3a00000          MOV      r0,#0
000200  e5840008          STR      r0,[r4,#8]  ; _ctrl_xfer
;;;162      _ctrl_xfer.total_xferred = 0;
000204  e1c400be          STRH     r0,[r4,#0xe]  ; _ctrl_xfer
;;;163      _ctrl_xfer.data_len      = 0;
000208  e1c400bc          STRH     r0,[r4,#0xc]  ; _ctrl_xfer
;;;164    }
00020c  e8bd8010          POP      {r4,pc}
;;;165    
                          ENDP

                  usbd_control_xfer_cb PROC
;;;168    // - Status stage
;;;169    bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
000210  e92d41f0          PUSH     {r4-r8,lr}
;;;170    {
;;;171      (void) result;
;;;172    
;;;173      // Endpoint Address is opposite to direction bit, this is Status Stage complete event
;;;174      if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
000214  e51f4084          LDR      r4,|L1.408|
000218  e1a06000          MOV      r6,r0                 ;170
00021c  e5d40000          LDRB     r0,[r4,#0]  ; _ctrl_xfer
000220  e1a013a1          LSR      r1,r1,#7
000224  e1a05003          MOV      r5,r3                 ;170
000228  e15103a0          CMP      r1,r0,LSR #7
00022c  0a000015          BEQ      |L1.648|
;;;175      {
;;;176        TU_ASSERT(0 == xferred_bytes);
000230  e3530000          CMP      r3,#0
000234  0a000005          BEQ      |L1.592|
000238  e59f11b0          LDR      r1,|L1.1008|
00023c  e3a020b0          MOV      r2,#0xb0
000240  e24f00a4          ADR      r0,|L1.420|
000244  ebfffffe          BL       __2printf
000248  e3a00000          MOV      r0,#0
;;;177    
;;;178        // invoke optional dcd hook if available
;;;179        if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
;;;180    
;;;181        if (_ctrl_xfer.complete_cb)
;;;182        {
;;;183          // TODO refactor with usbd_driver_print_control_complete_name
;;;184          _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
;;;185        }
;;;186    
;;;187        return true;
;;;188      }
;;;189    
;;;190      if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
;;;191      {
;;;192        TU_VERIFY(_ctrl_xfer.buffer);
;;;193        memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
;;;194        TU_LOG_MEM(USBD_CONTROL_DEBUG, _usbd_ctrl_buf, xferred_bytes, 2);
;;;195      }
;;;196    
;;;197      _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
;;;198      _ctrl_xfer.buffer += xferred_bytes;
;;;199    
;;;200      // Data Stage is complete when all request's length are transferred or
;;;201      // a short packet is sent including zero-length packet.
;;;202      if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
;;;203      {
;;;204        // DATA stage is complete
;;;205        bool is_ok = true;
;;;206    
;;;207        // invoke complete callback if set
;;;208        // callback can still stall control in status phase e.g out data does not make sense
;;;209        if ( _ctrl_xfer.complete_cb )
;;;210        {
;;;211          #if CFG_TUSB_DEBUG >= USBD_CONTROL_DEBUG
;;;212          usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
;;;213          #endif
;;;214    
;;;215          is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
;;;216        }
;;;217    
;;;218        if ( is_ok )
;;;219        {
;;;220          // Send status
;;;221          TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
;;;222        }else
;;;223        {
;;;224          // Stall both IN and OUT control endpoint
;;;225          dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
;;;226          dcd_edpt_stall(rhport, EDPT_CTRL_IN);
;;;227        }
;;;228      }
;;;229      else
;;;230      {
;;;231        // More data to transfer
;;;232        TU_ASSERT( _data_stage_xact(rhport) );
;;;233      }
;;;234    
;;;235      return true;
;;;236    }
00024c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.592|
000250  e59f019c          LDR      r0,|L1.1012|
000254  e3500000          CMP      r0,#0                 ;179
000258  0a000002          BEQ      |L1.616|
00025c  e51f10cc          LDR      r1,|L1.408|
000260  e1a00006          MOV      r0,r6                 ;179
000264  ebfffffe          BL       dcd_edpt0_status_complete
                  |L1.616|
000268  e5943010          LDR      r3,[r4,#0x10]         ;181  ; _ctrl_xfer
00026c  e3530000          CMP      r3,#0                 ;181
000270  0a000056          BEQ      |L1.976|
000274  e51f20e4          LDR      r2,|L1.408|
000278  e3a01003          MOV      r1,#3                 ;184
00027c  e1a00006          MOV      r0,r6                 ;184
000280  e12fff33          BLX      r3                    ;184
000284  ea000051          B        |L1.976|
                  |L1.648|
000288  e3100080          TST      r0,#0x80              ;190
00028c  1a000005          BNE      |L1.680|
000290  e5940008          LDR      r0,[r4,#8]            ;192  ; _ctrl_xfer
000294  e3500000          CMP      r0,#0                 ;192
000298  08bd81f0          POPEQ    {r4-r8,pc}
00029c  e1a02003          MOV      r2,r3                 ;193
0002a0  e51f110c          LDR      r1,|L1.412|
0002a4  ebfffffe          BL       __aeabi_memcpy
                  |L1.680|
0002a8  e1d410be          LDRH     r1,[r4,#0xe]          ;197  ; _ctrl_xfer
0002ac  e1a00805          LSL      r0,r5,#16             ;197
0002b0  e1a00820          LSR      r0,r0,#16             ;197
0002b4  e0800001          ADD      r0,r0,r1              ;197
0002b8  e3c0c801          BIC      r12,r0,#0x10000       ;197
0002bc  e1c4c0be          STRH     r12,[r4,#0xe]         ;197  ; _ctrl_xfer
0002c0  e5940008          LDR      r0,[r4,#8]            ;198  ; _ctrl_xfer
0002c4  e0801005          ADD      r1,r0,r5              ;198
0002c8  e5841008          STR      r1,[r4,#8]            ;198  ; _ctrl_xfer
0002cc  e1d400b6          LDRH     r0,[r4,#6]            ;202  ; _ctrl_xfer
0002d0  e150000c          CMP      r0,r12                ;202
0002d4  0a000001          BEQ      |L1.736|
0002d8  e3550040          CMP      r5,#0x40              ;202
0002dc  2a00001f          BCS      |L1.864|
                  |L1.736|
0002e0  e5943010          LDR      r3,[r4,#0x10]         ;209  ; _ctrl_xfer
0002e4  e3530000          CMP      r3,#0                 ;209
0002e8  0a000005          BEQ      |L1.772|
0002ec  e51f215c          LDR      r2,|L1.408|
0002f0  e3a01002          MOV      r1,#2                 ;215
0002f4  e1a00006          MOV      r0,r6                 ;215
0002f8  e12fff33          BLX      r3                    ;215
0002fc  e3500000          CMP      r0,#0                 ;218
000300  0a00000f          BEQ      |L1.836|
                  |L1.772|
000304  e5d41000          LDRB     r1,[r4,#0]            ;215
000308  e3a03000          MOV      r3,#0                 ;215
00030c  e1a00006          MOV      r0,r6                 ;221
000310  e3110080          TST      r1,#0x80              ;221
000314  13a01000          MOVNE    r1,#0                 ;221
000318  03a01080          MOVEQ    r1,#0x80              ;221
00031c  e1a02003          MOV      r2,r3                 ;221
000320  ebfffffe          BL       usbd_edpt_xfer
000324  e3500000          CMP      r0,#0                 ;221
000328  1a000028          BNE      |L1.976|
00032c  e59f10bc          LDR      r1,|L1.1008|
000330  e3a020dd          MOV      r2,#0xdd              ;221
000334  e24f0f66          ADR      r0,|L1.420|
000338  ebfffffe          BL       __2printf
00033c  e3a00000          MOV      r0,#0                 ;221
000340  e8bd81f0          POP      {r4-r8,pc}
                  |L1.836|
000344  e3a01000          MOV      r1,#0                 ;225
000348  e1a00006          MOV      r0,r6                 ;225
00034c  ebfffffe          BL       dcd_edpt_stall
000350  e3a01080          MOV      r1,#0x80              ;226
000354  e1a00006          MOV      r0,r6                 ;226
000358  ebfffffe          BL       dcd_edpt_stall
00035c  ea00001b          B        |L1.976|
                  |L1.864|
000360  e1d400bc          LDRH     r0,[r4,#0xc]          ;226  ; _ctrl_xfer
000364  e3a07000          MOV      r7,#0                 ;226
000368  e040000c          SUB      r0,r0,r12             ;226
00036c  e1a05800          LSL      r5,r0,#16             ;226
000370  e5d40000          LDRB     r0,[r4,#0]            ;226  ; _ctrl_xfer
000374  e1a05825          LSR      r5,r5,#16             ;226
000378  e3550040          CMP      r5,#0x40              ;226
00037c  e3100080          TST      r0,#0x80              ;226
000380  23a05040          MOVCS    r5,#0x40              ;226
000384  0a000007          BEQ      |L1.936|
000388  e3550000          CMP      r5,#0                 ;226
00038c  e3a07080          MOV      r7,#0x80              ;226
000390  0a000007          BEQ      |L1.948|
000394  e51f0200          LDR      r0,|L1.412|
000398  e3550040          CMP      r5,#0x40              ;226
00039c  e1a02005          MOV      r2,r5                 ;226
0003a0  8a00000c          BHI      |L1.984|
0003a4  ebfffffe          BL       __aeabi_memcpy
                  |L1.936|
0003a8  e3550000          CMP      r5,#0                 ;226
0003ac  151f2218          LDRNE    r2,|L1.412|
0003b0  1a000000          BNE      |L1.952|
                  |L1.948|
0003b4  e3a02000          MOV      r2,#0                 ;226
                  |L1.952|
0003b8  e1a03005          MOV      r3,r5                 ;226
0003bc  e1a01007          MOV      r1,r7                 ;226
0003c0  e1a00006          MOV      r0,r6                 ;226
0003c4  ebfffffe          BL       usbd_edpt_xfer
0003c8  e3500000          CMP      r0,#0                 ;232
0003cc  0a000001          BEQ      |L1.984|
                  |L1.976|
0003d0  e3a00001          MOV      r0,#1                 ;235
0003d4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.984|
0003d8  e59f1010          LDR      r1,|L1.1008|
0003dc  e3a020e8          MOV      r2,#0xe8              ;232
0003e0  e24f0f91          ADR      r0,|L1.420|
0003e4  ebfffffe          BL       __2printf
0003e8  e3a00000          MOV      r0,#0                 ;232
0003ec  e8bd81f0          POP      {r4-r8,pc}
;;;237    
                          ENDP

                  |L1.1008|
                          DCD      ||.constdata||+0x11
                  |L1.1012|
                          DCD      dcd_edpt0_status_complete

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ctrl_xfer
                          %        20
                  _usbd_ctrl_buf
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  7475645f          DCB      0x74,0x75,0x64,0x5f
000004  636f6e74          DCB      0x63,0x6f,0x6e,0x74
000008  726f6c5f          DCB      0x72,0x6f,0x6c,0x5f
00000c  78666572          DCB      0x78,0x66,0x65,0x72
000010  00                DCB      0x00
                  |symbol_number.15|
000011  757362            DCB      0x75,0x73,0x62
000014  645f636f          DCB      0x64,0x5f,0x63,0x6f
000018  6e74726f          DCB      0x6e,0x74,0x72,0x6f
00001c  6c5f7866          DCB      0x6c,0x5f,0x78,0x66
000020  65725f63          DCB      0x65,0x72,0x5f,0x63
000024  6200              DCB      0x62,0x00

                          AREA ||i.__ARM_common_memcpy1_8||, COMGROUP=__ARM_common_memcpy1_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memcpy1_8 PROC
000000  e5d12000          LDRB     r2,[r1,#0]
000004  e5c02000          STRB     r2,[r0,#0]
000008  e5d13001          LDRB     r3,[r1,#1]
00000c  e5c03001          STRB     r3,[r0,#1]
000010  e5d1c002          LDRB     r12,[r1,#2]
000014  e5c0c002          STRB     r12,[r0,#2]
000018  e5d12003          LDRB     r2,[r1,#3]
00001c  e5c02003          STRB     r2,[r0,#3]
000020  e5d13004          LDRB     r3,[r1,#4]
000024  e5c03004          STRB     r3,[r0,#4]
000028  e5d1c005          LDRB     r12,[r1,#5]
00002c  e5c0c005          STRB     r12,[r0,#5]
000030  e5d12006          LDRB     r2,[r1,#6]
000034  e5c02006          STRB     r2,[r0,#6]
000038  e5d13007          LDRB     r3,[r1,#7]
00003c  e5c03007          STRB     r3,[r0,#7]
000040  e12fff1e          BX       lr
                          ENDP

