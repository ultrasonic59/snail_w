; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usbd.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usbd.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usbd.crf ..\tinyusb\src\device\usbd.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tud_speed_get PROC
;;;343    //--------------------------------------------------------------------+
;;;344    tusb_speed_t tud_speed_get(void)
000000  e59f020c          LDR      r0,|L1.532|
;;;345    {
;;;346      return (tusb_speed_t) _usbd_dev.speed;
000004  e5d00002          LDRB     r0,[r0,#2]  ; _usbd_dev
;;;347    }
000008  e12fff1e          BX       lr
;;;348    
                          ENDP

                  tud_connected PROC
;;;349    bool tud_connected(void)
00000c  e59f0200          LDR      r0,|L1.532|
;;;350    {
;;;351      return _usbd_dev.connected;
000010  e5d00000          LDRB     r0,[r0,#0]  ; _usbd_dev
000014  e2000001          AND      r0,r0,#1
;;;352    }
000018  e12fff1e          BX       lr
;;;353    
                          ENDP

                  tud_mounted PROC
;;;354    bool tud_mounted(void)
00001c  e59f01f0          LDR      r0,|L1.532|
;;;355    {
;;;356      return _usbd_dev.cfg_num ? true : false;
000020  e5d00001          LDRB     r0,[r0,#1]  ; _usbd_dev
000024  e3500000          CMP      r0,#0
000028  13a00001          MOVNE    r0,#1
;;;357    }
00002c  e12fff1e          BX       lr
;;;358    
                          ENDP

                  tud_suspended PROC
;;;359    bool tud_suspended(void)
000030  e59f01dc          LDR      r0,|L1.532|
;;;360    {
;;;361      return _usbd_dev.suspended;
000034  e5d00000          LDRB     r0,[r0,#0]  ; _usbd_dev
000038  e2000004          AND      r0,r0,#4
00003c  e1a00120          LSR      r0,r0,#2
;;;362    }
000040  e12fff1e          BX       lr
;;;363    
                          ENDP

                  tud_remote_wakeup PROC
;;;364    bool tud_remote_wakeup(void)
000044  e59f01c8          LDR      r0,|L1.532|
;;;365    {
;;;366      // only wake up host if this feature is supported and enabled and we are suspended
;;;367      TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en );
000048  e5d01000          LDRB     r1,[r0,#0]  ; _usbd_dev
00004c  e3110004          TST      r1,#4
000050  15d00000          LDRBNE   r0,[r0,#0]  ; _usbd_dev
000054  13100010          TSTNE    r0,#0x10
000058  13100008          TSTNE    r0,#8
00005c  03a00000          MOVEQ    r0,#0
;;;368      dcd_remote_wakeup(_usbd_rhport);
;;;369      return true;
;;;370    }
000060  012fff1e          BXEQ     lr
000064  e92d4010          PUSH     {r4,lr}               ;365
000068  e59f01a8          LDR      r0,|L1.536|
00006c  e5d00001          LDRB     r0,[r0,#1]            ;368  ; _usbd_rhport
000070  ebfffffe          BL       dcd_remote_wakeup
000074  e3a00001          MOV      r0,#1                 ;369
000078  e8bd8010          POP      {r4,pc}
;;;371    
                          ENDP

                  tud_disconnect PROC
;;;372    bool tud_disconnect(void)
00007c  e59f0198          LDR      r0,|L1.540|
;;;373    {
;;;374      TU_VERIFY(dcd_disconnect);
000080  e3500000          CMP      r0,#0
;;;375      dcd_disconnect(_usbd_rhport);
;;;376      return true;
;;;377    }
000084  012fff1e          BXEQ     lr
000088  e92d4010          PUSH     {r4,lr}               ;373
00008c  e59f0184          LDR      r0,|L1.536|
000090  e5d00001          LDRB     r0,[r0,#1]            ;375  ; _usbd_rhport
000094  ebfffffe          BL       dcd_disconnect
000098  e3a00001          MOV      r0,#1                 ;376
00009c  e8bd8010          POP      {r4,pc}
;;;378    
                          ENDP

                  tud_connect PROC
;;;379    bool tud_connect(void)
0000a0  e59f0178          LDR      r0,|L1.544|
;;;380    {
;;;381      TU_VERIFY(dcd_connect);
0000a4  e3500000          CMP      r0,#0
;;;382      dcd_connect(_usbd_rhport);
;;;383      return true;
;;;384    }
0000a8  012fff1e          BXEQ     lr
0000ac  e92d4010          PUSH     {r4,lr}               ;380
0000b0  e59f0160          LDR      r0,|L1.536|
0000b4  e5d00001          LDRB     r0,[r0,#1]            ;382  ; _usbd_rhport
0000b8  ebfffffe          BL       dcd_connect
0000bc  e3a00001          MOV      r0,#1                 ;383
0000c0  e8bd8010          POP      {r4,pc}
;;;385    
                          ENDP

                  tud_inited PROC
;;;388    //--------------------------------------------------------------------+
;;;389    bool tud_inited(void)
0000c4  e59f014c          LDR      r0,|L1.536|
;;;390    {
;;;391      return _usbd_rhport != RHPORT_INVALID;
0000c8  e5d00001          LDRB     r0,[r0,#1]  ; _usbd_rhport
0000cc  e35000ff          CMP      r0,#0xff
0000d0  13a00001          MOVNE    r0,#1
0000d4  03a00000          MOVEQ    r0,#0
;;;392    }
0000d8  e12fff1e          BX       lr
;;;393    
                          ENDP

                  tud_init PROC
;;;394    bool tud_init (uint8_t rhport)
0000dc  e92d47f0          PUSH     {r4-r10,lr}
;;;395    {
0000e0  e59f7130          LDR      r7,|L1.536|
0000e4  e1a08000          MOV      r8,r0
0000e8  e5d70001          LDRB     r0,[r7,#1]  ; _usbd_rhport
0000ec  e35000ff          CMP      r0,#0xff
;;;396      // skip if already initialized
;;;397      if ( tud_inited() ) return true;
0000f0  13a00001          MOVNE    r0,#1
;;;398    
;;;399      TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
;;;400      TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
;;;401      TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
;;;402      TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));
;;;403    
;;;404      tu_varclr(&_usbd_dev);
;;;405    
;;;406    #if OSAL_MUTEX_REQUIRED
;;;407      // Init device mutex
;;;408      _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
;;;409      TU_ASSERT(_usbd_mutex);
;;;410    #endif
;;;411    
;;;412      // Init device queue & task
;;;413      _usbd_q = osal_queue_create(&_usbd_qdef);
;;;414      TU_ASSERT(_usbd_q);
;;;415    
;;;416      // Get application driver if available
;;;417      if ( usbd_app_driver_get_cb )
;;;418      {
;;;419        _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
;;;420      }
;;;421    
;;;422      // Init class drivers
;;;423      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
;;;424      {
;;;425        usbd_class_driver_t const * driver = get_driver(i);
;;;426        TU_ASSERT(driver);
;;;427        TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
;;;428        driver->init();
;;;429      }
;;;430    
;;;431      _usbd_rhport = rhport;
;;;432    
;;;433      // Init device controller driver
;;;434      dcd_init(rhport);
;;;435      dcd_int_enable(rhport);
;;;436    
;;;437      return true;
;;;438    }
0000f4  18bd87f0          POPNE    {r4-r10,pc}
0000f8  e3a01023          MOV      r1,#0x23              ;404
0000fc  e59f0110          LDR      r0,|L1.532|
000100  ebfffffe          BL       __aeabi_memclr4
000104  e59f4118          LDR      r4,|L1.548|
000108  e1a00004          MOV      r0,r4                 ;408
00010c  ebfffffe          BL       os_mut_init
000110  e587400c          STR      r4,[r7,#0xc]          ;408  ; _usbd_mutex
000114  e59f410c          LDR      r4,|L1.552|
000118  e1d400b0          LDRH     r0,[r4,#0]            ;413
00011c  e1a01100          LSL      r1,r0,#2              ;413
000120  e2811010          ADD      r1,r1,#0x10           ;413
000124  e5940008          LDR      r0,[r4,#8]            ;413
000128  e3c11807          BIC      r1,r1,#0x70000        ;413
00012c  ebfffffe          BL       os_mbx_init
000130  e1d420b2          LDRH     r2,[r4,#2]            ;413
000134  e1d410b0          LDRH     r1,[r4,#0]            ;413
000138  e5940004          LDR      r0,[r4,#4]            ;413
00013c  e2823003          ADD      r3,r2,#3              ;413
000140  e1a03123          LSR      r3,r3,#2              ;413
000144  e0010193          MUL      r1,r3,r1              ;413
000148  e2811003          ADD      r1,r1,#3              ;413
00014c  ebfffffe          BL       _init_box
000150  e59f60d4          LDR      r6,|L1.556|
000154  e5874008          STR      r4,[r7,#8]            ;413  ; _usbd_q
000158  e3560000          CMP      r6,#0                 ;417
00015c  0a000002          BEQ      |L1.364|
000160  e2440010          SUB      r0,r4,#0x10           ;419
000164  ebfffffe          BL       usbd_app_driver_get_cb
000168  e5870004          STR      r0,[r7,#4]            ;419  ; _app_driver
                  |L1.364|
00016c  e5d70000          LDRB     r0,[r7,#0]            ;423  ; _app_driver_count
000170  e3a05000          MOV      r5,#0                 ;423
000174  e3700001          CMN      r0,#1                 ;423
000178  159f90b0          LDRNE    r9,|L1.560|
00017c  0a000014          BEQ      |L1.468|
                  |L1.384|
000180  e3560000          CMP      r6,#0                 ;423
000184  e1a04005          MOV      r4,r5                 ;425
000188  0a000018          BEQ      |L1.496|
00018c  e5d70000          LDRB     r0,[r7,#0]            ;425  ; _app_driver_count
000190  e1540000          CMP      r4,r0                 ;425
000194  20450000          SUBCS    r0,r5,r0              ;425
000198  220040ff          ANDCS    r4,r0,#0xff           ;425
00019c  2a000013          BCS      |L1.496|
0001a0  e5970004          LDR      r0,[r7,#4]            ;425  ; _app_driver
0001a4  e0851085          ADD      r1,r5,r5,LSL #1       ;425
0001a8  e0801181          ADD      r1,r0,r1,LSL #3       ;425
                  |L1.428|
0001ac  e3510000          CMP      r1,#0                 ;426
0001b0  0a000011          BEQ      |L1.508|
0001b4  e5910000          LDR      r0,[r1,#0]            ;428
0001b8  e12fff30          BLX      r0                    ;428
0001bc  e5d70000          LDRB     r0,[r7,#0]            ;429  ; _app_driver_count
0001c0  e2851001          ADD      r1,r5,#1              ;429
0001c4  e20150ff          AND      r5,r1,#0xff           ;429
0001c8  e2800001          ADD      r0,r0,#1              ;429
0001cc  e1550000          CMP      r5,r0                 ;429
0001d0  3affffea          BCC      |L1.384|
                  |L1.468|
0001d4  e1a00008          MOV      r0,r8                 ;434
0001d8  e5c78001          STRB     r8,[r7,#1]            ;431  ; _usbd_rhport
0001dc  ebfffffe          BL       dcd_init
0001e0  e1a00008          MOV      r0,r8                 ;435
0001e4  ebfffffe          BL       dcd_int_enable
0001e8  e3a00001          MOV      r0,#1                 ;437
0001ec  e8bd87f0          POP      {r4-r10,pc}
                  |L1.496|
0001f0  e3540000          CMP      r4,#0
0001f4  01a01009          MOVEQ    r1,r9
0001f8  0affffeb          BEQ      |L1.428|
                  |L1.508|
0001fc  e59f2030          LDR      r2,|L1.564|
000200  e59f1030          LDR      r1,|L1.568|
000204  e28f0030          ADR      r0,|L1.572|
000208  ebfffffe          BL       __2printf
00020c  e3a00000          MOV      r0,#0                 ;426
000210  e8bd87f0          POP      {r4-r10,pc}
                  |L1.532|
                          DCD      ||.bss||
                  |L1.536|
                          DCD      ||.data||
                  |L1.540|
                          DCD      dcd_disconnect
                  |L1.544|
                          DCD      dcd_connect
                  |L1.548|
                          DCD      ||.bss||+0x24
                  |L1.552|
                          DCD      ||.data||+0x10
                  |L1.556|
                          DCD      usbd_app_driver_get_cb
                  |L1.560|
                          DCD      ||.constdata||
                  |L1.564|
                          DCD      0x000001aa
                  |L1.568|
                          DCD      ||.constdata||+0x18
                  |L1.572|
00023c  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
000240  643a2041
000244  53534552
000248  54204641
00024c  494c4544
000250  0d0a00  
000253  00                DCB      0
                          ENDP

                  tud_task_event_ready PROC
;;;459    
;;;460    bool tud_task_event_ready(void)
000254  e51f0044          LDR      r0,|L1.536|
;;;461    {
000258  e92d4010          PUSH     {r4,lr}
00025c  e5d01001          LDRB     r1,[r0,#1]  ; _usbd_rhport
000260  e35100ff          CMP      r1,#0xff
;;;462      // Skip if stack is not initialized
;;;463      if ( !tud_inited() ) return false;
000264  03a00000          MOVEQ    r0,#0
;;;464    
;;;465      return !osal_queue_empty(_usbd_q);
;;;466    }
000268  08bd8010          POPEQ    {r4,pc}
00026c  e5904008          LDR      r4,[r0,#8]  ; _usbd_q
000270  e5940008          LDR      r0,[r4,#8]
000274  ebfffffe          BL       os_mbx_check
000278  e1d410b0          LDRH     r1,[r4,#0]
00027c  e1500001          CMP      r0,r1
000280  03a00001          MOVEQ    r0,#1
000284  13a00000          MOVNE    r0,#0
000288  e2200001          EOR      r0,r0,#1              ;465
00028c  e8bd8010          POP      {r4,pc}
;;;467    
                          ENDP

                  usbd_edpt_stall PROC
;;;1318   
;;;1319   void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
000290  e51f3084          LDR      r3,|L1.532|
;;;1320   {
;;;1321     rhport = _usbd_rhport;
;;;1322   
;;;1323     uint8_t const epnum = tu_edpt_number(ep_addr);
000294  e3c10080          BIC      r0,r1,#0x80
;;;1324     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1325   
;;;1326     // only stalled if currently cleared
;;;1327     if ( !_usbd_dev.ep_status[epnum][dir].stalled )
000298  e0833080          ADD      r3,r3,r0,LSL #1
00029c  e92d4010          PUSH     {r4,lr}               ;1320
0002a0  e51f0090          LDR      r0,|L1.536|
0002a4  e08343a1          ADD      r4,r3,r1,LSR #7
0002a8  e5d00001          LDRB     r0,[r0,#1]            ;1321  ; _usbd_rhport
0002ac  e5d4201b          LDRB     r2,[r4,#0x1b]
0002b0  e3120002          TST      r2,#2
;;;1328     {
;;;1329       TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
;;;1330       dcd_edpt_stall(rhport, ep_addr);
;;;1331       _usbd_dev.ep_status[epnum][dir].stalled = 1;
;;;1332       _usbd_dev.ep_status[epnum][dir].busy = 1;
;;;1333     }
;;;1334   }
0002b4  18bd8010          POPNE    {r4,pc}
0002b8  ebfffffe          BL       dcd_edpt_stall
0002bc  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1331
0002c0  e3800002          ORR      r0,r0,#2              ;1331
0002c4  e5c4001b          STRB     r0,[r4,#0x1b]         ;1331
0002c8  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1332
0002cc  e3800001          ORR      r0,r0,#1              ;1332
0002d0  e5c4001b          STRB     r0,[r4,#0x1b]         ;1332
0002d4  e8bd8010          POP      {r4,pc}
;;;1335   
                          ENDP

                  usbd_edpt_clear_stall PROC
;;;1336   void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
0002d8  e51f30cc          LDR      r3,|L1.532|
;;;1337   {
;;;1338     rhport = _usbd_rhport;
;;;1339   
;;;1340     uint8_t const epnum = tu_edpt_number(ep_addr);
0002dc  e3c10080          BIC      r0,r1,#0x80
;;;1341     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1342   
;;;1343     // only clear if currently stalled
;;;1344     if ( _usbd_dev.ep_status[epnum][dir].stalled )
0002e0  e0833080          ADD      r3,r3,r0,LSL #1
0002e4  e92d4010          PUSH     {r4,lr}               ;1337
0002e8  e51f00d8          LDR      r0,|L1.536|
0002ec  e08343a1          ADD      r4,r3,r1,LSR #7
0002f0  e5d00001          LDRB     r0,[r0,#1]            ;1338  ; _usbd_rhport
0002f4  e5d4201b          LDRB     r2,[r4,#0x1b]
0002f8  e3120002          TST      r2,#2
;;;1345     {
;;;1346       TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
;;;1347       dcd_edpt_clear_stall(rhport, ep_addr);
;;;1348       _usbd_dev.ep_status[epnum][dir].stalled = 0;
;;;1349       _usbd_dev.ep_status[epnum][dir].busy = 0;
;;;1350     }
;;;1351   }
0002fc  08bd8010          POPEQ    {r4,pc}
000300  ebfffffe          BL       dcd_edpt_clear_stall
000304  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1348
000308  e3c00002          BIC      r0,r0,#2              ;1348
00030c  e5c4001b          STRB     r0,[r4,#0x1b]         ;1348
000310  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1349
000314  e3c00001          BIC      r0,r0,#1              ;1349
000318  e5c4001b          STRB     r0,[r4,#0x1b]         ;1349
00031c  e8bd8010          POP      {r4,pc}
;;;1352   
                          ENDP

                  usbd_edpt_stalled PROC
;;;1353   bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
000320  e51f2114          LDR      r2,|L1.532|
;;;1354   {
;;;1355     (void) rhport;
;;;1356   
;;;1357     uint8_t const epnum = tu_edpt_number(ep_addr);
000324  e3c10080          BIC      r0,r1,#0x80
;;;1358     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1359   
;;;1360     return _usbd_dev.ep_status[epnum][dir].stalled;
000328  e0820080          ADD      r0,r2,r0,LSL #1
00032c  e08003a1          ADD      r0,r0,r1,LSR #7
000330  e5d0001b          LDRB     r0,[r0,#0x1b]
000334  e2000002          AND      r0,r0,#2
000338  e1a000a0          LSR      r0,r0,#1
;;;1361   }
00033c  e12fff1e          BX       lr
;;;1362   
                          ENDP

                  tud_task_ext PROC
;;;485     */
;;;486    void tud_task_ext(uint32_t timeout_ms, bool in_isr)
000340  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;487    {
000344  e51f5134          LDR      r5,|L1.536|
000348  e24dd044          SUB      sp,sp,#0x44
00034c  e5d50001          LDRB     r0,[r5,#1]  ; _usbd_rhport
000350  e35000ff          CMP      r0,#0xff
;;;488      (void) in_isr; // not implemented yet
;;;489    
;;;490      // Skip if stack is not initialized
;;;491      if ( !tud_inited() ) return;
;;;492    
;;;493      // Loop until there is no more events in the queue
;;;494      while (1)
;;;495      {
;;;496        dcd_event_t event;
;;;497        if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
;;;498    
;;;499    #if CFG_TUSB_DEBUG >= 2
;;;500        if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
;;;501        TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
;;;502    #endif
;;;503    
;;;504        switch ( event.event_id )
;;;505        {
;;;506          case DCD_EVENT_BUS_RESET:
;;;507            TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
;;;508            usbd_reset(event.rhport);
;;;509            _usbd_dev.speed = event.bus_reset.speed;
;;;510          break;
;;;511    
;;;512          case DCD_EVENT_UNPLUGGED:
;;;513            TU_LOG(USBD_DBG, "\r\n");
;;;514            usbd_reset(event.rhport);
;;;515    
;;;516            // invoke callback
;;;517            if (tud_umount_cb) tud_umount_cb();
;;;518          break;
;;;519    
;;;520          case DCD_EVENT_SETUP_RECEIVED:
;;;521            TU_LOG_PTR(USBD_DBG, &event.setup_received);
;;;522            TU_LOG(USBD_DBG, "\r\n");
;;;523    
;;;524            // Mark as connected after receiving 1st setup packet.
;;;525            // But it is easier to set it every time instead of wasting time to check then set
;;;526            _usbd_dev.connected = 1;
;;;527    
;;;528            // mark both in & out control as free
;;;529            _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
;;;530            _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
;;;531            _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
;;;532            _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
;;;533    
;;;534            // Process control request
;;;535            if ( !process_control_request(event.rhport, &event.setup_received) )
;;;536            {
;;;537              TU_LOG(USBD_DBG, "  Stall EP0\r\n");
;;;538              // Failed -> stall both control endpoint IN and OUT
;;;539              dcd_edpt_stall(event.rhport, 0);
;;;540              dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
;;;541            }
;;;542          break;
;;;543    
;;;544          case DCD_EVENT_XFER_COMPLETE:
;;;545          {
;;;546            // Invoke the class callback associated with the endpoint address
;;;547            uint8_t const ep_addr = event.xfer_complete.ep_addr;
;;;548            uint8_t const epnum   = tu_edpt_number(ep_addr);
;;;549            uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
;;;550    
;;;551            TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
;;;552    
;;;553            _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
;;;554            _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
;;;555    
;;;556            if ( 0 == epnum )
;;;557            {
;;;558              usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
;;;559              .len);
;;;560            }
;;;561            else
;;;562            {
;;;563              usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
;;;564              TU_ASSERT(driver, );
;;;565    
;;;566              TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
;;;567              driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
;;;568            }
;;;569          }
;;;570          break;
;;;571    
;;;572          case DCD_EVENT_SUSPEND:
;;;573            // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
;;;574            // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
;;;575            // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
;;;576            if ( _usbd_dev.connected )
;;;577            {
;;;578              TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
;;;579              if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
;;;580            }else
;;;581            {
;;;582              TU_LOG(USBD_DBG, " Skipped\r\n");
;;;583            }
;;;584          break;
;;;585    
;;;586          case DCD_EVENT_RESUME:
;;;587            if ( _usbd_dev.connected )
;;;588            {
;;;589              TU_LOG(USBD_DBG, "\r\n");
;;;590              if (tud_resume_cb) tud_resume_cb();
;;;591            }else
;;;592            {
;;;593              TU_LOG(USBD_DBG, " Skipped\r\n");
;;;594            }
;;;595          break;
;;;596    
;;;597          case USBD_EVENT_FUNC_CALL:
;;;598            TU_LOG(USBD_DBG, "\r\n");
;;;599            if ( event.func_call.func ) event.func_call.func(event.func_call.param);
;;;600          break;
;;;601    
;;;602          case DCD_EVENT_SOF:
;;;603          default:
;;;604            TU_BREAKPOINT();
;;;605          break;
;;;606        }
;;;607    
;;;608    #if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
;;;609        // return if there is no more events, for application to run other background
;;;610        if (osal_queue_empty(_usbd_q)) return;
;;;611    #endif
;;;612      }
;;;613    }
000354  028dd04c          ADDEQ    sp,sp,#0x4c
000358  08bd8ff0          POPEQ    {r4-r11,pc}
00035c  e59d0044          LDR      r0,[sp,#0x44]         ;487
000360  e51f713c          LDR      r7,|L1.556|
000364  e1a00800          LSL      r0,r0,#16             ;487
000368  e1a00820          LSR      r0,r0,#16             ;487
00036c  e58d003c          STR      r0,[sp,#0x3c]         ;487
000370  e59f04d8          LDR      r0,|L1.2128|
000374  e51f914c          LDR      r9,|L1.560|
000378  e58d0038          STR      r0,[sp,#0x38]         ;487
                  |L1.892|
00037c  e59d0044          LDR      r0,[sp,#0x44]         ;497
000380  e5954008          LDR      r4,[r5,#8]            ;497  ; _usbd_q
000384  e3700001          CMN      r0,#1                 ;497
000388  059f24c4          LDREQ    r2,|L1.2132|
00038c  e28d600c          ADD      r6,sp,#0xc            ;497
000390  0a000002          BEQ      |L1.928|
000394  e59f24bc          LDR      r2,|L1.2136|
000398  e1500002          CMP      r0,r2                 ;497
00039c  359d203c          LDRCC    r2,[sp,#0x3c]         ;497
                  |L1.928|
0003a0  e5940008          LDR      r0,[r4,#8]            ;497
0003a4  e28d1018          ADD      r1,sp,#0x18           ;497
0003a8  ebfffffe          BL       os_mbx_wait
0003ac  e1d420b2          LDRH     r2,[r4,#2]            ;497
0003b0  e59d1018          LDR      r1,[sp,#0x18]         ;497
0003b4  e1a00006          MOV      r0,r6                 ;497
0003b8  ebfffffe          BL       __aeabi_memcpy
0003bc  e5940004          LDR      r0,[r4,#4]            ;497
0003c0  e59d1018          LDR      r1,[sp,#0x18]         ;497
0003c4  ef000002          SVC      #0x2                  ;497
0003c8  e5dd000d          LDRB     r0,[sp,#0xd]          ;504
0003cc  e3a04001          MOV      r4,#1                 ;504
0003d0  e3500009          CMP      r0,#9                 ;504
0003d4  379ff100          LDRCC    pc,[pc,r0,LSL #2]     ;504
                  ||__switch$$||                  ; Alternate entry point
;;;614    
0003d8  ea0002f2          B        |L1.4008|
                          DCD      ||__switch$$||+0xbd0
                          DCD      ||__switch$$||+0x28
                          DCD      ||__switch$$||+0xf0
                          DCD      ||__switch$$||+0xbd0
                          DCD      ||__switch$$||+0xb6c
                          DCD      ||__switch$$||+0xb98
                          DCD      ||__switch$$||+0x1b8
                          DCD      ||__switch$$||+0xab4
                          DCD      ||__switch$$||+0xbb8
000400  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
000404  e5dd800c          LDRB     r8,[sp,#0xc]
000408  e3a06000          MOV      r6,#0
00040c  e3700001          CMN      r0,#1
000410  0a000018          BEQ      |L1.1144|
                  |L1.1044|
000414  e3570000          CMP      r7,#0
000418  e1a04006          MOV      r4,r6
00041c  0a000007          BEQ      |L1.1088|
000420  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
000424  e1540000          CMP      r4,r0
000428  20460000          SUBCS    r0,r6,r0
00042c  220040ff          ANDCS    r4,r0,#0xff
000430  35950004          LDRCC    r0,[r5,#4]  ; _app_driver
000434  30861086          ADDCC    r1,r6,r6,LSL #1
000438  30800181          ADDCC    r0,r0,r1,LSL #3
00043c  3a000002          BCC      |L1.1100|
                  |L1.1088|
000440  e3540000          CMP      r4,#0
000444  01a00009          MOVEQ    r0,r9
000448  1a000019          BNE      |L1.1204|
                  |L1.1100|
00044c  e3500000          CMP      r0,#0
000450  0a000017          BEQ      |L1.1204|
000454  e5901004          LDR      r1,[r0,#4]
000458  e1a00008          MOV      r0,r8
00045c  e12fff31          BLX      r1
000460  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
000464  e2861001          ADD      r1,r6,#1
000468  e20160ff          AND      r6,r1,#0xff
00046c  e2800001          ADD      r0,r0,#1
000470  e1560000          CMP      r6,r0
000474  3affffe6          BCC      |L1.1044|
                  |L1.1144|
000478  e51f026c          LDR      r0,|L1.532|
00047c  e3a01023          MOV      r1,#0x23
000480  ebfffffe          BL       __aeabi_memclr4
000484  e59f03d0          LDR      r0,|L1.2140|
000488  e3a020ff          MOV      r2,#0xff
00048c  e3a01010          MOV      r1,#0x10
000490  ebfffffe          BL       __aeabi_memset
000494  e59d0038          LDR      r0,[sp,#0x38]
000498  e3a010ff          MOV      r1,#0xff
00049c  ebfffffe          BL       __ARM_common_memset1_8
                  |L1.1184|
0004a0  ebfffffe          BL       usbd_control_reset
0004a4  e5dd0010          LDRB     r0,[sp,#0x10]
0004a8  e51f129c          LDR      r1,|L1.532|
0004ac  e5c10002          STRB     r0,[r1,#2]  ; _usbd_dev
0004b0  ea0002bc          B        |L1.4008|
                  |L1.1204|
0004b4  e59f23a4          LDR      r2,|L1.2144|
0004b8  e59f13a4          LDR      r1,|L1.2148|
0004bc  e28f0fe9          ADR      r0,|L1.2152|
0004c0  ebfffffe          BL       __2printf
0004c4  eafffff5          B        |L1.1184|
0004c8  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
0004cc  e5dd800c          LDRB     r8,[sp,#0xc]
0004d0  e3a06000          MOV      r6,#0
0004d4  e3700001          CMN      r0,#1
0004d8  0a000018          BEQ      |L1.1344|
                  |L1.1244|
0004dc  e3570000          CMP      r7,#0
0004e0  e1a04006          MOV      r4,r6
0004e4  0a000007          BEQ      |L1.1288|
0004e8  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
0004ec  e1540000          CMP      r4,r0
0004f0  20460000          SUBCS    r0,r6,r0
0004f4  220040ff          ANDCS    r4,r0,#0xff
0004f8  35950004          LDRCC    r0,[r5,#4]  ; _app_driver
0004fc  30861086          ADDCC    r1,r6,r6,LSL #1
000500  30800181          ADDCC    r0,r0,r1,LSL #3
000504  3a000002          BCC      |L1.1300|
                  |L1.1288|
000508  e3540000          CMP      r4,#0
00050c  01a00009          MOVEQ    r0,r9
000510  1a000019          BNE      |L1.1404|
                  |L1.1300|
000514  e3500000          CMP      r0,#0
000518  0a000017          BEQ      |L1.1404|
00051c  e5901004          LDR      r1,[r0,#4]
000520  e1a00008          MOV      r0,r8
000524  e12fff31          BLX      r1
000528  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
00052c  e2861001          ADD      r1,r6,#1
000530  e20160ff          AND      r6,r1,#0xff
000534  e2800001          ADD      r0,r0,#1
000538  e1560000          CMP      r6,r0
00053c  3affffe6          BCC      |L1.1244|
                  |L1.1344|
000540  e51f0334          LDR      r0,|L1.532|
000544  e3a01023          MOV      r1,#0x23
000548  ebfffffe          BL       __aeabi_memclr4
00054c  e59f0308          LDR      r0,|L1.2140|
000550  e3a020ff          MOV      r2,#0xff
000554  e3a01010          MOV      r1,#0x10
000558  ebfffffe          BL       __aeabi_memset
00055c  e59d0038          LDR      r0,[sp,#0x38]
000560  e3a010ff          MOV      r1,#0xff
000564  ebfffffe          BL       __ARM_common_memset1_8
                  |L1.1384|
000568  ebfffffe          BL       usbd_control_reset
00056c  e59f030c          LDR      r0,|L1.2176|
000570  e3500000          CMP      r0,#0
000574  1bfffffe          BLNE     tud_umount_cb
000578  ea00028a          B        |L1.4008|
                  |L1.1404|
00057c  e59f22dc          LDR      r2,|L1.2144|
000580  e59f12dc          LDR      r1,|L1.2148|
000584  e28f0fb7          ADR      r0,|L1.2152|
000588  ebfffffe          BL       __2printf
00058c  eafffff5          B        |L1.1384|
000590  e51f6384          LDR      r6,|L1.532|
000594  e5d60000          LDRB     r0,[r6,#0]  ; _usbd_dev
000598  e3800001          ORR      r0,r0,#1
00059c  e5c60000          STRB     r0,[r6,#0]  ; _usbd_dev
0005a0  e5d6001b          LDRB     r0,[r6,#0x1b]  ; _usbd_dev
0005a4  e3c00001          BIC      r0,r0,#1
0005a8  e5c6001b          STRB     r0,[r6,#0x1b]  ; _usbd_dev
0005ac  e5d6001b          LDRB     r0,[r6,#0x1b]  ; _usbd_dev
0005b0  e3c00004          BIC      r0,r0,#4
0005b4  e5c6001b          STRB     r0,[r6,#0x1b]  ; _usbd_dev
0005b8  e5d6001c          LDRB     r0,[r6,#0x1c]  ; _usbd_dev
0005bc  e3c00001          BIC      r0,r0,#1
0005c0  e5c6001c          STRB     r0,[r6,#0x1c]  ; _usbd_dev
0005c4  e5d6001c          LDRB     r0,[r6,#0x1c]  ; _usbd_dev
0005c8  e3c00004          BIC      r0,r0,#4
0005cc  e5c6001c          STRB     r0,[r6,#0x1c]  ; _usbd_dev
0005d0  e5dd000c          LDRB     r0,[sp,#0xc]
0005d4  e58d0004          STR      r0,[sp,#4]
0005d8  e28d0010          ADD      r0,sp,#0x10
0005dc  e58d0008          STR      r0,[sp,#8]
0005e0  e3a00000          MOV      r0,#0
0005e4  ebfffffe          BL       usbd_control_set_complete_callback
0005e8  e5dd0010          LDRB     r0,[sp,#0x10]
0005ec  e3a02003          MOV      r2,#3
0005f0  e1a01c80          LSL      r1,r0,#25
0005f4  e1520f21          CMP      r2,r1,LSR #30
0005f8  8a000004          BHI      |L1.1552|
0005fc  e59f2280          LDR      r2,|L1.2180|
000600  e59f1280          LDR      r1,|L1.2184|
000604  e28f0f97          ADR      r0,|L1.2152|
000608  ebfffffe          BL       __2printf
00060c  ea0001e2          B        |L1.3484|
                  |L1.1552|
000610  e3a02002          MOV      r2,#2
000614  e1520f21          CMP      r2,r1,LSR #30
000618  1a000007          BNE      |L1.1596|
00061c  e59f0268          LDR      r0,|L1.2188|
000620  e3500000          CMP      r0,#0
000624  0a0001dc          BEQ      |L1.3484|
000628  ebfffffe          BL       usbd_control_set_complete_callback
00062c  e99d0005          LDMIB    sp,{r0,r2}
000630  e3a01001          MOV      r1,#1
000634  ebfffffe          BL       tud_vendor_control_xfer_cb
000638  ea0001ce          B        |L1.3448|
                  |L1.1596|
00063c  e210201f          ANDS     r2,r0,#0x1f
000640  0a000004          BEQ      |L1.1624|
000644  e3520001          CMP      r2,#1
000648  0a000184          BEQ      |L1.3168|
00064c  e3520002          CMP      r2,#2
000650  0a0001ab          BEQ      |L1.3332|
000654  ea0001d0          B        |L1.3484|
                  |L1.1624|
000658  e1540f21          CMP      r4,r1,LSR #30
00065c  1a000010          BNE      |L1.1700|
000660  e1dd01b4          LDRH     r0,[sp,#0x14]
000664  e20000ff          AND      r0,r0,#0xff
000668  e3500010          CMP      r0,#0x10
00066c  2a0001ca          BCS      |L1.3484|
000670  e0800006          ADD      r0,r0,r6
000674  e5d00003          LDRB     r0,[r0,#3]
000678  ebfffffe          BL       get_driver
00067c  e1b04000          MOVS     r4,r0
000680  0a0001c5          BEQ      |L1.3484|
000684  e99d0140          LDMIB    sp,{r6,r8}
000688  e594000c          LDR      r0,[r4,#0xc]
00068c  ebfffffe          BL       usbd_control_set_complete_callback
000690  e594300c          LDR      r3,[r4,#0xc]
000694  e1a02008          MOV      r2,r8
000698  e3a01001          MOV      r1,#1
00069c  e1a00006          MOV      r0,r6
0006a0  ea0001b3          B        |L1.3444|
                  |L1.1700|
0006a4  e3100060          TST      r0,#0x60
0006a8  1a0001bb          BNE      |L1.3484|
0006ac  e5dd0011          LDRB     r0,[sp,#0x11]
0006b0  e350000a          CMP      r0,#0xa
0006b4  379ff100          LDRCC    pc,[pc,r0,LSL #2]
                  |symbol_number.57|                  ; Alternate entry point
;;;485     */
;;;486    void tud_task_ext(uint32_t timeout_ms, bool in_isr)
;;;487    {
;;;488      (void) in_isr; // not implemented yet
;;;489    
;;;490      // Skip if stack is not initialized
;;;491      if ( !tud_inited() ) return;
;;;492    
;;;493      // Loop until there is no more events in the queue
;;;494      while (1)
;;;495      {
;;;496        dcd_event_t event;
;;;497        if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
;;;498    
;;;499    #if CFG_TUSB_DEBUG >= 2
;;;500        if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
;;;501        TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
;;;502    #endif
;;;503    
;;;504        switch ( event.event_id )
;;;505        {
;;;506          case DCD_EVENT_BUS_RESET:
;;;507            TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
;;;508            usbd_reset(event.rhport);
;;;509            _usbd_dev.speed = event.bus_reset.speed;
;;;510          break;
;;;511    
;;;512          case DCD_EVENT_UNPLUGGED:
;;;513            TU_LOG(USBD_DBG, "\r\n");
;;;514            usbd_reset(event.rhport);
;;;515    
;;;516            // invoke callback
;;;517            if (tud_umount_cb) tud_umount_cb();
;;;518          break;
;;;519    
;;;520          case DCD_EVENT_SETUP_RECEIVED:
;;;521            TU_LOG_PTR(USBD_DBG, &event.setup_received);
;;;522            TU_LOG(USBD_DBG, "\r\n");
;;;523    
;;;524            // Mark as connected after receiving 1st setup packet.
;;;525            // But it is easier to set it every time instead of wasting time to check then set
;;;526            _usbd_dev.connected = 1;
;;;527    
;;;528            // mark both in & out control as free
;;;529            _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
;;;530            _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
;;;531            _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
;;;532            _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
;;;533    
;;;534            // Process control request
;;;535            if ( !process_control_request(event.rhport, &event.setup_received) )
;;;536            {
;;;537              TU_LOG(USBD_DBG, "  Stall EP0\r\n");
;;;538              // Failed -> stall both control endpoint IN and OUT
;;;539              dcd_edpt_stall(event.rhport, 0);
;;;540              dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
;;;541            }
;;;542          break;
;;;543    
;;;544          case DCD_EVENT_XFER_COMPLETE:
;;;545          {
;;;546            // Invoke the class callback associated with the endpoint address
;;;547            uint8_t const ep_addr = event.xfer_complete.ep_addr;
;;;548            uint8_t const epnum   = tu_edpt_number(ep_addr);
;;;549            uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
;;;550    
;;;551            TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
;;;552    
;;;553            _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
;;;554            _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
;;;555    
;;;556            if ( 0 == epnum )
;;;557            {
;;;558              usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
;;;559              .len);
;;;560            }
;;;561            else
;;;562            {
;;;563              usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
;;;564              TU_ASSERT(driver, );
;;;565    
;;;566              TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
;;;567              driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
;;;568            }
;;;569          }
;;;570          break;
;;;571    
;;;572          case DCD_EVENT_SUSPEND:
;;;573            // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
;;;574            // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
;;;575            // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
;;;576            if ( _usbd_dev.connected )
;;;577            {
;;;578              TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
;;;579              if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
;;;580            }else
;;;581            {
;;;582              TU_LOG(USBD_DBG, " Skipped\r\n");
;;;583            }
;;;584          break;
;;;585    
;;;586          case DCD_EVENT_RESUME:
;;;587            if ( _usbd_dev.connected )
;;;588            {
;;;589              TU_LOG(USBD_DBG, "\r\n");
;;;590              if (tud_resume_cb) tud_resume_cb();
;;;591            }else
;;;592            {
;;;593              TU_LOG(USBD_DBG, " Skipped\r\n");
;;;594            }
;;;595          break;
;;;596    
;;;597          case USBD_EVENT_FUNC_CALL:
;;;598            TU_LOG(USBD_DBG, "\r\n");
;;;599            if ( event.func_call.func ) event.func_call.func(event.func_call.param);
;;;600          break;
;;;601    
;;;602          case DCD_EVENT_SOF:
;;;603          default:
;;;604            TU_BREAKPOINT();
;;;605          break;
;;;606        }
;;;607    
;;;608    #if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
;;;609        // return if there is no more events, for application to run other background
;;;610        if (osal_queue_empty(_usbd_q)) return;
;;;611    #endif
;;;612      }
;;;613    }
;;;614    
0006b8  ea0001b7          B        |L1.3484|
                          DCD      |symbol_number.57|+0x57c
                          DCD      |symbol_number.57|+0x560
                          DCD      |symbol_number.57|+0x6e4
                          DCD      |symbol_number.57|+0x548
                          DCD      |symbol_number.57|+0x6e4
                          DCD      |symbol_number.57|+0x2c
                          DCD      |symbol_number.57|+0x400
                          DCD      |symbol_number.57|+0x6e4
                          DCD      |symbol_number.57|+0x54
                          DCD      |symbol_number.57|+0x70
0006e4  e59d0008          LDR      r0,[sp,#8]
0006e8  ebfffffe          BL       usbd_control_set_request
0006ec  e1dd01b2          LDRH     r0,[sp,#0x12]
0006f0  e20010ff          AND      r1,r0,#0xff
0006f4  e59d0004          LDR      r0,[sp,#4]
0006f8  ebfffffe          BL       dcd_set_address
0006fc  e5d60000          LDRB     r0,[r6,#0]  ; _usbd_dev
000700  e3800002          ORR      r0,r0,#2
000704  e5c60000          STRB     r0,[r6,#0]  ; _usbd_dev
000708  ea000226          B        |L1.4008|
00070c  e5d60001          LDRB     r0,[r6,#1]  ; _usbd_dev
000710  e3a03001          MOV      r3,#1
000714  e1a0200d          MOV      r2,sp
000718  e5cd0000          STRB     r0,[sp,#0]
00071c  e99d0003          LDMIB    sp,{r0,r1}
000720  ebfffffe          BL       tud_control_xfer
000724  ea00021f          B        |L1.4008|
000728  e51f051c          LDR      r0,|L1.532|
00072c  e1dd11b2          LDRH     r1,[sp,#0x12]
000730  e5d02001          LDRB     r2,[r0,#1]  ; _usbd_dev
000734  e20100ff          AND      r0,r1,#0xff
000738  e1520000          CMP      r2,r0
00073c  e58d0040          STR      r0,[sp,#0x40]
000740  0a0000d8          BEQ      |L1.2728|
000744  e51f4538          LDR      r4,|L1.532|
000748  e5d40001          LDRB     r0,[r4,#1]  ; _usbd_dev
00074c  e3500000          CMP      r0,#0
000750  0a00002b          BEQ      |L1.2052|
000754  e59d0004          LDR      r0,[sp,#4]
000758  ebfffffe          BL       dcd_edpt_close_all
00075c  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
000760  e5d48002          LDRB     r8,[r4,#2]  ; _usbd_dev
000764  e59da004          LDR      r10,[sp,#4]
000768  e3700001          CMN      r0,#1
00076c  e3a06000          MOV      r6,#0
000770  0a000018          BEQ      |L1.2008|
                  |L1.1908|
000774  e3570000          CMP      r7,#0
000778  e1a00006          MOV      r0,r6
00077c  0a000007          BEQ      |L1.1952|
000780  e5d51000          LDRB     r1,[r5,#0]  ; _app_driver_count
000784  e1500001          CMP      r0,r1
000788  20460001          SUBCS    r0,r6,r1
00078c  35951004          LDRCC    r1,[r5,#4]  ; _app_driver
000790  220000ff          ANDCS    r0,r0,#0xff
000794  30860086          ADDCC    r0,r6,r6,LSL #1
000798  30810180          ADDCC    r0,r1,r0,LSL #3
00079c  3a000002          BCC      |L1.1964|
                  |L1.1952|
0007a0  e3500000          CMP      r0,#0
0007a4  01a00009          MOVEQ    r0,r9
0007a8  1a00003a          BNE      |L1.2200|
                  |L1.1964|
0007ac  e3500000          CMP      r0,#0
0007b0  0a000038          BEQ      |L1.2200|
0007b4  e5901004          LDR      r1,[r0,#4]
0007b8  e1a0000a          MOV      r0,r10
0007bc  e12fff31          BLX      r1
0007c0  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
0007c4  e2861001          ADD      r1,r6,#1
0007c8  e20160ff          AND      r6,r1,#0xff
0007cc  e2800001          ADD      r0,r0,#1
0007d0  e1560000          CMP      r6,r0
0007d4  3affffe6          BCC      |L1.1908|
                  |L1.2008|
0007d8  e51f05cc          LDR      r0,|L1.532|
0007dc  e3a01023          MOV      r1,#0x23
0007e0  ebfffffe          BL       __aeabi_memclr4
0007e4  e3a020ff          MOV      r2,#0xff
0007e8  e3a01010          MOV      r1,#0x10
0007ec  e2840003          ADD      r0,r4,#3
0007f0  ebfffffe          BL       __aeabi_memset
0007f4  e59d0038          LDR      r0,[sp,#0x38]
0007f8  e3a010ff          MOV      r1,#0xff
0007fc  ebfffffe          BL       __ARM_common_memset1_8
                  |L1.2048|
000800  e5c48002          STRB     r8,[r4,#2]  ; _usbd_dev
                  |L1.2052|
000804  e59d0040          LDR      r0,[sp,#0x40]
000808  e3500000          CMP      r0,#0
00080c  0a0000a5          BEQ      |L1.2728|
000810  e59d0004          LDR      r0,[sp,#4]
000814  e58d002c          STR      r0,[sp,#0x2c]
000818  e59d0040          LDR      r0,[sp,#0x40]
00081c  e2400001          SUB      r0,r0,#1
000820  e20000ff          AND      r0,r0,#0xff
000824  ebfffffe          BL       tud_descriptor_configuration_cb
000828  e3500000          CMP      r0,#0
00082c  0a000002          BEQ      |L1.2108|
000830  e5d01001          LDRB     r1,[r0,#1]
000834  e3510002          CMP      r1,#2
000838  0a00001b          BEQ      |L1.2220|
                  |L1.2108|
00083c  e59f204c          LDR      r2,|L1.2192|
000840  e59f104c          LDR      r1,|L1.2196|
000844  e28f001c          ADR      r0,|L1.2152|
000848  ebfffffe          BL       __2printf
00084c  ea00008a          B        |L1.2684|
                  |L1.2128|
                          DCD      ||.bss||+0x13
                  |L1.2132|
                          DCD      0x0000ffff
                  |L1.2136|
                          DCD      0x0000fffe
                  |L1.2140|
                          DCD      ||.bss||+0x3
                  |L1.2144|
                          DCD      0x000001bd
                  |L1.2148|
                          DCD      ||.constdata||+0x21
                  |L1.2152|
000868  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
00086c  643a2041
000870  53534552
000874  54204641
000878  494c4544
00087c  0d0a00  
00087f  00                DCB      0
                  |L1.2176|
                          DCD      tud_umount_cb
                  |L1.2180|
                          DCD      0x00000279
                  |L1.2184|
                          DCD      ||.constdata||+0x42
                  |L1.2188|
                          DCD      tud_vendor_control_xfer_cb
                  |L1.2192|
                          DCD      0x00000375
                  |L1.2196|
                          DCD      ||.constdata||+0x5a
                  |L1.2200|
000898  e51f2040          LDR      r2,|L1.2144|
00089c  e51f1040          LDR      r1,|L1.2148|
0008a0  e24f0040          ADR      r0,|L1.2152|
0008a4  ebfffffe          BL       __2printf
0008a8  eaffffd4          B        |L1.2048|
                  |L1.2220|
0008ac  e5d01007          LDRB     r1,[r0,#7]
0008b0  e5d4c000          LDRB     r12,[r4,#0]  ; _usbd_dev
0008b4  e3a03010          MOV      r3,#0x10
0008b8  e00310a1          AND      r1,r3,r1,LSR #1
0008bc  e3cc3010          BIC      r3,r12,#0x10
0008c0  e1811003          ORR      r1,r1,r3
0008c4  e5c41000          STRB     r1,[r4,#0]  ; _usbd_dev
0008c8  e5d03007          LDRB     r3,[r0,#7]
0008cc  e3a02020          MOV      r2,#0x20
0008d0  e3c11020          BIC      r1,r1,#0x20
0008d4  e00220a3          AND      r2,r2,r3,LSR #1
0008d8  e1811002          ORR      r1,r1,r2
0008dc  e5c41000          STRB     r1,[r4,#0]  ; _usbd_dev
0008e0  e5d01003          LDRB     r1,[r0,#3]
0008e4  e5d02002          LDRB     r2,[r0,#2]
0008e8  e2806009          ADD      r6,r0,#9
0008ec  e1821401          ORR      r1,r2,r1,LSL #8
0008f0  e0800001          ADD      r0,r0,r1
0008f4  e1560000          CMP      r6,r0
0008f8  e58d0020          STR      r0,[sp,#0x20]
0008fc  2a000066          BCS      |L1.2716|
                  |L1.2304|
000900  e5d60001          LDRB     r0,[r6,#1]
000904  e3a08001          MOV      r8,#1
000908  e350000b          CMP      r0,#0xb
00090c  1a000002          BNE      |L1.2332|
000910  e5d60000          LDRB     r0,[r6,#0]
000914  e5d68003          LDRB     r8,[r6,#3]
000918  e0866000          ADD      r6,r6,r0
                  |L1.2332|
00091c  e5d60001          LDRB     r0,[r6,#1]
000920  e3500004          CMP      r0,#4
000924  0a000004          BEQ      |L1.2364|
000928  e51f109c          LDR      r1,|L1.2196|
00092c  e3a02e39          MOV      r2,#0x390
000930  e24f00d0          ADR      r0,|L1.2152|
000934  ebfffffe          BL       __2printf
000938  ea00004f          B        |L1.2684|
                  |L1.2364|
00093c  e59d0020          LDR      r0,[sp,#0x20]
000940  e3a04000          MOV      r4,#0
000944  e0401006          SUB      r1,r0,r6
000948  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
00094c  e1a0b801          LSL      r11,r1,#16
000950  e1a0b82b          LSR      r11,r11,#16
000954  e3700001          CMN      r0,#1
000958  0a00003f          BEQ      |L1.2652|
                  |L1.2396|
00095c  e3570000          CMP      r7,#0
000960  e1a00004          MOV      r0,r4
000964  0a000007          BEQ      |L1.2440|
000968  e5d51000          LDRB     r1,[r5,#0]  ; _app_driver_count
00096c  e1500001          CMP      r0,r1
000970  20440001          SUBCS    r0,r4,r1
000974  35951004          LDRCC    r1,[r5,#4]  ; _app_driver
000978  220000ff          ANDCS    r0,r0,#0xff
00097c  30840084          ADDCC    r0,r4,r4,LSL #1
000980  30810180          ADDCC    r0,r1,r0,LSL #3
000984  3a000002          BCC      |L1.2452|
                  |L1.2440|
000988  e3500000          CMP      r0,#0
00098c  01a00009          MOVEQ    r0,r9
000990  1a00001a          BNE      |L1.2560|
                  |L1.2452|
000994  e3500000          CMP      r0,#0
000998  0a000018          BEQ      |L1.2560|
00099c  e5903008          LDR      r3,[r0,#8]
0009a0  e59d002c          LDR      r0,[sp,#0x2c]
0009a4  e1a0200b          MOV      r2,r11
0009a8  e1a01006          MOV      r1,r6
0009ac  e12fff33          BLX      r3
0009b0  e3500009          CMP      r0,#9
0009b4  e1a0a000          MOV      r10,r0
0009b8  215b000a          CMPCS    r11,r10
0009bc  3a000020          BCC      |L1.2628|
0009c0  e3580000          CMP      r8,#0
0009c4  851f27b8          LDRHI    r2,|L1.532|
0009c8  e3a00000          MOV      r0,#0
0009cc  9a000015          BLS      |L1.2600|
                  |L1.2512|
0009d0  e5d61002          LDRB     r1,[r6,#2]
0009d4  e0811000          ADD      r1,r1,r0
0009d8  e20110ff          AND      r1,r1,#0xff
0009dc  e0811002          ADD      r1,r1,r2
0009e0  e5d13003          LDRB     r3,[r1,#3]
0009e4  e35300ff          CMP      r3,#0xff
0009e8  0a000009          BEQ      |L1.2580|
0009ec  e51f1160          LDR      r1,|L1.2196|
0009f0  e3a02fee          MOV      r2,#0x3b8
0009f4  e24f0f65          ADR      r0,|L1.2152|
0009f8  ebfffffe          BL       __2printf
0009fc  ea00001e          B        |L1.2684|
                  |L1.2560|
000a00  e59f2830          LDR      r2,|L1.4664|
000a04  e51f1178          LDR      r1,|L1.2196|
000a08  e24f0f6a          ADR      r0,|L1.2152|
000a0c  ebfffffe          BL       __2printf
000a10  ea000019          B        |L1.2684|
                  |L1.2580|
000a14  e2800001          ADD      r0,r0,#1
000a18  e20000ff          AND      r0,r0,#0xff
000a1c  e1500008          CMP      r0,r8
000a20  e5c14003          STRB     r4,[r1,#3]
000a24  3affffe9          BCC      |L1.2512|
                  |L1.2600|
000a28  e51f01e0          LDR      r0,|L1.2128|
000a2c  e1a03004          MOV      r3,r4
000a30  e1a0200a          MOV      r2,r10
000a34  e1a01006          MOV      r1,r6
000a38  ebfffffe          BL       tu_edpt_bind_driver
000a3c  e086600a          ADD      r6,r6,r10
000a40  ea000005          B        |L1.2652|
                  |L1.2628|
000a44  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
000a48  e2841001          ADD      r1,r4,#1
000a4c  e20140ff          AND      r4,r1,#0xff
000a50  e2800001          ADD      r0,r0,#1
000a54  e1540000          CMP      r4,r0
000a58  3affffbf          BCC      |L1.2396|
                  |L1.2652|
000a5c  e5d50000          LDRB     r0,[r5,#0]  ; _app_driver_count
000a60  e2800001          ADD      r0,r0,#1
000a64  e1500004          CMP      r0,r4
000a68  8a000008          BHI      |L1.2704|
000a6c  e59f27c8          LDR      r2,|L1.4668|
000a70  e51f11e4          LDR      r1,|L1.2196|
000a74  e24f0f85          ADR      r0,|L1.2152|
000a78  ebfffffe          BL       __2printf
                  |L1.2684|
000a7c  e59f27bc          LDR      r2,|L1.4672|
000a80  e51f1200          LDR      r1,|L1.2184|
000a84  e24f0f89          ADR      r0,|L1.2152|
000a88  ebfffffe          BL       __2printf
000a8c  ea0000c2          B        |L1.3484|
                  |L1.2704|
000a90  e59d0020          LDR      r0,[sp,#0x20]
000a94  e1500006          CMP      r0,r6
000a98  8affff98          BHI      |L1.2304|
                  |L1.2716|
000a9c  e59f07a0          LDR      r0,|L1.4676|
000aa0  e3500000          CMP      r0,#0
000aa4  1bfffffe          BLNE     tud_mount_cb
                  |L1.2728|
000aa8  e51f189c          LDR      r1,|L1.532|
000aac  e59d0040          LDR      r0,[sp,#0x40]
000ab0  e5c10001          STRB     r0,[r1,#1]  ; _usbd_dev
000ab4  ea00008f          B        |L1.3320|
000ab8  e1dd11b2          LDRH     r1,[sp,#0x12]
000abc  e59d4008          LDR      r4,[sp,#8]
000ac0  e59d6004          LDR      r6,[sp,#4]
000ac4  e1a00421          LSR      r0,r1,#8
000ac8  e3500006          CMP      r0,#6
000acc  e20120ff          AND      r2,r1,#0xff
000ad0  0a00003c          BEQ      |L1.3016|
000ad4  ca000006          BGT      |L1.2804|
000ad8  e3500001          CMP      r0,#1
000adc  0a000009          BEQ      |L1.2824|
000ae0  e3500002          CMP      r0,#2
000ae4  0a000019          BEQ      |L1.2896|
000ae8  e3500003          CMP      r0,#3
000aec  0a00002f          BEQ      |L1.2992|
000af0  ea0000a9          B        |L1.3484|
                  |L1.2804|
000af4  e3500007          CMP      r0,#7
000af8  0a000014          BEQ      |L1.2896|
000afc  e350000f          CMP      r0,#0xf
000b00  0a000007          BEQ      |L1.2852|
000b04  ea0000a4          B        |L1.3484|
                  |L1.2824|
000b08  ebfffffe          BL       tud_descriptor_device_cb
000b0c  e1a02000          MOV      r2,r0
000b10  e3a03012          MOV      r3,#0x12
000b14  e1a01004          MOV      r1,r4
000b18  e1a00006          MOV      r0,r6
000b1c  ebfffffe          BL       tud_control_xfer
000b20  ea000033          B        |L1.3060|
                  |L1.2852|
000b24  e59f071c          LDR      r0,|L1.4680|
000b28  e3500000          CMP      r0,#0
000b2c  0a00009a          BEQ      |L1.3484|
000b30  ebfffffe          BL       tud_descriptor_bos_cb
000b34  e1b02000          MOVS     r2,r0
000b38  1a00000d          BNE      |L1.2932|
000b3c  e59f1708          LDR      r1,|L1.4684|
000b40  e3a02ffe          MOV      r2,#0x3f8
000b44  e24f0fb9          ADR      r0,|L1.2152|
000b48  ebfffffe          BL       __2printf
000b4c  ea000092          B        |L1.3484|
                  |L1.2896|
000b50  e3500002          CMP      r0,#2
000b54  0a00000d          BEQ      |L1.2960|
000b58  e59f06f0          LDR      r0,|L1.4688|
000b5c  e3500000          CMP      r0,#0
000b60  0a00008d          BEQ      |L1.3484|
000b64  e1a00002          MOV      r0,r2
000b68  ebfffffe          BL       tud_descriptor_other_speed_configuration_cb
                  |L1.2924|
000b6c  e1b02000          MOVS     r2,r0
000b70  0a000009          BEQ      |L1.2972|
                  |L1.2932|
000b74  e5d21003          LDRB     r1,[r2,#3]
000b78  e5d20002          LDRB     r0,[r2,#2]
000b7c  e1803401          ORR      r3,r0,r1,LSL #8
000b80  e1a01004          MOV      r1,r4
000b84  e1a00006          MOV      r0,r6
000b88  ebfffffe          BL       tud_control_xfer
000b8c  ea000018          B        |L1.3060|
                  |L1.2960|
000b90  e1a00002          MOV      r0,r2
000b94  ebfffffe          BL       tud_descriptor_configuration_cb
000b98  eafffff3          B        |L1.2924|
                  |L1.2972|
000b9c  e59f26b0          LDR      r2,|L1.4692|
000ba0  e59f16a4          LDR      r1,|L1.4684|
000ba4  e24f0fd1          ADR      r0,|L1.2152|
000ba8  ebfffffe          BL       __2printf
000bac  ea00007a          B        |L1.3484|
                  |L1.2992|
000bb0  e1dd11b4          LDRH     r1,[sp,#0x14]
000bb4  e1a00002          MOV      r0,r2
000bb8  ebfffffe          BL       tud_descriptor_string_cb
000bbc  e3500000          CMP      r0,#0
000bc0  1a000006          BNE      |L1.3040|
000bc4  ea000074          B        |L1.3484|
                  |L1.3016|
000bc8  e59f0688          LDR      r0,|L1.4696|
000bcc  e3500000          CMP      r0,#0
000bd0  0a000071          BEQ      |L1.3484|
000bd4  ebfffffe          BL       tud_descriptor_device_qualifier_cb
000bd8  e3500000          CMP      r0,#0
000bdc  0a00006e          BEQ      |L1.3484|
                  |L1.3040|
000be0  e5d03000          LDRB     r3,[r0,#0]
000be4  e1a02000          MOV      r2,r0
000be8  e1a01004          MOV      r1,r4
000bec  e1a00006          MOV      r0,r6
000bf0  ebfffffe          BL       tud_control_xfer
                  |L1.3060|
000bf4  e3500000          CMP      r0,#0
000bf8  1a0000ea          BNE      |L1.4008|
000bfc  ea000066          B        |L1.3484|
000c00  e1dd01b2          LDRH     r0,[sp,#0x12]
000c04  e3500001          CMP      r0,#1
000c08  05d60000          LDRBEQ   r0,[r6,#0]  ; _usbd_dev
000c0c  03800008          ORREQ    r0,r0,#8
000c10  1a000061          BNE      |L1.3484|
000c14  ea000004          B        |L1.3116|
000c18  e1dd01b2          LDRH     r0,[sp,#0x12]
000c1c  e3500001          CMP      r0,#1
000c20  05d60000          LDRBEQ   r0,[r6,#0]  ; _usbd_dev
000c24  03c00008          BICEQ    r0,r0,#8
000c28  1a00005b          BNE      |L1.3484|
                  |L1.3116|
000c2c  e5c60000          STRB     r0,[r6,#0]  ; _usbd_dev
000c30  ea000030          B        |L1.3320|
000c34  e5d60000          LDRB     r0,[r6,#0]  ; _usbd_dev
000c38  e3a03002          MOV      r3,#2
000c3c  e1a0200d          MOV      r2,sp
000c40  e2101008          ANDS     r1,r0,#8
000c44  13a01002          MOVNE    r1,#2
000c48  e1a00d00          LSL      r0,r0,#26
000c4c  e1810fa0          ORR      r0,r1,r0,LSR #31
000c50  e1cd00b0          STRH     r0,[sp,#0]
000c54  e99d0003          LDMIB    sp,{r0,r1}
000c58  ebfffffe          BL       tud_control_xfer
000c5c  ea0000d1          B        |L1.4008|
                  |L1.3168|
000c60  e1dd01b4          LDRH     r0,[sp,#0x14]
000c64  e20000ff          AND      r0,r0,#0xff
000c68  e3500010          CMP      r0,#0x10
000c6c  2a00004a          BCS      |L1.3484|
000c70  e0800006          ADD      r0,r0,r6
000c74  e5d00003          LDRB     r0,[r0,#3]
000c78  ebfffffe          BL       get_driver
000c7c  e1b08000          MOVS     r8,r0
000c80  0a000045          BEQ      |L1.3484|
000c84  e99d0050          LDMIB    sp,{r4,r6}
000c88  e598000c          LDR      r0,[r8,#0xc]
000c8c  ebfffffe          BL       usbd_control_set_complete_callback
000c90  e598300c          LDR      r3,[r8,#0xc]
000c94  e1a02006          MOV      r2,r6
000c98  e3a01001          MOV      r1,#1
000c9c  e1a00004          MOV      r0,r4
000ca0  e12fff33          BLX      r3
000ca4  e3500000          CMP      r0,#0
000ca8  1a0000be          BNE      |L1.4008|
000cac  e5dd0010          LDRB     r0,[sp,#0x10]
000cb0  e3100060          TST      r0,#0x60
000cb4  1a000038          BNE      |L1.3484|
000cb8  e5dd0011          LDRB     r0,[sp,#0x11]
000cbc  e350000a          CMP      r0,#0xa
000cc0  1350000b          CMPNE    r0,#0xb
000cc4  1a000034          BNE      |L1.3484|
000cc8  e3a00000          MOV      r0,#0
000ccc  ebfffffe          BL       usbd_control_set_complete_callback
000cd0  e5dd0011          LDRB     r0,[sp,#0x11]
000cd4  e350000a          CMP      r0,#0xa
000cd8  1a000006          BNE      |L1.3320|
000cdc  e3a00000          MOV      r0,#0
000ce0  e5cd0000          STRB     r0,[sp,#0]
000ce4  e99d0003          LDMIB    sp,{r0,r1}
000ce8  e3a03001          MOV      r3,#1
000cec  e1a0200d          MOV      r2,sp
000cf0  ebfffffe          BL       tud_control_xfer
000cf4  ea0000ab          B        |L1.4008|
                  |L1.3320|
000cf8  e99d0003          LDMIB    sp,{r0,r1}
000cfc  ebfffffe          BL       tud_control_status
000d00  ea0000a8          B        |L1.4008|
                  |L1.3332|
000d04  e1dd01b4          LDRH     r0,[sp,#0x14]
000d08  e200a0ff          AND      r10,r0,#0xff
000d0c  e3ca0080          BIC      r0,r10,#0x80
000d10  e3500004          CMP      r0,#4
000d14  e1a013aa          LSR      r1,r10,#7
000d18  3a000004          BCC      |L1.3376|
000d1c  e59f2538          LDR      r2,|L1.4700|
000d20  e51f14a0          LDR      r1,|L1.2184|
000d24  e59f0534          LDR      r0,|L1.4704|
000d28  ebfffffe          BL       __2printf
000d2c  ea00001a          B        |L1.3484|
                  |L1.3376|
000d30  e0860080          ADD      r0,r6,r0,LSL #1
000d34  e0804001          ADD      r4,r0,r1
000d38  e5d40013          LDRB     r0,[r4,#0x13]
000d3c  ebfffffe          BL       get_driver
000d40  e1a08000          MOV      r8,r0
000d44  e5dd0010          LDRB     r0,[sp,#0x10]
000d48  e3100060          TST      r0,#0x60
000d4c  0a00000c          BEQ      |L1.3460|
000d50  e3580000          CMP      r8,#0
000d54  0a000010          BEQ      |L1.3484|
000d58  e99d0050          LDMIB    sp,{r4,r6}
000d5c  e598000c          LDR      r0,[r8,#0xc]
000d60  ebfffffe          BL       usbd_control_set_complete_callback
000d64  e598300c          LDR      r3,[r8,#0xc]
000d68  e1a02006          MOV      r2,r6
000d6c  e3a01001          MOV      r1,#1
000d70  e1a00004          MOV      r0,r4
                  |L1.3444|
000d74  e12fff33          BLX      r3
                  |L1.3448|
000d78  e3500000          CMP      r0,#0
000d7c  1a000089          BNE      |L1.4008|
000d80  ea000005          B        |L1.3484|
                  |L1.3460|
000d84  e5dd0011          LDRB     r0,[sp,#0x11]
000d88  e3500000          CMP      r0,#0
000d8c  0a000009          BEQ      |L1.3512|
000d90  e3500001          CMP      r0,#1
000d94  13500003          CMPNE    r0,#3
000d98  0a00000f          BEQ      |L1.3548|
                  |L1.3484|
000d9c  e5dd000c          LDRB     r0,[sp,#0xc]
000da0  e3a01000          MOV      r1,#0
000da4  ebfffffe          BL       dcd_edpt_stall
000da8  e5dd000c          LDRB     r0,[sp,#0xc]
000dac  e3a01080          MOV      r1,#0x80
000db0  ebfffffe          BL       dcd_edpt_stall
000db4  ea00007b          B        |L1.4008|
                  |L1.3512|
000db8  e5d4001b          LDRB     r0,[r4,#0x1b]
000dbc  e3a03002          MOV      r3,#2
000dc0  e28d2018          ADD      r2,sp,#0x18
000dc4  e2000002          AND      r0,r0,#2
000dc8  e1a000a0          LSR      r0,r0,#1
000dcc  e1cd01b8          STRH     r0,[sp,#0x18]
000dd0  e99d0003          LDMIB    sp,{r0,r1}
000dd4  ebfffffe          BL       tud_control_xfer
000dd8  ea000072          B        |L1.4008|
                  |L1.3548|
000ddc  e1dd11b2          LDRH     r1,[sp,#0x12]
000de0  e3510000          CMP      r1,#0
000de4  1a000018          BNE      |L1.3660|
000de8  e3500001          CMP      r0,#1
000dec  e5d4001b          LDRB     r0,[r4,#0x1b]
000df0  e1a0100a          MOV      r1,r10
000df4  e2002002          AND      r2,r0,#2
000df8  e5d50001          LDRB     r0,[r5,#1]  ; _usbd_rhport
000dfc  0a000002          BEQ      |L1.3596|
000e00  e3520000          CMP      r2,#0
000e04  0a000009          BEQ      |L1.3632|
000e08  ea00000f          B        |L1.3660|
                  |L1.3596|
000e0c  e3520000          CMP      r2,#0
000e10  0a00000d          BEQ      |L1.3660|
000e14  ebfffffe          BL       dcd_edpt_clear_stall
000e18  e5d4001b          LDRB     r0,[r4,#0x1b]
000e1c  e3c00002          BIC      r0,r0,#2
000e20  e5c4001b          STRB     r0,[r4,#0x1b]
000e24  e5d4001b          LDRB     r0,[r4,#0x1b]
000e28  e3c00001          BIC      r0,r0,#1
000e2c  ea000005          B        |L1.3656|
                  |L1.3632|
000e30  ebfffffe          BL       dcd_edpt_stall
000e34  e5d4001b          LDRB     r0,[r4,#0x1b]
000e38  e3800002          ORR      r0,r0,#2
000e3c  e5c4001b          STRB     r0,[r4,#0x1b]
000e40  e5d4001b          LDRB     r0,[r4,#0x1b]
000e44  e3800001          ORR      r0,r0,#1
                  |L1.3656|
000e48  e5c4001b          STRB     r0,[r4,#0x1b]
                  |L1.3660|
000e4c  e3580000          CMP      r8,#0
000e50  0a000054          BEQ      |L1.4008|
000e54  e99d0410          LDMIB    sp,{r4,r10}
000e58  e598000c          LDR      r0,[r8,#0xc]
000e5c  ebfffffe          BL       usbd_control_set_complete_callback
000e60  e598300c          LDR      r3,[r8,#0xc]
000e64  e1a0200a          MOV      r2,r10
000e68  e3a01001          MOV      r1,#1
000e6c  e1a00004          MOV      r0,r4
000e70  e12fff33          BLX      r3
000e74  e3a00000          MOV      r0,#0
000e78  ebfffffe          BL       usbd_control_set_complete_callback
000e7c  e5d6001c          LDRB     r0,[r6,#0x1c]  ; _usbd_dev
000e80  e3100001          TST      r0,#1
000e84  0affff9b          BEQ      |L1.3320|
000e88  ea000046          B        |L1.4008|
000e8c  e5dd1010          LDRB     r1,[sp,#0x10]
000e90  e51f3c84          LDR      r3,|L1.532|
000e94  e3d12080          BICS     r2,r1,#0x80
000e98  e0833082          ADD      r3,r3,r2,LSL #1
000e9c  e08303a1          ADD      r0,r3,r1,LSR #7
000ea0  e5d0301b          LDRB     r3,[r0,#0x1b]
000ea4  e3c33001          BIC      r3,r3,#1
000ea8  e5c0301b          STRB     r3,[r0,#0x1b]
000eac  e5d0301b          LDRB     r3,[r0,#0x1b]
000eb0  e3c33004          BIC      r3,r3,#4
000eb4  e5c0301b          STRB     r3,[r0,#0x1b]
000eb8  0a00000e          BEQ      |L1.3832|
000ebc  e5d00013          LDRB     r0,[r0,#0x13]
000ec0  e3570000          CMP      r7,#0
000ec4  0a000007          BEQ      |L1.3816|
000ec8  e5d52000          LDRB     r2,[r5,#0]  ; _app_driver_count
000ecc  e1500002          CMP      r0,r2
000ed0  20400002          SUBCS    r0,r0,r2
000ed4  35952004          LDRCC    r2,[r5,#4]  ; _app_driver
000ed8  220000ff          ANDCS    r0,r0,#0xff
000edc  30800080          ADDCC    r0,r0,r0,LSL #1
000ee0  30820180          ADDCC    r0,r2,r0,LSL #3
000ee4  3a000008          BCC      |L1.3852|
                  |L1.3816|
000ee8  e3500000          CMP      r0,#0
000eec  01a00009          MOVEQ    r0,r9
000ef0  1a00000d          BNE      |L1.3884|
000ef4  ea000004          B        |L1.3852|
                  |L1.3832|
000ef8  e59d3014          LDR      r3,[sp,#0x14]
000efc  e5dd2011          LDRB     r2,[sp,#0x11]
000f00  e5dd000c          LDRB     r0,[sp,#0xc]
000f04  ebfffffe          BL       usbd_control_xfer_cb
000f08  ea000026          B        |L1.4008|
                  |L1.3852|
000f0c  e3500000          CMP      r0,#0
000f10  0a000005          BEQ      |L1.3884|
000f14  e590c010          LDR      r12,[r0,#0x10]
000f18  e59d3014          LDR      r3,[sp,#0x14]
000f1c  e5dd2011          LDRB     r2,[sp,#0x11]
000f20  e5dd000c          LDRB     r0,[sp,#0xc]
000f24  e12fff3c          BLX      r12
000f28  ea00001e          B        |L1.4008|
                  |L1.3884|
000f2c  e59f1330          LDR      r1,|L1.4708|
000f30  e59f0328          LDR      r0,|L1.4704|
000f34  e3a02f8d          MOV      r2,#0x234
000f38  ebfffffe          BL       __2printf
000f3c  e28dd04c          ADD      sp,sp,#0x4c
000f40  e8bd8ff0          POP      {r4-r11,pc}
000f44  e51f0d38          LDR      r0,|L1.532|
000f48  e5d01000          LDRB     r1,[r0,#0]  ; _usbd_dev
000f4c  e3110001          TST      r1,#1
000f50  159f1310          LDRNE    r1,|L1.4712|
000f54  13510000          CMPNE    r1,#0
000f58  0a000012          BEQ      |L1.4008|
000f5c  e5d00000          LDRB     r0,[r0,#0]  ; _usbd_dev
000f60  e1a00e00          LSL      r0,r0,#28
000f64  e1a00fa0          LSR      r0,r0,#31
000f68  ebfffffe          BL       tud_suspend_cb
000f6c  ea00000d          B        |L1.4008|
000f70  e51f0d64          LDR      r0,|L1.532|
000f74  e5d00000          LDRB     r0,[r0,#0]  ; _usbd_dev
000f78  e3100001          TST      r0,#1
000f7c  159f02e8          LDRNE    r0,|L1.4716|
000f80  13500000          CMPNE    r0,#0
000f84  0a000007          BEQ      |L1.4008|
000f88  ebfffffe          BL       tud_resume_cb
000f8c  ea000005          B        |L1.4008|
000f90  e59d0010          LDR      r0,[sp,#0x10]
000f94  e3500000          CMP      r0,#0
000f98  0a000002          BEQ      |L1.4008|
000f9c  e59d1010          LDR      r1,[sp,#0x10]
000fa0  e59d0014          LDR      r0,[sp,#0x14]
000fa4  e12fff31          BLX      r1
                  |L1.4008|
000fa8  e5954008          LDR      r4,[r5,#8]  ; _usbd_q
000fac  e5940008          LDR      r0,[r4,#8]
000fb0  ebfffffe          BL       os_mbx_check
000fb4  e1d410b0          LDRH     r1,[r4,#0]
000fb8  e1500001          CMP      r0,r1
000fbc  1afffcee          BNE      |L1.892|
000fc0  e28dd04c          ADD      sp,sp,#0x4c
000fc4  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  dcd_event_handler PROC
;;;1084   //--------------------------------------------------------------------+
;;;1085   TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
000fc8  e92d4ff0          PUSH     {r4-r11,lr}
;;;1086   {
000fcc  e1a06000          MOV      r6,r0
;;;1087     switch (event->event_id)
000fd0  e5d00001          LDRB     r0,[r0,#1]
000fd4  e51fb788          LDR      r11,|L1.2132|
;;;1088     {
;;;1089       case DCD_EVENT_UNPLUGGED:
;;;1090         _usbd_dev.connected  = 0;
;;;1091         _usbd_dev.addressed  = 0;
;;;1092         _usbd_dev.cfg_num    = 0;
;;;1093         _usbd_dev.suspended  = 0;
;;;1094         osal_queue_send(_usbd_q, event, in_isr);
000fd8  e51f8dc8          LDR      r8,|L1.536|
000fdc  e51f5dd0          LDR      r5,|L1.532|
000fe0  e1a07001          MOV      r7,r1                 ;1086
000fe4  e3500002          CMP      r0,#2                 ;1087
000fe8  e24dd00c          SUB      sp,sp,#0xc            ;1086
000fec  e3a01000          MOV      r1,#0                 ;1086
000ff0  0a00000f          BEQ      |L1.4148|
000ff4  e3500003          CMP      r0,#3                 ;1087
000ff8  0a000047          BEQ      |L1.4380|
000ffc  e3500004          CMP      r0,#4                 ;1087
001000  0a00001f          BEQ      |L1.4228|
001004  e3500005          CMP      r0,#5                 ;1087
001008  0a00002e          BEQ      |L1.4296|
00100c  e5984008          LDR      r4,[r8,#8]            ;1087  ; _usbd_q
001010  e5940004          LDR      r0,[r4,#4]            ;1087
001014  ef000001          SVC      #0x1                  ;1087
001018  e1d420b2          LDRH     r2,[r4,#2]            ;1087
00101c  e1a05000          MOV      r5,r0                 ;1087
001020  e1a01006          MOV      r1,r6                 ;1087
001024  ebfffffe          BL       __aeabi_memcpy
001028  e3570000          CMP      r7,#0                 ;1087
00102c  0a00007b          BEQ      |L1.4640|
001030  ea000034          B        |L1.4360|
                  |L1.4148|
001034  e5d50000          LDRB     r0,[r5,#0]            ;1090  ; _usbd_dev
001038  e3c00001          BIC      r0,r0,#1              ;1090
00103c  e5c50000          STRB     r0,[r5,#0]            ;1090  ; _usbd_dev
001040  e5d50000          LDRB     r0,[r5,#0]            ;1091  ; _usbd_dev
001044  e3c00002          BIC      r0,r0,#2              ;1091
001048  e5c50000          STRB     r0,[r5,#0]            ;1091  ; _usbd_dev
00104c  e5c51001          STRB     r1,[r5,#1]            ;1092  ; _usbd_dev
001050  e5d50000          LDRB     r0,[r5,#0]            ;1093  ; _usbd_dev
001054  e3c00004          BIC      r0,r0,#4              ;1093
001058  e5c50000          STRB     r0,[r5,#0]            ;1093  ; _usbd_dev
00105c  e5984008          LDR      r4,[r8,#8]            ;1093  ; _usbd_q
001060  e5940004          LDR      r0,[r4,#4]            ;1093
001064  ef000001          SVC      #0x1                  ;1093
001068  e1d420b2          LDRH     r2,[r4,#2]            ;1093
00106c  e1a05000          MOV      r5,r0                 ;1093
001070  e1a01006          MOV      r1,r6                 ;1093
001074  ebfffffe          BL       __aeabi_memcpy
001078  e3570000          CMP      r7,#0                 ;1093
00107c  1a000021          BNE      |L1.4360|
001080  ea000066          B        |L1.4640|
                  |L1.4228|
;;;1095       break;
;;;1096   
;;;1097       case DCD_EVENT_SUSPEND:
;;;1098         // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
;;;1099         // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
;;;1100         // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
;;;1101         // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
;;;1102         if ( _usbd_dev.connected )
001084  e5d50000          LDRB     r0,[r5,#0]  ; _usbd_dev
001088  e3100001          TST      r0,#1
;;;1103         {
;;;1104           _usbd_dev.suspended = 1;
;;;1105           osal_queue_send(_usbd_q, event, in_isr);
;;;1106         }
;;;1107       break;
;;;1108   
;;;1109       case DCD_EVENT_RESUME:
;;;1110         // skip event if not connected (especially required for SAMD)
;;;1111         if ( _usbd_dev.connected )
;;;1112         {
;;;1113           _usbd_dev.suspended = 0;
;;;1114           osal_queue_send(_usbd_q, event, in_isr);
;;;1115         }
;;;1116       break;
;;;1117   
;;;1118       case DCD_EVENT_SOF:
;;;1119         // SOF driver handler in ISR context
;;;1120         for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
;;;1121         {
;;;1122           usbd_class_driver_t const * driver = get_driver(i);
;;;1123           if (driver && driver->sof)
;;;1124           {
;;;1125             driver->sof(event->rhport, event->sof.frame_count);
;;;1126           }
;;;1127         }
;;;1128   
;;;1129         // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
;;;1130         // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
;;;1131         if ( _usbd_dev.suspended )
;;;1132         {
;;;1133           _usbd_dev.suspended = 0;
;;;1134   
;;;1135           dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
;;;1136           osal_queue_send(_usbd_q, &event_resume, in_isr);
;;;1137         }
;;;1138   
;;;1139         // skip osal queue for SOF in usbd task
;;;1140       break;
;;;1141   
;;;1142       default:
;;;1143         osal_queue_send(_usbd_q, event, in_isr);
;;;1144       break;
;;;1145     }
;;;1146   }
00108c  028dd00c          ADDEQ    sp,sp,#0xc
001090  08bd8ff0          POPEQ    {r4-r11,pc}
001094  e5d50000          LDRB     r0,[r5,#0]            ;1104  ; _usbd_dev
001098  e3800004          ORR      r0,r0,#4              ;1104
00109c  e5c50000          STRB     r0,[r5,#0]            ;1104  ; _usbd_dev
0010a0  e5984008          LDR      r4,[r8,#8]            ;1104  ; _usbd_q
0010a4  e5940004          LDR      r0,[r4,#4]            ;1104
0010a8  ef000001          SVC      #0x1                  ;1104
0010ac  e1d420b2          LDRH     r2,[r4,#2]            ;1104
0010b0  e1a05000          MOV      r5,r0                 ;1104
0010b4  e1a01006          MOV      r1,r6                 ;1104
0010b8  ebfffffe          BL       __aeabi_memcpy
0010bc  e3570000          CMP      r7,#0                 ;1104
0010c0  0a000056          BEQ      |L1.4640|
0010c4  ea00000f          B        |L1.4360|
                  |L1.4296|
0010c8  e5d50000          LDRB     r0,[r5,#0]            ;1111  ; _usbd_dev
0010cc  e3100001          TST      r0,#1                 ;1111
0010d0  028dd00c          ADDEQ    sp,sp,#0xc
0010d4  08bd8ff0          POPEQ    {r4-r11,pc}
0010d8  e5d50000          LDRB     r0,[r5,#0]            ;1113  ; _usbd_dev
0010dc  e3c00004          BIC      r0,r0,#4              ;1113
0010e0  e5c50000          STRB     r0,[r5,#0]            ;1113  ; _usbd_dev
0010e4  e5984008          LDR      r4,[r8,#8]            ;1113  ; _usbd_q
0010e8  e5940004          LDR      r0,[r4,#4]            ;1113
0010ec  ef000001          SVC      #0x1                  ;1113
0010f0  e1d420b2          LDRH     r2,[r4,#2]            ;1113
0010f4  e1a05000          MOV      r5,r0                 ;1113
0010f8  e1a01006          MOV      r1,r6                 ;1113
0010fc  ebfffffe          BL       __aeabi_memcpy
001100  e3570000          CMP      r7,#0                 ;1113
001104  0a000045          BEQ      |L1.4640|
                  |L1.4360|
001108  e5940008          LDR      r0,[r4,#8]            ;1113
00110c  e1a01005          MOV      r1,r5                 ;1113
001110  e28dd00c          ADD      sp,sp,#0xc            ;1113
001114  e8bd4ff0          POP      {r4-r11,lr}           ;1113
001118  eafffffe          B        isr_mbx_send
                  |L1.4380|
00111c  e5d80000          LDRB     r0,[r8,#0]            ;1120  ; _app_driver_count
001120  e3a04000          MOV      r4,#0                 ;1120
001124  e3700001          CMN      r0,#1                 ;1120
001128  151faf04          LDRNE    r10,|L1.556|
00112c  151f9f04          LDRNE    r9,|L1.560|
001130  0a00001a          BEQ      |L1.4512|
                  |L1.4404|
001134  e35a0000          CMP      r10,#0                ;1120
001138  e1a00004          MOV      r0,r4                 ;1122
00113c  0a000007          BEQ      |L1.4448|
001140  e5d81000          LDRB     r1,[r8,#0]            ;1122  ; _app_driver_count
001144  e1500001          CMP      r0,r1                 ;1122
001148  20440001          SUBCS    r0,r4,r1              ;1122
00114c  35981004          LDRCC    r1,[r8,#4]            ;1122  ; _app_driver
001150  220000ff          ANDCS    r0,r0,#0xff           ;1122
001154  30840084          ADDCC    r0,r4,r4,LSL #1       ;1122
001158  30810180          ADDCC    r0,r1,r0,LSL #3       ;1122
00115c  3a000002          BCC      |L1.4460|
                  |L1.4448|
001160  e3500000          CMP      r0,#0                 ;1122
001164  01a00009          MOVEQ    r0,r9                 ;1122
001168  1a000006          BNE      |L1.4488|
                  |L1.4460|
00116c  e3500000          CMP      r0,#0                 ;1123
001170  15902014          LDRNE    r2,[r0,#0x14]         ;1123
001174  13520000          CMPNE    r2,#0                 ;1123
001178  0a000002          BEQ      |L1.4488|
00117c  e5961004          LDR      r1,[r6,#4]            ;1125
001180  e5d60000          LDRB     r0,[r6,#0]            ;1125
001184  e12fff32          BLX      r2                    ;1125
                  |L1.4488|
001188  e5d80000          LDRB     r0,[r8,#0]            ;1120  ; _app_driver_count
00118c  e2841001          ADD      r1,r4,#1              ;1120
001190  e20140ff          AND      r4,r1,#0xff           ;1120
001194  e2800001          ADD      r0,r0,#1              ;1120
001198  e1540000          CMP      r4,r0                 ;1120
00119c  3affffe4          BCC      |L1.4404|
                  |L1.4512|
0011a0  e5d50000          LDRB     r0,[r5,#0]            ;1131  ; _usbd_dev
0011a4  e3100004          TST      r0,#4                 ;1131
0011a8  028dd00c          ADDEQ    sp,sp,#0xc
0011ac  08bd8ff0          POPEQ    {r4-r11,pc}
0011b0  e5d50000          LDRB     r0,[r5,#0]            ;1133  ; _usbd_dev
0011b4  e3c00004          BIC      r0,r0,#4              ;1133
0011b8  e5c50000          STRB     r0,[r5,#0]            ;1133  ; _usbd_dev
0011bc  e59f20ac          LDR      r2,|L1.4720|
0011c0  e1a0500d          MOV      r5,sp                 ;1136
0011c4  e8920007          LDM      r2,{r0-r2}            ;1135
0011c8  e88d0007          STM      sp,{r0-r2}            ;1135
0011cc  e5d60000          LDRB     r0,[r6,#0]            ;1135
0011d0  e5cd0000          STRB     r0,[sp,#0]            ;1135
0011d4  e5984008          LDR      r4,[r8,#8]            ;1135  ; _usbd_q
0011d8  e5940004          LDR      r0,[r4,#4]            ;1135
0011dc  ef000001          SVC      #0x1                  ;1135
0011e0  e1d420b2          LDRH     r2,[r4,#2]            ;1135
0011e4  e1a06000          MOV      r6,r0                 ;1135
0011e8  e1a01005          MOV      r1,r5                 ;1135
0011ec  ebfffffe          BL       __aeabi_memcpy
0011f0  e5940008          LDR      r0,[r4,#8]            ;1135
0011f4  e3570000          CMP      r7,#0                 ;1135
0011f8  0a000003          BEQ      |L1.4620|
0011fc  e1a01006          MOV      r1,r6                 ;1135
001200  ebfffffe          BL       isr_mbx_send
001204  e28dd00c          ADD      sp,sp,#0xc
001208  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4620|
00120c  e1a0200b          MOV      r2,r11
001210  e1a01006          MOV      r1,r6
001214  ebfffffe          BL       os_mbx_send
001218  e28dd00c          ADD      sp,sp,#0xc
00121c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4640|
001220  e5940008          LDR      r0,[r4,#8]
001224  e1a0200b          MOV      r2,r11
001228  e1a01005          MOV      r1,r5
00122c  e28dd00c          ADD      sp,sp,#0xc
001230  e8bd4ff0          POP      {r4-r11,lr}
001234  eafffffe          B        os_mbx_send
                  |L1.4664|
                          DCD      0x00000399
                  |L1.4668|
                          DCD      0x000003c7
                  |L1.4672|
                          DCD      0x000002cd
                  |L1.4676|
                          DCD      tud_mount_cb
                  |L1.4680|
                          DCD      tud_descriptor_bos_cb
                  |L1.4684|
                          DCD      ||.constdata||+0x6d
                  |L1.4688|
                          DCD      tud_descriptor_other_speed_configuration_cb
                  |L1.4692|
                          DCD      0x00000412
                  |L1.4696|
                          DCD      tud_descriptor_device_qualifier_cb
                  |L1.4700|
                          DCD      0x0000032d
                  |L1.4704|
                          DCD      ||.text||+0x868
                  |L1.4708|
                          DCD      ||.constdata||+0x35
                  |L1.4712|
                          DCD      tud_suspend_cb
                  |L1.4716|
                          DCD      tud_resume_cb
                  |L1.4720|
                          DCD      ||.constdata||+0x84
                          ENDP

                  usbd_int_set PROC
;;;1151   
;;;1152   void usbd_int_set(bool enabled)
001274  e59f14e0          LDR      r1,|L1.5980|
;;;1153   {
;;;1154     if (enabled)
001278  e3500000          CMP      r0,#0
;;;1155     {
;;;1156       dcd_int_enable(_usbd_rhport);
00127c  e5d10001          LDRB     r0,[r1,#1]
001280  0a000000          BEQ      |L1.4744|
001284  eafffffe          B        dcd_int_enable
                  |L1.4744|
;;;1157     }else
;;;1158     {
;;;1159       dcd_int_disable(_usbd_rhport);
001288  eafffffe          B        dcd_int_disable
;;;1160     }
;;;1161   }
;;;1162   
                          ENDP

                  usbd_edpt_open PROC
;;;1205   
;;;1206   bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
00128c  e92d4070          PUSH     {r4-r6,lr}
;;;1207   {
;;;1208     rhport = _usbd_rhport;
;;;1209   
;;;1210     TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
001290  e5d10002          LDRB     r0,[r1,#2]
001294  e1a04001          MOV      r4,r1                 ;1207
001298  e59f14bc          LDR      r1,|L1.5980|
00129c  e3c00080          BIC      r0,r0,#0x80
0012a0  e5d15001          LDRB     r5,[r1,#1]            ;1208  ; _usbd_rhport
0012a4  e3500004          CMP      r0,#4
0012a8  3a000005          BCC      |L1.4804|
0012ac  e59f24ac          LDR      r2,|L1.5984|
0012b0  e59f14ac          LDR      r1,|L1.5988|
0012b4  e51f005c          LDR      r0,|L1.4704|
0012b8  ebfffffe          BL       __2printf
0012bc  e3a00000          MOV      r0,#0
;;;1211     TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
;;;1212   
;;;1213     return dcd_edpt_open(rhport, desc_ep);
;;;1214   }
0012c0  e8bd8070          POP      {r4-r6,pc}
                  |L1.4804|
0012c4  e59f049c          LDR      r0,|L1.5992|
0012c8  e5d01002          LDRB     r1,[r0,#2]            ;1211  ; _usbd_dev
0012cc  e1a00004          MOV      r0,r4                 ;1211
0012d0  ebfffffe          BL       tu_edpt_validate
0012d4  e3500000          CMP      r0,#0                 ;1211
0012d8  0a000003          BEQ      |L1.4844|
0012dc  e1a01004          MOV      r1,r4                 ;1213
0012e0  e1a00005          MOV      r0,r5                 ;1213
0012e4  e8bd4070          POP      {r4-r6,lr}            ;1213
0012e8  eafffffe          B        dcd_edpt_open
                  |L1.4844|
0012ec  e59f2478          LDR      r2,|L1.5996|
0012f0  e59f146c          LDR      r1,|L1.5988|
0012f4  e51f009c          LDR      r0,|L1.4704|
0012f8  ebfffffe          BL       __2printf
0012fc  e3a00000          MOV      r0,#0                 ;1211
001300  e8bd8070          POP      {r4-r6,pc}
;;;1215   
                          ENDP

                  usbd_open_edpt_pair PROC
;;;1163   // Parse consecutive endpoint descriptors (IN & OUT)
;;;1164   bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
001304  e92d5ff0          PUSH     {r4-r12,lr}
;;;1165   {
001308  e2526000          SUBS     r6,r2,#0
00130c  c59f9448          LDRGT    r9,|L1.5980|
001310  c59fa450          LDRGT    r10,|L1.5992|
001314  e1a07003          MOV      r7,r3
001318  e1a04001          MOV      r4,r1
;;;1166     for(int i=0; i<ep_count; i++)
00131c  e3a05000          MOV      r5,#0
001320  da00002b          BLE      |L1.5076|
                  |L1.4900|
;;;1167     {
;;;1168       tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
;;;1169   
;;;1170       TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
001324  e5d40001          LDRB     r0,[r4,#1]
001328  e3500005          CMP      r0,#5
00132c  1a000003          BNE      |L1.4928|
001330  e5d40003          LDRB     r0,[r4,#3]
001334  e2000003          AND      r0,r0,#3
001338  e1500007          CMP      r0,r7
00133c  0a000005          BEQ      |L1.4952|
                  |L1.4928|
001340  e59f2428          LDR      r2,|L1.6000|
001344  e59f1428          LDR      r1,|L1.6004|
001348  e51f00f0          LDR      r0,|L1.4704|
00134c  ebfffffe          BL       __2printf
001350  e3a00000          MOV      r0,#0
;;;1171       TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
;;;1172   
;;;1173       if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
;;;1174       {
;;;1175         (*ep_in) = desc_ep->bEndpointAddress;
;;;1176       }else
;;;1177       {
;;;1178         (*ep_out) = desc_ep->bEndpointAddress;
;;;1179       }
;;;1180   
;;;1181       p_desc = tu_desc_next(p_desc);
;;;1182     }
;;;1183   
;;;1184     return true;
;;;1185   }
001354  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.4952|
001358  e5d40002          LDRB     r0,[r4,#2]
00135c  e5d98001          LDRB     r8,[r9,#1]  ; _usbd_rhport
001360  e1a0b004          MOV      r11,r4                ;1171
001364  e3c00080          BIC      r0,r0,#0x80           ;1171
001368  e3500004          CMP      r0,#4                 ;1171
00136c  3a000004          BCC      |L1.4996|
001370  e59f23e8          LDR      r2,|L1.5984|
001374  e59f13e8          LDR      r1,|L1.5988|
001378  e51f0120          LDR      r0,|L1.4704|
00137c  ebfffffe          BL       __2printf
001380  ea000019          B        |L1.5100|
                  |L1.4996|
001384  e5da1002          LDRB     r1,[r10,#2]           ;1171  ; _usbd_dev
001388  e1a00004          MOV      r0,r4                 ;1171
00138c  ebfffffe          BL       tu_edpt_validate
001390  e3500000          CMP      r0,#0                 ;1171
001394  0a000010          BEQ      |L1.5084|
001398  e1a0100b          MOV      r1,r11                ;1171
00139c  e1a00008          MOV      r0,r8                 ;1171
0013a0  ebfffffe          BL       dcd_edpt_open
0013a4  e3500000          CMP      r0,#0                 ;1171
0013a8  0a00000f          BEQ      |L1.5100|
0013ac  e5d40002          LDRB     r0,[r4,#2]            ;1173
0013b0  e2855001          ADD      r5,r5,#1              ;1173
0013b4  e3100080          TST      r0,#0x80              ;1173
0013b8  059d1028          LDREQ    r1,[sp,#0x28]         ;1178
0013bc  159d102c          LDRNE    r1,[sp,#0x2c]         ;1175
0013c0  e1550006          CMP      r5,r6                 ;1182
0013c4  e5c10000          STRB     r0,[r1,#0]            ;1178
0013c8  e5d40000          LDRB     r0,[r4,#0]            ;1178
0013cc  e0844000          ADD      r4,r4,r0              ;1178
0013d0  baffffd3          BLT      |L1.4900|
                  |L1.5076|
0013d4  e3a00001          MOV      r0,#1                 ;1184
0013d8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5084|
0013dc  e59f2388          LDR      r2,|L1.5996|
0013e0  e59f137c          LDR      r1,|L1.5988|
0013e4  e51f018c          LDR      r0,|L1.4704|
0013e8  ebfffffe          BL       __2printf
                  |L1.5100|
0013ec  e59f2384          LDR      r2,|L1.6008|
0013f0  e59f137c          LDR      r1,|L1.6004|
0013f4  e51f019c          LDR      r0,|L1.4704|
0013f8  ebfffffe          BL       __2printf
0013fc  e3a00000          MOV      r0,#0                 ;1171
001400  e8bd9ff0          POP      {r4-r12,pc}
;;;1186   
                          ENDP

                  usbd_defer_func PROC
;;;1187   // Helper to defer an isr function
;;;1188   void usbd_defer_func(osal_task_func_t func, void* param, bool in_isr)
001404  e59f3370          LDR      r3,|L1.6012|
;;;1189   {
001408  e52de004          PUSH     {lr}
;;;1190     dcd_event_t event =
00140c  e59330a4          LDR      r3,[r3,#0xa4]  ; <Data9>
001410  e24dd00c          SUB      sp,sp,#0xc            ;1189
;;;1191     {
;;;1192         .rhport   = 0,
;;;1193         .event_id = USBD_EVENT_FUNC_CALL,
;;;1194     };
;;;1195   
;;;1196     event.func_call.func  = func;
;;;1197     event.func_call.param = param;
001414  e98d0003          STMIB    sp,{r0,r1}
;;;1198   
;;;1199     dcd_event_handler(&event, in_isr);
001418  e1a01002          MOV      r1,r2
00141c  e1a0000d          MOV      r0,sp
001420  e58d3000          STR      r3,[sp,#0]
001424  ebfffffe          BL       dcd_event_handler
;;;1200   }
001428  e28dd00c          ADD      sp,sp,#0xc
00142c  e49df004          POP      {pc}
;;;1201   
                          ENDP

                  usbd_edpt_claim PROC
;;;1215   
;;;1216   bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
001430  e59f2330          LDR      r2,|L1.5992|
;;;1217   {
;;;1218     (void) rhport;
;;;1219   
;;;1220     // TODO add this check later, also make sure we don't starve an out endpoint while suspending
;;;1221     // TU_VERIFY(tud_ready());
;;;1222   
;;;1223     uint8_t const epnum       = tu_edpt_number(ep_addr);
001434  e3c10080          BIC      r0,r1,#0x80
;;;1224     uint8_t const dir         = tu_edpt_dir(ep_addr);
;;;1225     tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
001438  e0820080          ADD      r0,r2,r0,LSL #1
00143c  e08003a1          ADD      r0,r0,r1,LSR #7
;;;1226   
;;;1227     return tu_edpt_claim(ep_state, _usbd_mutex);
001440  e59f1314          LDR      r1,|L1.5980|
001444  e280001b          ADD      r0,r0,#0x1b
001448  e591100c          LDR      r1,[r1,#0xc]  ; _usbd_mutex
00144c  eafffffe          B        tu_edpt_claim
;;;1228   }
;;;1229   
                          ENDP

                  usbd_edpt_release PROC
;;;1230   bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
001450  e59f2310          LDR      r2,|L1.5992|
;;;1231   {
;;;1232     (void) rhport;
;;;1233   
;;;1234     uint8_t const epnum       = tu_edpt_number(ep_addr);
001454  e3c10080          BIC      r0,r1,#0x80
;;;1235     uint8_t const dir         = tu_edpt_dir(ep_addr);
;;;1236     tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
001458  e0820080          ADD      r0,r2,r0,LSL #1
00145c  e08003a1          ADD      r0,r0,r1,LSR #7
;;;1237   
;;;1238     return tu_edpt_release(ep_state, _usbd_mutex);
001460  e59f12f4          LDR      r1,|L1.5980|
001464  e280001b          ADD      r0,r0,#0x1b
001468  e591100c          LDR      r1,[r1,#0xc]  ; _usbd_mutex
00146c  eafffffe          B        tu_edpt_release
;;;1239   }
;;;1240   
                          ENDP

                  usbd_edpt_xfer PROC
;;;1241   bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
001470  e92d4010          PUSH     {r4,lr}
;;;1242   {
;;;1243     rhport = _usbd_rhport;
;;;1244   
;;;1245     uint8_t const epnum = tu_edpt_number(ep_addr);
;;;1246     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1247   
;;;1248     // TODO skip ready() check for now since enumeration also use this API
;;;1249     // TU_VERIFY(tud_ready());
;;;1250   
;;;1251     TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
;;;1252   
;;;1253     // Attempt to transfer on a busy endpoint, sound like an race condition !
;;;1254     TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
001474  e59f42ec          LDR      r4,|L1.5992|
001478  e3c10080          BIC      r0,r1,#0x80           ;1245
00147c  e0844080          ADD      r4,r4,r0,LSL #1
001480  e59f02d4          LDR      r0,|L1.5980|
001484  e08443a1          ADD      r4,r4,r1,LSR #7
001488  e5d00001          LDRB     r0,[r0,#1]            ;1243  ; _usbd_rhport
00148c  e5d4c01b          LDRB     r12,[r4,#0x1b]
001490  e31c0001          TST      r12,#1
001494  0a000004          BEQ      |L1.5292|
001498  e59f22e0          LDR      r2,|L1.6016|
00149c  e59f12e0          LDR      r1,|L1.6020|
0014a0  e51f0248          LDR      r0,|L1.4704|
0014a4  ebfffffe          BL       __2printf
0014a8  ea00000c          B        |L1.5344|
                  |L1.5292|
;;;1255   
;;;1256     // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
;;;1257     // could return and USBD task can preempt and clear the busy
;;;1258     _usbd_dev.ep_status[epnum][dir].busy = 1;
0014ac  e5d4c01b          LDRB     r12,[r4,#0x1b]
0014b0  e38cc001          ORR      r12,r12,#1
0014b4  e5c4c01b          STRB     r12,[r4,#0x1b]
;;;1259   
;;;1260     if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
0014b8  ebfffffe          BL       dcd_edpt_xfer
0014bc  e3500000          CMP      r0,#0
;;;1261     {
;;;1262       return true;
0014c0  13a00001          MOVNE    r0,#1
;;;1263     }else
;;;1264     {
;;;1265       // DCD error, mark endpoint as ready to allow next transfer
;;;1266       _usbd_dev.ep_status[epnum][dir].busy = 0;
;;;1267       _usbd_dev.ep_status[epnum][dir].claimed = 0;
;;;1268       TU_LOG(USBD_DBG, "FAILED\r\n");
;;;1269       TU_BREAKPOINT();
;;;1270       return false;
;;;1271     }
;;;1272   }
0014c4  18bd8010          POPNE    {r4,pc}
0014c8  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1266
0014cc  e3c00001          BIC      r0,r0,#1              ;1266
0014d0  e5c4001b          STRB     r0,[r4,#0x1b]         ;1266
0014d4  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1267
0014d8  e3c00004          BIC      r0,r0,#4              ;1267
0014dc  e5c4001b          STRB     r0,[r4,#0x1b]         ;1267
                  |L1.5344|
0014e0  e3a00000          MOV      r0,#0                 ;1270
0014e4  e8bd8010          POP      {r4,pc}
;;;1273   
                          ENDP

                  usbd_edpt_xfer_fifo PROC
;;;1277   // into the USB buffer!
;;;1278   bool usbd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
0014e8  e92d4010          PUSH     {r4,lr}
;;;1279   {
;;;1280     rhport = _usbd_rhport;
;;;1281   
;;;1282     uint8_t const epnum = tu_edpt_number(ep_addr);
;;;1283     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1284   
;;;1285     TU_LOG(USBD_DBG, "  Queue ISO EP %02X with %u bytes ... ", ep_addr, total_bytes);
;;;1286   
;;;1287     // Attempt to transfer on a busy endpoint, sound like an race condition !
;;;1288     TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
0014ec  e59f4274          LDR      r4,|L1.5992|
0014f0  e3c10080          BIC      r0,r1,#0x80           ;1282
0014f4  e0844080          ADD      r4,r4,r0,LSL #1
0014f8  e59f025c          LDR      r0,|L1.5980|
0014fc  e08443a1          ADD      r4,r4,r1,LSR #7
001500  e5d00001          LDRB     r0,[r0,#1]            ;1280  ; _usbd_rhport
001504  e5d4c01b          LDRB     r12,[r4,#0x1b]
001508  e31c0001          TST      r12,#1
00150c  0a000004          BEQ      |L1.5412|
001510  e59f2270          LDR      r2,|L1.6024|
001514  e59f1270          LDR      r1,|L1.6028|
001518  e51f02c0          LDR      r0,|L1.4704|
00151c  ebfffffe          BL       __2printf
001520  ea00000c          B        |L1.5464|
                  |L1.5412|
;;;1289   
;;;1290     // Set busy first since the actual transfer can be complete before dcd_edpt_xfer() could return
;;;1291     // and usbd task can preempt and clear the busy
;;;1292     _usbd_dev.ep_status[epnum][dir].busy = 1;
001524  e5d4c01b          LDRB     r12,[r4,#0x1b]
001528  e38cc001          ORR      r12,r12,#1
00152c  e5c4c01b          STRB     r12,[r4,#0x1b]
;;;1293   
;;;1294     if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
001530  ebfffffe          BL       dcd_edpt_xfer_fifo
001534  e3500000          CMP      r0,#0
;;;1295     {
;;;1296       TU_LOG(USBD_DBG, "OK\r\n");
;;;1297       return true;
001538  13a00001          MOVNE    r0,#1
;;;1298     }else
;;;1299     {
;;;1300       // DCD error, mark endpoint as ready to allow next transfer
;;;1301       _usbd_dev.ep_status[epnum][dir].busy = 0;
;;;1302       _usbd_dev.ep_status[epnum][dir].claimed = 0;
;;;1303       TU_LOG(USBD_DBG, "failed\r\n");
;;;1304       TU_BREAKPOINT();
;;;1305       return false;
;;;1306     }
;;;1307   }
00153c  18bd8010          POPNE    {r4,pc}
001540  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1301
001544  e3c00001          BIC      r0,r0,#1              ;1301
001548  e5c4001b          STRB     r0,[r4,#0x1b]         ;1301
00154c  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1302
001550  e3c00004          BIC      r0,r0,#4              ;1302
001554  e5c4001b          STRB     r0,[r4,#0x1b]         ;1302
                  |L1.5464|
001558  e3a00000          MOV      r0,#0                 ;1305
00155c  e8bd8010          POP      {r4,pc}
;;;1308   
                          ENDP

                  usbd_edpt_busy PROC
;;;1309   bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
001560  e59f2200          LDR      r2,|L1.5992|
;;;1310   {
;;;1311     (void) rhport;
;;;1312   
;;;1313     uint8_t const epnum = tu_edpt_number(ep_addr);
001564  e3c10080          BIC      r0,r1,#0x80
;;;1314     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1315   
;;;1316     return _usbd_dev.ep_status[epnum][dir].busy;
001568  e0820080          ADD      r0,r2,r0,LSL #1
00156c  e08003a1          ADD      r0,r0,r1,LSR #7
001570  e5d0001b          LDRB     r0,[r0,#0x1b]
001574  e2000001          AND      r0,r0,#1
;;;1317   }
001578  e12fff1e          BX       lr
;;;1318   
                          ENDP

                  usbd_edpt_close PROC
;;;1368    */
;;;1369   void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
00157c  e59f020c          LDR      r0,|L1.6032|
;;;1370   {
001580  e92d4070          PUSH     {r4-r6,lr}
;;;1371     rhport = _usbd_rhport;
;;;1372   
;;;1373     TU_ASSERT(dcd_edpt_close, /**/);
001584  e3500000          CMP      r0,#0
001588  e59f01cc          LDR      r0,|L1.5980|
00158c  e5d00001          LDRB     r0,[r0,#1]            ;1371  ; _usbd_rhport
001590  0a00000f          BEQ      |L1.5588|
;;;1374     TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);
;;;1375   
;;;1376     uint8_t const epnum = tu_edpt_number(ep_addr);
001594  e3c15080          BIC      r5,r1,#0x80
;;;1377     uint8_t const dir   = tu_edpt_dir(ep_addr);
001598  e1a043a1          LSR      r4,r1,#7
;;;1378   
;;;1379     dcd_edpt_close(rhport, ep_addr);
00159c  ebfffffe          BL       dcd_edpt_close
;;;1380     _usbd_dev.ep_status[epnum][dir].stalled = 0;
0015a0  e59f01c0          LDR      r0,|L1.5992|
0015a4  e0800085          ADD      r0,r0,r5,LSL #1
0015a8  e0800004          ADD      r0,r0,r4
0015ac  e5d0101b          LDRB     r1,[r0,#0x1b]
0015b0  e3c11002          BIC      r1,r1,#2
0015b4  e5c0101b          STRB     r1,[r0,#0x1b]
;;;1381     _usbd_dev.ep_status[epnum][dir].busy = 0;
0015b8  e5d0101b          LDRB     r1,[r0,#0x1b]
0015bc  e3c11001          BIC      r1,r1,#1
0015c0  e5c0101b          STRB     r1,[r0,#0x1b]
;;;1382     _usbd_dev.ep_status[epnum][dir].claimed = 0;
0015c4  e5d0101b          LDRB     r1,[r0,#0x1b]
0015c8  e3c11004          BIC      r1,r1,#4
0015cc  e5c0101b          STRB     r1,[r0,#0x1b]
;;;1383   
;;;1384     return;
;;;1385   }
0015d0  e8bd8070          POP      {r4-r6,pc}
                  |L1.5588|
0015d4  e8bd4070          POP      {r4-r6,lr}            ;1373
0015d8  e59f21b4          LDR      r2,|L1.6036|
0015dc  e59f11b4          LDR      r1,|L1.6040|
0015e0  e51f0388          LDR      r0,|L1.4704|
0015e4  eafffffe          B        __2printf
;;;1386   
                          ENDP

                  usbd_sof_enable PROC
;;;1387   void usbd_sof_enable(uint8_t rhport, bool en)
0015e8  e59f016c          LDR      r0,|L1.5980|
;;;1388   {
;;;1389     rhport = _usbd_rhport;
0015ec  e5d00001          LDRB     r0,[r0,#1]  ; _usbd_rhport
;;;1390   
;;;1391     // TODO: Check needed if all drivers including the user sof_cb does not need an active SOF ISR any more.
;;;1392     // Only if all drivers switched off SOF calls the SOF interrupt may be disabled
;;;1393     dcd_sof_enable(rhport, en);
0015f0  eafffffe          B        dcd_sof_enable
;;;1394   }
;;;1395   
                          ENDP

                  usbd_edpt_iso_alloc PROC
;;;1396   bool usbd_edpt_iso_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t largest_packet_size)
0015f4  e59f0160          LDR      r0,|L1.5980|
;;;1397   {
0015f8  e92d4010          PUSH     {r4,lr}
;;;1398     rhport = _usbd_rhport;
0015fc  e5d00001          LDRB     r0,[r0,#1]  ; _usbd_rhport
;;;1399   
;;;1400     TU_ASSERT(dcd_edpt_iso_alloc);
001600  e59f3194          LDR      r3,|L1.6044|
001604  e3530000          CMP      r3,#0
001608  0a000008          BEQ      |L1.5680|
;;;1401     TU_ASSERT(tu_edpt_number(ep_addr) < CFG_TUD_ENDPPOINT_MAX);
00160c  e3c13080          BIC      r3,r1,#0x80
001610  e3530004          CMP      r3,#4
001614  3a00000b          BCC      |L1.5704|
001618  e59f2180          LDR      r2,|L1.6048|
00161c  e59f1180          LDR      r1,|L1.6052|
001620  e51f03c8          LDR      r0,|L1.4704|
001624  ebfffffe          BL       __2printf
001628  e3a00000          MOV      r0,#0
;;;1402   
;;;1403     return dcd_edpt_iso_alloc(rhport, ep_addr, largest_packet_size);
;;;1404   }
00162c  e8bd8010          POP      {r4,pc}
                  |L1.5680|
001630  e59f2170          LDR      r2,|L1.6056|
001634  e59f1168          LDR      r1,|L1.6052|
001638  e51f03e0          LDR      r0,|L1.4704|
00163c  ebfffffe          BL       __2printf
001640  e3a00000          MOV      r0,#0                 ;1400
001644  e8bd8010          POP      {r4,pc}
                  |L1.5704|
001648  ebfffffe          BL       dcd_edpt_iso_alloc
00164c  e8bd8010          POP      {r4,pc}
;;;1405   
                          ENDP

                  usbd_edpt_iso_activate PROC
;;;1406   bool usbd_edpt_iso_activate(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
001650  e92d41f0          PUSH     {r4-r8,lr}
;;;1407   {
;;;1408     rhport = _usbd_rhport;
;;;1409   
;;;1410     uint8_t const epnum = tu_edpt_number(desc_ep->bEndpointAddress);
001654  e5d10002          LDRB     r0,[r1,#2]
001658  e1a04001          MOV      r4,r1                 ;1407
00165c  e59f10f8          LDR      r1,|L1.5980|
001660  e3c05080          BIC      r5,r0,#0x80
001664  e5d17001          LDRB     r7,[r1,#1]            ;1408  ; _usbd_rhport
;;;1411     uint8_t const dir   = tu_edpt_dir(desc_ep->bEndpointAddress);
;;;1412   
;;;1413     TU_ASSERT(dcd_edpt_iso_activate);
001668  e59f113c          LDR      r1,|L1.6060|
00166c  e1a083a0          LSR      r8,r0,#7              ;1411
001670  e3510000          CMP      r1,#0
001674  0a000007          BEQ      |L1.5784|
;;;1414     TU_ASSERT(epnum < CFG_TUD_ENDPPOINT_MAX);
001678  e3550004          CMP      r5,#4
00167c  3a00000b          BCC      |L1.5808|
001680  e59f2128          LDR      r2,|L1.6064|
001684  e59f1128          LDR      r1,|L1.6068|
001688  e51f0430          LDR      r0,|L1.4704|
00168c  ebfffffe          BL       __2printf
001690  e3a00000          MOV      r0,#0
;;;1415     TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
;;;1416   
;;;1417     _usbd_dev.ep_status[epnum][dir].stalled = 0;
;;;1418     _usbd_dev.ep_status[epnum][dir].busy = 0;
;;;1419     _usbd_dev.ep_status[epnum][dir].claimed = 0;
;;;1420     return dcd_edpt_iso_activate(rhport, desc_ep);
;;;1421   }
001694  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5784|
001698  e59f2118          LDR      r2,|L1.6072|
00169c  e59f1110          LDR      r1,|L1.6068|
0016a0  e51f0448          LDR      r0,|L1.4704|
0016a4  ebfffffe          BL       __2printf
0016a8  e3a00000          MOV      r0,#0                 ;1413
0016ac  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5808|
0016b0  e59f60b0          LDR      r6,|L1.5992|
0016b4  e1a00004          MOV      r0,r4                 ;1415
0016b8  e5d61002          LDRB     r1,[r6,#2]            ;1415  ; _usbd_dev
0016bc  ebfffffe          BL       tu_edpt_validate
0016c0  e3500000          CMP      r0,#0                 ;1415
0016c4  0a00000e          BEQ      |L1.5892|
0016c8  e0860085          ADD      r0,r6,r5,LSL #1       ;1417
0016cc  e0802008          ADD      r2,r0,r8              ;1417
0016d0  e5d2001b          LDRB     r0,[r2,#0x1b]         ;1417
0016d4  e3c00002          BIC      r0,r0,#2              ;1417
0016d8  e5c2001b          STRB     r0,[r2,#0x1b]         ;1417
0016dc  e5d2001b          LDRB     r0,[r2,#0x1b]         ;1418
0016e0  e3c00001          BIC      r0,r0,#1              ;1418
0016e4  e5c2001b          STRB     r0,[r2,#0x1b]         ;1418
0016e8  e5d2001b          LDRB     r0,[r2,#0x1b]         ;1419
0016ec  e3c00004          BIC      r0,r0,#4              ;1419
0016f0  e5c2001b          STRB     r0,[r2,#0x1b]         ;1419
0016f4  e1a01004          MOV      r1,r4                 ;1420
0016f8  e1a00007          MOV      r0,r7                 ;1420
0016fc  ebfffffe          BL       dcd_edpt_iso_activate
001700  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5892|
001704  e59f20b0          LDR      r2,|L1.6076|
001708  e59f10a4          LDR      r1,|L1.6068|
00170c  e51f04b4          LDR      r0,|L1.4704|
001710  ebfffffe          BL       __2printf
001714  e3a00000          MOV      r0,#0                 ;1415
001718  e8bd81f0          POP      {r4-r8,pc}
;;;1422   
                          ENDP

                  get_driver PROC
;;;245    // Application is positioned first to allow overwriting built-in ones.
;;;246    static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
00171c  e59f109c          LDR      r1,|L1.6080|
;;;247    {
;;;248      // Application drivers
;;;249      if ( usbd_app_driver_get_cb )
001720  e3510000          CMP      r1,#0
001724  0a000008          BEQ      |L1.5964|
;;;250      {
;;;251        if ( drvid < _app_driver_count ) return &_app_driver[drvid];
001728  e59f202c          LDR      r2,|L1.5980|
00172c  e5d21000          LDRB     r1,[r2,#0]  ; _app_driver_count
001730  e1500001          CMP      r0,r1
;;;252        drvid -= _app_driver_count;
001734  20400001          SUBCS    r0,r0,r1
001738  35921004          LDRCC    r1,[r2,#4]            ;251  ; _app_driver
00173c  220000ff          ANDCS    r0,r0,#0xff
001740  30800080          ADDCC    r0,r0,r0,LSL #1       ;251
001744  30810180          ADDCC    r0,r1,r0,LSL #3       ;251
;;;253      }
;;;254    
;;;255      // when there is no built-in drivers BUILTIN_DRIVER_COUNT = 0 will cause -Wtype-limits warning
;;;256    #ifdef __GNUC__
;;;257    #pragma GCC diagnostic push
;;;258    #pragma GCC diagnostic ignored "-Wtype-limits"
;;;259    #endif
;;;260    
;;;261      // Built-in drivers
;;;262      if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
;;;263    
;;;264    #ifdef __GNUC__
;;;265    #pragma GCC diagnostic pop
;;;266    #endif
;;;267    
;;;268      return NULL;
;;;269    }
001748  312fff1e          BXCC     lr
                  |L1.5964|
00174c  e3500000          CMP      r0,#0                 ;262
001750  13a00000          MOVNE    r0,#0                 ;268
001754  059f0020          LDREQ    r0,|L1.6012|
001758  e12fff1e          BX       lr
;;;270    
                          ENDP

                  |L1.5980|
                          DCD      ||.data||
                  |L1.5984|
                          DCD      0x000004ba
                  |L1.5988|
                          DCD      ||.constdata||+0xb0
                  |L1.5992|
                          DCD      ||.bss||
                  |L1.5996|
                          DCD      0x000004bb
                  |L1.6000|
                          DCD      0x00000492
                  |L1.6004|
                          DCD      ||.constdata||+0x90
                  |L1.6008|
                          DCD      0x00000493
                  |L1.6012|
                          DCD      ||.constdata||
                  |L1.6016|
                          DCD      0x000004e6
                  |L1.6020|
                          DCD      ||.constdata||+0xbf
                  |L1.6024|
                          DCD      0x00000508
                  |L1.6028|
                          DCD      ||.constdata||+0xce
                  |L1.6032|
                          DCD      dcd_edpt_close
                  |L1.6036|
                          DCD      0x0000055d
                  |L1.6040|
                          DCD      ||.constdata||+0xe2
                  |L1.6044|
                          DCD      dcd_edpt_iso_alloc
                  |L1.6048|
                          DCD      0x00000579
                  |L1.6052|
                          DCD      ||.constdata||+0xf2
                  |L1.6056|
                          DCD      0x00000578
                  |L1.6060|
                          DCD      dcd_edpt_iso_activate
                  |L1.6064|
                          DCD      0x00000586
                  |L1.6068|
                          DCD      ||.constdata||+0x106
                  |L1.6072|
                          DCD      0x00000585
                  |L1.6076|
                          DCD      0x00000587
                  |L1.6080|
                          DCD      usbd_app_driver_get_cb

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _usbd_dev
                          %        36
                  _ubsd_mutexdef
                          %        16

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.bss||
                  _usbd_qdef__mbox
                          %        80

                          AREA ||area_number.5||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.bss||
                  _usbd_qdef__pool
                          %        204

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _usbd_driver
                          DCD      mscd_init
                          DCD      mscd_reset
                          DCD      mscd_open
                          DCD      mscd_control_xfer_cb
                          DCD      mscd_xfer_cb
                          DCD      0x00000000
                  __func__
000018  7475645f          DCB      0x74,0x75,0x64,0x5f
00001c  696e6974          DCB      0x69,0x6e,0x69,0x74
000020  00                DCB      0x00
                  |symbol_number.29|
000021  636f6e            DCB      0x63,0x6f,0x6e
000024  66696775          DCB      0x66,0x69,0x67,0x75
000028  72617469          DCB      0x72,0x61,0x74,0x69
00002c  6f6e5f72          DCB      0x6f,0x6e,0x5f,0x72
000030  65736574          DCB      0x65,0x73,0x65,0x74
000034  00                DCB      0x00
                  |symbol_number.30|
000035  747564            DCB      0x74,0x75,0x64
000038  5f746173          DCB      0x5f,0x74,0x61,0x73
00003c  6b5f6578          DCB      0x6b,0x5f,0x65,0x78
000040  7400              DCB      0x74,0x00
                  |symbol_number.31|
000042  7072              DCB      0x70,0x72
000044  6f636573          DCB      0x6f,0x63,0x65,0x73
000048  735f636f          DCB      0x73,0x5f,0x63,0x6f
00004c  6e74726f          DCB      0x6e,0x74,0x72,0x6f
000050  6c5f7265          DCB      0x6c,0x5f,0x72,0x65
000054  71756573          DCB      0x71,0x75,0x65,0x73
000058  7400              DCB      0x74,0x00
                  |symbol_number.32|
00005a  7072              DCB      0x70,0x72
00005c  6f636573          DCB      0x6f,0x63,0x65,0x73
000060  735f7365          DCB      0x73,0x5f,0x73,0x65
000064  745f636f          DCB      0x74,0x5f,0x63,0x6f
000068  6e666967          DCB      0x6e,0x66,0x69,0x67
00006c  00                DCB      0x00
                  |symbol_number.33|
00006d  70726f            DCB      0x70,0x72,0x6f
000070  63657373          DCB      0x63,0x65,0x73,0x73
000074  5f676574          DCB      0x5f,0x67,0x65,0x74
000078  5f646573          DCB      0x5f,0x64,0x65,0x73
00007c  63726970          DCB      0x63,0x72,0x69,0x70
000080  746f7200          DCB      0x74,0x6f,0x72,0x00
000084  00050000          DCB      0x00,0x05,0x00,0x00
                          %        8
                  |symbol_number.34|
000090  75736264          DCB      0x75,0x73,0x62,0x64
000094  5f6f7065          DCB      0x5f,0x6f,0x70,0x65
000098  6e5f6564          DCB      0x6e,0x5f,0x65,0x64
00009c  70745f70          DCB      0x70,0x74,0x5f,0x70
0000a0  61697200          DCB      0x61,0x69,0x72,0x00
0000a4  00080000          DCB      0x00,0x08,0x00,0x00
                          %        8
                  |symbol_number.35|
0000b0  75736264          DCB      0x75,0x73,0x62,0x64
0000b4  5f656470          DCB      0x5f,0x65,0x64,0x70
0000b8  745f6f70          DCB      0x74,0x5f,0x6f,0x70
0000bc  656e00            DCB      0x65,0x6e,0x00
                  |symbol_number.36|
0000bf  75                DCB      0x75
0000c0  7362645f          DCB      0x73,0x62,0x64,0x5f
0000c4  65647074          DCB      0x65,0x64,0x70,0x74
0000c8  5f786665          DCB      0x5f,0x78,0x66,0x65
0000cc  7200              DCB      0x72,0x00
                  |symbol_number.37|
0000ce  7573              DCB      0x75,0x73
0000d0  62645f65          DCB      0x62,0x64,0x5f,0x65
0000d4  6470745f          DCB      0x64,0x70,0x74,0x5f
0000d8  78666572          DCB      0x78,0x66,0x65,0x72
0000dc  5f666966          DCB      0x5f,0x66,0x69,0x66
0000e0  6f00              DCB      0x6f,0x00
                  |symbol_number.38|
0000e2  7573              DCB      0x75,0x73
0000e4  62645f65          DCB      0x62,0x64,0x5f,0x65
0000e8  6470745f          DCB      0x64,0x70,0x74,0x5f
0000ec  636c6f73          DCB      0x63,0x6c,0x6f,0x73
0000f0  6500              DCB      0x65,0x00
                  |symbol_number.39|
0000f2  7573              DCB      0x75,0x73
0000f4  62645f65          DCB      0x62,0x64,0x5f,0x65
0000f8  6470745f          DCB      0x64,0x70,0x74,0x5f
0000fc  69736f5f          DCB      0x69,0x73,0x6f,0x5f
000100  616c6c6f          DCB      0x61,0x6c,0x6c,0x6f
000104  6300              DCB      0x63,0x00
                  |symbol_number.40|
000106  7573              DCB      0x75,0x73
000108  62645f65          DCB      0x62,0x64,0x5f,0x65
00010c  6470745f          DCB      0x64,0x70,0x74,0x5f
000110  69736f5f          DCB      0x69,0x73,0x6f,0x5f
000114  61637469          DCB      0x61,0x63,0x74,0x69
000118  76617465          DCB      0x76,0x61,0x74,0x65
00011c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _app_driver_count
000000  00                DCB      0x00
                  _usbd_rhport
000001  ff0000            DCB      0xff,0x00,0x00
                  _app_driver
                          DCD      0x00000000
                  _usbd_q
                          DCD      0x00000000
                  _usbd_mutex
                          DCD      0x00000000
                  _usbd_qdef
000010  0010000c          DCW      0x0010,0x000c
                          DCD      _usbd_qdef__pool
                          DCD      _usbd_qdef__mbox

                          AREA ||i.__ARM_common_memcpy1_8||, COMGROUP=__ARM_common_memcpy1_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memcpy1_8 PROC
000000  e5d12000          LDRB     r2,[r1,#0]
000004  e5c02000          STRB     r2,[r0,#0]
000008  e5d13001          LDRB     r3,[r1,#1]
00000c  e5c03001          STRB     r3,[r0,#1]
000010  e5d1c002          LDRB     r12,[r1,#2]
000014  e5c0c002          STRB     r12,[r0,#2]
000018  e5d12003          LDRB     r2,[r1,#3]
00001c  e5c02003          STRB     r2,[r0,#3]
000020  e5d13004          LDRB     r3,[r1,#4]
000024  e5c03004          STRB     r3,[r0,#4]
000028  e5d1c005          LDRB     r12,[r1,#5]
00002c  e5c0c005          STRB     r12,[r0,#5]
000030  e5d12006          LDRB     r2,[r1,#6]
000034  e5c02006          STRB     r2,[r0,#6]
000038  e5d13007          LDRB     r3,[r1,#7]
00003c  e5c03007          STRB     r3,[r0,#7]
000040  e12fff1e          BX       lr
                          ENDP


                          AREA ||i.__ARM_common_memset1_8||, COMGROUP=__ARM_common_memset1_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memset1_8 PROC
000000  e20110ff          AND      r1,r1,#0xff
000004  e3100001          TST      r0,#1
000008  e1811401          ORR      r1,r1,r1,LSL #8
00000c  01c010b6          STRHEQ   r1,[r0,#6]
000010  15c01007          STRBNE   r1,[r0,#7]
000014  14c01001          STRBNE   r1,[r0],#1
000018  e1c010b0          STRH     r1,[r0,#0]
00001c  e1c010b2          STRH     r1,[r0,#2]
000020  e1c010b4          STRH     r1,[r0,#4]
000024  e12fff1e          BX       lr
                          ENDP

