; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\clk-f1c100s-pll.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\clk-f1c100s-pll.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\clk-f1c100s-pll.crf ..\periph\clk-f1c100s-pll.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  clk_f1c100s_pll_set_parent PROC
;;;35     
;;;36     void clk_f1c100s_pll_set_parent(clk_pll_t* clk_pll, const char* pname)
000000  e12fff1e          BX       lr
;;;37     {
;;;38     }
;;;39     
                          ENDP

                  clk_f1c100s_pll_get_parent PROC
;;;40     const clk_pll_t* clk_f1c100s_pll_get_parent(clk_pll_t* clk_pll)
000004  e1a01000          MOV      r1,r0
;;;41     {
;;;42       return clk_pll->parent;
000008  e5910004          LDR      r0,[r1,#4]
;;;43     }
00000c  e12fff1e          BX       lr
;;;44     
                          ENDP

                  clk_f1c100s_pll_set_enable PROC
;;;45     void clk_f1c100s_pll_set_enable(clk_pll_t* clk_pll, bool enable)
000010  e92d4070          PUSH     {r4-r6,lr}
;;;46     {
000014  e1a04000          MOV      r4,r0
000018  e1a06001          MOV      r6,r1
;;;47       uint32_t r = 0;
00001c  e3a05000          MOV      r5,#0
;;;48     
;;;49       switch (clk_pll->channel) {
000020  e5940008          LDR      r0,[r4,#8]
000024  e3500006          CMP      r0,#6
000028  308ff100          ADDCC    pc,pc,r0,LSL #2
00002c  ea00005d          B        |L1.424|
000030  ea000004          B        |L1.72|
000034  ea000010          B        |L1.124|
000038  ea00001e          B        |L1.184|
00003c  ea00002c          B        |L1.244|
000040  ea00003a          B        |L1.304|
000044  ea000048          B        |L1.364|
                  |L1.72|
;;;50         case 0:
000048  e1a00000          MOV      r0,r0
;;;51           r = read32(clk_pll->virt + CCU_PLL_CPU_CTRL);
00004c  e5940000          LDR      r0,[r4,#0]
000050  ebfffffe          BL       read32
000054  e1a05000          MOV      r5,r0
;;;52           if (enable)
000058  e3560000          CMP      r6,#0
00005c  0a000001          BEQ      |L1.104|
;;;53             r |= (1UL << 31);
000060  e3855102          ORR      r5,r5,#0x80000000
000064  ea000000          B        |L1.108|
                  |L1.104|
;;;54           else
;;;55             r &= ~(1UL << 31);
000068  e3c55102          BIC      r5,r5,#0x80000000
                  |L1.108|
;;;56           write32(clk_pll->virt + CCU_PLL_CPU_CTRL, r);
00006c  e1a01005          MOV      r1,r5
000070  e5940000          LDR      r0,[r4,#0]
000074  ebfffffe          BL       write32
;;;57           break;
000078  ea00004c          B        |L1.432|
                  |L1.124|
;;;58     
;;;59         case 1:
00007c  e1a00000          MOV      r0,r0
;;;60           r = read32(clk_pll->virt + CCU_PLL_AUDIO_CTRL);
000080  e5941000          LDR      r1,[r4,#0]
000084  e2810008          ADD      r0,r1,#8
000088  ebfffffe          BL       read32
00008c  e1a05000          MOV      r5,r0
;;;61           if (enable)
000090  e3560000          CMP      r6,#0
000094  0a000001          BEQ      |L1.160|
;;;62             r |= (1UL << 31);
000098  e3855102          ORR      r5,r5,#0x80000000
00009c  ea000000          B        |L1.164|
                  |L1.160|
;;;63           else
;;;64             r &= ~(1UL << 31);
0000a0  e3c55102          BIC      r5,r5,#0x80000000
                  |L1.164|
;;;65           write32(clk_pll->virt + CCU_PLL_AUDIO_CTRL, r);
0000a4  e5941000          LDR      r1,[r4,#0]
0000a8  e2810008          ADD      r0,r1,#8
0000ac  e1a01005          MOV      r1,r5
0000b0  ebfffffe          BL       write32
;;;66           break;
0000b4  ea00003d          B        |L1.432|
                  |L1.184|
;;;67     
;;;68         case 2:
0000b8  e1a00000          MOV      r0,r0
;;;69           r = read32(clk_pll->virt + CCU_PLL_VIDEO_CTRL);
0000bc  e5941000          LDR      r1,[r4,#0]
0000c0  e2810010          ADD      r0,r1,#0x10
0000c4  ebfffffe          BL       read32
0000c8  e1a05000          MOV      r5,r0
;;;70           if (enable)
0000cc  e3560000          CMP      r6,#0
0000d0  0a000001          BEQ      |L1.220|
;;;71             r |= (1UL << 31);
0000d4  e3855102          ORR      r5,r5,#0x80000000
0000d8  ea000000          B        |L1.224|
                  |L1.220|
;;;72           else
;;;73             r &= ~(1UL << 31);
0000dc  e3c55102          BIC      r5,r5,#0x80000000
                  |L1.224|
;;;74           write32(clk_pll->virt + CCU_PLL_VIDEO_CTRL, r);
0000e0  e5941000          LDR      r1,[r4,#0]
0000e4  e2810010          ADD      r0,r1,#0x10
0000e8  e1a01005          MOV      r1,r5
0000ec  ebfffffe          BL       write32
;;;75           break;
0000f0  ea00002e          B        |L1.432|
                  |L1.244|
;;;76     
;;;77         case 3:
0000f4  e1a00000          MOV      r0,r0
;;;78           r = read32(clk_pll->virt + CCU_PLL_VE_CTRL);
0000f8  e5941000          LDR      r1,[r4,#0]
0000fc  e2810018          ADD      r0,r1,#0x18
000100  ebfffffe          BL       read32
000104  e1a05000          MOV      r5,r0
;;;79           if (enable)
000108  e3560000          CMP      r6,#0
00010c  0a000001          BEQ      |L1.280|
;;;80             r |= (1UL << 31);
000110  e3855102          ORR      r5,r5,#0x80000000
000114  ea000000          B        |L1.284|
                  |L1.280|
;;;81           else
;;;82             r &= ~(1UL << 31);
000118  e3c55102          BIC      r5,r5,#0x80000000
                  |L1.284|
;;;83           write32(clk_pll->virt + CCU_PLL_VE_CTRL, r);
00011c  e5941000          LDR      r1,[r4,#0]
000120  e2810018          ADD      r0,r1,#0x18
000124  e1a01005          MOV      r1,r5
000128  ebfffffe          BL       write32
;;;84           break;
00012c  ea00001f          B        |L1.432|
                  |L1.304|
;;;85     
;;;86         case 4:
000130  e1a00000          MOV      r0,r0
;;;87           r = read32(clk_pll->virt + CCU_PLL_DDR_CTRL);
000134  e5941000          LDR      r1,[r4,#0]
000138  e2810020          ADD      r0,r1,#0x20
00013c  ebfffffe          BL       read32
000140  e1a05000          MOV      r5,r0
;;;88           if (enable)
000144  e3560000          CMP      r6,#0
000148  0a000001          BEQ      |L1.340|
;;;89             r |= (1UL << 31);
00014c  e3855102          ORR      r5,r5,#0x80000000
000150  ea000000          B        |L1.344|
                  |L1.340|
;;;90           else
;;;91             r &= ~(1UL << 31);
000154  e3c55102          BIC      r5,r5,#0x80000000
                  |L1.344|
;;;92           write32(clk_pll->virt + CCU_PLL_DDR_CTRL, r);
000158  e5941000          LDR      r1,[r4,#0]
00015c  e2810020          ADD      r0,r1,#0x20
000160  e1a01005          MOV      r1,r5
000164  ebfffffe          BL       write32
;;;93           break;
000168  ea000010          B        |L1.432|
                  |L1.364|
;;;94     
;;;95         case 5:
00016c  e1a00000          MOV      r0,r0
;;;96           r = read32(clk_pll->virt + CCU_PLL_PERIPH_CTRL);
000170  e5941000          LDR      r1,[r4,#0]
000174  e2810028          ADD      r0,r1,#0x28
000178  ebfffffe          BL       read32
00017c  e1a05000          MOV      r5,r0
;;;97           if (enable)
000180  e3560000          CMP      r6,#0
000184  0a000001          BEQ      |L1.400|
;;;98             r |= (1UL << 31);
000188  e3855102          ORR      r5,r5,#0x80000000
00018c  ea000000          B        |L1.404|
                  |L1.400|
;;;99           else
;;;100            r &= ~(1UL << 31);
000190  e3c55102          BIC      r5,r5,#0x80000000
                  |L1.404|
;;;101          write32(clk_pll->virt + CCU_PLL_PERIPH_CTRL, r);
000194  e5941000          LDR      r1,[r4,#0]
000198  e2810028          ADD      r0,r1,#0x28
00019c  e1a01005          MOV      r1,r5
0001a0  ebfffffe          BL       write32
;;;102          break;
0001a4  ea000001          B        |L1.432|
                  |L1.424|
;;;103    
;;;104        default:
0001a8  e1a00000          MOV      r0,r0
;;;105          break;
0001ac  e1a00000          MOV      r0,r0
                  |L1.432|
0001b0  e1a00000          MOV      r0,r0                 ;57
;;;106      }
;;;107    }
0001b4  e8bd8070          POP      {r4-r6,pc}
;;;108    
                          ENDP

                  clk_f1c100s_pll_get_enable PROC
;;;109    bool clk_f1c100s_pll_get_enable(clk_pll_t* clk_pll)
0001b8  e92d4070          PUSH     {r4-r6,lr}
;;;110    {
0001bc  e1a04000          MOV      r4,r0
;;;111      uint32_t r = 0;
0001c0  e3a05000          MOV      r5,#0
;;;112    
;;;113      switch (clk_pll->channel) {
0001c4  e5940008          LDR      r0,[r4,#8]
0001c8  e3500006          CMP      r0,#6
0001cc  308ff100          ADDCC    pc,pc,r0,LSL #2
0001d0  ea000028          B        |L1.632|
0001d4  ea000004          B        |L1.492|
0001d8  ea000008          B        |L1.512|
0001dc  ea00000d          B        |L1.536|
0001e0  ea000012          B        |L1.560|
0001e4  ea000017          B        |L1.584|
0001e8  ea00001c          B        |L1.608|
                  |L1.492|
;;;114        case 0:
0001ec  e1a00000          MOV      r0,r0
;;;115          r = read32(clk_pll->virt + CCU_PLL_CPU_CTRL);
0001f0  e5940000          LDR      r0,[r4,#0]
0001f4  ebfffffe          BL       read32
0001f8  e1a05000          MOV      r5,r0
;;;116          break;
0001fc  ea00001f          B        |L1.640|
                  |L1.512|
;;;117    
;;;118        case 1:
000200  e1a00000          MOV      r0,r0
;;;119          r = read32(clk_pll->virt + CCU_PLL_AUDIO_CTRL);
000204  e5941000          LDR      r1,[r4,#0]
000208  e2810008          ADD      r0,r1,#8
00020c  ebfffffe          BL       read32
000210  e1a05000          MOV      r5,r0
;;;120          break;
000214  ea000019          B        |L1.640|
                  |L1.536|
;;;121    
;;;122        case 2:
000218  e1a00000          MOV      r0,r0
;;;123          r = read32(clk_pll->virt + CCU_PLL_VIDEO_CTRL);
00021c  e5941000          LDR      r1,[r4,#0]
000220  e2810010          ADD      r0,r1,#0x10
000224  ebfffffe          BL       read32
000228  e1a05000          MOV      r5,r0
;;;124          break;
00022c  ea000013          B        |L1.640|
                  |L1.560|
;;;125    
;;;126        case 3:
000230  e1a00000          MOV      r0,r0
;;;127          r = read32(clk_pll->virt + CCU_PLL_VE_CTRL);
000234  e5941000          LDR      r1,[r4,#0]
000238  e2810018          ADD      r0,r1,#0x18
00023c  ebfffffe          BL       read32
000240  e1a05000          MOV      r5,r0
;;;128          break;
000244  ea00000d          B        |L1.640|
                  |L1.584|
;;;129    
;;;130        case 4:
000248  e1a00000          MOV      r0,r0
;;;131          r = read32(clk_pll->virt + CCU_PLL_DDR_CTRL);
00024c  e5941000          LDR      r1,[r4,#0]
000250  e2810020          ADD      r0,r1,#0x20
000254  ebfffffe          BL       read32
000258  e1a05000          MOV      r5,r0
;;;132          break;
00025c  ea000007          B        |L1.640|
                  |L1.608|
;;;133    
;;;134        case 5:
000260  e1a00000          MOV      r0,r0
;;;135          r = read32(clk_pll->virt + CCU_PLL_PERIPH_CTRL);
000264  e5941000          LDR      r1,[r4,#0]
000268  e2810028          ADD      r0,r1,#0x28
00026c  ebfffffe          BL       read32
000270  e1a05000          MOV      r5,r0
;;;136          break;
000274  ea000001          B        |L1.640|
                  |L1.632|
;;;137    
;;;138        default:
000278  e1a00000          MOV      r0,r0
;;;139          break;
00027c  e1a00000          MOV      r0,r0
                  |L1.640|
000280  e1a00000          MOV      r0,r0                 ;116
;;;140      }
;;;141      return (r & (1UL << 31)) ? true : false;
000284  e1a00fa5          LSR      r0,r5,#31
;;;142    }
000288  e8bd8070          POP      {r4-r6,pc}
;;;143    
                          ENDP

                  clk_f1c100s_pll_set_rate PROC
;;;144    void clk_f1c100s_pll_set_rate(clk_pll_t* clk_pll, uint64_t prate, uint64_t rate)
00028c  e92d4030          PUSH     {r4,r5,lr}
;;;145    {
000290  e59d400c          LDR      r4,[sp,#0xc]
000294  e59d5010          LDR      r5,[sp,#0x10]
;;;146    }
000298  e8bd8030          POP      {r4,r5,pc}
;;;147    
                          ENDP

                  clk_f1c100s_pll_get_rate PROC
;;;148    uint64_t clk_f1c100s_pll_get_rate(clk_pll_t* clk_pll, uint64_t prate)
00029c  e92d5fff          PUSH     {r0-r12,lr}
;;;149    {
0002a0  e24dd010          SUB      sp,sp,#0x10
0002a4  e1a07002          MOV      r7,r2
0002a8  e1a08003          MOV      r8,r3
0002ac  e3a01000          MOV      r1,#0
;;;150      uint32_t r, n, k, m, p;
;;;151      uint64_t rate = 0;
0002b0  e1a05001          MOV      r5,r1
0002b4  e1a06001          MOV      r6,r1
;;;152    
;;;153      switch (clk_pll->channel) {
0002b8  e59d0010          LDR      r0,[sp,#0x10]
0002bc  e5900008          LDR      r0,[r0,#8]
0002c0  e3500006          CMP      r0,#6
0002c4  308ff100          ADDCC    pc,pc,r0,LSL #2
0002c8  ea0000db          B        |L1.1596|
0002cc  ea000004          B        |L1.740|
0002d0  ea000027          B        |L1.884|
0002d4  ea00004a          B        |L1.1028|
0002d8  ea00006e          B        |L1.1176|
0002dc  ea000092          B        |L1.1324|
0002e0  ea0000b1          B        |L1.1452|
                  |L1.740|
;;;154        case 0:
0002e4  e1a00000          MOV      r0,r0
;;;155          r = read32(clk_pll->virt + CCU_PLL_CPU_CTRL);
0002e8  e59d1010          LDR      r1,[sp,#0x10]
0002ec  e5910000          LDR      r0,[r1,#0]
0002f0  ebfffffe          BL       read32
0002f4  e1a04000          MOV      r4,r0
;;;156          n = ((r >> 8) & 0x1f) + 1;
0002f8  e3a0001f          MOV      r0,#0x1f
0002fc  e0000424          AND      r0,r0,r4,LSR #8
000300  e2809001          ADD      r9,r0,#1
;;;157          k = ((r >> 4) & 0x3) + 1;
000304  e3a00003          MOV      r0,#3
000308  e0000224          AND      r0,r0,r4,LSR #4
00030c  e280b001          ADD      r11,r0,#1
;;;158          m = ((r >> 0) & 0x3) + 1;
000310  e2040003          AND      r0,r4,#3
000314  e280a001          ADD      r10,r0,#1
;;;159          p = ((r >> 16) & 0x3) + 1;
000318  e3a00003          MOV      r0,#3
00031c  e0000824          AND      r0,r0,r4,LSR #16
000320  e2800001          ADD      r0,r0,#1
000324  e58d000c          STR      r0,[sp,#0xc]
;;;160          rate = (uint64_t)((prate * n * k) / (m * p));
000328  e59d000c          LDR      r0,[sp,#0xc]
00032c  e16c008a          SMULBB   r12,r10,r0
000330  e3a01000          MOV      r1,#0
000334  e0820997          UMULL    r0,r2,r7,r9
000338  e0222998          MLA      r2,r8,r9,r2
00033c  e0212197          MLA      r1,r7,r1,r2
000340  e3a02000          MOV      r2,#0
000344  e08e3b90          UMULL    r3,lr,r0,r11
000348  e021e19b          MLA      r1,r11,r1,lr
00034c  e0201092          MLA      r0,r2,r0,r1
000350  e1a0200c          MOV      r2,r12
000354  e58d3000          STR      r3,[sp,#0]
000358  e3a03000          MOV      r3,#0
00035c  e58d0004          STR      r0,[sp,#4]
000360  e1cd00d0          LDRD     r0,r1,[sp,#0]
000364  ebfffffe          BL       __aeabi_uldivmod
000368  e1a05000          MOV      r5,r0
00036c  e1a06001          MOV      r6,r1
;;;161          break;
000370  ea0000b3          B        |L1.1604|
                  |L1.884|
;;;162    
;;;163        case 1:
000374  e1a00000          MOV      r0,r0
;;;164          r = read32(clk_pll->virt + CCU_PLL_AUDIO_CTRL);
000378  e59d1010          LDR      r1,[sp,#0x10]
00037c  e5911000          LDR      r1,[r1,#0]
000380  e2810008          ADD      r0,r1,#8
000384  ebfffffe          BL       read32
000388  e1a04000          MOV      r4,r0
;;;165          if (r & (1 << 24))
00038c  e2040401          AND      r0,r4,#0x1000000
000390  e3500000          CMP      r0,#0
000394  0a000003          BEQ      |L1.936|
;;;166            n = ((r >> 8) & 0xf) + 1;
000398  e3a0000f          MOV      r0,#0xf
00039c  e0000424          AND      r0,r0,r4,LSR #8
0003a0  e2809001          ADD      r9,r0,#1
0003a4  ea000002          B        |L1.948|
                  |L1.936|
;;;167          else
;;;168            n = ((r >> 8) & 0x7f) + 1;
0003a8  e3a0007f          MOV      r0,#0x7f
0003ac  e0000424          AND      r0,r0,r4,LSR #8
0003b0  e2809001          ADD      r9,r0,#1
                  |L1.948|
;;;169          m = ((r >> 0) & 0x1f) + 1;
0003b4  e204001f          AND      r0,r4,#0x1f
0003b8  e280a001          ADD      r10,r0,#1
;;;170          rate = (uint64_t)((prate * n * 2) / m);
0003bc  e3a01000          MOV      r1,#0
0003c0  e0820997          UMULL    r0,r2,r7,r9
0003c4  e0222998          MLA      r2,r8,r9,r2
0003c8  e0232197          MLA      r3,r7,r1,r2
0003cc  e3a02002          MOV      r2,#2
0003d0  e08ec290          UMULL    r12,lr,r0,r2
0003d4  e022e293          MLA      r2,r3,r2,lr
0003d8  e0202091          MLA      r0,r1,r0,r2
0003dc  e1a0200a          MOV      r2,r10
0003e0  e1a03001          MOV      r3,r1
0003e4  e58d0004          STR      r0,[sp,#4]
0003e8  e58dc000          STR      r12,[sp,#0]
0003ec  e1a0000c          MOV      r0,r12
0003f0  e59d1004          LDR      r1,[sp,#4]
0003f4  ebfffffe          BL       __aeabi_uldivmod
0003f8  e1a05000          MOV      r5,r0
0003fc  e1a06001          MOV      r6,r1
;;;171          break;
000400  ea00008f          B        |L1.1604|
                  |L1.1028|
;;;172    
;;;173        case 2:
000404  e1a00000          MOV      r0,r0
;;;174          r = read32(clk_pll->virt + CCU_PLL_VIDEO_CTRL);
000408  e59d1010          LDR      r1,[sp,#0x10]
00040c  e5911000          LDR      r1,[r1,#0]
000410  e2810010          ADD      r0,r1,#0x10
000414  ebfffffe          BL       read32
000418  e1a04000          MOV      r4,r0
;;;175          if (r & (1 << 24)) {
00041c  e2040401          AND      r0,r4,#0x1000000
000420  e3500000          CMP      r0,#0
000424  0a000012          BEQ      |L1.1140|
;;;176            n = ((r >> 8) & 0x7f) + 1;
000428  e3a0007f          MOV      r0,#0x7f
00042c  e0000424          AND      r0,r0,r4,LSR #8
000430  e2809001          ADD      r9,r0,#1
;;;177            m = ((r >> 0) & 0xf) + 1;
000434  e204000f          AND      r0,r4,#0xf
000438  e280a001          ADD      r10,r0,#1
;;;178            rate = (uint64_t)((prate * n) / m);
00043c  e3a00000          MOV      r0,#0
000440  e0821997          UMULL    r1,r2,r7,r9
000444  e0222998          MLA      r2,r8,r9,r2
000448  e0202097          MLA      r0,r7,r0,r2
00044c  e1a0200a          MOV      r2,r10
000450  e3a03000          MOV      r3,#0
000454  e58d0004          STR      r0,[sp,#4]
000458  e58d1000          STR      r1,[sp,#0]
00045c  e1a00001          MOV      r0,r1
000460  e59d1004          LDR      r1,[sp,#4]
000464  ebfffffe          BL       __aeabi_uldivmod
000468  e1a05000          MOV      r5,r0
00046c  e1a06001          MOV      r6,r1
000470  ea000007          B        |L1.1172|
                  |L1.1140|
;;;179          } else {
;;;180            if (r & (1 << 25))
000474  e2040402          AND      r0,r4,#0x2000000
000478  e3500000          CMP      r0,#0
00047c  0a000002          BEQ      |L1.1164|
000480  e59f51e4          LDR      r5,|L1.1644|
000484  e3a06000          MOV      r6,#0
;;;181              rate = 297 * 1000 * 1000;
000488  ea000001          B        |L1.1172|
                  |L1.1164|
00048c  e59f51dc          LDR      r5,|L1.1648|
000490  e3a06000          MOV      r6,#0
                  |L1.1172|
;;;182            else
;;;183              rate = 270 * 1000 * 1000;
;;;184          }
;;;185          break;
000494  ea00006a          B        |L1.1604|
                  |L1.1176|
;;;186    
;;;187        case 3:
000498  e1a00000          MOV      r0,r0
;;;188          r = read32(clk_pll->virt + CCU_PLL_VE_CTRL);
00049c  e59d1010          LDR      r1,[sp,#0x10]
0004a0  e5911000          LDR      r1,[r1,#0]
0004a4  e2810018          ADD      r0,r1,#0x18
0004a8  ebfffffe          BL       read32
0004ac  e1a04000          MOV      r4,r0
;;;189          if (r & (1 << 24)) {
0004b0  e2040401          AND      r0,r4,#0x1000000
0004b4  e3500000          CMP      r0,#0
0004b8  0a000012          BEQ      |L1.1288|
;;;190            n = ((r >> 8) & 0x7f) + 1;
0004bc  e3a0007f          MOV      r0,#0x7f
0004c0  e0000424          AND      r0,r0,r4,LSR #8
0004c4  e2809001          ADD      r9,r0,#1
;;;191            m = ((r >> 0) & 0xf) + 1;
0004c8  e204000f          AND      r0,r4,#0xf
0004cc  e280a001          ADD      r10,r0,#1
;;;192            rate = (uint64_t)((prate * n) / m);
0004d0  e3a00000          MOV      r0,#0
0004d4  e0821997          UMULL    r1,r2,r7,r9
0004d8  e0222998          MLA      r2,r8,r9,r2
0004dc  e0202097          MLA      r0,r7,r0,r2
0004e0  e1a0200a          MOV      r2,r10
0004e4  e3a03000          MOV      r3,#0
0004e8  e58d0004          STR      r0,[sp,#4]
0004ec  e58d1000          STR      r1,[sp,#0]
0004f0  e1a00001          MOV      r0,r1
0004f4  e59d1004          LDR      r1,[sp,#4]
0004f8  ebfffffe          BL       __aeabi_uldivmod
0004fc  e1a05000          MOV      r5,r0
000500  e1a06001          MOV      r6,r1
000504  ea000007          B        |L1.1320|
                  |L1.1288|
;;;193          } else {
;;;194            if (r & (1 << 25))
000508  e2040402          AND      r0,r4,#0x2000000
00050c  e3500000          CMP      r0,#0
000510  0a000002          BEQ      |L1.1312|
000514  e59f5150          LDR      r5,|L1.1644|
000518  e3a06000          MOV      r6,#0
;;;195              rate = 297 * 1000 * 1000;
00051c  ea000001          B        |L1.1320|
                  |L1.1312|
000520  e59f5148          LDR      r5,|L1.1648|
000524  e3a06000          MOV      r6,#0
                  |L1.1320|
;;;196            else
;;;197              rate = 270 * 1000 * 1000;
;;;198          }
;;;199          break;
000528  ea000045          B        |L1.1604|
                  |L1.1324|
;;;200    
;;;201        case 4:
00052c  e1a00000          MOV      r0,r0
;;;202          r = read32(clk_pll->virt + CCU_PLL_DDR_CTRL);
000530  e59d1010          LDR      r1,[sp,#0x10]
000534  e5911000          LDR      r1,[r1,#0]
000538  e2810020          ADD      r0,r1,#0x20
00053c  ebfffffe          BL       read32
000540  e1a04000          MOV      r4,r0
;;;203          n = ((r >> 8) & 0x1f) + 1;
000544  e3a0001f          MOV      r0,#0x1f
000548  e0000424          AND      r0,r0,r4,LSR #8
00054c  e2809001          ADD      r9,r0,#1
;;;204          k = ((r >> 4) & 0x3) + 1;
000550  e3a00003          MOV      r0,#3
000554  e0000224          AND      r0,r0,r4,LSR #4
000558  e280b001          ADD      r11,r0,#1
;;;205          m = ((r >> 0) & 0x3) + 1;
00055c  e2040003          AND      r0,r4,#3
000560  e280a001          ADD      r10,r0,#1
;;;206          rate = (uint64_t)((prate * n * k) / m);
000564  e3a01000          MOV      r1,#0
000568  e0820997          UMULL    r0,r2,r7,r9
00056c  e0222998          MLA      r2,r8,r9,r2
000570  e0222197          MLA      r2,r7,r1,r2
000574  e1a03001          MOV      r3,r1
000578  e08c1b90          UMULL    r1,r12,r0,r11
00057c  e022c29b          MLA      r2,r11,r2,r12
000580  e0202093          MLA      r0,r3,r0,r2
000584  e1a0200a          MOV      r2,r10
000588  e3a03000          MOV      r3,#0
00058c  e58d0004          STR      r0,[sp,#4]
000590  e58d1000          STR      r1,[sp,#0]
000594  e1a00001          MOV      r0,r1
000598  e59d1004          LDR      r1,[sp,#4]
00059c  ebfffffe          BL       __aeabi_uldivmod
0005a0  e1a05000          MOV      r5,r0
0005a4  e1a06001          MOV      r6,r1
;;;207          break;
0005a8  ea000025          B        |L1.1604|
                  |L1.1452|
;;;208    
;;;209        case 5:
0005ac  e1a00000          MOV      r0,r0
;;;210          r = read32(clk_pll->virt + CCU_PLL_PERIPH_CTRL);
0005b0  e59d1010          LDR      r1,[sp,#0x10]
0005b4  e5911000          LDR      r1,[r1,#0]
0005b8  e2810028          ADD      r0,r1,#0x28
0005bc  ebfffffe          BL       read32
0005c0  e1a04000          MOV      r4,r0
;;;211          n = ((r >> 8) & 0x1f) + 1;
0005c4  e3a0001f          MOV      r0,#0x1f
0005c8  e0000424          AND      r0,r0,r4,LSR #8
0005cc  e2809001          ADD      r9,r0,#1
;;;212          k = ((r >> 4) & 0x3) + 1;
0005d0  e3a00003          MOV      r0,#3
0005d4  e0000224          AND      r0,r0,r4,LSR #4
0005d8  e280b001          ADD      r11,r0,#1
;;;213          m = ((r >> 0) & 0x3) + 1;
0005dc  e2040003          AND      r0,r4,#3
0005e0  e280a001          ADD      r10,r0,#1
;;;214          p = ((r >> 16) & 0x3) + 1;
0005e4  e3a00003          MOV      r0,#3
0005e8  e0000824          AND      r0,r0,r4,LSR #16
0005ec  e2802001          ADD      r2,r0,#1
0005f0  e58d200c          STR      r2,[sp,#0xc]
;;;215          rate = (uint64_t)((prate * n * k) / p);
0005f4  e3a01000          MOV      r1,#0
0005f8  e0820997          UMULL    r0,r2,r7,r9
0005fc  e0222998          MLA      r2,r8,r9,r2
000600  e0222197          MLA      r2,r7,r1,r2
000604  e1a03001          MOV      r3,r1
000608  e08c1b90          UMULL    r1,r12,r0,r11
00060c  e022c29b          MLA      r2,r11,r2,r12
000610  e0202093          MLA      r0,r3,r0,r2
000614  e58d0004          STR      r0,[sp,#4]
000618  e58d1000          STR      r1,[sp,#0]
00061c  e3a03000          MOV      r3,#0
000620  e1a00001          MOV      r0,r1
000624  e59d1004          LDR      r1,[sp,#4]
000628  e59d200c          LDR      r2,[sp,#0xc]
00062c  ebfffffe          BL       __aeabi_uldivmod
000630  e1a05000          MOV      r5,r0
000634  e1a06001          MOV      r6,r1
;;;216          break;
000638  ea000001          B        |L1.1604|
                  |L1.1596|
;;;217    
;;;218        default:
00063c  e1a00000          MOV      r0,r0
;;;219          break;
000640  e1a00000          MOV      r0,r0
                  |L1.1604|
000644  e1a00000          MOV      r0,r0                 ;161
;;;220      }
;;;221    
;;;222      return rate;
000648  e1a00005          MOV      r0,r5
00064c  e1a01006          MOV      r1,r6
000650  e28dd020          ADD      sp,sp,#0x20
;;;223    }
000654  e8bd9ff0          POP      {r4-r12,pc}
;;;224    
                          ENDP

                  read32 PROC
;;;19     
;;;20     static __inline uint32_t read32(uint32_t addr)
000658  e1a01000          MOV      r1,r0
;;;21     {
;;;22       return (*((volatile uint32_t*)(addr)));
00065c  e5910000          LDR      r0,[r1,#0]
;;;23     }
000660  e12fff1e          BX       lr
;;;24     
                          ENDP

                  write32 PROC
;;;39     
;;;40     static __inline void write32(uint32_t addr, uint32_t value)
000664  e5801000          STR      r1,[r0,#0]
;;;41     {
;;;42       *((volatile uint32_t*)(addr)) = value;
;;;43     }
000668  e12fff1e          BX       lr
;;;44     
                          ENDP

                  |L1.1644|
                          DCD      0x11b3dc40
                  |L1.1648|
                          DCD      0x1017df80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  clk_hosc
                          DCD      0x01c20000
                          DCD      0x00000000
                          DCD      0xffffffff
                          DCD      0x016e3600
