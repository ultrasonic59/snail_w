; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\reset-f1c100s.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\reset-f1c100s.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\reset-f1c100s.crf ..\periph\reset-f1c100s.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  reset_f1c100s_assert PROC
;;;27     
;;;28     void reset_f1c100s_assert(reset_f1c100s_t* reset, int32_t offset)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;29     {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;30       uint32_t val;
;;;31     
;;;32       if (offset >= reset->nreset)
00000c  e5940008          LDR      r0,[r4,#8]
000010  e1500005          CMP      r0,r5
000014  ca000000          BGT      |L1.28|
                  |L1.24|
;;;33         return;
;;;34     
;;;35       val = read32(reset->virt);
;;;36       val &= ~(1 << offset);
;;;37       write32(reset->virt, val);
;;;38     }
000018  e8bd8070          POP      {r4-r6,pc}
                  |L1.28|
00001c  e5940000          LDR      r0,[r4,#0]            ;35
000020  e5901000          LDR      r1,[r0,#0]            ;35
000024  e1a06001          MOV      r6,r1                 ;35
000028  e3a00001          MOV      r0,#1                 ;36
00002c  e1c66510          BIC      r6,r6,r0,LSL r5       ;36
000030  e1a01006          MOV      r1,r6                 ;37
000034  e5940000          LDR      r0,[r4,#0]            ;37
000038  ebfffffe          BL       write32
00003c  e1a00000          MOV      r0,r0
000040  eafffff4          B        |L1.24|
;;;39     
                          ENDP

                  reset_f1c100s_deassert PROC
;;;40     void reset_f1c100s_deassert(reset_f1c100s_t* reset, int32_t offset)
000044  e92d4070          PUSH     {r4-r6,lr}
;;;41     {
000048  e1a04000          MOV      r4,r0
00004c  e1a05001          MOV      r5,r1
;;;42       uint32_t val;
;;;43     
;;;44       if (offset >= reset->nreset)
000050  e5940008          LDR      r0,[r4,#8]
000054  e1500005          CMP      r0,r5
000058  ca000000          BGT      |L1.96|
                  |L1.92|
;;;45         return;
;;;46     
;;;47       val = read32(reset->virt);
;;;48       val |= (1 << offset);
;;;49       write32(reset->virt, val);
;;;50     }
00005c  e8bd8070          POP      {r4-r6,pc}
                  |L1.96|
000060  e5940000          LDR      r0,[r4,#0]            ;47
000064  e5901000          LDR      r1,[r0,#0]            ;47
000068  e1a06001          MOV      r6,r1                 ;47
00006c  e3a00001          MOV      r0,#1                 ;48
000070  e1866510          ORR      r6,r6,r0,LSL r5       ;48
000074  e1a01006          MOV      r1,r6                 ;49
000078  e5940000          LDR      r0,[r4,#0]            ;49
00007c  ebfffffe          BL       write32
000080  e1a00000          MOV      r0,r0
000084  eafffff4          B        |L1.92|
                          ENDP

                  write32 PROC
;;;39     
;;;40     static __inline void write32(uint32_t addr, uint32_t value)
000088  e5801000          STR      r1,[r0,#0]
;;;41     {
;;;42       *((volatile uint32_t*)(addr)) = value;
;;;43     }
00008c  e12fff1e          BX       lr
;;;44     
                          ENDP

