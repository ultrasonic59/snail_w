; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\video_task.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\video_task.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\video_task.crf users\video_task.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  board_millis PROC
;;;14     
;;;15     uint32_t board_millis(void)
000000  e59f01d0          LDR      r0,|L1.472|
;;;16     {
;;;17     ////  return os_time_get();
;;;18     return 	sys_tick;
000004  e5900000          LDR      r0,[r0,#0]  ; os_time
;;;19     }
000008  e12fff1e          BX       lr
;;;20     static uint8_t tst_offs=0;
                          ENDP

                  fill_color_bar PROC
;;;21     
;;;22     static void fill_color_bar(uint8_t *buffer, unsigned start_position)
00000c  e92d5ff0          PUSH     {r4-r12,lr}
;;;23     {
000010  e1a04000          MOV      r4,r0
000014  e1a07001          MOV      r7,r1
;;;24     	uint8_t btmp=0;
000018  e3a08000          MOV      r8,#0
;;;25       /* EBU color bars
;;;26        * See also https://stackoverflow.com/questions/6939422 */
;;;27       static uint8_t const bar_color[8][4] = {
;;;28         /*  Y,   U,   Y,   V */
;;;29         { 235, 128, 235, 128}, /* 100% White */
;;;30         { 219,  16, 219, 138}, /* Yellow */
;;;31         { 188, 154, 188,  16}, /* Cyan */
;;;32         { 173,  42, 173,  26}, /* Green */
;;;33         {  78, 214,  78, 230}, /* Magenta */
;;;34         {  63, 102,  63, 240}, /* Red */
;;;35         {  32, 240,  32, 118}, /* Blue */
;;;36         {  16, 128,  16, 128}, /* Black */
;;;37       };
;;;38       uint8_t *p;
;;;39     
;;;40       /* Generate the 1st line */
;;;41       uint8_t *end = &buffer[FRAME_WIDTH * 2];
00001c  e284bd0a          ADD      r11,r4,#0x280
;;;42       unsigned idx = (FRAME_WIDTH / 2 - 1) - (start_position % (FRAME_WIDTH / 2));
000020  e3a010a0          MOV      r1,#0xa0
000024  e1a00007          MOV      r0,r7
000028  ebfffffe          BL       __aeabi_uidivmod
00002c  e261909f          RSB      r9,r1,#0x9f
;;;43       p = &buffer[idx * 4];
000030  e0845109          ADD      r5,r4,r9,LSL #2
;;;44       for (unsigned i = 0; i < 8; ++i) {
000034  e3a06000          MOV      r6,#0
000038  ea000013          B        |L1.140|
                  |L1.60|
;;;45         for (int j = 0; j < FRAME_WIDTH / (2 * 8); ++j) {
00003c  e3a0a000          MOV      r10,#0
000040  ea00000e          B        |L1.128|
                  |L1.68|
;;;46     			btmp=i+tst_offs;
000044  e59f0190          LDR      r0,|L1.476|
000048  e5d00000          LDRB     r0,[r0,#0]  ; tst_offs
00004c  e0800006          ADD      r0,r0,r6
000050  e20080ff          AND      r8,r0,#0xff
;;;47     			btmp&=0x7;
000054  e2088007          AND      r8,r8,#7
;;;48           memcpy(p, &bar_color[btmp], 4);
000058  e59f0180          LDR      r0,|L1.480|
00005c  e0801108          ADD      r1,r0,r8,LSL #2
000060  e3a02004          MOV      r2,#4
000064  e1a00005          MOV      r0,r5
000068  ebfffffe          BL       __aeabi_memcpy
;;;49           p += 4;
00006c  e2855004          ADD      r5,r5,#4
;;;50           if (end <= p) {
000070  e15b0005          CMP      r11,r5
000074  8a000000          BHI      |L1.124|
;;;51             p = buffer;
000078  e1a05004          MOV      r5,r4
                  |L1.124|
00007c  e28aa001          ADD      r10,r10,#1            ;45
                  |L1.128|
000080  e35a0014          CMP      r10,#0x14             ;45
000084  baffffee          BLT      |L1.68|
000088  e2866001          ADD      r6,r6,#1              ;44
                  |L1.140|
00008c  e3560008          CMP      r6,#8                 ;44
000090  3affffe9          BCC      |L1.60|
;;;52           }
;;;53         }
;;;54       }
;;;55       /* Duplicate the 1st line to the others */
;;;56       p = &buffer[FRAME_WIDTH * 2];
000094  e2845d0a          ADD      r5,r4,#0x280
;;;57       for (unsigned i = 1; i < FRAME_HEIGHT; ++i) {
000098  e3a06001          MOV      r6,#1
00009c  ea000005          B        |L1.184|
                  |L1.160|
;;;58         memcpy(p, buffer, FRAME_WIDTH * 2);
0000a0  e3a02d0a          MOV      r2,#0x280
0000a4  e1a01004          MOV      r1,r4
0000a8  e1a00005          MOV      r0,r5
0000ac  ebfffffe          BL       __aeabi_memcpy
;;;59         p += FRAME_WIDTH * 2;
0000b0  e2855d0a          ADD      r5,r5,#0x280
0000b4  e2866001          ADD      r6,r6,#1              ;57
                  |L1.184|
0000b8  e35600f0          CMP      r6,#0xf0              ;57
0000bc  3afffff7          BCC      |L1.160|
;;;60       }
;;;61     	tst_offs++;
0000c0  e59f0114          LDR      r0,|L1.476|
0000c4  e5d00000          LDRB     r0,[r0,#0]  ; tst_offs
0000c8  e2800001          ADD      r0,r0,#1
0000cc  e59f1108          LDR      r1,|L1.476|
0000d0  e5c10000          STRB     r0,[r1,#0]  ; tst_offs
;;;62     }
0000d4  e8bd9ff0          POP      {r4-r12,pc}
;;;63     
                          ENDP

                  video_task PROC
;;;65     
;;;66     void video_task(void)
0000d8  e92d4010          PUSH     {r4,lr}
;;;67     {
;;;68       static unsigned start_ms = 0;
;;;69       static unsigned already_sent = 0;
;;;70     /////tu_printf("\r\n======video_task=============");
;;;71     
;;;72       if (!tud_video_n_streaming(0, 0)) {
0000dc  e3a01000          MOV      r1,#0
0000e0  e1a00001          MOV      r0,r1
0000e4  ebfffffe          BL       tud_video_n_streaming
0000e8  e3500000          CMP      r0,#0
0000ec  1a000005          BNE      |L1.264|
;;;73         already_sent  = 0;
0000f0  e3a00000          MOV      r0,#0
0000f4  e59f10e8          LDR      r1,|L1.484|
0000f8  e5810000          STR      r0,[r1,#0]  ; already_sent
;;;74         frame_num     = 0;
0000fc  e59f10e4          LDR      r1,|L1.488|
000100  e5810000          STR      r0,[r1,#0]  ; frame_num
                  |L1.260|
;;;75         return;
;;;76       }
;;;77     /////tu_printf("\r\n======video_task1=============");
;;;78     
;;;79       if (!already_sent) {
;;;80         already_sent = 1;
;;;81         start_ms = board_millis();
;;;82     #ifdef CFG_EXAMPLE_VIDEO_READONLY
;;;83     # if defined(CFG_EXAMPLE_VIDEO_DISABLE_MJPG)
;;;84         tud_video_n_frame_xfer(0, 0, (void*)(uintptr_t)&frame_buffer[(frame_num % (FRAME_WIDTH / 2)) * 4],
;;;85                                FRAME_WIDTH * FRAME_HEIGHT * 16/8);
;;;86     # else
;;;87         tud_video_n_frame_xfer(0, 0, (void*)(uintptr_t)frames[frame_num % 8].buffer, frames[frame_num % 8].size);
;;;88     # endif
;;;89     #else
;;;90         fill_color_bar(frame_buffer, frame_num);
;;;91         tud_video_n_frame_xfer(0, 0, (void*)frame_buffer, FRAME_WIDTH * FRAME_HEIGHT * 16/8);
;;;92     #endif
;;;93       }
;;;94     
;;;95       unsigned cur = board_millis();
;;;96       if (cur - start_ms < interval_ms) 
;;;97     		return; // not enough time
;;;98       if (tx_busy) 
;;;99     		return;
;;;100      start_ms += interval_ms;
;;;101    /////tu_printf("\r\n======video_task2=============");
;;;102    
;;;103    #ifdef CFG_EXAMPLE_VIDEO_READONLY
;;;104    # if defined(CFG_EXAMPLE_VIDEO_DISABLE_MJPG)
;;;105      tud_video_n_frame_xfer(0, 0, (void*)(uintptr_t)&frame_buffer[(frame_num % (FRAME_WIDTH / 2)) * 4],
;;;106                             FRAME_WIDTH * FRAME_HEIGHT * 16/8);
;;;107    # else
;;;108      tud_video_n_frame_xfer(0, 0, (void*)(uintptr_t)frames[frame_num % 8].buffer, frames[frame_num % 8].size);
;;;109    # endif
;;;110    #else
;;;111      fill_color_bar(frame_buffer, frame_num);
;;;112      tud_video_n_frame_xfer(0, 0, (void*)frame_buffer, FRAME_WIDTH * FRAME_HEIGHT * 16/8);
;;;113    	
;;;114    #endif
;;;115    }
000104  e8bd8010          POP      {r4,pc}
                  |L1.264|
000108  e59f00d4          LDR      r0,|L1.484|
00010c  e5900000          LDR      r0,[r0,#0]            ;79  ; already_sent
000110  e3500000          CMP      r0,#0                 ;79
000114  1a00000e          BNE      |L1.340|
000118  e3a00001          MOV      r0,#1                 ;80
00011c  e59f10c0          LDR      r1,|L1.484|
000120  e5810000          STR      r0,[r1,#0]            ;80  ; already_sent
000124  ebfffffe          BL       board_millis
000128  e59f10bc          LDR      r1,|L1.492|
00012c  e5810000          STR      r0,[r1,#0]            ;81  ; start_ms
000130  e59f00b0          LDR      r0,|L1.488|
000134  e5901000          LDR      r1,[r0,#0]            ;90  ; frame_num
000138  e59f00b0          LDR      r0,|L1.496|
00013c  ebfffffe          BL       fill_color_bar
000140  e3a03b96          MOV      r3,#0x25800           ;91
000144  e59f20a4          LDR      r2,|L1.496|
000148  e3a01000          MOV      r1,#0                 ;91
00014c  e1a00001          MOV      r0,r1                 ;91
000150  ebfffffe          BL       tud_video_n_frame_xfer
                  |L1.340|
000154  ebfffffe          BL       board_millis
000158  e1a04000          MOV      r4,r0                 ;95
00015c  e59f0088          LDR      r0,|L1.492|
000160  e5900000          LDR      r0,[r0,#0]            ;96  ; start_ms
000164  e0440000          SUB      r0,r4,r0              ;96
000168  e59f1084          LDR      r1,|L1.500|
00016c  e5911000          LDR      r1,[r1,#0]            ;96  ; interval_ms
000170  e1500001          CMP      r0,r1                 ;96
000174  2a000000          BCS      |L1.380|
000178  eaffffe1          B        |L1.260|
                  |L1.380|
00017c  e59f0074          LDR      r0,|L1.504|
000180  e5900000          LDR      r0,[r0,#0]            ;98  ; tx_busy
000184  e3500000          CMP      r0,#0                 ;98
000188  0a000000          BEQ      |L1.400|
00018c  eaffffdc          B        |L1.260|
                  |L1.400|
000190  e59f0054          LDR      r0,|L1.492|
000194  e5900000          LDR      r0,[r0,#0]            ;100  ; start_ms
000198  e59f1054          LDR      r1,|L1.500|
00019c  e5911000          LDR      r1,[r1,#0]            ;100  ; interval_ms
0001a0  e0800001          ADD      r0,r0,r1              ;100
0001a4  e59f1040          LDR      r1,|L1.492|
0001a8  e5810000          STR      r0,[r1,#0]            ;100  ; start_ms
0001ac  e59f0034          LDR      r0,|L1.488|
0001b0  e5901000          LDR      r1,[r0,#0]            ;111  ; frame_num
0001b4  e59f0034          LDR      r0,|L1.496|
0001b8  ebfffffe          BL       fill_color_bar
0001bc  e3a03b96          MOV      r3,#0x25800           ;112
0001c0  e59f2028          LDR      r2,|L1.496|
0001c4  e3a01000          MOV      r1,#0                 ;112
0001c8  e1a00001          MOV      r0,r1                 ;112
0001cc  ebfffffe          BL       tud_video_n_frame_xfer
0001d0  e1a00000          MOV      r0,r0
0001d4  eaffffca          B        |L1.260|
                          ENDP

                  |L1.472|
                          DCD      os_time
                  |L1.476|
                          DCD      tst_offs
                  |L1.480|
                          DCD      bar_color
                  |L1.484|
                          DCD      already_sent
                  |L1.488|
                          DCD      frame_num
                  |L1.492|
                          DCD      start_ms
                  |L1.496|
                          DCD      frame_buffer
                  |L1.500|
                          DCD      interval_ms
                  |L1.504|
                          DCD      tx_busy

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  frame_buffer
                          %        153600

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  bar_color
000000  eb80eb80          DCB      0xeb,0x80,0xeb,0x80
000004  db10db8a          DCB      0xdb,0x10,0xdb,0x8a
000008  bc9abc10          DCB      0xbc,0x9a,0xbc,0x10
00000c  ad2aad1a          DCB      0xad,0x2a,0xad,0x1a
000010  4ed64ee6          DCB      0x4e,0xd6,0x4e,0xe6
000014  3f663ff0          DCB      0x3f,0x66,0x3f,0xf0
000018  20f02076          DCB      0x20,0xf0,0x20,0x76
00001c  10801080          DCB      0x10,0x80,0x10,0x80

                          AREA ||.data||, DATA, ALIGN=2

                  tx_busy
                          DCD      0x00000000
                  frame_num
                          DCD      0x00000000
                  interval_ms
                          DCD      0x00000032
                  tst_offs
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  start_ms
                          DCD      0x00000000
                  already_sent
                          DCD      0x00000000
