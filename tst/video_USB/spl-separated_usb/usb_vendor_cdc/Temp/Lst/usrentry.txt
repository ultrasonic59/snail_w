; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usrentry.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usrentry.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usrentry.crf users\usrentry.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                  usb_task PROC
                  |L1.0|
;;;8      
;;;9      __task void usb_task() {
000000  e3a01000          MOV      r1,#0
;;;10       for (;;) {
;;;11     		tud_task();
000004  e3e00000          MVN      r0,#0
000008  ebfffffe          BL       tud_task_ext
;;;12     		cdc_task();
00000c  ebfffffe          BL       cdc_task
;;;13         webserial_task();
000010  ebfffffe          BL       webserial_task
000014  eafffff9          B        |L1.0|
;;;14     	}
;;;15     }
;;;16     
                          ENDP

                  UserEntryInit PROC
;;;29     ////////////////////////////////////////////////////////////////////////////////
;;;30     void UserEntryInit(void)
000018  e92d4010          PUSH     {r4,lr}
;;;31     {
;;;32       target_wdt_feed();
00001c  ebfffffe          BL       target_wdt_feed
;;;33     
;;;34       printf("DDR size: %uMB\n", (*(uint32_t*)0x5c) & 0xFFFFFF);
000020  e3a00000          MOV      r0,#0
000024  e590005c          LDR      r0,[r0,#0x5c]
000028  e3c014ff          BIC      r1,r0,#0xff000000
00002c  e28f001c          ADR      r0,|L1.80|
000030  ebfffffe          BL       __2printf
;;;35     	tusb_init();
000034  ebfffffe          BL       tusb_init
;;;36     	os_tsk_create(usb_task, 10);
000038  e8bd4010          POP      {r4,lr}
00003c  e3a03000          MOV      r3,#0
000040  e1a02003          MOV      r2,r3
000044  e3a0100a          MOV      r1,#0xa
000048  e24f0050          ADR      r0,|L1.0|
00004c  eafffffe          B        os_tsk_create0
                  |L1.80|
000050  44445220          DCB      "DDR size: %uMB\n",0
000054  73697a65
000058  3a202575
00005c  4d420a00
                          ENDP

                  UserEntryLoop PROC
                  |L1.96|
;;;50     ////////////////////////////////////////////////////////////////////////////////
;;;51     void UserEntryLoop(void)
000060  ebfffffe          BL       target_wdt_feed
;;;52     {
;;;53       for (;;) {
;;;54         target_wdt_feed();
;;;55     		sys_delay(500);
000064  e3a00f7d          MOV      r0,#0x1f4
000068  ebfffffe          BL       os_dly_wait
00006c  eafffffb          B        |L1.96|
;;;56     #if 0
;;;57         // ´®¿ÚÇý¶¯²âÊÔ
;;;58         if (f1c100s_uart_isTxEnd(UART0_MID)) {
;;;59           rCnt = f1c100s_uart_readFifo(UART0_MID, rbuffer, sizeof(rbuffer));
;;;60           if (rCnt > 0) {
;;;61             f1c100s_uart_asyncTx(UART0_MID, rbuffer, rCnt);
;;;62           }
;;;63         }
;;;64     #endif
;;;65       }
;;;66     }
;;;67     
                          ENDP

                  echo_all PROC
;;;87     // send characters to both CDC and WebUSB
;;;88     void echo_all(uint8_t buf[], uint32_t count)
000070  e92d40f8          PUSH     {r3-r7,lr}
;;;89     {
000074  e1a05000          MOV      r5,r0
;;;90       // echo to web serial
;;;91       if ( web_serial_connected )
000078  e59f0094          LDR      r0,|L1.276|
00007c  e1a06001          MOV      r6,r1                 ;89
000080  e5d00000          LDRB     r0,[r0,#0]  ; web_serial_connected
000084  e3500000          CMP      r0,#0
000088  0a000003          BEQ      |L1.156|
;;;92       {
;;;93         tud_vendor_write(buf, count);
00008c  e1a02001          MOV      r2,r1
000090  e1a01005          MOV      r1,r5
000094  e3a00000          MOV      r0,#0
000098  ebfffffe          BL       tud_vendor_n_write
                  |L1.156|
;;;94       }
;;;95     
;;;96       // echo to cdc
;;;97       if ( tud_cdc_connected() )
00009c  e3a00000          MOV      r0,#0
0000a0  ebfffffe          BL       tud_cdc_n_connected
0000a4  e3500000          CMP      r0,#0
;;;98       {
;;;99         for(uint32_t i=0; i<count; i++)
;;;100        {
;;;101          tud_cdc_write_char(buf[i]);
;;;102    
;;;103          if ( buf[i] == '\r' ) tud_cdc_write_char('\n');
;;;104        }
;;;105        tud_cdc_write_flush();
;;;106      }
;;;107    }
0000a8  08bd80f8          POPEQ    {r3-r7,pc}
0000ac  e3560000          CMP      r6,#0                 ;99
0000b0  e3a04000          MOV      r4,#0                 ;99
0000b4  83a0700a          MOVHI    r7,#0xa               ;103
0000b8  9a000010          BLS      |L1.256|
                  |L1.188|
0000bc  e7d50004          LDRB     r0,[r5,r4]            ;101
0000c0  e3a02001          MOV      r2,#1                 ;101
0000c4  e1a0100d          MOV      r1,sp                 ;101
0000c8  e5cd0000          STRB     r0,[sp,#0]            ;101
0000cc  e3a00000          MOV      r0,#0                 ;101
0000d0  ebfffffe          BL       tud_cdc_n_write
0000d4  e7d50004          LDRB     r0,[r5,r4]            ;103
0000d8  e350000d          CMP      r0,#0xd               ;103
0000dc  1a000004          BNE      |L1.244|
0000e0  e3a00000          MOV      r0,#0                 ;103
0000e4  e3a02001          MOV      r2,#1                 ;103
0000e8  e1a0100d          MOV      r1,sp                 ;103
0000ec  e5cd7000          STRB     r7,[sp,#0]            ;103
0000f0  ebfffffe          BL       tud_cdc_n_write
                  |L1.244|
0000f4  e2844001          ADD      r4,r4,#1              ;103
0000f8  e1540006          CMP      r4,r6                 ;99
0000fc  3affffee          BCC      |L1.188|
                  |L1.256|
000100  e8bd40f8          POP      {r3-r7,lr}            ;105
000104  e3a00000          MOV      r0,#0                 ;105
000108  eafffffe          B        tud_cdc_n_write_flush
;;;108    
                          ENDP

                  tud_mount_cb PROC
;;;109    // Invoked when device is mounted
;;;110    void tud_mount_cb(void)
00010c  e28f0004          ADR      r0,|L1.280|
;;;111    {
;;;112    	printf("tud_mount_cb\r\n");
000110  eafffffe          B        __2printf
                  |L1.276|
                          DCD      ||.data||
                  |L1.280|
000118  7475645f          DCB      "tud_mount_cb\r\n",0
00011c  6d6f756e
000120  745f6362
000124  0d0a00  
000127  00                DCB      0
                          ENDP

                  tud_umount_cb PROC
;;;115    // Invoked when device is unmounted
;;;116    void tud_umount_cb(void)
000128  e28f0000          ADR      r0,|L1.304|
;;;117    {
;;;118    	printf("tud_umount_cb\r\n");
00012c  eafffffe          B        __2printf
                  |L1.304|
000130  7475645f          DCB      "tud_umount_cb\r\n",0
000134  756d6f75
000138  6e745f63
00013c  620d0a00
                          ENDP

                  tud_suspend_cb PROC
;;;123    // Within 7ms, device must draw an average of current less than 2.5 mA from bus
;;;124    void tud_suspend_cb(bool remote_wakeup_en)
000140  e28f0000          ADR      r0,|L1.328|
;;;125    {
;;;126      (void) remote_wakeup_en;
;;;127    	printf("tud_suspend_cb\r\n");
000144  eafffffe          B        __2printf
                  |L1.328|
000148  7475645f          DCB      "tud_suspend_cb\r\n",0
00014c  73757370
000150  656e645f
000154  63620d0a
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                          ENDP

                  tud_resume_cb PROC
;;;130    // Invoked when usb bus is resumed
;;;131    void tud_resume_cb(void)
00015c  e28f0000          ADR      r0,|L1.356|
;;;132    {
;;;133    	printf("tud_resume_cb\r\n");
000160  eafffffe          B        __2printf
                  |L1.356|
000164  7475645f          DCB      "tud_resume_cb\r\n",0
000168  72657375
00016c  6d655f63
000170  620d0a00
                          ENDP

                  tud_vendor_control_xfer_cb PROC
;;;143    // return false to stall control endpoint (e.g unsupported request)
;;;144    bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
000174  e3510001          CMP      r1,#1
;;;145    {
;;;146      // nothing to with DATA & ACK stage
;;;147      if (stage != CONTROL_STAGE_SETUP) return true;
000178  13a00001          MOVNE    r0,#1
;;;148    
;;;149      switch (request->bmRequestType_bit.type)
;;;150      {
;;;151        case TUSB_REQ_TYPE_VENDOR:
;;;152          switch (request->bRequest)
;;;153          {
;;;154            case VENDOR_REQUEST_WEBUSB:
;;;155              // match vendor request in BOS descriptor
;;;156              // Get landing page url
;;;157              return tud_control_xfer(rhport, request, (void*)(uintptr_t) &desc_url, desc_url.bLength);
;;;158    
;;;159            case VENDOR_REQUEST_MICROSOFT:
;;;160              if ( request->wIndex == 7 )
;;;161              {
;;;162                // Get Microsoft OS 2.0 compatible descriptor
;;;163                uint16_t total_len;
;;;164                memcpy(&total_len, desc_ms_os_20+8, 2);
;;;165    
;;;166                return tud_control_xfer(rhport, request, (void*)(uintptr_t) desc_ms_os_20, total_len);
;;;167              }else
;;;168              {
;;;169                return false;
;;;170              }
;;;171    
;;;172            default: break;
;;;173          }
;;;174        break;
;;;175    
;;;176        case TUSB_REQ_TYPE_CLASS:
;;;177          if (request->bRequest == 0x22)
;;;178          {
;;;179            // Webserial simulate the CDC_REQUEST_SET_CONTROL_LINE_STATE (0x22) to connect and disconnect.
;;;180            web_serial_connected = (request->wValue != 0);
;;;181    
;;;182            // Always lit LED if connected
;;;183            if ( web_serial_connected )
;;;184            {
;;;185    //          board_led_write(true);
;;;186    //          blink_interval_ms = BLINK_ALWAYS_ON;
;;;187    
;;;188              tud_vendor_write_str("\r\nTinyUSB WebUSB device example\r\n");
;;;189            }else
;;;190            {
;;;191    //          blink_interval_ms = BLINK_MOUNTED;
;;;192            }
;;;193    
;;;194            // response with status OK
;;;195            return tud_control_status(rhport, request);
;;;196          }
;;;197        break;
;;;198    
;;;199        default: break;
;;;200      }
;;;201    
;;;202      // stall unknown request
;;;203      return false;
;;;204    }
00017c  112fff1e          BXNE     lr
000180  e92d4070          PUSH     {r4-r6,lr}            ;145
000184  e1a06000          MOV      r6,r0                 ;145
000188  e5d20000          LDRB     r0,[r2,#0]            ;149
00018c  e1a04002          MOV      r4,r2                 ;145
000190  e1a00c80          LSL      r0,r0,#25             ;149
000194  e1a00f20          LSR      r0,r0,#30             ;149
000198  e3500001          CMP      r0,#1                 ;149
00019c  0a000022          BEQ      |L1.556|
0001a0  e3500002          CMP      r0,#2                 ;149
0001a4  1a000023          BNE      |L1.568|
0001a8  e5d40001          LDRB     r0,[r4,#1]            ;152
0001ac  e3500001          CMP      r0,#1                 ;152
0001b0  0a000002          BEQ      |L1.448|
0001b4  e3500002          CMP      r0,#2                 ;152
0001b8  0a000006          BEQ      |L1.472|
0001bc  ea00001d          B        |L1.568|
                  |L1.448|
0001c0  e1a01004          MOV      r1,r4                 ;157
0001c4  e1a00006          MOV      r0,r6                 ;157
0001c8  e8bd4070          POP      {r4-r6,lr}            ;157
0001cc  e59f20b8          LDR      r2,|L1.652|
0001d0  e3a03025          MOV      r3,#0x25              ;157
0001d4  eafffffe          B        tud_control_xfer
                  |L1.472|
0001d8  e5d40005          LDRB     r0,[r4,#5]            ;160
0001dc  e5d41004          LDRB     r1,[r4,#4]            ;160
0001e0  e1810400          ORR      r0,r1,r0,LSL #8       ;160
0001e4  e3500007          CMP      r0,#7                 ;160
0001e8  1a000012          BNE      |L1.568|
0001ec  e59f109c          LDR      r1,|L1.656|
0001f0  e3c020ff          BIC      r2,r0,#0xff           ;160
0001f4  e5d10008          LDRB     r0,[r1,#8]            ;164  ; desc_ms_os_20
0001f8  e5d11009          LDRB     r1,[r1,#9]            ;164  ; desc_ms_os_20
0001fc  e1800002          ORR      r0,r0,r2              ;164
000200  e1a01401          LSL      r1,r1,#8              ;164
000204  e3c00cff          BIC      r0,r0,#0xff00         ;164
000208  e2011cff          AND      r1,r1,#0xff00         ;164
00020c  e1800001          ORR      r0,r0,r1              ;164
000210  e1a03800          LSL      r3,r0,#16             ;164
000214  e1a01004          MOV      r1,r4                 ;166
000218  e1a00006          MOV      r0,r6                 ;166
00021c  e8bd4070          POP      {r4-r6,lr}            ;166
000220  e59f2068          LDR      r2,|L1.656|
000224  e1a03823          LSR      r3,r3,#16             ;164
000228  eafffffe          B        tud_control_xfer
                  |L1.556|
00022c  e5d40001          LDRB     r0,[r4,#1]            ;177
000230  e3500022          CMP      r0,#0x22              ;177
000234  0a000001          BEQ      |L1.576|
                  |L1.568|
000238  e3a00000          MOV      r0,#0                 ;203
00023c  e8bd8070          POP      {r4-r6,pc}
                  |L1.576|
000240  e5d40003          LDRB     r0,[r4,#3]            ;180
000244  e5d41002          LDRB     r1,[r4,#2]            ;180
000248  e1910400          ORRS     r0,r1,r0,LSL #8       ;180
00024c  e51f1140          LDR      r1,|L1.276|
000250  13a00001          MOVNE    r0,#1                 ;180
000254  e3500000          CMP      r0,#0                 ;183
000258  e5c10000          STRB     r0,[r1,#0]            ;180  ; web_serial_connected
00025c  0a000006          BEQ      |L1.636|
000260  e28f502c          ADR      r5,|L1.660|
000264  e1a00005          MOV      r0,r5                 ;188
000268  ebfffffe          BL       strlen
00026c  e1a02000          MOV      r2,r0                 ;188
000270  e1a01005          MOV      r1,r5                 ;188
000274  e3a00000          MOV      r0,#0                 ;188
000278  ebfffffe          BL       tud_vendor_n_write
                  |L1.636|
00027c  e1a01004          MOV      r1,r4                 ;195
000280  e1a00006          MOV      r0,r6                 ;195
000284  e8bd4070          POP      {r4-r6,lr}            ;195
000288  eafffffe          B        tud_control_status
                  |L1.652|
                          DCD      ||.constdata||
                  |L1.656|
                          DCD      desc_ms_os_20
                  |L1.660|
000294  0d0a5469          DCB      "\r\nTinyUSB WebUSB device example\r\n",0
000298  6e795553
00029c  42205765
0002a0  62555342
0002a4  20646576
0002a8  69636520
0002ac  6578616d
0002b0  706c650d
0002b4  0a00    
0002b6  00                DCB      0
0002b7  00                DCB      0
                          ENDP

                  webserial_task PROC
;;;205    
;;;206    void webserial_task(void)
0002b8  e92d40f0          PUSH     {r4-r7,lr}
;;;207    {
;;;208      if ( web_serial_connected )
0002bc  e51f41b0          LDR      r4,|L1.276|
0002c0  e24dd054          SUB      sp,sp,#0x54           ;207
0002c4  e5d40000          LDRB     r0,[r4,#0]  ; web_serial_connected
0002c8  e3500000          CMP      r0,#0
;;;209      {
;;;210        if ( tud_vendor_available() )
;;;211        {
;;;212          uint8_t buf[64];
;;;213          uint32_t count = tud_vendor_read(buf, sizeof(buf));
;;;214    
;;;215          // echo back to both web serial and cdc
;;;216          echo_all(buf, count);
;;;217        }
;;;218      }
;;;219    }
0002cc  028dd054          ADDEQ    sp,sp,#0x54
0002d0  08bd80f0          POPEQ    {r4-r7,pc}
0002d4  e3a00000          MOV      r0,#0                 ;210
0002d8  ebfffffe          BL       tud_vendor_n_available
0002dc  e3500000          CMP      r0,#0                 ;210
0002e0  028dd054          ADDEQ    sp,sp,#0x54
0002e4  08bd80f0          POPEQ    {r4-r7,pc}
0002e8  e3a02040          MOV      r2,#0x40              ;213
0002ec  e28d1010          ADD      r1,sp,#0x10           ;213
0002f0  e3a00000          MOV      r0,#0                 ;213
0002f4  ebfffffe          BL       tud_vendor_n_read
0002f8  e5d41000          LDRB     r1,[r4,#0]            ;213  ; web_serial_connected
0002fc  e28d6010          ADD      r6,sp,#0x10           ;216
000300  e1a05000          MOV      r5,r0                 ;216
000304  e3510000          CMP      r1,#0                 ;216
000308  0a000003          BEQ      |L1.796|
00030c  e1a02000          MOV      r2,r0                 ;216
000310  e1a01006          MOV      r1,r6                 ;216
000314  e3a00000          MOV      r0,#0                 ;216
000318  ebfffffe          BL       tud_vendor_n_write
                  |L1.796|
00031c  e3a00000          MOV      r0,#0                 ;216
000320  ebfffffe          BL       tud_cdc_n_connected
000324  e3500000          CMP      r0,#0                 ;216
000328  028dd054          ADDEQ    sp,sp,#0x54
00032c  08bd80f0          POPEQ    {r4-r7,pc}
000330  e3550000          CMP      r5,#0
000334  e3a04000          MOV      r4,#0
000338  83a0700a          MOVHI    r7,#0xa
00033c  9a000010          BLS      |L1.900|
                  |L1.832|
000340  e7d60004          LDRB     r0,[r6,r4]
000344  e3a02001          MOV      r2,#1
000348  e28d100c          ADD      r1,sp,#0xc
00034c  e5cd000c          STRB     r0,[sp,#0xc]
000350  e3a00000          MOV      r0,#0
000354  ebfffffe          BL       tud_cdc_n_write
000358  e7d60004          LDRB     r0,[r6,r4]
00035c  e350000d          CMP      r0,#0xd
000360  1a000004          BNE      |L1.888|
000364  e3a00000          MOV      r0,#0
000368  e3a02001          MOV      r2,#1
00036c  e28d100c          ADD      r1,sp,#0xc
000370  e5cd700c          STRB     r7,[sp,#0xc]
000374  ebfffffe          BL       tud_cdc_n_write
                  |L1.888|
000378  e2844001          ADD      r4,r4,#1
00037c  e1540005          CMP      r4,r5
000380  3affffee          BCC      |L1.832|
                  |L1.900|
000384  e3a00000          MOV      r0,#0
000388  ebfffffe          BL       tud_cdc_n_write_flush
00038c  e28dd054          ADD      sp,sp,#0x54
000390  e8bd80f0          POP      {r4-r7,pc}
;;;220    
                          ENDP

                  cdc_task PROC
;;;224    //--------------------------------------------------------------------+
;;;225    void cdc_task(void)
000394  e92d40f0          PUSH     {r4-r7,lr}
;;;226    {
000398  e24dd054          SUB      sp,sp,#0x54
;;;227      if ( tud_cdc_connected() )
00039c  e3a00000          MOV      r0,#0
0003a0  ebfffffe          BL       tud_cdc_n_connected
0003a4  e3500000          CMP      r0,#0
;;;228      {
;;;229        // connected and there are data available
;;;230        if ( tud_cdc_available() )
;;;231        {
;;;232          uint8_t buf[64];
;;;233    
;;;234          uint32_t count = tud_cdc_read(buf, sizeof(buf));
;;;235    
;;;236          // echo back to both web serial and cdc
;;;237          echo_all(buf, count);
;;;238        }
;;;239      }
;;;240    }
0003a8  028dd054          ADDEQ    sp,sp,#0x54
0003ac  08bd80f0          POPEQ    {r4-r7,pc}
0003b0  e3a00000          MOV      r0,#0                 ;230
0003b4  ebfffffe          BL       tud_cdc_n_available
0003b8  e3500000          CMP      r0,#0                 ;230
0003bc  028dd054          ADDEQ    sp,sp,#0x54
0003c0  08bd80f0          POPEQ    {r4-r7,pc}
0003c4  e3a02040          MOV      r2,#0x40              ;234
0003c8  e28d1010          ADD      r1,sp,#0x10           ;234
0003cc  e3a00000          MOV      r0,#0                 ;234
0003d0  ebfffffe          BL       tud_cdc_n_read
0003d4  e51f12c8          LDR      r1,|L1.276|
0003d8  e28d6010          ADD      r6,sp,#0x10           ;237
0003dc  e5d11000          LDRB     r1,[r1,#0]            ;237  ; web_serial_connected
0003e0  e1a05000          MOV      r5,r0                 ;237
0003e4  e3510000          CMP      r1,#0                 ;237
0003e8  0a000003          BEQ      |L1.1020|
0003ec  e1a02000          MOV      r2,r0                 ;237
0003f0  e1a01006          MOV      r1,r6                 ;237
0003f4  e3a00000          MOV      r0,#0                 ;237
0003f8  ebfffffe          BL       tud_vendor_n_write
                  |L1.1020|
0003fc  e3a00000          MOV      r0,#0                 ;237
000400  ebfffffe          BL       tud_cdc_n_connected
000404  e3500000          CMP      r0,#0                 ;237
000408  028dd054          ADDEQ    sp,sp,#0x54
00040c  08bd80f0          POPEQ    {r4-r7,pc}
000410  e3550000          CMP      r5,#0
000414  e3a04000          MOV      r4,#0
000418  83a0700a          MOVHI    r7,#0xa
00041c  9a000010          BLS      |L1.1124|
                  |L1.1056|
000420  e7d60004          LDRB     r0,[r6,r4]
000424  e3a02001          MOV      r2,#1
000428  e28d100c          ADD      r1,sp,#0xc
00042c  e5cd000c          STRB     r0,[sp,#0xc]
000430  e3a00000          MOV      r0,#0
000434  ebfffffe          BL       tud_cdc_n_write
000438  e7d60004          LDRB     r0,[r6,r4]
00043c  e350000d          CMP      r0,#0xd
000440  1a000004          BNE      |L1.1112|
000444  e3a00000          MOV      r0,#0
000448  e3a02001          MOV      r2,#1
00044c  e28d100c          ADD      r1,sp,#0xc
000450  e5cd700c          STRB     r7,[sp,#0xc]
000454  ebfffffe          BL       tud_cdc_n_write
                  |L1.1112|
000458  e2844001          ADD      r4,r4,#1
00045c  e1540005          CMP      r4,r5
000460  3affffee          BCC      |L1.1056|
                  |L1.1124|
000464  e3a00000          MOV      r0,#0
000468  ebfffffe          BL       tud_cdc_n_write_flush
00046c  e28dd054          ADD      sp,sp,#0x54
000470  e8bd80f0          POP      {r4-r7,pc}
;;;241    
                          ENDP

                  tud_cdc_line_state_cb PROC
;;;242    // Invoked when cdc when line state changed e.g connected/disconnected
;;;243    void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
000474  e92d4010          PUSH     {r4,lr}
;;;244    {
;;;245      (void) itf;
;;;246    
;;;247      // connected
;;;248      if ( dtr && rts )
000478  e1110002          TST      r1,r2
;;;249      {
;;;250        // print initial message when connected
;;;251        tud_cdc_write_str("\r\nTinyUSB WebUSB device example\r\n");
;;;252      }
;;;253    }
00047c  08bd8010          POPEQ    {r4,pc}
000480  e24f4f7d          ADR      r4,|L1.660|
000484  e1a00004          MOV      r0,r4                 ;251
000488  ebfffffe          BL       strlen
00048c  e1a01004          MOV      r1,r4                 ;251
000490  e8bd4010          POP      {r4,lr}               ;251
000494  e1a02000          MOV      r2,r0                 ;251
000498  e3a00000          MOV      r0,#0                 ;251
00049c  eafffffe          B        tud_cdc_n_write
;;;254    
                          ENDP

                  tud_cdc_rx_cb PROC
;;;255    // Invoked when CDC interface received data from host
;;;256    void tud_cdc_rx_cb(uint8_t itf)
0004a0  e12fff1e          BX       lr
;;;257    {
;;;258      (void) itf;
;;;259    }
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  desc_url
000000  25030165          DCB      0x25,0x03,0x01,0x65
000004  78616d70          DCB      0x78,0x61,0x6d,0x70
000008  6c652e74          DCB      0x6c,0x65,0x2e,0x74
00000c  696e7975          DCB      0x69,0x6e,0x79,0x75
000010  73622e6f          DCB      0x73,0x62,0x2e,0x6f
000014  72672f77          DCB      0x72,0x67,0x2f,0x77
000018  65627573          DCB      0x65,0x62,0x75,0x73
00001c  622d7365          DCB      0x62,0x2d,0x73,0x65
000020  7269616c          DCB      0x72,0x69,0x61,0x6c
000024  2f00              DCB      0x2f,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  web_serial_connected
000000  00                DCB      0x00
