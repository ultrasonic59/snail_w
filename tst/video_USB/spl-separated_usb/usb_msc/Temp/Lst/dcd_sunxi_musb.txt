; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\dcd_sunxi_musb.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\dcd_sunxi_musb.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\dcd_sunxi_musb.crf ..\tinyusb\src\portable\sunxi\dcd_sunxi_musb.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  USBC_SelectBus PROC
;;;186    
;;;187    void USBC_SelectBus(u32 io_type, u32 ep_type, u32 ep_index)
000000  e59f33c4          LDR      r3,|L1.972|
;;;188    {
;;;189    	u32 reg_val = 0;
;;;190    
;;;191    	reg_val = USBC_Readb(USBC_REG_VEND0(USBC0_BASE));
;;;192    	if (io_type == USBC_IO_TYPE_DMA) {
000004  e3500001          CMP      r0,#1
000008  e5d30043          LDRB     r0,[r3,#0x43]         ;191
;;;193    		if (ep_type == USBC_EP_TYPE_TX) {
;;;194    			reg_val |= ((ep_index - 0x01) << 1) << USBC_BP_VEND0_DRQ_SEL;  //drq_sel
;;;195    			reg_val |= 0x1<<USBC_BP_VEND0_BUS_SEL;   //io_dma
;;;196    		} else {
;;;197    			reg_val |= ((ep_index << 1) - 0x01) << USBC_BP_VEND0_DRQ_SEL;
;;;198    			reg_val |= 0x1<<USBC_BP_VEND0_BUS_SEL;
;;;199    		}
;;;200    	} else {
;;;201    		//reg_val &= ~(0x1 << USBC_BP_VEND0_DRQ_SEL);  //clear drq_sel, select pio
;;;202    		reg_val &= 0x00;  // clear drq_sel, select pio
00000c  13a00000          MOVNE    r0,#0
000010  0a000001          BEQ      |L1.28|
                  |L1.20|
;;;203    	}
;;;204    
;;;205    	/* in 1667 1673 and later ic, FIFO_BUS_SEL bit(bit24 of reg0x40 for host/device)
;;;206    	 * is fixed to 1, the hw guarantee that it's ok for cpu/inner_dma/outer_dma transfer */
;;;207    
;;;208    //	reg_val |= 0x1<<USBC_BP_VEND0_BUS_SEL;  //for 1663 set 1: enable dma, set 0: enable fifo
;;;209    
;;;210    	USBC_Writeb(reg_val, USBC_REG_VEND0(USBC0_BASE));
000014  e5c30043          STRB     r0,[r3,#0x43]
;;;211    }
000018  e12fff1e          BX       lr
                  |L1.28|
00001c  e3510002          CMP      r1,#2                 ;193
000020  03e01003          MVNEQ    r1,#3                 ;194
000024  13e01001          MVNNE    r1,#1                 ;197
000028  e0811102          ADD      r1,r1,r2,LSL #2       ;197
00002c  e1800001          ORR      r0,r0,r1              ;197
000030  e3800001          ORR      r0,r0,#1              ;198
000034  eafffff6          B        |L1.20|
;;;212    
                          ENDP

                  pipe_write_packet PROC
;;;478    
;;;479    static void pipe_write_packet(void *buff, volatile void *fifo, unsigned cnt)
000038  e1a03122          LSR      r3,r2,#2
;;;480    {
;;;481     	u32 len = 0;
;;;482    	u32 i32 = 0;
;;;483    	u32 i8  = 0;
;;;484    	u8  *buf8  = 0;
;;;485    	u32 *buf32 = 0;
;;;486    
;;;487    	//--<1>-- adjust data
;;;488    	buf32 = buff;
;;;489    	len   = cnt;
;;;490    
;;;491    	i32 = len >> 2;
;;;492    	i8  = len & 0x03;
;;;493    
;;;494    	//--<2>-- deal with 4byte part
;;;495    	while (i32--) {
00003c  e3530000          CMP      r3,#0
000040  e2022003          AND      r2,r2,#3              ;492
000044  da000004          BLE      |L1.92|
                  |L1.72|
;;;496    		USBC_Writel(*buf32++, fifo);
000048  e490c004          LDR      r12,[r0],#4
00004c  e581c000          STR      r12,[r1,#0]
000050  e2433001          SUB      r3,r3,#1
000054  e3530000          CMP      r3,#0
000058  cafffffa          BGT      |L1.72|
                  |L1.92|
;;;497    	}
;;;498    
;;;499    	//--<3>-- deal with no 4byte part
;;;500    	buf8 = (u8 *)buf32;
;;;501    	while (i8--) {
00005c  e3520000          CMP      r2,#0
;;;502    		USBC_Writeb(*buf8++, fifo);
;;;503    	}
;;;504    }
000060  d12fff1e          BXLE     lr
                  |L1.100|
000064  e4d03001          LDRB     r3,[r0],#1            ;502
000068  e5c13000          STRB     r3,[r1,#0]            ;502
00006c  e2422001          SUB      r2,r2,#1              ;502
000070  e3520000          CMP      r2,#0                 ;502
000074  cafffffa          BGT      |L1.100|
000078  e12fff1e          BX       lr
;;;505    
                          ENDP

                  pipe_read_packet PROC
;;;506    static void pipe_read_packet(void *buff, volatile void *fifo, unsigned cnt)
00007c  e1a03122          LSR      r3,r2,#2
;;;507    {
;;;508    	u32 len = 0;
;;;509    	u32 i32 = 0;
;;;510    	u32 i8  = 0;
;;;511    	u8  *buf8  = 0;
;;;512    	u32 *buf32 = 0;
;;;513    
;;;514    	//--<1>-- adjust data
;;;515    	buf32 = buff;
;;;516    	len   = cnt;
;;;517    
;;;518    	i32 = len >> 2;
;;;519    	i8  = len & 0x03;
;;;520    
;;;521    	//--<2>-- deal with 4byte part
;;;522    	while (i32--) {
000080  e3530000          CMP      r3,#0
000084  e2022003          AND      r2,r2,#3              ;519
000088  da000004          BLE      |L1.160|
                  |L1.140|
;;;523    		*buf32++ = USBC_Readl(fifo);
00008c  e591c000          LDR      r12,[r1,#0]
000090  e2433001          SUB      r3,r3,#1
000094  e3530000          CMP      r3,#0
000098  e480c004          STR      r12,[r0],#4
00009c  cafffffa          BGT      |L1.140|
                  |L1.160|
;;;524    	}
;;;525    
;;;526    	//--<3>-- deal with no 4byte part
;;;527    	buf8 = (u8 *)buf32;
;;;528    	while (i8--) {
0000a0  e3520000          CMP      r2,#0
;;;529    		*buf8++ = USBC_Readb(fifo);
;;;530    	}
;;;531    }
0000a4  d12fff1e          BXLE     lr
                  |L1.168|
0000a8  e5d13000          LDRB     r3,[r1,#0]            ;529
0000ac  e2422001          SUB      r2,r2,#1              ;529
0000b0  e3520000          CMP      r2,#0                 ;529
0000b4  e4c03001          STRB     r3,[r0],#1            ;529
0000b8  cafffffa          BGT      |L1.168|
0000bc  e12fff1e          BX       lr
;;;532    
                          ENDP

                  process_edpt_n PROC
;;;812    
;;;813    static void process_edpt_n(uint8_t rhport, uint_fast8_t ep_addr)
0000c0  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;814    {
;;;815      bool completed;
;;;816      const unsigned dir_in     = tu_edpt_dir(ep_addr);
0000c4  e1a00c01          LSL      r0,r1,#24
0000c8  e1b0afa0          LSRS     r10,r0,#31
0000cc  e59f02f8          LDR      r0,|L1.972|
0000d0  e1a06001          MOV      r6,r1                 ;814
0000d4  e24dd054          SUB      sp,sp,#0x54           ;814
;;;817      const unsigned epn        = tu_edpt_number(ep_addr);
0000d8  e201107f          AND      r1,r1,#0x7f
0000dc  e5c01042          STRB     r1,[r0,#0x42]
0000e0  e206107f          AND      r1,r6,#0x7f
0000e4  e58d104c          STR      r1,[sp,#0x4c]
0000e8  0a00000e          BEQ      |L1.296|
0000ec  e1d018b2          LDRH     r1,[r0,#0x82]         ;814
0000f0  e3110020          TST      r1,#0x20              ;814
;;;818    
;;;819      USBC_SelectActiveEp(epn);
;;;820    
;;;821      if (dir_in) {
;;;822        // TU_LOG1(" TXCSRL%d = %x\n", epn_minus1 + 1, regs->TXCSRL);
;;;823        if (__USBC_Dev_Tx_IsEpStall()) {
0000f4  0a000005          BEQ      |L1.272|
0000f8  e1d018b2          LDRH     r1,[r0,#0x82]
0000fc  e3c11034          BIC      r1,r1,#0x34
000100  e3811040          ORR      r1,r1,#0x40
000104  e1c018b2          STRH     r1,[r0,#0x82]
;;;824    	  __USBC_Dev_Tx_ClearStall();
;;;825          return;
;;;826        }
;;;827        completed = handle_xfer_in(ep_addr);
;;;828      } else {
;;;829        // TU_LOG1(" RXCSRL%d = %x\n", epn_minus1 + 1, regs->RXCSRL);
;;;830        if (__USBC_Dev_Rx_IsEpStall()) {
;;;831    	    __USBC_Dev_Rx_ClearStall();
;;;832          return;
;;;833        }
;;;834        completed = handle_xfer_out(ep_addr);
;;;835      }
;;;836    
;;;837      if (completed) {
;;;838        pipe_state_t *pipe = &_dcd.pipe[dir_in][tu_edpt_number(ep_addr) - 1];
;;;839        dcd_event_xfer_complete(rhport, ep_addr,
;;;840                                pipe->length - pipe->remaining,
;;;841                                XFER_RESULT_SUCCESS, true);
;;;842      }
;;;843    }
000108  e28dd05c          ADD      sp,sp,#0x5c
00010c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.272|
000110  e1a00006          MOV      r0,r6                 ;827
000114  ebfffffe          BL       handle_xfer_in
000118  e3500000          CMP      r0,#0                 ;837
00011c  1a000088          BNE      |L1.836|
000120  e28dd05c          ADD      sp,sp,#0x5c
000124  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.296|
000128  e1d018b6          LDRH     r1,[r0,#0x86]
00012c  e3110040          TST      r1,#0x40
000130  0a000005          BEQ      |L1.332|
000134  e1d018b6          LDRH     r1,[r0,#0x86]         ;830
000138  e3c11064          BIC      r1,r1,#0x64           ;830
00013c  e3811080          ORR      r1,r1,#0x80           ;830
000140  e1c018b6          STRH     r1,[r0,#0x86]         ;830
000144  e28dd05c          ADD      sp,sp,#0x5c
000148  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.332|
00014c  e1d048b6          LDRH     r4,[r0,#0x86]
000150  e59f2278          LDR      r2,|L1.976|
000154  e59d104c          LDR      r1,[sp,#0x4c]
000158  e06a318a          RSB      r3,r10,r10,LSL #3
00015c  e082c183          ADD      r12,r2,r3,LSL #3
000160  e2411001          SUB      r1,r1,#1
000164  e08cc181          ADD      r12,r12,r1,LSL #3
000168  e3140001          TST      r4,#1
00016c  e28c8013          ADD      r8,r12,#0x13
000170  0a000044          BEQ      |L1.648|
000174  e59f0250          LDR      r0,|L1.972|
000178  e5d8c007          LDRB     r12,[r8,#7]
00017c  e5d83006          LDRB     r3,[r8,#6]
000180  e1d0b8b4          LDRH     r11,[r0,#0x84]
000184  e1d048b8          LDRH     r4,[r0,#0x88]
000188  e183940c          ORR      r9,r3,r12,LSL #8
00018c  e15b0009          CMP      r11,r9
000190  91a0000b          MOVLS    r0,r11
000194  81a00009          MOVHI    r0,r9
000198  e1500004          CMP      r0,r4
00019c  2a000002          BCS      |L1.428|
0001a0  e159000b          CMP      r9,r11
0001a4  21a0400b          MOVCS    r4,r11
0001a8  31a04009          MOVCC    r4,r9
                  |L1.428|
0001ac  e5d8e000          LDRB     lr,[r8,#0]
0001b0  e3a00000          MOV      r0,#0
0001b4  e5d83001          LDRB     r3,[r8,#1]
0001b8  e1a05000          MOV      r5,r0
0001bc  e5d8c002          LDRB     r12,[r8,#2]
0001c0  e5d87003          LDRB     r7,[r8,#3]
0001c4  e185500e          ORR      r5,r5,lr
0001c8  e1855403          ORR      r5,r5,r3,LSL #8
0001cc  e185580c          ORR      r5,r5,r12,LSL #16
0001d0  e3540000          CMP      r4,#0
0001d4  e3a00001          MOV      r0,#1
0001d8  e1855c07          ORR      r5,r5,r7,LSL #24
0001dc  0a00004c          BEQ      |L1.788|
0001e0  e1d228b4          LDRH     r2,[r2,#0x84]  ; _dcd
0001e4  e59f31e8          LDR      r3,|L1.980|
0001e8  e1120110          TST      r2,r0,LSL r1
0001ec  e0833101          ADD      r3,r3,r1,LSL #2
0001f0  0a00002a          BEQ      |L1.672|
0001f4  e59f01dc          LDR      r0,|L1.984|
0001f8  e58d301c          STR      r3,[sp,#0x1c]
0001fc  e5902000          LDR      r2,[r0,#0]
000200  e28d103c          ADD      r1,sp,#0x3c
000204  e1a00005          MOV      r0,r5
000208  e12fff32          BLX      r2
00020c  e1dd73bc          LDRH     r7,[sp,#0x3c]
000210  e59f01c0          LDR      r0,|L1.984|
000214  e59d101c          LDR      r1,[sp,#0x1c]
000218  e1570004          CMP      r7,r4
00021c  e5903008          LDR      r3,[r0,#8]
000220  81a07004          MOVHI    r7,r4
000224  e59d0040          LDR      r0,[sp,#0x40]
000228  e1a02007          MOV      r2,r7
00022c  e12fff33          BLX      r3
000230  e0547007          SUBS     r7,r4,r7
000234  0a00000b          BEQ      |L1.616|
000238  e1dd03be          LDRH     r0,[sp,#0x3e]
00023c  e59d101c          LDR      r1,[sp,#0x1c]
000240  e1500007          CMP      r0,r7
000244  81a00007          MOVHI    r0,r7
000248  e58d0000          STR      r0,[sp,#0]
00024c  e59f0184          LDR      r0,|L1.984|
000250  e59d2000          LDR      r2,[sp,#0]
000254  e5903008          LDR      r3,[r0,#8]
000258  e59d0044          LDR      r0,[sp,#0x44]
00025c  e12fff33          BLX      r3
000260  e59d0000          LDR      r0,[sp,#0]
000264  e0477000          SUB      r7,r7,r0
                  |L1.616|
000268  e59f0168          LDR      r0,|L1.984|
00026c  e0441007          SUB      r1,r4,r7
000270  e5902004          LDR      r2,[r0,#4]
000274  e1a01801          LSL      r1,r1,#16
000278  e1a01821          LSR      r1,r1,#16
00027c  e1a00005          MOV      r0,r5
000280  e12fff32          BLX      r2
000284  ea00001e          B        |L1.772|
                  |L1.648|
000288  e28dd05c          ADD      sp,sp,#0x5c
00028c  e8bd4ff0          POP      {r4-r11,lr}
000290  e59f2144          LDR      r2,|L1.988|
000294  e59f1144          LDR      r1,|L1.992|
000298  e28f0f51          ADR      r0,|L1.996|
00029c  eafffffe          B        __2printf
                  |L1.672|
0002a0  e1a01124          LSR      r1,r4,#2
0002a4  e3510000          CMP      r1,#0
0002a8  e1a00005          MOV      r0,r5
0002ac  e2042003          AND      r2,r4,#3
0002b0  da000004          BLE      |L1.712|
                  |L1.692|
0002b4  e593c000          LDR      r12,[r3,#0]
0002b8  e2411001          SUB      r1,r1,#1
0002bc  e3510000          CMP      r1,#0
0002c0  e480c004          STR      r12,[r0],#4
0002c4  cafffffa          BGT      |L1.692|
                  |L1.712|
0002c8  e3520000          CMP      r2,#0
0002cc  da000004          BLE      |L1.740|
                  |L1.720|
0002d0  e5d31000          LDRB     r1,[r3,#0]
0002d4  e2422001          SUB      r2,r2,#1
0002d8  e3520000          CMP      r2,#0
0002dc  e4c01001          STRB     r1,[r0],#1
0002e0  cafffffa          BGT      |L1.720|
                  |L1.740|
0002e4  e0850004          ADD      r0,r5,r4
0002e8  e1a01420          LSR      r1,r0,#8
0002ec  e5c80000          STRB     r0,[r8,#0]
0002f0  e1a02820          LSR      r2,r0,#16
0002f4  e5c81001          STRB     r1,[r8,#1]
0002f8  e1a03c20          LSR      r3,r0,#24
0002fc  e5c82002          STRB     r2,[r8,#2]
000300  e5c83003          STRB     r3,[r8,#3]
                  |L1.772|
000304  e0490004          SUB      r0,r9,r4
000308  e1a01420          LSR      r1,r0,#8
00030c  e5c80006          STRB     r0,[r8,#6]
000310  e5c81007          STRB     r1,[r8,#7]
                  |L1.788|
000314  e154000b          CMP      r4,r11
000318  3a000001          BCC      |L1.804|
00031c  e1590004          CMP      r9,r4
000320  1a000024          BNE      |L1.952|
                  |L1.804|
000324  e3a00000          MOV      r0,#0
000328  e5c80000          STRB     r0,[r8,#0]
00032c  e5c80001          STRB     r0,[r8,#1]
000330  e5c80002          STRB     r0,[r8,#2]
000334  e3550000          CMP      r5,#0
000338  e5c80003          STRB     r0,[r8,#3]
00033c  028dd05c          ADDEQ    sp,sp,#0x5c
000340  08bd8ff0          POPEQ    {r4-r11,pc}
                  |L1.836|
000344  e06a118a          RSB      r1,r10,r10,LSL #3     ;838
000348  e59f0080          LDR      r0,|L1.976|
00034c  e0801181          ADD      r1,r0,r1,LSL #3       ;838
000350  e59d004c          LDR      r0,[sp,#0x4c]         ;838
000354  e0810180          ADD      r0,r1,r0,LSL #3       ;838
000358  e280100b          ADD      r1,r0,#0xb            ;838
00035c  e5d13007          LDRB     r3,[r1,#7]            ;839
000360  e5d1c005          LDRB     r12,[r1,#5]           ;839
000364  e5d12004          LDRB     r2,[r1,#4]            ;839
000368  e1a04403          LSL      r4,r3,#8              ;839
00036c  e5d11006          LDRB     r1,[r1,#6]            ;839
000370  e182340c          ORR      r3,r2,r12,LSL #8      ;839
000374  e59fc080          LDR      r12,|L1.1020|
000378  e1811004          ORR      r1,r1,r4              ;839
00037c  e59c4018          LDR      r4,[r12,#0x18]        ;839  ; <Data3>, <Data3>
000380  e59d0054          LDR      r0,[sp,#0x54]         ;839
000384  e59cc01c          LDR      r12,[r12,#0x1c]       ;839
000388  e98d1010          STMIB    sp,{r4,r12}           ;839
00038c  e0433001          SUB      r3,r3,r1              ;839
000390  e3a02000          MOV      r2,#0                 ;839
000394  e5cd0004          STRB     r0,[sp,#4]            ;839
000398  e5cd6008          STRB     r6,[sp,#8]            ;839
00039c  e3a01001          MOV      r1,#1                 ;839
0003a0  e28d0004          ADD      r0,sp,#4              ;839
0003a4  e58d300c          STR      r3,[sp,#0xc]          ;839
0003a8  e5cd2009          STRB     r2,[sp,#9]            ;839
0003ac  ebfffffe          BL       dcd_event_handler
0003b0  e28dd05c          ADD      sp,sp,#0x5c
0003b4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.952|
0003b8  e59f100c          LDR      r1,|L1.972|
0003bc  e3a00000          MOV      r0,#0
0003c0  e5c10086          STRB     r0,[r1,#0x86]
0003c4  e28dd05c          ADD      sp,sp,#0x5c
0003c8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.972|
                          DCD      0x01c13000
                  |L1.976|
                          DCD      ||.bss||
                  |L1.980|
                          DCD      0x01c13004
                  |L1.984|
                          DCD      ||.constdata||+0x4c
                  |L1.988|
                          DCD      0x00000267
                  |L1.992|
                          DCD      ||.constdata||+0x64
                  |L1.996|
0003e4  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
0003e8  643a2041
0003ec  53534552
0003f0  54204641
0003f4  494c4544
0003f8  0d0a00  
0003fb  00                DCB      0
                  |L1.1020|
                          DCD      ||.constdata||
                          ENDP

                  dcd_int_handler PROC
;;;1167   
;;;1168   void dcd_int_handler(uint8_t rhport)
000400  e92d4ff0          PUSH     {r4-r11,lr}
;;;1169   {
;;;1170     uint8_t is;
;;;1171     uint16_t txis, rxis;
;;;1172   
;;;1173     is   = USBC_Readb(USBC_REG_INTUSB(USBC0_BASE));   /* read interrupt status */
000404  e51f5040          LDR      r5,|L1.972|
000408  e1a07000          MOV      r7,r0                 ;1169
00040c  e5d5004c          LDRB     r0,[r5,#0x4c]
000410  e24dd014          SUB      sp,sp,#0x14           ;1169
000414  e3a08000          MOV      r8,#0
;;;1174     txis = USBC_Readw(USBC_REG_INTTx(USBC0_BASE)); /* read interrupt status */
000418  e1d544b4          LDRH     r4,[r5,#0x44]
;;;1175     rxis = USBC_Readw(USBC_REG_INTRx(USBC0_BASE)); /* read interrupt status */
00041c  e1d514b6          LDRH     r1,[r5,#0x46]
000420  e58d1000          STR      r1,[sp,#0]
;;;1176   
;;;1177     is &= USBC_Readb(USBC_REG_INTUSBE(USBC0_BASE)); /* ignore disabled interrupts */
000424  e5d51050          LDRB     r1,[r5,#0x50]
000428  e001a000          AND      r10,r1,r0
;;;1178     USBC_Writeb(is, USBC_REG_INTUSB(USBC0_BASE)); /* sunxi musb requires a write to interrupt register to clear */
;;;1179     if (is & USBC_INTUSB_DISCONNECT) {
00042c  e31a0020          TST      r10,#0x20
000430  e5c5a04c          STRB     r10,[r5,#0x4c]        ;1178
000434  0a000008          BEQ      |L1.1116|
000438  e58d8004          STR      r8,[sp,#4]            ;1169
;;;1180   	dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
00043c  e3a00002          MOV      r0,#2
000440  e5cd7004          STRB     r7,[sp,#4]
000444  e5cd0005          STRB     r0,[sp,#5]
000448  e3a01001          MOV      r1,#1
00044c  e28d0004          ADD      r0,sp,#4
000450  e58d8008          STR      r8,[sp,#8]
000454  e58d800c          STR      r8,[sp,#0xc]
000458  ebfffffe          BL       dcd_event_handler
                  |L1.1116|
;;;1181     }
;;;1182     if (is & USBC_INTUSB_SOF) {
00045c  e31a0008          TST      r10,#8
000460  0a000008          BEQ      |L1.1160|
000464  e58d8004          STR      r8,[sp,#4]
;;;1183       dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
000468  e3a00003          MOV      r0,#3
00046c  e5cd7004          STRB     r7,[sp,#4]
000470  e5cd0005          STRB     r0,[sp,#5]
000474  e3a01001          MOV      r1,#1
000478  e28d0004          ADD      r0,sp,#4
00047c  e58d8008          STR      r8,[sp,#8]
000480  e58d800c          STR      r8,[sp,#0xc]
000484  ebfffffe          BL       dcd_event_handler
                  |L1.1160|
000488  e51f9094          LDR      r9,|L1.1020|
00048c  e51f60c4          LDR      r6,|L1.976|
;;;1184     }
;;;1185     if (is & USBC_INTUSB_RESET) {
000490  e31a0004          TST      r10,#4
000494  e3a0b0ff          MOV      r11,#0xff
000498  0a000019          BEQ      |L1.1284|
;;;1186       /* ep0 FADDR must be 0 when (re)entering peripheral mode */
;;;1187       USBC_SelectActiveEp(0);
00049c  e3a00000          MOV      r0,#0
0004a0  e5c50042          STRB     r0,[r5,#0x42]
0004a4  e5c50098          STRB     r0,[r5,#0x98]
0004a8  e5c6b000          STRB     r11,[r6,#0]  ; _dcd
0004ac  e5c6800a          STRB     r8,[r6,#0xa]  ; _dcd
0004b0  e1a01428          LSR      r1,r8,#8
0004b4  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
0004b8  e1a02828          LSR      r2,r8,#16
0004bc  e5c6100c          STRB     r1,[r6,#0xc]  ; _dcd
0004c0  e1a03c28          LSR      r3,r8,#24
0004c4  e5c6200d          STRB     r2,[r6,#0xd]  ; _dcd
0004c8  e3a00001          MOV      r0,#1
0004cc  e5c6300e          STRB     r3,[r6,#0xe]  ; _dcd
0004d0  e1c504b8          STRH     r0,[r5,#0x48]
0004d4  e1c584ba          STRH     r8,[r5,#0x4a]
0004d8  e5d50040          LDRB     r0,[r5,#0x40]
0004dc  e899100c          LDM      r9,{r2,r3,r12}
0004e0  e28de004          ADD      lr,sp,#4
0004e4  e88e100c          STM      lr,{r2,r3,r12}
0004e8  e2100010          ANDS     r0,r0,#0x10
0004ec  13a00002          MOVNE    r0,#2
0004f0  e5cd0008          STRB     r0,[sp,#8]
0004f4  e3a01001          MOV      r1,#1
0004f8  e28d0004          ADD      r0,sp,#4
0004fc  e5cd7004          STRB     r7,[sp,#4]
000500  ebfffffe          BL       dcd_event_handler
                  |L1.1284|
;;;1188       USBC_Dev_SetAddress(0);
;;;1189       process_bus_reset(rhport);
;;;1190     }
;;;1191     if (is & USBC_INTUSB_RESUME) {
000504  e31a0002          TST      r10,#2
000508  0a000008          BEQ      |L1.1328|
00050c  e58d8004          STR      r8,[sp,#4]
;;;1192       dcd_event_bus_signal(rhport, DCD_EVENT_RESUME, true);
000510  e3a00005          MOV      r0,#5
000514  e5cd7004          STRB     r7,[sp,#4]
000518  e5cd0005          STRB     r0,[sp,#5]
00051c  e3a01001          MOV      r1,#1
000520  e28d0004          ADD      r0,sp,#4
000524  e58d8008          STR      r8,[sp,#8]
000528  e58d800c          STR      r8,[sp,#0xc]
00052c  ebfffffe          BL       dcd_event_handler
                  |L1.1328|
;;;1193     }
;;;1194     if (is & USBC_INTUSB_SUSPEND) {
000530  e31a0001          TST      r10,#1
000534  0a000008          BEQ      |L1.1372|
000538  e58d8004          STR      r8,[sp,#4]
;;;1195       dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
00053c  e3a00004          MOV      r0,#4
000540  e5cd7004          STRB     r7,[sp,#4]
000544  e5cd0005          STRB     r0,[sp,#5]
000548  e3a01001          MOV      r1,#1
00054c  e28d0004          ADD      r0,sp,#4
000550  e58d8008          STR      r8,[sp,#8]
000554  e58d800c          STR      r8,[sp,#0xc]
000558  ebfffffe          BL       dcd_event_handler
                  |L1.1372|
;;;1196     }
;;;1197   
;;;1198     txis &= USBC_Readw(USBC_REG_INTTxE(USBC0_BASE));
00055c  e1d504b8          LDRH     r0,[r5,#0x48]
000560  e3a02080          MOV      r2,#0x80
000564  e0044000          AND      r4,r4,r0
;;;1199     USBC_Writew(txis, USBC_REG_INTTx(USBC0_BASE));
;;;1200     if (txis & USBC_INTTx_FLAG_EP0) {
000568  e3140001          TST      r4,#1
00056c  e1c544b4          STRH     r4,[r5,#0x44]         ;1199
000570  0a0000d4          BEQ      |L1.2248|
000574  e3a00000          MOV      r0,#0
000578  e5c50042          STRB     r0,[r5,#0x42]
00057c  e1d5a8b2          LDRH     r10,[r5,#0x82]
000580  e31a0004          TST      r10,#4
000584  0a000006          BEQ      |L1.1444|
000588  e1d508b2          LDRH     r0,[r5,#0x82]
00058c  e3c00020          BIC      r0,r0,#0x20
000590  e1c508b2          STRH     r0,[r5,#0x82]
000594  e1d508b2          LDRH     r0,[r5,#0x82]
000598  e3c00004          BIC      r0,r0,#4
                  |L1.1436|
00059c  e1c508b2          STRH     r0,[r5,#0x82]
0005a0  ea0000c7          B        |L1.2244|
                  |L1.1444|
0005a4  e5d60000          LDRB     r0,[r6,#0]  ; _dcd
0005a8  e31a0010          TST      r10,#0x10
0005ac  0a000029          BEQ      |L1.1624|
0005b0  e1d518b2          LDRH     r1,[r5,#0x82]
0005b4  e35000ff          CMP      r0,#0xff
0005b8  e3811080          ORR      r1,r1,#0x80
0005bc  e1c518b2          STRH     r1,[r5,#0x82]
0005c0  0a000021          BEQ      |L1.1612|
0005c4  e5d6e00b          LDRB     lr,[r6,#0xb]  ; _dcd
0005c8  e5d6300c          LDRB     r3,[r6,#0xc]  ; _dcd
0005cc  e5d6c00d          LDRB     r12,[r6,#0xd]  ; _dcd
0005d0  e5d6200e          LDRB     r2,[r6,#0xe]  ; _dcd
0005d4  e18e1403          ORR      r1,lr,r3,LSL #8
0005d8  e181180c          ORR      r1,r1,r12,LSL #16
0005dc  e1911c02          ORRS     r1,r1,r2,LSL #24
0005e0  0a000019          BEQ      |L1.1612|
0005e4  e1a01428          LSR      r1,r8,#8
0005e8  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
0005ec  e1a02828          LSR      r2,r8,#16
0005f0  e5c6100c          STRB     r1,[r6,#0xc]  ; _dcd
0005f4  e1a03c28          LSR      r3,r8,#24
0005f8  e5c6200d          STRB     r2,[r6,#0xd]  ; _dcd
0005fc  e5c6300e          STRB     r3,[r6,#0xe]  ; _dcd
000600  e5c6b000          STRB     r11,[r6,#0]  ; _dcd
000604  e5d61010          LDRB     r1,[r6,#0x10]  ; _dcd
000608  e5d63012          LDRB     r3,[r6,#0x12]  ; _dcd
00060c  e5d6c00f          LDRB     r12,[r6,#0xf]  ; _dcd
000610  e5d6b011          LDRB     r11,[r6,#0x11]  ; _dcd
000614  e2000080          AND      r0,r0,#0x80
000618  e18cc401          ORR      r12,r12,r1,LSL #8
00061c  e18b3403          ORR      r3,r11,r3,LSL #8
000620  e599b018          LDR      r11,[r9,#0x18]  ; <Data3>, <Data3>
000624  e04c3003          SUB      r3,r12,r3
000628  e599c01c          LDR      r12,[r9,#0x1c]
00062c  e98d1800          STMIB    sp,{r11,r12}
000630  e5cd0008          STRB     r0,[sp,#8]
000634  e3a01001          MOV      r1,#1
000638  e28d0004          ADD      r0,sp,#4
00063c  e5cd7004          STRB     r7,[sp,#4]
000640  e58d300c          STR      r3,[sp,#0xc]
000644  e5cd8009          STRB     r8,[sp,#9]
000648  ebfffffe          BL       dcd_event_handler
                  |L1.1612|
00064c  e31a0001          TST      r10,#1
000650  0a00009b          BEQ      |L1.2244|
000654  ea000046          B        |L1.1908|
                  |L1.1624|
000658  e31a0001          TST      r10,#1
00065c  0a000074          BEQ      |L1.2100|
000660  e35000ff          CMP      r0,#0xff
000664  0a000042          BEQ      |L1.1908|
000668  e5d6c00b          LDRB     r12,[r6,#0xb]  ; _dcd
00066c  e5d6200c          LDRB     r2,[r6,#0xc]  ; _dcd
000670  e5d6300d          LDRB     r3,[r6,#0xd]  ; _dcd
000674  e5d6100e          LDRB     r1,[r6,#0xe]  ; _dcd
000678  e18c0402          ORR      r0,r12,r2,LSL #8
00067c  e1800803          ORR      r0,r0,r3,LSL #16
000680  e1900c01          ORRS     r0,r0,r1,LSL #24
000684  0a00008e          BEQ      |L1.2244|
000688  e5d61012          LDRB     r1,[r6,#0x12]  ; _dcd
00068c  e5d62011          LDRB     r2,[r6,#0x11]  ; _dcd
000690  e1d538b8          LDRH     r3,[r5,#0x88]
000694  e182c401          ORR      r12,r2,r1,LSL #8
000698  e35c0040          CMP      r12,#0x40
00069c  31a0100c          MOVCC    r1,r12
0006a0  23a01040          MOVCS    r1,#0x40
0006a4  e1510003          CMP      r1,r3
0006a8  2a000002          BCS      |L1.1720|
0006ac  e35c0040          CMP      r12,#0x40
0006b0  23a03040          MOVCS    r3,#0x40
0006b4  31a0300c          MOVCC    r3,r12
                  |L1.1720|
0006b8  e1a01123          LSR      r1,r3,#2
0006bc  e3510000          CMP      r1,#0
0006c0  e2032003          AND      r2,r3,#3
0006c4  da000004          BLE      |L1.1756|
                  |L1.1736|
0006c8  e595a000          LDR      r10,[r5,#0]
0006cc  e2411001          SUB      r1,r1,#1
0006d0  e3510000          CMP      r1,#0
0006d4  e480a004          STR      r10,[r0],#4
0006d8  cafffffa          BGT      |L1.1736|
                  |L1.1756|
0006dc  e3520000          CMP      r2,#0
0006e0  da000004          BLE      |L1.1784|
                  |L1.1764|
0006e4  e5d51000          LDRB     r1,[r5,#0]
0006e8  e2422001          SUB      r2,r2,#1
0006ec  e3520000          CMP      r2,#0
0006f0  e4c01001          STRB     r1,[r0],#1
0006f4  cafffffa          BGT      |L1.1764|
                  |L1.1784|
0006f8  e04c0003          SUB      r0,r12,r3
0006fc  e1a02800          LSL      r2,r0,#16
000700  e1a02822          LSR      r2,r2,#16
000704  e1a00422          LSR      r0,r2,#8
000708  e5c62011          STRB     r2,[r6,#0x11]  ; _dcd
00070c  e5c60012          STRB     r0,[r6,#0x12]  ; _dcd
000710  e1d600b8          LDRH     r0,[r6,#8]  ; _dcd
000714  e1a01428          LSR      r1,r8,#8
000718  e1a0c828          LSR      r12,r8,#16
00071c  e0400003          SUB      r0,r0,r3
000720  e1c600b8          STRH     r0,[r6,#8]  ; _dcd
000724  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
000728  e5c6100c          STRB     r1,[r6,#0xc]  ; _dcd
00072c  e1a0ac28          LSR      r10,r8,#24
000730  e5c6c00d          STRB     r12,[r6,#0xd]  ; _dcd
000734  e5c6a00e          STRB     r10,[r6,#0xe]  ; _dcd
000738  e5d63010          LDRB     r3,[r6,#0x10]  ; _dcd
00073c  e5d6c00f          LDRB     r12,[r6,#0xf]  ; _dcd
000740  e3a01001          MOV      r1,#1
000744  e28d0004          ADD      r0,sp,#4
000748  e18c3403          ORR      r3,r12,r3,LSL #8
00074c  e0432002          SUB      r2,r3,r2
000750  e5993018          LDR      r3,[r9,#0x18]  ; <Data3>, <Data3>
000754  e599c01c          LDR      r12,[r9,#0x1c]
000758  e98d1008          STMIB    sp,{r3,r12}
00075c  e5cd8008          STRB     r8,[sp,#8]
000760  e5cd7004          STRB     r7,[sp,#4]
000764  e58d200c          STR      r2,[sp,#0xc]
000768  e5cd8009          STRB     r8,[sp,#9]
00076c  ebfffffe          BL       dcd_event_handler
000770  ea000053          B        |L1.2244|
                  |L1.1908|
000774  e1d508b8          LDRH     r0,[r5,#0x88]
000778  e3500008          CMP      r0,#8
00077c  0a000004          BEQ      |L1.1940|
000780  e59f2a90          LDR      r2,|L1.4632|
000784  e59f1a90          LDR      r1,|L1.4636|
000788  e24f0feb          ADR      r0,|L1.996|
00078c  ebfffffe          BL       __2printf
000790  ea00004b          B        |L1.2244|
                  |L1.1940|
000794  e51f13cc          LDR      r1,|L1.976|
000798  e5952000          LDR      r2,[r5,#0]
00079c  e5812000          STR      r2,[r1,#0]
0007a0  e5952000          LDR      r2,[r5,#0]
0007a4  e1a03428          LSR      r3,r8,#8
0007a8  e5812004          STR      r2,[r1,#4]
0007ac  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
0007b0  e1a0c828          LSR      r12,r8,#16
0007b4  e5c6300c          STRB     r3,[r6,#0xc]  ; _dcd
0007b8  e1a0ac28          LSR      r10,r8,#24
0007bc  e5c6c00d          STRB     r12,[r6,#0xd]  ; _dcd
0007c0  e5c6a00e          STRB     r10,[r6,#0xe]  ; _dcd
0007c4  e1a01428          LSR      r1,r8,#8
0007c8  e5c6800f          STRB     r8,[r6,#0xf]  ; _dcd
0007cc  e5c61010          STRB     r1,[r6,#0x10]  ; _dcd
0007d0  e1a02428          LSR      r2,r8,#8
0007d4  e5c68011          STRB     r8,[r6,#0x11]  ; _dcd
0007d8  e5c62012          STRB     r2,[r6,#0x12]  ; _dcd
0007dc  e289900c          ADD      r9,r9,#0xc
0007e0  e8991208          LDM      r9,{r3,r9,r12}
0007e4  e28d0004          ADD      r0,sp,#4
0007e8  e8801208          STM      r0,{r3,r9,r12}
0007ec  e28d2008          ADD      r2,sp,#8
0007f0  e51f1428          LDR      r1,|L1.976|
0007f4  e3a08001          MOV      r8,#1
0007f8  e1a00002          MOV      r0,r2
0007fc  e5cd7004          STRB     r7,[sp,#4]
000800  ebfffffe          BL       __ARM_common_memcpy1_8
000804  e1a01008          MOV      r1,r8
000808  e28d0004          ADD      r0,sp,#4
00080c  ebfffffe          BL       dcd_event_handler
000810  e1d600b6          LDRH     r0,[r6,#6]  ; _dcd
000814  e1c600b8          STRH     r0,[r6,#8]  ; _dcd
000818  e5d61000          LDRB     r1,[r6,#0]  ; _dcd
00081c  e3500000          CMP      r0,#0
000820  e1a003a1          LSR      r0,r1,#7
000824  13500000          CMPNE    r0,#0
000828  13a00040          MOVNE    r0,#0x40
00082c  1affff5a          BNE      |L1.1436|
000830  ea000023          B        |L1.2244|
                  |L1.2100|
000834  e35000ff          CMP      r0,#0xff
000838  0a000001          BEQ      |L1.2116|
00083c  e3100080          TST      r0,#0x80
000840  0a00003d          BEQ      |L1.2364|
                  |L1.2116|
000844  e5d6300b          LDRB     r3,[r6,#0xb]  ; _dcd
000848  e5d6100c          LDRB     r1,[r6,#0xc]  ; _dcd
00084c  e5d6c00d          LDRB     r12,[r6,#0xd]  ; _dcd
000850  e5d6a00e          LDRB     r10,[r6,#0xe]  ; _dcd
000854  e1830401          ORR      r0,r3,r1,LSL #8
000858  e180080c          ORR      r0,r0,r12,LSL #16
00085c  e1900c0a          ORRS     r0,r0,r10,LSL #24
000860  0a000017          BEQ      |L1.2244|
000864  e1a00428          LSR      r0,r8,#8
000868  e5c6800b          STRB     r8,[r6,#0xb]  ; _dcd
00086c  e5c6000c          STRB     r0,[r6,#0xc]  ; _dcd
000870  e1a01828          LSR      r1,r8,#16
000874  e5c6100d          STRB     r1,[r6,#0xd]  ; _dcd
000878  e1a03c28          LSR      r3,r8,#24
00087c  e5c6300e          STRB     r3,[r6,#0xe]  ; _dcd
000880  e5d63010          LDRB     r3,[r6,#0x10]  ; _dcd
000884  e5d6a00f          LDRB     r10,[r6,#0xf]  ; _dcd
000888  e5d6c012          LDRB     r12,[r6,#0x12]  ; _dcd
00088c  e5d66011          LDRB     r6,[r6,#0x11]  ; _dcd
000890  e18a3403          ORR      r3,r10,r3,LSL #8
000894  e3a01001          MOV      r1,#1
000898  e186c40c          ORR      r12,r6,r12,LSL #8
00089c  e5996018          LDR      r6,[r9,#0x18]  ; <Data3>, <Data3>
0008a0  e043300c          SUB      r3,r3,r12
0008a4  e599c01c          LDR      r12,[r9,#0x1c]
0008a8  e98d1040          STMIB    sp,{r6,r12}
0008ac  e5cd2008          STRB     r2,[sp,#8]
0008b0  e28d0004          ADD      r0,sp,#4
0008b4  e5cd7004          STRB     r7,[sp,#4]
0008b8  e58d300c          STR      r3,[sp,#0xc]
0008bc  e5cd8009          STRB     r8,[sp,#9]
0008c0  ebfffffe          BL       dcd_event_handler
                  |L1.2244|
;;;1201       process_ep0(rhport);
;;;1202       txis &= ~TU_BIT(0);
0008c4  e3c44001          BIC      r4,r4,#1
                  |L1.2248|
;;;1203     }
;;;1204     while (txis) {
0008c8  e3540000          CMP      r4,#0
0008cc  13a08001          MOVNE    r8,#1                 ;1180
0008d0  0a000008          BEQ      |L1.2296|
                  |L1.2260|
;;;1205       unsigned const num = __builtin_ctz(txis);
0008d4  e1a00004          MOV      r0,r4
0008d8  ebfffffe          BL       __ARM_common_ctz
0008dc  e1a06000          MOV      r6,r0
;;;1206       process_edpt_n(rhport, tu_edpt_addr(num, TUSB_DIR_IN));
0008e0  e20000ff          AND      r0,r0,#0xff
0008e4  e3801080          ORR      r1,r0,#0x80
0008e8  e1a00007          MOV      r0,r7
0008ec  ebfffffe          BL       process_edpt_n
;;;1207       txis &= ~TU_BIT(num);
0008f0  e1d44618          BICS     r4,r4,r8,LSL r6
0008f4  1afffff6          BNE      |L1.2260|
                  |L1.2296|
;;;1208     }
;;;1209   
;;;1210     rxis &= USBC_Readw(USBC_REG_INTRxE(USBC0_BASE));
0008f8  e1d514ba          LDRH     r1,[r5,#0x4a]
0008fc  e59d0000          LDR      r0,[sp,#0]
000900  e0114000          ANDS     r4,r1,r0
;;;1211     USBC_Writew(rxis, USBC_REG_INTRx(USBC0_BASE));
000904  e1c544b6          STRH     r4,[r5,#0x46]
000908  13a06001          MOVNE    r6,#1                 ;1180
;;;1212     while (rxis) {
;;;1213       unsigned const num = __builtin_ctz(rxis);
;;;1214       process_edpt_n(rhport, tu_edpt_addr(num, TUSB_DIR_OUT));
;;;1215       rxis &= ~TU_BIT(num);
;;;1216     }
;;;1217   }
00090c  028dd014          ADDEQ    sp,sp,#0x14
000910  08bd8ff0          POPEQ    {r4-r11,pc}
                  |L1.2324|
000914  e1a00004          MOV      r0,r4                 ;1213
000918  ebfffffe          BL       __ARM_common_ctz
00091c  e1a05000          MOV      r5,r0                 ;1213
000920  e20010ff          AND      r1,r0,#0xff           ;1214
000924  e1a00007          MOV      r0,r7                 ;1214
000928  ebfffffe          BL       process_edpt_n
00092c  e1d44516          BICS     r4,r4,r6,LSL r5       ;1215
000930  1afffff7          BNE      |L1.2324|
000934  e28dd014          ADD      sp,sp,#0x14
000938  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2364|
00093c  e1d600b0          LDRH     r0,[r6,#0]  ; _dcd
000940  e3500c05          CMP      r0,#0x500
000944  05d60002          LDRBEQ   r0,[r6,#2]  ; _dcd
000948  05c50098          STRBEQ   r0,[r5,#0x98]
00094c  e5c6b000          STRB     r11,[r6,#0]  ; _dcd
000950  e5d61010          LDRB     r1,[r6,#0x10]  ; _dcd
000954  e5d6800f          LDRB     r8,[r6,#0xf]  ; _dcd
000958  e5d63012          LDRB     r3,[r6,#0x12]  ; _dcd
00095c  e5d66011          LDRB     r6,[r6,#0x11]  ; _dcd
000960  e1888401          ORR      r8,r8,r1,LSL #8
000964  e3a0c000          MOV      r12,#0
000968  e1863403          ORR      r3,r6,r3,LSL #8
00096c  e5996018          LDR      r6,[r9,#0x18]  ; <Data3>, <Data3>
000970  e0483003          SUB      r3,r8,r3
000974  e599801c          LDR      r8,[r9,#0x1c]
000978  e98d0140          STMIB    sp,{r6,r8}
00097c  e5cd2008          STRB     r2,[sp,#8]
000980  e3a01001          MOV      r1,#1
000984  e28d0004          ADD      r0,sp,#4
000988  e5cd7004          STRB     r7,[sp,#4]
00098c  e58d300c          STR      r3,[sp,#0xc]
000990  e5cdc009          STRB     r12,[sp,#9]
000994  ebfffffe          BL       dcd_event_handler
000998  eaffffc9          B        |L1.2244|
;;;1218   
                          ENDP

                  usb_isr_handler PROC
;;;863    
;;;864    static void usb_isr_handler(void) {
00099c  e3a00000          MOV      r0,#0
;;;865    	dcd_int_handler(0);
0009a0  eafffffe          B        dcd_int_handler
;;;866    }
;;;867    
                          ENDP

                  dcd_connect PROC
;;;898    // Connect by enabling internal pull-up resistor on D+/D-
;;;899    void dcd_connect(uint8_t rhport)
0009a4  e51f05e0          LDR      r0,|L1.972|
;;;900    {
;;;901      (void)rhport;
;;;902      USBC_REG_set_bit_b(USBC_BP_POWER_D_SOFT_CONNECT, USBC_REG_PCTL(USBC0_BASE));
0009a8  e5d01040          LDRB     r1,[r0,#0x40]
0009ac  e3811040          ORR      r1,r1,#0x40
0009b0  e5c01040          STRB     r1,[r0,#0x40]
;;;903    }
0009b4  e12fff1e          BX       lr
;;;904    
                          ENDP

                  dcd_edpt_close_all PROC
;;;1037   
;;;1038   void dcd_edpt_close_all(uint8_t rhport)
0009b8  e92d4010          PUSH     {r4,lr}
;;;1039   {
0009bc  e3a0001a          MOV      r0,#0x1a
0009c0  ebfffffe          BL       f1c100s_intc_mask_irq
;;;1040     (void) rhport;
;;;1041     musb_int_mask();
;;;1042     USBC_Writew(1, USBC_REG_INTTxE(USBC0_BASE)); /* Enable only EP0 */
0009c4  e51f0600          LDR      r0,|L1.972|
0009c8  e3a02001          MOV      r2,#1
;;;1043     USBC_Writew(0, USBC_REG_INTRxE(USBC0_BASE));
0009cc  e3a01000          MOV      r1,#0
0009d0  e1c024b8          STRH     r2,[r0,#0x48]         ;1042
0009d4  e1c014ba          STRH     r1,[r0,#0x4a]
;;;1044     for (unsigned i = 1; i < TUP_DCD_ENDPOINT_MAX; ++i) {
;;;1045       USBC_SelectActiveEp(i);
;;;1046       USBC_Writew(0, USBC_REG_TXMAXP(USBC0_BASE));
;;;1047   		USBC_Writew((1 << USBC_BP_TXCSR_D_MODE) | (1 << USBC_BP_TXCSR_D_CLEAR_DATA_TOGGLE) | (1 << USBC_BP_TXCSR_D_FLUSH_FIFO),
0009d8  e59fc840          LDR      r12,|L1.4640|
;;;1048         USBC_REG_TXCSR(USBC0_BASE));
;;;1049   
;;;1050       USBC_Writew(0, USBC_REG_RXMAXP(USBC0_BASE));
;;;1051   	  USBC_Writew((1 << USBC_BP_RXCSR_D_CLEAR_DATA_TOGGLE) | (1 << USBC_BP_RXCSR_D_FLUSH_FIFO),
0009dc  e3a03090          MOV      r3,#0x90
                  |L1.2528|
0009e0  e5c02042          STRB     r2,[r0,#0x42]
0009e4  e1c018b0          STRH     r1,[r0,#0x80]         ;1046
0009e8  e1c0c8b2          STRH     r12,[r0,#0x82]        ;1047
0009ec  e1c018b4          STRH     r1,[r0,#0x84]         ;1050
0009f0  e1c038b6          STRH     r3,[r0,#0x86]
;;;1052         USBC_REG_RXCSR(USBC0_BASE));
;;;1053   
;;;1054       USBC_Writew(0, USBC_REG_TXFIFOAD(USBC0_BASE));
0009f4  e1c019b2          STRH     r1,[r0,#0x92]
;;;1055       USBC_Writeb(0, USBC_REG_TXFIFOSZ(USBC0_BASE));
0009f8  e5c01090          STRB     r1,[r0,#0x90]
;;;1056       USBC_Writew(0, USBC_REG_RXFIFOAD(USBC0_BASE));
0009fc  e1c019b6          STRH     r1,[r0,#0x96]
;;;1057       USBC_Writeb(0, USBC_REG_RXFIFOSZ(USBC0_BASE));
000a00  e5c01094          STRB     r1,[r0,#0x94]
000a04  e2822001          ADD      r2,r2,#1
000a08  e3520004          CMP      r2,#4                 ;1044
000a0c  3afffff3          BCC      |L1.2528|
000a10  e8bd4010          POP      {r4,lr}               ;1044
000a14  e3a0001a          MOV      r0,#0x1a              ;1044
000a18  eafffffe          B        f1c100s_intc_unmask_irq
;;;1058     }
;;;1059     musb_int_unmask();
;;;1060   }
;;;1061   
                          ENDP

                  dcd_disconnect PROC
;;;905    // Disconnect by disabling internal pull-up resistor on D+/D-
;;;906    void dcd_disconnect(uint8_t rhport)
000a1c  e51f0658          LDR      r0,|L1.972|
;;;907    {
;;;908      (void)rhport;
;;;909      USBC_REG_clear_bit_b(USBC_BP_POWER_D_SOFT_CONNECT, USBC_REG_PCTL(USBC0_BASE));
000a20  e5d01040          LDRB     r1,[r0,#0x40]
000a24  e3c11040          BIC      r1,r1,#0x40
000a28  e5c01040          STRB     r1,[r0,#0x40]
;;;910    }
000a2c  e12fff1e          BX       lr
;;;911    
                          ENDP

                  dcd_init PROC
;;;867    
;;;868    void dcd_init(uint8_t rhport)
000a30  e92d41f0          PUSH     {r4-r8,lr}
;;;869    {
000a34  e1a06000          MOV      r6,r0
;;;870      dcd_disconnect(rhport);
000a38  ebfffffe          BL       dcd_disconnect
000a3c  e59f47e0          LDR      r4,|L1.4644|
000a40  e59400cc          LDR      r0,[r4,#0xcc]
000a44  e3800001          ORR      r0,r0,#1
000a48  e58400cc          STR      r0,[r4,#0xcc]
000a4c  e59402c0          LDR      r0,[r4,#0x2c0]
000a50  e3800401          ORR      r0,r0,#0x1000000
000a54  e58402c0          STR      r0,[r4,#0x2c0]
000a58  e3a00002          MOV      r0,#2
000a5c  ebfffffe          BL       os_dly_wait
000a60  e59400cc          LDR      r0,[r4,#0xcc]
000a64  e3800002          ORR      r0,r0,#2
000a68  e58400cc          STR      r0,[r4,#0xcc]
000a6c  e59400cc          LDR      r0,[r4,#0xcc]
000a70  e3800001          ORR      r0,r0,#1
000a74  e58400cc          STR      r0,[r4,#0xcc]
000a78  e5940060          LDR      r0,[r4,#0x60]
000a7c  e3800401          ORR      r0,r0,#0x1000000
000a80  e5840060          STR      r0,[r4,#0x60]
000a84  e59402c0          LDR      r0,[r4,#0x2c0]
000a88  e3800401          ORR      r0,r0,#0x1000000
000a8c  e58402c0          STR      r0,[r4,#0x2c0]
000a90  e59f1790          LDR      r1,|L1.4648|
000a94  e5910000          LDR      r0,[r1,#0]
000a98  e3c00cff          BIC      r0,r0,#0xff00
000a9c  e5810000          STR      r0,[r1,#0]
000aa0  e5910000          LDR      r0,[r1,#0]
000aa4  e3800b03          ORR      r0,r0,#0xc00
000aa8  e5810000          STR      r0,[r1,#0]
000aac  e5910000          LDR      r0,[r1,#0]
000ab0  e3c00001          BIC      r0,r0,#1
000ab4  e5810000          STR      r0,[r1,#0]
000ab8  e5910000          LDR      r0,[r1,#0]
000abc  e3800080          ORR      r0,r0,#0x80
000ac0  e5810000          STR      r0,[r1,#0]
000ac4  e5910000          LDR      r0,[r1,#0]
000ac8  e3800001          ORR      r0,r0,#1
000acc  e5810000          STR      r0,[r1,#0]
000ad0  e5910000          LDR      r0,[r1,#0]
;;;871      USBC_HardwareReset();
;;;872      USBC_PhyConfig();
;;;873      USBC_ConfigFIFO_Base();
;;;874      USBC_EnableDpDmPullUp();
;;;875      USBC_ForceIdToHigh(); // Force device mode
;;;876      USBC_ForceVbusValidToHigh();
;;;877      USBC_SelectBus(USBC_IO_TYPE_PIO, 0, 0);
;;;878      dcd_edpt_close_all(rhport);
;;;879    
;;;880      #if TUD_OPT_HIGH_SPEED
;;;881        USBC_REG_set_bit_b(USBC_BP_POWER_D_HIGH_SPEED_EN, USBC_REG_PCTL(USBC0_BASE));
;;;882      #else
;;;883        USBC_REG_clear_bit_b(USBC_BP_POWER_D_HIGH_SPEED_EN, USBC_REG_PCTL(USBC0_BASE));
;;;884      #endif
;;;885    
;;;886      USBC_Writeb((1 << USBC_BP_INTUSBE_EN_SUSPEND)
;;;887        | (1 << USBC_BP_INTUSBE_EN_RESUME)
;;;888        | (1 << USBC_BP_INTUSBE_EN_RESET)
;;;889        | (1 << USBC_BP_INTUSBE_EN_SOF)
;;;890        | (1 << USBC_BP_INTUSBE_EN_DISCONNECT)
;;;891        , USBC_REG_INTUSBE(USBC0_BASE));
;;;892      f1c100s_intc_clear_pend(F1C100S_IRQ_USBOTG);
;;;893      f1c100s_intc_set_isr(F1C100S_IRQ_USBOTG, usb_isr_handler);
;;;894    
;;;895      dcd_connect(rhport);
;;;896    }
000ad4  e3a07001          MOV      r7,#1
000ad8  e3c00001          BIC      r0,r0,#1
000adc  e5810000          STR      r0,[r1,#0]
000ae0  e3a0c020          MOV      r12,#0x20
000ae4  e3a02014          MOV      r2,#0x14
000ae8  e3a03005          MOV      r3,#5
000aec  e3a00000          MOV      r0,#0
                  |L1.2800|
000af0  e5914000          LDR      r4,[r1,#0]
000af4  e08c5000          ADD      r5,r12,r0
000af8  e3c44cff          BIC      r4,r4,#0xff00
000afc  e5814000          STR      r4,[r1,#0]
000b00  e5914000          LDR      r4,[r1,#0]
000b04  e3120001          TST      r2,#1
000b08  e1844405          ORR      r4,r4,r5,LSL #8
000b0c  e5814000          STR      r4,[r1,#0]
000b10  e5914000          LDR      r4,[r1,#0]
000b14  e3c44001          BIC      r4,r4,#1
000b18  e5814000          STR      r4,[r1,#0]
000b1c  e5914000          LDR      r4,[r1,#0]
000b20  13844080          ORRNE    r4,r4,#0x80
000b24  03c44080          BICEQ    r4,r4,#0x80
000b28  e5814000          STR      r4,[r1,#0]
000b2c  e5914000          LDR      r4,[r1,#0]
000b30  e2800001          ADD      r0,r0,#1
000b34  e3844001          ORR      r4,r4,#1
000b38  e1500003          CMP      r0,r3
000b3c  e1a020c2          ASR      r2,r2,#1
000b40  e5814000          STR      r4,[r1,#0]
000b44  e5914000          LDR      r4,[r1,#0]
000b48  e3c44001          BIC      r4,r4,#1
000b4c  e5814000          STR      r4,[r1,#0]
000b50  baffffe6          BLT      |L1.2800|
000b54  e3a0c02a          MOV      r12,#0x2a
000b58  e3a02003          MOV      r2,#3
000b5c  e3a03002          MOV      r3,#2
000b60  e3a00000          MOV      r0,#0
                  |L1.2916|
000b64  e5914000          LDR      r4,[r1,#0]
000b68  e08c5000          ADD      r5,r12,r0
000b6c  e3c44cff          BIC      r4,r4,#0xff00
000b70  e5814000          STR      r4,[r1,#0]
000b74  e5914000          LDR      r4,[r1,#0]
000b78  e3120001          TST      r2,#1
000b7c  e1844405          ORR      r4,r4,r5,LSL #8
000b80  e5814000          STR      r4,[r1,#0]
000b84  e5914000          LDR      r4,[r1,#0]
000b88  e3c44001          BIC      r4,r4,#1
000b8c  e5814000          STR      r4,[r1,#0]
000b90  e5914000          LDR      r4,[r1,#0]
000b94  13844080          ORRNE    r4,r4,#0x80
000b98  03c44080          BICEQ    r4,r4,#0x80
000b9c  e5814000          STR      r4,[r1,#0]
000ba0  e5914000          LDR      r4,[r1,#0]
000ba4  e2800001          ADD      r0,r0,#1
000ba8  e3844001          ORR      r4,r4,#1
000bac  e1500003          CMP      r0,r3
000bb0  e1a020c2          ASR      r2,r2,#1
000bb4  e5814000          STR      r4,[r1,#0]
000bb8  e5914000          LDR      r4,[r1,#0]
000bbc  e3c44001          BIC      r4,r4,#1
000bc0  e5814000          STR      r4,[r1,#0]
000bc4  baffffe6          BLT      |L1.2916|
000bc8  e3a00507          MOV      r0,#0x1c00000
000bcc  e5901004          LDR      r1,[r0,#4]
000bd0  e3c11003          BIC      r1,r1,#3
000bd4  e3811001          ORR      r1,r1,#1
000bd8  e5801004          STR      r1,[r0,#4]
000bdc  e2801b4d          ADD      r1,r0,#0x13400
000be0  e5910000          LDR      r0,[r1,#0]
000be4  e3c00070          BIC      r0,r0,#0x70
000be8  e3800b43          ORR      r0,r0,#0x10c00
000bec  e5810000          STR      r0,[r1,#0]
000bf0  e5910000          LDR      r0,[r1,#0]
000bf4  e3c00070          BIC      r0,r0,#0x70
000bf8  e3800903          ORR      r0,r0,#0xc000
000bfc  e5810000          STR      r0,[r1,#0]
000c00  e5910000          LDR      r0,[r1,#0]
000c04  e3c00070          BIC      r0,r0,#0x70
000c08  e3800a03          ORR      r0,r0,#0x3000
000c0c  e5810000          STR      r0,[r1,#0]
000c10  e2414b01          SUB      r4,r1,#0x400
000c14  e5d40043          LDRB     r0,[r4,#0x43]
000c18  e3a05000          MOV      r5,#0
000c1c  e5c45043          STRB     r5,[r4,#0x43]
000c20  e3a0001a          MOV      r0,#0x1a
000c24  ebfffffe          BL       f1c100s_intc_mask_irq
000c28  e1c474b8          STRH     r7,[r4,#0x48]
000c2c  e1c454ba          STRH     r5,[r4,#0x4a]
000c30  e59f25e8          LDR      r2,|L1.4640|
000c34  e3a01001          MOV      r1,#1
000c38  e3a00090          MOV      r0,#0x90
                  |L1.3132|
000c3c  e5c41042          STRB     r1,[r4,#0x42]
000c40  e1c458b0          STRH     r5,[r4,#0x80]
000c44  e1c428b2          STRH     r2,[r4,#0x82]
000c48  e1c458b4          STRH     r5,[r4,#0x84]
000c4c  e1c408b6          STRH     r0,[r4,#0x86]
000c50  e1c459b2          STRH     r5,[r4,#0x92]
000c54  e5c45090          STRB     r5,[r4,#0x90]
000c58  e1c459b6          STRH     r5,[r4,#0x96]
000c5c  e5c45094          STRB     r5,[r4,#0x94]
000c60  e2811001          ADD      r1,r1,#1
000c64  e3510004          CMP      r1,#4
000c68  3afffff3          BCC      |L1.3132|
000c6c  e3a0001a          MOV      r0,#0x1a
000c70  ebfffffe          BL       f1c100s_intc_unmask_irq
000c74  e5d41040          LDRB     r1,[r4,#0x40]         ;881
000c78  e3a0002f          MOV      r0,#0x2f              ;886
000c7c  e3811020          ORR      r1,r1,#0x20           ;881
000c80  e5c41040          STRB     r1,[r4,#0x40]         ;881
000c84  e5c40050          STRB     r0,[r4,#0x50]         ;886
000c88  e3a0001a          MOV      r0,#0x1a              ;892
000c8c  ebfffffe          BL       f1c100s_intc_clear_pend
000c90  e59f1594          LDR      r1,|L1.4652|
000c94  e3a0001a          MOV      r0,#0x1a              ;893
000c98  ebfffffe          BL       f1c100s_intc_set_isr
000c9c  e1a00006          MOV      r0,r6                 ;895
000ca0  ebfffffe          BL       dcd_connect
000ca4  e8bd81f0          POP      {r4-r8,pc}
;;;897    
                          ENDP

                  dcd_sof_enable PROC
;;;911    
;;;912    void dcd_sof_enable(uint8_t rhport, bool en)
000ca8  e12fff1e          BX       lr
;;;913    {
;;;914      (void) rhport;
;;;915      (void) en;
;;;916    
;;;917      // TODO implement later
;;;918    }
;;;919    
                          ENDP

                  dcd_int_enable PROC
;;;920    void dcd_int_enable(uint8_t rhport)
000cac  e3a0001a          MOV      r0,#0x1a
;;;921    {
;;;922      (void)rhport;
;;;923      f1c100s_intc_enable_irq(F1C100S_IRQ_USBOTG);
000cb0  eafffffe          B        f1c100s_intc_enable_irq
;;;924    }
;;;925    
                          ENDP

                  dcd_int_disable PROC
;;;930    
;;;931    void dcd_int_disable(uint8_t rhport)
000cb4  e3a0001a          MOV      r0,#0x1a
;;;932    {
;;;933      (void)rhport;
;;;934      f1c100s_intc_disable_irq(F1C100S_IRQ_USBOTG);
000cb8  eafffffe          B        f1c100s_intc_disable_irq
;;;935    }
;;;936    
                          ENDP

                  dcd_set_address PROC
;;;942    // Receive Set Address request, mcu port must also include status IN response
;;;943    void dcd_set_address(uint8_t rhport, uint8_t dev_addr)
000cbc  e51f18f4          LDR      r1,|L1.976|
;;;944    {
;;;945      (void)rhport;
;;;946      (void)dev_addr;
;;;947      _dcd.pipe0.buf       = NULL;
000cc0  e3a00000          MOV      r0,#0
000cc4  e5c1000b          STRB     r0,[r1,#0xb]  ; _dcd
000cc8  e5c1000c          STRB     r0,[r1,#0xc]  ; _dcd
000ccc  e5c1000d          STRB     r0,[r1,#0xd]  ; _dcd
000cd0  e5c1000e          STRB     r0,[r1,#0xe]  ; _dcd
;;;948      _dcd.pipe0.length    = 0;
000cd4  e5c1000f          STRB     r0,[r1,#0xf]  ; _dcd
000cd8  e5c10010          STRB     r0,[r1,#0x10]  ; _dcd
;;;949      _dcd.pipe0.remaining = 0;
000cdc  e5c10011          STRB     r0,[r1,#0x11]  ; _dcd
000ce0  e5c10012          STRB     r0,[r1,#0x12]  ; _dcd
000ce4  e51f1920          LDR      r1,|L1.972|
000ce8  e5c10042          STRB     r0,[r1,#0x42]
000cec  e3a00048          MOV      r0,#0x48
000cf0  e1c108b2          STRH     r0,[r1,#0x82]
;;;950      /* Clear RX FIFO to return ACK. */
;;;951      USBC_SelectActiveEp(0);
;;;952      __USBC_Dev_ep0_ReadDataComplete();
;;;953    }
000cf4  e12fff1e          BX       lr
;;;954    
                          ENDP

                  dcd_remote_wakeup PROC
;;;955    // Wake up host
;;;956    void dcd_remote_wakeup(uint8_t rhport)
000cf8  e92d4010          PUSH     {r4,lr}
;;;957    {
;;;958      (void)rhport;
;;;959      USBC_REG_set_bit_b(USBC_BP_POWER_D_RESUME, USBC_REG_PCTL(USBC0_BASE));
000cfc  e51f4938          LDR      r4,|L1.972|
000d00  e5d40040          LDRB     r0,[r4,#0x40]
000d04  e3800004          ORR      r0,r0,#4
000d08  e5c40040          STRB     r0,[r4,#0x40]
000d0c  e3a0000a          MOV      r0,#0xa
000d10  ebfffffe          BL       os_dly_wait
;;;960      delay_ms(10);
;;;961      USBC_REG_clear_bit_b(USBC_BP_POWER_D_RESUME, USBC_REG_PCTL(USBC0_BASE));
000d14  e5d40040          LDRB     r0,[r4,#0x40]
000d18  e3c00004          BIC      r0,r0,#4
000d1c  e5c40040          STRB     r0,[r4,#0x40]
;;;962    }
000d20  e8bd8010          POP      {r4,pc}
;;;963    
                          ENDP

                  dcd_edpt_open PROC
;;;972    // Configure endpoint's registers according to descriptor
;;;973    bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * ep_desc)
000d24  e92d4ff0          PUSH     {r4-r11,lr}
;;;974    {
;;;975      (void) rhport;
;;;976    
;;;977      uint16_t reg_val;
;;;978    
;;;979      const unsigned ep_addr = ep_desc->bEndpointAddress;
000d28  e5d10002          LDRB     r0,[r1,#2]
;;;980      const unsigned epn     = tu_edpt_number(ep_addr);
;;;981      const unsigned dir_in  = tu_edpt_dir(ep_addr);
;;;982      const unsigned xfer    = ep_desc->bmAttributes.xfer;
;;;983      const unsigned mps     = tu_edpt_packet_size(ep_desc);
000d2c  e5d12005          LDRB     r2,[r1,#5]
000d30  e5d13004          LDRB     r3,[r1,#4]
000d34  e5d1c003          LDRB     r12,[r1,#3]           ;982
000d38  e200407f          AND      r4,r0,#0x7f           ;980
000d3c  e1831402          ORR      r1,r3,r2,LSL #8
000d40  e1a00c00          LSL      r0,r0,#24             ;981
;;;984    
;;;985      TU_ASSERT(epn < TUP_DCD_ENDPOINT_MAX);
000d44  e3540004          CMP      r4,#4
000d48  e24dd034          SUB      sp,sp,#0x34           ;974
000d4c  e20c6003          AND      r6,r12,#3             ;982
000d50  e3c18b3e          BIC      r8,r1,#0xf800         ;983
000d54  e1a05fa0          LSR      r5,r0,#31             ;981
000d58  3a000006          BCC      |L1.3448|
000d5c  e59f24cc          LDR      r2,|L1.4656|
000d60  e59f14cc          LDR      r1,|L1.4660|
000d64  e59f04cc          LDR      r0,|L1.4664|
000d68  ebfffffe          BL       __2printf
000d6c  e3a00000          MOV      r0,#0
000d70  e28dd034          ADD      sp,sp,#0x34
;;;986    
;;;987      pipe_state_t *pipe = &_dcd.pipe[dir_in][epn - 1];
;;;988      pipe->buf       = NULL;
;;;989      pipe->length    = 0;
;;;990      pipe->remaining = 0;
;;;991    
;;;992      musb_int_mask();
;;;993    
;;;994      // volatile hw_endpoint_t *regs = edpt_regs(epn - 1);
;;;995      USBC_SelectActiveEp(epn);
;;;996      if (dir_in) {
;;;997        USBC_Writew(mps, USBC_REG_TXMAXP(USBC0_BASE));
;;;998    
;;;999        reg_val = (1 << USBC_BP_TXCSR_D_MODE)
;;;1000         | (1 << USBC_BP_TXCSR_D_FLUSH_FIFO)
;;;1001         | (1 << USBC_BP_TXCSR_D_CLEAR_DATA_TOGGLE);
;;;1002       if  (xfer == TUSB_XFER_ISOCHRONOUS)
;;;1003         reg_val |= (1 << USBC_BP_TXCSR_D_ISO);
;;;1004   	  USBC_Writew(reg_val, USBC_REG_TXCSR(USBC0_BASE));
;;;1005   
;;;1006       USBC_INT_EnableTxEp(epn);
;;;1007     } else {
;;;1008       USBC_Writew(mps, USBC_REG_RXMAXP(USBC0_BASE));
;;;1009   
;;;1010       reg_val = (1 << USBC_BP_RXCSR_D_FLUSH_FIFO)
;;;1011         | (1 << USBC_BP_RXCSR_D_CLEAR_DATA_TOGGLE);
;;;1012       if  (xfer == TUSB_XFER_ISOCHRONOUS)
;;;1013         reg_val |= (1 << USBC_BP_RXCSR_D_ISO);
;;;1014       USBC_Writew(reg_val, USBC_REG_RXCSR(USBC0_BASE));
;;;1015   
;;;1016       USBC_INT_EnableRxEp(epn);
;;;1017     }
;;;1018   
;;;1019     /* Setup FIFO */
;;;1020     int size_in_log2_minus3 = 28 - TU_MIN(28, __clz((uint32_t)mps));
;;;1021     if ((8u << size_in_log2_minus3) < mps) ++size_in_log2_minus3;
;;;1022     unsigned addr = find_free_memory(size_in_log2_minus3);
;;;1023     TU_ASSERT(addr);
;;;1024   
;;;1025     if (dir_in) {
;;;1026       USBC_Writew(addr, USBC_REG_TXFIFOAD(USBC0_BASE));
;;;1027       USBC_Writeb(size_in_log2_minus3, USBC_REG_TXFIFOSZ(USBC0_BASE));
;;;1028     } else {
;;;1029       USBC_Writew(addr, USBC_REG_RXFIFOAD(USBC0_BASE));
;;;1030       USBC_Writeb(size_in_log2_minus3, USBC_REG_RXFIFOSZ(USBC0_BASE));
;;;1031     }
;;;1032   
;;;1033     musb_int_unmask();
;;;1034   
;;;1035     return true;
;;;1036   }
000d74  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3448|
000d78  e51f09b0          LDR      r0,|L1.976|
000d7c  e0651185          RSB      r1,r5,r5,LSL #3       ;987
000d80  e0800181          ADD      r0,r0,r1,LSL #3       ;987
000d84  e3a07000          MOV      r7,#0                 ;988
000d88  e0800184          ADD      r0,r0,r4,LSL #3       ;987
000d8c  e5c0700b          STRB     r7,[r0,#0xb]          ;988
000d90  e5c0700c          STRB     r7,[r0,#0xc]          ;988
000d94  e5c0700d          STRB     r7,[r0,#0xd]          ;988
000d98  e5c0700e          STRB     r7,[r0,#0xe]          ;988
000d9c  e5c0700f          STRB     r7,[r0,#0xf]          ;989
000da0  e5c07010          STRB     r7,[r0,#0x10]         ;989
000da4  e5c07011          STRB     r7,[r0,#0x11]         ;990
000da8  e5c07012          STRB     r7,[r0,#0x12]         ;990
000dac  e3a0001a          MOV      r0,#0x1a              ;990
000db0  ebfffffe          BL       f1c100s_intc_mask_irq
000db4  e51f29f0          LDR      r2,|L1.972|
000db8  e5c24042          STRB     r4,[r2,#0x42]         ;990
000dbc  e3550000          CMP      r5,#0                 ;996
000dc0  e3a03001          MOV      r3,#1                 ;982
000dc4  0a000034          BEQ      |L1.3740|
000dc8  e3560001          CMP      r6,#1                 ;1002
000dcc  e1c288b0          STRH     r8,[r2,#0x80]         ;997
000dd0  e59f0448          LDR      r0,|L1.4640|
000dd4  02800901          ADDEQ    r0,r0,#0x4000         ;1003
000dd8  e1c208b2          STRH     r0,[r2,#0x82]         ;1004
000ddc  e1d204b8          LDRH     r0,[r2,#0x48]         ;1004
000de0  e1800413          ORR      r0,r0,r3,LSL r4       ;1004
000de4  e1c204b8          STRH     r0,[r2,#0x48]         ;1004
                  |L1.3560|
000de8  e16f0f18          CLZ      r0,r8                 ;1020
000dec  e350001c          CMP      r0,#0x1c              ;1020
000df0  83a0101c          MOVHI    r1,#0x1c              ;1020
000df4  916f1f18          CLZLS    r1,r8                 ;1020
000df8  e3a00008          MOV      r0,#8                 ;1021
000dfc  e261601c          RSB      r6,r1,#0x1c           ;1020
000e00  e1a01610          LSL      r1,r0,r6              ;1021
000e04  e5d2e042          LDRB     lr,[r2,#0x42]         ;1021
000e08  e1510008          CMP      r1,r8                 ;1021
000e0c  32866001          ADDCC    r6,r6,#1              ;1021
000e10  e3a01c02          MOV      r1,#0x200             ;1021
000e14  e3a04001          MOV      r4,#1                 ;1021
000e18  e1a08004          MOV      r8,r4                 ;1021
000e1c  e1cd00f0          STRD     r0,r1,[sp,#0]         ;1021
                  |L1.3616|
000e20  e5c28042          STRB     r8,[r2,#0x42]         ;1021
000e24  e1d2c9b2          LDRH     r12,[r2,#0x92]        ;1021
000e28  e35c0000          CMP      r12,#0                ;1021
000e2c  0a000063          BEQ      |L1.4032|
000e30  e5d20090          LDRB     r0,[r2,#0x90]         ;1021
000e34  e200100f          AND      r1,r0,#0xf            ;1021
000e38  e1a00d80          LSL      r0,r0,#27             ;1021
000e3c  e0811fa0          ADD      r1,r1,r0,LSR #31      ;1021
000e40  e1a09113          LSL      r9,r3,r1              ;1021
000e44  e1a0000d          MOV      r0,sp                 ;1021
000e48  e0801184          ADD      r1,r0,r4,LSL #3       ;1021
000e4c  e1a07001          MOV      r7,r1                 ;1021
                  |L1.3664|
000e50  e1510000          CMP      r1,r0                 ;1021
000e54  9a000005          BLS      |L1.3696|
000e58  e590a000          LDR      r10,[r0,#0]           ;1021
000e5c  e15c000a          CMP      r12,r10               ;1021
000e60  2590a004          LDRCS    r10,[r0,#4]           ;1021
000e64  215a000c          CMPCS    r10,r12               ;1021
000e68  92800008          ADDLS    r0,r0,#8              ;1021
000e6c  9afffff7          BLS      |L1.3664|
                  |L1.3696|
000e70  e1570000          CMP      r7,r0                 ;1021
000e74  1a000011          BNE      |L1.3776|
000e78  e59f23bc          LDR      r2,|L1.4668|
000e7c  e59f13bc          LDR      r1,|L1.4672|
000e80  e59f03b0          LDR      r0,|L1.4664|
000e84  ebfffffe          BL       __2printf
000e88  e59f23b4          LDR      r2,|L1.4676|
000e8c  e59f13b4          LDR      r1,|L1.4680|
000e90  e59f03a0          LDR      r0,|L1.4664|
000e94  ebfffffe          BL       __2printf
000e98  ea0000d7          B        |L1.4604|
                  |L1.3740|
000e9c  e3560001          CMP      r6,#1                 ;1012
000ea0  e1c288b4          STRH     r8,[r2,#0x84]         ;1008
000ea4  e3a00090          MOV      r0,#0x90              ;1010
000ea8  02800901          ADDEQ    r0,r0,#0x4000         ;1013
000eac  e1c208b6          STRH     r0,[r2,#0x86]         ;1014
000eb0  e1d204ba          LDRH     r0,[r2,#0x4a]         ;1014
000eb4  e1800413          ORR      r0,r0,r3,LSL r4       ;1014
000eb8  e1c204ba          STRH     r0,[r2,#0x4a]         ;1014
000ebc  eaffffc9          B        |L1.3560|
                  |L1.3776|
000ec0  e5901000          LDR      r1,[r0,#0]            ;1012
000ec4  e151000c          CMP      r1,r12                ;1012
000ec8  1a000018          BNE      |L1.3888|
000ecc  e5901004          LDR      r1,[r0,#4]            ;1012
000ed0  e08cc009          ADD      r12,r12,r9            ;1012
000ed4  e15c0001          CMP      r12,r1                ;1012
000ed8  e580c000          STR      r12,[r0,#0]           ;1012
000edc  1a000035          BNE      |L1.4024|
000ee0  e047c000          SUB      r12,r7,r0             ;1012
000ee4  e24c1008          SUB      r1,r12,#8             ;1012
000ee8  e3510000          CMP      r1,#0                 ;1012
000eec  da00002b          BLE      |L1.4000|
000ef0  e1a0ce0c          LSL      r12,r12,#28           ;1012
000ef4  e35c0102          CMP      r12,#0x80000000       ;1012
000ef8  5a000004          BPL      |L1.3856|
000efc  e5909008          LDR      r9,[r0,#8]            ;1012
000f00  e590c00c          LDR      r12,[r0,#0xc]         ;1012
000f04  e1a07000          MOV      r7,r0                 ;1012
000f08  e8871200          STM      r7,{r9,r12}           ;1012
000f0c  e2800008          ADD      r0,r0,#8              ;1012
                  |L1.3856|
000f10  e1b01241          ASRS     r1,r1,#4              ;1012
000f14  0a000021          BEQ      |L1.4000|
                  |L1.3864|
000f18  e2807008          ADD      r7,r0,#8              ;1012
000f1c  e8971680          LDM      r7,{r7,r9,r10,r12}    ;1012
000f20  e8a01680          STM      r0!,{r7,r9,r10,r12}   ;1012
000f24  e2511001          SUBS     r1,r1,#1              ;1012
000f28  1afffffa          BNE      |L1.3864|
000f2c  ea00001b          B        |L1.4000|
                  |L1.3888|
000f30  e590a004          LDR      r10,[r0,#4]           ;1012
000f34  e151000c          CMP      r1,r12                ;1012
000f38  e089900c          ADD      r9,r9,r12             ;1012
000f3c  e580c004          STR      r12,[r0,#4]           ;1012
000f40  1a000018          BNE      |L1.4008|
000f44  e159000a          CMP      r9,r10                ;1012
000f48  18800600          STMNE    r0,{r9,r10}           ;1012
000f4c  13a01000          MOVNE    r1,#0                 ;1012
000f50  1a000019          BNE      |L1.4028|
000f54  e047c000          SUB      r12,r7,r0             ;1012
000f58  e24c1008          SUB      r1,r12,#8             ;1012
000f5c  e3510000          CMP      r1,#0                 ;1012
000f60  da00000e          BLE      |L1.4000|
000f64  e1a0ce0c          LSL      r12,r12,#28           ;1012
000f68  e35c0102          CMP      r12,#0x80000000       ;1012
000f6c  5a000004          BPL      |L1.3972|
000f70  e5909008          LDR      r9,[r0,#8]            ;1012
000f74  e590c00c          LDR      r12,[r0,#0xc]         ;1012
000f78  e1a07000          MOV      r7,r0                 ;1012
000f7c  e8871200          STM      r7,{r9,r12}           ;1012
000f80  e2800008          ADD      r0,r0,#8              ;1012
                  |L1.3972|
000f84  e1b01241          ASRS     r1,r1,#4              ;1012
000f88  0a000004          BEQ      |L1.4000|
                  |L1.3980|
000f8c  e2807008          ADD      r7,r0,#8              ;1012
000f90  e8971680          LDM      r7,{r7,r9,r10,r12}    ;1012
000f94  e8a01680          STM      r0!,{r7,r9,r10,r12}   ;1012
000f98  e2511001          SUBS     r1,r1,#1              ;1012
000f9c  1afffffa          BNE      |L1.3980|
                  |L1.4000|
000fa0  e3e01000          MVN      r1,#0                 ;1012
000fa4  ea000004          B        |L1.4028|
                  |L1.4008|
000fa8  e159000a          CMP      r9,r10                ;1012
000fac  18870600          STMNE    r7,{r9,r10}           ;1012
000fb0  11a01003          MOVNE    r1,r3                 ;1012
000fb4  1a000000          BNE      |L1.4028|
                  |L1.4024|
000fb8  e3a01000          MOV      r1,#0                 ;1012
                  |L1.4028|
000fbc  e0844001          ADD      r4,r4,r1              ;1012
                  |L1.4032|
000fc0  e1d219b6          LDRH     r1,[r2,#0x96]         ;1012
000fc4  e3510000          CMP      r1,#0                 ;1012
000fc8  0a00005e          BEQ      |L1.4424|
000fcc  e5d20094          LDRB     r0,[r2,#0x94]         ;1012
000fd0  e200c00f          AND      r12,r0,#0xf           ;1012
000fd4  e1a00d80          LSL      r0,r0,#27             ;1012
000fd8  e08ccfa0          ADD      r12,r12,r0,LSR #31    ;1012
000fdc  e1a0000d          MOV      r0,sp                 ;1012
000fe0  e1a09c13          LSL      r9,r3,r12             ;1012
000fe4  e0807184          ADD      r7,r0,r4,LSL #3       ;1012
000fe8  e1a0c007          MOV      r12,r7                ;1012
                  |L1.4076|
000fec  e15c0000          CMP      r12,r0                ;1012
000ff0  9a000005          BLS      |L1.4108|
000ff4  e590a000          LDR      r10,[r0,#0]           ;1012
000ff8  e151000a          CMP      r1,r10                ;1012
000ffc  2590a004          LDRCS    r10,[r0,#4]           ;1012
001000  215a0001          CMPCS    r10,r1                ;1012
001004  92800008          ADDLS    r0,r0,#8              ;1012
001008  9afffff7          BLS      |L1.4076|
                  |L1.4108|
00100c  e1570000          CMP      r7,r0                 ;1012
001010  1a000008          BNE      |L1.4152|
001014  e59f2220          LDR      r2,|L1.4668|
001018  e59f1220          LDR      r1,|L1.4672|
00101c  e59f0214          LDR      r0,|L1.4664|
001020  ebfffffe          BL       __2printf
001024  e59f2220          LDR      r2,|L1.4684|
001028  e59f1218          LDR      r1,|L1.4680|
00102c  e59f0204          LDR      r0,|L1.4664|
001030  ebfffffe          BL       __2printf
001034  ea000070          B        |L1.4604|
                  |L1.4152|
001038  e590c000          LDR      r12,[r0,#0]           ;1012
00103c  e15c0001          CMP      r12,r1                ;1012
001040  1a000018          BNE      |L1.4264|
001044  e590c004          LDR      r12,[r0,#4]           ;1012
001048  e0811009          ADD      r1,r1,r9              ;1012
00104c  e151000c          CMP      r1,r12                ;1012
001050  e5801000          STR      r1,[r0,#0]            ;1012
001054  1a000035          BNE      |L1.4400|
001058  e0471000          SUB      r1,r7,r0              ;1012
00105c  e241c008          SUB      r12,r1,#8             ;1012
001060  e35c0000          CMP      r12,#0                ;1012
001064  da00002d          BLE      |L1.4384|
001068  e1a01e01          LSL      r1,r1,#28             ;1012
00106c  e3510102          CMP      r1,#0x80000000        ;1012
001070  5a000004          BPL      |L1.4232|
001074  e5907008          LDR      r7,[r0,#8]            ;1012
001078  e590900c          LDR      r9,[r0,#0xc]          ;1012
00107c  e1a01000          MOV      r1,r0                 ;1012
001080  e8810280          STM      r1,{r7,r9}            ;1012
001084  e2800008          ADD      r0,r0,#8              ;1012
                  |L1.4232|
001088  e1b0124c          ASRS     r1,r12,#4             ;1012
00108c  0a000023          BEQ      |L1.4384|
                  |L1.4240|
001090  e2807008          ADD      r7,r0,#8              ;1012
001094  e8971680          LDM      r7,{r7,r9,r10,r12}    ;1012
001098  e8a01680          STM      r0!,{r7,r9,r10,r12}   ;1012
00109c  e2511001          SUBS     r1,r1,#1              ;1012
0010a0  1afffffa          BNE      |L1.4240|
0010a4  ea00001d          B        |L1.4384|
                  |L1.4264|
0010a8  e081a009          ADD      r10,r1,r9             ;1012
0010ac  e5909004          LDR      r9,[r0,#4]            ;1012
0010b0  e15c0001          CMP      r12,r1                ;1012
0010b4  e5801004          STR      r1,[r0,#4]            ;1012
0010b8  1a00001a          BNE      |L1.4392|
0010bc  e15a0009          CMP      r10,r9                ;1012
0010c0  0a000003          BEQ      |L1.4308|
0010c4  e5809004          STR      r9,[r0,#4]            ;1012
0010c8  e3a01000          MOV      r1,#0                 ;1012
0010cc  e580a000          STR      r10,[r0,#0]           ;1012
0010d0  ea00001b          B        |L1.4420|
                  |L1.4308|
0010d4  e0471000          SUB      r1,r7,r0              ;1012
0010d8  e241c008          SUB      r12,r1,#8             ;1012
0010dc  e35c0000          CMP      r12,#0                ;1012
0010e0  da00000e          BLE      |L1.4384|
0010e4  e1a01e01          LSL      r1,r1,#28             ;1012
0010e8  e3510102          CMP      r1,#0x80000000        ;1012
0010ec  5a000004          BPL      |L1.4356|
0010f0  e5907008          LDR      r7,[r0,#8]            ;1012
0010f4  e590900c          LDR      r9,[r0,#0xc]          ;1012
0010f8  e1a01000          MOV      r1,r0                 ;1012
0010fc  e8810280          STM      r1,{r7,r9}            ;1012
001100  e2800008          ADD      r0,r0,#8              ;1012
                  |L1.4356|
001104  e1b0124c          ASRS     r1,r12,#4             ;1012
001108  0a000004          BEQ      |L1.4384|
                  |L1.4364|
00110c  e2807008          ADD      r7,r0,#8              ;1012
001110  e8971680          LDM      r7,{r7,r9,r10,r12}    ;1012
001114  e8a01680          STM      r0!,{r7,r9,r10,r12}   ;1012
001118  e2511001          SUBS     r1,r1,#1              ;1012
00111c  1afffffa          BNE      |L1.4364|
                  |L1.4384|
001120  e3e01000          MVN      r1,#0                 ;1012
001124  ea000006          B        |L1.4420|
                  |L1.4392|
001128  e15a0009          CMP      r10,r9                ;1012
00112c  1a000001          BNE      |L1.4408|
                  |L1.4400|
001130  e3a01000          MOV      r1,#0                 ;1012
001134  ea000002          B        |L1.4420|
                  |L1.4408|
001138  e5879004          STR      r9,[r7,#4]            ;1012
00113c  e1a01003          MOV      r1,r3                 ;1012
001140  e587a000          STR      r10,[r7,#0]           ;1012
                  |L1.4420|
001144  e0844001          ADD      r4,r4,r1              ;1012
                  |L1.4424|
001148  e2888001          ADD      r8,r8,#1              ;1012
00114c  e3580004          CMP      r8,#4                 ;1012
001150  baffff32          BLT      |L1.3616|
001154  e5c2e042          STRB     lr,[r2,#0x42]         ;1012
001158  e1a0000d          MOV      r0,sp                 ;1012
00115c  e0801184          ADD      r1,r0,r4,LSL #3       ;1012
001160  e1a07613          LSL      r7,r3,r6              ;1012
001164  e0418000          SUB      r8,r1,r0              ;1012
001168  e15301c8          CMP      r3,r8,ASR #3          ;1012
00116c  e3a04001          MOV      r4,#1                 ;1012
001170  e3a0c000          MOV      r12,#0                ;1012
001174  d0643804          RSBLE    r3,r4,r4,LSL #16      ;1012
001178  ca00001b          BGT      |L1.4588|
                  |L1.4476|
00117c  e5901004          LDR      r1,[r0,#4]            ;1012
001180  e5909000          LDR      r9,[r0,#0]            ;1012
001184  e0411009          SUB      r1,r1,r9              ;1012
001188  e1570001          CMP      r7,r1                 ;1012
00118c  8a00000f          BHI      |L1.4560|
001190  1a00000c          BNE      |L1.4552|
001194  e1a00009          MOV      r0,r9                 ;1012
                  |L1.4504|
001198  e3500000          CMP      r0,#0                 ;1023
00119c  0a000016          BEQ      |L1.4604|
0011a0  e3550000          CMP      r5,#0                 ;1025
0011a4  01c209b6          STRHEQ   r0,[r2,#0x96]         ;1029
0011a8  05c26094          STRBEQ   r6,[r2,#0x94]         ;1030
0011ac  11c209b2          STRHNE   r0,[r2,#0x92]         ;1026
0011b0  15c26090          STRBNE   r6,[r2,#0x90]         ;1027
0011b4  e3a0001a          MOV      r0,#0x1a              ;1027
0011b8  ebfffffe          BL       f1c100s_intc_unmask_irq
0011bc  e3a00001          MOV      r0,#1                 ;1035
0011c0  e28dd034          ADD      sp,sp,#0x34           ;1035
0011c4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4552|
0011c8  e1510003          CMP      r1,r3
0011cc  31a0c000          MOVCC    r12,r0
                  |L1.4560|
0011d0  e2844001          ADD      r4,r4,#1
0011d4  e15401c8          CMP      r4,r8,ASR #3
0011d8  e2800008          ADD      r0,r0,#8
0011dc  daffffe6          BLE      |L1.4476|
0011e0  e35c0000          CMP      r12,#0
0011e4  159c0000          LDRNE    r0,[r12,#0]
0011e8  1affffea          BNE      |L1.4504|
                  |L1.4588|
0011ec  e59f205c          LDR      r2,|L1.4688|
0011f0  e59f1050          LDR      r1,|L1.4680|
0011f4  e59f003c          LDR      r0,|L1.4664|
0011f8  ebfffffe          BL       __2printf
                  |L1.4604|
0011fc  e59f2050          LDR      r2,|L1.4692|
001200  e59f102c          LDR      r1,|L1.4660|
001204  e59f002c          LDR      r0,|L1.4664|
001208  ebfffffe          BL       __2printf
00120c  e3a00000          MOV      r0,#0                 ;1023
001210  e28dd034          ADD      sp,sp,#0x34           ;1023
001214  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4632|
                          DCD      0x000002fd
                  |L1.4636|
                          DCD      ||.constdata||+0x7f
                  |L1.4640|
                          DCD      0x00002048
                  |L1.4644|
                          DCD      0x01c20000
                  |L1.4648|
                          DCD      0x01c13410
                  |L1.4652|
                          DCD      usb_isr_handler
                  |L1.4656|
                          DCD      0x000003d9
                  |L1.4660|
                          DCD      ||.constdata||+0x8b
                  |L1.4664|
                          DCD      ||.text||+0x3e4
                  |L1.4668|
                          DCD      0x0000016d
                  |L1.4672|
                          DCD      ||.constdata||+0x24
                  |L1.4676|
                          DCD      0x000001be
                  |L1.4680|
                          DCD      ||.constdata||+0x3b
                  |L1.4684|
                          DCD      0x000001c7
                  |L1.4688|
                          DCD      0x000001db
                  |L1.4692|
                          DCD      0x000003ff
                          ENDP

                  dcd_edpt_close PROC
;;;1061   
;;;1062   void dcd_edpt_close(uint8_t rhport, uint8_t ep_addr)
001258  e92d4070          PUSH     {r4-r6,lr}
;;;1063   {
00125c  e1a05001          MOV      r5,r1
;;;1064     (void)rhport;
;;;1065     unsigned const epn    = tu_edpt_number(ep_addr);
001260  e3c14080          BIC      r4,r1,#0x80
;;;1066     unsigned const dir_in = tu_edpt_dir(ep_addr);
001264  e1a063a1          LSR      r6,r1,#7
001268  e3a0001a          MOV      r0,#0x1a
00126c  ebfffffe          BL       f1c100s_intc_mask_irq
001270  e51f0eac          LDR      r0,|L1.972|
001274  e5c04042          STRB     r4,[r0,#0x42]
;;;1067   
;;;1068     musb_int_mask();
;;;1069     USBC_SelectActiveEp(epn);
;;;1070     if (dir_in) {
001278  e3560000          CMP      r6,#0
00127c  e3c53080          BIC      r3,r5,#0x80           ;1065
001280  e3a02001          MOV      r2,#1                 ;1065
001284  e1a02312          LSL      r2,r2,r3              ;1065
001288  e3a01000          MOV      r1,#0
00128c  0a000008          BEQ      |L1.4788|
001290  e1d034b8          LDRH     r3,[r0,#0x48]
001294  e1c32002          BIC      r2,r3,r2
001298  e1c024b8          STRH     r2,[r0,#0x48]
;;;1071       USBC_INT_DisableTxEp(epn);
;;;1072       USBC_Writew(0, USBC_REG_TXMAXP(USBC0_BASE));
;;;1073   		USBC_Writew((1 << USBC_BP_TXCSR_D_MODE) | (1 << USBC_BP_TXCSR_D_CLEAR_DATA_TOGGLE) | (1 << USBC_BP_TXCSR_D_FLUSH_FIFO),
00129c  e51f2084          LDR      r2,|L1.4640|
0012a0  e1c018b0          STRH     r1,[r0,#0x80]         ;1072
0012a4  e1c028b2          STRH     r2,[r0,#0x82]
;;;1074         USBC_REG_TXCSR(USBC0_BASE));
;;;1075   
;;;1076       USBC_Writew(0, USBC_REG_TXFIFOAD(USBC0_BASE));
0012a8  e1c019b2          STRH     r1,[r0,#0x92]
;;;1077       USBC_Writeb(0, USBC_REG_TXFIFOSZ(USBC0_BASE));
0012ac  e5c01090          STRB     r1,[r0,#0x90]
0012b0  ea000007          B        |L1.4820|
                  |L1.4788|
0012b4  e1d034ba          LDRH     r3,[r0,#0x4a]
0012b8  e1c32002          BIC      r2,r3,r2
0012bc  e1c024ba          STRH     r2,[r0,#0x4a]
;;;1078     } else {
;;;1079       USBC_INT_DisableRxEp(epn);
;;;1080       USBC_Writew(0, USBC_REG_RXMAXP(USBC0_BASE));
;;;1081   	  USBC_Writew((1 << USBC_BP_RXCSR_D_CLEAR_DATA_TOGGLE) | (1 << USBC_BP_RXCSR_D_FLUSH_FIFO),
0012c0  e3a02090          MOV      r2,#0x90
0012c4  e1c018b4          STRH     r1,[r0,#0x84]         ;1080
0012c8  e1c028b6          STRH     r2,[r0,#0x86]
;;;1082         USBC_REG_RXCSR(USBC0_BASE));
;;;1083   
;;;1084       USBC_Writew(0, USBC_REG_RXFIFOAD(USBC0_BASE));
0012cc  e1c019b6          STRH     r1,[r0,#0x96]
;;;1085       USBC_Writeb(0, USBC_REG_RXFIFOSZ(USBC0_BASE));
0012d0  e5c01094          STRB     r1,[r0,#0x94]
                  |L1.4820|
0012d4  e8bd4070          POP      {r4-r6,lr}
0012d8  e3a0001a          MOV      r0,#0x1a
0012dc  eafffffe          B        f1c100s_intc_unmask_irq
;;;1086     }
;;;1087     musb_int_unmask();
;;;1088   }
;;;1089   
                          ENDP

                  dcd_edpt_xfer PROC
;;;1090   // Submit a transfer, When complete dcd_event_xfer_complete() is invoked to notify the stack
;;;1091   bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
0012e0  e92d47f0          PUSH     {r4-r10,lr}
;;;1092   {
0012e4  e1a09000          MOV      r9,r0
0012e8  e24dd010          SUB      sp,sp,#0x10
0012ec  e1a04003          MOV      r4,r3
0012f0  e1a07002          MOV      r7,r2
0012f4  e1a05001          MOV      r5,r1
;;;1093     (void)rhport;
;;;1094     bool ret;
;;;1095     // TU_LOG1("X %x %d\n", ep_addr, total_bytes);
;;;1096     unsigned const epnum = tu_edpt_number(ep_addr);
0012f8  e3c1a080          BIC      r10,r1,#0x80
0012fc  e3a0001a          MOV      r0,#0x1a
001300  ebfffffe          BL       f1c100s_intc_mask_irq
001304  e51f1f40          LDR      r1,|L1.972|
;;;1097     musb_int_mask();
;;;1098   
;;;1099     if (epnum) {
;;;1100       _dcd.pipe_buf_is_fifo[tu_edpt_dir(ep_addr)] &= ~TU_BIT(epnum - 1);
001308  e51f0f40          LDR      r0,|L1.976|
00130c  e35a0000          CMP      r10,#0                ;1099
001310  e1a023a5          LSR      r2,r5,#7              ;1099
001314  e3a06000          MOV      r6,#0                 ;1099
001318  e3a03002          MOV      r3,#2
00131c  e3a08001          MOV      r8,#1
001320  0a000022          BEQ      |L1.5040|
001324  e0033325          AND      r3,r3,r5,LSR #6
001328  e0833000          ADD      r3,r3,r0
00132c  e1d398b4          LDRH     r9,[r3,#0x84]
001330  e24ac001          SUB      r12,r10,#1
001334  e1c9cc18          BIC      r12,r9,r8,LSL r12
001338  e1c3c8b4          STRH     r12,[r3,#0x84]
00133c  e062c182          RSB      r12,r2,r2,LSL #3
001340  e3c53080          BIC      r3,r5,#0x80
001344  e080c18c          ADD      r12,r0,r12,LSL #3
001348  e2430001          SUB      r0,r3,#1
00134c  e08c0180          ADD      r0,r12,r0,LSL #3
001350  e1a03427          LSR      r3,r7,#8
001354  e5c07013          STRB     r7,[r0,#0x13]
001358  e1a0c827          LSR      r12,r7,#16
00135c  e5c03014          STRB     r3,[r0,#0x14]
001360  e1a07c27          LSR      r7,r7,#24
001364  e5c0c015          STRB     r12,[r0,#0x15]
001368  e5c07016          STRB     r7,[r0,#0x16]
00136c  e1a03424          LSR      r3,r4,#8
001370  e5c04017          STRB     r4,[r0,#0x17]
001374  e5c03018          STRB     r3,[r0,#0x18]
001378  e1a03424          LSR      r3,r4,#8
00137c  e5c04019          STRB     r4,[r0,#0x19]
001380  e5c0301a          STRB     r3,[r0,#0x1a]
001384  e3c50080          BIC      r0,r5,#0x80
001388  e5c10042          STRB     r0,[r1,#0x42]
00138c  e3520000          CMP      r2,#0
001390  0a000002          BEQ      |L1.5024|
001394  e1a00005          MOV      r0,r5
001398  ebfffffe          BL       handle_xfer_in
00139c  ea000092          B        |L1.5612|
                  |L1.5024|
0013a0  e1d108b6          LDRH     r0,[r1,#0x86]
0013a4  e3100001          TST      r0,#1
0013a8  15c16086          STRBNE   r6,[r1,#0x86]
0013ac  ea00008e          B        |L1.5612|
                  |L1.5040|
0013b0  e3540040          CMP      r4,#0x40
0013b4  9a000005          BLS      |L1.5072|
0013b8  e59f2240          LDR      r2,|L1.5632|
0013bc  e59f1240          LDR      r1,|L1.5636|
0013c0  e51f0190          LDR      r0,|L1.4664|
0013c4  ebfffffe          BL       __2printf
0013c8  e1a08006          MOV      r8,r6
0013cc  ea000086          B        |L1.5612|
                  |L1.5072|
0013d0  e5d0c000          LDRB     r12,[r0,#0]  ; _dcd
0013d4  e35c00ff          CMP      r12,#0xff
0013d8  1a000007          BNE      |L1.5116|
0013dc  e3540000          CMP      r4,#0
0013e0  0a000005          BEQ      |L1.5116|
0013e4  e59f221c          LDR      r2,|L1.5640|
0013e8  e59f1214          LDR      r1,|L1.5636|
0013ec  e51f01bc          LDR      r0,|L1.4664|
0013f0  ebfffffe          BL       __2printf
0013f4  e1a08006          MOV      r8,r6
0013f8  ea00007b          B        |L1.5612|
                  |L1.5116|
0013fc  e3a0a000          MOV      r10,#0
001400  e5c1a042          STRB     r10,[r1,#0x42]
001404  e35c00ff          CMP      r12,#0xff
001408  0a000006          BEQ      |L1.5160|
00140c  e5d0500a          LDRB     r5,[r0,#0xa]  ; _dcd
001410  e3550000          CMP      r5,#0
001414  0a000011          BEQ      |L1.5216|
001418  e5c0600a          STRB     r6,[r0,#0xa]  ; _dcd
00141c  e28f0f7a          ADR      r0,|L1.5644|
001420  ebfffffe          BL       __2printf
001424  ea000070          B        |L1.5612|
                  |L1.5160|
001428  e5c0600a          STRB     r6,[r0,#0xa]  ; _dcd
00142c  e59f31f0          LDR      r3,|L1.5668|
001430  e3a00000          MOV      r0,#0
001434  e5932018          LDR      r2,[r3,#0x18]  ; <Data3>, <Data3>
001438  e593301c          LDR      r3,[r3,#0x1c]
00143c  e1cd20f0          STRD     r2,r3,[sp,#0]
001440  e5cd5004          STRB     r5,[sp,#4]
001444  e1a01000          MOV      r1,r0
001448  e5cd0005          STRB     r0,[sp,#5]
00144c  e1a0000d          MOV      r0,sp
001450  e5cd9000          STRB     r9,[sp,#0]
001454  e58d4008          STR      r4,[sp,#8]
001458  ebfffffe          BL       dcd_event_handler
00145c  ea000062          B        |L1.5612|
                  |L1.5216|
001460  e1a0cc0c          LSL      r12,r12,#24
001464  e1520fac          CMP      r2,r12,LSR #31
001468  1a00004e          BNE      |L1.5544|
00146c  e1d0c0b8          LDRH     r12,[r0,#8]  ; _dcd
001470  e15c0004          CMP      r12,r4
001474  2a000005          BCS      |L1.5264|
001478  e59f21a8          LDR      r2,|L1.5672|
00147c  e59f1180          LDR      r1,|L1.5636|
001480  e51f0250          LDR      r0,|L1.4664|
001484  ebfffffe          BL       __2printf
001488  e1a08006          MOV      r8,r6
00148c  ea000056          B        |L1.5612|
                  |L1.5264|
001490  e35c0040          CMP      r12,#0x40
001494  31a0500c          MOVCC    r5,r12
001498  23a05040          MOVCS    r5,#0x40
00149c  e1550004          CMP      r5,r4
0014a0  2a000002          BCS      |L1.5296|
0014a4  e35c0040          CMP      r12,#0x40
0014a8  23a04040          MOVCS    r4,#0x40
0014ac  31a0400c          MOVCC    r4,r12
                  |L1.5296|
0014b0  e3520000          CMP      r2,#0
0014b4  0a00002b          BEQ      |L1.5480|
0014b8  e1a09124          LSR      r9,r4,#2
0014bc  e3590000          CMP      r9,#0
0014c0  e1a05007          MOV      r5,r7
0014c4  e2042003          AND      r2,r4,#3
0014c8  da000004          BLE      |L1.5344|
                  |L1.5324|
0014cc  e495a004          LDR      r10,[r5],#4
0014d0  e581a000          STR      r10,[r1,#0]
0014d4  e2499001          SUB      r9,r9,#1
0014d8  e3590000          CMP      r9,#0
0014dc  cafffffa          BGT      |L1.5324|
                  |L1.5344|
0014e0  e3520000          CMP      r2,#0
0014e4  da000004          BLE      |L1.5372|
                  |L1.5352|
0014e8  e4d59001          LDRB     r9,[r5],#1
0014ec  e5c19000          STRB     r9,[r1,#0]
0014f0  e2422001          SUB      r2,r2,#1
0014f4  e3520000          CMP      r2,#0
0014f8  cafffffa          BGT      |L1.5352|
                  |L1.5372|
0014fc  e0872004          ADD      r2,r7,r4
001500  e1a05422          LSR      r5,r2,#8
001504  e5c0200b          STRB     r2,[r0,#0xb]  ; _dcd
001508  e1a07822          LSR      r7,r2,#16
00150c  e5c0500c          STRB     r5,[r0,#0xc]  ; _dcd
001510  e1a02c22          LSR      r2,r2,#24
001514  e5c0700d          STRB     r7,[r0,#0xd]  ; _dcd
001518  e5c0200e          STRB     r2,[r0,#0xe]  ; _dcd
00151c  e1a05424          LSR      r5,r4,#8
001520  e5c0400f          STRB     r4,[r0,#0xf]  ; _dcd
001524  e5c05010          STRB     r5,[r0,#0x10]  ; _dcd
001528  e1a05426          LSR      r5,r6,#8
00152c  e5c06011          STRB     r6,[r0,#0x11]  ; _dcd
001530  e04c2004          SUB      r2,r12,r4
001534  e5c05012          STRB     r5,[r0,#0x12]  ; _dcd
001538  e3540040          CMP      r4,#0x40
00153c  e1c020b8          STRH     r2,[r0,#8]  ; _dcd
001540  3a000002          BCC      |L1.5456|
001544  e15c0004          CMP      r12,r4
001548  11c138b2          STRHNE   r3,[r1,#0x82]
00154c  1a000026          BNE      |L1.5612|
                  |L1.5456|
001550  e3a020ff          MOV      r2,#0xff
001554  e5c02000          STRB     r2,[r0,#0]  ; _dcd
001558  e3a0300a          MOV      r3,#0xa
00155c  e5c0800a          STRB     r8,[r0,#0xa]  ; _dcd
001560  e1c138b2          STRH     r3,[r1,#0x82]
001564  ea000020          B        |L1.5612|
                  |L1.5480|
001568  e1a03427          LSR      r3,r7,#8
00156c  e5c0700b          STRB     r7,[r0,#0xb]  ; _dcd
001570  e5c0300c          STRB     r3,[r0,#0xc]  ; _dcd
001574  e1a0c827          LSR      r12,r7,#16
001578  e1a05c27          LSR      r5,r7,#24
00157c  e5c0c00d          STRB     r12,[r0,#0xd]  ; _dcd
001580  e5c0500e          STRB     r5,[r0,#0xe]  ; _dcd
001584  e1a03424          LSR      r3,r4,#8
001588  e5c0400f          STRB     r4,[r0,#0xf]  ; _dcd
00158c  e5c03010          STRB     r3,[r0,#0x10]  ; _dcd
001590  e1a03424          LSR      r3,r4,#8
001594  e5c04011          STRB     r4,[r0,#0x11]  ; _dcd
001598  e3a02040          MOV      r2,#0x40
00159c  e5c03012          STRB     r3,[r0,#0x12]  ; _dcd
0015a0  e1c128b2          STRH     r2,[r1,#0x82]
0015a4  ea000010          B        |L1.5612|
                  |L1.5544|
0015a8  e3520000          CMP      r2,#0
0015ac  0a00000e          BEQ      |L1.5612|
0015b0  e1a0c426          LSR      r12,r6,#8
0015b4  e5c0600b          STRB     r6,[r0,#0xb]  ; _dcd
0015b8  e1a03826          LSR      r3,r6,#16
0015bc  e5c0c00c          STRB     r12,[r0,#0xc]  ; _dcd
0015c0  e5c0300d          STRB     r3,[r0,#0xd]  ; _dcd
0015c4  e1a04c26          LSR      r4,r6,#24
0015c8  e5c0400e          STRB     r4,[r0,#0xe]  ; _dcd
0015cc  e1a02426          LSR      r2,r6,#8
0015d0  e5c0600f          STRB     r6,[r0,#0xf]  ; _dcd
0015d4  e5c02010          STRB     r2,[r0,#0x10]  ; _dcd
0015d8  e1a03426          LSR      r3,r6,#8
0015dc  e5c06011          STRB     r6,[r0,#0x11]  ; _dcd
0015e0  e3a02048          MOV      r2,#0x48
0015e4  e5c03012          STRB     r3,[r0,#0x12]  ; _dcd
0015e8  e1c128b2          STRH     r2,[r1,#0x82]
                  |L1.5612|
0015ec  e3a0001a          MOV      r0,#0x1a
0015f0  ebfffffe          BL       f1c100s_intc_unmask_irq
;;;1101       ret = edpt_n_xfer(rhport, ep_addr, buffer, total_bytes);
;;;1102     } else {
;;;1103       ret = edpt0_xfer(rhport, ep_addr, buffer, total_bytes);
;;;1104     }
;;;1105     musb_int_unmask();
;;;1106     return ret;
0015f4  e1a00008          MOV      r0,r8
0015f8  e28dd010          ADD      sp,sp,#0x10
;;;1107   }
0015fc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.5632|
                          DCD      0x0000029a
                  |L1.5636|
                          DCD      ||.constdata||+0x74
                  |L1.5640|
                          DCD      0x0000029d
                  |L1.5644|
00160c  44726f70          DCB      "Drop CONTROL_STAGE_ACK\n",0
001610  20434f4e
001614  54524f4c
001618  5f535441
00161c  47455f41
001620  434b0a00
                  |L1.5668|
                          DCD      ||.constdata||
                  |L1.5672|
                          DCD      0x000002b5
                          ENDP

                  dcd_edpt_xfer_fifo PROC
;;;1109   // Submit a transfer where is managed by FIFO, When complete dcd_event_xfer_complete() is invoked to notify the stack - optional, however, must be listed in usbd.c
;;;1110   bool dcd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
00162c  e92d41f0          PUSH     {r4-r8,lr}
;;;1111   {
;;;1112     (void)rhport;
;;;1113     bool ret;
;;;1114     // TU_LOG1("X %x %d\n", ep_addr, total_bytes);
;;;1115     unsigned const epnum = tu_edpt_number(ep_addr);
001630  e3d18080          BICS     r8,r1,#0x80
001634  e1a05003          MOV      r5,r3                 ;1111
001638  e1a06002          MOV      r6,r2                 ;1111
00163c  e1a04001          MOV      r4,r1                 ;1111
001640  0a000024          BEQ      |L1.5848|
001644  e3a0001a          MOV      r0,#0x1a              ;1111
001648  ebfffffe          BL       f1c100s_intc_mask_irq
;;;1116     TU_ASSERT(epnum);
;;;1117   
;;;1118     musb_int_mask();
;;;1119     _dcd.pipe_buf_is_fifo[tu_edpt_dir(ep_addr)] |= TU_BIT(epnum - 1);
00164c  e59f137c          LDR      r1,|L1.6608|
001650  e3a00002          MOV      r0,#2
001654  e0000324          AND      r0,r0,r4,LSR #6
001658  e0800001          ADD      r0,r0,r1
00165c  e1d038b4          LDRH     r3,[r0,#0x84]
001660  e3a07001          MOV      r7,#1
001664  e2482001          SUB      r2,r8,#1
001668  e1832217          ORR      r2,r3,r7,LSL r2
00166c  e1c028b4          STRH     r2,[r0,#0x84]
001670  e1b023a4          LSRS     r2,r4,#7
001674  e3c43080          BIC      r3,r4,#0x80
001678  e062c182          RSB      r12,r2,r2,LSL #3
00167c  e081118c          ADD      r1,r1,r12,LSL #3
001680  e2433001          SUB      r3,r3,#1
001684  e0811183          ADD      r1,r1,r3,LSL #3
001688  e1a03426          LSR      r3,r6,#8
00168c  e5c16013          STRB     r6,[r1,#0x13]
001690  e5c13014          STRB     r3,[r1,#0x14]
;;;1120     ret = edpt_n_xfer(rhport, ep_addr, (uint8_t*)ff, total_bytes);
001694  e1a00004          MOV      r0,r4
001698  e1a0c826          LSR      r12,r6,#16
00169c  e1a04c26          LSR      r4,r6,#24
0016a0  e5c1c015          STRB     r12,[r1,#0x15]
0016a4  e5c14016          STRB     r4,[r1,#0x16]
0016a8  e1a03425          LSR      r3,r5,#8
0016ac  e5c15017          STRB     r5,[r1,#0x17]
0016b0  e5c13018          STRB     r3,[r1,#0x18]
0016b4  e1a03425          LSR      r3,r5,#8
0016b8  e5c15019          STRB     r5,[r1,#0x19]
0016bc  e5c1301a          STRB     r3,[r1,#0x1a]
0016c0  e59f130c          LDR      r1,|L1.6612|
0016c4  e3c03080          BIC      r3,r0,#0x80
0016c8  e5c13042          STRB     r3,[r1,#0x42]
0016cc  0a000007          BEQ      |L1.5872|
0016d0  ebfffffe          BL       handle_xfer_in
0016d4  ea000009          B        |L1.5888|
                  |L1.5848|
0016d8  e59f22f8          LDR      r2,|L1.6616|
0016dc  e59f12f8          LDR      r1,|L1.6620|
0016e0  e51f04b0          LDR      r0,|L1.4664|
0016e4  ebfffffe          BL       __2printf
0016e8  e3a00000          MOV      r0,#0                 ;1116
;;;1121     musb_int_unmask();
;;;1122   
;;;1123     return ret;
;;;1124   }
0016ec  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5872|
0016f0  e1d108b6          LDRH     r0,[r1,#0x86]
0016f4  e3100001          TST      r0,#1
0016f8  13a00000          MOVNE    r0,#0
0016fc  15c10086          STRBNE   r0,[r1,#0x86]
                  |L1.5888|
001700  e3a0001a          MOV      r0,#0x1a
001704  ebfffffe          BL       f1c100s_intc_unmask_irq
001708  e1a00007          MOV      r0,r7                 ;1123
00170c  e8bd81f0          POP      {r4-r8,pc}
;;;1125   
                          ENDP

                  dcd_edpt_stall PROC
;;;1126   // Stall endpoint
;;;1127   void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
001710  e92d4070          PUSH     {r4-r6,lr}
;;;1128   {
001714  e1a05001          MOV      r5,r1
;;;1129     (void)rhport;
;;;1130     unsigned const epn = tu_edpt_number(ep_addr);
001718  e3c14080          BIC      r4,r1,#0x80
00171c  e3a0001a          MOV      r0,#0x1a
001720  ebfffffe          BL       f1c100s_intc_mask_irq
001724  e59f02a8          LDR      r0,|L1.6612|
001728  e5c04042          STRB     r4,[r0,#0x42]
;;;1131     musb_int_mask();
;;;1132     USBC_SelectActiveEp(epn);
;;;1133     if (0 == epn) {
00172c  e3540000          CMP      r4,#0
001730  0a000005          BEQ      |L1.5964|
;;;1134       if (!ep_addr) { /* Ignore EP80 */
;;;1135         _dcd.setup_packet.bmRequestType = REQUEST_TYPE_INVALID;
;;;1136         _dcd.pipe0.buf = NULL;
;;;1137         __USBC_Dev_ep0_SendStall();
;;;1138       }
;;;1139     } else {
;;;1140       if (tu_edpt_dir(ep_addr)) { /* IN */
001734  e3150080          TST      r5,#0x80
001738  11d018b2          LDRHNE   r1,[r0,#0x82]
00173c  13811010          ORRNE    r1,r1,#0x10
001740  0a00000e          BEQ      |L1.6016|
                  |L1.5956|
001744  e1c018b2          STRH     r1,[r0,#0x82]
001748  ea000017          B        |L1.6060|
                  |L1.5964|
00174c  e3550000          CMP      r5,#0                 ;1134
001750  1a000015          BNE      |L1.6060|
001754  e59f1274          LDR      r1,|L1.6608|
001758  e3a030ff          MOV      r3,#0xff              ;1135
00175c  e3a02000          MOV      r2,#0                 ;1136
001760  e5c13000          STRB     r3,[r1,#0]            ;1135  ; _dcd
001764  e5c1200b          STRB     r2,[r1,#0xb]          ;1136  ; _dcd
001768  e5c1200c          STRB     r2,[r1,#0xc]          ;1136  ; _dcd
00176c  e5c1200d          STRB     r2,[r1,#0xd]          ;1136  ; _dcd
001770  e5c1200e          STRB     r2,[r1,#0xe]          ;1136  ; _dcd
001774  e1d018b2          LDRH     r1,[r0,#0x82]         ;1136
001778  e3811020          ORR      r1,r1,#0x20           ;1136
00177c  eafffff0          B        |L1.5956|
                  |L1.6016|
001780  e1d018b6          LDRH     r1,[r0,#0x86]         ;1137
001784  e3110001          TST      r1,#1                 ;1137
;;;1141         __USBC_Dev_Tx_SendStall();
;;;1142       } else { /* OUT */
;;;1143         TU_ASSERT(!__USBC_Dev_Rx_IsReadDataReady(),);
001788  0a000004          BEQ      |L1.6048|
00178c  e8bd4070          POP      {r4-r6,lr}
001790  e59f2248          LDR      r2,|L1.6624|
001794  e59f1248          LDR      r1,|L1.6628|
001798  e51f0568          LDR      r0,|L1.4664|
00179c  eafffffe          B        __2printf
                  |L1.6048|
0017a0  e1d018b6          LDRH     r1,[r0,#0x86]
0017a4  e3811020          ORR      r1,r1,#0x20
0017a8  e1c018b6          STRH     r1,[r0,#0x86]
                  |L1.6060|
0017ac  e8bd4070          POP      {r4-r6,lr}
0017b0  e3a0001a          MOV      r0,#0x1a
0017b4  eafffffe          B        f1c100s_intc_unmask_irq
;;;1144         __USBC_Dev_Rx_SendStall();
;;;1145       }
;;;1146     }
;;;1147     musb_int_unmask();
;;;1148   }
;;;1149   
                          ENDP

                  dcd_edpt_clear_stall PROC
;;;1150   // clear stall, data toggle is also reset to DATA0
;;;1151   void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
0017b8  e92d4070          PUSH     {r4-r6,lr}
;;;1152   {
0017bc  e1a05001          MOV      r5,r1
;;;1153     (void)rhport;
;;;1154     unsigned const epn = tu_edpt_number(ep_addr);
0017c0  e3c14080          BIC      r4,r1,#0x80
0017c4  e3a0001a          MOV      r0,#0x1a
0017c8  ebfffffe          BL       f1c100s_intc_mask_irq
0017cc  e59f0200          LDR      r0,|L1.6612|
0017d0  e5c04042          STRB     r4,[r0,#0x42]
;;;1155     musb_int_mask();
;;;1156     USBC_SelectActiveEp(epn);
;;;1157     if (0 != epn) {
0017d4  e3540000          CMP      r4,#0
0017d8  0a000008          BEQ      |L1.6144|
;;;1158       if (tu_edpt_dir(ep_addr)) { /* IN */
0017dc  e3150080          TST      r5,#0x80
0017e0  01d018b6          LDRHEQ   r1,[r0,#0x86]
0017e4  03c11064          BICEQ    r1,r1,#0x64
0017e8  03811080          ORREQ    r1,r1,#0x80
0017ec  01c018b6          STRHEQ   r1,[r0,#0x86]
0017f0  11d018b2          LDRHNE   r1,[r0,#0x82]
0017f4  13c11034          BICNE    r1,r1,#0x34
0017f8  13811040          ORRNE    r1,r1,#0x40
0017fc  11c018b2          STRHNE   r1,[r0,#0x82]
                  |L1.6144|
001800  e8bd4070          POP      {r4-r6,lr}
001804  e3a0001a          MOV      r0,#0x1a
001808  eafffffe          B        f1c100s_intc_unmask_irq
;;;1159         __USBC_Dev_Tx_ClearStall();
;;;1160       } else { /* OUT */
;;;1161         __USBC_Dev_Rx_ClearStall();
;;;1162       }
;;;1163     }
;;;1164     musb_int_unmask();
;;;1165   }
;;;1166   
                          ENDP

                  handle_xfer_in PROC
;;;578    
;;;579    static bool handle_xfer_in(uint_fast8_t ep_addr)
00180c  e92d4ff0          PUSH     {r4-r11,lr}
;;;580    {
;;;581      unsigned epnum_minus1 = tu_edpt_number(ep_addr) - 1;
;;;582      pipe_state_t  *pipe = &_dcd.pipe[tu_edpt_dir(ep_addr)][epnum_minus1];
001810  e1a01c00          LSL      r1,r0,#24
001814  e1a02fa1          LSR      r2,r1,#31
001818  e59f11b0          LDR      r1,|L1.6608|
00181c  e200007f          AND      r0,r0,#0x7f           ;581
001820  e0622182          RSB      r2,r2,r2,LSL #3
001824  e0812182          ADD      r2,r1,r2,LSL #3
001828  e2400001          SUB      r0,r0,#1
00182c  e0822180          ADD      r2,r2,r0,LSL #3
001830  e2825013          ADD      r5,r2,#0x13
;;;583      const unsigned rem  = pipe->remaining;
001834  e5d2201a          LDRB     r2,[r2,#0x1a]
001838  e5d53006          LDRB     r3,[r5,#6]
00183c  e24dd014          SUB      sp,sp,#0x14           ;580
001840  e1937402          ORRS     r7,r3,r2,LSL #8
001844  0a000038          BEQ      |L1.6444|
;;;584    
;;;585      if (!rem) {
;;;586        pipe->buf = NULL;
;;;587        return true;
;;;588      }
;;;589    
;;;590      const unsigned mps = USBC_Readw(USBC_REG_TXMAXP(USBC0_BASE));
001848  e59f8184          LDR      r8,|L1.6612|
00184c  e1d848b0          LDRH     r4,[r8,#0x80]
;;;591      const unsigned len = TU_MIN(mps, rem);
;;;592      uint8_t          *buf = pipe->buf;
001850  e3a02000          MOV      r2,#0
001854  e1a03002          MOV      r3,r2
001858  e5d52000          LDRB     r2,[r5,#0]
00185c  e5d5c001          LDRB     r12,[r5,#1]
001860  e5d56002          LDRB     r6,[r5,#2]
001864  e5d5a003          LDRB     r10,[r5,#3]
001868  e1833002          ORR      r3,r3,r2
00186c  e1570004          CMP      r7,r4                 ;591
001870  e183340c          ORR      r3,r3,r12,LSL #8
001874  91a04007          MOVLS    r4,r7                 ;591
001878  e1833806          ORR      r3,r3,r6,LSL #16
;;;593      // TU_LOG1("   %p mps %d len %d rem %d\n", buf, mps, len, rem);
;;;594      if (len) {
00187c  e3540000          CMP      r4,#0
001880  e3a09001          MOV      r9,#1                 ;587
001884  e1833c0a          ORR      r3,r3,r10,LSL #24     ;592
001888  0a00004c          BEQ      |L1.6592|
;;;595        volatile void* addr = (volatile void*)(USBC_REG_EPFIFO1(USBC0_BASE) + (epnum_minus1 << 2));
;;;596        if (_dcd.pipe_buf_is_fifo[TUSB_DIR_IN] & TU_BIT(epnum_minus1)) {
00188c  e1d118b6          LDRH     r1,[r1,#0x86]  ; _dcd
001890  e59f2150          LDR      r2,|L1.6632|
001894  e1110019          TST      r1,r9,LSL r0
001898  e0826100          ADD      r6,r2,r0,LSL #2       ;595
00189c  0a00002a          BEQ      |L1.6476|
0018a0  e59f0144          LDR      r0,|L1.6636|
0018a4  e58d3000          STR      r3,[sp,#0]
0018a8  e590200c          LDR      r2,[r0,#0xc]
0018ac  e28d1004          ADD      r1,sp,#4
0018b0  e1a00003          MOV      r0,r3
0018b4  e12fff32          BLX      r2
0018b8  e1dda0b4          LDRH     r10,[sp,#4]
0018bc  e59f1128          LDR      r1,|L1.6636|
0018c0  e59d0008          LDR      r0,[sp,#8]
0018c4  e15a0004          CMP      r10,r4
0018c8  e5913014          LDR      r3,[r1,#0x14]
0018cc  81a0a004          MOVHI    r10,r4
0018d0  e1a0200a          MOV      r2,r10
0018d4  e1a01006          MOV      r1,r6
0018d8  e12fff33          BLX      r3
0018dc  e054a00a          SUBS     r10,r4,r10
0018e0  0a000009          BEQ      |L1.6412|
0018e4  e1ddb0b6          LDRH     r11,[sp,#6]
0018e8  e59f10fc          LDR      r1,|L1.6636|
0018ec  e59d000c          LDR      r0,[sp,#0xc]
0018f0  e15b000a          CMP      r11,r10
0018f4  e5913014          LDR      r3,[r1,#0x14]
0018f8  81a0b00a          MOVHI    r11,r10
0018fc  e1a0200b          MOV      r2,r11
001900  e1a01006          MOV      r1,r6
001904  e12fff33          BLX      r3
001908  e04aa00b          SUB      r10,r10,r11
                  |L1.6412|
00190c  e59f00d8          LDR      r0,|L1.6636|
001910  e044100a          SUB      r1,r4,r10
001914  e5902010          LDR      r2,[r0,#0x10]
001918  e1a01801          LSL      r1,r1,#16
00191c  e59d0000          LDR      r0,[sp,#0]
001920  e1a01821          LSR      r1,r1,#16
001924  e12fff32          BLX      r2
;;;597          pipe_read_write_packet_ff((tu_fifo_t *)buf, addr, len, TUSB_DIR_IN);
001928  ea000020          B        |L1.6576|
                  |L1.6444|
00192c  e3a00000          MOV      r0,#0                 ;586
001930  e5c50000          STRB     r0,[r5,#0]            ;586
001934  e5c50001          STRB     r0,[r5,#1]            ;586
001938  e5c50002          STRB     r0,[r5,#2]            ;586
00193c  e5c50003          STRB     r0,[r5,#3]            ;586
001940  e3a00001          MOV      r0,#1                 ;587
001944  e28dd014          ADD      sp,sp,#0x14           ;587
;;;598        } else {
;;;599          pipe_write_packet(buf, addr, len);
;;;600          pipe->buf       = buf + len;
;;;601        }
;;;602        pipe->remaining = rem - len;
;;;603      }
;;;604      __USBC_Dev_Tx_WriteDataComplete();
;;;605      // TU_LOG1(" TXCSRL%d = %x %d\n", epnum_minus1 + 1, regs->TXCSRL, rem - len);
;;;606      return false;
;;;607    }
001948  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.6476|
00194c  e1a02124          LSR      r2,r4,#2
001950  e3520000          CMP      r2,#0
001954  e1a00003          MOV      r0,r3                 ;599
001958  e2041003          AND      r1,r4,#3              ;599
00195c  da000004          BLE      |L1.6516|
                  |L1.6496|
001960  e490c004          LDR      r12,[r0],#4           ;599
001964  e586c000          STR      r12,[r6,#0]           ;599
001968  e2422001          SUB      r2,r2,#1              ;599
00196c  e3520000          CMP      r2,#0                 ;599
001970  cafffffa          BGT      |L1.6496|
                  |L1.6516|
001974  e3510000          CMP      r1,#0                 ;599
001978  da000004          BLE      |L1.6544|
                  |L1.6524|
00197c  e4d02001          LDRB     r2,[r0],#1            ;599
001980  e5c62000          STRB     r2,[r6,#0]            ;599
001984  e2411001          SUB      r1,r1,#1              ;599
001988  e3510000          CMP      r1,#0                 ;599
00198c  cafffffa          BGT      |L1.6524|
                  |L1.6544|
001990  e0832004          ADD      r2,r3,r4              ;600
001994  e1a03422          LSR      r3,r2,#8              ;600
001998  e5c52000          STRB     r2,[r5,#0]            ;600
00199c  e1a01822          LSR      r1,r2,#16             ;600
0019a0  e5c53001          STRB     r3,[r5,#1]            ;600
0019a4  e1a00c22          LSR      r0,r2,#24             ;600
0019a8  e5c51002          STRB     r1,[r5,#2]            ;600
0019ac  e5c50003          STRB     r0,[r5,#3]            ;600
                  |L1.6576|
0019b0  e0470004          SUB      r0,r7,r4              ;602
0019b4  e1a01420          LSR      r1,r0,#8              ;602
0019b8  e5c50006          STRB     r0,[r5,#6]            ;602
0019bc  e5c51007          STRB     r1,[r5,#7]            ;602
                  |L1.6592|
0019c0  e5c89082          STRB     r9,[r8,#0x82]         ;602
0019c4  e3a00000          MOV      r0,#0                 ;606
0019c8  e28dd014          ADD      sp,sp,#0x14           ;606
0019cc  e8bd8ff0          POP      {r4-r11,pc}
;;;608    
                          ENDP

                  |L1.6608|
                          DCD      ||.bss||
                  |L1.6612|
                          DCD      0x01c13000
                  |L1.6616|
                          DCD      0x0000045c
                  |L1.6620|
                          DCD      ||.constdata||+0x99
                  |L1.6624|
                          DCD      0x00000477
                  |L1.6628|
                          DCD      ||.constdata||+0xac
                  |L1.6632|
                          DCD      0x01c13004
                  |L1.6636|
                          DCD      ||.constdata||+0x4c

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  _dcd
                          %        136

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00010000          DCB      0x00,0x01,0x00,0x00
                          %        8
00000c  00060000          DCB      0x00,0x06,0x00,0x00
                          %        8
000018  00070000          DCB      0x00,0x07,0x00,0x00
                          %        8
                  __func__
000024  75706461          DCB      0x75,0x70,0x64,0x61
000028  74655f66          DCB      0x74,0x65,0x5f,0x66
00002c  7265655f          DCB      0x72,0x65,0x65,0x5f
000030  626c6f63          DCB      0x62,0x6c,0x6f,0x63
000034  6b5f6c69          DCB      0x6b,0x5f,0x6c,0x69
000038  737400            DCB      0x73,0x74,0x00
                  |symbol_number.20|
00003b  66                DCB      0x66
00003c  696e645f          DCB      0x69,0x6e,0x64,0x5f
000040  66726565          DCB      0x66,0x72,0x65,0x65
000044  5f6d656d          DCB      0x5f,0x6d,0x65,0x6d
000048  6f727900          DCB      0x6f,0x72,0x79,0x00
                  ops
                          DCD      tu_fifo_get_write_info
                          DCD      tu_fifo_advance_write_pointer
                          DCD      pipe_read_packet
                          DCD      tu_fifo_get_read_info
                          DCD      tu_fifo_advance_read_pointer
                          DCD      pipe_write_packet
                  |symbol_number.22|
000064  68616e64          DCB      0x68,0x61,0x6e,0x64
000068  6c655f78          DCB      0x6c,0x65,0x5f,0x78
00006c  6665725f          DCB      0x66,0x65,0x72,0x5f
000070  6f757400          DCB      0x6f,0x75,0x74,0x00
                  |symbol_number.23|
000074  65647074          DCB      0x65,0x64,0x70,0x74
000078  305f7866          DCB      0x30,0x5f,0x78,0x66
00007c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.24|
00007f  70                DCB      0x70
000080  726f6365          DCB      0x72,0x6f,0x63,0x65
000084  73735f65          DCB      0x73,0x73,0x5f,0x65
000088  703000            DCB      0x70,0x30,0x00
                  |symbol_number.25|
00008b  64                DCB      0x64
00008c  63645f65          DCB      0x63,0x64,0x5f,0x65
000090  6470745f          DCB      0x64,0x70,0x74,0x5f
000094  6f70656e          DCB      0x6f,0x70,0x65,0x6e
000098  00                DCB      0x00
                  |symbol_number.26|
000099  646364            DCB      0x64,0x63,0x64
00009c  5f656470          DCB      0x5f,0x65,0x64,0x70
0000a0  745f7866          DCB      0x74,0x5f,0x78,0x66
0000a4  65725f66          DCB      0x65,0x72,0x5f,0x66
0000a8  69666f00          DCB      0x69,0x66,0x6f,0x00
                  |symbol_number.27|
0000ac  6463645f          DCB      0x64,0x63,0x64,0x5f
0000b0  65647074          DCB      0x65,0x64,0x70,0x74
0000b4  5f737461          DCB      0x5f,0x73,0x74,0x61
0000b8  6c6c00            DCB      0x6c,0x6c,0x00

                          AREA ||i.__ARM_common_ctz||, COMGROUP=__ARM_common_ctz, CODE, READONLY, ALIGN=2

                  __ARM_common_ctz PROC
000000  e1a02800          LSL      r2,r0,#16
000004  e3520000          CMP      r2,#0
000008  e3a01020          MOV      r1,#0x20
00000c  11a00002          MOVNE    r0,r2
000010  12411010          SUBNE    r1,r1,#0x10
000014  e1a02400          LSL      r2,r0,#8
000018  e3520000          CMP      r2,#0
00001c  11a00002          MOVNE    r0,r2
000020  12411008          SUBNE    r1,r1,#8
000024  e1a02200          LSL      r2,r0,#4
000028  e3520000          CMP      r2,#0
00002c  11a00002          MOVNE    r0,r2
000030  12411004          SUBNE    r1,r1,#4
000034  e1a02100          LSL      r2,r0,#2
000038  e3520000          CMP      r2,#0
00003c  11a00002          MOVNE    r0,r2
000040  12411002          SUBNE    r1,r1,#2
000044  e1a02080          LSL      r2,r0,#1
000048  e3520000          CMP      r2,#0
00004c  12411001          SUBNE    r1,r1,#1
000050  11a00002          MOVNE    r0,r2
000054  e0410fa0          SUB      r0,r1,r0,LSR #31
000058  e12fff1e          BX       lr
                          ENDP


                          AREA ||i.__ARM_common_memcpy1_8||, COMGROUP=__ARM_common_memcpy1_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memcpy1_8 PROC
000000  e5d12000          LDRB     r2,[r1,#0]
000004  e5c02000          STRB     r2,[r0,#0]
000008  e5d13001          LDRB     r3,[r1,#1]
00000c  e5c03001          STRB     r3,[r0,#1]
000010  e5d1c002          LDRB     r12,[r1,#2]
000014  e5c0c002          STRB     r12,[r0,#2]
000018  e5d12003          LDRB     r2,[r1,#3]
00001c  e5c02003          STRB     r2,[r0,#3]
000020  e5d13004          LDRB     r3,[r1,#4]
000024  e5c03004          STRB     r3,[r0,#4]
000028  e5d1c005          LDRB     r12,[r1,#5]
00002c  e5c0c005          STRB     r12,[r0,#5]
000030  e5d12006          LDRB     r2,[r1,#6]
000034  e5c02006          STRB     r2,[r0,#6]
000038  e5d13007          LDRB     r3,[r1,#7]
00003c  e5c03007          STRB     r3,[r0,#7]
000040  e12fff1e          BX       lr
                          ENDP

