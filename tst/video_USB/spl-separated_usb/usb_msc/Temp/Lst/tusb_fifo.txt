; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\tusb_fifo.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\tusb_fifo.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\tusb_fifo.crf ..\tinyusb\src\common\tusb_fifo.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tu_fifo_config PROC
;;;67     
;;;68     bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
000000  e3520902          CMP      r2,#0x8000
;;;69     {
;;;70       // Limit index space to 2*depth - this allows for a fast "modulo" calculation
;;;71       // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
;;;72       // only if overflow happens once (important for unsupervised DMA applications)
;;;73       if (depth > 0x8000) return false;
000004  83a00000          MOVHI    r0,#0
;;;74     
;;;75       _ff_lock(f->mutex_wr);
;;;76       _ff_lock(f->mutex_rd);
;;;77     
;;;78       f->buffer       = (uint8_t*) buffer;
;;;79       f->depth        = depth;
;;;80       f->item_size    = (uint16_t) (item_size & 0x7FFF);
;;;81       f->overwritable = overwritable;
;;;82       f->rd_idx       = 0;
;;;83       f->wr_idx       = 0;
;;;84     
;;;85       _ff_unlock(f->mutex_wr);
;;;86       _ff_unlock(f->mutex_rd);
;;;87     
;;;88       return true;
;;;89     }
000008  812fff1e          BXHI     lr
00000c  e92d47f0          PUSH     {r4-r10,lr}           ;69
000010  e1a04000          MOV      r4,r0                 ;69
000014  e590000c          LDR      r0,[r0,#0xc]          ;75
000018  e59f6840          LDR      r6,|L1.2144|
00001c  e59d9020          LDR      r9,[sp,#0x20]         ;75
000020  e3500000          CMP      r0,#0                 ;75
000024  e1a08001          MOV      r8,r1                 ;69
000028  e1a07003          MOV      r7,r3                 ;69
00002c  e1a05002          MOV      r5,r2                 ;69
000030  11a01006          MOVNE    r1,r6                 ;69
000034  1bfffffe          BLNE     os_mut_wait
000038  e5940010          LDR      r0,[r4,#0x10]         ;76
00003c  e3500000          CMP      r0,#0                 ;76
000040  11a01006          MOVNE    r1,r6                 ;76
000044  1bfffffe          BLNE     os_mut_wait
000048  e1d410b6          LDRH     r1,[r4,#6]            ;80
00004c  e3c72902          BIC      r2,r7,#0x8000         ;80
000050  e5848000          STR      r8,[r4,#0]            ;80
000054  e2011902          AND      r1,r1,#0x8000         ;80
000058  e1811002          ORR      r1,r1,r2              ;80
00005c  e1c410b6          STRH     r1,[r4,#6]            ;80
000060  e1c450b4          STRH     r5,[r4,#4]            ;79
000064  e5d41007          LDRB     r1,[r4,#7]            ;81
000068  e3a00000          MOV      r0,#0                 ;82
00006c  e1c400ba          STRH     r0,[r4,#0xa]          ;82
000070  e1c400b8          STRH     r0,[r4,#8]            ;83
000074  e3c10080          BIC      r0,r1,#0x80           ;81
000078  e1800389          ORR      r0,r0,r9,LSL #7       ;81
00007c  e5c40007          STRB     r0,[r4,#7]            ;81
000080  e594000c          LDR      r0,[r4,#0xc]          ;85
000084  e3500000          CMP      r0,#0                 ;85
000088  1bfffffe          BLNE     os_mut_release
00008c  e5940010          LDR      r0,[r4,#0x10]         ;86
000090  e3500000          CMP      r0,#0                 ;86
000094  1bfffffe          BLNE     os_mut_release
000098  e3a00001          MOV      r0,#1                 ;88
00009c  e8bd87f0          POP      {r4-r10,pc}
;;;90     
                          ENDP

                  _tu_fifo_peek_n PROC
;;;437    // Must be protected by mutexes since in case of an overflow read pointer gets modified
;;;438    static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
0000a0  e92d4ff0          PUSH     {r4-r11,lr}
;;;439    {
0000a4  e24dd00c          SUB      sp,sp,#0xc
0000a8  e1a07000          MOV      r7,r0
0000ac  e59d0030          LDR      r0,[sp,#0x30]
;;;440      uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
0000b0  e1d740b4          LDRH     r4,[r7,#4]
0000b4  e1530000          CMP      r3,r0
0000b8  e1a05002          MOV      r5,r2                 ;439
0000bc  e0432000          SUB      r2,r3,r0              ;439
0000c0  31a06004          MOVCC    r6,r4                 ;439
0000c4  30822086          ADDCC    r2,r2,r6,LSL #1       ;439
0000c8  e1a02802          LSL      r2,r2,#16             ;439
0000cc  e1a02822          LSR      r2,r2,#16             ;439
;;;441    
;;;442      // nothing to peek
;;;443      if ( cnt == 0 ) return 0;
0000d0  e3520000          CMP      r2,#0
0000d4  e59dc034          LDR      r12,[sp,#0x34]        ;439
0000d8  03a00000          MOVEQ    r0,#0
0000dc  028dd00c          ADDEQ    sp,sp,#0xc            ;439
;;;444    
;;;445      // Check overflow and correct if required
;;;446      if ( cnt > f->depth )
;;;447      {
;;;448        rd_idx = _ff_correct_read_index(f, wr_idx);
;;;449        cnt = f->depth;
;;;450      }
;;;451    
;;;452      // Check if we can read something at and after offset - if too less is available we read what remains
;;;453      if ( cnt < n ) n = cnt;
;;;454    
;;;455      uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
;;;456    
;;;457      // Peek data
;;;458      _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
;;;459    
;;;460      return n;
;;;461    }
0000e0  08bd8ff0          POPEQ    {r4-r11,pc}
0000e4  e1540002          CMP      r4,r2                 ;446
0000e8  2a000008          BCS      |L1.272|
0000ec  e1530004          CMP      r3,r4                 ;446
0000f0  20430004          SUBCS    r0,r3,r4              ;446
0000f4  21a00800          LSLCS    r0,r0,#16             ;446
0000f8  21a00820          LSRCS    r0,r0,#16             ;446
0000fc  30840003          ADDCC    r0,r4,r3              ;446
000100  33c00801          BICCC    r0,r0,#0x10000        ;446
000104  e1c700ba          STRH     r0,[r7,#0xa]          ;446
000108  e1a02804          LSL      r2,r4,#16             ;449
00010c  e1a02822          LSR      r2,r2,#16             ;449
                  |L1.272|
000110  e1520005          CMP      r2,r5                 ;453
000114  31a05002          MOVCC    r5,r2                 ;453
000118  e1a02804          LSL      r2,r4,#16             ;455
00011c  e1a02822          LSR      r2,r2,#16             ;455
000120  e1500002          CMP      r0,r2                 ;455
000124  e1a03002          MOV      r3,r2                 ;455
000128  3a000004          BCC      |L1.320|
                  |L1.300|
00012c  e0400002          SUB      r0,r0,r2              ;453
000130  e1a00800          LSL      r0,r0,#16             ;453
000134  e1a00820          LSR      r0,r0,#16             ;453
000138  e1500002          CMP      r0,r2                 ;453
00013c  2afffffa          BCS      |L1.300|
                  |L1.320|
000140  e1a04001          MOV      r4,r1                 ;458
000144  e1d710b6          LDRH     r1,[r7,#6]            ;458
000148  e0432000          SUB      r2,r3,r0              ;458
00014c  e1a02802          LSL      r2,r2,#16             ;458
000150  e3c11902          BIC      r1,r1,#0x8000         ;458
000154  e1a02822          LSR      r2,r2,#16             ;458
000158  e0080291          MUL      r8,r1,r2              ;458
00015c  e0453002          SUB      r3,r5,r2              ;458
000160  e5976000          LDR      r6,[r7,#0]            ;458
000164  e0030391          MUL      r3,r1,r3              ;458
000168  e1a09808          LSL      r9,r8,#16             ;458
00016c  e0266190          MLA      r6,r0,r1,r6           ;458
000170  e1a08803          LSL      r8,r3,#16             ;458
000174  e35c0000          CMP      r12,#0                ;458
000178  e1a09829          LSR      r9,r9,#16             ;458
00017c  e1a08828          LSR      r8,r8,#16             ;458
000180  0a000002          BEQ      |L1.400|
000184  e35c0001          CMP      r12,#1                ;458
000188  0a00000f          BEQ      |L1.460|
00018c  ea00009f          B        |L1.1040|
                  |L1.400|
000190  e1550002          CMP      r5,r2                 ;458
000194  8a000003          BHI      |L1.424|
000198  e0020591          MUL      r2,r1,r5              ;458
00019c  e1a01006          MOV      r1,r6                 ;458
0001a0  e1a00004          MOV      r0,r4                 ;458
0001a4  ea000006          B        |L1.452|
                  |L1.424|
0001a8  e1a02009          MOV      r2,r9                 ;458
0001ac  e1a01006          MOV      r1,r6                 ;458
0001b0  e1a00004          MOV      r0,r4                 ;458
0001b4  ebfffffe          BL       __aeabi_memcpy
0001b8  e5971000          LDR      r1,[r7,#0]            ;458
0001bc  e0840009          ADD      r0,r4,r9              ;458
0001c0  e1a02008          MOV      r2,r8                 ;458
                  |L1.452|
0001c4  ebfffffe          BL       __aeabi_memcpy
0001c8  ea000090          B        |L1.1040|
                  |L1.460|
0001cc  e1550002          CMP      r5,r2                 ;458
0001d0  8a000019          BHI      |L1.572|
0001d4  e0000591          MUL      r0,r1,r5              ;458
0001d8  e1a01006          MOV      r1,r6                 ;458
0001dc  e1a03800          LSL      r3,r0,#16             ;458
0001e0  e1a03823          LSR      r3,r3,#16             ;458
0001e4  e1a00123          LSR      r0,r3,#2              ;458
0001e8  e2402001          SUB      r2,r0,#1              ;458
0001ec  e3720001          CMN      r2,#1                 ;458
0001f0  da00000e          BLE      |L1.560|
                  |L1.500|
0001f4  e3a0c000          MOV      r12,#0                ;458
0001f8  e5d18000          LDRB     r8,[r1,#0]            ;458
0001fc  e1a0000c          MOV      r0,r12                ;458
000200  e5d1c001          LDRB     r12,[r1,#1]           ;458
000204  e5d17002          LDRB     r7,[r1,#2]            ;458
000208  e5d16003          LDRB     r6,[r1,#3]            ;458
00020c  e1800008          ORR      r0,r0,r8              ;458
000210  e180040c          ORR      r0,r0,r12,LSL #8      ;458
000214  e1800807          ORR      r0,r0,r7,LSL #16      ;458
000218  e2422001          SUB      r2,r2,#1              ;458
00021c  e1800c06          ORR      r0,r0,r6,LSL #24      ;458
000220  e3720001          CMN      r2,#1                 ;458
000224  e5840000          STR      r0,[r4,#0]            ;458
000228  e2811004          ADD      r1,r1,#4              ;458
00022c  cafffff0          BGT      |L1.500|
                  |L1.560|
000230  e2132003          ANDS     r2,r3,#3              ;458
000234  0a000075          BEQ      |L1.1040|
000238  ea00006e          B        |L1.1016|
                  |L1.572|
00023c  e3c9e003          BIC      lr,r9,#3              ;458
000240  e1a0012e          LSR      r0,lr,#2              ;458
000244  e2400001          SUB      r0,r0,#1              ;458
000248  e3700001          CMN      r0,#1                 ;458
00024c  e1a01006          MOV      r1,r6                 ;458
000250  e58de004          STR      lr,[sp,#4]            ;458
000254  da00000e          BLE      |L1.660|
                  |L1.600|
000258  e5d1b000          LDRB     r11,[r1,#0]           ;458
00025c  e3a03000          MOV      r3,#0                 ;458
000260  e5d1c001          LDRB     r12,[r1,#1]           ;458
000264  e1a02003          MOV      r2,r3                 ;458
000268  e5d1a002          LDRB     r10,[r1,#2]           ;458
00026c  e5d13003          LDRB     r3,[r1,#3]            ;458
000270  e182200b          ORR      r2,r2,r11             ;458
000274  e182240c          ORR      r2,r2,r12,LSL #8      ;458
000278  e182280a          ORR      r2,r2,r10,LSL #16     ;458
00027c  e2400001          SUB      r0,r0,#1              ;458
000280  e1822c03          ORR      r2,r2,r3,LSL #24      ;458
000284  e3700001          CMN      r0,#1                 ;458
000288  e5842000          STR      r2,[r4,#0]            ;458
00028c  e2811004          ADD      r1,r1,#4              ;458
000290  cafffff0          BGT      |L1.600|
                  |L1.660|
000294  e21e2003          ANDS     r2,lr,#3              ;458
000298  0a000005          BEQ      |L1.692|
00029c  e3a00000          MOV      r0,#0                 ;458
0002a0  e58d0000          STR      r0,[sp,#0]            ;458
0002a4  e1a0000d          MOV      r0,sp                 ;458
0002a8  ebfffffe          BL       __aeabi_memcpy
0002ac  e59d1000          LDR      r1,[sp,#0]            ;458
0002b0  e5841000          STR      r1,[r4,#0]            ;458
                  |L1.692|
0002b4  e59d1004          LDR      r1,[sp,#4]            ;458
0002b8  e2190003          ANDS     r0,r9,#3              ;458
0002bc  e0862001          ADD      r2,r6,r1              ;458
0002c0  05971000          LDREQ    r1,[r7,#0]            ;458
0002c4  0a000034          BEQ      |L1.924|
0002c8  e2601004          RSB      r1,r0,#4              ;458
0002cc  e1580001          CMP      r8,r1                 ;458
0002d0  31a01008          MOVCC    r1,r8                 ;458
0002d4  e20160ff          AND      r6,r1,#0xff           ;458
0002d8  e2501000          SUBS     r1,r0,#0              ;458
0002dc  e240c001          SUB      r12,r0,#1             ;458
0002e0  e3a00000          MOV      r0,#0                 ;458
0002e4  e58d0000          STR      r0,[sp,#0]            ;458
0002e8  e0480006          SUB      r0,r8,r6              ;458
0002ec  e1a08800          LSL      r8,r0,#16             ;458
0002f0  e1a0300d          MOV      r3,sp                 ;458
0002f4  e1a08828          LSR      r8,r8,#16             ;458
0002f8  da000010          BLE      |L1.832|
0002fc  e31c0001          TST      r12,#1                ;458
000300  e2421001          SUB      r1,r2,#1              ;458
000304  e2430001          SUB      r0,r3,#1              ;458
000308  1a000001          BNE      |L1.788|
00030c  e5f12001          LDRB     r2,[r1,#1]!           ;458
000310  e5e02001          STRB     r2,[r0,#1]!           ;458
                  |L1.788|
000314  e28c2001          ADD      r2,r12,#1             ;458
000318  e1b020c2          ASRS     r2,r2,#1              ;458
00031c  0a000005          BEQ      |L1.824|
                  |L1.800|
000320  e5d19001          LDRB     r9,[r1,#1]            ;458
000324  e2522001          SUBS     r2,r2,#1              ;458
000328  e5c09001          STRB     r9,[r0,#1]            ;458
00032c  e5f19002          LDRB     r9,[r1,#2]!           ;458
000330  e5e09002          STRB     r9,[r0,#2]!           ;458
000334  1afffff9          BNE      |L1.800|
                  |L1.824|
000338  e083000c          ADD      r0,r3,r12             ;458
00033c  e2803001          ADD      r3,r0,#1              ;458
                  |L1.832|
000340  e5971000          LDR      r1,[r7,#0]            ;458
000344  e3560000          CMP      r6,#0                 ;458
000348  e246c001          SUB      r12,r6,#1             ;458
00034c  da000010          BLE      |L1.916|
000350  e31c0001          TST      r12,#1                ;458
000354  e2412001          SUB      r2,r1,#1              ;458
000358  e2430001          SUB      r0,r3,#1              ;458
00035c  1a000001          BNE      |L1.872|
000360  e5f23001          LDRB     r3,[r2,#1]!           ;458
000364  e5e03001          STRB     r3,[r0,#1]!           ;458
                  |L1.872|
000368  e28c3001          ADD      r3,r12,#1             ;458
00036c  e1b030c3          ASRS     r3,r3,#1              ;458
000370  0a000005          BEQ      |L1.908|
                  |L1.884|
000374  e5d26001          LDRB     r6,[r2,#1]            ;458
000378  e2533001          SUBS     r3,r3,#1              ;458
00037c  e5c06001          STRB     r6,[r0,#1]            ;458
000380  e5f26002          LDRB     r6,[r2,#2]!           ;458
000384  e5e06002          STRB     r6,[r0,#2]!           ;458
000388  1afffff9          BNE      |L1.884|
                  |L1.908|
00038c  e081000c          ADD      r0,r1,r12             ;458
000390  e2801001          ADD      r1,r0,#1              ;458
                  |L1.916|
000394  e59d2000          LDR      r2,[sp,#0]            ;458
000398  e5842000          STR      r2,[r4,#0]            ;458
                  |L1.924|
00039c  e3580000          CMP      r8,#0                 ;458
0003a0  0a00001a          BEQ      |L1.1040|
0003a4  e1a00128          LSR      r0,r8,#2              ;458
0003a8  e2402001          SUB      r2,r0,#1              ;458
0003ac  e3720001          CMN      r2,#1                 ;458
0003b0  da00000e          BLE      |L1.1008|
                  |L1.948|
0003b4  e5d17000          LDRB     r7,[r1,#0]            ;458
0003b8  e3a03000          MOV      r3,#0                 ;458
0003bc  e5d16001          LDRB     r6,[r1,#1]            ;458
0003c0  e1a00003          MOV      r0,r3                 ;458
0003c4  e5d13002          LDRB     r3,[r1,#2]            ;458
0003c8  e5d1c003          LDRB     r12,[r1,#3]           ;458
0003cc  e1800007          ORR      r0,r0,r7              ;458
0003d0  e1800406          ORR      r0,r0,r6,LSL #8       ;458
0003d4  e1800803          ORR      r0,r0,r3,LSL #16      ;458
0003d8  e2422001          SUB      r2,r2,#1              ;458
0003dc  e1800c0c          ORR      r0,r0,r12,LSL #24     ;458
0003e0  e3720001          CMN      r2,#1                 ;458
0003e4  e5840000          STR      r0,[r4,#0]            ;458
0003e8  e2811004          ADD      r1,r1,#4              ;458
0003ec  cafffff0          BGT      |L1.948|
                  |L1.1008|
0003f0  e2182003          ANDS     r2,r8,#3              ;458
0003f4  0a000005          BEQ      |L1.1040|
                  |L1.1016|
0003f8  e3a00000          MOV      r0,#0                 ;458
0003fc  e58d0000          STR      r0,[sp,#0]            ;458
000400  e1a0000d          MOV      r0,sp                 ;458
000404  ebfffffe          BL       __aeabi_memcpy
000408  e59d0000          LDR      r0,[sp,#0]            ;458
00040c  e5840000          STR      r0,[r4,#0]            ;458
                  |L1.1040|
000410  e1a00005          MOV      r0,r5                 ;460
000414  e28dd00c          ADD      sp,sp,#0xc            ;460
000418  e8bd8ff0          POP      {r4-r11,pc}
;;;462    
                          ENDP

                  _tu_fifo_write_n PROC
;;;463    static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
00041c  e92d4ff0          PUSH     {r4-r11,lr}
;;;464    {
000420  e1b05002          MOVS     r5,r2
000424  e24dd00c          SUB      sp,sp,#0xc
000428  e1a07000          MOV      r7,r0
00042c  e1a0b003          MOV      r11,r3
000430  e1a06001          MOV      r6,r1
;;;465      if ( n == 0 ) return 0;
000434  03a00000          MOVEQ    r0,#0
000438  028dd00c          ADDEQ    sp,sp,#0xc            ;464
;;;466    
;;;467      _ff_lock(f->mutex_wr);
;;;468    
;;;469      uint16_t wr_idx = f->wr_idx;
;;;470      uint16_t rd_idx = f->rd_idx;
;;;471    
;;;472      uint8_t const* buf8 = (uint8_t const*) data;
;;;473    
;;;474      TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
;;;475                           rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);
;;;476    
;;;477      if ( !f->overwritable )
;;;478      {
;;;479        // limit up to full
;;;480        uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
;;;481        n = tu_min16(n, remain);
;;;482      }
;;;483      else
;;;484      {
;;;485        // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
;;;486        // oldest data in fifo i.e at read pointer data will be overwritten
;;;487        // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
;;;488        // Since it would end up in a race condition with read functions!
;;;489        if ( n >= f->depth )
;;;490        {
;;;491          // Only copy last part
;;;492          if ( copy_mode == TU_FIFO_COPY_INC )
;;;493          {
;;;494            buf8 += (n - f->depth) * f->item_size;
;;;495          }else
;;;496          {
;;;497            // TODO should read from hw fifo to discard data, however reading an odd number could
;;;498            // accidentally discard data.
;;;499          }
;;;500    
;;;501          n = f->depth;
;;;502    
;;;503          // We start writing at the read pointer's position since we fill the whole buffer
;;;504          wr_idx = rd_idx;
;;;505        }
;;;506        else
;;;507        {
;;;508          uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
;;;509          if (overflowable_count + n >= 2*f->depth)
;;;510          {
;;;511            // Double overflowed
;;;512            // Index is bigger than the allowed range [0,2*depth)
;;;513            // re-position write index to have a full fifo after pushed
;;;514            wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
;;;515    
;;;516            // TODO we should also shift out n bytes from read index since we avoid changing rd index !!
;;;517            // However memmove() is expensive due to actual copying + wrapping consideration.
;;;518            // Also race condition could happen anyway if read() is invoke while moving result in corrupted memory
;;;519            // currently deliberately not implemented --> result in incorrect data read back
;;;520          }else
;;;521          {
;;;522            // normal + single overflowed:
;;;523            // Index is in the range of [0,2*depth) and thus detect and recoverable. Recovering is handled in read()
;;;524            // Therefore we just increase write index
;;;525            // we will correct (re-position) read index later on in fifo_read() function
;;;526          }
;;;527        }
;;;528      }
;;;529    
;;;530      if (n)
;;;531      {
;;;532        uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
;;;533    
;;;534        TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);
;;;535    
;;;536        // Write data
;;;537        _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
;;;538    
;;;539        // Advance index
;;;540        f->wr_idx = advance_index(f->depth, wr_idx, n);
;;;541    
;;;542        TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
;;;543      }
;;;544    
;;;545      _ff_unlock(f->mutex_wr);
;;;546    
;;;547      return n;
;;;548    }
00043c  08bd8ff0          POPEQ    {r4-r11,pc}
000440  e597000c          LDR      r0,[r7,#0xc]          ;467
000444  e3500000          CMP      r0,#0                 ;467
000448  159f1410          LDRNE    r1,|L1.2144|
00044c  1bfffffe          BLNE     os_mut_wait
000450  e5d70007          LDRB     r0,[r7,#7]            ;477
000454  e1d740b8          LDRH     r4,[r7,#8]            ;469
000458  e3100080          TST      r0,#0x80              ;477
00045c  e1d710ba          LDRH     r1,[r7,#0xa]          ;470
000460  e1d700b4          LDRH     r0,[r7,#4]            ;489
000464  0a000004          BEQ      |L1.1148|
000468  e1500005          CMP      r0,r5                 ;489
00046c  8a000036          BHI      |L1.1356|
000470  e35b0000          CMP      r11,#0                ;492
000474  1a000014          BNE      |L1.1228|
000478  ea00000f          B        |L1.1212|
                  |L1.1148|
00047c  e1540001          CMP      r4,r1                 ;492
000480  20441001          SUBCS    r1,r4,r1              ;492
000484  30442001          SUBCC    r2,r4,r1              ;492
000488  31a01000          MOVCC    r1,r0                 ;492
00048c  30821081          ADDCC    r1,r2,r1,LSL #1       ;492
000490  e1a01801          LSL      r1,r1,#16             ;492
000494  e1a01821          LSR      r1,r1,#16             ;492
000498  e1500001          CMP      r0,r1                 ;492
00049c  80400001          SUBHI    r0,r0,r1              ;492
0004a0  93a00000          MOVLS    r0,#0                 ;492
0004a4  e1a00800          LSL      r0,r0,#16             ;492
0004a8  e1a00820          LSR      r0,r0,#16             ;492
0004ac  e1550000          CMP      r5,r0                 ;481
0004b0  31a00005          MOVCC    r0,r5                 ;481
0004b4  e1a05000          MOV      r5,r0                 ;481
0004b8  ea000005          B        |L1.1236|
                  |L1.1212|
0004bc  e1d720b6          LDRH     r2,[r7,#6]            ;494
0004c0  e0453000          SUB      r3,r5,r0              ;494
0004c4  e3c22902          BIC      r2,r2,#0x8000         ;494
0004c8  e0266293          MLA      r6,r3,r2,r6           ;494
                  |L1.1228|
0004cc  e1a05000          MOV      r5,r0                 ;501
0004d0  e1a04001          MOV      r4,r1                 ;504
                  |L1.1236|
0004d4  e3550000          CMP      r5,#0                 ;530
0004d8  0a0000da          BEQ      |L1.2120|
                  |L1.1244|
0004dc  e1d710b4          LDRH     r1,[r7,#4]            ;532
0004e0  e1a00004          MOV      r0,r4                 ;532
0004e4  e1540001          CMP      r4,r1                 ;532
0004e8  3a000004          BCC      |L1.1280|
                  |L1.1260|
0004ec  e0400001          SUB      r0,r0,r1              ;532
0004f0  e1a00800          LSL      r0,r0,#16             ;532
0004f4  e1a00820          LSR      r0,r0,#16             ;532
0004f8  e1500001          CMP      r0,r1                 ;532
0004fc  2afffffa          BCS      |L1.1260|
                  |L1.1280|
000500  e0412000          SUB      r2,r1,r0              ;532
000504  e1d710b6          LDRH     r1,[r7,#6]            ;532
000508  e1a02802          LSL      r2,r2,#16             ;532
00050c  e1a02822          LSR      r2,r2,#16             ;532
000510  e3c11902          BIC      r1,r1,#0x8000         ;532
000514  e5978000          LDR      r8,[r7,#0]            ;532
000518  e0453002          SUB      r3,r5,r2              ;532
00051c  e00c0291          MUL      r12,r1,r2             ;532
000520  e0030391          MUL      r3,r1,r3              ;532
000524  e0298190          MLA      r9,r0,r1,r8           ;532
000528  e1a0a80c          LSL      r10,r12,#16           ;532
00052c  e1a08803          LSL      r8,r3,#16             ;532
000530  e35b0000          CMP      r11,#0                ;532
000534  e1a0a82a          LSR      r10,r10,#16           ;532
000538  e1a08828          LSR      r8,r8,#16             ;532
00053c  0a00001e          BEQ      |L1.1468|
000540  e35b0001          CMP      r11,#1                ;532
000544  0a00002b          BEQ      |L1.1528|
000548  ea0000af          B        |L1.2060|
                  |L1.1356|
00054c  e1510004          CMP      r1,r4                 ;532
000550  e1a03001          MOV      r3,r1                 ;532
000554  90442003          SUBLS    r2,r4,r3              ;532
000558  80443003          SUBHI    r3,r4,r3              ;532
00055c  81a02000          MOVHI    r2,r0                 ;532
000560  80832082          ADDHI    r2,r3,r2,LSL #1       ;532
000564  e1a02802          LSL      r2,r2,#16             ;532
000568  e1a02822          LSR      r2,r2,#16             ;532
00056c  e0822005          ADD      r2,r2,r5              ;509
000570  e1520080          CMP      r2,r0,LSL #1          ;509
000574  3affffd8          BCC      |L1.1244|
000578  e0402005          SUB      r2,r0,r5              ;514
00057c  e1a02802          LSL      r2,r2,#16             ;514
000580  e1a02822          LSR      r2,r2,#16             ;514
000584  e0822001          ADD      r2,r2,r1              ;514
000588  e3c24801          BIC      r4,r2,#0x10000        ;514
00058c  e1540001          CMP      r4,r1                 ;514
000590  3a000001          BCC      |L1.1436|
000594  e1540080          CMP      r4,r0,LSL #1          ;514
000598  3affffcf          BCC      |L1.1244|
                  |L1.1436|
00059c  e2601000          RSB      r1,r0,#0              ;514
0005a0  e3a00801          MOV      r0,#0x10000           ;514
0005a4  e0800081          ADD      r0,r0,r1,LSL #1       ;514
0005a8  e1a00800          LSL      r0,r0,#16             ;514
0005ac  e1a00820          LSR      r0,r0,#16             ;514
0005b0  e0800004          ADD      r0,r0,r4              ;514
0005b4  e3c04801          BIC      r4,r0,#0x10000        ;514
0005b8  eaffffc7          B        |L1.1244|
                  |L1.1468|
0005bc  e1550002          CMP      r5,r2                 ;514
0005c0  8a000004          BHI      |L1.1496|
0005c4  e0020591          MUL      r2,r1,r5              ;514
0005c8  e1a01006          MOV      r1,r6                 ;514
0005cc  e1a00009          MOV      r0,r9                 ;514
0005d0  ebfffffe          BL       __aeabi_memcpy
0005d4  ea00008c          B        |L1.2060|
                  |L1.1496|
0005d8  e1a0200a          MOV      r2,r10                ;514
0005dc  e1a01006          MOV      r1,r6                 ;514
0005e0  e1a00009          MOV      r0,r9                 ;514
0005e4  ebfffffe          BL       __aeabi_memcpy
0005e8  e5970000          LDR      r0,[r7,#0]            ;514
0005ec  e086100a          ADD      r1,r6,r10             ;514
0005f0  e1a02008          MOV      r2,r8                 ;514
0005f4  ea000083          B        |L1.2056|
                  |L1.1528|
0005f8  e1550002          CMP      r5,r2                 ;514
0005fc  8a000017          BHI      |L1.1632|
000600  e0010195          MUL      r1,r5,r1              ;514
000604  e1a00009          MOV      r0,r9                 ;514
000608  e1a0c801          LSL      r12,r1,#16            ;514
00060c  e1a0c82c          LSR      r12,r12,#16           ;514
000610  e1a0112c          LSR      r1,r12,#2             ;514
000614  e2413001          SUB      r3,r1,#1              ;514
000618  e3730001          CMN      r3,#1                 ;514
00061c  da00000c          BLE      |L1.1620|
                  |L1.1568|
000620  e5962000          LDR      r2,[r6,#0]            ;514
000624  e1a01000          MOV      r1,r0                 ;514
000628  e1a08422          LSR      r8,r2,#8              ;514
00062c  e5c12000          STRB     r2,[r1,#0]            ;514
000630  e1a09822          LSR      r9,r2,#16             ;514
000634  e5c18001          STRB     r8,[r1,#1]            ;514
000638  e1a02c22          LSR      r2,r2,#24             ;514
00063c  e2433001          SUB      r3,r3,#1              ;514
000640  e5c19002          STRB     r9,[r1,#2]            ;514
000644  e3730001          CMN      r3,#1                 ;514
000648  e2800004          ADD      r0,r0,#4              ;514
00064c  e5c12003          STRB     r2,[r1,#3]            ;514
000650  cafffff2          BGT      |L1.1568|
                  |L1.1620|
000654  e21c2003          ANDS     r2,r12,#3             ;514
000658  1a000067          BNE      |L1.2044|
00065c  ea00006a          B        |L1.2060|
                  |L1.1632|
000660  e3cae003          BIC      lr,r10,#3             ;514
000664  e1a0112e          LSR      r1,lr,#2              ;514
000668  e2412001          SUB      r2,r1,#1              ;514
00066c  e3720001          CMN      r2,#1                 ;514
000670  e1a00009          MOV      r0,r9                 ;514
000674  e58de000          STR      lr,[sp,#0]            ;514
000678  da00000c          BLE      |L1.1712|
                  |L1.1660|
00067c  e5963000          LDR      r3,[r6,#0]            ;514
000680  e1a01000          MOV      r1,r0                 ;514
000684  e1a0c423          LSR      r12,r3,#8             ;514
000688  e5c13000          STRB     r3,[r1,#0]            ;514
00068c  e1a0b823          LSR      r11,r3,#16            ;514
000690  e5c1c001          STRB     r12,[r1,#1]           ;514
000694  e1a03c23          LSR      r3,r3,#24             ;514
000698  e2422001          SUB      r2,r2,#1              ;514
00069c  e5c1b002          STRB     r11,[r1,#2]           ;514
0006a0  e3720001          CMN      r2,#1                 ;514
0006a4  e2800004          ADD      r0,r0,#4              ;514
0006a8  e5c13003          STRB     r3,[r1,#3]            ;514
0006ac  cafffff2          BGT      |L1.1660|
                  |L1.1712|
0006b0  e21e2003          ANDS     r2,lr,#3              ;514
0006b4  0a000003          BEQ      |L1.1736|
0006b8  e5961000          LDR      r1,[r6,#0]            ;514
0006bc  e58d1004          STR      r1,[sp,#4]            ;514
0006c0  e28d1004          ADD      r1,sp,#4              ;514
0006c4  ebfffffe          BL       __aeabi_memcpy
                  |L1.1736|
0006c8  e59d1000          LDR      r1,[sp,#0]            ;514
0006cc  e21a0003          ANDS     r0,r10,#3             ;514
0006d0  05970000          LDREQ    r0,[r7,#0]            ;514
0006d4  e0892001          ADD      r2,r9,r1              ;514
0006d8  0a000032          BEQ      |L1.1960|
0006dc  e2601004          RSB      r1,r0,#4              ;514
0006e0  e1580001          CMP      r8,r1                 ;514
0006e4  31a01008          MOVCC    r1,r8                 ;514
0006e8  e201c0ff          AND      r12,r1,#0xff          ;514
0006ec  e5961000          LDR      r1,[r6,#0]            ;514
0006f0  e2403001          SUB      r3,r0,#1              ;514
0006f4  e1a0900d          MOV      r9,sp                 ;514
0006f8  e58d1000          STR      r1,[sp,#0]            ;514
0006fc  e048100c          SUB      r1,r8,r12             ;514
000700  e1a08801          LSL      r8,r1,#16             ;514
000704  e3500000          CMP      r0,#0                 ;514
000708  e1a08828          LSR      r8,r8,#16             ;514
00070c  da000010          BLE      |L1.1876|
000710  e3130001          TST      r3,#1                 ;514
000714  e2490001          SUB      r0,r9,#1              ;514
000718  e2421001          SUB      r1,r2,#1              ;514
00071c  1a000001          BNE      |L1.1832|
000720  e5f02001          LDRB     r2,[r0,#1]!           ;514
000724  e5e12001          STRB     r2,[r1,#1]!           ;514
                  |L1.1832|
000728  e2832001          ADD      r2,r3,#1              ;514
00072c  e1b020c2          ASRS     r2,r2,#1              ;514
000730  0a000005          BEQ      |L1.1868|
                  |L1.1844|
000734  e5d0a001          LDRB     r10,[r0,#1]           ;514
000738  e2522001          SUBS     r2,r2,#1              ;514
00073c  e5c1a001          STRB     r10,[r1,#1]           ;514
000740  e5f0a002          LDRB     r10,[r0,#2]!          ;514
000744  e5e1a002          STRB     r10,[r1,#2]!          ;514
000748  1afffff9          BNE      |L1.1844|
                  |L1.1868|
00074c  e0890003          ADD      r0,r9,r3              ;514
000750  e2809001          ADD      r9,r0,#1              ;514
                  |L1.1876|
000754  e5970000          LDR      r0,[r7,#0]            ;514
000758  e35c0000          CMP      r12,#0                ;514
00075c  e24cc001          SUB      r12,r12,#1            ;514
000760  da000010          BLE      |L1.1960|
000764  e31c0001          TST      r12,#1                ;514
000768  e2492001          SUB      r2,r9,#1              ;514
00076c  e2401001          SUB      r1,r0,#1              ;514
000770  1a000001          BNE      |L1.1916|
000774  e5f23001          LDRB     r3,[r2,#1]!           ;514
000778  e5e13001          STRB     r3,[r1,#1]!           ;514
                  |L1.1916|
00077c  e28c3001          ADD      r3,r12,#1             ;514
000780  e1b030c3          ASRS     r3,r3,#1              ;514
000784  0a000005          BEQ      |L1.1952|
                  |L1.1928|
000788  e5d29001          LDRB     r9,[r2,#1]            ;514
00078c  e2533001          SUBS     r3,r3,#1              ;514
000790  e5c19001          STRB     r9,[r1,#1]            ;514
000794  e5f29002          LDRB     r9,[r2,#2]!           ;514
000798  e5e19002          STRB     r9,[r1,#2]!           ;514
00079c  1afffff9          BNE      |L1.1928|
                  |L1.1952|
0007a0  e080000c          ADD      r0,r0,r12             ;514
0007a4  e2800001          ADD      r0,r0,#1              ;514
                  |L1.1960|
0007a8  e3580000          CMP      r8,#0                 ;514
0007ac  0a000016          BEQ      |L1.2060|
0007b0  e1a01128          LSR      r1,r8,#2              ;514
0007b4  e2412001          SUB      r2,r1,#1              ;514
0007b8  e3720001          CMN      r2,#1                 ;514
0007bc  da00000c          BLE      |L1.2036|
                  |L1.1984|
0007c0  e5963000          LDR      r3,[r6,#0]            ;514
0007c4  e1a01000          MOV      r1,r0                 ;514
0007c8  e1a0c423          LSR      r12,r3,#8             ;514
0007cc  e5c13000          STRB     r3,[r1,#0]            ;514
0007d0  e1a09823          LSR      r9,r3,#16             ;514
0007d4  e5c1c001          STRB     r12,[r1,#1]           ;514
0007d8  e1a03c23          LSR      r3,r3,#24             ;514
0007dc  e2422001          SUB      r2,r2,#1              ;514
0007e0  e5c19002          STRB     r9,[r1,#2]            ;514
0007e4  e3720001          CMN      r2,#1                 ;514
0007e8  e2800004          ADD      r0,r0,#4              ;514
0007ec  e5c13003          STRB     r3,[r1,#3]            ;514
0007f0  cafffff2          BGT      |L1.1984|
                  |L1.2036|
0007f4  e2182003          ANDS     r2,r8,#3              ;514
0007f8  0a000003          BEQ      |L1.2060|
                  |L1.2044|
0007fc  e5961000          LDR      r1,[r6,#0]            ;514
000800  e58d1000          STR      r1,[sp,#0]            ;514
000804  e1a0100d          MOV      r1,sp                 ;514
                  |L1.2056|
000808  ebfffffe          BL       __aeabi_memcpy
                  |L1.2060|
00080c  e1d710b4          LDRH     r1,[r7,#4]            ;540
000810  e0840005          ADD      r0,r4,r5              ;540
000814  e3c00801          BIC      r0,r0,#0x10000        ;540
000818  e1500004          CMP      r0,r4                 ;540
00081c  3a000001          BCC      |L1.2088|
000820  e1500081          CMP      r0,r1,LSL #1          ;540
000824  3a000006          BCC      |L1.2116|
                  |L1.2088|
000828  e2612000          RSB      r2,r1,#0              ;540
00082c  e3a01801          MOV      r1,#0x10000           ;540
000830  e0811082          ADD      r1,r1,r2,LSL #1       ;540
000834  e1a01801          LSL      r1,r1,#16             ;540
000838  e1a01821          LSR      r1,r1,#16             ;540
00083c  e0800001          ADD      r0,r0,r1              ;540
000840  e3c00801          BIC      r0,r0,#0x10000        ;540
                  |L1.2116|
000844  e1c700b8          STRH     r0,[r7,#8]            ;540
                  |L1.2120|
000848  e597000c          LDR      r0,[r7,#0xc]          ;545
00084c  e3500000          CMP      r0,#0                 ;545
000850  1bfffffe          BLNE     os_mut_release
000854  e1a00005          MOV      r0,r5                 ;547
000858  e28dd00c          ADD      sp,sp,#0xc            ;547
00085c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2144|
                          DCD      0x0000ffff
                          ENDP

                  tu_fifo_count PROC
;;;583    /******************************************************************************/
;;;584    uint16_t tu_fifo_count(tu_fifo_t* f)
000864  e1a02000          MOV      r2,r0
;;;585    {
;;;586      return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
000868  e1d000b4          LDRH     r0,[r0,#4]
00086c  e1d210b8          LDRH     r1,[r2,#8]
000870  e1d220ba          LDRH     r2,[r2,#0xa]
000874  e1510002          CMP      r1,r2
000878  20411002          SUBCS    r1,r1,r2
00087c  30412002          SUBCC    r2,r1,r2
000880  30821080          ADDCC    r1,r2,r0,LSL #1
000884  e1a01801          LSL      r1,r1,#16
000888  e1a01821          LSR      r1,r1,#16
00088c  e1510000          CMP      r1,r0
000890  31a00001          MOVCC    r0,r1
;;;587    }
000894  e12fff1e          BX       lr
;;;588    
                          ENDP

                  tu_fifo_empty PROC
;;;601    /******************************************************************************/
;;;602    bool tu_fifo_empty(tu_fifo_t* f)
000898  e1d010b8          LDRH     r1,[r0,#8]
;;;603    {
;;;604      return f->wr_idx == f->rd_idx;
00089c  e1d000ba          LDRH     r0,[r0,#0xa]
0008a0  e1510000          CMP      r1,r0
0008a4  03a00001          MOVEQ    r0,#1
0008a8  13a00000          MOVNE    r0,#0
;;;605    }
0008ac  e12fff1e          BX       lr
;;;606    
                          ENDP

                  tu_fifo_full PROC
;;;619    /******************************************************************************/
;;;620    bool tu_fifo_full(tu_fifo_t* f)
0008b0  e1d020b4          LDRH     r2,[r0,#4]
;;;621    {
;;;622      return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
0008b4  e1d010b8          LDRH     r1,[r0,#8]
0008b8  e1d000ba          LDRH     r0,[r0,#0xa]
0008bc  e1510000          CMP      r1,r0
0008c0  20410000          SUBCS    r0,r1,r0
0008c4  30411000          SUBCC    r1,r1,r0
0008c8  30810082          ADDCC    r0,r1,r2,LSL #1
0008cc  e1a00800          LSL      r0,r0,#16
0008d0  e1a00820          LSR      r0,r0,#16
0008d4  e1500002          CMP      r0,r2
0008d8  23a00001          MOVCS    r0,#1
0008dc  33a00000          MOVCC    r0,#0
;;;623    }
0008e0  e12fff1e          BX       lr
;;;624    
                          ENDP

                  tu_fifo_remaining PROC
;;;637    /******************************************************************************/
;;;638    uint16_t tu_fifo_remaining(tu_fifo_t* f)
0008e4  e1d020b4          LDRH     r2,[r0,#4]
;;;639    {
;;;640      return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
0008e8  e1d010b8          LDRH     r1,[r0,#8]
0008ec  e1d000ba          LDRH     r0,[r0,#0xa]
0008f0  e1510000          CMP      r1,r0
0008f4  20410000          SUBCS    r0,r1,r0
0008f8  30411000          SUBCC    r1,r1,r0
0008fc  30810082          ADDCC    r0,r1,r2,LSL #1
000900  e1a00800          LSL      r0,r0,#16
000904  e1a00820          LSR      r0,r0,#16
000908  e1520000          CMP      r2,r0
00090c  80420000          SUBHI    r0,r2,r0
000910  93a00000          MOVLS    r0,#0
000914  e1a00800          LSL      r0,r0,#16
000918  e1a00820          LSR      r0,r0,#16
;;;641    }
00091c  e12fff1e          BX       lr
;;;642    
                          ENDP

                  tu_fifo_overflowed PROC
;;;663    /******************************************************************************/
;;;664    bool tu_fifo_overflowed(tu_fifo_t* f)
000920  e1d020b4          LDRH     r2,[r0,#4]
;;;665    {
;;;666      return _ff_count(f->depth, f->wr_idx, f->rd_idx) > f->depth;
000924  e1d010b8          LDRH     r1,[r0,#8]
000928  e1d000ba          LDRH     r0,[r0,#0xa]
00092c  e1510000          CMP      r1,r0
000930  20410000          SUBCS    r0,r1,r0
000934  30411000          SUBCC    r1,r1,r0
000938  30810082          ADDCC    r0,r1,r2,LSL #1
00093c  e1a00800          LSL      r0,r0,#16
000940  e1a00820          LSR      r0,r0,#16
000944  e1500002          CMP      r0,r2
000948  83a00001          MOVHI    r0,#1
00094c  93a00000          MOVLS    r0,#0
;;;667    }
000950  e12fff1e          BX       lr
;;;668    
                          ENDP

                  tu_fifo_correct_read_pointer PROC
;;;669    // Only use in case tu_fifo_overflow() returned true!
;;;670    void tu_fifo_correct_read_pointer(tu_fifo_t* f)
000954  e92d4010          PUSH     {r4,lr}
;;;671    {
000958  e1a04000          MOV      r4,r0
;;;672      _ff_lock(f->mutex_rd);
00095c  e5900010          LDR      r0,[r0,#0x10]
000960  e3500000          CMP      r0,#0
000964  151f110c          LDRNE    r1,|L1.2144|
000968  1bfffffe          BLNE     os_mut_wait
;;;673      _ff_correct_read_index(f, f->wr_idx);
00096c  e1d400b8          LDRH     r0,[r4,#8]
000970  e1d410b4          LDRH     r1,[r4,#4]
000974  e1510000          CMP      r1,r0
000978  90400001          SUBLS    r0,r0,r1
00097c  91a00800          LSLLS    r0,r0,#16
000980  91a00820          LSRLS    r0,r0,#16
000984  80800001          ADDHI    r0,r0,r1
000988  83c00801          BICHI    r0,r0,#0x10000
00098c  e1c400ba          STRH     r0,[r4,#0xa]
;;;674      _ff_unlock(f->mutex_rd);
000990  e5940010          LDR      r0,[r4,#0x10]
000994  e3500000          CMP      r0,#0
;;;675    }
000998  08bd8010          POPEQ    {r4,pc}
00099c  e8bd4010          POP      {r4,lr}
0009a0  eafffffe          B        os_mut_release
;;;676    
                          ENDP

                  tu_fifo_read PROC
;;;692    /******************************************************************************/
;;;693    bool tu_fifo_read(tu_fifo_t* f, void * buffer)
0009a4  e92d4070          PUSH     {r4-r6,lr}
;;;694    {
0009a8  e1a04000          MOV      r4,r0
;;;695      _ff_lock(f->mutex_rd);
0009ac  e5900010          LDR      r0,[r0,#0x10]
0009b0  e1a05001          MOV      r5,r1                 ;694
0009b4  e3500000          CMP      r0,#0                 ;694
0009b8  151f1160          LDRNE    r1,|L1.2144|
0009bc  1bfffffe          BLNE     os_mut_wait
;;;696    
;;;697      // Peek the data
;;;698      // f->rd_idx might get modified in case of an overflow so we can not use a local variable
;;;699      bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
0009c0  e1d410b8          LDRH     r1,[r4,#8]
0009c4  e1a03005          MOV      r3,r5
0009c8  e1d400ba          LDRH     r0,[r4,#0xa]
0009cc  e1d420b4          LDRH     r2,[r4,#4]
0009d0  e1510000          CMP      r1,r0
0009d4  e1a05000          MOV      r5,r0
0009d8  2041c005          SUBCS    r12,r1,r5
0009dc  30415005          SUBCC    r5,r1,r5
0009e0  31a0c002          MOVCC    r12,r2
0009e4  3085c08c          ADDCC    r12,r5,r12,LSL #1
0009e8  e1a0c80c          LSL      r12,r12,#16
0009ec  e1b0c82c          LSRS     r12,r12,#16
0009f0  03a05000          MOVEQ    r5,#0
0009f4  0a000019          BEQ      |L1.2656|
0009f8  e15c0002          CMP      r12,r2                ;694
0009fc  9a000007          BLS      |L1.2592|
000a00  e1510002          CMP      r1,r2                 ;694
000a04  20410002          SUBCS    r0,r1,r2              ;694
000a08  21a00800          LSLCS    r0,r0,#16             ;694
000a0c  21a00820          LSRCS    r0,r0,#16             ;694
000a10  30820001          ADDCC    r0,r2,r1              ;694
000a14  e1a0c004          MOV      r12,r4                ;694
000a18  33c00801          BICCC    r0,r0,#0x10000        ;694
000a1c  e1cc00ba          STRH     r0,[r12,#0xa]         ;694
                  |L1.2592|
000a20  e1a02802          LSL      r2,r2,#16             ;694
000a24  e1a02822          LSR      r2,r2,#16             ;694
000a28  e1500002          CMP      r0,r2                 ;694
000a2c  3a000004          BCC      |L1.2628|
                  |L1.2608|
000a30  e0400002          SUB      r0,r0,r2              ;694
000a34  e1a00800          LSL      r0,r0,#16             ;694
000a38  e1a00820          LSR      r0,r0,#16             ;694
000a3c  e1500002          CMP      r0,r2                 ;694
000a40  2afffffa          BCS      |L1.2608|
                  |L1.2628|
000a44  e1d420b6          LDRH     r2,[r4,#6]            ;694
000a48  e5941000          LDR      r1,[r4,#0]            ;694
000a4c  e3c22902          BIC      r2,r2,#0x8000         ;694
000a50  e0211290          MLA      r1,r0,r2,r1           ;694
000a54  e1a00003          MOV      r0,r3                 ;694
000a58  ebfffffe          BL       __aeabi_memcpy
000a5c  e3a05001          MOV      r5,#1                 ;694
                  |L1.2656|
;;;700    
;;;701      // Advance pointer
;;;702      f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
000a60  e1d420ba          LDRH     r2,[r4,#0xa]
000a64  e1d410b4          LDRH     r1,[r4,#4]
000a68  e0820005          ADD      r0,r2,r5
000a6c  e3c00801          BIC      r0,r0,#0x10000
000a70  e1500002          CMP      r0,r2
000a74  3a000001          BCC      |L1.2688|
000a78  e1500081          CMP      r0,r1,LSL #1
000a7c  3a000006          BCC      |L1.2716|
                  |L1.2688|
000a80  e2611000          RSB      r1,r1,#0
000a84  e3a02801          MOV      r2,#0x10000
000a88  e0821081          ADD      r1,r2,r1,LSL #1
000a8c  e1a01801          LSL      r1,r1,#16
000a90  e1a01821          LSR      r1,r1,#16
000a94  e0800001          ADD      r0,r0,r1
000a98  e3c00801          BIC      r0,r0,#0x10000
                  |L1.2716|
000a9c  e1c400ba          STRH     r0,[r4,#0xa]
;;;703    
;;;704      _ff_unlock(f->mutex_rd);
000aa0  e5940010          LDR      r0,[r4,#0x10]
000aa4  e3500000          CMP      r0,#0
000aa8  1bfffffe          BLNE     os_mut_release
;;;705      return ret;
000aac  e1a00005          MOV      r0,r5
;;;706    }
000ab0  e8bd8070          POP      {r4-r6,pc}
;;;707    
                          ENDP

                  tu_fifo_read_n PROC
;;;723    /******************************************************************************/
;;;724    uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
000ab4  e92d40f0          PUSH     {r4-r7,lr}
;;;725    {
;;;726      return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
000ab8  e1a04000          MOV      r4,r0
000abc  e5900010          LDR      r0,[r0,#0x10]
000ac0  e1a05001          MOV      r5,r1
000ac4  e3500000          CMP      r0,#0
000ac8  151f1270          LDRNE    r1,|L1.2144|
000acc  e24dd00c          SUB      sp,sp,#0xc            ;725
000ad0  e1a06002          MOV      r6,r2
000ad4  e3a07000          MOV      r7,#0
000ad8  1bfffffe          BLNE     os_mut_wait
000adc  e1d400ba          LDRH     r0,[r4,#0xa]
000ae0  e88d0081          STM      sp,{r0,r7}
000ae4  e1d430b8          LDRH     r3,[r4,#8]
000ae8  e1a02006          MOV      r2,r6
000aec  e1a01005          MOV      r1,r5
000af0  e1a00004          MOV      r0,r4
000af4  ebfffffe          BL       _tu_fifo_peek_n
000af8  e1d420ba          LDRH     r2,[r4,#0xa]
000afc  e1a05000          MOV      r5,r0
000b00  e1d410b4          LDRH     r1,[r4,#4]
000b04  e0820005          ADD      r0,r2,r5
000b08  e3c00801          BIC      r0,r0,#0x10000
000b0c  e1500002          CMP      r0,r2
000b10  3a000001          BCC      |L1.2844|
000b14  e1500081          CMP      r0,r1,LSL #1
000b18  3a000006          BCC      |L1.2872|
                  |L1.2844|
000b1c  e2611000          RSB      r1,r1,#0
000b20  e3a02801          MOV      r2,#0x10000
000b24  e0821081          ADD      r1,r2,r1,LSL #1
000b28  e1a01801          LSL      r1,r1,#16
000b2c  e1a01821          LSR      r1,r1,#16
000b30  e0800001          ADD      r0,r0,r1
000b34  e3c00801          BIC      r0,r0,#0x10000
                  |L1.2872|
000b38  e1c400ba          STRH     r0,[r4,#0xa]
000b3c  e5940010          LDR      r0,[r4,#0x10]
000b40  e3500000          CMP      r0,#0
000b44  1bfffffe          BLNE     os_mut_release
000b48  e1a00005          MOV      r0,r5
000b4c  e28dd00c          ADD      sp,sp,#0xc
;;;727    }
000b50  e8bd80f0          POP      {r4-r7,pc}
;;;728    
                          ENDP

                  tu_fifo_read_n_const_addr_full_words PROC
;;;729    uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
000b54  e92d40f0          PUSH     {r4-r7,lr}
;;;730    {
;;;731      return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
000b58  e1a04000          MOV      r4,r0
000b5c  e5900010          LDR      r0,[r0,#0x10]
000b60  e1a05001          MOV      r5,r1
000b64  e3500000          CMP      r0,#0
000b68  e3a07001          MOV      r7,#1
000b6c  e24dd00c          SUB      sp,sp,#0xc            ;730
000b70  e1a06002          MOV      r6,r2
000b74  10671807          RSBNE    r1,r7,r7,LSL #16
000b78  1bfffffe          BLNE     os_mut_wait
000b7c  e1d400ba          LDRH     r0,[r4,#0xa]
000b80  e88d0081          STM      sp,{r0,r7}
000b84  e1d430b8          LDRH     r3,[r4,#8]
000b88  e1a02006          MOV      r2,r6
000b8c  e1a01005          MOV      r1,r5
000b90  e1a00004          MOV      r0,r4
000b94  ebfffffe          BL       _tu_fifo_peek_n
000b98  e1d420ba          LDRH     r2,[r4,#0xa]
000b9c  e1a05000          MOV      r5,r0
000ba0  e1d410b4          LDRH     r1,[r4,#4]
000ba4  e0820005          ADD      r0,r2,r5
000ba8  e3c00801          BIC      r0,r0,#0x10000
000bac  e1500002          CMP      r0,r2
000bb0  3a000001          BCC      |L1.3004|
000bb4  e1500081          CMP      r0,r1,LSL #1
000bb8  3a000006          BCC      |L1.3032|
                  |L1.3004|
000bbc  e2611000          RSB      r1,r1,#0
000bc0  e3a02801          MOV      r2,#0x10000
000bc4  e0821081          ADD      r1,r2,r1,LSL #1
000bc8  e1a01801          LSL      r1,r1,#16
000bcc  e1a01821          LSR      r1,r1,#16
000bd0  e0800001          ADD      r0,r0,r1
000bd4  e3c00801          BIC      r0,r0,#0x10000
                  |L1.3032|
000bd8  e1c400ba          STRH     r0,[r4,#0xa]
000bdc  e5940010          LDR      r0,[r4,#0x10]
000be0  e3500000          CMP      r0,#0
000be4  1bfffffe          BLNE     os_mut_release
000be8  e1a00005          MOV      r0,r5
000bec  e28dd00c          ADD      sp,sp,#0xc
;;;732    }
000bf0  e8bd80f0          POP      {r4-r7,pc}
;;;733    
                          ENDP

                  tu_fifo_peek PROC
;;;746    /******************************************************************************/
;;;747    bool tu_fifo_peek(tu_fifo_t* f, void * p_buffer)
000bf4  e92d4070          PUSH     {r4-r6,lr}
;;;748    {
000bf8  e1a04000          MOV      r4,r0
;;;749      _ff_lock(f->mutex_rd);
000bfc  e5900010          LDR      r0,[r0,#0x10]
000c00  e1a05001          MOV      r5,r1                 ;748
000c04  e3500000          CMP      r0,#0                 ;748
000c08  151f13b0          LDRNE    r1,|L1.2144|
000c0c  1bfffffe          BLNE     os_mut_wait
;;;750      bool ret = _tu_fifo_peek(f, p_buffer, f->wr_idx, f->rd_idx);
000c10  e1d420b8          LDRH     r2,[r4,#8]
000c14  e1a0c005          MOV      r12,r5
000c18  e1d400ba          LDRH     r0,[r4,#0xa]
000c1c  e1d410b4          LDRH     r1,[r4,#4]
000c20  e1520000          CMP      r2,r0
000c24  e1a05000          MOV      r5,r0
000c28  20423005          SUBCS    r3,r2,r5
000c2c  30425005          SUBCC    r5,r2,r5
000c30  31a03001          MOVCC    r3,r1
000c34  30853083          ADDCC    r3,r5,r3,LSL #1
000c38  e1a03803          LSL      r3,r3,#16
000c3c  e1b03823          LSRS     r3,r3,#16
000c40  03a05000          MOVEQ    r5,#0
000c44  0a000018          BEQ      |L1.3244|
000c48  e1530001          CMP      r3,r1                 ;748
000c4c  9a000007          BLS      |L1.3184|
000c50  e1520001          CMP      r2,r1                 ;748
000c54  20420001          SUBCS    r0,r2,r1              ;748
000c58  21a00800          LSLCS    r0,r0,#16             ;748
000c5c  21a00820          LSRCS    r0,r0,#16             ;748
000c60  30810002          ADDCC    r0,r1,r2              ;748
000c64  e1a03004          MOV      r3,r4                 ;748
000c68  33c00801          BICCC    r0,r0,#0x10000        ;748
000c6c  e1c300ba          STRH     r0,[r3,#0xa]          ;748
                  |L1.3184|
000c70  e1d420b4          LDRH     r2,[r4,#4]            ;748
000c74  e1500002          CMP      r0,r2                 ;748
000c78  3a000004          BCC      |L1.3216|
                  |L1.3196|
000c7c  e0400002          SUB      r0,r0,r2              ;748
000c80  e1a00800          LSL      r0,r0,#16             ;748
000c84  e1a00820          LSR      r0,r0,#16             ;748
000c88  e1500002          CMP      r0,r2                 ;748
000c8c  2afffffa          BCS      |L1.3196|
                  |L1.3216|
000c90  e1d420b6          LDRH     r2,[r4,#6]            ;748
000c94  e5941000          LDR      r1,[r4,#0]            ;748
000c98  e3c22902          BIC      r2,r2,#0x8000         ;748
000c9c  e0211290          MLA      r1,r0,r2,r1           ;748
000ca0  e1a0000c          MOV      r0,r12                ;748
000ca4  ebfffffe          BL       __aeabi_memcpy
000ca8  e3a05001          MOV      r5,#1                 ;748
                  |L1.3244|
;;;751      _ff_unlock(f->mutex_rd);
000cac  e5940010          LDR      r0,[r4,#0x10]
000cb0  e3500000          CMP      r0,#0
000cb4  1bfffffe          BLNE     os_mut_release
;;;752      return ret;
000cb8  e1a00005          MOV      r0,r5
;;;753    }
000cbc  e8bd8070          POP      {r4-r6,pc}
;;;754    
                          ENDP

                  tu_fifo_peek_n PROC
;;;769    /******************************************************************************/
;;;770    uint16_t tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n)
000cc0  e92d4070          PUSH     {r4-r6,lr}
;;;771    {
000cc4  e1a04000          MOV      r4,r0
;;;772      _ff_lock(f->mutex_rd);
000cc8  e5900010          LDR      r0,[r0,#0x10]
000ccc  e1a06001          MOV      r6,r1                 ;771
000cd0  e3500000          CMP      r0,#0                 ;771
000cd4  151f147c          LDRNE    r1,|L1.2144|
000cd8  e24dd008          SUB      sp,sp,#8              ;771
000cdc  e1a05002          MOV      r5,r2                 ;771
000ce0  1bfffffe          BLNE     os_mut_wait
;;;773      uint16_t ret = _tu_fifo_peek_n(f, p_buffer, n, f->wr_idx, f->rd_idx, TU_FIFO_COPY_INC);
000ce4  e1d400ba          LDRH     r0,[r4,#0xa]
000ce8  e3a01000          MOV      r1,#0
000cec  e1cd00f0          STRD     r0,r1,[sp,#0]
000cf0  e1d430b8          LDRH     r3,[r4,#8]
000cf4  e1a02005          MOV      r2,r5
000cf8  e1a01006          MOV      r1,r6
000cfc  e1a00004          MOV      r0,r4
000d00  ebfffffe          BL       _tu_fifo_peek_n
000d04  e1a05000          MOV      r5,r0
;;;774      _ff_unlock(f->mutex_rd);
000d08  e5940010          LDR      r0,[r4,#0x10]
000d0c  e3500000          CMP      r0,#0
000d10  1bfffffe          BLNE     os_mut_release
;;;775      return ret;
000d14  e1a00005          MOV      r0,r5
000d18  e28dd008          ADD      sp,sp,#8
;;;776    }
000d1c  e8bd8070          POP      {r4-r6,pc}
;;;777    
                          ENDP

                  tu_fifo_write PROC
;;;793    /******************************************************************************/
;;;794    bool tu_fifo_write(tu_fifo_t* f, const void * data)
000d20  e92d4070          PUSH     {r4-r6,lr}
;;;795    {
000d24  e1a04000          MOV      r4,r0
;;;796      _ff_lock(f->mutex_wr);
000d28  e590000c          LDR      r0,[r0,#0xc]
000d2c  e1a06001          MOV      r6,r1                 ;795
000d30  e3500000          CMP      r0,#0                 ;795
000d34  151f14dc          LDRNE    r1,|L1.2144|
000d38  1bfffffe          BLNE     os_mut_wait
;;;797    
;;;798      bool ret;
;;;799      uint16_t const wr_idx = f->wr_idx;
000d3c  e1d450b8          LDRH     r5,[r4,#8]
000d40  e1d400b4          LDRH     r0,[r4,#4]
000d44  e1d410b8          LDRH     r1,[r4,#8]
000d48  e1d420ba          LDRH     r2,[r4,#0xa]
000d4c  e1510002          CMP      r1,r2
000d50  20411002          SUBCS    r1,r1,r2
000d54  30412002          SUBCC    r2,r1,r2
000d58  31a01000          MOVCC    r1,r0
000d5c  30821081          ADDCC    r1,r2,r1,LSL #1
000d60  e1a01801          LSL      r1,r1,#16
000d64  e1a01821          LSR      r1,r1,#16
000d68  e1510000          CMP      r1,r0
;;;800    
;;;801      if ( tu_fifo_full(f) && !f->overwritable )
000d6c  25d41007          LDRBCS   r1,[r4,#7]
000d70  23110080          TSTCS    r1,#0x80
;;;802      {
;;;803        ret = false;
000d74  03a05000          MOVEQ    r5,#0
000d78  0a00001e          BEQ      |L1.3576|
;;;804      }else
;;;805      {
;;;806        uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
000d7c  e1a02005          MOV      r2,r5
000d80  e1500002          CMP      r0,r2
000d84  8a000004          BHI      |L1.3484|
                  |L1.3464|
000d88  e0421000          SUB      r1,r2,r0
000d8c  e1a02801          LSL      r2,r1,#16
000d90  e1a02822          LSR      r2,r2,#16
000d94  e1520000          CMP      r2,r0
000d98  2afffffa          BCS      |L1.3464|
                  |L1.3484|
000d9c  e1a00002          MOV      r0,r2
;;;807    
;;;808        // Write data
;;;809        _ff_push(f, data, wr_ptr);
000da0  e1d420b6          LDRH     r2,[r4,#6]
000da4  e5941000          LDR      r1,[r4,#0]
000da8  e3c22902          BIC      r2,r2,#0x8000
000dac  e0201092          MLA      r0,r2,r0,r1
000db0  e1a01006          MOV      r1,r6
000db4  ebfffffe          BL       __aeabi_memcpy
;;;810    
;;;811        // Advance pointer
;;;812        f->wr_idx = advance_index(f->depth, wr_idx, 1);
000db8  e1d410b4          LDRH     r1,[r4,#4]
000dbc  e2850001          ADD      r0,r5,#1
000dc0  e3c00801          BIC      r0,r0,#0x10000
000dc4  e1500005          CMP      r0,r5
000dc8  3a000001          BCC      |L1.3540|
000dcc  e1500081          CMP      r0,r1,LSL #1
000dd0  3a000006          BCC      |L1.3568|
                  |L1.3540|
000dd4  e2611000          RSB      r1,r1,#0
000dd8  e3a02801          MOV      r2,#0x10000
000ddc  e0821081          ADD      r1,r2,r1,LSL #1
000de0  e1a01801          LSL      r1,r1,#16
000de4  e1a01821          LSR      r1,r1,#16
000de8  e0800001          ADD      r0,r0,r1
000dec  e3c00801          BIC      r0,r0,#0x10000
                  |L1.3568|
000df0  e1c400b8          STRH     r0,[r4,#8]
;;;813    
;;;814        ret = true;
000df4  e3a05001          MOV      r5,#1
                  |L1.3576|
;;;815      }
;;;816    
;;;817      _ff_unlock(f->mutex_wr);
000df8  e594000c          LDR      r0,[r4,#0xc]
000dfc  e3500000          CMP      r0,#0
000e00  1bfffffe          BLNE     os_mut_release
;;;818    
;;;819      return ret;
000e04  e1a00005          MOV      r0,r5
;;;820    }
000e08  e8bd8070          POP      {r4-r6,pc}
;;;821    
                          ENDP

                  tu_fifo_write_n PROC
;;;835    /******************************************************************************/
;;;836    uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
000e0c  e3a03000          MOV      r3,#0
;;;837    {
;;;838      return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
000e10  eafffffe          B        _tu_fifo_write_n
;;;839    }
;;;840    
                          ENDP

                  tu_fifo_write_n_const_addr_full_words PROC
;;;855    /******************************************************************************/
;;;856    uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
000e14  e3a03001          MOV      r3,#1
;;;857    {
;;;858      return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
000e18  eafffffe          B        _tu_fifo_write_n
;;;859    }
;;;860    
                          ENDP

                  tu_fifo_clear PROC
;;;868    /******************************************************************************/
;;;869    bool tu_fifo_clear(tu_fifo_t *f)
000e1c  e92d4070          PUSH     {r4-r6,lr}
;;;870    {
000e20  e1a04000          MOV      r4,r0
;;;871      _ff_lock(f->mutex_wr);
000e24  e590000c          LDR      r0,[r0,#0xc]
000e28  e51f55d0          LDR      r5,|L1.2144|
000e2c  e3500000          CMP      r0,#0
000e30  11a01005          MOVNE    r1,r5
000e34  1bfffffe          BLNE     os_mut_wait
;;;872      _ff_lock(f->mutex_rd);
000e38  e5940010          LDR      r0,[r4,#0x10]
000e3c  e3500000          CMP      r0,#0
000e40  11a01005          MOVNE    r1,r5
000e44  1bfffffe          BLNE     os_mut_wait
;;;873    
;;;874      f->rd_idx = 0;
000e48  e3a00000          MOV      r0,#0
000e4c  e1c400ba          STRH     r0,[r4,#0xa]
;;;875      f->wr_idx = 0;
000e50  e1c400b8          STRH     r0,[r4,#8]
;;;876    
;;;877      _ff_unlock(f->mutex_wr);
000e54  e594000c          LDR      r0,[r4,#0xc]
000e58  e3500000          CMP      r0,#0
000e5c  1bfffffe          BLNE     os_mut_release
;;;878      _ff_unlock(f->mutex_rd);
000e60  e5940010          LDR      r0,[r4,#0x10]
000e64  e3500000          CMP      r0,#0
000e68  1bfffffe          BLNE     os_mut_release
;;;879      return true;
000e6c  e3a00001          MOV      r0,#1
;;;880    }
000e70  e8bd8070          POP      {r4-r6,pc}
;;;881    
                          ENDP

                  tu_fifo_set_overwritable PROC
;;;891    /******************************************************************************/
;;;892    bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
000e74  e92d4070          PUSH     {r4-r6,lr}
;;;893    {
000e78  e1a04000          MOV      r4,r0
;;;894      _ff_lock(f->mutex_wr);
000e7c  e590000c          LDR      r0,[r0,#0xc]
000e80  e51f5628          LDR      r5,|L1.2144|
000e84  e3500000          CMP      r0,#0
000e88  e1a06001          MOV      r6,r1                 ;893
000e8c  11a01005          MOVNE    r1,r5                 ;893
000e90  1bfffffe          BLNE     os_mut_wait
;;;895      _ff_lock(f->mutex_rd);
000e94  e5940010          LDR      r0,[r4,#0x10]
000e98  e3500000          CMP      r0,#0
000e9c  11a01005          MOVNE    r1,r5
000ea0  1bfffffe          BLNE     os_mut_wait
;;;896    
;;;897      f->overwritable = overwritable;
000ea4  e5d40007          LDRB     r0,[r4,#7]
000ea8  e3c00080          BIC      r0,r0,#0x80
000eac  e1800386          ORR      r0,r0,r6,LSL #7
000eb0  e5c40007          STRB     r0,[r4,#7]
;;;898    
;;;899      _ff_unlock(f->mutex_wr);
000eb4  e594000c          LDR      r0,[r4,#0xc]
000eb8  e3500000          CMP      r0,#0
000ebc  1bfffffe          BLNE     os_mut_release
;;;900      _ff_unlock(f->mutex_rd);
000ec0  e5940010          LDR      r0,[r4,#0x10]
000ec4  e3500000          CMP      r0,#0
000ec8  1bfffffe          BLNE     os_mut_release
;;;901    
;;;902      return true;
000ecc  e3a00001          MOV      r0,#1
;;;903    }
000ed0  e8bd8070          POP      {r4-r6,pc}
;;;904    
                          ENDP

                  tu_fifo_advance_write_pointer PROC
;;;920    /******************************************************************************/
;;;921    void tu_fifo_advance_write_pointer(tu_fifo_t *f, uint16_t n)
000ed4  e1d020b8          LDRH     r2,[r0,#8]
;;;922    {
;;;923      f->wr_idx = advance_index(f->depth, f->wr_idx, n);
000ed8  e1d030b4          LDRH     r3,[r0,#4]
000edc  e0811002          ADD      r1,r1,r2
000ee0  e3c11801          BIC      r1,r1,#0x10000
000ee4  e1510002          CMP      r1,r2
000ee8  3a000001          BCC      |L1.3828|
000eec  e1510083          CMP      r1,r3,LSL #1          ;922
000ef0  3a000006          BCC      |L1.3856|
                  |L1.3828|
000ef4  e2632000          RSB      r2,r3,#0              ;922
000ef8  e3a03801          MOV      r3,#0x10000           ;922
000efc  e0832082          ADD      r2,r3,r2,LSL #1       ;922
000f00  e1a02802          LSL      r2,r2,#16             ;922
000f04  e1a02822          LSR      r2,r2,#16             ;922
000f08  e0811002          ADD      r1,r1,r2              ;922
000f0c  e3c11801          BIC      r1,r1,#0x10000        ;922
                  |L1.3856|
000f10  e1c010b8          STRH     r1,[r0,#8]
;;;924    }
000f14  e12fff1e          BX       lr
;;;925    
                          ENDP

                  tu_fifo_advance_read_pointer PROC
;;;941    /******************************************************************************/
;;;942    void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
000f18  e1d020ba          LDRH     r2,[r0,#0xa]
;;;943    {
;;;944      f->rd_idx = advance_index(f->depth, f->rd_idx, n);
000f1c  e1d030b4          LDRH     r3,[r0,#4]
000f20  e0811002          ADD      r1,r1,r2
000f24  e3c11801          BIC      r1,r1,#0x10000
000f28  e1510002          CMP      r1,r2
000f2c  3a000001          BCC      |L1.3896|
000f30  e1510083          CMP      r1,r3,LSL #1          ;943
000f34  3a000006          BCC      |L1.3924|
                  |L1.3896|
000f38  e2632000          RSB      r2,r3,#0              ;943
000f3c  e3a03801          MOV      r3,#0x10000           ;943
000f40  e0832082          ADD      r2,r3,r2,LSL #1       ;943
000f44  e1a02802          LSL      r2,r2,#16             ;943
000f48  e1a02822          LSR      r2,r2,#16             ;943
000f4c  e0811002          ADD      r1,r1,r2              ;943
000f50  e3c11801          BIC      r1,r1,#0x10000        ;943
                  |L1.3924|
000f54  e1c010ba          STRH     r1,[r0,#0xa]
;;;945    }
000f58  e12fff1e          BX       lr
;;;946    
                          ENDP

                  tu_fifo_get_read_info PROC
;;;961    /******************************************************************************/
;;;962    void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
000f5c  e92d41f0          PUSH     {r4-r8,lr}
;;;963    {
;;;964      // Operate on temporary values in case they change in between
;;;965      uint16_t wr_idx = f->wr_idx;
000f60  e1d050b8          LDRH     r5,[r0,#8]
000f64  e1a06001          MOV      r6,r1                 ;963
000f68  e1a07000          MOV      r7,r0                 ;963
;;;966      uint16_t rd_idx = f->rd_idx;
000f6c  e1d040ba          LDRH     r4,[r0,#0xa]
;;;967    
;;;968      uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
000f70  e1d000b4          LDRH     r0,[r0,#4]
000f74  e1550004          CMP      r5,r4
000f78  30452004          SUBCC    r2,r5,r4
000f7c  20451004          SUBCS    r1,r5,r4
000f80  30821080          ADDCC    r1,r2,r0,LSL #1
000f84  e1a01801          LSL      r1,r1,#16
000f88  e1a01821          LSR      r1,r1,#16
;;;969    
;;;970      // Check overflow and correct if required - may happen in case a DMA wrote too fast
;;;971      if (cnt > f->depth)
000f8c  e1500001          CMP      r0,r1
000f90  2a00000f          BCS      |L1.4052|
;;;972      {
;;;973        _ff_lock(f->mutex_rd);
000f94  e5970010          LDR      r0,[r7,#0x10]
000f98  e3500000          CMP      r0,#0
000f9c  151f1744          LDRNE    r1,|L1.2144|
000fa0  1bfffffe          BLNE     os_mut_wait
000fa4  e1d700b4          LDRH     r0,[r7,#4]
000fa8  e1500005          CMP      r0,r5
000fac  90450000          SUBLS    r0,r5,r0
000fb0  91a04800          LSLLS    r4,r0,#16
000fb4  91a04824          LSRLS    r4,r4,#16
000fb8  80800005          ADDHI    r0,r0,r5
000fbc  83c04801          BICHI    r4,r0,#0x10000
000fc0  e1c740ba          STRH     r4,[r7,#0xa]
;;;974        rd_idx = _ff_correct_read_index(f, wr_idx);
;;;975        _ff_unlock(f->mutex_rd);
000fc4  e5970010          LDR      r0,[r7,#0x10]
000fc8  e3500000          CMP      r0,#0
000fcc  1bfffffe          BLNE     os_mut_release
;;;976    
;;;977        cnt = f->depth;
000fd0  e1d710b4          LDRH     r1,[r7,#4]
                  |L1.4052|
;;;978      }
;;;979    
;;;980      // Check if fifo is empty
;;;981      if (cnt == 0)
000fd4  e3a02000          MOV      r2,#0
000fd8  e3510000          CMP      r1,#0
000fdc  0a000019          BEQ      |L1.4168|
;;;982      {
;;;983        info->len_lin  = 0;
;;;984        info->len_wrap = 0;
;;;985        info->ptr_lin  = NULL;
;;;986        info->ptr_wrap = NULL;
;;;987        return;
;;;988      }
;;;989    
;;;990      // Get relative pointers
;;;991      uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
000fe0  e1d700b4          LDRH     r0,[r7,#4]
000fe4  e1550000          CMP      r5,r0
000fe8  e1a03000          MOV      r3,r0
000fec  3a000004          BCC      |L1.4100|
                  |L1.4080|
000ff0  e045c000          SUB      r12,r5,r0
000ff4  e1a0580c          LSL      r5,r12,#16
000ff8  e1a05825          LSR      r5,r5,#16
000ffc  e1550000          CMP      r5,r0
001000  2afffffa          BCS      |L1.4080|
                  |L1.4100|
001004  e1a00003          MOV      r0,r3
001008  e1540000          CMP      r4,r0
00100c  3a000004          BCC      |L1.4132|
                  |L1.4112|
001010  e0443000          SUB      r3,r4,r0
001014  e1a04803          LSL      r4,r3,#16
001018  e1a04824          LSR      r4,r4,#16
00101c  e1540000          CMP      r4,r0
001020  2afffffa          BCS      |L1.4112|
                  |L1.4132|
;;;992      uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
;;;993    
;;;994      // Copy pointer to buffer to start reading from
;;;995      info->ptr_lin = &f->buffer[rd_ptr];
;;;996    
;;;997      // Check if there is a wrap around necessary
;;;998      if (wr_ptr > rd_ptr)
001024  e5970000          LDR      r0,[r7,#0]
001028  e1550004          CMP      r5,r4
00102c  e0800004          ADD      r0,r0,r4              ;995
001030  e5860004          STR      r0,[r6,#4]            ;995
;;;999      {
;;;1000       // Non wrapping case
;;;1001       info->len_lin  = cnt;
001034  81c610b0          STRHHI   r1,[r6,#0]
;;;1002   
;;;1003       info->len_wrap = 0;
001038  81c620b2          STRHHI   r2,[r6,#2]
00103c  9a000005          BLS      |L1.4184|
                  |L1.4160|
;;;1004       info->ptr_wrap = NULL;
001040  e5862008          STR      r2,[r6,#8]
;;;1005     }
;;;1006     else
;;;1007     {
;;;1008       info->len_lin  = f->depth - rd_ptr;   // Also the case if FIFO was full
;;;1009   
;;;1010       info->len_wrap = cnt - info->len_lin;
;;;1011       info->ptr_wrap = f->buffer;
;;;1012     }
;;;1013   }
001044  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4168|
001048  e1c620b0          STRH     r2,[r6,#0]            ;983
00104c  e1c620b2          STRH     r2,[r6,#2]            ;984
001050  e5862004          STR      r2,[r6,#4]            ;985
001054  eafffff9          B        |L1.4160|
                  |L1.4184|
001058  e1d700b4          LDRH     r0,[r7,#4]            ;1008
00105c  e0400004          SUB      r0,r0,r4              ;1008
001060  e0411000          SUB      r1,r1,r0              ;1010
001064  e1c600b0          STRH     r0,[r6,#0]            ;1008
001068  e1c610b2          STRH     r1,[r6,#2]            ;1010
00106c  e5970000          LDR      r0,[r7,#0]            ;1011
001070  e5860008          STR      r0,[r6,#8]            ;1011
001074  e8bd81f0          POP      {r4-r8,pc}
;;;1014   
                          ENDP

                  tu_fifo_get_write_info PROC
;;;1029   /******************************************************************************/
;;;1030   void tu_fifo_get_write_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
001078  e92d0070          PUSH     {r4-r6}
;;;1031   {
;;;1032     uint16_t wr_idx = f->wr_idx;
00107c  e1d020b8          LDRH     r2,[r0,#8]
;;;1033     uint16_t rd_idx = f->rd_idx;
001080  e1d030ba          LDRH     r3,[r0,#0xa]
;;;1034     uint16_t remain = _ff_remaining(f->depth, wr_idx, rd_idx);
001084  e1d0c0b4          LDRH     r12,[r0,#4]
001088  e1520003          CMP      r2,r3
00108c  e1a05003          MOV      r5,r3
001090  20424005          SUBCS    r4,r2,r5
001094  30425005          SUBCC    r5,r2,r5
001098  31a0400c          MOVCC    r4,r12
00109c  30854084          ADDCC    r4,r5,r4,LSL #1
0010a0  e1a04804          LSL      r4,r4,#16
0010a4  e1a04824          LSR      r4,r4,#16
0010a8  e15c0004          CMP      r12,r4
0010ac  804c4004          SUBHI    r4,r12,r4
0010b0  93a04000          MOVLS    r4,#0
0010b4  81a0500c          MOVHI    r5,r12
0010b8  e1a05804          LSL      r5,r4,#16
0010bc  e1b05825          LSRS     r5,r5,#16
0010c0  e3a04000          MOV      r4,#0
0010c4  0a000018          BEQ      |L1.4396|
0010c8  e15c0002          CMP      r12,r2                ;1031
0010cc  8a000004          BHI      |L1.4324|
                  |L1.4304|
0010d0  e042200c          SUB      r2,r2,r12             ;1031
0010d4  e1a02802          LSL      r2,r2,#16             ;1031
0010d8  e1a02822          LSR      r2,r2,#16             ;1031
0010dc  e15c0002          CMP      r12,r2                ;1031
0010e0  9afffffa          BLS      |L1.4304|
                  |L1.4324|
0010e4  e153000c          CMP      r3,r12                ;1031
0010e8  3a000004          BCC      |L1.4352|
                  |L1.4332|
0010ec  e043300c          SUB      r3,r3,r12             ;1031
0010f0  e1a03803          LSL      r3,r3,#16             ;1031
0010f4  e1a03823          LSR      r3,r3,#16             ;1031
0010f8  e153000c          CMP      r3,r12                ;1031
0010fc  2afffffa          BCS      |L1.4332|
                  |L1.4352|
;;;1035   
;;;1036     if (remain == 0)
;;;1037     {
;;;1038       info->len_lin  = 0;
;;;1039       info->len_wrap = 0;
;;;1040       info->ptr_lin  = NULL;
;;;1041       info->ptr_wrap = NULL;
;;;1042       return;
;;;1043     }
;;;1044   
;;;1045     // Get relative pointers
;;;1046     uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
;;;1047     uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
;;;1048   
;;;1049     // Copy pointer to buffer to start writing to
;;;1050     info->ptr_lin = &f->buffer[wr_ptr];
;;;1051   
;;;1052     if (wr_ptr < rd_ptr)
001100  e590c000          LDR      r12,[r0,#0]
001104  e1520003          CMP      r2,r3
001108  e08cc002          ADD      r12,r12,r2            ;1050
00110c  e581c004          STR      r12,[r1,#4]           ;1050
001110  2a000009          BCS      |L1.4412|
;;;1053     {
;;;1054       // Non wrapping case
;;;1055       info->len_lin  = rd_ptr-wr_ptr;
001114  e0430002          SUB      r0,r3,r2
001118  e1c100b0          STRH     r0,[r1,#0]
;;;1056       info->len_wrap = 0;
00111c  e1c140b2          STRH     r4,[r1,#2]
                  |L1.4384|
;;;1057       info->ptr_wrap = NULL;
001120  e5814008          STR      r4,[r1,#8]
;;;1058     }
;;;1059     else
;;;1060     {
;;;1061       info->len_lin  = f->depth - wr_ptr;
;;;1062       info->len_wrap = remain - info->len_lin; // Remaining length - n already was limited to remain or FIFO depth
;;;1063       info->ptr_wrap = f->buffer;              // Always start of buffer
;;;1064     }
;;;1065   }
001124  e8bd0070          POP      {r4-r6}
001128  e12fff1e          BX       lr
                  |L1.4396|
00112c  e1c140b0          STRH     r4,[r1,#0]            ;1038
001130  e1c140b2          STRH     r4,[r1,#2]            ;1039
001134  e5814004          STR      r4,[r1,#4]            ;1040
001138  eafffff8          B        |L1.4384|
                  |L1.4412|
00113c  e1d030b4          LDRH     r3,[r0,#4]            ;1061
001140  e0432002          SUB      r2,r3,r2              ;1061
001144  e0453002          SUB      r3,r5,r2              ;1062
001148  e1c120b0          STRH     r2,[r1,#0]            ;1061
00114c  e1c130b2          STRH     r3,[r1,#2]            ;1062
001150  e5900000          LDR      r0,[r0,#0]            ;1063
001154  e5810008          STR      r0,[r1,#8]            ;1063
001158  e8bd0070          POP      {r4-r6}
00115c  e12fff1e          BX       lr
                          ENDP

