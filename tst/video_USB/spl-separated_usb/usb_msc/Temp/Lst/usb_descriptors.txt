; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usb_descriptors.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usb_descriptors.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usb_descriptors.crf users\usb_descriptors.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tud_descriptor_device_cb PROC
;;;63     // Application return pointer to descriptor
;;;64     uint8_t const * tud_descriptor_device_cb(void)
000000  e59f00ec          LDR      r0,|L1.244|
;;;65     {
;;;66       return (uint8_t const *) &desc_device;
;;;67     }
000004  e12fff1e          BX       lr
;;;68     
                          ENDP

                  tud_descriptor_configuration_cb PROC
;;;121    // Descriptor contents must exist long enough for transfer to complete
;;;122    uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
000008  e92d4010          PUSH     {r4,lr}
;;;123    {
;;;124      (void) index; // for multiple configurations
;;;125    
;;;126    #if TUD_OPT_HIGH_SPEED
;;;127      // Although we are highspeed, host may be fullspeed.
;;;128      return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
00000c  ebfffffe          BL       tud_speed_get
000010  e3500002          CMP      r0,#2
000014  059f00dc          LDREQ    r0,|L1.248|
000018  159f00dc          LDRNE    r0,|L1.252|
;;;129    #else
;;;130      return desc_fs_configuration;
;;;131    #endif
;;;132    }
00001c  e8bd8010          POP      {r4,pc}
;;;133    
                          ENDP

                  tud_descriptor_string_cb PROC
;;;150    // Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
;;;151    uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
000020  e92d41f0          PUSH     {r4-r8,lr}
;;;152    {
;;;153      (void) langid;
;;;154    
;;;155      uint8_t chr_count;
;;;156    
;;;157      if ( index == 0)
;;;158      {
;;;159        memcpy(&_desc_str[1], string_desc_arr[0], 2);
000024  e59f10d4          LDR      r1,|L1.256|
000028  e59f70d4          LDR      r7,|L1.260|
00002c  e3500000          CMP      r0,#0                 ;157
000030  0a000011          BEQ      |L1.124|
;;;160        chr_count = 1;
;;;161      }else
;;;162      {
;;;163        // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
;;;164        // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors
;;;165    
;;;166        if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
000034  e3500004          CMP      r0,#4
000038  23a00000          MOVCS    r0,#0
;;;167    
;;;168        const char* str = string_desc_arr[index];
;;;169    
;;;170        // Cap at max char
;;;171        chr_count = strlen(str);
;;;172        if ( chr_count > 31 ) chr_count = 31;
;;;173    
;;;174        // Convert ASCII string into UTF-16
;;;175        for(uint8_t i=0; i<chr_count; i++)
;;;176        {
;;;177          _desc_str[1+i] = str[i];
;;;178        }
;;;179      }
;;;180    
;;;181      // first byte is length (including header), second byte is string type
;;;182      _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
;;;183    
;;;184      return _desc_str;
;;;185    }
00003c  28bd81f0          POPCS    {r4-r8,pc}
000040  e7916100          LDR      r6,[r1,r0,LSL #2]     ;168
000044  e1a00006          MOV      r0,r6                 ;171
000048  ebfffffe          BL       strlen
00004c  e20010ff          AND      r1,r0,#0xff           ;171
000050  e351001f          CMP      r1,#0x1f              ;172
000054  83a0101f          MOVHI    r1,#0x1f              ;172
000058  8a000002          BHI      |L1.104|
00005c  e2410001          SUB      r0,r1,#1              ;175
000060  e3500000          CMP      r0,#0                 ;175
000064  da000017          BLE      |L1.200|
                  |L1.104|
000068  e59f3094          LDR      r3,|L1.260|
00006c  e3110001          TST      r1,#1
000070  e2462001          SUB      r2,r6,#1              ;175
000074  1a000009          BNE      |L1.160|
000078  ea000006          B        |L1.152|
                  |L1.124|
00007c  e5910000          LDR      r0,[r1,#0]            ;159  ; string_desc_arr
000080  e3a01001          MOV      r1,#1                 ;160
000084  e5d02000          LDRB     r2,[r0,#0]            ;159
000088  e5c72002          STRB     r2,[r7,#2]            ;159  ; _desc_str
00008c  e5d00001          LDRB     r0,[r0,#1]            ;159
000090  e5c70003          STRB     r0,[r7,#3]            ;159  ; _desc_str
000094  ea000010          B        |L1.220|
                  |L1.152|
000098  e5f20001          LDRB     r0,[r2,#1]!           ;177
00009c  e1e300b2          STRH     r0,[r3,#2]!           ;177
                  |L1.160|
0000a0  e5d24001          LDRB     r4,[r2,#1]
0000a4  e2410001          SUB      r0,r1,#1              ;175
0000a8  e1b0c0c0          ASRS     r12,r0,#1             ;175
0000ac  0a000005          BEQ      |L1.200|
                  |L1.176|
0000b0  e5f25002          LDRB     r5,[r2,#2]!
0000b4  e1c340b2          STRH     r4,[r3,#2]            ;177
0000b8  e5d24001          LDRB     r4,[r2,#1]            ;177
0000bc  e25cc001          SUBS     r12,r12,#1            ;177
0000c0  e1e350b4          STRH     r5,[r3,#4]!           ;177
0000c4  1afffff9          BNE      |L1.176|
                  |L1.200|
0000c8  e3500000          CMP      r0,#0                 ;177
0000cc  ba000002          BLT      |L1.220|
0000d0  e7d62000          LDRB     r2,[r6,r0]            ;177
0000d4  e0870080          ADD      r0,r7,r0,LSL #1       ;177
0000d8  e1c020b2          STRH     r2,[r0,#2]            ;177
                  |L1.220|
0000dc  e3a00002          MOV      r0,#2                 ;182
0000e0  e0800081          ADD      r0,r0,r1,LSL #1       ;182
0000e4  e3800c03          ORR      r0,r0,#0x300          ;182
0000e8  e1c700b0          STRH     r0,[r7,#0]            ;182  ; _desc_str
0000ec  e59f0010          LDR      r0,|L1.260|
0000f0  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.244|
                          DCD      ||area_number.6||
                  |L1.248|
                          DCD      ||area_number.6||+0x32
                  |L1.252|
                          DCD      ||area_number.6||+0x12
                  |L1.256|
                          DCD      ||.data||
                  |L1.260|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  _desc_str
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ||<Data1>||
000000  0904              DCB      0x09,0x04

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  desc_device
000000  1201              DCB      0x12,0x01
000002  0200              DCWU     0x0200
000004  00000040          DCB      0x00,0x00,0x00,0x40
000008  cafe4002          DCWU     0xcafe,0x4002
00000c  0100              DCWU     0x0100
00000e  0102              DCB      0x01,0x02
000010  0301              DCB      0x03,0x01
                  desc_fs_configuration
000012  0902              DCB      0x09,0x02
000014  20000101          DCB      0x20,0x00,0x01,0x01
000018  00803209          DCB      0x00,0x80,0x32,0x09
00001c  04000002          DCB      0x04,0x00,0x00,0x02
000020  08065000          DCB      0x08,0x06,0x50,0x00
000024  07050102          DCB      0x07,0x05,0x01,0x02
000028  40000007          DCB      0x40,0x00,0x00,0x07
00002c  05810240          DCB      0x05,0x81,0x02,0x40
000030  0000              DCB      0x00,0x00
                  desc_hs_configuration
000032  0902              DCB      0x09,0x02
000034  20000101          DCB      0x20,0x00,0x01,0x01
000038  00803209          DCB      0x00,0x80,0x32,0x09
00003c  04000002          DCB      0x04,0x00,0x00,0x02
000040  08065000          DCB      0x08,0x06,0x50,0x00
000044  07050102          DCB      0x07,0x05,0x01,0x02
000048  00020007          DCB      0x00,0x02,0x00,0x07
00004c  05810200          DCB      0x05,0x81,0x02,0x00
000050  0200              DCB      0x02,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  54696e79          DCB      "TinyUSB",0
000004  55534200
000008  54696e79          DCB      "TinyUSB Device",0
00000c  55534220
000010  44657669
000014  636500  
000017  00                DCB      0
000018  31323334          DCB      "123456789012",0
00001c  35363738
000020  39303132
000024  00      

                          AREA ||.data||, DATA, ALIGN=2

                  string_desc_arr
                          DCD      ||<Data1>||
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x18
