; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\clk-f1c100s-pll.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\clk-f1c100s-pll.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\clk-f1c100s-pll.crf ..\periph\clk-f1c100s-pll.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  clk_f1c100s_pll_set_parent PROC
;;;35     
;;;36     void clk_f1c100s_pll_set_parent(clk_pll_t* clk_pll, const char* pname)
000000  e12fff1e          BX       lr
;;;37     {
;;;38     }
;;;39     
                          ENDP

                  clk_f1c100s_pll_get_parent PROC
;;;40     const clk_pll_t* clk_f1c100s_pll_get_parent(clk_pll_t* clk_pll)
000004  e5900004          LDR      r0,[r0,#4]
;;;41     {
;;;42       return clk_pll->parent;
;;;43     }
000008  e12fff1e          BX       lr
;;;44     
                          ENDP

                  clk_f1c100s_pll_set_enable PROC
;;;45     void clk_f1c100s_pll_set_enable(clk_pll_t* clk_pll, bool enable)
00000c  e5902008          LDR      r2,[r0,#8]
;;;46     {
;;;47       uint32_t r = 0;
;;;48     
;;;49       switch (clk_pll->channel) {
000010  e3520006          CMP      r2,#6
000014  379ff102          LDRCC    pc,[pc,r2,LSL #2]
                  ||__switch$$||                  ; Alternate entry point
;;;50         case 0:
;;;51           r = read32(clk_pll->virt + CCU_PLL_CPU_CTRL);
;;;52           if (enable)
;;;53             r |= (1UL << 31);
;;;54           else
;;;55             r &= ~(1UL << 31);
;;;56           write32(clk_pll->virt + CCU_PLL_CPU_CTRL, r);
;;;57           break;
;;;58     
;;;59         case 1:
;;;60           r = read32(clk_pll->virt + CCU_PLL_AUDIO_CTRL);
;;;61           if (enable)
;;;62             r |= (1UL << 31);
;;;63           else
;;;64             r &= ~(1UL << 31);
;;;65           write32(clk_pll->virt + CCU_PLL_AUDIO_CTRL, r);
;;;66           break;
;;;67     
;;;68         case 2:
;;;69           r = read32(clk_pll->virt + CCU_PLL_VIDEO_CTRL);
;;;70           if (enable)
;;;71             r |= (1UL << 31);
;;;72           else
;;;73             r &= ~(1UL << 31);
;;;74           write32(clk_pll->virt + CCU_PLL_VIDEO_CTRL, r);
;;;75           break;
;;;76     
;;;77         case 3:
;;;78           r = read32(clk_pll->virt + CCU_PLL_VE_CTRL);
;;;79           if (enable)
;;;80             r |= (1UL << 31);
;;;81           else
;;;82             r &= ~(1UL << 31);
;;;83           write32(clk_pll->virt + CCU_PLL_VE_CTRL, r);
;;;84           break;
;;;85     
;;;86         case 4:
;;;87           r = read32(clk_pll->virt + CCU_PLL_DDR_CTRL);
;;;88           if (enable)
;;;89             r |= (1UL << 31);
;;;90           else
;;;91             r &= ~(1UL << 31);
;;;92           write32(clk_pll->virt + CCU_PLL_DDR_CTRL, r);
;;;93           break;
;;;94     
;;;95         case 5:
;;;96           r = read32(clk_pll->virt + CCU_PLL_PERIPH_CTRL);
;;;97           if (enable)
;;;98             r |= (1UL << 31);
;;;99           else
;;;100            r &= ~(1UL << 31);
;;;101          write32(clk_pll->virt + CCU_PLL_PERIPH_CTRL, r);
;;;102          break;
;;;103    
;;;104        default:
;;;105          break;
;;;106      }
;;;107    }
;;;108    
000018  e12fff1e          BX       lr
                          DCD      ||__switch$$||+0x1c
                          DCD      ||__switch$$||+0x40
                          DCD      ||__switch$$||+0x54
                          DCD      ||__switch$$||+0x68
                          DCD      ||__switch$$||+0x7c
                          DCD      ||__switch$$||+0x90
000034  e5900000          LDR      r0,[r0,#0]
000038  e3510000          CMP      r1,#0
00003c  e5901000          LDR      r1,[r0,#0]
000040  0a000001          BEQ      |L1.76|
                  |L1.68|
000044  e3811102          ORR      r1,r1,#0x80000000
000048  ea000000          B        |L1.80|
                  |L1.76|
00004c  e3c11102          BIC      r1,r1,#0x80000000
                  |L1.80|
000050  e5801000          STR      r1,[r0,#0]
000054  e12fff1e          BX       lr
000058  e5900000          LDR      r0,[r0,#0]
00005c  e3510000          CMP      r1,#0
000060  e5b01008          LDR      r1,[r0,#8]!
000064  0afffff8          BEQ      |L1.76|
000068  eafffff5          B        |L1.68|
00006c  e5900000          LDR      r0,[r0,#0]
000070  e3510000          CMP      r1,#0
000074  e5b01010          LDR      r1,[r0,#0x10]!
000078  0afffff3          BEQ      |L1.76|
00007c  eafffff0          B        |L1.68|
000080  e5900000          LDR      r0,[r0,#0]
000084  e3510000          CMP      r1,#0
000088  e5b01018          LDR      r1,[r0,#0x18]!
00008c  0affffee          BEQ      |L1.76|
000090  eaffffeb          B        |L1.68|
000094  e5900000          LDR      r0,[r0,#0]
000098  e3510000          CMP      r1,#0
00009c  e5b01020          LDR      r1,[r0,#0x20]!
0000a0  0affffe9          BEQ      |L1.76|
0000a4  eaffffe6          B        |L1.68|
0000a8  e5900000          LDR      r0,[r0,#0]
0000ac  e3510000          CMP      r1,#0
0000b0  e5b01028          LDR      r1,[r0,#0x28]!
0000b4  0affffe4          BEQ      |L1.76|
0000b8  eaffffe1          B        |L1.68|
                          ENDP

                  clk_f1c100s_pll_get_enable PROC
;;;109    bool clk_f1c100s_pll_get_enable(clk_pll_t* clk_pll)
0000bc  e5902008          LDR      r2,[r0,#8]
;;;110    {
;;;111      uint32_t r = 0;
0000c0  e3a01000          MOV      r1,#0
;;;112    
;;;113      switch (clk_pll->channel) {
0000c4  e3520006          CMP      r2,#6
0000c8  379ff102          LDRCC    pc,[pc,r2,LSL #2]
                  |symbol_number.24|                  ; Alternate entry point
;;;114        case 0:
;;;115          r = read32(clk_pll->virt + CCU_PLL_CPU_CTRL);
;;;116          break;
;;;117    
;;;118        case 1:
;;;119          r = read32(clk_pll->virt + CCU_PLL_AUDIO_CTRL);
;;;120          break;
;;;121    
;;;122        case 2:
;;;123          r = read32(clk_pll->virt + CCU_PLL_VIDEO_CTRL);
;;;124          break;
;;;125    
;;;126        case 3:
;;;127          r = read32(clk_pll->virt + CCU_PLL_VE_CTRL);
;;;128          break;
;;;129    
;;;130        case 4:
;;;131          r = read32(clk_pll->virt + CCU_PLL_DDR_CTRL);
;;;132          break;
;;;133    
;;;134        case 5:
;;;135          r = read32(clk_pll->virt + CCU_PLL_PERIPH_CTRL);
;;;136          break;
;;;137    
;;;138        default:
;;;139          break;
;;;140      }
;;;141      return (r & (1UL << 31)) ? true : false;
;;;142    }
;;;143    
0000cc  ea000016          B        |L1.300|
                          DCD      |symbol_number.24|+0x1c
                          DCD      |symbol_number.24|+0x28
                          DCD      |symbol_number.24|+0x34
                          DCD      |symbol_number.24|+0x40
                          DCD      |symbol_number.24|+0x4c
                          DCD      |symbol_number.24|+0x58
0000e8  e5900000          LDR      r0,[r0,#0]
0000ec  e5901000          LDR      r1,[r0,#0]
0000f0  ea00000d          B        |L1.300|
0000f4  e5900000          LDR      r0,[r0,#0]
0000f8  e5901008          LDR      r1,[r0,#8]
0000fc  ea00000a          B        |L1.300|
000100  e5900000          LDR      r0,[r0,#0]
000104  e5901010          LDR      r1,[r0,#0x10]
000108  ea000007          B        |L1.300|
00010c  e5900000          LDR      r0,[r0,#0]
000110  e5901018          LDR      r1,[r0,#0x18]
000114  ea000004          B        |L1.300|
000118  e5900000          LDR      r0,[r0,#0]
00011c  e5901020          LDR      r1,[r0,#0x20]
000120  ea000001          B        |L1.300|
000124  e5900000          LDR      r0,[r0,#0]
000128  e5901028          LDR      r1,[r0,#0x28]
                  |L1.300|
00012c  e1a00fa1          LSR      r0,r1,#31
000130  e12fff1e          BX       lr
                          ENDP

                  clk_f1c100s_pll_set_rate PROC
;;;144    void clk_f1c100s_pll_set_rate(clk_pll_t* clk_pll, uint64_t prate, uint64_t rate)
000134  e12fff1e          BX       lr
;;;145    {
;;;146    }
;;;147    
                          ENDP

                  clk_f1c100s_pll_get_rate PROC
;;;148    uint64_t clk_f1c100s_pll_get_rate(clk_pll_t* clk_pll, uint64_t prate)
000138  e92d41f0          PUSH     {r4-r8,lr}
;;;149    {
;;;150      uint32_t r, n, k, m, p;
;;;151      uint64_t rate = 0;
;;;152    
;;;153      switch (clk_pll->channel) {
00013c  e5906008          LDR      r6,[r0,#8]
000140  e1a05000          MOV      r5,r0                 ;149
000144  e3a00000          MOV      r0,#0
000148  e3560006          CMP      r6,#6
00014c  e1a01000          MOV      r1,r0
000150  e1a0c000          MOV      r12,r0
000154  e3a04001          MOV      r4,#1
000158  379ff106          LDRCC    pc,[pc,r6,LSL #2]
                  |symbol_number.25|                  ; Alternate entry point
;;;154        case 0:
;;;155          r = read32(clk_pll->virt + CCU_PLL_CPU_CTRL);
;;;156          n = ((r >> 8) & 0x1f) + 1;
;;;157          k = ((r >> 4) & 0x3) + 1;
;;;158          m = ((r >> 0) & 0x3) + 1;
;;;159          p = ((r >> 16) & 0x3) + 1;
;;;160          rate = (uint64_t)((prate * n * k) / (m * p));
;;;161          break;
;;;162    
;;;163        case 1:
;;;164          r = read32(clk_pll->virt + CCU_PLL_AUDIO_CTRL);
;;;165          if (r & (1 << 24))
;;;166            n = ((r >> 8) & 0xf) + 1;
;;;167          else
;;;168            n = ((r >> 8) & 0x7f) + 1;
;;;169          m = ((r >> 0) & 0x1f) + 1;
;;;170          rate = (uint64_t)((prate * n * 2) / m);
;;;171          break;
;;;172    
;;;173        case 2:
;;;174          r = read32(clk_pll->virt + CCU_PLL_VIDEO_CTRL);
;;;175          if (r & (1 << 24)) {
;;;176            n = ((r >> 8) & 0x7f) + 1;
;;;177            m = ((r >> 0) & 0xf) + 1;
;;;178            rate = (uint64_t)((prate * n) / m);
;;;179          } else {
;;;180            if (r & (1 << 25))
;;;181              rate = 297 * 1000 * 1000;
;;;182            else
;;;183              rate = 270 * 1000 * 1000;
;;;184          }
;;;185          break;
;;;186    
;;;187        case 3:
;;;188          r = read32(clk_pll->virt + CCU_PLL_VE_CTRL);
;;;189          if (r & (1 << 24)) {
;;;190            n = ((r >> 8) & 0x7f) + 1;
;;;191            m = ((r >> 0) & 0xf) + 1;
;;;192            rate = (uint64_t)((prate * n) / m);
;;;193          } else {
;;;194            if (r & (1 << 25))
;;;195              rate = 297 * 1000 * 1000;
;;;196            else
;;;197              rate = 270 * 1000 * 1000;
;;;198          }
;;;199          break;
;;;200    
;;;201        case 4:
;;;202          r = read32(clk_pll->virt + CCU_PLL_DDR_CTRL);
;;;203          n = ((r >> 8) & 0x1f) + 1;
;;;204          k = ((r >> 4) & 0x3) + 1;
;;;205          m = ((r >> 0) & 0x3) + 1;
;;;206          rate = (uint64_t)((prate * n * k) / m);
;;;207          break;
;;;208    
;;;209        case 5:
;;;210          r = read32(clk_pll->virt + CCU_PLL_PERIPH_CTRL);
;;;211          n = ((r >> 8) & 0x1f) + 1;
;;;212          k = ((r >> 4) & 0x3) + 1;
;;;213          m = ((r >> 0) & 0x3) + 1;
;;;214          p = ((r >> 16) & 0x3) + 1;
;;;215          rate = (uint64_t)((prate * n * k) / p);
;;;216          break;
;;;217    
;;;218        default:
;;;219          break;
;;;220      }
;;;221    
;;;222      return rate;
;;;223    }
;;;224    
00015c  e8bd81f0          POP      {r4-r8,pc}
                          DCD      |symbol_number.25|+0x1c
                          DCD      |symbol_number.25|+0x70
                          DCD      |symbol_number.25|+0xb8
                          DCD      |symbol_number.25|+0x110
                          DCD      |symbol_number.25|+0x12c
                          DCD      |symbol_number.25|+0x174
000178  e5950000          LDR      r0,[r5,#0]
00017c  e5900000          LDR      r0,[r0,#0]
000180  e1a01d00          LSL      r1,r0,#26
000184  e2005003          AND      r5,r0,#3
000188  e1a06980          LSL      r6,r0,#19
00018c  e1a07700          LSL      r7,r0,#14
000190  e0840da6          ADD      r0,r4,r6,LSR #27
000194  e0841f21          ADD      r1,r4,r1,LSR #30
000198  e0844f27          ADD      r4,r4,r7,LSR #30
00019c  e2855001          ADD      r5,r5,#1
0001a0  e1640485          SMULBB   r4,r5,r4
0001a4  e0865092          UMULL    r5,r6,r2,r0
0001a8  e0206093          MLA      r0,r3,r0,r6
0001ac  e022029c          MLA      r2,r12,r2,r0
0001b0  e0830195          UMULL    r0,r3,r5,r1
0001b4  e0213192          MLA      r1,r2,r1,r3
0001b8  e1a02004          MOV      r2,r4
0001bc  e0211c95          MLA      r1,r5,r12,r1
0001c0  e3a03000          MOV      r3,#0
0001c4  ebfffffe          BL       __aeabi_uldivmod
0001c8  e8bd81f0          POP      {r4-r8,pc}
0001cc  e5950000          LDR      r0,[r5,#0]
0001d0  e5900008          LDR      r0,[r0,#8]
0001d4  e3100401          TST      r0,#0x1000000
0001d8  11a01a00          LSLNE    r1,r0,#20
0001dc  10841e21          ADDNE    r1,r4,r1,LSR #28
0001e0  01a01880          LSLEQ    r1,r0,#17
0001e4  00841ca1          ADDEQ    r1,r4,r1,LSR #25
0001e8  e200001f          AND      r0,r0,#0x1f
0001ec  e2804001          ADD      r4,r0,#1
0001f0  e0850192          UMULL    r0,r5,r2,r1
0001f4  e0900000          ADDS     r0,r0,r0
0001f8  e0215193          MLA      r1,r3,r1,r5
0001fc  e3a03000          MOV      r3,#0
000200  e0211c92          MLA      r1,r2,r12,r1
000204  e1a02004          MOV      r2,r4
000208  e0a11001          ADC      r1,r1,r1
00020c  ebfffffe          BL       __aeabi_uldivmod
000210  e8bd81f0          POP      {r4-r8,pc}
000214  e5950000          LDR      r0,[r5,#0]
000218  e5900010          LDR      r0,[r0,#0x10]
00021c  e3100401          TST      r0,#0x1000000
000220  0a00000a          BEQ      |L1.592|
                  |L1.548|
000224  e1a01880          LSL      r1,r0,#17
000228  e200000f          AND      r0,r0,#0xf
00022c  e0841ca1          ADD      r1,r4,r1,LSR #25
000230  e2804001          ADD      r4,r0,#1
000234  e0850192          UMULL    r0,r5,r2,r1
000238  e0215193          MLA      r1,r3,r1,r5
00023c  e3a03000          MOV      r3,#0
000240  e0211c92          MLA      r1,r2,r12,r1
000244  e1a02004          MOV      r2,r4
000248  ebfffffe          BL       __aeabi_uldivmod
00024c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.592|
000250  e3100402          TST      r0,#0x2000000
000254  0a000001          BEQ      |L1.608|
                  |L1.600|
000258  e59f00b8          LDR      r0,|L1.792|
00025c  ea000000          B        |L1.612|
                  |L1.608|
000260  e59f00b4          LDR      r0,|L1.796|
                  |L1.612|
000264  e3a01000          MOV      r1,#0
000268  e8bd81f0          POP      {r4-r8,pc}
00026c  e5950000          LDR      r0,[r5,#0]
000270  e5900018          LDR      r0,[r0,#0x18]
000274  e3100401          TST      r0,#0x1000000
000278  1affffe9          BNE      |L1.548|
00027c  e3100402          TST      r0,#0x2000000
000280  0afffff6          BEQ      |L1.608|
000284  eafffff3          B        |L1.600|
000288  e5950000          LDR      r0,[r5,#0]
00028c  e5900020          LDR      r0,[r0,#0x20]
000290  e1a01d00          LSL      r1,r0,#26
000294  e1a06980          LSL      r6,r0,#19
000298  e2005003          AND      r5,r0,#3
00029c  e0840da6          ADD      r0,r4,r6,LSR #27
0002a0  e0841f21          ADD      r1,r4,r1,LSR #30
0002a4  e2854001          ADD      r4,r5,#1
0002a8  e0865092          UMULL    r5,r6,r2,r0
0002ac  e0206093          MLA      r0,r3,r0,r6
0002b0  e022029c          MLA      r2,r12,r2,r0
0002b4  e0830195          UMULL    r0,r3,r5,r1
0002b8  e0213192          MLA      r1,r2,r1,r3
0002bc  e1a02004          MOV      r2,r4
0002c0  e0211c95          MLA      r1,r5,r12,r1
0002c4  e3a03000          MOV      r3,#0
0002c8  ebfffffe          BL       __aeabi_uldivmod
0002cc  e8bd81f0          POP      {r4-r8,pc}
0002d0  e5950000          LDR      r0,[r5,#0]
0002d4  e5900028          LDR      r0,[r0,#0x28]
0002d8  e1a01d00          LSL      r1,r0,#26
0002dc  e1a06980          LSL      r6,r0,#19
0002e0  e1a05700          LSL      r5,r0,#14
0002e4  e0840da6          ADD      r0,r4,r6,LSR #27
0002e8  e0841f21          ADD      r1,r4,r1,LSR #30
0002ec  e0844f25          ADD      r4,r4,r5,LSR #30
0002f0  e0865092          UMULL    r5,r6,r2,r0
0002f4  e0206093          MLA      r0,r3,r0,r6
0002f8  e022029c          MLA      r2,r12,r2,r0
0002fc  e0830195          UMULL    r0,r3,r5,r1
000300  e0213192          MLA      r1,r2,r1,r3
000304  e1a02004          MOV      r2,r4
000308  e0211c95          MLA      r1,r5,r12,r1
00030c  e3a03000          MOV      r3,#0
000310  ebfffffe          BL       __aeabi_uldivmod
000314  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.792|
                          DCD      0x11b3dc40
                  |L1.796|
                          DCD      0x1017df80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  clk_hosc
                          DCD      0x01c20000
                          DCD      0x00000000
                          DCD      0xffffffff
                          DCD      0x016e3600
