; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\mmu_c.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\mmu_c.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\mmu_c.crf ..\system\mmu_c.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  MMU_CleanDCacheArray PROC
;;;19     ////////////////////////////////////////////////////////////////////////////////
;;;20     void MMU_CleanDCacheArray(unsigned long mva, unsigned long num)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;21     {
000004  e1a04000          MOV      r4,r0
000008  e1a06001          MOV      r6,r1
;;;22       signed long size = num;
00000c  e1a05006          MOV      r5,r6
;;;23       while (size > 0) {
000010  ea000003          B        |L1.36|
                  |L1.20|
;;;24         MMU_CleanDCacheMVA(mva);
000014  e1a00004          MOV      r0,r4
000018  ebfffffe          BL       MMU_CleanDCacheMVA
;;;25         mva += CACHE_ALIGN;
00001c  e2844020          ADD      r4,r4,#0x20
;;;26         size -= CACHE_ALIGN;
000020  e2455020          SUB      r5,r5,#0x20
                  |L1.36|
000024  e3550000          CMP      r5,#0                 ;23
000028  cafffff9          BGT      |L1.20|
;;;27       }
;;;28       MMU_DrainWriteBuffer();
00002c  ebfffffe          BL       MMU_DrainWriteBuffer
;;;29     }
000030  e8bd8070          POP      {r4-r6,pc}
;;;30     
                          ENDP

                  MMU_InvalidateDCacheArray PROC
;;;42     ////////////////////////////////////////////////////////////////////////////////
;;;43     void MMU_InvalidateDCacheArray(unsigned long mva, unsigned long num)
000034  e92d4070          PUSH     {r4-r6,lr}
;;;44     {
000038  e1a04000          MOV      r4,r0
00003c  e1a06001          MOV      r6,r1
;;;45       signed long size = num;
000040  e1a05006          MOV      r5,r6
;;;46       while (size > 0) {
000044  ea000003          B        |L1.88|
                  |L1.72|
;;;47         MMU_InvalidateDCacheMVA(mva);
000048  e1a00004          MOV      r0,r4
00004c  ebfffffe          BL       MMU_InvalidateDCacheMVA
;;;48         mva += CACHE_ALIGN;
000050  e2844020          ADD      r4,r4,#0x20
;;;49         size -= CACHE_ALIGN;
000054  e2455020          SUB      r5,r5,#0x20
                  |L1.88|
000058  e3550000          CMP      r5,#0                 ;46
00005c  cafffff9          BGT      |L1.72|
;;;50       }
;;;51     }
000060  e8bd8070          POP      {r4-r6,pc}
;;;52     
                          ENDP

