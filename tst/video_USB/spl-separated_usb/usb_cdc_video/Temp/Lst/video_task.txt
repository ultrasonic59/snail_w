; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\video_task.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\video_task.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\video_task.crf users\video_task.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  board_millis PROC
;;;15     
;;;16     uint32_t board_millis(void)
000000  e59f025c          LDR      r0,|L1.612|
;;;17     {
;;;18     ////  return os_time_get();
;;;19     return 	sys_tick;
000004  e5900000          LDR      r0,[r0,#0]  ; os_time
;;;20     }
000008  e12fff1e          BX       lr
;;;21     #if 0
                          ENDP

                  fill_color_bar PROC
;;;35     
;;;36     static void fill_color_bar(uint8_t *buffer, unsigned start_position)
00000c  e92d5ff0          PUSH     {r4-r12,lr}
;;;37     {
000010  e1a04000          MOV      r4,r0
000014  e1a07001          MOV      r7,r1
;;;38     	uint8_t btmp=0;
000018  e3a08000          MOV      r8,#0
;;;39       /* EBU color bars
;;;40        * See also https://stackoverflow.com/questions/6939422 */
;;;41     #if 1	
;;;42       static uint8_t const bar_color[8][4] = {
;;;43         /*  Y,   U,   Y,   V */
;;;44         { 235, 128, 235, 128}, /* 100% White */
;;;45         { 219,  16, 219, 138}, /* Yellow */
;;;46         { 188, 154, 188,  16}, /* Cyan */
;;;47         { 173,  42, 173,  26}, /* Green */
;;;48         {  78, 214,  78, 230}, /* Magenta */
;;;49         {  63, 102,  63, 240}, /* Red */
;;;50         {  32, 240,  32, 118}, /* Blue */
;;;51         {  16, 128,  16, 128}, /* Black */
;;;52       };
;;;53     #endif	
;;;54       uint8_t *p;
;;;55     
;;;56       /* Generate the 1st line */
;;;57       uint8_t *end = &buffer[FRAME_WIDTH * 2];
00001c  e284bd0a          ADD      r11,r4,#0x280
;;;58       unsigned idx = (FRAME_WIDTH / 2 - 1) - (start_position % (FRAME_WIDTH / 2));
000020  e3a010a0          MOV      r1,#0xa0
000024  e1a00007          MOV      r0,r7
000028  ebfffffe          BL       __aeabi_uidivmod
00002c  e261909f          RSB      r9,r1,#0x9f
;;;59       p = &buffer[idx * 4];
000030  e0845109          ADD      r5,r4,r9,LSL #2
;;;60       for (unsigned i = 0; i < 8; ++i) {
000034  e3a06000          MOV      r6,#0
000038  ea000013          B        |L1.140|
                  |L1.60|
;;;61         for (int j = 0; j < FRAME_WIDTH / (2 * 8); ++j) {
00003c  e3a0a000          MOV      r10,#0
000040  ea00000e          B        |L1.128|
                  |L1.68|
;;;62     			btmp=i+tst_offs;
000044  e59f021c          LDR      r0,|L1.616|
000048  e5d00000          LDRB     r0,[r0,#0]  ; tst_offs
00004c  e0800006          ADD      r0,r0,r6
000050  e20080ff          AND      r8,r0,#0xff
;;;63     			btmp&=0x7;
000054  e2088007          AND      r8,r8,#7
;;;64           memcpy(p, &bar_color[btmp], 4);
000058  e59f020c          LDR      r0,|L1.620|
00005c  e0801108          ADD      r1,r0,r8,LSL #2
000060  e3a02004          MOV      r2,#4
000064  e1a00005          MOV      r0,r5
000068  ebfffffe          BL       __aeabi_memcpy
;;;65           p += 4;
00006c  e2855004          ADD      r5,r5,#4
;;;66           if (end <= p) {
000070  e15b0005          CMP      r11,r5
000074  8a000000          BHI      |L1.124|
;;;67             p = buffer;
000078  e1a05004          MOV      r5,r4
                  |L1.124|
00007c  e28aa001          ADD      r10,r10,#1            ;61
                  |L1.128|
000080  e35a0014          CMP      r10,#0x14             ;61
000084  baffffee          BLT      |L1.68|
000088  e2866001          ADD      r6,r6,#1              ;60
                  |L1.140|
00008c  e3560008          CMP      r6,#8                 ;60
000090  3affffe9          BCC      |L1.60|
;;;68           }
;;;69         }
;;;70       }
;;;71       /* Duplicate the 1st line to the others */
;;;72       p = &buffer[FRAME_WIDTH * 2];
000094  e2845d0a          ADD      r5,r4,#0x280
;;;73       for (unsigned i = 1; i < FRAME_HEIGHT; ++i) {
000098  e3a06001          MOV      r6,#1
00009c  ea000005          B        |L1.184|
                  |L1.160|
;;;74         memcpy(p, buffer, FRAME_WIDTH * 2);
0000a0  e3a02d0a          MOV      r2,#0x280
0000a4  e1a01004          MOV      r1,r4
0000a8  e1a00005          MOV      r0,r5
0000ac  ebfffffe          BL       __aeabi_memcpy
;;;75         p += FRAME_WIDTH * 2;
0000b0  e2855d0a          ADD      r5,r5,#0x280
0000b4  e2866001          ADD      r6,r6,#1              ;73
                  |L1.184|
0000b8  e35600f0          CMP      r6,#0xf0              ;73
0000bc  3afffff7          BCC      |L1.160|
;;;76       }
;;;77     	tst_offs++;
0000c0  e59f01a0          LDR      r0,|L1.616|
0000c4  e5d00000          LDRB     r0,[r0,#0]  ; tst_offs
0000c8  e2800001          ADD      r0,r0,#1
0000cc  e59f1194          LDR      r1,|L1.616|
0000d0  e5c10000          STRB     r0,[r1,#0]  ; tst_offs
;;;78     }
0000d4  e8bd9ff0          POP      {r4-r12,pc}
;;;79     extern uint8_t fb_y[];
                          ENDP

                  _fill_color_bar PROC
;;;82     
;;;83     static void _fill_color_bar(uint8_t *buffer, unsigned start_position)
0000d8  e92d4070          PUSH     {r4-r6,lr}
;;;84     {
0000dc  e1a03000          MOV      r3,r0
0000e0  e1a05001          MOV      r5,r1
;;;85     uint8_t *p;
;;;86     	unsigned yy=0;
0000e4  e3a01000          MOV      r1,#0
;;;87     	unsigned cc=0;
0000e8  e3a02000          MOV      r2,#0
;;;88     uint32_t *pbuf;/////= (uint32_t *)&bar_color[4][0];
;;;89     	p = &buffer[0];
0000ec  e1a00003          MOV      r0,r3
;;;90     for (unsigned i = 0; i < FRAME_HEIGHT; ++i) {
0000f0  e3a0c000          MOV      r12,#0
0000f4  ea000014          B        |L1.332|
                  |L1.248|
;;;91     		for(unsigned j = 0; j < FRAME_WIDTH*2; j++)
0000f8  e3a04000          MOV      r4,#0
0000fc  ea00000f          B        |L1.320|
                  |L1.256|
;;;92     		{
;;;93     		*p++	= fb_y[yy];
000100  e59f6168          LDR      r6,|L1.624|
000104  e7d66001          LDRB     r6,[r6,r1]
000108  e4c06001          STRB     r6,[r0],#1
;;;94     		*p++	= fb_c[cc];
00010c  e59f6160          LDR      r6,|L1.628|
000110  e7d66002          LDRB     r6,[r6,r2]
000114  e4c06001          STRB     r6,[r0],#1
;;;95     		yy++;	
000118  e2811001          ADD      r1,r1,#1
;;;96     		*p++	= fb_y[yy];
00011c  e59f614c          LDR      r6,|L1.624|
000120  e7d66001          LDRB     r6,[r6,r1]
000124  e4c06001          STRB     r6,[r0],#1
;;;97     		*p++	= fb_c[cc];
000128  e59f6144          LDR      r6,|L1.628|
00012c  e7d66002          LDRB     r6,[r6,r2]
000130  e4c06001          STRB     r6,[r0],#1
;;;98     		yy++;	
000134  e2811001          ADD      r1,r1,#1
;;;99     		cc++;
000138  e2822001          ADD      r2,r2,#1
00013c  e2844001          ADD      r4,r4,#1              ;91
                  |L1.320|
000140  e3540d0a          CMP      r4,#0x280             ;91
000144  3affffed          BCC      |L1.256|
000148  e28cc001          ADD      r12,r12,#1            ;90
                  |L1.332|
00014c  e35c00f0          CMP      r12,#0xf0             ;90
000150  3affffe8          BCC      |L1.248|
;;;100    		}
;;;101    			
;;;102    	////		memset(p,*pbuf,FRAME_WIDTH * 2);
;;;103     ///// memcpy(p, buffer, FRAME_WIDTH * 2);
;;;104     /// p += FRAME_WIDTH * 2;
;;;105      }
;;;106    }
000154  e8bd8070          POP      {r4-r6,pc}
;;;107    
                          ENDP

                  video_tsk PROC
;;;109    
;;;110    void video_tsk(void)
000158  e92d4010          PUSH     {r4,lr}
;;;111    {
;;;112      static unsigned start_ms = 0;
;;;113      static unsigned already_sent = 0;
;;;114    ////tu_printf("\r\n======video_task=============");
;;;115    
;;;116      if (!tud_video_n_streaming(0, 0)) {
00015c  e3a01000          MOV      r1,#0
000160  e1a00001          MOV      r0,r1
000164  ebfffffe          BL       tud_video_n_streaming
000168  e3500000          CMP      r0,#0
00016c  1a000005          BNE      |L1.392|
;;;117        already_sent  = 0;
000170  e3a00000          MOV      r0,#0
000174  e59f10fc          LDR      r1,|L1.632|
000178  e5810000          STR      r0,[r1,#0]  ; already_sent
;;;118        frame_num     = 0;
00017c  e59f10f8          LDR      r1,|L1.636|
000180  e5810000          STR      r0,[r1,#0]  ; frame_num
                  |L1.388|
;;;119        return;
;;;120      }
;;;121    /////tu_printf("\r\n======video_task1=============");
;;;122    	
;;;123    
;;;124      if (!already_sent) {
;;;125        already_sent = 1;
;;;126        start_ms = board_millis();
;;;127        fill_color_bar(frame_buffer, frame_num);
;;;128    		
;;;129        tud_video_n_frame_xfer(0, 0, (void*)frame_buffer, FRAME_WIDTH * FRAME_HEIGHT * 16/8);
;;;130      }
;;;131    
;;;132      unsigned cur = board_millis();
;;;133      if (cur - start_ms < interval_ms) 
;;;134    		return; // not enough time
;;;135      if (tx_busy) 
;;;136    		return;
;;;137      start_ms += interval_ms;
;;;138    /////tu_printf("\r\n======video_task2=============");
;;;139    
;;;140      fill_color_bar(frame_buffer, frame_num);
;;;141      tud_video_n_frame_xfer(0, 0, (void*)frame_buffer, FRAME_WIDTH * FRAME_HEIGHT * 16/8);
;;;142    }
000184  e8bd8010          POP      {r4,pc}
                  |L1.392|
000188  e59f00e8          LDR      r0,|L1.632|
00018c  e5900000          LDR      r0,[r0,#0]            ;124  ; already_sent
000190  e3500000          CMP      r0,#0                 ;124
000194  1a00000e          BNE      |L1.468|
000198  e3a00001          MOV      r0,#1                 ;125
00019c  e59f10d4          LDR      r1,|L1.632|
0001a0  e5810000          STR      r0,[r1,#0]            ;125  ; already_sent
0001a4  ebfffffe          BL       board_millis
0001a8  e59f10d0          LDR      r1,|L1.640|
0001ac  e5810000          STR      r0,[r1,#0]            ;126  ; start_ms
0001b0  e59f00c4          LDR      r0,|L1.636|
0001b4  e5901000          LDR      r1,[r0,#0]            ;127  ; frame_num
0001b8  e59f00c4          LDR      r0,|L1.644|
0001bc  ebfffffe          BL       fill_color_bar
0001c0  e3a03b96          MOV      r3,#0x25800           ;129
0001c4  e59f20b8          LDR      r2,|L1.644|
0001c8  e3a01000          MOV      r1,#0                 ;129
0001cc  e1a00001          MOV      r0,r1                 ;129
0001d0  ebfffffe          BL       tud_video_n_frame_xfer
                  |L1.468|
0001d4  ebfffffe          BL       board_millis
0001d8  e1a04000          MOV      r4,r0                 ;132
0001dc  e59f009c          LDR      r0,|L1.640|
0001e0  e5900000          LDR      r0,[r0,#0]            ;133  ; start_ms
0001e4  e0440000          SUB      r0,r4,r0              ;133
0001e8  e59f1098          LDR      r1,|L1.648|
0001ec  e5911000          LDR      r1,[r1,#0]            ;133  ; interval_ms
0001f0  e1500001          CMP      r0,r1                 ;133
0001f4  2a000000          BCS      |L1.508|
0001f8  eaffffe1          B        |L1.388|
                  |L1.508|
0001fc  e59f0088          LDR      r0,|L1.652|
000200  e5900000          LDR      r0,[r0,#0]            ;135  ; tx_busy
000204  e3500000          CMP      r0,#0                 ;135
000208  0a000000          BEQ      |L1.528|
00020c  eaffffdc          B        |L1.388|
                  |L1.528|
000210  e59f0068          LDR      r0,|L1.640|
000214  e5900000          LDR      r0,[r0,#0]            ;137  ; start_ms
000218  e59f1068          LDR      r1,|L1.648|
00021c  e5911000          LDR      r1,[r1,#0]            ;137  ; interval_ms
000220  e0800001          ADD      r0,r0,r1              ;137
000224  e59f1054          LDR      r1,|L1.640|
000228  e5810000          STR      r0,[r1,#0]            ;137  ; start_ms
00022c  e59f0048          LDR      r0,|L1.636|
000230  e5901000          LDR      r1,[r0,#0]            ;140  ; frame_num
000234  e59f0048          LDR      r0,|L1.644|
000238  ebfffffe          BL       fill_color_bar
00023c  e3a03b96          MOV      r3,#0x25800           ;141
000240  e59f203c          LDR      r2,|L1.644|
000244  e3a01000          MOV      r1,#0                 ;141
000248  e1a00001          MOV      r0,r1                 ;141
00024c  ebfffffe          BL       tud_video_n_frame_xfer
000250  e1a00000          MOV      r0,r0
000254  eaffffca          B        |L1.388|
;;;143    
                          ENDP

                  video_task PROC
;;;144    void video_task(void)
000258  e92d4010          PUSH     {r4,lr}
;;;145    {
;;;146    /////printf("\r\n======video_task=============");
;;;147    	
;;;148    /////	for(;;)
;;;149    	{
;;;150    	video_tsk()	;
00025c  ebfffffe          BL       video_tsk
;;;151    	}
;;;152    }
000260  e8bd8010          POP      {r4,pc}
;;;153    
                          ENDP

                  |L1.612|
                          DCD      os_time
                  |L1.616|
                          DCD      tst_offs
                  |L1.620|
                          DCD      bar_color
                  |L1.624|
                          DCD      fb_y
                  |L1.628|
                          DCD      fb_c
                  |L1.632|
                          DCD      already_sent
                  |L1.636|
                          DCD      frame_num
                  |L1.640|
                          DCD      start_ms
                  |L1.644|
                          DCD      frame_buffer
                  |L1.648|
                          DCD      interval_ms
                  |L1.652|
                          DCD      tx_busy

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  frame_buffer
                          %        153600

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  bar_color
000000  eb80eb80          DCB      0xeb,0x80,0xeb,0x80
000004  db10db8a          DCB      0xdb,0x10,0xdb,0x8a
000008  bc9abc10          DCB      0xbc,0x9a,0xbc,0x10
00000c  ad2aad1a          DCB      0xad,0x2a,0xad,0x1a
000010  4ed64ee6          DCB      0x4e,0xd6,0x4e,0xe6
000014  3f663ff0          DCB      0x3f,0x66,0x3f,0xf0
000018  20f02076          DCB      0x20,0xf0,0x20,0x76
00001c  10801080          DCB      0x10,0x80,0x10,0x80

                          AREA ||.data||, DATA, ALIGN=2

                  tx_busy
                          DCD      0x00000000
                  frame_num
                          DCD      0x00000000
                  interval_ms
                          DCD      0x00000032
                  tst_offs
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  start_ms
                          DCD      0x00000000
                  already_sent
                          DCD      0x00000000
