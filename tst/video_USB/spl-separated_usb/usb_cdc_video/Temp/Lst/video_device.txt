; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\video_device.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\video_device.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\video_device.crf ..\tinyusb\src\class\video\video_device.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  _get_instance_streaming PROC
;;;159     * @return instance */
;;;160    static videod_streaming_interface_t* _get_instance_streaming(uint_fast8_t ctl_idx, uint_fast8_t stm_idx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;161    {
000004  e1a05000          MOV      r5,r0
000008  e1a06001          MOV      r6,r1
;;;162      videod_interface_t *ctl = &_videod_itf[ctl_idx];
00000c  e0850085          ADD      r0,r5,r5,LSL #1
000010  e0800185          ADD      r0,r0,r5,LSL #3
000014  e59f1718          LDR      r1,|L1.1844|
000018  e0807001          ADD      r7,r0,r1
;;;163      if (!ctl->beg) 
00001c  e1a00007          MOV      r0,r7
000020  ebfffffe          BL       __aeabi_uread4
000024  e3500000          CMP      r0,#0
000028  1a000001          BNE      |L1.52|
;;;164    		return NULL;
00002c  e3a00000          MOV      r0,#0
                  |L1.48|
;;;165      videod_streaming_interface_t *stm = &_videod_streaming_itf[ctl->stm[stm_idx]];
;;;166      if (!stm->desc.beg) 
;;;167    		return NULL;
;;;168      return stm;
;;;169    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L1.52|
000034  e2870008          ADD      r0,r7,#8              ;165
000038  e7d00006          LDRB     r0,[r0,r6]            ;165
00003c  e0800180          ADD      r0,r0,r0,LSL #3       ;165
000040  e59f16f0          LDR      r1,|L1.1848|
000044  e0814280          ADD      r4,r1,r0,LSL #5       ;165
000048  e1d400b2          LDRH     r0,[r4,#2]            ;166
00004c  e3500000          CMP      r0,#0                 ;166
000050  1a000001          BNE      |L1.92|
000054  e3a00000          MOV      r0,#0                 ;167
000058  eafffff4          B        |L1.48|
                  |L1.92|
00005c  e1a00004          MOV      r0,r4                 ;168
000060  eafffff2          B        |L1.48|
;;;170    
                          ENDP

                  _get_desc_vc PROC
;;;171    static tusb_desc_vc_itf_t const* _get_desc_vc(videod_interface_t const *self)
000064  e92d4010          PUSH     {r4,lr}
;;;172    {
000068  e1a04000          MOV      r4,r0
;;;173      return (tusb_desc_vc_itf_t const *)(self->beg + self->cur);
00006c  e1a00004          MOV      r0,r4
000070  ebfffffe          BL       __aeabi_uread4
000074  e5d41007          LDRB     r1,[r4,#7]
000078  e5d42006          LDRB     r2,[r4,#6]
00007c  e1821401          ORR      r1,r2,r1,LSL #8
000080  e0800001          ADD      r0,r0,r1
;;;174    }
000084  e8bd8010          POP      {r4,pc}
;;;175    
                          ENDP

                  _get_desc_vs PROC
;;;176    static tusb_desc_vs_itf_t const* _get_desc_vs(videod_streaming_interface_t const *self)
000088  e92d4070          PUSH     {r4-r6,lr}
;;;177    {
00008c  e1a04000          MOV      r4,r0
;;;178      if (!self->desc.cur) return NULL;
000090  e1d400b6          LDRH     r0,[r4,#6]
000094  e3500000          CMP      r0,#0
000098  1a000001          BNE      |L1.164|
00009c  e3a00000          MOV      r0,#0
                  |L1.160|
;;;179      uint8_t const *desc = _videod_itf[self->index_vc].beg;
;;;180      return (tusb_desc_vs_itf_t const*)(desc + self->desc.cur);
;;;181    }
0000a0  e8bd8070          POP      {r4-r6,pc}
                  |L1.164|
0000a4  e5d41000          LDRB     r1,[r4,#0]            ;179
0000a8  e0812081          ADD      r2,r1,r1,LSL #1       ;179
0000ac  e0821181          ADD      r1,r2,r1,LSL #3       ;179
0000b0  e59f267c          LDR      r2,|L1.1844|
0000b4  e0810002          ADD      r0,r1,r2              ;179
0000b8  ebfffffe          BL       __aeabi_uread4
0000bc  e1a05000          MOV      r5,r0                 ;179
0000c0  e1d400b6          LDRH     r0,[r4,#6]            ;180
0000c4  e0800005          ADD      r0,r0,r5              ;180
0000c8  eafffff4          B        |L1.160|
;;;182    
                          ENDP

                  _find_desc PROC
;;;190     * @retval end   did not found interface descriptor */
;;;191    static void const* _find_desc(void const *beg, void const *end, uint_fast8_t desc_type)
0000cc  e92d4030          PUSH     {r4,r5,lr}
;;;192    {
0000d0  e1a03000          MOV      r3,r0
0000d4  e1a0c001          MOV      r12,r1
;;;193      void const *cur = beg;
0000d8  e1a00003          MOV      r0,r3
;;;194      while ((cur < end) && (desc_type != tu_desc_type(cur))) {
0000dc  ea000004          B        |L1.244|
                  |L1.224|
;;;195        cur = tu_desc_next(cur);
0000e0  e1a01000          MOV      r1,r0
0000e4  e1a04001          MOV      r4,r1
0000e8  e5d45000          LDRB     r5,[r4,#0]
0000ec  e0855004          ADD      r5,r5,r4
0000f0  e1a00005          MOV      r0,r5
                  |L1.244|
0000f4  e150000c          CMP      r0,r12                ;194
0000f8  2a000003          BCS      |L1.268|
0000fc  e1a00000          MOV      r0,r0                 ;194
000100  e5d01001          LDRB     r1,[r0,#1]            ;194
000104  e1510002          CMP      r1,r2                 ;194
000108  1afffff4          BNE      |L1.224|
                  |L1.268|
;;;196      }
;;;197    	
;;;198      return cur;
;;;199    }
00010c  e8bd8030          POP      {r4,r5,pc}
;;;200    
                          ENDP

                  _find_desc_3 PROC
;;;210     * @retval end   did not found interface descriptor */
;;;211    static void const* _find_desc_3(void const *beg, void const *end,
000110  e92d47f0          PUSH     {r4-r10,lr}
;;;212                                    uint_fast8_t desc_type,
;;;213                                    uint_fast8_t element_0,
;;;214                                    uint_fast8_t element_1)
;;;215    {
000114  e1a06000          MOV      r6,r0
000118  e1a05001          MOV      r5,r1
00011c  e1a08002          MOV      r8,r2
000120  e1a07003          MOV      r7,r3
000124  e59d9020          LDR      r9,[sp,#0x20]
;;;216      for (void const *cur = beg; cur < end; cur = _find_desc(cur, end, desc_type)) {
000128  e1a04006          MOV      r4,r6
00012c  ea000012          B        |L1.380|
                  |L1.304|
;;;217        uint8_t const *p = (uint8_t const *)cur;
000130  e1a01004          MOV      r1,r4
;;;218        if ((p[2] == element_0) && (p[3] == element_1)) {
000134  e5d10002          LDRB     r0,[r1,#2]
000138  e1500007          CMP      r0,r7
00013c  1a000004          BNE      |L1.340|
000140  e5d10003          LDRB     r0,[r1,#3]
000144  e1500009          CMP      r0,r9
000148  1a000001          BNE      |L1.340|
;;;219          return cur;
00014c  e1a00004          MOV      r0,r4
                  |L1.336|
;;;220        }
;;;221        cur = tu_desc_next(cur);
;;;222      }
;;;223      return end;
;;;224    }
000150  e8bd87f0          POP      {r4-r10,pc}
                  |L1.340|
000154  e1a00004          MOV      r0,r4                 ;221
000158  e1a02000          MOV      r2,r0                 ;221
00015c  e5d23000          LDRB     r3,[r2,#0]            ;221
000160  e0833002          ADD      r3,r3,r2              ;221
000164  e1a04003          MOV      r4,r3                 ;221
000168  e1a02008          MOV      r2,r8                 ;216
00016c  e1a01005          MOV      r1,r5                 ;216
000170  e1a00004          MOV      r0,r4                 ;216
000174  ebfffffe          BL       _find_desc
000178  e1a04000          MOV      r4,r0                 ;216
                  |L1.380|
00017c  e1540005          CMP      r4,r5                 ;216
000180  3affffea          BCC      |L1.304|
000184  e1a00005          MOV      r0,r5                 ;223
000188  eafffff0          B        |L1.336|
;;;225    
                          ENDP

                  _next_desc_itf PROC
;;;232     * @retval end   did not found interface descriptor */
;;;233    static void const* _next_desc_itf(void const *beg, void const *end)
00018c  e92d41f0          PUSH     {r4-r8,lr}
;;;234    {
000190  e1a05000          MOV      r5,r0
000194  e1a06001          MOV      r6,r1
;;;235      void const *cur = beg;
000198  e1a04005          MOV      r4,r5
;;;236      uint_fast8_t itfnum = ((tusb_desc_interface_t const*)cur)->bInterfaceNumber;
00019c  e5d47002          LDRB     r7,[r4,#2]
;;;237      while ((cur < end) &&
0001a0  ea000009          B        |L1.460|
                  |L1.420|
;;;238             (itfnum == ((tusb_desc_interface_t const*)cur)->bInterfaceNumber)) {
;;;239        cur = _find_desc(tu_desc_next(cur), end, TUSB_DESC_INTERFACE);
0001a4  e1a00004          MOV      r0,r4
0001a8  e1a01000          MOV      r1,r0
0001ac  e5d12000          LDRB     r2,[r1,#0]
0001b0  e0822001          ADD      r2,r2,r1
0001b4  e1a08002          MOV      r8,r2
0001b8  e3a02004          MOV      r2,#4
0001bc  e1a01006          MOV      r1,r6
0001c0  e1a00008          MOV      r0,r8
0001c4  ebfffffe          BL       _find_desc
0001c8  e1a04000          MOV      r4,r0
                  |L1.460|
0001cc  e1540006          CMP      r4,r6                 ;237
0001d0  2a000002          BCS      |L1.480|
0001d4  e5d40002          LDRB     r0,[r4,#2]            ;238
0001d8  e1500007          CMP      r0,r7                 ;238
0001dc  0afffff0          BEQ      |L1.420|
                  |L1.480|
;;;240      }
;;;241      return cur;
0001e0  e1a00004          MOV      r0,r4
;;;242    }
0001e4  e8bd81f0          POP      {r4-r8,pc}
;;;243    
                          ENDP

                  _find_desc_ep PROC
;;;266     * @retval end   did not found endpoint descriptor */
;;;267    static void const* _find_desc_ep(void const *beg, void const *end)
0001e8  e92d4010          PUSH     {r4,lr}
;;;268    {
0001ec  e1a03000          MOV      r3,r0
0001f0  e1a02001          MOV      r2,r1
;;;269      for (void const *cur = beg; cur < end; cur = tu_desc_next(cur)) {
0001f4  e1a00003          MOV      r0,r3
0001f8  ea00000d          B        |L1.564|
                  |L1.508|
;;;270        uint_fast8_t desc_type = tu_desc_type(cur);
0001fc  e1a00000          MOV      r0,r0
000200  e5d0c001          LDRB     r12,[r0,#1]
000204  e1a0100c          MOV      r1,r12
;;;271        if (TUSB_DESC_ENDPOINT == desc_type) 
000208  e3510005          CMP      r1,#5
00020c  1a000000          BNE      |L1.532|
                  |L1.528|
;;;272    			return cur;
;;;273        if (TUSB_DESC_INTERFACE == desc_type) 
;;;274    			break;
;;;275      }
;;;276      return end;
;;;277    }
000210  e8bd8010          POP      {r4,pc}
                  |L1.532|
000214  e3510004          CMP      r1,#4                 ;273
000218  1a000000          BNE      |L1.544|
00021c  ea000006          B        |L1.572|
                  |L1.544|
000220  e1a01000          MOV      r1,r0                 ;269
000224  e1a0c001          MOV      r12,r1                ;269
000228  e5dc4000          LDRB     r4,[r12,#0]           ;269
00022c  e084400c          ADD      r4,r4,r12             ;269
000230  e1a00004          MOV      r0,r4                 ;269
                  |L1.564|
000234  e1500002          CMP      r0,r2                 ;269
000238  3affffef          BCC      |L1.508|
                  |L1.572|
00023c  e1a00000          MOV      r0,r0                 ;274
000240  e1a00002          MOV      r0,r2                 ;276
000244  eafffff1          B        |L1.528|
;;;278    
                          ENDP

                  _find_desc_entity PROC
;;;293     * @retval end   did not found interface descriptor */
;;;294    static void const* _find_desc_entity(void const *desc, uint_fast8_t entityid)
000248  e92d41f0          PUSH     {r4-r8,lr}
;;;295    {
00024c  e1a06000          MOV      r6,r0
000250  e1a07001          MOV      r7,r1
;;;296      void const *end = _end_of_control_descriptor(desc);
000254  e1a00006          MOV      r0,r6
000258  ebfffffe          BL       _end_of_control_descriptor
00025c  e1a05000          MOV      r5,r0
;;;297      for (void const *cur = desc; cur < end; cur = _find_desc(cur, end, TUSB_DESC_CS_INTERFACE)) {
000260  e1a04006          MOV      r4,r6
000264  ea000014          B        |L1.700|
                  |L1.616|
;;;298        tusb_desc_cs_video_entity_itf_t const *itf = (tusb_desc_cs_video_entity_itf_t const *)cur;
000268  e1a00004          MOV      r0,r4
;;;299        if ((VIDEO_CS_ITF_VC_INPUT_TERMINAL  <= itf->bDescriptorSubtype
00026c  e5d01002          LDRB     r1,[r0,#2]
000270  e3510002          CMP      r1,#2
000274  ba000006          BLT      |L1.660|
;;;300             && itf->bDescriptorSubtype < VIDEO_CS_ITF_VC_MAX)
000278  e5d01002          LDRB     r1,[r0,#2]
00027c  e3510008          CMP      r1,#8
000280  aa000003          BGE      |L1.660|
;;;301            && itf->bEntityId == entityid) {
000284  e5d01003          LDRB     r1,[r0,#3]
000288  e1510007          CMP      r1,r7
00028c  1a000000          BNE      |L1.660|
                  |L1.656|
;;;302          return itf;
;;;303        }
;;;304        cur = tu_desc_next(cur);
;;;305      }
;;;306      return end;
;;;307    }
000290  e8bd81f0          POP      {r4-r8,pc}
                  |L1.660|
000294  e1a01004          MOV      r1,r4                 ;304
000298  e1a02001          MOV      r2,r1                 ;304
00029c  e5d23000          LDRB     r3,[r2,#0]            ;304
0002a0  e0833002          ADD      r3,r3,r2              ;304
0002a4  e1a04003          MOV      r4,r3                 ;304
0002a8  e3a02024          MOV      r2,#0x24              ;297
0002ac  e1a01005          MOV      r1,r5                 ;297
0002b0  e1a00004          MOV      r0,r4                 ;297
0002b4  ebfffffe          BL       _find_desc
0002b8  e1a04000          MOV      r4,r0                 ;297
                  |L1.700|
0002bc  e1540005          CMP      r4,r5                 ;297
0002c0  3affffe8          BCC      |L1.616|
0002c4  e1a00005          MOV      r0,r5                 ;306
0002c8  eafffff0          B        |L1.656|
;;;308    
                          ENDP

                  _find_desc_format PROC
;;;316    /** Find the first format descriptor with the specified format number. */
;;;317    static inline void const *_find_desc_format(void const *beg, void const *end, uint_fast8_t fmtnum)
0002cc  e92d41f0          PUSH     {r4-r8,lr}
;;;318    {
0002d0  e1a06000          MOV      r6,r0
0002d4  e1a05001          MOV      r5,r1
0002d8  e1a07002          MOV      r7,r2
;;;319      for (void const *cur = beg; cur < end; cur = _find_desc(cur, end, TUSB_DESC_CS_INTERFACE)) {
0002dc  e1a04006          MOV      r4,r6
0002e0  ea000018          B        |L1.840|
                  |L1.740|
;;;320        uint8_t const *p = (uint8_t const *)cur;
0002e4  e1a02004          MOV      r2,r4
;;;321        uint_fast8_t fmt = p[2];
0002e8  e5d21002          LDRB     r1,[r2,#2]
;;;322        if ((fmt == VIDEO_CS_ITF_VS_FORMAT_UNCOMPRESSED ||
0002ec  e3510004          CMP      r1,#4
0002f0  0a000005          BEQ      |L1.780|
;;;323             fmt == VIDEO_CS_ITF_VS_FORMAT_MJPEG ||
0002f4  e3510006          CMP      r1,#6
0002f8  0a000003          BEQ      |L1.780|
;;;324             fmt == VIDEO_CS_ITF_VS_FORMAT_DV ||
0002fc  e351000c          CMP      r1,#0xc
000300  0a000001          BEQ      |L1.780|
;;;325             fmt == VIDEO_CS_ITF_VS_FRAME_FRAME_BASED) &&
000304  e3510011          CMP      r1,#0x11
000308  1a000004          BNE      |L1.800|
                  |L1.780|
;;;326            fmtnum == p[3]) {
00030c  e5d20003          LDRB     r0,[r2,#3]
000310  e1500007          CMP      r0,r7
000314  1a000001          BNE      |L1.800|
;;;327          return cur;
000318  e1a00004          MOV      r0,r4
                  |L1.796|
;;;328        }
;;;329        cur = tu_desc_next(cur);
;;;330      }
;;;331      return end;
;;;332    }
00031c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.800|
000320  e1a00004          MOV      r0,r4                 ;329
000324  e1a03000          MOV      r3,r0                 ;329
000328  e5d3c000          LDRB     r12,[r3,#0]           ;329
00032c  e08cc003          ADD      r12,r12,r3            ;329
000330  e1a0400c          MOV      r4,r12                ;329
000334  e3a02024          MOV      r2,#0x24              ;319
000338  e1a01005          MOV      r1,r5                 ;319
00033c  e1a00004          MOV      r0,r4                 ;319
000340  ebfffffe          BL       _find_desc
000344  e1a04000          MOV      r4,r0                 ;319
                  |L1.840|
000348  e1540005          CMP      r4,r5                 ;319
00034c  3affffe4          BCC      |L1.740|
000350  e1a00005          MOV      r0,r5                 ;331
000354  eafffff0          B        |L1.796|
;;;333    
                          ENDP

                  _find_desc_frame PROC
;;;334    /** Find the first frame descriptor with the specified format number. */
;;;335    static inline void const *_find_desc_frame(void const *beg, void const *end, uint_fast8_t frmnum)
000358  e92d41f0          PUSH     {r4-r8,lr}
;;;336    {
00035c  e1a06000          MOV      r6,r0
000360  e1a05001          MOV      r5,r1
000364  e1a07002          MOV      r7,r2
;;;337      for (void const *cur = beg; cur < end; cur = _find_desc(cur, end, TUSB_DESC_CS_INTERFACE)) {
000368  e1a04006          MOV      r4,r6
00036c  ea000016          B        |L1.972|
                  |L1.880|
;;;338        uint8_t const *p = (uint8_t const *)cur;
000370  e1a02004          MOV      r2,r4
;;;339        uint_fast8_t frm = p[2];
000374  e5d21002          LDRB     r1,[r2,#2]
;;;340        if ((frm == VIDEO_CS_ITF_VS_FRAME_UNCOMPRESSED ||
000378  e3510005          CMP      r1,#5
00037c  0a000003          BEQ      |L1.912|
;;;341             frm == VIDEO_CS_ITF_VS_FRAME_MJPEG ||
000380  e3510007          CMP      r1,#7
000384  0a000001          BEQ      |L1.912|
;;;342             frm == VIDEO_CS_ITF_VS_FRAME_FRAME_BASED) &&
000388  e3510011          CMP      r1,#0x11
00038c  1a000004          BNE      |L1.932|
                  |L1.912|
;;;343            frmnum == p[3]) {
000390  e5d20003          LDRB     r0,[r2,#3]
000394  e1500007          CMP      r0,r7
000398  1a000001          BNE      |L1.932|
;;;344          return cur;
00039c  e1a00004          MOV      r0,r4
                  |L1.928|
;;;345        }
;;;346        cur = tu_desc_next(cur);
;;;347      }
;;;348      return end;
;;;349    }
0003a0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.932|
0003a4  e1a00004          MOV      r0,r4                 ;346
0003a8  e1a03000          MOV      r3,r0                 ;346
0003ac  e5d3c000          LDRB     r12,[r3,#0]           ;346
0003b0  e08cc003          ADD      r12,r12,r3            ;346
0003b4  e1a0400c          MOV      r4,r12                ;346
0003b8  e3a02024          MOV      r2,#0x24              ;337
0003bc  e1a01005          MOV      r1,r5                 ;337
0003c0  e1a00004          MOV      r0,r4                 ;337
0003c4  ebfffffe          BL       _find_desc
0003c8  e1a04000          MOV      r4,r0                 ;337
                  |L1.972|
0003cc  e1540005          CMP      r4,r5                 ;337
0003d0  3affffe6          BCC      |L1.880|
0003d4  e1a00005          MOV      r0,r5                 ;348
0003d8  eafffff0          B        |L1.928|
;;;350    
                          ENDP

                  _update_streaming_parameters PROC
;;;353     * @param[in,out] param       Target */
;;;354    static bool _update_streaming_parameters(videod_streaming_interface_t const *stm,
0003dc  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;355                                             video_probe_and_commit_control_t *param)
;;;356    {
0003e0  e24dd014          SUB      sp,sp,#0x14
0003e4  e1a04001          MOV      r4,r1
;;;357      tusb_desc_vs_itf_t const *vs = _get_desc_vs(stm);
0003e8  e59d0014          LDR      r0,[sp,#0x14]
0003ec  ebfffffe          BL       _get_desc_vs
0003f0  e1a07000          MOV      r7,r0
;;;358      uint_fast8_t fmtnum = param->bFormatIndex;
0003f4  e5d40002          LDRB     r0,[r4,#2]
0003f8  e58d0010          STR      r0,[sp,#0x10]
;;;359      TU_ASSERT(vs && fmtnum <= vs->stm.bNumFormats);
0003fc  e1a00000          MOV      r0,r0
000400  e3570000          CMP      r7,#0
000404  0a000003          BEQ      |L1.1048|
000408  e5d7100c          LDRB     r1,[r7,#0xc]
00040c  e59d0010          LDR      r0,[sp,#0x10]
000410  e1510000          CMP      r1,r0
000414  2a000008          BCS      |L1.1084|
                  |L1.1048|
000418  e59f231c          LDR      r2,|L1.1852|
00041c  e59f131c          LDR      r1,|L1.1856|
000420  e28f0fc7          ADR      r0,|L1.1860|
000424  ebfffffe          BL       __2printf
000428  e1a00000          MOV      r0,r0
00042c  e1a00000          MOV      r0,r0
000430  e3a00000          MOV      r0,#0
                  |L1.1076|
000434  e28dd01c          ADD      sp,sp,#0x1c
;;;360      if (!fmtnum) {
;;;361        if (1 < vs->stm.bNumFormats) return true; /* Need to negotiate all variables. */
;;;362        fmtnum = 1;
;;;363        param->bFormatIndex = 1;
;;;364      }
;;;365    
;;;366      /* Set the parameters determined by the format  */
;;;367      param->wKeyFrameRate    = 1;
;;;368      param->wPFrameRate      = 0;
;;;369      param->wCompWindowSize  = 1; /* GOP size? */
;;;370      param->wDelay           = 0; /* milliseconds */
;;;371      param->dwClockFrequency = 27000000; /* same as MPEG-2 system time clock  */
;;;372      param->bmFramingInfo    = 0x3; /* enables FrameID and EndOfFrame */
;;;373      param->bPreferedVersion = 1;
;;;374      param->bMinVersion      = 1;
;;;375      param->bMaxVersion      = 1;
;;;376      param->bUsage           = 0;
;;;377      param->bBitDepthLuma    = 8;
;;;378    
;;;379      void const *end = _end_of_streaming_descriptor(vs);
;;;380      tusb_desc_cs_video_fmt_t const *fmt = _find_desc_format(tu_desc_next(vs), end, fmtnum);
;;;381      TU_ASSERT(fmt != end);
;;;382    
;;;383      switch (fmt->bDescriptorSubType) {
;;;384        case VIDEO_CS_ITF_VS_FORMAT_UNCOMPRESSED:
;;;385          param->wCompQuality = 1; /* 1 to 10000 */
;;;386          break;
;;;387      case VIDEO_CS_ITF_VS_FORMAT_MJPEG:
;;;388          break;
;;;389        default: return false;
;;;390      }
;;;391    
;;;392      uint_fast8_t frmnum = param->bFrameIndex;
;;;393      TU_ASSERT(frmnum <= fmt->bNumFrameDescriptors);
;;;394      if (!frmnum) {
;;;395        if (1 < fmt->bNumFrameDescriptors) return true;
;;;396        frmnum = 1;
;;;397        param->bFrameIndex = 1;
;;;398      }
;;;399      tusb_desc_cs_video_frm_t const *frm = _find_desc_frame(tu_desc_next(fmt), end, frmnum);
;;;400      TU_ASSERT(frm != end);
;;;401    
;;;402      /* Set the parameters determined by the frame  */
;;;403      uint_fast32_t frame_size = param->dwMaxVideoFrameSize;
;;;404      if (!frame_size) {
;;;405        switch (fmt->bDescriptorSubType) {
;;;406          case VIDEO_CS_ITF_VS_FORMAT_UNCOMPRESSED:
;;;407            frame_size = (uint_fast32_t)frm->wWidth * frm->wHeight * fmt->uncompressed.bBitsPerPixel / 8;
;;;408            break;
;;;409          case VIDEO_CS_ITF_VS_FORMAT_MJPEG:
;;;410            frame_size = (uint_fast32_t)frm->wWidth * frm->wHeight * 16 / 8; /* YUV422 */
;;;411            break;
;;;412          default: break;
;;;413        }
;;;414        param->dwMaxVideoFrameSize = frame_size;
;;;415      }
;;;416    
;;;417      uint_fast32_t interval = param->dwFrameInterval;
;;;418      if (!interval) {
;;;419        if ((1 < frm->uncompressed.bFrameIntervalType) ||
;;;420            ((0 == frm->uncompressed.bFrameIntervalType) &&
;;;421             (frm->uncompressed.dwFrameInterval[1] != frm->uncompressed.dwFrameInterval[0]))) {
;;;422          return true;
;;;423        }
;;;424        interval = frm->uncompressed.dwFrameInterval[0];
;;;425        param->dwFrameInterval = interval;
;;;426      }
;;;427      uint_fast32_t interval_ms = interval / 10000;
;;;428      TU_ASSERT(interval_ms);
;;;429      uint_fast32_t payload_size = (frame_size + interval_ms - 1) / interval_ms + 2;
;;;430      if (CFG_TUD_VIDEO_STREAMING_EP_BUFSIZE < payload_size)
;;;431        payload_size = CFG_TUD_VIDEO_STREAMING_EP_BUFSIZE;
;;;432      param->dwMaxPayloadTransferSize = payload_size;
;;;433      return true;
;;;434    }
000438  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1084|
00043c  e1a00000          MOV      r0,r0                 ;359
000440  e59d0010          LDR      r0,[sp,#0x10]         ;360
000444  e3500000          CMP      r0,#0                 ;360
000448  1a000007          BNE      |L1.1132|
00044c  e5d7000c          LDRB     r0,[r7,#0xc]          ;361
000450  e3500001          CMP      r0,#1                 ;361
000454  da000001          BLE      |L1.1120|
000458  e3a00001          MOV      r0,#1                 ;361
00045c  eafffff4          B        |L1.1076|
                  |L1.1120|
000460  e3a00001          MOV      r0,#1                 ;362
000464  e58d0010          STR      r0,[sp,#0x10]         ;362
000468  e5c40002          STRB     r0,[r4,#2]            ;363
                  |L1.1132|
00046c  e3a00001          MOV      r0,#1                 ;367
000470  e5c40008          STRB     r0,[r4,#8]            ;367
000474  e3a00000          MOV      r0,#0                 ;367
000478  e5c40009          STRB     r0,[r4,#9]            ;367
00047c  e5c4000a          STRB     r0,[r4,#0xa]          ;368
000480  e5c4000b          STRB     r0,[r4,#0xb]          ;368
000484  e3a00001          MOV      r0,#1                 ;369
000488  e5c4000e          STRB     r0,[r4,#0xe]          ;369
00048c  e3a00000          MOV      r0,#0                 ;369
000490  e5c4000f          STRB     r0,[r4,#0xf]          ;369
000494  e5c40010          STRB     r0,[r4,#0x10]         ;370
000498  e5c40011          STRB     r0,[r4,#0x11]         ;370
00049c  e284101a          ADD      r1,r4,#0x1a           ;371
0004a0  e59f02b4          LDR      r0,|L1.1884|
0004a4  ebfffffe          BL       __aeabi_uwrite4
0004a8  e3a00003          MOV      r0,#3                 ;372
0004ac  e5c4001e          STRB     r0,[r4,#0x1e]         ;372
0004b0  e3a00001          MOV      r0,#1                 ;373
0004b4  e5c4001f          STRB     r0,[r4,#0x1f]         ;373
0004b8  e5c40020          STRB     r0,[r4,#0x20]         ;374
0004bc  e5c40021          STRB     r0,[r4,#0x21]         ;375
0004c0  e3a00000          MOV      r0,#0                 ;376
0004c4  e5c40022          STRB     r0,[r4,#0x22]         ;376
0004c8  e3a00008          MOV      r0,#8                 ;377
0004cc  e5c40023          STRB     r0,[r4,#0x23]         ;377
0004d0  e1a00007          MOV      r0,r7                 ;379
0004d4  ebfffffe          BL       _end_of_streaming_descriptor
0004d8  e1a0a000          MOV      r10,r0                ;379
0004dc  e1a00000          MOV      r0,r0                 ;380
0004e0  e1a00007          MOV      r0,r7                 ;380
0004e4  e5d01000          LDRB     r1,[r0,#0]            ;380
0004e8  e0811000          ADD      r1,r1,r0              ;380
0004ec  e1a0b001          MOV      r11,r1                ;380
0004f0  e1a0100a          MOV      r1,r10                ;380
0004f4  e1a0000b          MOV      r0,r11                ;380
0004f8  e59d2010          LDR      r2,[sp,#0x10]         ;380
0004fc  ebfffffe          BL       _find_desc_format
000500  e1a05000          MOV      r5,r0                 ;380
000504  e1a00000          MOV      r0,r0                 ;381
000508  e155000a          CMP      r5,r10                ;381
00050c  1a000007          BNE      |L1.1328|
000510  e59f2248          LDR      r2,|L1.1888|
000514  e59f1224          LDR      r1,|L1.1856|
000518  e28f0f89          ADR      r0,|L1.1860|
00051c  ebfffffe          BL       __2printf
000520  e1a00000          MOV      r0,r0                 ;381
000524  e1a00000          MOV      r0,r0                 ;381
000528  e3a00000          MOV      r0,#0                 ;381
00052c  eaffffc0          B        |L1.1076|
                  |L1.1328|
000530  e1a00000          MOV      r0,r0                 ;381
000534  e5d50002          LDRB     r0,[r5,#2]            ;383
000538  e3500004          CMP      r0,#4                 ;383
00053c  0a000002          BEQ      |L1.1356|
000540  e3500006          CMP      r0,#6                 ;383
000544  1a000008          BNE      |L1.1388|
000548  ea000005          B        |L1.1380|
                  |L1.1356|
00054c  e1a00000          MOV      r0,r0                 ;384
000550  e3a00001          MOV      r0,#1                 ;385
000554  e5c4000c          STRB     r0,[r4,#0xc]          ;385
000558  e3a00000          MOV      r0,#0                 ;385
00055c  e5c4000d          STRB     r0,[r4,#0xd]          ;385
000560  ea000004          B        |L1.1400|
                  |L1.1380|
000564  e1a00000          MOV      r0,r0                 ;387
000568  ea000002          B        |L1.1400|
                  |L1.1388|
00056c  e1a00000          MOV      r0,r0                 ;389
000570  e3a00000          MOV      r0,#0                 ;389
000574  eaffffae          B        |L1.1076|
                  |L1.1400|
000578  e1a00000          MOV      r0,r0                 ;386
00057c  e5d40003          LDRB     r0,[r4,#3]            ;392
000580  e58d000c          STR      r0,[sp,#0xc]          ;392
000584  e1a00000          MOV      r0,r0                 ;393
000588  e5d51004          LDRB     r1,[r5,#4]            ;393
00058c  e59d000c          LDR      r0,[sp,#0xc]          ;393
000590  e1510000          CMP      r1,r0                 ;393
000594  2a000007          BCS      |L1.1464|
000598  e59f21c4          LDR      r2,|L1.1892|
00059c  e59f119c          LDR      r1,|L1.1856|
0005a0  e28f0f67          ADR      r0,|L1.1860|
0005a4  ebfffffe          BL       __2printf
0005a8  e1a00000          MOV      r0,r0                 ;393
0005ac  e1a00000          MOV      r0,r0                 ;393
0005b0  e3a00000          MOV      r0,#0                 ;393
0005b4  eaffff9e          B        |L1.1076|
                  |L1.1464|
0005b8  e1a00000          MOV      r0,r0                 ;393
0005bc  e59d000c          LDR      r0,[sp,#0xc]          ;394
0005c0  e3500000          CMP      r0,#0                 ;394
0005c4  1a000007          BNE      |L1.1512|
0005c8  e5d50004          LDRB     r0,[r5,#4]            ;395
0005cc  e3500001          CMP      r0,#1                 ;395
0005d0  da000001          BLE      |L1.1500|
0005d4  e3a00001          MOV      r0,#1                 ;395
0005d8  eaffff95          B        |L1.1076|
                  |L1.1500|
0005dc  e3a00001          MOV      r0,#1                 ;396
0005e0  e58d000c          STR      r0,[sp,#0xc]          ;396
0005e4  e5c40003          STRB     r0,[r4,#3]            ;397
                  |L1.1512|
0005e8  e1a00000          MOV      r0,r0                 ;399
0005ec  e1a00005          MOV      r0,r5                 ;399
0005f0  e5d01000          LDRB     r1,[r0,#0]            ;399
0005f4  e0811000          ADD      r1,r1,r0              ;399
0005f8  e1a0b001          MOV      r11,r1                ;399
0005fc  e1a0100a          MOV      r1,r10                ;399
000600  e1a0000b          MOV      r0,r11                ;399
000604  e59d200c          LDR      r2,[sp,#0xc]          ;399
000608  ebfffffe          BL       _find_desc_frame
00060c  e1a06000          MOV      r6,r0                 ;399
000610  e1a00000          MOV      r0,r0                 ;400
000614  e156000a          CMP      r6,r10                ;400
000618  1a000007          BNE      |L1.1596|
00061c  e3a02e19          MOV      r2,#0x190             ;400
000620  e59f1118          LDR      r1,|L1.1856|
000624  e28f0f46          ADR      r0,|L1.1860|
000628  ebfffffe          BL       __2printf
00062c  e1a00000          MOV      r0,r0                 ;400
000630  e1a00000          MOV      r0,r0                 ;400
000634  e3a00000          MOV      r0,#0                 ;400
000638  eaffff7d          B        |L1.1076|
                  |L1.1596|
00063c  e1a00000          MOV      r0,r0                 ;400
000640  e2840012          ADD      r0,r4,#0x12           ;403
000644  ebfffffe          BL       __aeabi_uread4
000648  e1a08000          MOV      r8,r0                 ;403
00064c  e3580000          CMP      r8,#0                 ;404
000650  1a000022          BNE      |L1.1760|
000654  e5d50002          LDRB     r0,[r5,#2]            ;405
000658  e3500004          CMP      r0,#4                 ;405
00065c  0a000002          BEQ      |L1.1644|
000660  e3500006          CMP      r0,#6                 ;405
000664  1a000017          BNE      |L1.1736|
000668  ea00000b          B        |L1.1692|
                  |L1.1644|
00066c  e1a00000          MOV      r0,r0                 ;406
000670  e5d60006          LDRB     r0,[r6,#6]            ;407
000674  e5d61005          LDRB     r1,[r6,#5]            ;407
000678  e1810400          ORR      r0,r1,r0,LSL #8       ;407
00067c  e5d61008          LDRB     r1,[r6,#8]            ;407
000680  e5d62007          LDRB     r2,[r6,#7]            ;407
000684  e1821401          ORR      r1,r2,r1,LSL #8       ;407
000688  e0000091          MUL      r0,r1,r0              ;407
00068c  e5d51015          LDRB     r1,[r5,#0x15]         ;407
000690  e0000091          MUL      r0,r1,r0              ;407
000694  e1a081a0          LSR      r8,r0,#3              ;407
000698  ea00000c          B        |L1.1744|
                  |L1.1692|
00069c  e1a00000          MOV      r0,r0                 ;409
0006a0  e5d60006          LDRB     r0,[r6,#6]            ;410
0006a4  e5d61005          LDRB     r1,[r6,#5]            ;410
0006a8  e1810400          ORR      r0,r1,r0,LSL #8       ;410
0006ac  e5d61008          LDRB     r1,[r6,#8]            ;410
0006b0  e5d62007          LDRB     r2,[r6,#7]            ;410
0006b4  e1821401          ORR      r1,r2,r1,LSL #8       ;410
0006b8  e0000091          MUL      r0,r1,r0              ;410
0006bc  e1a00200          LSL      r0,r0,#4              ;410
0006c0  e1a081a0          LSR      r8,r0,#3              ;410
0006c4  ea000001          B        |L1.1744|
                  |L1.1736|
0006c8  e1a00000          MOV      r0,r0                 ;412
0006cc  e1a00000          MOV      r0,r0                 ;412
                  |L1.1744|
0006d0  e1a00000          MOV      r0,r0                 ;408
0006d4  e2841012          ADD      r1,r4,#0x12           ;414
0006d8  e1a00008          MOV      r0,r8                 ;414
0006dc  ebfffffe          BL       __aeabi_uwrite4
                  |L1.1760|
0006e0  e2840004          ADD      r0,r4,#4              ;417
0006e4  ebfffffe          BL       __aeabi_uread4
0006e8  e58d0008          STR      r0,[sp,#8]            ;417
0006ec  e59d0008          LDR      r0,[sp,#8]            ;418
0006f0  e3500000          CMP      r0,#0                 ;418
0006f4  1a000021          BNE      |L1.1920|
0006f8  e5d60019          LDRB     r0,[r6,#0x19]         ;419
0006fc  e3500001          CMP      r0,#1                 ;419
000700  ca000009          BGT      |L1.1836|
000704  e5d60019          LDRB     r0,[r6,#0x19]         ;420
000708  e3500000          CMP      r0,#0                 ;420
00070c  1a000015          BNE      |L1.1896|
000710  e286001e          ADD      r0,r6,#0x1e           ;421
000714  ebfffffe          BL       __aeabi_uread4
000718  e1a0b000          MOV      r11,r0                ;421
00071c  e286001a          ADD      r0,r6,#0x1a           ;421
000720  ebfffffe          BL       __aeabi_uread4
000724  e15b0000          CMP      r11,r0                ;421
000728  0a00000e          BEQ      |L1.1896|
                  |L1.1836|
00072c  e3a00001          MOV      r0,#1                 ;422
000730  eaffff3f          B        |L1.1076|
                  |L1.1844|
                          DCD      _videod_itf
                  |L1.1848|
                          DCD      _videod_streaming_itf
                  |L1.1852|
                          DCD      0x00000167
                  |L1.1856|
                          DCD      __func__
                  |L1.1860|
000744  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
000748  643a2041
00074c  53534552
000750  54204641
000754  494c4544
000758  0d0a00  
00075b  00                DCB      0
                  |L1.1884|
                          DCD      0x019bfcc0
                  |L1.1888|
                          DCD      0x0000017d
                  |L1.1892|
                          DCD      0x00000189
                  |L1.1896|
000768  e286001a          ADD      r0,r6,#0x1a           ;424
00076c  ebfffffe          BL       __aeabi_uread4
000770  e58d0008          STR      r0,[sp,#8]            ;424
000774  e2841004          ADD      r1,r4,#4              ;425
000778  e59d0008          LDR      r0,[sp,#8]            ;425
00077c  ebfffffe          BL       __aeabi_uwrite4
                  |L1.1920|
000780  e59f1e08          LDR      r1,|L1.5520|
000784  e59d0008          LDR      r0,[sp,#8]            ;427
000788  ebfffffe          BL       __aeabi_uidivmod
00078c  e1a09000          MOV      r9,r0                 ;427
000790  e1a00000          MOV      r0,r0                 ;428
000794  e3590000          CMP      r9,#0                 ;428
000798  1a000007          BNE      |L1.1980|
00079c  e3a02f6b          MOV      r2,#0x1ac             ;428
0007a0  e51f1068          LDR      r1,|L1.1856|
0007a4  e24f0068          ADR      r0,|L1.1860|
0007a8  ebfffffe          BL       __2printf
0007ac  e1a00000          MOV      r0,r0                 ;428
0007b0  e1a00000          MOV      r0,r0                 ;428
0007b4  e3a00000          MOV      r0,#0                 ;428
0007b8  eaffff1d          B        |L1.1076|
                  |L1.1980|
0007bc  e1a00000          MOV      r0,r0                 ;428
0007c0  e0881009          ADD      r1,r8,r9              ;429
0007c4  e2410001          SUB      r0,r1,#1              ;429
0007c8  e1a01009          MOV      r1,r9                 ;429
0007cc  ebfffffe          BL       __aeabi_uidivmod
0007d0  e2800002          ADD      r0,r0,#2              ;429
0007d4  e58d0004          STR      r0,[sp,#4]            ;429
0007d8  e59d0004          LDR      r0,[sp,#4]            ;430
0007dc  e3500c01          CMP      r0,#0x100             ;430
0007e0  9a000001          BLS      |L1.2028|
0007e4  e3a00c01          MOV      r0,#0x100             ;431
0007e8  e58d0004          STR      r0,[sp,#4]            ;431
                  |L1.2028|
0007ec  e2841016          ADD      r1,r4,#0x16           ;432
0007f0  e59d0004          LDR      r0,[sp,#4]            ;432
0007f4  ebfffffe          BL       __aeabi_uwrite4
0007f8  e3a00001          MOV      r0,#1                 ;433
0007fc  eaffff0c          B        |L1.1076|
;;;435    
                          ENDP

                  _negotiate_streaming_parameters PROC
;;;440     */
;;;441    static bool _negotiate_streaming_parameters(videod_streaming_interface_t const *stm, uint_fast8_t request,
000800  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;442                                                video_probe_and_commit_control_t *param)
;;;443    {
000804  e24dd018          SUB      sp,sp,#0x18
000808  e1a09001          MOV      r9,r1
00080c  e1a04002          MOV      r4,r2
;;;444      uint_fast8_t const fmtnum = param->bFormatIndex;
000810  e5d40002          LDRB     r0,[r4,#2]
000814  e58d0014          STR      r0,[sp,#0x14]
;;;445     /////	  printf("\n\r======_negotiate_streaming_parameters========\n\r");
;;;446    	
;;;447      if (!fmtnum) {
000818  e59d0014          LDR      r0,[sp,#0x14]
00081c  e3500000          CMP      r0,#0
000820  1a000039          BNE      |L1.2316|
;;;448        switch (request) {
000824  e3590082          CMP      r9,#0x82
000828  0a00000e          BEQ      |L1.2152|
00082c  e3590083          CMP      r9,#0x83
000830  0a000002          BEQ      |L1.2112|
000834  e3590087          CMP      r9,#0x87
000838  1a00000f          BNE      |L1.2172|
00083c  ea00000b          B        |L1.2160|
                  |L1.2112|
;;;449          case VIDEO_REQUEST_GET_MAX:
000840  e1a00000          MOV      r0,r0
;;;450            if (_get_desc_vs(stm))
000844  e59d0018          LDR      r0,[sp,#0x18]
000848  ebfffffe          BL       _get_desc_vs
00084c  e3500000          CMP      r0,#0
000850  0a000003          BEQ      |L1.2148|
;;;451              param->bFormatIndex = _get_desc_vs(stm)->stm.bNumFormats;
000854  e59d0018          LDR      r0,[sp,#0x18]
000858  ebfffffe          BL       _get_desc_vs
00085c  e5d0000c          LDRB     r0,[r0,#0xc]
000860  e5c40002          STRB     r0,[r4,#2]
                  |L1.2148|
;;;452            break;
000864  ea000008          B        |L1.2188|
                  |L1.2152|
;;;453          case VIDEO_REQUEST_GET_MIN:
000868  e1a00000          MOV      r0,r0
;;;454          case VIDEO_REQUEST_GET_DEF:
00086c  e1a00000          MOV      r0,r0
                  |L1.2160|
;;;455            param->bFormatIndex = 1;
000870  e3a00001          MOV      r0,#1
000874  e5c40002          STRB     r0,[r4,#2]
;;;456            break;
000878  ea000003          B        |L1.2188|
                  |L1.2172|
;;;457          default: 
00087c  e1a00000          MOV      r0,r0
;;;458    				return false;
000880  e3a00000          MOV      r0,#0
                  |L1.2180|
000884  e28dd024          ADD      sp,sp,#0x24
;;;459        }
;;;460        /* Set the parameters determined by the format  */
;;;461        param->wKeyFrameRate    = 1;
;;;462        param->wPFrameRate      = 0;
;;;463        param->wCompQuality     = 1; /* 1 to 10000 */
;;;464        param->wCompWindowSize  = 1; /* GOP size? */
;;;465        param->wDelay           = 0; /* milliseconds */
;;;466        param->dwClockFrequency = 27000000; /* same as MPEG-2 system time clock  */
;;;467        param->bmFramingInfo    = 0x3; /* enables FrameID and EndOfFrame */
;;;468        param->bPreferedVersion = 1;
;;;469        param->bMinVersion      = 1;
;;;470        param->bMaxVersion      = 1;
;;;471        param->bUsage           = 0;
;;;472        param->bBitDepthLuma    = 8;
;;;473        return true;
;;;474      }
;;;475    
;;;476      uint_fast8_t frmnum = param->bFrameIndex;
;;;477      if (!frmnum) {
;;;478        tusb_desc_vs_itf_t const *vs = _get_desc_vs(stm);
;;;479        TU_ASSERT(vs);
;;;480        void const *end = _end_of_streaming_descriptor(vs);
;;;481        tusb_desc_cs_video_fmt_t const *fmt = _find_desc_format(tu_desc_next(vs), end, fmtnum);
;;;482        switch (request) {
;;;483          case VIDEO_REQUEST_GET_MAX:
;;;484            frmnum = fmt->bNumFrameDescriptors;
;;;485            break;
;;;486          case VIDEO_REQUEST_GET_MIN:
;;;487            frmnum = 1;
;;;488            break;
;;;489          case VIDEO_REQUEST_GET_DEF:
;;;490            switch (fmt->bDescriptorSubType) {
;;;491            case VIDEO_CS_ITF_VS_FORMAT_UNCOMPRESSED:
;;;492              frmnum = fmt->uncompressed.bDefaultFrameIndex;
;;;493              break;
;;;494            case VIDEO_CS_ITF_VS_FORMAT_MJPEG:
;;;495              frmnum = fmt->mjpeg.bDefaultFrameIndex;
;;;496              break;
;;;497            default: return false;
;;;498            }
;;;499            break;
;;;500          default: return false;
;;;501        }
;;;502        param->bFrameIndex = (uint8_t)frmnum;
;;;503        /* Set the parameters determined by the frame */
;;;504        tusb_desc_cs_video_frm_t const *frm = _find_desc_frame(tu_desc_next(fmt), end, frmnum);
;;;505        uint_fast32_t frame_size;
;;;506        switch (fmt->bDescriptorSubType) {
;;;507          case VIDEO_CS_ITF_VS_FORMAT_UNCOMPRESSED:
;;;508            frame_size = (uint_fast32_t)frm->wWidth * frm->wHeight * fmt->uncompressed.bBitsPerPixel / 8;
;;;509            break;
;;;510          case VIDEO_CS_ITF_VS_FORMAT_MJPEG:
;;;511            frame_size = (uint_fast32_t)frm->wWidth * frm->wHeight * 16 / 8; /* YUV422 */
;;;512            break;
;;;513          default: return false;
;;;514        }
;;;515        param->dwMaxVideoFrameSize = frame_size;
;;;516        return true;
;;;517      }
;;;518    
;;;519      if (!param->dwFrameInterval) {
;;;520        tusb_desc_vs_itf_t const *vs = _get_desc_vs(stm);
;;;521        TU_ASSERT(vs);
;;;522        void const *end = _end_of_streaming_descriptor(vs);
;;;523        tusb_desc_cs_video_fmt_t const *fmt = _find_desc_format(tu_desc_next(vs), end, fmtnum);
;;;524        tusb_desc_cs_video_frm_t const *frm = _find_desc_frame(tu_desc_next(fmt), end, frmnum);
;;;525    
;;;526        uint_fast32_t interval, interval_ms;
;;;527        switch (request) {
;;;528          case VIDEO_REQUEST_GET_MAX:
;;;529            {
;;;530              uint_fast32_t min_interval, max_interval;
;;;531              uint_fast8_t num_intervals = frm->uncompressed.bFrameIntervalType;
;;;532              max_interval = num_intervals ? frm->uncompressed.dwFrameInterval[num_intervals - 1]: frm->uncompressed.dwFrameInterval[1];
;;;533              min_interval = frm->uncompressed.dwFrameInterval[0];
;;;534              interval = max_interval;
;;;535              interval_ms = min_interval / 10000;
;;;536            }
;;;537            break;
;;;538          case VIDEO_REQUEST_GET_MIN:
;;;539            {
;;;540              uint_fast32_t min_interval, max_interval;
;;;541              uint_fast8_t num_intervals = frm->uncompressed.bFrameIntervalType;
;;;542              max_interval = num_intervals ? frm->uncompressed.dwFrameInterval[num_intervals - 1]: frm->uncompressed.dwFrameInterval[1];
;;;543              min_interval = frm->uncompressed.dwFrameInterval[0];
;;;544              interval = min_interval;
;;;545              interval_ms = max_interval / 10000;
;;;546            }
;;;547            break;
;;;548          case VIDEO_REQUEST_GET_DEF:
;;;549            interval = frm->uncompressed.dwDefaultFrameInterval;
;;;550            interval_ms = interval / 10000;
;;;551            break;
;;;552          case VIDEO_REQUEST_GET_RES:
;;;553            {
;;;554              uint_fast8_t num_intervals = frm->uncompressed.bFrameIntervalType;
;;;555              if (num_intervals) {
;;;556                interval = 0;
;;;557              } else {
;;;558                interval = frm->uncompressed.dwFrameInterval[2];
;;;559                interval_ms = interval / 10000;
;;;560              }
;;;561            }
;;;562            break;
;;;563          default: return false;
;;;564        }
;;;565        param->dwFrameInterval = interval;
;;;566        if (!interval) {
;;;567          param->dwMaxPayloadTransferSize = 0;
;;;568        } else {
;;;569          uint_fast32_t frame_size = param->dwMaxVideoFrameSize;
;;;570          uint_fast32_t payload_size;
;;;571          if (!interval_ms) {
;;;572            payload_size = frame_size + 2;
;;;573          } else {
;;;574            payload_size = (frame_size + interval_ms - 1) / interval_ms + 2;
;;;575          }
;;;576          if (CFG_TUD_VIDEO_STREAMING_EP_BUFSIZE < payload_size)
;;;577            payload_size = CFG_TUD_VIDEO_STREAMING_EP_BUFSIZE;
;;;578          param->dwMaxPayloadTransferSize = payload_size;
;;;579        }
;;;580        return true;
;;;581      }
;;;582      return true;
;;;583    }
000888  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2188|
00088c  e1a00000          MOV      r0,r0                 ;452
000890  e3a00001          MOV      r0,#1                 ;461
000894  e5c40008          STRB     r0,[r4,#8]            ;461
000898  e3a00000          MOV      r0,#0                 ;461
00089c  e5c40009          STRB     r0,[r4,#9]            ;461
0008a0  e5c4000a          STRB     r0,[r4,#0xa]          ;462
0008a4  e5c4000b          STRB     r0,[r4,#0xb]          ;462
0008a8  e3a00001          MOV      r0,#1                 ;463
0008ac  e5c4000c          STRB     r0,[r4,#0xc]          ;463
0008b0  e3a00000          MOV      r0,#0                 ;463
0008b4  e5c4000d          STRB     r0,[r4,#0xd]          ;463
0008b8  e3a00001          MOV      r0,#1                 ;464
0008bc  e5c4000e          STRB     r0,[r4,#0xe]          ;464
0008c0  e3a00000          MOV      r0,#0                 ;464
0008c4  e5c4000f          STRB     r0,[r4,#0xf]          ;464
0008c8  e5c40010          STRB     r0,[r4,#0x10]         ;465
0008cc  e5c40011          STRB     r0,[r4,#0x11]         ;465
0008d0  e284101a          ADD      r1,r4,#0x1a           ;466
0008d4  e51f0180          LDR      r0,|L1.1884|
0008d8  ebfffffe          BL       __aeabi_uwrite4
0008dc  e3a00003          MOV      r0,#3                 ;467
0008e0  e5c4001e          STRB     r0,[r4,#0x1e]         ;467
0008e4  e3a00001          MOV      r0,#1                 ;468
0008e8  e5c4001f          STRB     r0,[r4,#0x1f]         ;468
0008ec  e5c40020          STRB     r0,[r4,#0x20]         ;469
0008f0  e5c40021          STRB     r0,[r4,#0x21]         ;470
0008f4  e3a00000          MOV      r0,#0                 ;471
0008f8  e5c40022          STRB     r0,[r4,#0x22]         ;471
0008fc  e3a00008          MOV      r0,#8                 ;472
000900  e5c40023          STRB     r0,[r4,#0x23]         ;472
000904  e3a00001          MOV      r0,#1                 ;473
000908  eaffffdd          B        |L1.2180|
                  |L1.2316|
00090c  e5d40003          LDRB     r0,[r4,#3]            ;476
000910  e58d0010          STR      r0,[sp,#0x10]         ;476
000914  e59d0010          LDR      r0,[sp,#0x10]         ;477
000918  e3500000          CMP      r0,#0                 ;477
00091c  1a000074          BNE      |L1.2804|
000920  e59d0018          LDR      r0,[sp,#0x18]         ;478
000924  ebfffffe          BL       _get_desc_vs
000928  e1a06000          MOV      r6,r0                 ;478
00092c  e1a00000          MOV      r0,r0                 ;479
000930  e3560000          CMP      r6,#0                 ;479
000934  1a000007          BNE      |L1.2392|
000938  e59f2c54          LDR      r2,|L1.5524|
00093c  e59f1c54          LDR      r1,|L1.5528|
000940  e24f0f81          ADR      r0,|L1.1860|
000944  ebfffffe          BL       __2printf
000948  e1a00000          MOV      r0,r0                 ;479
00094c  e1a00000          MOV      r0,r0                 ;479
000950  e3a00000          MOV      r0,#0                 ;479
000954  eaffffca          B        |L1.2180|
                  |L1.2392|
000958  e1a00000          MOV      r0,r0                 ;479
00095c  e1a00006          MOV      r0,r6                 ;480
000960  ebfffffe          BL       _end_of_streaming_descriptor
000964  e1a0b000          MOV      r11,r0                ;480
000968  e1a00000          MOV      r0,r0                 ;481
00096c  e1a00006          MOV      r0,r6                 ;481
000970  e5d01000          LDRB     r1,[r0,#0]            ;481
000974  e0811000          ADD      r1,r1,r0              ;481
000978  e1a0a001          MOV      r10,r1                ;481
00097c  e1a0100b          MOV      r1,r11                ;481
000980  e1a0000a          MOV      r0,r10                ;481
000984  e59d2014          LDR      r2,[sp,#0x14]         ;481
000988  ebfffffe          BL       _find_desc_format
00098c  e1a05000          MOV      r5,r0                 ;481
000990  e3590082          CMP      r9,#0x82              ;482
000994  0a000008          BEQ      |L1.2492|
000998  e3590083          CMP      r9,#0x83              ;482
00099c  0a000002          BEQ      |L1.2476|
0009a0  e3590087          CMP      r9,#0x87              ;482
0009a4  1a00001c          BNE      |L1.2588|
0009a8  ea000007          B        |L1.2508|
                  |L1.2476|
0009ac  e1a00000          MOV      r0,r0                 ;483
0009b0  e5d50004          LDRB     r0,[r5,#4]            ;484
0009b4  e58d0010          STR      r0,[sp,#0x10]         ;484
0009b8  ea00001a          B        |L1.2600|
                  |L1.2492|
0009bc  e1a00000          MOV      r0,r0                 ;486
0009c0  e3a00001          MOV      r0,#1                 ;487
0009c4  e58d0010          STR      r0,[sp,#0x10]         ;487
0009c8  ea000016          B        |L1.2600|
                  |L1.2508|
0009cc  e1a00000          MOV      r0,r0                 ;489
0009d0  e5d50002          LDRB     r0,[r5,#2]            ;490
0009d4  e3500004          CMP      r0,#4                 ;490
0009d8  0a000002          BEQ      |L1.2536|
0009dc  e3500006          CMP      r0,#6                 ;490
0009e0  1a000008          BNE      |L1.2568|
0009e4  ea000003          B        |L1.2552|
                  |L1.2536|
0009e8  e1a00000          MOV      r0,r0                 ;491
0009ec  e5d50016          LDRB     r0,[r5,#0x16]         ;492
0009f0  e58d0010          STR      r0,[sp,#0x10]         ;492
0009f4  ea000006          B        |L1.2580|
                  |L1.2552|
0009f8  e1a00000          MOV      r0,r0                 ;494
0009fc  e5d50006          LDRB     r0,[r5,#6]            ;495
000a00  e58d0010          STR      r0,[sp,#0x10]         ;495
000a04  ea000002          B        |L1.2580|
                  |L1.2568|
000a08  e1a00000          MOV      r0,r0                 ;497
000a0c  e3a00000          MOV      r0,#0                 ;497
000a10  eaffff9b          B        |L1.2180|
                  |L1.2580|
000a14  e1a00000          MOV      r0,r0                 ;493
000a18  ea000002          B        |L1.2600|
                  |L1.2588|
000a1c  e1a00000          MOV      r0,r0                 ;500
000a20  e3a00000          MOV      r0,#0                 ;500
000a24  eaffff96          B        |L1.2180|
                  |L1.2600|
000a28  e1a00000          MOV      r0,r0                 ;485
000a2c  e59d0010          LDR      r0,[sp,#0x10]         ;502
000a30  e5c40003          STRB     r0,[r4,#3]            ;502
000a34  e1a00000          MOV      r0,r0                 ;504
000a38  e1a00005          MOV      r0,r5                 ;504
000a3c  e5d01000          LDRB     r1,[r0,#0]            ;504
000a40  e0811000          ADD      r1,r1,r0              ;504
000a44  e1a0a001          MOV      r10,r1                ;504
000a48  e1a0100b          MOV      r1,r11                ;504
000a4c  e1a0000a          MOV      r0,r10                ;504
000a50  e59d2010          LDR      r2,[sp,#0x10]         ;504
000a54  ebfffffe          BL       _find_desc_frame
000a58  e1a07000          MOV      r7,r0                 ;504
000a5c  e5d50002          LDRB     r0,[r5,#2]            ;506
000a60  e3500004          CMP      r0,#4                 ;506
000a64  0a000002          BEQ      |L1.2676|
000a68  e3500006          CMP      r0,#6                 ;506
000a6c  1a000017          BNE      |L1.2768|
000a70  ea00000b          B        |L1.2724|
                  |L1.2676|
000a74  e1a00000          MOV      r0,r0                 ;507
000a78  e5d70006          LDRB     r0,[r7,#6]            ;508
000a7c  e5d71005          LDRB     r1,[r7,#5]            ;508
000a80  e1810400          ORR      r0,r1,r0,LSL #8       ;508
000a84  e5d71008          LDRB     r1,[r7,#8]            ;508
000a88  e5d72007          LDRB     r2,[r7,#7]            ;508
000a8c  e1821401          ORR      r1,r2,r1,LSL #8       ;508
000a90  e0000091          MUL      r0,r1,r0              ;508
000a94  e5d51015          LDRB     r1,[r5,#0x15]         ;508
000a98  e0000091          MUL      r0,r1,r0              ;508
000a9c  e1a081a0          LSR      r8,r0,#3              ;508
000aa0  ea00000d          B        |L1.2780|
                  |L1.2724|
000aa4  e1a00000          MOV      r0,r0                 ;510
000aa8  e5d70006          LDRB     r0,[r7,#6]            ;511
000aac  e5d71005          LDRB     r1,[r7,#5]            ;511
000ab0  e1810400          ORR      r0,r1,r0,LSL #8       ;511
000ab4  e5d71008          LDRB     r1,[r7,#8]            ;511
000ab8  e5d72007          LDRB     r2,[r7,#7]            ;511
000abc  e1821401          ORR      r1,r2,r1,LSL #8       ;511
000ac0  e0000091          MUL      r0,r1,r0              ;511
000ac4  e1a00200          LSL      r0,r0,#4              ;511
000ac8  e1a081a0          LSR      r8,r0,#3              ;511
000acc  ea000002          B        |L1.2780|
                  |L1.2768|
000ad0  e1a00000          MOV      r0,r0                 ;513
000ad4  e3a00000          MOV      r0,#0                 ;513
000ad8  eaffff69          B        |L1.2180|
                  |L1.2780|
000adc  e1a00000          MOV      r0,r0                 ;509
000ae0  e2841012          ADD      r1,r4,#0x12           ;515
000ae4  e1a00008          MOV      r0,r8                 ;515
000ae8  ebfffffe          BL       __aeabi_uwrite4
000aec  e3a00001          MOV      r0,#1                 ;516
000af0  eaffff63          B        |L1.2180|
                  |L1.2804|
000af4  e1a00000          MOV      r0,r0                 ;517
000af8  e2840004          ADD      r0,r4,#4              ;519
000afc  ebfffffe          BL       __aeabi_uread4
000b00  e3500000          CMP      r0,#0                 ;519
000b04  1a000096          BNE      |L1.3428|
000b08  e59d0018          LDR      r0,[sp,#0x18]         ;520
000b0c  ebfffffe          BL       _get_desc_vs
000b10  e1a08000          MOV      r8,r0                 ;520
000b14  e1a00000          MOV      r0,r0                 ;521
000b18  e3580000          CMP      r8,#0                 ;521
000b1c  1a000007          BNE      |L1.2880|
000b20  e59f2a74          LDR      r2,|L1.5532|
000b24  e59f1a6c          LDR      r1,|L1.5528|
000b28  e24f0ffb          ADR      r0,|L1.1860|
000b2c  ebfffffe          BL       __2printf
000b30  e1a00000          MOV      r0,r0                 ;521
000b34  e1a00000          MOV      r0,r0                 ;521
000b38  e3a00000          MOV      r0,#0                 ;521
000b3c  eaffff50          B        |L1.2180|
                  |L1.2880|
000b40  e1a00000          MOV      r0,r0                 ;521
000b44  e1a00008          MOV      r0,r8                 ;522
000b48  ebfffffe          BL       _end_of_streaming_descriptor
000b4c  e58d000c          STR      r0,[sp,#0xc]          ;522
000b50  e1a00000          MOV      r0,r0                 ;523
000b54  e1a00008          MOV      r0,r8                 ;523
000b58  e5d01000          LDRB     r1,[r0,#0]            ;523
000b5c  e0811000          ADD      r1,r1,r0              ;523
000b60  e1a0b001          MOV      r11,r1                ;523
000b64  e1a0000b          MOV      r0,r11                ;523
000b68  e59d100c          LDR      r1,[sp,#0xc]          ;523
000b6c  e59d2014          LDR      r2,[sp,#0x14]         ;523
000b70  ebfffffe          BL       _find_desc_format
000b74  e1a0a000          MOV      r10,r0                ;523
000b78  e1a00000          MOV      r0,r0                 ;524
000b7c  e1a0000a          MOV      r0,r10                ;524
000b80  e5d01000          LDRB     r1,[r0,#0]            ;524
000b84  e0811000          ADD      r1,r1,r0              ;524
000b88  e1a0b001          MOV      r11,r1                ;524
000b8c  e1a0000b          MOV      r0,r11                ;524
000b90  e59d100c          LDR      r1,[sp,#0xc]          ;524
000b94  e59d2010          LDR      r2,[sp,#0x10]         ;524
000b98  ebfffffe          BL       _find_desc_frame
000b9c  e1a05000          MOV      r5,r0                 ;524
000ba0  e3590082          CMP      r9,#0x82              ;527
000ba4  0a00001b          BEQ      |L1.3096|
000ba8  e3590083          CMP      r9,#0x83              ;527
000bac  0a000004          BEQ      |L1.3012|
000bb0  e3590084          CMP      r9,#0x84              ;527
000bb4  0a000038          BEQ      |L1.3228|
000bb8  e3590087          CMP      r9,#0x87              ;527
000bbc  1a000044          BNE      |L1.3284|
000bc0  ea00002c          B        |L1.3192|
                  |L1.3012|
000bc4  e1a00000          MOV      r0,r0                 ;528
000bc8  e5d5b019          LDRB     r11,[r5,#0x19]        ;531
000bcc  e35b0000          CMP      r11,#0                ;532
000bd0  0a000004          BEQ      |L1.3048|
000bd4  e24b1001          SUB      r1,r11,#1             ;532
000bd8  e285201a          ADD      r2,r5,#0x1a           ;532
000bdc  e0820101          ADD      r0,r2,r1,LSL #2       ;532
000be0  ebfffffe          BL       __aeabi_uread4
000be4  ea000001          B        |L1.3056|
                  |L1.3048|
000be8  e285001e          ADD      r0,r5,#0x1e           ;532
000bec  ebfffffe          BL       __aeabi_uread4
                  |L1.3056|
000bf0  e58d0004          STR      r0,[sp,#4]            ;532
000bf4  e285001a          ADD      r0,r5,#0x1a           ;533
000bf8  ebfffffe          BL       __aeabi_uread4
000bfc  e58d0008          STR      r0,[sp,#8]            ;533
000c00  e59d6004          LDR      r6,[sp,#4]            ;534
000c04  e59f1984          LDR      r1,|L1.5520|
000c08  e59d0008          LDR      r0,[sp,#8]            ;535
000c0c  ebfffffe          BL       __aeabi_uidivmod
000c10  e1a07000          MOV      r7,r0                 ;535
000c14  ea000031          B        |L1.3296|
                  |L1.3096|
000c18  e1a00000          MOV      r0,r0                 ;538
000c1c  e5d50019          LDRB     r0,[r5,#0x19]         ;541
000c20  e58d0004          STR      r0,[sp,#4]            ;541
000c24  e59d0004          LDR      r0,[sp,#4]            ;542
000c28  e3500000          CMP      r0,#0                 ;542
000c2c  0a000005          BEQ      |L1.3144|
000c30  e59d1004          LDR      r1,[sp,#4]            ;542
000c34  e2411001          SUB      r1,r1,#1              ;542
000c38  e285201a          ADD      r2,r5,#0x1a           ;542
000c3c  e0820101          ADD      r0,r2,r1,LSL #2       ;542
000c40  ebfffffe          BL       __aeabi_uread4
000c44  ea000001          B        |L1.3152|
                  |L1.3144|
000c48  e285001e          ADD      r0,r5,#0x1e           ;542
000c4c  ebfffffe          BL       __aeabi_uread4
                  |L1.3152|
000c50  e58d0008          STR      r0,[sp,#8]            ;542
000c54  e285001a          ADD      r0,r5,#0x1a           ;543
000c58  ebfffffe          BL       __aeabi_uread4
000c5c  e1a0b000          MOV      r11,r0                ;543
000c60  e1a0600b          MOV      r6,r11                ;544
000c64  e59f1924          LDR      r1,|L1.5520|
000c68  e59d0008          LDR      r0,[sp,#8]            ;545
000c6c  ebfffffe          BL       __aeabi_uidivmod
000c70  e1a07000          MOV      r7,r0                 ;545
000c74  ea000019          B        |L1.3296|
                  |L1.3192|
000c78  e1a00000          MOV      r0,r0                 ;548
000c7c  e2850015          ADD      r0,r5,#0x15           ;549
000c80  ebfffffe          BL       __aeabi_uread4
000c84  e1a06000          MOV      r6,r0                 ;549
000c88  e59f1900          LDR      r1,|L1.5520|
000c8c  e1a00006          MOV      r0,r6                 ;550
000c90  ebfffffe          BL       __aeabi_uidivmod
000c94  e1a07000          MOV      r7,r0                 ;550
000c98  ea000010          B        |L1.3296|
                  |L1.3228|
000c9c  e1a00000          MOV      r0,r0                 ;552
000ca0  e5d5b019          LDRB     r11,[r5,#0x19]        ;554
000ca4  e35b0000          CMP      r11,#0                ;555
000ca8  0a000001          BEQ      |L1.3252|
000cac  e3a06000          MOV      r6,#0                 ;556
000cb0  ea000006          B        |L1.3280|
                  |L1.3252|
000cb4  e2850022          ADD      r0,r5,#0x22           ;558
000cb8  ebfffffe          BL       __aeabi_uread4
000cbc  e1a06000          MOV      r6,r0                 ;558
000cc0  e59f18c8          LDR      r1,|L1.5520|
000cc4  e1a00006          MOV      r0,r6                 ;559
000cc8  ebfffffe          BL       __aeabi_uidivmod
000ccc  e1a07000          MOV      r7,r0                 ;559
                  |L1.3280|
000cd0  ea000002          B        |L1.3296|
                  |L1.3284|
000cd4  e1a00000          MOV      r0,r0                 ;563
000cd8  e3a00000          MOV      r0,#0                 ;563
000cdc  eafffee8          B        |L1.2180|
                  |L1.3296|
000ce0  e1a00000          MOV      r0,r0                 ;537
000ce4  e2841004          ADD      r1,r4,#4              ;565
000ce8  e1a00006          MOV      r0,r6                 ;565
000cec  ebfffffe          BL       __aeabi_uwrite4
000cf0  e3560000          CMP      r6,#0                 ;566
000cf4  1a000003          BNE      |L1.3336|
000cf8  e2841016          ADD      r1,r4,#0x16           ;567
000cfc  e3a00000          MOV      r0,#0                 ;567
000d00  ebfffffe          BL       __aeabi_uwrite4
000d04  ea000014          B        |L1.3420|
                  |L1.3336|
000d08  e2840012          ADD      r0,r4,#0x12           ;569
000d0c  ebfffffe          BL       __aeabi_uread4
000d10  e58d0008          STR      r0,[sp,#8]            ;569
000d14  e3570000          CMP      r7,#0                 ;571
000d18  1a000002          BNE      |L1.3368|
000d1c  e59d0008          LDR      r0,[sp,#8]            ;572
000d20  e280b002          ADD      r11,r0,#2             ;572
000d24  ea000005          B        |L1.3392|
                  |L1.3368|
000d28  e59d1008          LDR      r1,[sp,#8]            ;574
000d2c  e0811007          ADD      r1,r1,r7              ;574
000d30  e2410001          SUB      r0,r1,#1              ;574
000d34  e1a01007          MOV      r1,r7                 ;574
000d38  ebfffffe          BL       __aeabi_uidivmod
000d3c  e280b002          ADD      r11,r0,#2             ;574
                  |L1.3392|
000d40  e35b0c01          CMP      r11,#0x100            ;576
000d44  9a000000          BLS      |L1.3404|
000d48  e3a0bc01          MOV      r11,#0x100            ;577
                  |L1.3404|
000d4c  e2841016          ADD      r1,r4,#0x16           ;578
000d50  e1a0000b          MOV      r0,r11                ;578
000d54  ebfffffe          BL       __aeabi_uwrite4
000d58  e1a00000          MOV      r0,r0                 ;579
                  |L1.3420|
000d5c  e3a00001          MOV      r0,#1                 ;580
000d60  eafffec7          B        |L1.2180|
                  |L1.3428|
000d64  e1a00000          MOV      r0,r0                 ;581
000d68  e3a00001          MOV      r0,#1                 ;582
000d6c  eafffec4          B        |L1.2180|
;;;584    
                          ENDP

                  _close_vc_itf PROC
;;;588     * @param[in]     altnum   The target alternate setting number. */
;;;589    static bool _close_vc_itf(uint8_t rhport, videod_interface_t *self)
000d70  e92d47f0          PUSH     {r4-r10,lr}
;;;590    {
000d74  e1a09000          MOV      r9,r0
000d78  e1a06001          MOV      r6,r1
;;;591      tusb_desc_vc_itf_t const *vc = _get_desc_vc(self);
000d7c  e1a00006          MOV      r0,r6
000d80  ebfffffe          BL       _get_desc_vc
000d84  e1a04000          MOV      r4,r0
;;;592    
;;;593      /* The next descriptor after the class-specific VC interface header descriptor. */
;;;594      void const *cur = (uint8_t const*)vc + vc->std.bLength + vc->ctl.bLength;
000d88  e5d40000          LDRB     r0,[r4,#0]
000d8c  e0800004          ADD      r0,r0,r4
000d90  e5d41009          LDRB     r1,[r4,#9]
000d94  e0805001          ADD      r5,r0,r1
;;;595    
;;;596      /* The end of the video control interface descriptor. */
;;;597      void const *end = _end_of_control_descriptor(vc);
000d98  e1a00004          MOV      r0,r4
000d9c  ebfffffe          BL       _end_of_control_descriptor
000da0  e1a07000          MOV      r7,r0
;;;598      if (vc->std.bNumEndpoints) {
000da4  e5d40004          LDRB     r0,[r4,#4]
000da8  e3500000          CMP      r0,#0
000dac  0a000015          BEQ      |L1.3592|
;;;599        /* Find the notification endpoint descriptor. */
;;;600        cur = _find_desc(cur, end, TUSB_DESC_ENDPOINT);
000db0  e3a02005          MOV      r2,#5
000db4  e1a01007          MOV      r1,r7
000db8  e1a00005          MOV      r0,r5
000dbc  ebfffffe          BL       _find_desc
000dc0  e1a05000          MOV      r5,r0
;;;601        TU_ASSERT(cur < end);
000dc4  e1a00000          MOV      r0,r0
000dc8  e1550007          CMP      r5,r7
000dcc  3a000007          BCC      |L1.3568|
000dd0  e59f27c8          LDR      r2,|L1.5536|
000dd4  e59f17c8          LDR      r1,|L1.5540|
000dd8  e59f07c8          LDR      r0,|L1.5544|
000ddc  ebfffffe          BL       __2printf
000de0  e1a00000          MOV      r0,r0
000de4  e1a00000          MOV      r0,r0
000de8  e3a00000          MOV      r0,#0
                  |L1.3564|
;;;602        tusb_desc_endpoint_t const *notif = (tusb_desc_endpoint_t const *)cur;
;;;603        usbd_edpt_close(rhport, notif->bEndpointAddress);
;;;604      }
;;;605      self->cur = 0;
;;;606      return true;
;;;607    }
000dec  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3568|
000df0  e1a00000          MOV      r0,r0                 ;601
000df4  e1a08005          MOV      r8,r5                 ;602
000df8  e5d81002          LDRB     r1,[r8,#2]            ;603
000dfc  e1a00009          MOV      r0,r9                 ;603
000e00  ebfffffe          BL       usbd_edpt_close
000e04  e1a00000          MOV      r0,r0                 ;604
                  |L1.3592|
000e08  e3a00000          MOV      r0,#0                 ;605
000e0c  e5c60006          STRB     r0,[r6,#6]            ;605
000e10  e5c60007          STRB     r0,[r6,#7]            ;605
000e14  e3a00001          MOV      r0,#1                 ;606
000e18  eafffff3          B        |L1.3564|
;;;608    
                          ENDP

                  _open_vc_itf PROC
;;;612     * @param[in]     altnum   The target alternate setting number. */
;;;613    static bool _open_vc_itf(uint8_t rhport, videod_interface_t *self, uint_fast8_t altnum)
000e1c  e92d5ff0          PUSH     {r4-r12,lr}
;;;614    {
000e20  e1a0b000          MOV      r11,r0
000e24  e1a06001          MOV      r6,r1
000e28  e1a09002          MOV      r9,r2
;;;615      TU_LOG2("    open VC %d\n", altnum);
;;;616      uint8_t const *beg = self->beg;
000e2c  e1a00006          MOV      r0,r6
000e30  ebfffffe          BL       __aeabi_uread4
000e34  e1a07000          MOV      r7,r0
;;;617      uint8_t const *end = beg + self->len;
000e38  e5d60005          LDRB     r0,[r6,#5]
000e3c  e5d61004          LDRB     r1,[r6,#4]
000e40  e1810400          ORR      r0,r1,r0,LSL #8
000e44  e0808007          ADD      r8,r0,r7
;;;618    
;;;619      /* The first descriptor is a video control interface descriptor. */
;;;620      uint8_t const *cur = _find_desc_itf(beg, end, _desc_itfnum(beg), altnum);
000e48  e1a00007          MOV      r0,r7
000e4c  ebfffffe          BL       _desc_itfnum
000e50  e1a0a000          MOV      r10,r0
000e54  e1a03009          MOV      r3,r9
000e58  e1a0200a          MOV      r2,r10
000e5c  e1a01008          MOV      r1,r8
000e60  e1a00007          MOV      r0,r7
000e64  ebfffffe          BL       _find_desc_itf
000e68  e1a05000          MOV      r5,r0
;;;621      TU_LOG2("    cur %d\n", cur - beg);
;;;622      TU_VERIFY(cur < end);
000e6c  e1a00000          MOV      r0,r0
000e70  e1550008          CMP      r5,r8
000e74  3a000001          BCC      |L1.3712|
000e78  e3a00000          MOV      r0,#0
                  |L1.3708|
;;;623    
;;;624      tusb_desc_vc_itf_t const *vc = (tusb_desc_vc_itf_t const *)cur;
;;;625      TU_LOG2("    bInCollection %d\n", vc->ctl.bInCollection);
;;;626      /* Support for up to 2 streaming interfaces only. */
;;;627      TU_ASSERT(vc->ctl.bInCollection <= CFG_TUD_VIDEO_STREAMING);
;;;628    
;;;629      /* Update to point the end of the video control interface descriptor. */
;;;630      end = _end_of_control_descriptor(cur);
;;;631    
;;;632      /* Advance to the next descriptor after the class-specific VC interface header descriptor. */
;;;633      cur += vc->std.bLength + vc->ctl.bLength;
;;;634      TU_LOG2("    bNumEndpoints %d\n", vc->std.bNumEndpoints);
;;;635      /* Open the notification endpoint if it exist. */
;;;636      if (vc->std.bNumEndpoints) {
;;;637        /* Support for 1 endpoint only. */
;;;638        TU_VERIFY(1 == vc->std.bNumEndpoints);
;;;639        /* Find the notification endpoint descriptor. */
;;;640        cur = _find_desc(cur, end, TUSB_DESC_ENDPOINT);
;;;641        TU_VERIFY(cur < end);
;;;642        tusb_desc_endpoint_t const *notif = (tusb_desc_endpoint_t const *)cur;
;;;643        /* Open the notification endpoint */
;;;644        TU_ASSERT(usbd_edpt_open(rhport, notif));
;;;645      }
;;;646      self->cur = (uint16_t) ((uint8_t const*)vc - beg);
;;;647      return true;
;;;648    }
000e7c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.3712|
000e80  e1a00000          MOV      r0,r0                 ;622
000e84  e1a04005          MOV      r4,r5                 ;624
000e88  e1a00000          MOV      r0,r0                 ;627
000e8c  e5d40014          LDRB     r0,[r4,#0x14]         ;627
000e90  e3500001          CMP      r0,#1                 ;627
000e94  da000007          BLE      |L1.3768|
000e98  e59f270c          LDR      r2,|L1.5548|
000e9c  e59f170c          LDR      r1,|L1.5552|
000ea0  e59f0700          LDR      r0,|L1.5544|
000ea4  ebfffffe          BL       __2printf
000ea8  e1a00000          MOV      r0,r0                 ;627
000eac  e1a00000          MOV      r0,r0                 ;627
000eb0  e3a00000          MOV      r0,#0                 ;627
000eb4  eafffff0          B        |L1.3708|
                  |L1.3768|
000eb8  e1a00000          MOV      r0,r0                 ;627
000ebc  e1a00005          MOV      r0,r5                 ;630
000ec0  ebfffffe          BL       _end_of_control_descriptor
000ec4  e1a08000          MOV      r8,r0                 ;630
000ec8  e5d40000          LDRB     r0,[r4,#0]            ;633
000ecc  e5d41009          LDRB     r1,[r4,#9]            ;633
000ed0  e0800001          ADD      r0,r0,r1              ;633
000ed4  e0855000          ADD      r5,r5,r0              ;633
000ed8  e5d40004          LDRB     r0,[r4,#4]            ;636
000edc  e3500000          CMP      r0,#0                 ;636
000ee0  0a000022          BEQ      |L1.3952|
000ee4  e1a00000          MOV      r0,r0                 ;638
000ee8  e5d40004          LDRB     r0,[r4,#4]            ;638
000eec  e3500001          CMP      r0,#1                 ;638
000ef0  0a000001          BEQ      |L1.3836|
000ef4  e3a00000          MOV      r0,#0                 ;638
000ef8  eaffffdf          B        |L1.3708|
                  |L1.3836|
000efc  e1a00000          MOV      r0,r0                 ;638
000f00  e3a02005          MOV      r2,#5                 ;640
000f04  e1a01008          MOV      r1,r8                 ;640
000f08  e1a00005          MOV      r0,r5                 ;640
000f0c  ebfffffe          BL       _find_desc
000f10  e1a05000          MOV      r5,r0                 ;640
000f14  e1a00000          MOV      r0,r0                 ;641
000f18  e1550008          CMP      r5,r8                 ;641
000f1c  3a000001          BCC      |L1.3880|
000f20  e3a00000          MOV      r0,#0                 ;641
000f24  eaffffd4          B        |L1.3708|
                  |L1.3880|
000f28  e1a00000          MOV      r0,r0                 ;641
000f2c  e1a0a005          MOV      r10,r5                ;642
000f30  e1a00000          MOV      r0,r0                 ;644
000f34  e1a0100a          MOV      r1,r10                ;644
000f38  e1a0000b          MOV      r0,r11                ;644
000f3c  ebfffffe          BL       usbd_edpt_open
000f40  e3500000          CMP      r0,#0                 ;644
000f44  1a000007          BNE      |L1.3944|
000f48  e3a02fa1          MOV      r2,#0x284             ;644
000f4c  e59f165c          LDR      r1,|L1.5552|
000f50  e59f0650          LDR      r0,|L1.5544|
000f54  ebfffffe          BL       __2printf
000f58  e1a00000          MOV      r0,r0                 ;644
000f5c  e1a00000          MOV      r0,r0                 ;644
000f60  e3a00000          MOV      r0,#0                 ;644
000f64  eaffffc4          B        |L1.3708|
                  |L1.3944|
000f68  e1a00000          MOV      r0,r0                 ;644
000f6c  e1a00000          MOV      r0,r0                 ;645
                  |L1.3952|
000f70  e0440007          SUB      r0,r4,r7              ;646
000f74  e1a00800          LSL      r0,r0,#16             ;646
000f78  e1a00820          LSR      r0,r0,#16             ;646
000f7c  e5c60006          STRB     r0,[r6,#6]            ;646
000f80  e1a00420          LSR      r0,r0,#8              ;646
000f84  e5c60007          STRB     r0,[r6,#7]            ;646
000f88  e3a00001          MOV      r0,#1                 ;647
000f8c  eaffffba          B        |L1.3708|
;;;649    
                          ENDP

                  _open_vs_itf PROC
;;;653     * @param[in]     altnum   The target alternate setting number. */
;;;654    static bool _open_vs_itf(uint8_t rhport, videod_streaming_interface_t *stm, uint_fast8_t altnum)
000f90  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;655    {
000f94  e24dd010          SUB      sp,sp,#0x10
000f98  e1a04001          MOV      r4,r1
000f9c  e1a0a002          MOV      r10,r2
;;;656      uint_fast8_t i;
;;;657      TU_LOG2("    reopen VS %d\n", altnum);
;;;658      uint8_t const *desc = _videod_itf[stm->index_vc].beg;
000fa0  e5d41000          LDRB     r1,[r4,#0]
000fa4  e0812081          ADD      r2,r1,r1,LSL #1
000fa8  e0821181          ADD      r1,r2,r1,LSL #3
000fac  e51f2880          LDR      r2,|L1.1844|
000fb0  e0810002          ADD      r0,r1,r2
000fb4  ebfffffe          BL       __aeabi_uread4
000fb8  e1a07000          MOV      r7,r0
;;;659    
;;;660      /* Close endpoints of previous settings. */
;;;661      for (i = 0; i < TU_ARRAY_SIZE(stm->desc.ep); ++i) {
000fbc  e3a06000          MOV      r6,#0
000fc0  ea000013          B        |L1.4116|
                  |L1.4036|
;;;662        uint_fast16_t ofs_ep = stm->desc.ep[i];
000fc4  e2840008          ADD      r0,r4,#8
000fc8  e0800086          ADD      r0,r0,r6,LSL #1
000fcc  e1d000b0          LDRH     r0,[r0,#0]
000fd0  e58d0004          STR      r0,[sp,#4]
;;;663        if (!ofs_ep) break;
000fd4  e59d0004          LDR      r0,[sp,#4]
000fd8  e3500000          CMP      r0,#0
000fdc  1a000000          BNE      |L1.4068|
000fe0  ea00000d          B        |L1.4124|
                  |L1.4068|
;;;664        uint8_t  ep_adr = _desc_ep_addr(desc + ofs_ep);
000fe4  e59d1004          LDR      r1,[sp,#4]
000fe8  e0870001          ADD      r0,r7,r1
000fec  e5d09002          LDRB     r9,[r0,#2]
000ff0  e1a00000          MOV      r0,r0
;;;665        usbd_edpt_close(rhport, ep_adr);
000ff4  e1a01009          MOV      r1,r9
000ff8  e59d0010          LDR      r0,[sp,#0x10]
000ffc  ebfffffe          BL       usbd_edpt_close
;;;666        stm->desc.ep[i] = 0;
001000  e3a00000          MOV      r0,#0
001004  e2841008          ADD      r1,r4,#8
001008  e0811086          ADD      r1,r1,r6,LSL #1
00100c  e1c100b0          STRH     r0,[r1,#0]
001010  e2866001          ADD      r6,r6,#1              ;661
                  |L1.4116|
001014  e3560002          CMP      r6,#2                 ;661
001018  3affffe9          BCC      |L1.4036|
                  |L1.4124|
00101c  e1a00000          MOV      r0,r0                 ;663
;;;667        TU_LOG2("    close EP%02x\n", ep_adr);
;;;668      }
;;;669    
;;;670      /* clear transfer management information */
;;;671      stm->buffer  = NULL;
001020  e3a00000          MOV      r0,#0
001024  e584000c          STR      r0,[r4,#0xc]
;;;672      stm->bufsize = 0;
001028  e5840010          STR      r0,[r4,#0x10]
;;;673      stm->offset  = 0;
00102c  e5840014          STR      r0,[r4,#0x14]
;;;674    
;;;675      /* Find a alternate interface */
;;;676      uint8_t const *beg = desc + stm->desc.beg;
001030  e1d400b2          LDRH     r0,[r4,#2]
001034  e0800007          ADD      r0,r0,r7
001038  e58d000c          STR      r0,[sp,#0xc]
;;;677      uint8_t const *end = desc + stm->desc.end;
00103c  e1d400b4          LDRH     r0,[r4,#4]
001040  e0808007          ADD      r8,r0,r7
;;;678      uint8_t const *cur = _find_desc_itf(beg, end, _desc_itfnum(beg), altnum);
001044  e59d000c          LDR      r0,[sp,#0xc]
001048  ebfffffe          BL       _desc_itfnum
00104c  e1a09000          MOV      r9,r0
001050  e1a0300a          MOV      r3,r10
001054  e1a02009          MOV      r2,r9
001058  e1a01008          MOV      r1,r8
00105c  e59d000c          LDR      r0,[sp,#0xc]
001060  ebfffffe          BL       _find_desc_itf
001064  e1a05000          MOV      r5,r0
;;;679      TU_VERIFY(cur < end);
001068  e1a00000          MOV      r0,r0
00106c  e1550008          CMP      r5,r8
001070  3a000002          BCC      |L1.4224|
001074  e3a00000          MOV      r0,#0
                  |L1.4216|
001078  e28dd01c          ADD      sp,sp,#0x1c
;;;680    
;;;681      uint_fast8_t numeps = ((tusb_desc_interface_t const *)cur)->bNumEndpoints;
;;;682      TU_ASSERT(numeps <= TU_ARRAY_SIZE(stm->desc.ep));
;;;683      stm->desc.cur = (uint16_t) (cur - desc); /* Save the offset of the new settings */
;;;684      if (!altnum) {
;;;685        /* initialize streaming settings */
;;;686        stm->max_payload_transfer_size = 0;
;;;687        video_probe_and_commit_control_t *param =
;;;688          (video_probe_and_commit_control_t *)&stm->ep_buf;
;;;689        tu_memclr(param, sizeof(*param));
;;;690        TU_LOG2("    done 0\n");
;;;691        return _update_streaming_parameters(stm, param);
;;;692      }
;;;693      /* Open endpoints of the new settings. */
;;;694      for (i = 0, cur = tu_desc_next(cur); i < numeps; ++i, cur = tu_desc_next(cur)) {
;;;695        cur = _find_desc_ep(cur, end);
;;;696        TU_ASSERT(cur < end);
;;;697        tusb_desc_endpoint_t const *ep = (tusb_desc_endpoint_t const*)cur;
;;;698        if (!stm->max_payload_transfer_size) {
;;;699          video_probe_and_commit_control_t const *param = (video_probe_and_commit_control_t const*)&stm->ep_buf;
;;;700          uint_fast32_t max_size = param->dwMaxPayloadTransferSize;
;;;701          if ((TUSB_XFER_ISOCHRONOUS == ep->bmAttributes.xfer) &&
;;;702              (tu_edpt_packet_size(ep) < max_size))
;;;703          {
;;;704            /* FS must be less than or equal to max packet size */
;;;705            return false;
;;;706          }
;;;707          /* Set the negotiated value */
;;;708          stm->max_payload_transfer_size = max_size;
;;;709        }
;;;710        TU_ASSERT(usbd_edpt_open(rhport, ep));
;;;711        stm->desc.ep[i] = (uint16_t) (cur - desc);
;;;712        TU_LOG2("    open EP%02x\n", _desc_ep_addr(cur));
;;;713      }
;;;714      /* initialize payload header */
;;;715      tusb_video_payload_header_t *hdr = (tusb_video_payload_header_t*)stm->ep_buf;
;;;716      hdr->bHeaderLength = sizeof(*hdr);
;;;717      hdr->bmHeaderInfo  = 0;
;;;718    
;;;719      TU_LOG2("    done\n");
;;;720      return true;
;;;721    }
00107c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4224|
001080  e1a00000          MOV      r0,r0                 ;679
001084  e5d5b004          LDRB     r11,[r5,#4]           ;681
001088  e1a00000          MOV      r0,r0                 ;682
00108c  e35b0002          CMP      r11,#2                ;682
001090  9a000007          BLS      |L1.4276|
001094  e59f2518          LDR      r2,|L1.5556|
001098  e59f1518          LDR      r1,|L1.5560|
00109c  e59f0504          LDR      r0,|L1.5544|
0010a0  ebfffffe          BL       __2printf
0010a4  e1a00000          MOV      r0,r0                 ;682
0010a8  e1a00000          MOV      r0,r0                 ;682
0010ac  e3a00000          MOV      r0,#0                 ;682
0010b0  eafffff0          B        |L1.4216|
                  |L1.4276|
0010b4  e1a00000          MOV      r0,r0                 ;682
0010b8  e0450007          SUB      r0,r5,r7              ;683
0010bc  e1c400b6          STRH     r0,[r4,#6]            ;683
0010c0  e35a0000          CMP      r10,#0                ;684
0010c4  1a000009          BNE      |L1.4336|
0010c8  e3a00000          MOV      r0,#0                 ;686
0010cc  e5840018          STR      r0,[r4,#0x18]         ;686
0010d0  e2849020          ADD      r9,r4,#0x20           ;687
0010d4  e3a01030          MOV      r1,#0x30              ;689
0010d8  e1a00009          MOV      r0,r9                 ;689
0010dc  ebfffffe          BL       __aeabi_memclr
0010e0  e1a01009          MOV      r1,r9                 ;691
0010e4  e1a00004          MOV      r0,r4                 ;691
0010e8  ebfffffe          BL       _update_streaming_parameters
0010ec  eaffffe1          B        |L1.4216|
                  |L1.4336|
0010f0  e1a00000          MOV      r0,r0                 ;692
0010f4  e3a06000          MOV      r6,#0                 ;694
0010f8  e1a00005          MOV      r0,r5                 ;694
0010fc  e1a01000          MOV      r1,r0                 ;694
001100  e5d12000          LDRB     r2,[r1,#0]            ;694
001104  e0822001          ADD      r2,r2,r1              ;694
001108  e1a05002          MOV      r5,r2                 ;694
00110c  ea000043          B        |L1.4640|
                  |L1.4368|
001110  e1a01008          MOV      r1,r8                 ;695
001114  e1a00005          MOV      r0,r5                 ;695
001118  ebfffffe          BL       _find_desc_ep
00111c  e1a05000          MOV      r5,r0                 ;695
001120  e1a00000          MOV      r0,r0                 ;696
001124  e1550008          CMP      r5,r8                 ;696
001128  3a000007          BCC      |L1.4428|
00112c  e3a02fae          MOV      r2,#0x2b8             ;696
001130  e59f1480          LDR      r1,|L1.5560|
001134  e59f046c          LDR      r0,|L1.5544|
001138  ebfffffe          BL       __2printf
00113c  e1a00000          MOV      r0,r0                 ;696
001140  e1a00000          MOV      r0,r0                 ;696
001144  e3a00000          MOV      r0,#0                 ;696
001148  eaffffca          B        |L1.4216|
                  |L1.4428|
00114c  e1a00000          MOV      r0,r0                 ;696
001150  e1a09005          MOV      r9,r5                 ;697
001154  e5940018          LDR      r0,[r4,#0x18]         ;698
001158  e3500000          CMP      r0,#0                 ;698
00115c  1a000016          BNE      |L1.4540|
001160  e2840020          ADD      r0,r4,#0x20           ;699
001164  e58d0004          STR      r0,[sp,#4]            ;699
001168  e59d0004          LDR      r0,[sp,#4]            ;700
00116c  e2800016          ADD      r0,r0,#0x16           ;700
001170  ebfffffe          BL       __aeabi_uread4
001174  e58d0000          STR      r0,[sp,#0]            ;700
001178  e5d90003          LDRB     r0,[r9,#3]            ;701
00117c  e2000003          AND      r0,r0,#3              ;701
001180  e3500001          CMP      r0,#1                 ;701
001184  1a000009          BNE      |L1.4528|
001188  e1a00000          MOV      r0,r0                 ;702
00118c  e5d90005          LDRB     r0,[r9,#5]            ;702
001190  e5d91004          LDRB     r1,[r9,#4]            ;702
001194  e1810400          ORR      r0,r1,r0,LSL #8       ;702
001198  e3c00b3e          BIC      r0,r0,#0xf800         ;702
00119c  e59d1000          LDR      r1,[sp,#0]            ;702
0011a0  e1500001          CMP      r0,r1                 ;702
0011a4  2a000001          BCS      |L1.4528|
0011a8  e3a00000          MOV      r0,#0                 ;705
0011ac  eaffffb1          B        |L1.4216|
                  |L1.4528|
0011b0  e59d0000          LDR      r0,[sp,#0]            ;708
0011b4  e5840018          STR      r0,[r4,#0x18]         ;708
0011b8  e1a00000          MOV      r0,r0                 ;709
                  |L1.4540|
0011bc  e1a00000          MOV      r0,r0                 ;710
0011c0  e1a01009          MOV      r1,r9                 ;710
0011c4  e59d0010          LDR      r0,[sp,#0x10]         ;710
0011c8  ebfffffe          BL       usbd_edpt_open
0011cc  e3500000          CMP      r0,#0                 ;710
0011d0  1a000007          BNE      |L1.4596|
0011d4  e59f23e0          LDR      r2,|L1.5564|
0011d8  e59f13d8          LDR      r1,|L1.5560|
0011dc  e59f03c4          LDR      r0,|L1.5544|
0011e0  ebfffffe          BL       __2printf
0011e4  e1a00000          MOV      r0,r0                 ;710
0011e8  e1a00000          MOV      r0,r0                 ;710
0011ec  e3a00000          MOV      r0,#0                 ;710
0011f0  eaffffa0          B        |L1.4216|
                  |L1.4596|
0011f4  e1a00000          MOV      r0,r0                 ;710
0011f8  e0450007          SUB      r0,r5,r7              ;711
0011fc  e2841008          ADD      r1,r4,#8              ;711
001200  e0811086          ADD      r1,r1,r6,LSL #1       ;711
001204  e1c100b0          STRH     r0,[r1,#0]            ;711
001208  e2866001          ADD      r6,r6,#1              ;694
00120c  e1a00005          MOV      r0,r5                 ;694
001210  e1a01000          MOV      r1,r0                 ;694
001214  e5d12000          LDRB     r2,[r1,#0]            ;694
001218  e0822001          ADD      r2,r2,r1              ;694
00121c  e1a05002          MOV      r5,r2                 ;694
                  |L1.4640|
001220  e156000b          CMP      r6,r11                ;694
001224  3affffb9          BCC      |L1.4368|
001228  e2840020          ADD      r0,r4,#0x20           ;715
00122c  e58d0008          STR      r0,[sp,#8]            ;715
001230  e3a01002          MOV      r1,#2                 ;716
001234  e59d0008          LDR      r0,[sp,#8]            ;716
001238  e5c01000          STRB     r1,[r0,#0]            ;716
00123c  e3a01000          MOV      r1,#0                 ;717
001240  e59d0008          LDR      r0,[sp,#8]            ;717
001244  e5c01001          STRB     r1,[r0,#1]            ;717
001248  e3a00001          MOV      r0,#1                 ;720
00124c  eaffff89          B        |L1.4216|
;;;722    
                          ENDP

                  _prepare_in_payload PROC
;;;723    /** Prepare the next packet payload. */
;;;724    static uint_fast16_t _prepare_in_payload(videod_streaming_interface_t *stm)
001250  e92d41f0          PUSH     {r4-r8,lr}
;;;725    {
001254  e1a04000          MOV      r4,r0
;;;726      uint_fast16_t remaining = stm->bufsize - stm->offset;
001258  e5940010          LDR      r0,[r4,#0x10]
00125c  e5941014          LDR      r1,[r4,#0x14]
001260  e0407001          SUB      r7,r0,r1
;;;727      uint_fast16_t hdr_len   = stm->ep_buf[0];
001264  e5d45020          LDRB     r5,[r4,#0x20]
;;;728      uint_fast16_t pkt_len   = stm->max_payload_transfer_size;
001268  e5948018          LDR      r8,[r4,#0x18]
;;;729    ///// 	  printf("\n\r======_prepare_in_payload========\n\r");
;;;730     if (hdr_len + remaining < pkt_len) {
00126c  e0850007          ADD      r0,r5,r7
001270  e1500008          CMP      r0,r8
001274  2a000000          BCS      |L1.4732|
;;;731        pkt_len = hdr_len + remaining;
001278  e0858007          ADD      r8,r5,r7
                  |L1.4732|
;;;732      }
;;;733      uint_fast16_t data_len = pkt_len - hdr_len;
00127c  e0486005          SUB      r6,r8,r5
;;;734      memcpy(&stm->ep_buf[hdr_len], stm->buffer + stm->offset, data_len);
001280  e594200c          LDR      r2,[r4,#0xc]
001284  e5943014          LDR      r3,[r4,#0x14]
001288  e0821003          ADD      r1,r2,r3
00128c  e2842020          ADD      r2,r4,#0x20
001290  e0820005          ADD      r0,r2,r5
001294  e1a02006          MOV      r2,r6
001298  ebfffffe          BL       __aeabi_memcpy
;;;735      stm->offset += data_len;
00129c  e5940014          LDR      r0,[r4,#0x14]
0012a0  e0800006          ADD      r0,r0,r6
0012a4  e5840014          STR      r0,[r4,#0x14]
;;;736      remaining -= data_len;
0012a8  e0477006          SUB      r7,r7,r6
;;;737      if (!remaining) {
0012ac  e3570000          CMP      r7,#0
0012b0  1a000004          BNE      |L1.4808|
;;;738        tusb_video_payload_header_t *hdr = (tusb_video_payload_header_t*)stm->ep_buf;
0012b4  e2840020          ADD      r0,r4,#0x20
;;;739        hdr->EndOfFrame = 1;
0012b8  e5d01001          LDRB     r1,[r0,#1]
0012bc  e3811002          ORR      r1,r1,#2
0012c0  e5c01001          STRB     r1,[r0,#1]
;;;740      }
0012c4  e1a00000          MOV      r0,r0
                  |L1.4808|
;;;741      return hdr_len + data_len;
0012c8  e0850006          ADD      r0,r5,r6
;;;742    }
0012cc  e8bd81f0          POP      {r4-r8,pc}
;;;743    
                          ENDP

                  handle_video_ctl_std_req PROC
;;;744    /** Handle a standard request to the video control interface. */
;;;745    static int handle_video_ctl_std_req(uint8_t rhport, uint8_t stage,
0012d0  e92d43f8          PUSH     {r3-r9,lr}
;;;746                                        tusb_control_request_t const *request,
;;;747                                        uint_fast8_t ctl_idx)
;;;748    {
0012d4  e1a08000          MOV      r8,r0
0012d8  e1a07001          MOV      r7,r1
0012dc  e1a04002          MOV      r4,r2
0012e0  e1a05003          MOV      r5,r3
;;;749     	  printf("\n\r======handle_video_ctl_std_req========\n\r");
0012e4  e28f0fb5          ADR      r0,|L1.5568|
0012e8  ebfffffe          BL       __2printf
;;;750     switch (request->bRequest) {
0012ec  e5d40001          LDRB     r0,[r4,#1]
0012f0  e350000a          CMP      r0,#0xa
0012f4  0a000002          BEQ      |L1.4868|
0012f8  e350000b          CMP      r0,#0xb
0012fc  1a000054          BNE      |L1.5204|
001300  ea000027          B        |L1.5028|
                  |L1.4868|
;;;751        case TUSB_REQ_GET_INTERFACE:
001304  e1a00000          MOV      r0,r0
;;;752          if (stage == CONTROL_STAGE_SETUP)
001308  e3570001          CMP      r7,#1
00130c  1a000022          BNE      |L1.5020|
;;;753          {
;;;754            TU_VERIFY(1 == request->wLength, VIDEO_ERROR_UNKNOWN);
001310  e1a00000          MOV      r0,r0
001314  e5d40007          LDRB     r0,[r4,#7]
001318  e5d41006          LDRB     r1,[r4,#6]
00131c  e1810400          ORR      r0,r1,r0,LSL #8
001320  e3500001          CMP      r0,#1
001324  0a000001          BEQ      |L1.4912|
001328  e3a000ff          MOV      r0,#0xff
                  |L1.4908|
;;;755            tusb_desc_vc_itf_t const *vc = _get_desc_vc(&_videod_itf[ctl_idx]);
;;;756            TU_VERIFY(vc, VIDEO_ERROR_UNKNOWN);
;;;757    
;;;758            uint8_t alt_num = vc->std.bAlternateSetting;
;;;759    
;;;760            TU_VERIFY(tud_control_xfer(rhport, request, &alt_num, sizeof(alt_num)), VIDEO_ERROR_UNKNOWN);
;;;761          }
;;;762          return VIDEO_ERROR_NONE;
;;;763    
;;;764        case TUSB_REQ_SET_INTERFACE:
;;;765          if (stage == CONTROL_STAGE_SETUP)
;;;766          {
;;;767            TU_VERIFY(0 == request->wLength, VIDEO_ERROR_UNKNOWN);
;;;768            TU_VERIFY(_close_vc_itf(rhport, &_videod_itf[ctl_idx]), VIDEO_ERROR_UNKNOWN);
;;;769            TU_VERIFY(_open_vc_itf(rhport, &_videod_itf[ctl_idx], request->wValue), VIDEO_ERROR_UNKNOWN);
;;;770            tud_control_status(rhport, request);
;;;771          }
;;;772          return VIDEO_ERROR_NONE;
;;;773    
;;;774        default: /* Unknown/Unsupported request */
;;;775          TU_BREAKPOINT();
;;;776          return VIDEO_ERROR_INVALID_REQUEST;
;;;777      }
;;;778    }
00132c  e8bd83f8          POP      {r3-r9,pc}
                  |L1.4912|
001330  e1a00000          MOV      r0,r0                 ;754
001334  e0851085          ADD      r1,r5,r5,LSL #1       ;755
001338  e0811185          ADD      r1,r1,r5,LSL #3       ;755
00133c  e51f2c10          LDR      r2,|L1.1844|
001340  e0810002          ADD      r0,r1,r2              ;755
001344  ebfffffe          BL       _get_desc_vc
001348  e1a06000          MOV      r6,r0                 ;755
00134c  e1a00000          MOV      r0,r0                 ;756
001350  e3560000          CMP      r6,#0                 ;756
001354  1a000001          BNE      |L1.4960|
001358  e3a000ff          MOV      r0,#0xff              ;756
00135c  eafffff2          B        |L1.4908|
                  |L1.4960|
001360  e1a00000          MOV      r0,r0                 ;756
001364  e5d60003          LDRB     r0,[r6,#3]            ;758
001368  e58d0000          STR      r0,[sp,#0]            ;758
00136c  e1a00000          MOV      r0,r0                 ;760
001370  e3a03001          MOV      r3,#1                 ;760
001374  e1a0200d          MOV      r2,sp                 ;760
001378  e1a01004          MOV      r1,r4                 ;760
00137c  e1a00008          MOV      r0,r8                 ;760
001380  ebfffffe          BL       tud_control_xfer
001384  e3500000          CMP      r0,#0                 ;760
001388  1a000001          BNE      |L1.5012|
00138c  e3a000ff          MOV      r0,#0xff              ;760
001390  eaffffe5          B        |L1.4908|
                  |L1.5012|
001394  e1a00000          MOV      r0,r0                 ;760
001398  e1a00000          MOV      r0,r0                 ;761
                  |L1.5020|
00139c  e3a00000          MOV      r0,#0                 ;762
0013a0  eaffffe1          B        |L1.4908|
                  |L1.5028|
0013a4  e1a00000          MOV      r0,r0                 ;764
0013a8  e3570001          CMP      r7,#1                 ;765
0013ac  1a000026          BNE      |L1.5196|
0013b0  e1a00000          MOV      r0,r0                 ;767
0013b4  e5d40007          LDRB     r0,[r4,#7]            ;767
0013b8  e5d41006          LDRB     r1,[r4,#6]            ;767
0013bc  e1810400          ORR      r0,r1,r0,LSL #8       ;767
0013c0  e3500000          CMP      r0,#0                 ;767
0013c4  0a000001          BEQ      |L1.5072|
0013c8  e3a000ff          MOV      r0,#0xff              ;767
0013cc  eaffffd6          B        |L1.4908|
                  |L1.5072|
0013d0  e1a00000          MOV      r0,r0                 ;767
0013d4  e1a00000          MOV      r0,r0                 ;768
0013d8  e0850085          ADD      r0,r5,r5,LSL #1       ;768
0013dc  e0800185          ADD      r0,r0,r5,LSL #3       ;768
0013e0  e51f2cb4          LDR      r2,|L1.1844|
0013e4  e0801002          ADD      r1,r0,r2              ;768
0013e8  e1a00008          MOV      r0,r8                 ;768
0013ec  ebfffffe          BL       _close_vc_itf
0013f0  e3500000          CMP      r0,#0                 ;768
0013f4  1a000001          BNE      |L1.5120|
0013f8  e3a000ff          MOV      r0,#0xff              ;768
0013fc  eaffffca          B        |L1.4908|
                  |L1.5120|
001400  e1a00000          MOV      r0,r0                 ;768
001404  e1a00000          MOV      r0,r0                 ;769
001408  e5d40003          LDRB     r0,[r4,#3]            ;769
00140c  e5d43002          LDRB     r3,[r4,#2]            ;769
001410  e1832400          ORR      r2,r3,r0,LSL #8       ;769
001414  e0850085          ADD      r0,r5,r5,LSL #1       ;769
001418  e0800185          ADD      r0,r0,r5,LSL #3       ;769
00141c  e51f3cf0          LDR      r3,|L1.1844|
001420  e0801003          ADD      r1,r0,r3              ;769
001424  e1a00008          MOV      r0,r8                 ;769
001428  ebfffffe          BL       _open_vc_itf
00142c  e3500000          CMP      r0,#0                 ;769
001430  1a000001          BNE      |L1.5180|
001434  e3a000ff          MOV      r0,#0xff              ;769
001438  eaffffbb          B        |L1.4908|
                  |L1.5180|
00143c  e1a00000          MOV      r0,r0                 ;769
001440  e1a01004          MOV      r1,r4                 ;770
001444  e1a00008          MOV      r0,r8                 ;770
001448  ebfffffe          BL       tud_control_status
                  |L1.5196|
00144c  e3a00000          MOV      r0,#0                 ;772
001450  eaffffb5          B        |L1.4908|
                  |L1.5204|
001454  e1a00000          MOV      r0,r0                 ;774
001458  e1a00000          MOV      r0,r0                 ;775
00145c  e1a00000          MOV      r0,r0                 ;775
001460  e3a00007          MOV      r0,#7                 ;776
001464  eaffffb0          B        |L1.4908|
;;;779    
                          ENDP

                  handle_video_ctl_cs_req PROC
;;;780    static int handle_video_ctl_cs_req(uint8_t rhport, uint8_t stage,
001468  e92d41f0          PUSH     {r4-r8,lr}
;;;781                                       tusb_control_request_t const *request,
;;;782                                       uint_fast8_t ctl_idx)
;;;783    {
00146c  e1a08000          MOV      r8,r0
001470  e1a05001          MOV      r5,r1
001474  e1a04002          MOV      r4,r2
001478  e1a07003          MOV      r7,r3
;;;784      videod_interface_t *self = &_videod_itf[ctl_idx];
00147c  e0870087          ADD      r0,r7,r7,LSL #1
001480  e0800187          ADD      r0,r0,r7,LSL #3
001484  e51f1d58          LDR      r1,|L1.1844|
001488  e0806001          ADD      r6,r0,r1
;;;785    	  printf("\n\r======handle_video_ctl_cs_req========\n\r");
00148c  e28f0f56          ADR      r0,|L1.5612|
001490  ebfffffe          BL       __2printf
;;;786    
;;;787      /* 4.2.1 Interface Control Request */
;;;788      switch (TU_U16_HIGH(request->wValue)) {
001494  e5d40003          LDRB     r0,[r4,#3]
001498  e5d41002          LDRB     r1,[r4,#2]
00149c  e1810400          ORR      r0,r1,r0,LSL #8
0014a0  e1a00440          ASR      r0,r0,#8
0014a4  e3500001          CMP      r0,#1
0014a8  0a000002          BEQ      |L1.5304|
0014ac  e3500002          CMP      r0,#2
0014b0  1a0000af          BNE      |L1.6004|
0014b4  ea000083          B        |L1.5832|
                  |L1.5304|
;;;789        case VIDEO_VC_CTL_VIDEO_POWER_MODE:
0014b8  e1a00000          MOV      r0,r0
;;;790          switch (request->bRequest) {
0014bc  e5d40001          LDRB     r0,[r4,#1]
0014c0  e3500001          CMP      r0,#1
0014c4  0a000004          BEQ      |L1.5340|
0014c8  e3500081          CMP      r0,#0x81
0014cc  0a000024          BEQ      |L1.5476|
0014d0  e3500086          CMP      r0,#0x86
0014d4  1a000077          BNE      |L1.5816|
0014d8  ea00005d          B        |L1.5716|
                  |L1.5340|
;;;791            case VIDEO_REQUEST_SET_CUR:
0014dc  e1a00000          MOV      r0,r0
;;;792              if (stage == CONTROL_STAGE_SETUP) {
0014e0  e3550001          CMP      r5,#1
0014e4  1a000013          BNE      |L1.5432|
;;;793                TU_VERIFY(1 == request->wLength, VIDEO_ERROR_UNKNOWN);
0014e8  e1a00000          MOV      r0,r0
0014ec  e5d40007          LDRB     r0,[r4,#7]
0014f0  e5d41006          LDRB     r1,[r4,#6]
0014f4  e1810400          ORR      r0,r1,r0,LSL #8
0014f8  e3500001          CMP      r0,#1
0014fc  0a000001          BEQ      |L1.5384|
001500  e3a000ff          MOV      r0,#0xff
                  |L1.5380|
;;;794                TU_VERIFY(tud_control_xfer(rhport, request, &self->power_mode, sizeof(self->power_mode)), VIDEO_ERROR_UNKNOWN);
;;;795              } else if (stage == CONTROL_STAGE_DATA) {
;;;796                if (tud_video_power_mode_cb) return tud_video_power_mode_cb(ctl_idx, self->power_mode);
;;;797              }
;;;798              return VIDEO_ERROR_NONE;
;;;799    
;;;800            case VIDEO_REQUEST_GET_CUR:
;;;801              if (stage == CONTROL_STAGE_SETUP)
;;;802              {
;;;803                TU_VERIFY(1 == request->wLength, VIDEO_ERROR_UNKNOWN);
;;;804                TU_VERIFY(tud_control_xfer(rhport, request, &self->power_mode, sizeof(self->power_mode)), VIDEO_ERROR_UNKNOWN);
;;;805              }
;;;806              return VIDEO_ERROR_NONE;
;;;807    
;;;808            case VIDEO_REQUEST_GET_INFO:
;;;809              if (stage == CONTROL_STAGE_SETUP)
;;;810              {
;;;811                TU_VERIFY(1 == request->wLength, VIDEO_ERROR_UNKNOWN);
;;;812                TU_VERIFY(tud_control_xfer(rhport, request, (uint8_t*)(uintptr_t) &_cap_get_set, sizeof(_cap_get_set)), VIDEO_ERROR_UNKNOWN);
;;;813              }
;;;814              return VIDEO_ERROR_NONE;
;;;815    
;;;816            default: break;
;;;817          }
;;;818          break;
;;;819    
;;;820        case VIDEO_VC_CTL_REQUEST_ERROR_CODE:
;;;821          switch (request->bRequest) {
;;;822            case VIDEO_REQUEST_GET_CUR:
;;;823              if (stage == CONTROL_STAGE_SETUP)
;;;824              {
;;;825                TU_VERIFY(tud_control_xfer(rhport, request, &self->error_code, sizeof(uint8_t)), VIDEO_ERROR_UNKNOWN);
;;;826              }
;;;827              return VIDEO_ERROR_NONE;
;;;828    
;;;829            case VIDEO_REQUEST_GET_INFO:
;;;830              if (stage == CONTROL_STAGE_SETUP)
;;;831              {
;;;832                TU_VERIFY(tud_control_xfer(rhport, request, (uint8_t*)(uintptr_t) &_cap_get, sizeof(_cap_get)), VIDEO_ERROR_UNKNOWN);
;;;833              }
;;;834              return VIDEO_ERROR_NONE;
;;;835    
;;;836            default: break;
;;;837          }
;;;838          break;
;;;839    
;;;840        default: break;
;;;841      }
;;;842    
;;;843      /* Unknown/Unsupported request */
;;;844      TU_BREAKPOINT();
;;;845      return VIDEO_ERROR_INVALID_REQUEST;
;;;846    }
001504  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5384|
001508  e1a00000          MOV      r0,r0                 ;793
00150c  e1a00000          MOV      r0,r0                 ;794
001510  e3a03001          MOV      r3,#1                 ;794
001514  e286200a          ADD      r2,r6,#0xa            ;794
001518  e1a01004          MOV      r1,r4                 ;794
00151c  e1a00008          MOV      r0,r8                 ;794
001520  ebfffffe          BL       tud_control_xfer
001524  e3500000          CMP      r0,#0                 ;794
001528  1a000001          BNE      |L1.5428|
00152c  e3a000ff          MOV      r0,#0xff              ;794
001530  eafffff3          B        |L1.5380|
                  |L1.5428|
001534  ea000008          B        |L1.5468|
                  |L1.5432|
001538  e3550002          CMP      r5,#2                 ;795
00153c  1a000006          BNE      |L1.5468|
001540  e59f00d0          LDR      r0,|L1.5656|
001544  e3500000          CMP      r0,#0                 ;796
001548  0a000003          BEQ      |L1.5468|
00154c  e5d6100a          LDRB     r1,[r6,#0xa]          ;796
001550  e1a00007          MOV      r0,r7                 ;796
001554  ebfffffe          BL       tud_video_power_mode_cb
001558  eaffffe9          B        |L1.5380|
                  |L1.5468|
00155c  e3a00000          MOV      r0,#0                 ;798
001560  eaffffe7          B        |L1.5380|
                  |L1.5476|
001564  e1a00000          MOV      r0,r0                 ;800
001568  e3550001          CMP      r5,#1                 ;801
00156c  1a000036          BNE      |L1.5708|
001570  e1a00000          MOV      r0,r0                 ;803
001574  e5d40007          LDRB     r0,[r4,#7]            ;803
001578  e5d41006          LDRB     r1,[r4,#6]            ;803
00157c  e1810400          ORR      r0,r1,r0,LSL #8       ;803
001580  e3500001          CMP      r0,#1                 ;803
001584  0a000024          BEQ      |L1.5660|
001588  e3a000ff          MOV      r0,#0xff              ;803
00158c  eaffffdc          B        |L1.5380|
                  |L1.5520|
                          DCD      0x00002710
                  |L1.5524|
                          DCD      0x000001df
                  |L1.5528|
                          DCD      |symbol_number.19|
                  |L1.5532|
                          DCD      0x00000209
                  |L1.5536|
                          DCD      0x00000259
                  |L1.5540|
                          DCD      |symbol_number.20|
                  |L1.5544|
                          DCD      ||.text||+0x744
                  |L1.5548|
                          DCD      0x00000273
                  |L1.5552|
                          DCD      |symbol_number.21|
                  |L1.5556|
                          DCD      0x000002aa
                  |L1.5560|
                          DCD      |symbol_number.22|
                  |L1.5564|
                          DCD      0x000002c6
                  |L1.5568|
0015c0  0a0d3d3d          DCB      "\n\r======handle_video_ctl_std_req========\n\r",0
0015c4  3d3d3d3d
0015c8  68616e64
0015cc  6c655f76
0015d0  6964656f
0015d4  5f63746c
0015d8  5f737464
0015dc  5f726571
0015e0  3d3d3d3d
0015e4  3d3d3d3d
0015e8  0a0d00  
0015eb  00                DCB      0
                  |L1.5612|
0015ec  0a0d3d3d          DCB      "\n\r======handle_video_ctl_cs_req========\n\r",0
0015f0  3d3d3d3d
0015f4  68616e64
0015f8  6c655f76
0015fc  6964656f
001600  5f63746c
001604  5f63735f
001608  7265713d
00160c  3d3d3d3d
001610  3d3d3d0a
001614  0d00    
001616  00                DCB      0
001617  00                DCB      0
                  |L1.5656|
                          DCD      tud_video_power_mode_cb
                  |L1.5660|
00161c  e1a00000          MOV      r0,r0                 ;803
001620  e1a00000          MOV      r0,r0                 ;804
001624  e3a03001          MOV      r3,#1                 ;804
001628  e286200a          ADD      r2,r6,#0xa            ;804
00162c  e1a01004          MOV      r1,r4                 ;804
001630  e1a00008          MOV      r0,r8                 ;804
001634  ebfffffe          BL       tud_control_xfer
001638  e3500000          CMP      r0,#0                 ;804
00163c  1a000001          BNE      |L1.5704|
001640  e3a000ff          MOV      r0,#0xff              ;804
001644  eaffffae          B        |L1.5380|
                  |L1.5704|
001648  e1a00000          MOV      r0,r0                 ;804
                  |L1.5708|
00164c  e3a00000          MOV      r0,#0                 ;806
001650  eaffffab          B        |L1.5380|
                  |L1.5716|
001654  e1a00000          MOV      r0,r0                 ;808
001658  e3550001          CMP      r5,#1                 ;809
00165c  1a000013          BNE      |L1.5808|
001660  e1a00000          MOV      r0,r0                 ;811
001664  e5d40007          LDRB     r0,[r4,#7]            ;811
001668  e5d41006          LDRB     r1,[r4,#6]            ;811
00166c  e1810400          ORR      r0,r1,r0,LSL #8       ;811
001670  e3500001          CMP      r0,#1                 ;811
001674  0a000001          BEQ      |L1.5760|
001678  e3a000ff          MOV      r0,#0xff              ;811
00167c  eaffffa0          B        |L1.5380|
                  |L1.5760|
001680  e1a00000          MOV      r0,r0                 ;811
001684  e1a00000          MOV      r0,r0                 ;812
001688  e3a03001          MOV      r3,#1                 ;812
00168c  e59f2304          LDR      r2,|L1.6552|
001690  e1a01004          MOV      r1,r4                 ;812
001694  e1a00008          MOV      r0,r8                 ;812
001698  ebfffffe          BL       tud_control_xfer
00169c  e3500000          CMP      r0,#0                 ;812
0016a0  1a000001          BNE      |L1.5804|
0016a4  e3a000ff          MOV      r0,#0xff              ;812
0016a8  eaffff95          B        |L1.5380|
                  |L1.5804|
0016ac  e1a00000          MOV      r0,r0                 ;812
                  |L1.5808|
0016b0  e3a00000          MOV      r0,#0                 ;814
0016b4  eaffff92          B        |L1.5380|
                  |L1.5816|
0016b8  e1a00000          MOV      r0,r0                 ;816
0016bc  e1a00000          MOV      r0,r0                 ;816
0016c0  e1a00000          MOV      r0,r0                 ;816
0016c4  ea00002c          B        |L1.6012|
                  |L1.5832|
0016c8  e1a00000          MOV      r0,r0                 ;820
0016cc  e5d40001          LDRB     r0,[r4,#1]            ;821
0016d0  e3500081          CMP      r0,#0x81              ;821
0016d4  0a000002          BEQ      |L1.5860|
0016d8  e3500086          CMP      r0,#0x86              ;821
0016dc  1a000020          BNE      |L1.5988|
0016e0  ea00000f          B        |L1.5924|
                  |L1.5860|
0016e4  e1a00000          MOV      r0,r0                 ;822
0016e8  e3550001          CMP      r5,#1                 ;823
0016ec  1a00000a          BNE      |L1.5916|
0016f0  e1a00000          MOV      r0,r0                 ;825
0016f4  e3a03001          MOV      r3,#1                 ;825
0016f8  e2862009          ADD      r2,r6,#9              ;825
0016fc  e1a01004          MOV      r1,r4                 ;825
001700  e1a00008          MOV      r0,r8                 ;825
001704  ebfffffe          BL       tud_control_xfer
001708  e3500000          CMP      r0,#0                 ;825
00170c  1a000001          BNE      |L1.5912|
001710  e3a000ff          MOV      r0,#0xff              ;825
001714  eaffff7a          B        |L1.5380|
                  |L1.5912|
001718  e1a00000          MOV      r0,r0                 ;825
                  |L1.5916|
00171c  e3a00000          MOV      r0,#0                 ;827
001720  eaffff77          B        |L1.5380|
                  |L1.5924|
001724  e1a00000          MOV      r0,r0                 ;829
001728  e3550001          CMP      r5,#1                 ;830
00172c  1a00000a          BNE      |L1.5980|
001730  e1a00000          MOV      r0,r0                 ;832
001734  e3a03001          MOV      r3,#1                 ;832
001738  e59f225c          LDR      r2,|L1.6556|
00173c  e1a01004          MOV      r1,r4                 ;832
001740  e1a00008          MOV      r0,r8                 ;832
001744  ebfffffe          BL       tud_control_xfer
001748  e3500000          CMP      r0,#0                 ;832
00174c  1a000001          BNE      |L1.5976|
001750  e3a000ff          MOV      r0,#0xff              ;832
001754  eaffff6a          B        |L1.5380|
                  |L1.5976|
001758  e1a00000          MOV      r0,r0                 ;832
                  |L1.5980|
00175c  e3a00000          MOV      r0,#0                 ;834
001760  eaffff67          B        |L1.5380|
                  |L1.5988|
001764  e1a00000          MOV      r0,r0                 ;836
001768  e1a00000          MOV      r0,r0                 ;836
00176c  e1a00000          MOV      r0,r0                 ;836
001770  ea000001          B        |L1.6012|
                  |L1.6004|
001774  e1a00000          MOV      r0,r0                 ;840
001778  e1a00000          MOV      r0,r0                 ;840
                  |L1.6012|
00177c  e1a00000          MOV      r0,r0                 ;818
001780  e1a00000          MOV      r0,r0                 ;844
001784  e1a00000          MOV      r0,r0                 ;844
001788  e3a00007          MOV      r0,#7                 ;845
00178c  eaffff5c          B        |L1.5380|
;;;847    
                          ENDP

                  handle_video_ctl_req PROC
;;;848    static int handle_video_ctl_req(uint8_t rhport, uint8_t stage,
001790  e92d47f0          PUSH     {r4-r10,lr}
;;;849                                    tusb_control_request_t const *request,
;;;850                                    uint_fast8_t ctl_idx)
;;;851    {
001794  e1a07000          MOV      r7,r0
001798  e1a08001          MOV      r8,r1
00179c  e1a05002          MOV      r5,r2
0017a0  e1a06003          MOV      r6,r3
;;;852      uint_fast8_t entity_id;
;;;853    	  printf("\n\r======handle_video_ctl_req========\n\r");
0017a4  e28f0f7d          ADR      r0,|L1.6560|
0017a8  ebfffffe          BL       __2printf
;;;854      switch (request->bmRequestType_bit.type) {
0017ac  e5d50000          LDRB     r0,[r5,#0]
0017b0  e1a00c80          LSL      r0,r0,#25
0017b4  e1a00f20          LSR      r0,r0,#30
0017b8  e3500000          CMP      r0,#0
0017bc  0a000002          BEQ      |L1.6092|
0017c0  e3500001          CMP      r0,#1
0017c4  1a000024          BNE      |L1.6236|
0017c8  ea000006          B        |L1.6120|
                  |L1.6092|
;;;855        case TUSB_REQ_TYPE_STANDARD:
0017cc  e1a00000          MOV      r0,r0
;;;856          return handle_video_ctl_std_req(rhport, stage, request, ctl_idx);
0017d0  e1a03006          MOV      r3,r6
0017d4  e1a02005          MOV      r2,r5
0017d8  e1a01008          MOV      r1,r8
0017dc  e1a00007          MOV      r0,r7
0017e0  ebfffffe          BL       handle_video_ctl_std_req
                  |L1.6116|
;;;857    
;;;858        case TUSB_REQ_TYPE_CLASS:
;;;859          entity_id = TU_U16_HIGH(request->wIndex);
;;;860          if (!entity_id) {
;;;861            return handle_video_ctl_cs_req(rhport, stage, request, ctl_idx);
;;;862          } else {
;;;863            TU_VERIFY(_find_desc_entity(_get_desc_vc(&_videod_itf[ctl_idx]), entity_id), VIDEO_ERROR_INVALID_REQUEST);
;;;864            return VIDEO_ERROR_NONE;
;;;865          }
;;;866    
;;;867        default:
;;;868          return VIDEO_ERROR_INVALID_REQUEST;
;;;869      }
;;;870    }
0017e4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.6120|
0017e8  e1a00000          MOV      r0,r0                 ;858
0017ec  e5d50005          LDRB     r0,[r5,#5]            ;859
0017f0  e5d51004          LDRB     r1,[r5,#4]            ;859
0017f4  e1810400          ORR      r0,r1,r0,LSL #8       ;859
0017f8  e1a04440          ASR      r4,r0,#8              ;859
0017fc  e3540000          CMP      r4,#0                 ;860
001800  1a000005          BNE      |L1.6172|
001804  e1a03006          MOV      r3,r6                 ;861
001808  e1a02005          MOV      r2,r5                 ;861
00180c  e1a01008          MOV      r1,r8                 ;861
001810  e1a00007          MOV      r0,r7                 ;861
001814  ebfffffe          BL       handle_video_ctl_cs_req
001818  eafffff1          B        |L1.6116|
                  |L1.6172|
00181c  e1a00000          MOV      r0,r0                 ;863
001820  e0861086          ADD      r1,r6,r6,LSL #1       ;863
001824  e0811186          ADD      r1,r1,r6,LSL #3       ;863
001828  e59f2198          LDR      r2,|L1.6600|
00182c  e0810002          ADD      r0,r1,r2              ;863
001830  ebfffffe          BL       _get_desc_vc
001834  e1a09000          MOV      r9,r0                 ;863
001838  e1a01004          MOV      r1,r4                 ;863
00183c  ebfffffe          BL       _find_desc_entity
001840  e3500000          CMP      r0,#0                 ;863
001844  1a000001          BNE      |L1.6224|
001848  e3a00007          MOV      r0,#7                 ;863
00184c  eaffffe4          B        |L1.6116|
                  |L1.6224|
001850  e1a00000          MOV      r0,r0                 ;863
001854  e3a00000          MOV      r0,#0                 ;864
001858  eaffffe1          B        |L1.6116|
                  |L1.6236|
00185c  e1a00000          MOV      r0,r0                 ;867
001860  e3a00007          MOV      r0,#7                 ;868
001864  eaffffde          B        |L1.6116|
;;;871    
                          ENDP

                  handle_video_stm_std_req PROC
;;;872    static int handle_video_stm_std_req(uint8_t rhport, uint8_t stage,
001868  e92d43f8          PUSH     {r3-r9,lr}
;;;873                                        tusb_control_request_t const *request,
;;;874                                        uint_fast8_t stm_idx)
;;;875    {
00186c  e1a09000          MOV      r9,r0
001870  e1a06001          MOV      r6,r1
001874  e1a04002          MOV      r4,r2
001878  e1a07003          MOV      r7,r3
;;;876    /////	  printf("\n\r======handle_video_stm_std_req========\n\r");
;;;877      videod_streaming_interface_t *self = &_videod_streaming_itf[stm_idx];
00187c  e0870187          ADD      r0,r7,r7,LSL #3
001880  e59f1144          LDR      r1,|L1.6604|
001884  e0818280          ADD      r8,r1,r0,LSL #5
;;;878      switch (request->bRequest) {
001888  e5d40001          LDRB     r0,[r4,#1]
00188c  e350000a          CMP      r0,#0xa
001890  0a000002          BEQ      |L1.6304|
001894  e350000b          CMP      r0,#0xb
001898  1a000039          BNE      |L1.6532|
00189c  ea000024          B        |L1.6452|
                  |L1.6304|
;;;879        case TUSB_REQ_GET_INTERFACE:
0018a0  e1a00000          MOV      r0,r0
;;;880          if (stage == CONTROL_STAGE_SETUP)
0018a4  e3560001          CMP      r6,#1
0018a8  1a00001f          BNE      |L1.6444|
;;;881          {
;;;882            TU_VERIFY(1 == request->wLength, VIDEO_ERROR_UNKNOWN);
0018ac  e1a00000          MOV      r0,r0
0018b0  e5d40007          LDRB     r0,[r4,#7]
0018b4  e5d41006          LDRB     r1,[r4,#6]
0018b8  e1810400          ORR      r0,r1,r0,LSL #8
0018bc  e3500001          CMP      r0,#1
0018c0  0a000001          BEQ      |L1.6348|
0018c4  e3a000ff          MOV      r0,#0xff
                  |L1.6344|
;;;883            tusb_desc_vs_itf_t const *vs = _get_desc_vs(self);
;;;884            TU_VERIFY(vs, VIDEO_ERROR_UNKNOWN);
;;;885            uint8_t alt_num = vs->std.bAlternateSetting;
;;;886    
;;;887            TU_VERIFY(tud_control_xfer(rhport, request, &alt_num, sizeof(alt_num)), VIDEO_ERROR_UNKNOWN);
;;;888          }
;;;889          return VIDEO_ERROR_NONE;
;;;890    
;;;891        case TUSB_REQ_SET_INTERFACE:
;;;892          if (stage == CONTROL_STAGE_SETUP)
;;;893          {
;;;894            TU_VERIFY(_open_vs_itf(rhport, self, request->wValue), VIDEO_ERROR_UNKNOWN);
;;;895            tud_control_status(rhport, request);
;;;896          }
;;;897          return VIDEO_ERROR_NONE;
;;;898    
;;;899        default: /* Unknown/Unsupported request */
;;;900          TU_BREAKPOINT();
;;;901          return VIDEO_ERROR_INVALID_REQUEST;
;;;902      }
;;;903    }
0018c8  e8bd83f8          POP      {r3-r9,pc}
                  |L1.6348|
0018cc  e1a00000          MOV      r0,r0                 ;882
0018d0  e1a00008          MOV      r0,r8                 ;883
0018d4  ebfffffe          BL       _get_desc_vs
0018d8  e1a05000          MOV      r5,r0                 ;883
0018dc  e1a00000          MOV      r0,r0                 ;884
0018e0  e3550000          CMP      r5,#0                 ;884
0018e4  1a000001          BNE      |L1.6384|
0018e8  e3a000ff          MOV      r0,#0xff              ;884
0018ec  eafffff5          B        |L1.6344|
                  |L1.6384|
0018f0  e1a00000          MOV      r0,r0                 ;884
0018f4  e5d50003          LDRB     r0,[r5,#3]            ;885
0018f8  e58d0000          STR      r0,[sp,#0]            ;885
0018fc  e1a00000          MOV      r0,r0                 ;887
001900  e3a03001          MOV      r3,#1                 ;887
001904  e1a0200d          MOV      r2,sp                 ;887
001908  e1a01004          MOV      r1,r4                 ;887
00190c  e1a00009          MOV      r0,r9                 ;887
001910  ebfffffe          BL       tud_control_xfer
001914  e3500000          CMP      r0,#0                 ;887
001918  1a000001          BNE      |L1.6436|
00191c  e3a000ff          MOV      r0,#0xff              ;887
001920  eaffffe8          B        |L1.6344|
                  |L1.6436|
001924  e1a00000          MOV      r0,r0                 ;887
001928  e1a00000          MOV      r0,r0                 ;888
                  |L1.6444|
00192c  e3a00000          MOV      r0,#0                 ;889
001930  eaffffe4          B        |L1.6344|
                  |L1.6452|
001934  e1a00000          MOV      r0,r0                 ;891
001938  e3560001          CMP      r6,#1                 ;892
00193c  1a00000e          BNE      |L1.6524|
001940  e1a00000          MOV      r0,r0                 ;894
001944  e5d40003          LDRB     r0,[r4,#3]            ;894
001948  e5d41002          LDRB     r1,[r4,#2]            ;894
00194c  e1812400          ORR      r2,r1,r0,LSL #8       ;894
001950  e1a01008          MOV      r1,r8                 ;894
001954  e1a00009          MOV      r0,r9                 ;894
001958  ebfffffe          BL       _open_vs_itf
00195c  e3500000          CMP      r0,#0                 ;894
001960  1a000001          BNE      |L1.6508|
001964  e3a000ff          MOV      r0,#0xff              ;894
001968  eaffffd6          B        |L1.6344|
                  |L1.6508|
00196c  e1a00000          MOV      r0,r0                 ;894
001970  e1a01004          MOV      r1,r4                 ;895
001974  e1a00009          MOV      r0,r9                 ;895
001978  ebfffffe          BL       tud_control_status
                  |L1.6524|
00197c  e3a00000          MOV      r0,#0                 ;897
001980  eaffffd0          B        |L1.6344|
                  |L1.6532|
001984  e1a00000          MOV      r0,r0                 ;899
001988  e1a00000          MOV      r0,r0                 ;900
00198c  e1a00000          MOV      r0,r0                 ;900
001990  e3a00007          MOV      r0,#7                 ;901
001994  eaffffcb          B        |L1.6344|
                  |L1.6552|
                          DCD      _cap_get_set
                  |L1.6556|
                          DCD      _cap_get
                  |L1.6560|
0019a0  0a0d3d3d          DCB      "\n\r======handle_video_ctl_req========\n\r",0
0019a4  3d3d3d3d
0019a8  68616e64
0019ac  6c655f76
0019b0  6964656f
0019b4  5f63746c
0019b8  5f726571
0019bc  3d3d3d3d
0019c0  3d3d3d3d
0019c4  0a0d00  
0019c7  00                DCB      0
                  |L1.6600|
                          DCD      _videod_itf
                  |L1.6604|
                          DCD      _videod_streaming_itf
                          ENDP

                  handle_video_stm_cs_req PROC
;;;904    
;;;905    static int handle_video_stm_cs_req(uint8_t rhport, uint8_t stage,
0019d0  e92d41f0          PUSH     {r4-r8,lr}
;;;906                                       tusb_control_request_t const *request,
;;;907                                       uint_fast8_t stm_idx)
;;;908    {
0019d4  e24dd030          SUB      sp,sp,#0x30
0019d8  e1a08000          MOV      r8,r0
0019dc  e1a05001          MOV      r5,r1
0019e0  e1a04002          MOV      r4,r2
0019e4  e1a07003          MOV      r7,r3
;;;909      (void)rhport;
;;;910    ///	  printf("\n\r======handle_video_stm_cs_req========\n\r");
;;;911    
;;;912      videod_streaming_interface_t *self = &_videod_streaming_itf[stm_idx];
0019e8  e0870187          ADD      r0,r7,r7,LSL #3
0019ec  e51f1028          LDR      r1,|L1.6604|
0019f0  e0816280          ADD      r6,r1,r0,LSL #5
;;;913    
;;;914      /* 4.2.1 Interface Control Request */
;;;915      switch (TU_U16_HIGH(request->wValue)) {
0019f4  e5d40003          LDRB     r0,[r4,#3]
0019f8  e5d41002          LDRB     r1,[r4,#2]
0019fc  e1810400          ORR      r0,r1,r0,LSL #8
001a00  e1a00440          ASR      r0,r0,#8
001a04  e350000a          CMP      r0,#0xa
001a08  308ff100          ADDCC    pc,pc,r0,LSL #2
001a0c  ea00017b          B        |L1.8192|
001a10  ea00017a          B        |L1.8192|
001a14  ea000033          B        |L1.6888|
001a18  ea0000e8          B        |L1.7616|
001a1c  ea000170          B        |L1.8164|
001a20  ea000171          B        |L1.8172|
001a24  ea000171          B        |L1.8176|
001a28  ea000002          B        |L1.6712|
001a2c  ea000170          B        |L1.8180|
001a30  ea000170          B        |L1.8184|
001a34  ea000170          B        |L1.8188|
                  |L1.6712|
;;;916        case VIDEO_VS_CTL_STREAM_ERROR_CODE:
001a38  e1a00000          MOV      r0,r0
;;;917          switch (request->bRequest) {
001a3c  e5d40001          LDRB     r0,[r4,#1]
001a40  e3500081          CMP      r0,#0x81
001a44  0a000002          BEQ      |L1.6740|
001a48  e3500086          CMP      r0,#0x86
001a4c  1a000021          BNE      |L1.6872|
001a50  ea000010          B        |L1.6808|
                  |L1.6740|
;;;918            case VIDEO_REQUEST_GET_CUR:
001a54  e1a00000          MOV      r0,r0
;;;919              if (stage == CONTROL_STAGE_SETUP)
001a58  e3550001          CMP      r5,#1
001a5c  1a00000b          BNE      |L1.6800|
;;;920              {
;;;921                /* TODO */
;;;922                TU_VERIFY(tud_control_xfer(rhport, request, &self->error_code, sizeof(uint8_t)), VIDEO_ERROR_UNKNOWN);
001a60  e1a00000          MOV      r0,r0
001a64  e3a03001          MOV      r3,#1
001a68  e286201c          ADD      r2,r6,#0x1c
001a6c  e1a01004          MOV      r1,r4
001a70  e1a00008          MOV      r0,r8
001a74  ebfffffe          BL       tud_control_xfer
001a78  e3500000          CMP      r0,#0
001a7c  1a000002          BNE      |L1.6796|
001a80  e3a000ff          MOV      r0,#0xff
                  |L1.6788|
001a84  e28dd030          ADD      sp,sp,#0x30
;;;923              }
;;;924              return VIDEO_ERROR_NONE;
;;;925    
;;;926            case VIDEO_REQUEST_GET_INFO:
;;;927              if (stage == CONTROL_STAGE_SETUP)
;;;928              {
;;;929                TU_VERIFY(tud_control_xfer(rhport, request, (uint8_t*)(uintptr_t) &_cap_get, sizeof(_cap_get)), VIDEO_ERROR_UNKNOWN);
;;;930              }
;;;931              return VIDEO_ERROR_NONE;
;;;932    
;;;933            default: break;
;;;934          }
;;;935          break;
;;;936    
;;;937        case VIDEO_VS_CTL_PROBE:
;;;938          switch (request->bRequest) {
;;;939            case VIDEO_REQUEST_SET_CUR:
;;;940              if (stage == CONTROL_STAGE_SETUP) {
;;;941                TU_VERIFY(sizeof(video_probe_and_commit_control_t) >= request->wLength, VIDEO_ERROR_UNKNOWN);
;;;942                TU_VERIFY(tud_control_xfer(rhport, request, self->ep_buf, sizeof(video_probe_and_commit_control_t)),
;;;943                          VIDEO_ERROR_UNKNOWN);
;;;944              } else if (stage == CONTROL_STAGE_DATA) {
;;;945                TU_VERIFY(_update_streaming_parameters(self, (video_probe_and_commit_control_t*)self->ep_buf),
;;;946                          VIDEO_ERROR_INVALID_VALUE_WITHIN_RANGE);
;;;947              }
;;;948              return VIDEO_ERROR_NONE;
;;;949    
;;;950            case VIDEO_REQUEST_GET_CUR:
;;;951              if (stage == CONTROL_STAGE_SETUP)
;;;952              {
;;;953                TU_VERIFY(request->wLength, VIDEO_ERROR_UNKNOWN);
;;;954                TU_VERIFY(tud_control_xfer(rhport, request, self->ep_buf, sizeof(video_probe_and_commit_control_t)), VIDEO_ERROR_UNKNOWN);
;;;955              }
;;;956              return VIDEO_ERROR_NONE;
;;;957    
;;;958            case VIDEO_REQUEST_GET_MIN:
;;;959            case VIDEO_REQUEST_GET_MAX:
;;;960            case VIDEO_REQUEST_GET_RES:
;;;961            case VIDEO_REQUEST_GET_DEF:
;;;962              if (stage == CONTROL_STAGE_SETUP)
;;;963              {
;;;964                TU_VERIFY(request->wLength, VIDEO_ERROR_UNKNOWN);
;;;965                video_probe_and_commit_control_t tmp;
;;;966                tmp = *(video_probe_and_commit_control_t*)&self->ep_buf;
;;;967                TU_VERIFY(_negotiate_streaming_parameters(self, request->bRequest, &tmp), VIDEO_ERROR_INVALID_VALUE_WITHIN_RANGE);
;;;968                TU_VERIFY(tud_control_xfer(rhport, request, &tmp, sizeof(tmp)), VIDEO_ERROR_UNKNOWN);
;;;969              }
;;;970              return VIDEO_ERROR_NONE;
;;;971    
;;;972            case VIDEO_REQUEST_GET_LEN:
;;;973              if (stage == CONTROL_STAGE_SETUP)
;;;974              {
;;;975                TU_VERIFY(2 == request->wLength, VIDEO_ERROR_UNKNOWN);
;;;976                uint16_t len = sizeof(video_probe_and_commit_control_t);
;;;977                TU_VERIFY(tud_control_xfer(rhport, request, (uint8_t*)&len, sizeof(len)), VIDEO_ERROR_UNKNOWN);
;;;978              }
;;;979              return VIDEO_ERROR_NONE;
;;;980    
;;;981            case VIDEO_REQUEST_GET_INFO:
;;;982              if (stage == CONTROL_STAGE_SETUP)
;;;983              {
;;;984                TU_VERIFY(1 == request->wLength, VIDEO_ERROR_UNKNOWN);
;;;985                TU_VERIFY(tud_control_xfer(rhport, request, (uint8_t*)(uintptr_t)&_cap_get_set, sizeof(_cap_get_set)), VIDEO_ERROR_UNKNOWN);
;;;986              }
;;;987              return VIDEO_ERROR_NONE;
;;;988    
;;;989            default: break;
;;;990          }
;;;991          break;
;;;992    
;;;993        case VIDEO_VS_CTL_COMMIT:
;;;994          switch (request->bRequest) {
;;;995            case VIDEO_REQUEST_SET_CUR:
;;;996              if (stage == CONTROL_STAGE_SETUP) {
;;;997                TU_VERIFY(sizeof(video_probe_and_commit_control_t) >= request->wLength, VIDEO_ERROR_UNKNOWN);
;;;998                TU_VERIFY(tud_control_xfer(rhport, request, self->ep_buf, sizeof(video_probe_and_commit_control_t)), VIDEO_ERROR_UNKNOWN);
;;;999              } else if (stage == CONTROL_STAGE_DATA) {
;;;1000               TU_VERIFY(_update_streaming_parameters(self, (video_probe_and_commit_control_t*)self->ep_buf), VIDEO_ERROR_INVALID_VALUE_WITHIN_RANGE);
;;;1001               if (tud_video_commit_cb) {
;;;1002                 return tud_video_commit_cb(self->index_vc, self->index_vs, (video_probe_and_commit_control_t*)self->ep_buf);
;;;1003               }
;;;1004             }
;;;1005             return VIDEO_ERROR_NONE;
;;;1006   
;;;1007           case VIDEO_REQUEST_GET_CUR:
;;;1008             if (stage == CONTROL_STAGE_SETUP)
;;;1009             {
;;;1010               TU_VERIFY(request->wLength, VIDEO_ERROR_UNKNOWN);
;;;1011               TU_VERIFY(tud_control_xfer(rhport, request, self->ep_buf, sizeof(video_probe_and_commit_control_t)), VIDEO_ERROR_UNKNOWN);
;;;1012             }
;;;1013             return VIDEO_ERROR_NONE;
;;;1014   
;;;1015           case VIDEO_REQUEST_GET_LEN:
;;;1016             if (stage == CONTROL_STAGE_SETUP)
;;;1017             {
;;;1018               TU_VERIFY(2 == request->wLength, VIDEO_ERROR_UNKNOWN);
;;;1019               uint16_t len = sizeof(video_probe_and_commit_control_t);
;;;1020               TU_VERIFY(tud_control_xfer(rhport, request, (uint8_t*)&len, sizeof(len)), VIDEO_ERROR_UNKNOWN);
;;;1021             }
;;;1022             return VIDEO_ERROR_NONE;
;;;1023   
;;;1024           case VIDEO_REQUEST_GET_INFO:
;;;1025             if (stage == CONTROL_STAGE_SETUP)
;;;1026             {
;;;1027               TU_VERIFY(1 == request->wLength, VIDEO_ERROR_UNKNOWN);
;;;1028               TU_VERIFY(tud_control_xfer(rhport, request, (uint8_t*)(uintptr_t) &_cap_get_set, sizeof(_cap_get_set)), VIDEO_ERROR_UNKNOWN);
;;;1029             }
;;;1030             return VIDEO_ERROR_NONE;
;;;1031   
;;;1032           default: break;
;;;1033         }
;;;1034         break;
;;;1035   
;;;1036       case VIDEO_VS_CTL_STILL_PROBE:
;;;1037       case VIDEO_VS_CTL_STILL_COMMIT:
;;;1038       case VIDEO_VS_CTL_STILL_IMAGE_TRIGGER:
;;;1039       case VIDEO_VS_CTL_GENERATE_KEY_FRAME:
;;;1040       case VIDEO_VS_CTL_UPDATE_FRAME_SEGMENT:
;;;1041       case VIDEO_VS_CTL_SYNCH_DELAY_CONTROL:
;;;1042         /* TODO */
;;;1043         break;
;;;1044   
;;;1045       default: break;
;;;1046     }
;;;1047   
;;;1048     /* Unknown/Unsupported request */
;;;1049     TU_BREAKPOINT();
;;;1050     return VIDEO_ERROR_INVALID_REQUEST;
;;;1051   }
001a88  e8bd81f0          POP      {r4-r8,pc}
                  |L1.6796|
001a8c  e1a00000          MOV      r0,r0                 ;922
                  |L1.6800|
001a90  e3a00000          MOV      r0,#0                 ;924
001a94  eafffffa          B        |L1.6788|
                  |L1.6808|
001a98  e1a00000          MOV      r0,r0                 ;926
001a9c  e3550001          CMP      r5,#1                 ;927
001aa0  1a00000a          BNE      |L1.6864|
001aa4  e1a00000          MOV      r0,r0                 ;929
001aa8  e3a03001          MOV      r3,#1                 ;929
001aac  e51f2118          LDR      r2,|L1.6556|
001ab0  e1a01004          MOV      r1,r4                 ;929
001ab4  e1a00008          MOV      r0,r8                 ;929
001ab8  ebfffffe          BL       tud_control_xfer
001abc  e3500000          CMP      r0,#0                 ;929
001ac0  1a000001          BNE      |L1.6860|
001ac4  e3a000ff          MOV      r0,#0xff              ;929
001ac8  eaffffed          B        |L1.6788|
                  |L1.6860|
001acc  e1a00000          MOV      r0,r0                 ;929
                  |L1.6864|
001ad0  e3a00000          MOV      r0,#0                 ;931
001ad4  eaffffea          B        |L1.6788|
                  |L1.6872|
001ad8  e1a00000          MOV      r0,r0                 ;933
001adc  e1a00000          MOV      r0,r0                 ;933
001ae0  e1a00000          MOV      r0,r0                 ;933
001ae4  ea000147          B        |L1.8200|
                  |L1.6888|
001ae8  e1a00000          MOV      r0,r0                 ;937
001aec  e5d40001          LDRB     r0,[r4,#1]            ;938
001af0  e3500084          CMP      r0,#0x84              ;938
001af4  0a000050          BEQ      |L1.7228|
001af8  ca000008          BGT      |L1.6944|
001afc  e3500001          CMP      r0,#1                 ;938
001b00  0a00000d          BEQ      |L1.6972|
001b04  e3500081          CMP      r0,#0x81              ;938
001b08  0a00002f          BEQ      |L1.7116|
001b0c  e3500082          CMP      r0,#0x82              ;938
001b10  0a000046          BEQ      |L1.7216|
001b14  e3500083          CMP      r0,#0x83              ;938
001b18  1a0000a4          BNE      |L1.7600|
001b1c  ea000045          B        |L1.7224|
                  |L1.6944|
001b20  e3500085          CMP      r0,#0x85              ;938
001b24  0a00006c          BEQ      |L1.7388|
001b28  e3500086          CMP      r0,#0x86              ;938
001b2c  0a000086          BEQ      |L1.7500|
001b30  e3500087          CMP      r0,#0x87              ;938
001b34  1a00009d          BNE      |L1.7600|
001b38  ea000040          B        |L1.7232|
                  |L1.6972|
001b3c  e1a00000          MOV      r0,r0                 ;939
001b40  e3550001          CMP      r5,#1                 ;940
001b44  1a000013          BNE      |L1.7064|
001b48  e1a00000          MOV      r0,r0                 ;941
001b4c  e5d40007          LDRB     r0,[r4,#7]            ;941
001b50  e5d41006          LDRB     r1,[r4,#6]            ;941
001b54  e1810400          ORR      r0,r1,r0,LSL #8       ;941
001b58  e3500030          CMP      r0,#0x30              ;941
001b5c  9a000001          BLS      |L1.7016|
001b60  e3a000ff          MOV      r0,#0xff              ;941
001b64  eaffffc6          B        |L1.6788|
                  |L1.7016|
001b68  e1a00000          MOV      r0,r0                 ;941
001b6c  e1a00000          MOV      r0,r0                 ;942
001b70  e3a03030          MOV      r3,#0x30              ;942
001b74  e2862020          ADD      r2,r6,#0x20           ;942
001b78  e1a01004          MOV      r1,r4                 ;942
001b7c  e1a00008          MOV      r0,r8                 ;942
001b80  ebfffffe          BL       tud_control_xfer
001b84  e3500000          CMP      r0,#0                 ;942
001b88  1a000001          BNE      |L1.7060|
001b8c  e3a000ff          MOV      r0,#0xff              ;942
001b90  eaffffbb          B        |L1.6788|
                  |L1.7060|
001b94  ea00000a          B        |L1.7108|
                  |L1.7064|
001b98  e3550002          CMP      r5,#2                 ;944
001b9c  1a000008          BNE      |L1.7108|
001ba0  e1a00000          MOV      r0,r0                 ;945
001ba4  e2861020          ADD      r1,r6,#0x20           ;945
001ba8  e1a00006          MOV      r0,r6                 ;945
001bac  ebfffffe          BL       _update_streaming_parameters
001bb0  e3500000          CMP      r0,#0                 ;945
001bb4  1a000001          BNE      |L1.7104|
001bb8  e3a00008          MOV      r0,#8                 ;945
001bbc  eaffffb0          B        |L1.6788|
                  |L1.7104|
001bc0  e1a00000          MOV      r0,r0                 ;945
                  |L1.7108|
001bc4  e3a00000          MOV      r0,#0                 ;948
001bc8  eaffffad          B        |L1.6788|
                  |L1.7116|
001bcc  e1a00000          MOV      r0,r0                 ;950
001bd0  e3550001          CMP      r5,#1                 ;951
001bd4  1a000013          BNE      |L1.7208|
001bd8  e1a00000          MOV      r0,r0                 ;953
001bdc  e5d40007          LDRB     r0,[r4,#7]            ;953
001be0  e5d41006          LDRB     r1,[r4,#6]            ;953
001be4  e1810400          ORR      r0,r1,r0,LSL #8       ;953
001be8  e3500000          CMP      r0,#0                 ;953
001bec  1a000001          BNE      |L1.7160|
001bf0  e3a000ff          MOV      r0,#0xff              ;953
001bf4  eaffffa2          B        |L1.6788|
                  |L1.7160|
001bf8  e1a00000          MOV      r0,r0                 ;953
001bfc  e1a00000          MOV      r0,r0                 ;954
001c00  e3a03030          MOV      r3,#0x30              ;954
001c04  e2862020          ADD      r2,r6,#0x20           ;954
001c08  e1a01004          MOV      r1,r4                 ;954
001c0c  e1a00008          MOV      r0,r8                 ;954
001c10  ebfffffe          BL       tud_control_xfer
001c14  e3500000          CMP      r0,#0                 ;954
001c18  1a000001          BNE      |L1.7204|
001c1c  e3a000ff          MOV      r0,#0xff              ;954
001c20  eaffff97          B        |L1.6788|
                  |L1.7204|
001c24  e1a00000          MOV      r0,r0                 ;954
                  |L1.7208|
001c28  e3a00000          MOV      r0,#0                 ;956
001c2c  eaffff94          B        |L1.6788|
                  |L1.7216|
001c30  e1a00000          MOV      r0,r0                 ;958
001c34  e1a00000          MOV      r0,r0                 ;959
                  |L1.7224|
001c38  e1a00000          MOV      r0,r0                 ;960
                  |L1.7228|
001c3c  e1a00000          MOV      r0,r0                 ;961
                  |L1.7232|
001c40  e3550001          CMP      r5,#1                 ;962
001c44  1a000022          BNE      |L1.7380|
001c48  e1a00000          MOV      r0,r0                 ;964
001c4c  e5d40007          LDRB     r0,[r4,#7]            ;964
001c50  e5d41006          LDRB     r1,[r4,#6]            ;964
001c54  e1810400          ORR      r0,r1,r0,LSL #8       ;964
001c58  e3500000          CMP      r0,#0                 ;964
001c5c  1a000001          BNE      |L1.7272|
001c60  e3a000ff          MOV      r0,#0xff              ;964
001c64  eaffff86          B        |L1.6788|
                  |L1.7272|
001c68  e1a00000          MOV      r0,r0                 ;964
001c6c  e3a02030          MOV      r2,#0x30              ;966
001c70  e2861020          ADD      r1,r6,#0x20           ;966
001c74  e1a0000d          MOV      r0,sp                 ;966
001c78  ebfffffe          BL       __aeabi_memcpy4
001c7c  e1a00000          MOV      r0,r0                 ;967
001c80  e5d41001          LDRB     r1,[r4,#1]            ;967
001c84  e1a0200d          MOV      r2,sp                 ;967
001c88  e1a00006          MOV      r0,r6                 ;967
001c8c  ebfffffe          BL       _negotiate_streaming_parameters
001c90  e3500000          CMP      r0,#0                 ;967
001c94  1a000001          BNE      |L1.7328|
001c98  e3a00008          MOV      r0,#8                 ;967
001c9c  eaffff78          B        |L1.6788|
                  |L1.7328|
001ca0  e1a00000          MOV      r0,r0                 ;967
001ca4  e1a00000          MOV      r0,r0                 ;968
001ca8  e3a03030          MOV      r3,#0x30              ;968
001cac  e1a0200d          MOV      r2,sp                 ;968
001cb0  e1a01004          MOV      r1,r4                 ;968
001cb4  e1a00008          MOV      r0,r8                 ;968
001cb8  ebfffffe          BL       tud_control_xfer
001cbc  e3500000          CMP      r0,#0                 ;968
001cc0  1a000001          BNE      |L1.7372|
001cc4  e3a000ff          MOV      r0,#0xff              ;968
001cc8  eaffff6d          B        |L1.6788|
                  |L1.7372|
001ccc  e1a00000          MOV      r0,r0                 ;968
001cd0  e1a00000          MOV      r0,r0                 ;969
                  |L1.7380|
001cd4  e3a00000          MOV      r0,#0                 ;970
001cd8  eaffff69          B        |L1.6788|
                  |L1.7388|
001cdc  e1a00000          MOV      r0,r0                 ;972
001ce0  e3550001          CMP      r5,#1                 ;973
001ce4  1a000016          BNE      |L1.7492|
001ce8  e1a00000          MOV      r0,r0                 ;975
001cec  e5d40007          LDRB     r0,[r4,#7]            ;975
001cf0  e5d41006          LDRB     r1,[r4,#6]            ;975
001cf4  e1810400          ORR      r0,r1,r0,LSL #8       ;975
001cf8  e3500002          CMP      r0,#2                 ;975
001cfc  0a000001          BEQ      |L1.7432|
001d00  e3a000ff          MOV      r0,#0xff              ;975
001d04  eaffff5e          B        |L1.6788|
                  |L1.7432|
001d08  e1a00000          MOV      r0,r0                 ;975
001d0c  e3a00030          MOV      r0,#0x30              ;976
001d10  e58d002c          STR      r0,[sp,#0x2c]         ;976
001d14  e1a00000          MOV      r0,r0                 ;977
001d18  e3a03002          MOV      r3,#2                 ;977
001d1c  e28d202c          ADD      r2,sp,#0x2c           ;977
001d20  e1a01004          MOV      r1,r4                 ;977
001d24  e1a00008          MOV      r0,r8                 ;977
001d28  ebfffffe          BL       tud_control_xfer
001d2c  e3500000          CMP      r0,#0                 ;977
001d30  1a000001          BNE      |L1.7484|
001d34  e3a000ff          MOV      r0,#0xff              ;977
001d38  eaffff51          B        |L1.6788|
                  |L1.7484|
001d3c  e1a00000          MOV      r0,r0                 ;977
001d40  e1a00000          MOV      r0,r0                 ;978
                  |L1.7492|
001d44  e3a00000          MOV      r0,#0                 ;979
001d48  eaffff4d          B        |L1.6788|
                  |L1.7500|
001d4c  e1a00000          MOV      r0,r0                 ;981
001d50  e3550001          CMP      r5,#1                 ;982
001d54  1a000013          BNE      |L1.7592|
001d58  e1a00000          MOV      r0,r0                 ;984
001d5c  e5d40007          LDRB     r0,[r4,#7]            ;984
001d60  e5d41006          LDRB     r1,[r4,#6]            ;984
001d64  e1810400          ORR      r0,r1,r0,LSL #8       ;984
001d68  e3500001          CMP      r0,#1                 ;984
001d6c  0a000001          BEQ      |L1.7544|
001d70  e3a000ff          MOV      r0,#0xff              ;984
001d74  eaffff42          B        |L1.6788|
                  |L1.7544|
001d78  e1a00000          MOV      r0,r0                 ;984
001d7c  e1a00000          MOV      r0,r0                 ;985
001d80  e3a03001          MOV      r3,#1                 ;985
001d84  e51f23f4          LDR      r2,|L1.6552|
001d88  e1a01004          MOV      r1,r4                 ;985
001d8c  e1a00008          MOV      r0,r8                 ;985
001d90  ebfffffe          BL       tud_control_xfer
001d94  e3500000          CMP      r0,#0                 ;985
001d98  1a000001          BNE      |L1.7588|
001d9c  e3a000ff          MOV      r0,#0xff              ;985
001da0  eaffff37          B        |L1.6788|
                  |L1.7588|
001da4  e1a00000          MOV      r0,r0                 ;985
                  |L1.7592|
001da8  e3a00000          MOV      r0,#0                 ;987
001dac  eaffff34          B        |L1.6788|
                  |L1.7600|
001db0  e1a00000          MOV      r0,r0                 ;989
001db4  e1a00000          MOV      r0,r0                 ;989
001db8  e1a00000          MOV      r0,r0                 ;989
001dbc  ea000091          B        |L1.8200|
                  |L1.7616|
001dc0  e1a00000          MOV      r0,r0                 ;993
001dc4  e5d40001          LDRB     r0,[r4,#1]            ;994
001dc8  e3500001          CMP      r0,#1                 ;994
001dcc  0a000006          BEQ      |L1.7660|
001dd0  e3500081          CMP      r0,#0x81              ;994
001dd4  0a000030          BEQ      |L1.7836|
001dd8  e3500085          CMP      r0,#0x85              ;994
001ddc  0a000047          BEQ      |L1.7936|
001de0  e3500086          CMP      r0,#0x86              ;994
001de4  1a00007a          BNE      |L1.8148|
001de8  ea000060          B        |L1.8048|
                  |L1.7660|
001dec  e1a00000          MOV      r0,r0                 ;995
001df0  e3550001          CMP      r5,#1                 ;996
001df4  1a000013          BNE      |L1.7752|
001df8  e1a00000          MOV      r0,r0                 ;997
001dfc  e5d40007          LDRB     r0,[r4,#7]            ;997
001e00  e5d41006          LDRB     r1,[r4,#6]            ;997
001e04  e1810400          ORR      r0,r1,r0,LSL #8       ;997
001e08  e3500030          CMP      r0,#0x30              ;997
001e0c  9a000001          BLS      |L1.7704|
001e10  e3a000ff          MOV      r0,#0xff              ;997
001e14  eaffff1a          B        |L1.6788|
                  |L1.7704|
001e18  e1a00000          MOV      r0,r0                 ;997
001e1c  e1a00000          MOV      r0,r0                 ;998
001e20  e3a03030          MOV      r3,#0x30              ;998
001e24  e2862020          ADD      r2,r6,#0x20           ;998
001e28  e1a01004          MOV      r1,r4                 ;998
001e2c  e1a00008          MOV      r0,r8                 ;998
001e30  ebfffffe          BL       tud_control_xfer
001e34  e3500000          CMP      r0,#0                 ;998
001e38  1a000001          BNE      |L1.7748|
001e3c  e3a000ff          MOV      r0,#0xff              ;998
001e40  eaffff0f          B        |L1.6788|
                  |L1.7748|
001e44  ea000012          B        |L1.7828|
                  |L1.7752|
001e48  e3550002          CMP      r5,#2                 ;999
001e4c  1a000010          BNE      |L1.7828|
001e50  e1a00000          MOV      r0,r0                 ;1000
001e54  e2861020          ADD      r1,r6,#0x20           ;1000
001e58  e1a00006          MOV      r0,r6                 ;1000
001e5c  ebfffffe          BL       _update_streaming_parameters
001e60  e3500000          CMP      r0,#0                 ;1000
001e64  1a000001          BNE      |L1.7792|
001e68  e3a00008          MOV      r0,#8                 ;1000
001e6c  eaffff04          B        |L1.6788|
                  |L1.7792|
001e70  e1a00000          MOV      r0,r0                 ;1000
001e74  e59f0bb0          LDR      r0,|L1.10796|
001e78  e3500000          CMP      r0,#0                 ;1001
001e7c  0a000004          BEQ      |L1.7828|
001e80  e5d61001          LDRB     r1,[r6,#1]            ;1002
001e84  e5d60000          LDRB     r0,[r6,#0]            ;1002
001e88  e2862020          ADD      r2,r6,#0x20           ;1002
001e8c  ebfffffe          BL       tud_video_commit_cb
001e90  eafffefb          B        |L1.6788|
                  |L1.7828|
001e94  e3a00000          MOV      r0,#0                 ;1005
001e98  eafffef9          B        |L1.6788|
                  |L1.7836|
001e9c  e1a00000          MOV      r0,r0                 ;1007
001ea0  e3550001          CMP      r5,#1                 ;1008
001ea4  1a000013          BNE      |L1.7928|
001ea8  e1a00000          MOV      r0,r0                 ;1010
001eac  e5d40007          LDRB     r0,[r4,#7]            ;1010
001eb0  e5d41006          LDRB     r1,[r4,#6]            ;1010
001eb4  e1810400          ORR      r0,r1,r0,LSL #8       ;1010
001eb8  e3500000          CMP      r0,#0                 ;1010
001ebc  1a000001          BNE      |L1.7880|
001ec0  e3a000ff          MOV      r0,#0xff              ;1010
001ec4  eafffeee          B        |L1.6788|
                  |L1.7880|
001ec8  e1a00000          MOV      r0,r0                 ;1010
001ecc  e1a00000          MOV      r0,r0                 ;1011
001ed0  e3a03030          MOV      r3,#0x30              ;1011
001ed4  e2862020          ADD      r2,r6,#0x20           ;1011
001ed8  e1a01004          MOV      r1,r4                 ;1011
001edc  e1a00008          MOV      r0,r8                 ;1011
001ee0  ebfffffe          BL       tud_control_xfer
001ee4  e3500000          CMP      r0,#0                 ;1011
001ee8  1a000001          BNE      |L1.7924|
001eec  e3a000ff          MOV      r0,#0xff              ;1011
001ef0  eafffee3          B        |L1.6788|
                  |L1.7924|
001ef4  e1a00000          MOV      r0,r0                 ;1011
                  |L1.7928|
001ef8  e3a00000          MOV      r0,#0                 ;1013
001efc  eafffee0          B        |L1.6788|
                  |L1.7936|
001f00  e1a00000          MOV      r0,r0                 ;1015
001f04  e3550001          CMP      r5,#1                 ;1016
001f08  1a000016          BNE      |L1.8040|
001f0c  e1a00000          MOV      r0,r0                 ;1018
001f10  e5d40007          LDRB     r0,[r4,#7]            ;1018
001f14  e5d41006          LDRB     r1,[r4,#6]            ;1018
001f18  e1810400          ORR      r0,r1,r0,LSL #8       ;1018
001f1c  e3500002          CMP      r0,#2                 ;1018
001f20  0a000001          BEQ      |L1.7980|
001f24  e3a000ff          MOV      r0,#0xff              ;1018
001f28  eafffed5          B        |L1.6788|
                  |L1.7980|
001f2c  e1a00000          MOV      r0,r0                 ;1018
001f30  e3a00030          MOV      r0,#0x30              ;1019
001f34  e58d002c          STR      r0,[sp,#0x2c]         ;1019
001f38  e1a00000          MOV      r0,r0                 ;1020
001f3c  e3a03002          MOV      r3,#2                 ;1020
001f40  e28d202c          ADD      r2,sp,#0x2c           ;1020
001f44  e1a01004          MOV      r1,r4                 ;1020
001f48  e1a00008          MOV      r0,r8                 ;1020
001f4c  ebfffffe          BL       tud_control_xfer
001f50  e3500000          CMP      r0,#0                 ;1020
001f54  1a000001          BNE      |L1.8032|
001f58  e3a000ff          MOV      r0,#0xff              ;1020
001f5c  eafffec8          B        |L1.6788|
                  |L1.8032|
001f60  e1a00000          MOV      r0,r0                 ;1020
001f64  e1a00000          MOV      r0,r0                 ;1021
                  |L1.8040|
001f68  e3a00000          MOV      r0,#0                 ;1022
001f6c  eafffec4          B        |L1.6788|
                  |L1.8048|
001f70  e1a00000          MOV      r0,r0                 ;1024
001f74  e3550001          CMP      r5,#1                 ;1025
001f78  1a000013          BNE      |L1.8140|
001f7c  e1a00000          MOV      r0,r0                 ;1027
001f80  e5d40007          LDRB     r0,[r4,#7]            ;1027
001f84  e5d41006          LDRB     r1,[r4,#6]            ;1027
001f88  e1810400          ORR      r0,r1,r0,LSL #8       ;1027
001f8c  e3500001          CMP      r0,#1                 ;1027
001f90  0a000001          BEQ      |L1.8092|
001f94  e3a000ff          MOV      r0,#0xff              ;1027
001f98  eafffeb9          B        |L1.6788|
                  |L1.8092|
001f9c  e1a00000          MOV      r0,r0                 ;1027
001fa0  e1a00000          MOV      r0,r0                 ;1028
001fa4  e3a03001          MOV      r3,#1                 ;1028
001fa8  e51f2618          LDR      r2,|L1.6552|
001fac  e1a01004          MOV      r1,r4                 ;1028
001fb0  e1a00008          MOV      r0,r8                 ;1028
001fb4  ebfffffe          BL       tud_control_xfer
001fb8  e3500000          CMP      r0,#0                 ;1028
001fbc  1a000001          BNE      |L1.8136|
001fc0  e3a000ff          MOV      r0,#0xff              ;1028
001fc4  eafffeae          B        |L1.6788|
                  |L1.8136|
001fc8  e1a00000          MOV      r0,r0                 ;1028
                  |L1.8140|
001fcc  e3a00000          MOV      r0,#0                 ;1030
001fd0  eafffeab          B        |L1.6788|
                  |L1.8148|
001fd4  e1a00000          MOV      r0,r0                 ;1032
001fd8  e1a00000          MOV      r0,r0                 ;1032
001fdc  e1a00000          MOV      r0,r0                 ;1032
001fe0  ea000008          B        |L1.8200|
                  |L1.8164|
001fe4  e1a00000          MOV      r0,r0                 ;1036
001fe8  e1a00000          MOV      r0,r0                 ;1037
                  |L1.8172|
001fec  e1a00000          MOV      r0,r0                 ;1038
                  |L1.8176|
001ff0  e1a00000          MOV      r0,r0                 ;1039
                  |L1.8180|
001ff4  e1a00000          MOV      r0,r0                 ;1040
                  |L1.8184|
001ff8  e1a00000          MOV      r0,r0                 ;1041
                  |L1.8188|
001ffc  ea000001          B        |L1.8200|
                  |L1.8192|
002000  e1a00000          MOV      r0,r0                 ;1045
002004  e1a00000          MOV      r0,r0                 ;1045
                  |L1.8200|
002008  e1a00000          MOV      r0,r0                 ;935
00200c  e1a00000          MOV      r0,r0                 ;1049
002010  e1a00000          MOV      r0,r0                 ;1049
002014  e3a00007          MOV      r0,#7                 ;1050
002018  eafffe99          B        |L1.6788|
;;;1052   
                          ENDP

                  handle_video_stm_req PROC
;;;1053   static int handle_video_stm_req(uint8_t rhport, uint8_t stage,
00201c  e92d41f0          PUSH     {r4-r8,lr}
;;;1054                                   tusb_control_request_t const *request,
;;;1055                                   uint_fast8_t stm_idx)
;;;1056   {
002020  e1a05000          MOV      r5,r0
002024  e1a06001          MOV      r6,r1
002028  e1a04002          MOV      r4,r2
00202c  e1a07003          MOV      r7,r3
;;;1057   /////	  printf("\n\r======handle_video_stm_req========[%x]\n\r",request->bmRequestType_bit.type);
;;;1058     switch (request->bmRequestType_bit.type) {
002030  e5d40000          LDRB     r0,[r4,#0]
002034  e1a00c80          LSL      r0,r0,#25
002038  e1a00f20          LSR      r0,r0,#30
00203c  e3500000          CMP      r0,#0
002040  0a000002          BEQ      |L1.8272|
002044  e3500001          CMP      r0,#1
002048  1a000016          BNE      |L1.8360|
00204c  ea000006          B        |L1.8300|
                  |L1.8272|
;;;1059       case TUSB_REQ_TYPE_STANDARD:
002050  e1a00000          MOV      r0,r0
;;;1060         return handle_video_stm_std_req(rhport, stage, request, stm_idx);
002054  e1a03007          MOV      r3,r7
002058  e1a02004          MOV      r2,r4
00205c  e1a01006          MOV      r1,r6
002060  e1a00005          MOV      r0,r5
002064  ebfffffe          BL       handle_video_stm_std_req
                  |L1.8296|
;;;1061   
;;;1062       case TUSB_REQ_TYPE_CLASS:
;;;1063   			
;;;1064         if (TU_U16_HIGH(request->wIndex)) 
;;;1065   				return VIDEO_ERROR_INVALID_REQUEST;
;;;1066         return handle_video_stm_cs_req(rhport, stage, request, stm_idx);
;;;1067   
;;;1068       default: 
;;;1069   			return VIDEO_ERROR_INVALID_REQUEST;
;;;1070     }
;;;1071   }
002068  e8bd81f0          POP      {r4-r8,pc}
                  |L1.8300|
00206c  e1a00000          MOV      r0,r0                 ;1062
002070  e5d40005          LDRB     r0,[r4,#5]            ;1064
002074  e5d41004          LDRB     r1,[r4,#4]            ;1064
002078  e1810400          ORR      r0,r1,r0,LSL #8       ;1064
00207c  e1a00440          ASR      r0,r0,#8              ;1064
002080  e3500000          CMP      r0,#0                 ;1064
002084  0a000001          BEQ      |L1.8336|
002088  e3a00007          MOV      r0,#7                 ;1065
00208c  eafffff5          B        |L1.8296|
                  |L1.8336|
002090  e1a03007          MOV      r3,r7                 ;1066
002094  e1a02004          MOV      r2,r4                 ;1066
002098  e1a01006          MOV      r1,r6                 ;1066
00209c  e1a00005          MOV      r0,r5                 ;1066
0020a0  ebfffffe          BL       handle_video_stm_cs_req
0020a4  eaffffef          B        |L1.8296|
                  |L1.8360|
0020a8  e1a00000          MOV      r0,r0                 ;1068
0020ac  e3a00007          MOV      r0,#7                 ;1069
0020b0  eaffffec          B        |L1.8296|
;;;1072   
                          ENDP

                  tud_video_n_connected PROC
;;;1076   
;;;1077   bool tud_video_n_connected(uint_fast8_t ctl_idx)
0020b4  e92d4070          PUSH     {r4-r6,lr}
;;;1078   {
0020b8  e1a05000          MOV      r5,r0
;;;1079     TU_ASSERT(ctl_idx < CFG_TUD_VIDEO);
0020bc  e1a00000          MOV      r0,r0
0020c0  e3550000          CMP      r5,#0
0020c4  0a000007          BEQ      |L1.8424|
0020c8  e59f2960          LDR      r2,|L1.10800|
0020cc  e59f1960          LDR      r1,|L1.10804|
0020d0  e51f0b30          LDR      r0,|L1.5544|
0020d4  ebfffffe          BL       __2printf
0020d8  e1a00000          MOV      r0,r0
0020dc  e1a00000          MOV      r0,r0
0020e0  e3a00000          MOV      r0,#0
                  |L1.8420|
;;;1080     videod_streaming_interface_t *stm = _get_instance_streaming(ctl_idx, 0);
;;;1081     if (stm) 
;;;1082   		return true;
;;;1083     return 
;;;1084   		false;
;;;1085   }
0020e4  e8bd8070          POP      {r4-r6,pc}
                  |L1.8424|
0020e8  e1a00000          MOV      r0,r0                 ;1079
0020ec  e3a01000          MOV      r1,#0                 ;1080
0020f0  e1a00005          MOV      r0,r5                 ;1080
0020f4  ebfffffe          BL       _get_instance_streaming
0020f8  e1a04000          MOV      r4,r0                 ;1080
0020fc  e3540000          CMP      r4,#0                 ;1081
002100  0a000001          BEQ      |L1.8460|
002104  e3a00001          MOV      r0,#1                 ;1082
002108  eafffff5          B        |L1.8420|
                  |L1.8460|
00210c  e3a00000          MOV      r0,#0                 ;1083
002110  eafffff3          B        |L1.8420|
;;;1086   
                          ENDP

                  tud_video_n_streaming PROC
;;;1087   bool tud_video_n_streaming(uint_fast8_t ctl_idx, uint_fast8_t stm_idx)
002114  e92d4070          PUSH     {r4-r6,lr}
;;;1088   {
002118  e1a05000          MOV      r5,r0
00211c  e1a06001          MOV      r6,r1
;;;1089     TU_ASSERT(ctl_idx < CFG_TUD_VIDEO);
002120  e1a00000          MOV      r0,r0
002124  e3550000          CMP      r5,#0
002128  0a000007          BEQ      |L1.8524|
00212c  e59f2904          LDR      r2,|L1.10808|
002130  e59f1904          LDR      r1,|L1.10812|
002134  e51f0b94          LDR      r0,|L1.5544|
002138  ebfffffe          BL       __2printf
00213c  e1a00000          MOV      r0,r0
002140  e1a00000          MOV      r0,r0
002144  e3a00000          MOV      r0,#0
                  |L1.8520|
;;;1090     TU_ASSERT(stm_idx < CFG_TUD_VIDEO_STREAMING);
;;;1091     videod_streaming_interface_t *stm = _get_instance_streaming(ctl_idx, stm_idx);
;;;1092     if (!stm || !stm->desc.ep[0]) 
;;;1093   		{
;;;1094   ////		tu_printf("\r\n======tud_video_n_streaming[%x][%x]=============",
;;;1095   ////			(uint32_t)stm,(uint32_t)stm->desc.ep[0]);
;;;1096   		return false;
;;;1097   		}
;;;1098     return true;
;;;1099   }
002148  e8bd8070          POP      {r4-r6,pc}
                  |L1.8524|
00214c  e1a00000          MOV      r0,r0                 ;1089
002150  e1a00000          MOV      r0,r0                 ;1090
002154  e3560000          CMP      r6,#0                 ;1090
002158  0a000007          BEQ      |L1.8572|
00215c  e59f28dc          LDR      r2,|L1.10816|
002160  e59f18d4          LDR      r1,|L1.10812|
002164  e51f0bc4          LDR      r0,|L1.5544|
002168  ebfffffe          BL       __2printf
00216c  e1a00000          MOV      r0,r0                 ;1090
002170  e1a00000          MOV      r0,r0                 ;1090
002174  e3a00000          MOV      r0,#0                 ;1090
002178  eafffff2          B        |L1.8520|
                  |L1.8572|
00217c  e1a00000          MOV      r0,r0                 ;1090
002180  e1a01006          MOV      r1,r6                 ;1091
002184  e1a00005          MOV      r0,r5                 ;1091
002188  ebfffffe          BL       _get_instance_streaming
00218c  e1a04000          MOV      r4,r0                 ;1091
002190  e3540000          CMP      r4,#0                 ;1092
002194  0a000002          BEQ      |L1.8612|
002198  e1d400b8          LDRH     r0,[r4,#8]            ;1092
00219c  e3500000          CMP      r0,#0                 ;1092
0021a0  1a000001          BNE      |L1.8620|
                  |L1.8612|
0021a4  e3a00000          MOV      r0,#0                 ;1096
0021a8  eaffffe6          B        |L1.8520|
                  |L1.8620|
0021ac  e3a00001          MOV      r0,#1                 ;1098
0021b0  eaffffe4          B        |L1.8520|
;;;1100   
                          ENDP

                  tud_video_n_frame_xfer PROC
;;;1101   bool tud_video_n_frame_xfer(uint_fast8_t ctl_idx, uint_fast8_t stm_idx, void *buffer, size_t bufsize)
0021b4  e92d5fff          PUSH     {r0-r12,lr}
;;;1102   {
0021b8  e1a0b000          MOV      r11,r0
0021bc  e1a06002          MOV      r6,r2
0021c0  e1a07003          MOV      r7,r3
;;;1103     TU_ASSERT(ctl_idx < CFG_TUD_VIDEO);
0021c4  e1a00000          MOV      r0,r0
0021c8  e35b0000          CMP      r11,#0
0021cc  0a000008          BEQ      |L1.8692|
0021d0  e59f286c          LDR      r2,|L1.10820|
0021d4  e59f186c          LDR      r1,|L1.10824|
0021d8  e51f0c38          LDR      r0,|L1.5544|
0021dc  ebfffffe          BL       __2printf
0021e0  e1a00000          MOV      r0,r0
0021e4  e1a00000          MOV      r0,r0
0021e8  e3a00000          MOV      r0,#0
                  |L1.8684|
0021ec  e28dd010          ADD      sp,sp,#0x10
;;;1104     TU_ASSERT(stm_idx < CFG_TUD_VIDEO_STREAMING);
;;;1105     if (!buffer || !bufsize) 
;;;1106   		return false;
;;;1107     videod_streaming_interface_t *stm = _get_instance_streaming(ctl_idx, stm_idx);
;;;1108     if (!stm || !stm->desc.ep[0] || stm->buffer) 
;;;1109   		return false;
;;;1110   
;;;1111     /* Find EP address */
;;;1112     uint8_t const *desc = _videod_itf[stm->index_vc].beg;
;;;1113     uint8_t ep_addr = 0;
;;;1114     for (uint_fast8_t i = 0; i < CFG_TUD_VIDEO_STREAMING; ++i) {
;;;1115       uint_fast16_t ofs_ep = stm->desc.ep[i];
;;;1116       if (!ofs_ep) 
;;;1117   			continue;
;;;1118       ep_addr = _desc_ep_addr(desc + ofs_ep);
;;;1119       break;
;;;1120     }
;;;1121     if (!ep_addr) 
;;;1122   		return false;
;;;1123   
;;;1124     TU_VERIFY( usbd_edpt_claim(0, ep_addr) );
;;;1125     /* update the packet header */
;;;1126     tusb_video_payload_header_t *hdr = (tusb_video_payload_header_t*)stm->ep_buf;
;;;1127     hdr->FrameID   ^= 1;
;;;1128     hdr->EndOfFrame = 0;
;;;1129     /* update the packet data */
;;;1130     stm->buffer     = (uint8_t*)buffer;
;;;1131     stm->bufsize    = bufsize;
;;;1132     uint_fast16_t pkt_len = _prepare_in_payload(stm);
;;;1133     TU_ASSERT( usbd_edpt_xfer(0, ep_addr, stm->ep_buf, (uint16_t) pkt_len), 0);
;;;1134     return true;
;;;1135   }
0021f0  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.8692|
0021f4  e1a00000          MOV      r0,r0                 ;1103
0021f8  e1a00000          MOV      r0,r0                 ;1104
0021fc  e59d0004          LDR      r0,[sp,#4]            ;1104
002200  e3500000          CMP      r0,#0                 ;1104
002204  0a000007          BEQ      |L1.8744|
002208  e3a02e45          MOV      r2,#0x450             ;1104
00220c  e59f1834          LDR      r1,|L1.10824|
002210  e51f0c70          LDR      r0,|L1.5544|
002214  ebfffffe          BL       __2printf
002218  e1a00000          MOV      r0,r0                 ;1104
00221c  e1a00000          MOV      r0,r0                 ;1104
002220  e3a00000          MOV      r0,#0                 ;1104
002224  eafffff0          B        |L1.8684|
                  |L1.8744|
002228  e1a00000          MOV      r0,r0                 ;1104
00222c  e3560000          CMP      r6,#0                 ;1105
002230  0a000001          BEQ      |L1.8764|
002234  e3570000          CMP      r7,#0                 ;1105
002238  1a000001          BNE      |L1.8772|
                  |L1.8764|
00223c  e3a00000          MOV      r0,#0                 ;1106
002240  eaffffe9          B        |L1.8684|
                  |L1.8772|
002244  e1a0000b          MOV      r0,r11                ;1107
002248  e59d1004          LDR      r1,[sp,#4]            ;1107
00224c  ebfffffe          BL       _get_instance_streaming
002250  e1a04000          MOV      r4,r0                 ;1107
002254  e3540000          CMP      r4,#0                 ;1108
002258  0a000005          BEQ      |L1.8820|
00225c  e1d400b8          LDRH     r0,[r4,#8]            ;1108
002260  e3500000          CMP      r0,#0                 ;1108
002264  0a000002          BEQ      |L1.8820|
002268  e594000c          LDR      r0,[r4,#0xc]          ;1108
00226c  e3500000          CMP      r0,#0                 ;1108
002270  0a000001          BEQ      |L1.8828|
                  |L1.8820|
002274  e3a00000          MOV      r0,#0                 ;1109
002278  eaffffdb          B        |L1.8684|
                  |L1.8828|
00227c  e5d41000          LDRB     r1,[r4,#0]            ;1112
002280  e0812081          ADD      r2,r1,r1,LSL #1       ;1112
002284  e0821181          ADD      r1,r2,r1,LSL #3       ;1112
002288  e51f28c8          LDR      r2,|L1.6600|
00228c  e0810002          ADD      r0,r1,r2              ;1112
002290  ebfffffe          BL       __aeabi_uread4
002294  e1a08000          MOV      r8,r0                 ;1112
002298  e3a09000          MOV      r9,#0                 ;1113
00229c  e3a00000          MOV      r0,#0                 ;1114
0022a0  ea00000b          B        |L1.8916|
                  |L1.8868|
0022a4  e2842008          ADD      r2,r4,#8              ;1115
0022a8  e0822080          ADD      r2,r2,r0,LSL #1       ;1115
0022ac  e1d210b0          LDRH     r1,[r2,#0]            ;1115
0022b0  e3510000          CMP      r1,#0                 ;1116
0022b4  1a000000          BNE      |L1.8892|
0022b8  ea000003          B        |L1.8908|
                  |L1.8892|
0022bc  e0882001          ADD      r2,r8,r1              ;1118
0022c0  e5d23002          LDRB     r3,[r2,#2]            ;1118
0022c4  e1a09003          MOV      r9,r3                 ;1118
0022c8  ea000003          B        |L1.8924|
                  |L1.8908|
0022cc  e1a00000          MOV      r0,r0                 ;1117
0022d0  e2800001          ADD      r0,r0,#1              ;1114
                  |L1.8916|
0022d4  e3500000          CMP      r0,#0                 ;1114
0022d8  0afffff1          BEQ      |L1.8868|
                  |L1.8924|
0022dc  e1a00000          MOV      r0,r0                 ;1119
0022e0  e3590000          CMP      r9,#0                 ;1121
0022e4  1a000001          BNE      |L1.8944|
0022e8  e3a00000          MOV      r0,#0                 ;1122
0022ec  eaffffbe          B        |L1.8684|
                  |L1.8944|
0022f0  e1a00000          MOV      r0,r0                 ;1124
0022f4  e1a01009          MOV      r1,r9                 ;1124
0022f8  e3a00000          MOV      r0,#0                 ;1124
0022fc  ebfffffe          BL       usbd_edpt_claim
002300  e3500000          CMP      r0,#0                 ;1124
002304  1a000001          BNE      |L1.8976|
002308  e3a00000          MOV      r0,#0                 ;1124
00230c  eaffffb6          B        |L1.8684|
                  |L1.8976|
002310  e1a00000          MOV      r0,r0                 ;1124
002314  e2845020          ADD      r5,r4,#0x20           ;1126
002318  e5d50001          LDRB     r0,[r5,#1]            ;1127
00231c  e3c00001          BIC      r0,r0,#1              ;1127
002320  e5d51001          LDRB     r1,[r5,#1]            ;1127
002324  e2211001          EOR      r1,r1,#1              ;1127
002328  e2011001          AND      r1,r1,#1              ;1127
00232c  e1800001          ORR      r0,r0,r1              ;1127
002330  e5c50001          STRB     r0,[r5,#1]            ;1127
002334  e5d50001          LDRB     r0,[r5,#1]            ;1128
002338  e3c00002          BIC      r0,r0,#2              ;1128
00233c  e5c50001          STRB     r0,[r5,#1]            ;1128
002340  e584600c          STR      r6,[r4,#0xc]          ;1130
002344  e5847010          STR      r7,[r4,#0x10]         ;1131
002348  e1a00004          MOV      r0,r4                 ;1132
00234c  ebfffffe          BL       _prepare_in_payload
002350  e1a0a000          MOV      r10,r0                ;1132
002354  e1a00000          MOV      r0,r0                 ;1133
002358  e1a0380a          LSL      r3,r10,#16            ;1133
00235c  e1a03823          LSR      r3,r3,#16             ;1133
002360  e2842020          ADD      r2,r4,#0x20           ;1133
002364  e1a01009          MOV      r1,r9                 ;1133
002368  e3a00000          MOV      r0,#0                 ;1133
00236c  ebfffffe          BL       usbd_edpt_xfer
002370  e3500000          CMP      r0,#0                 ;1133
002374  1a000007          BNE      |L1.9112|
002378  e59f26cc          LDR      r2,|L1.10828|
00237c  e59f16c4          LDR      r1,|L1.10824|
002380  e51f0de0          LDR      r0,|L1.5544|
002384  ebfffffe          BL       __2printf
002388  e1a00000          MOV      r0,r0                 ;1133
00238c  e1a00000          MOV      r0,r0                 ;1133
002390  e3a00000          MOV      r0,#0                 ;1133
002394  eaffff94          B        |L1.8684|
                  |L1.9112|
002398  e1a00000          MOV      r0,r0                 ;1133
00239c  e3a00001          MOV      r0,#1                 ;1134
0023a0  eaffff91          B        |L1.8684|
;;;1136   
                          ENDP

                  videod_init PROC
;;;1139   //--------------------------------------------------------------------+
;;;1140   void videod_init(void)
0023a4  e92d4070          PUSH     {r4-r6,lr}
;;;1141   {
;;;1142   ////tu_printf("\r\n======videod_init[%x][%x]=============",CFG_TUD_VIDEO,CFG_TUD_VIDEO_STREAMING);
;;;1143   
;;;1144     for (uint_fast8_t i = 0; i < CFG_TUD_VIDEO; ++i) {
0023a8  e3a04000          MOV      r4,#0
0023ac  ea000007          B        |L1.9168|
                  |L1.9136|
;;;1145       videod_interface_t* ctl = &_videod_itf[i];
0023b0  e0840084          ADD      r0,r4,r4,LSL #1
0023b4  e0800184          ADD      r0,r0,r4,LSL #3
0023b8  e51f19f8          LDR      r1,|L1.6600|
0023bc  e0805001          ADD      r5,r0,r1
;;;1146       tu_memclr(ctl, sizeof(*ctl));
0023c0  e3a0100b          MOV      r1,#0xb
0023c4  e1a00005          MOV      r0,r5
0023c8  ebfffffe          BL       __aeabi_memclr
0023cc  e2844001          ADD      r4,r4,#1              ;1144
                  |L1.9168|
0023d0  e3540000          CMP      r4,#0                 ;1144
0023d4  0afffff5          BEQ      |L1.9136|
;;;1147     }
;;;1148     for (uint_fast8_t i = 0; i < CFG_TUD_VIDEO_STREAMING; ++i) {
0023d8  e3a04000          MOV      r4,#0
0023dc  ea000006          B        |L1.9212|
                  |L1.9184|
;;;1149       videod_streaming_interface_t *stm = &_videod_streaming_itf[i];
0023e0  e0840184          ADD      r0,r4,r4,LSL #3
0023e4  e51f1a20          LDR      r1,|L1.6604|
0023e8  e0815280          ADD      r5,r1,r0,LSL #5
;;;1150       tu_memclr(stm, ITF_STM_MEM_RESET_SIZE);
0023ec  e3a01020          MOV      r1,#0x20
0023f0  e1a00005          MOV      r0,r5
0023f4  ebfffffe          BL       __aeabi_memclr4
0023f8  e2844001          ADD      r4,r4,#1              ;1148
                  |L1.9212|
0023fc  e3540000          CMP      r4,#0                 ;1148
002400  0afffff6          BEQ      |L1.9184|
;;;1151     }
;;;1152   }
002404  e8bd8070          POP      {r4-r6,pc}
;;;1153   
                          ENDP

                  videod_reset PROC
;;;1154   void videod_reset(uint8_t rhport)
002408  e92d4070          PUSH     {r4-r6,lr}
;;;1155   {
00240c  e1a06000          MOV      r6,r0
;;;1156     (void) rhport;
;;;1157     for (uint_fast8_t i = 0; i < CFG_TUD_VIDEO; ++i) {
002410  e3a04000          MOV      r4,#0
002414  ea000007          B        |L1.9272|
                  |L1.9240|
;;;1158       videod_interface_t* ctl = &_videod_itf[i];
002418  e0840084          ADD      r0,r4,r4,LSL #1
00241c  e0800184          ADD      r0,r0,r4,LSL #3
002420  e51f1a60          LDR      r1,|L1.6600|
002424  e0805001          ADD      r5,r0,r1
;;;1159       tu_memclr(ctl, sizeof(*ctl));
002428  e3a0100b          MOV      r1,#0xb
00242c  e1a00005          MOV      r0,r5
002430  ebfffffe          BL       __aeabi_memclr
002434  e2844001          ADD      r4,r4,#1              ;1157
                  |L1.9272|
002438  e3540000          CMP      r4,#0                 ;1157
00243c  0afffff5          BEQ      |L1.9240|
;;;1160     }
;;;1161     for (uint_fast8_t i = 0; i < CFG_TUD_VIDEO_STREAMING; ++i) {
002440  e3a04000          MOV      r4,#0
002444  ea000006          B        |L1.9316|
                  |L1.9288|
;;;1162       videod_streaming_interface_t *stm = &_videod_streaming_itf[i];
002448  e0840184          ADD      r0,r4,r4,LSL #3
00244c  e51f1a88          LDR      r1,|L1.6604|
002450  e0815280          ADD      r5,r1,r0,LSL #5
;;;1163       tu_memclr(stm, ITF_STM_MEM_RESET_SIZE);
002454  e3a01020          MOV      r1,#0x20
002458  e1a00005          MOV      r0,r5
00245c  ebfffffe          BL       __aeabi_memclr4
002460  e2844001          ADD      r4,r4,#1              ;1161
                  |L1.9316|
002464  e3540000          CMP      r4,#0                 ;1161
002468  0afffff6          BEQ      |L1.9288|
;;;1164     }
;;;1165   }
00246c  e8bd8070          POP      {r4-r6,pc}
;;;1166   
                          ENDP

                  videod_open PROC
;;;1167   uint16_t videod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
002470  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1168   {
002474  e24dd008          SUB      sp,sp,#8
002478  e1a04001          MOV      r4,r1
00247c  e1a0a002          MOV      r10,r2
;;;1169   ////tu_printf("\r\n======videod_open=============");
;;;1170    TU_VERIFY((TUSB_CLASS_VIDEO       == itf_desc->bInterfaceClass) &&
002480  e1a00000          MOV      r0,r0
002484  e5d40005          LDRB     r0,[r4,#5]
002488  e350000e          CMP      r0,#0xe
00248c  1a000005          BNE      |L1.9384|
002490  e5d40006          LDRB     r0,[r4,#6]
002494  e3500001          CMP      r0,#1
002498  1a000002          BNE      |L1.9384|
00249c  e5d40007          LDRB     r0,[r4,#7]
0024a0  e3500001          CMP      r0,#1
0024a4  0a000002          BEQ      |L1.9396|
                  |L1.9384|
0024a8  e3a00000          MOV      r0,#0
                  |L1.9388|
0024ac  e28dd014          ADD      sp,sp,#0x14
;;;1171               (VIDEO_SUBCLASS_CONTROL == itf_desc->bInterfaceSubClass) &&
;;;1172               (VIDEO_ITF_PROTOCOL_15  == itf_desc->bInterfaceProtocol), 0);
;;;1173   ////tu_printf("\r\n======videod_open1=============");
;;;1174   
;;;1175     /* Find available interface */
;;;1176     videod_interface_t *self = NULL;
;;;1177     uint8_t ctl_idx;
;;;1178     for (ctl_idx = 0; ctl_idx < CFG_TUD_VIDEO; ++ctl_idx) {
;;;1179       if (_videod_itf[ctl_idx].beg) 
;;;1180   			continue;
;;;1181       self = &_videod_itf[ctl_idx];
;;;1182       break;
;;;1183     }
;;;1184     TU_ASSERT(ctl_idx < CFG_TUD_VIDEO, 0);
;;;1185   /////tu_printf("\r\n======videod_open2=============");
;;;1186   
;;;1187     uint8_t const *end = (uint8_t const*)itf_desc + max_len;
;;;1188     self->beg = (uint8_t const*) itf_desc;
;;;1189     self->len = max_len;
;;;1190   
;;;1191     /*------------- Video Control Interface -------------*/
;;;1192     TU_VERIFY(_open_vc_itf(rhport, self, 0), 0);
;;;1193     tusb_desc_vc_itf_t const *vc = _get_desc_vc(self);
;;;1194     uint_fast8_t bInCollection   = vc->ctl.bInCollection;
;;;1195   
;;;1196     /* Find the end of the video interface descriptor */
;;;1197     void const *cur = _next_desc_itf(itf_desc, end);
;;;1198     for (uint8_t stm_idx = 0; stm_idx < bInCollection; ++stm_idx) {
;;;1199       videod_streaming_interface_t *stm = NULL;
;;;1200       /* find free streaming interface handle */
;;;1201       for (uint8_t i = 0; i < CFG_TUD_VIDEO_STREAMING; ++i) {
;;;1202         if (_videod_streaming_itf[i].desc.beg) 
;;;1203   				continue;
;;;1204         stm = &_videod_streaming_itf[i];
;;;1205         self->stm[stm_idx] = i;
;;;1206         break;
;;;1207       }
;;;1208       TU_ASSERT(stm, 0);
;;;1209   	////tu_printf("\r\n======videod_open3=============");
;;;1210   	
;;;1211       stm->index_vc = ctl_idx;
;;;1212       stm->index_vs = stm_idx;
;;;1213       stm->desc.beg = (uint16_t) ((uintptr_t)cur - (uintptr_t)itf_desc);
;;;1214       cur = _next_desc_itf(cur, end);
;;;1215       stm->desc.end = (uint16_t) ((uintptr_t)cur - (uintptr_t)itf_desc);
;;;1216     }
;;;1217     self->len = (uint16_t) ((uintptr_t)cur - (uintptr_t)itf_desc);
;;;1218     return (uint16_t) ((uintptr_t)cur - (uintptr_t)itf_desc);
;;;1219   }
0024b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.9396|
0024b4  e1a00000          MOV      r0,r0                 ;1170
0024b8  e3a05000          MOV      r5,#0                 ;1176
0024bc  e3a06000          MOV      r6,#0                 ;1178
0024c0  ea00000f          B        |L1.9476|
                  |L1.9412|
0024c4  e0861086          ADD      r1,r6,r6,LSL #1       ;1179
0024c8  e0811186          ADD      r1,r1,r6,LSL #3       ;1179
0024cc  e51f2b0c          LDR      r2,|L1.6600|
0024d0  e0810002          ADD      r0,r1,r2              ;1179
0024d4  ebfffffe          BL       __aeabi_uread4
0024d8  e3500000          CMP      r0,#0                 ;1179
0024dc  0a000000          BEQ      |L1.9444|
0024e0  ea000004          B        |L1.9464|
                  |L1.9444|
0024e4  e0860086          ADD      r0,r6,r6,LSL #1       ;1181
0024e8  e0800186          ADD      r0,r0,r6,LSL #3       ;1181
0024ec  e51f1b2c          LDR      r1,|L1.6600|
0024f0  e0805001          ADD      r5,r0,r1              ;1181
0024f4  ea000004          B        |L1.9484|
                  |L1.9464|
0024f8  e1a00000          MOV      r0,r0                 ;1180
0024fc  e2860001          ADD      r0,r6,#1              ;1178
002500  e20060ff          AND      r6,r0,#0xff           ;1178
                  |L1.9476|
002504  e3560001          CMP      r6,#1                 ;1178
002508  baffffed          BLT      |L1.9412|
                  |L1.9484|
00250c  e1a00000          MOV      r0,r0                 ;1182
002510  e1a00000          MOV      r0,r0                 ;1184
002514  e3560001          CMP      r6,#1                 ;1184
002518  ba000007          BLT      |L1.9532|
00251c  e3a02e4a          MOV      r2,#0x4a0             ;1184
002520  e59f1528          LDR      r1,|L1.10832|
002524  e51f0f84          LDR      r0,|L1.5544|
002528  ebfffffe          BL       __2printf
00252c  e1a00000          MOV      r0,r0                 ;1184
002530  e1a00000          MOV      r0,r0                 ;1184
002534  e3a00000          MOV      r0,#0                 ;1184
002538  eaffffdb          B        |L1.9388|
                  |L1.9532|
00253c  e1a00000          MOV      r0,r0                 ;1184
002540  e084000a          ADD      r0,r4,r10             ;1187
002544  e58d0004          STR      r0,[sp,#4]            ;1187
002548  e1a01005          MOV      r1,r5                 ;1188
00254c  e1a00004          MOV      r0,r4                 ;1188
002550  ebfffffe          BL       __aeabi_uwrite4
002554  e5c5a004          STRB     r10,[r5,#4]           ;1189
002558  e1a0042a          LSR      r0,r10,#8             ;1189
00255c  e5c50005          STRB     r0,[r5,#5]            ;1189
002560  e1a00000          MOV      r0,r0                 ;1192
002564  e3a02000          MOV      r2,#0                 ;1192
002568  e1a01005          MOV      r1,r5                 ;1192
00256c  e59d0008          LDR      r0,[sp,#8]            ;1192
002570  ebfffffe          BL       _open_vc_itf
002574  e3500000          CMP      r0,#0                 ;1192
002578  1a000001          BNE      |L1.9604|
00257c  e3a00000          MOV      r0,#0                 ;1192
002580  eaffffc9          B        |L1.9388|
                  |L1.9604|
002584  e1a00000          MOV      r0,r0                 ;1192
002588  e1a00005          MOV      r0,r5                 ;1193
00258c  ebfffffe          BL       _get_desc_vc
002590  e1a0b000          MOV      r11,r0                ;1193
002594  e5db0014          LDRB     r0,[r11,#0x14]        ;1194
002598  e58d0000          STR      r0,[sp,#0]            ;1194
00259c  e1a00004          MOV      r0,r4                 ;1197
0025a0  e59d1004          LDR      r1,[sp,#4]            ;1197
0025a4  ebfffffe          BL       _next_desc_itf
0025a8  e1a07000          MOV      r7,r0                 ;1197
0025ac  e3a09000          MOV      r9,#0                 ;1198
0025b0  ea00002d          B        |L1.9836|
                  |L1.9652|
0025b4  e3a08000          MOV      r8,#0                 ;1199
0025b8  e3a00000          MOV      r0,#0                 ;1201
0025bc  ea00000f          B        |L1.9728|
                  |L1.9664|
0025c0  e0801180          ADD      r1,r0,r0,LSL #3       ;1202
0025c4  e51f2c00          LDR      r2,|L1.6604|
0025c8  e0821281          ADD      r1,r2,r1,LSL #5       ;1202
0025cc  e1d110b2          LDRH     r1,[r1,#2]            ;1202
0025d0  e3510000          CMP      r1,#0                 ;1202
0025d4  0a000000          BEQ      |L1.9692|
0025d8  ea000005          B        |L1.9716|
                  |L1.9692|
0025dc  e0801180          ADD      r1,r0,r0,LSL #3       ;1204
0025e0  e51f2c1c          LDR      r2,|L1.6604|
0025e4  e0828281          ADD      r8,r2,r1,LSL #5       ;1204
0025e8  e2851008          ADD      r1,r5,#8              ;1205
0025ec  e7c10009          STRB     r0,[r1,r9]            ;1205
0025f0  ea000004          B        |L1.9736|
                  |L1.9716|
0025f4  e1a00000          MOV      r0,r0                 ;1203
0025f8  e2801001          ADD      r1,r0,#1              ;1201
0025fc  e20100ff          AND      r0,r1,#0xff           ;1201
                  |L1.9728|
002600  e3500001          CMP      r0,#1                 ;1201
002604  baffffed          BLT      |L1.9664|
                  |L1.9736|
002608  e1a00000          MOV      r0,r0                 ;1206
00260c  e1a00000          MOV      r0,r0                 ;1208
002610  e3580000          CMP      r8,#0                 ;1208
002614  1a000007          BNE      |L1.9784|
002618  e59f2434          LDR      r2,|L1.10836|
00261c  e59f142c          LDR      r1,|L1.10832|
002620  e59f0430          LDR      r0,|L1.10840|
002624  ebfffffe          BL       __2printf
002628  e1a00000          MOV      r0,r0                 ;1208
00262c  e1a00000          MOV      r0,r0                 ;1208
002630  e3a00000          MOV      r0,#0                 ;1208
002634  eaffff9c          B        |L1.9388|
                  |L1.9784|
002638  e1a00000          MOV      r0,r0                 ;1208
00263c  e5c86000          STRB     r6,[r8,#0]            ;1211
002640  e5c89001          STRB     r9,[r8,#1]            ;1212
002644  e0470004          SUB      r0,r7,r4              ;1213
002648  e1c800b2          STRH     r0,[r8,#2]            ;1213
00264c  e1a00007          MOV      r0,r7                 ;1214
002650  e59d1004          LDR      r1,[sp,#4]            ;1214
002654  ebfffffe          BL       _next_desc_itf
002658  e1a07000          MOV      r7,r0                 ;1214
00265c  e0470004          SUB      r0,r7,r4              ;1215
002660  e1c800b4          STRH     r0,[r8,#4]            ;1215
002664  e2890001          ADD      r0,r9,#1              ;1198
002668  e20090ff          AND      r9,r0,#0xff           ;1198
                  |L1.9836|
00266c  e59d0000          LDR      r0,[sp,#0]            ;1198
002670  e1590000          CMP      r9,r0                 ;1198
002674  3affffce          BCC      |L1.9652|
002678  e0470004          SUB      r0,r7,r4              ;1217
00267c  e1a00800          LSL      r0,r0,#16             ;1217
002680  e1a00820          LSR      r0,r0,#16             ;1217
002684  e5c50004          STRB     r0,[r5,#4]            ;1217
002688  e1a00420          LSR      r0,r0,#8              ;1217
00268c  e5c50005          STRB     r0,[r5,#5]            ;1217
002690  e0470004          SUB      r0,r7,r4              ;1218
002694  e1a00800          LSL      r0,r0,#16             ;1218
002698  e1a00820          LSR      r0,r0,#16             ;1218
00269c  eaffff82          B        |L1.9388|
;;;1220   
                          ENDP

                  videod_control_xfer_cb PROC
;;;1223   // return false to stall control endpoint (e.g unsupported request)
;;;1224   bool videod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
0026a0  e92d5ff0          PUSH     {r4-r12,lr}
;;;1225   {
0026a4  e1a0a000          MOV      r10,r0
0026a8  e1a0b001          MOV      r11,r1
0026ac  e1a07002          MOV      r7,r2
;;;1226     int err;
;;;1227     TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
0026b0  e1a00000          MOV      r0,r0
0026b4  e5d70000          LDRB     r0,[r7,#0]
0026b8  e200001f          AND      r0,r0,#0x1f
0026bc  e3500001          CMP      r0,#1
0026c0  0a000001          BEQ      |L1.9932|
0026c4  e3a00000          MOV      r0,#0
                  |L1.9928|
;;;1228     uint_fast8_t itfnum = tu_u16_low(request->wIndex);
;;;1229   
;;;1230     /* Identify which control interface to use */
;;;1231     uint_fast8_t itf;
;;;1232     for (itf = 0; itf < CFG_TUD_VIDEO; ++itf) {
;;;1233       void const *desc = _videod_itf[itf].beg;
;;;1234       if (!desc) 
;;;1235   			continue;
;;;1236       if (itfnum == _desc_itfnum(desc)) 
;;;1237   			break;
;;;1238     }
;;;1239   
;;;1240     if (itf < CFG_TUD_VIDEO) {
;;;1241       err = handle_video_ctl_req(rhport, stage, request, itf);
;;;1242       _videod_itf[itf].error_code = (uint8_t)err;
;;;1243       if (err) 
;;;1244   			return false;
;;;1245       return true;
;;;1246     }
;;;1247   
;;;1248     /* Identify which streaming interface to use */
;;;1249     for (itf = 0; itf < CFG_TUD_VIDEO_STREAMING; ++itf) {
;;;1250       videod_streaming_interface_t *stm = &_videod_streaming_itf[itf];
;;;1251       if (!stm->desc.beg) continue;
;;;1252       uint8_t const *desc = _videod_itf[stm->index_vc].beg;
;;;1253       if (itfnum == _desc_itfnum(desc + stm->desc.beg)) break;
;;;1254     }
;;;1255   
;;;1256     if (itf < CFG_TUD_VIDEO_STREAMING) {
;;;1257       err = handle_video_stm_req(rhport, stage, request, itf);
;;;1258       _videod_streaming_itf[itf].error_code = (uint8_t)err;
;;;1259       if (err) return false;
;;;1260       return true;
;;;1261     }
;;;1262     return false;
;;;1263   }
0026c8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9932|
0026cc  e1a00000          MOV      r0,r0                 ;1227
0026d0  e5d71005          LDRB     r1,[r7,#5]            ;1228
0026d4  e5d72004          LDRB     r2,[r7,#4]            ;1228
0026d8  e1820401          ORR      r0,r2,r1,LSL #8       ;1228
0026dc  e20060ff          AND      r6,r0,#0xff           ;1228
0026e0  e1a00000          MOV      r0,r0                 ;1228
0026e4  e3a04000          MOV      r4,#0                 ;1232
0026e8  ea00000f          B        |L1.10028|
                  |L1.9964|
0026ec  e0841084          ADD      r1,r4,r4,LSL #1       ;1233
0026f0  e0811184          ADD      r1,r1,r4,LSL #3       ;1233
0026f4  e51f2d34          LDR      r2,|L1.6600|
0026f8  e0810002          ADD      r0,r1,r2              ;1233
0026fc  ebfffffe          BL       __aeabi_uread4
002700  e1a08000          MOV      r8,r0                 ;1233
002704  e3580000          CMP      r8,#0                 ;1234
002708  1a000000          BNE      |L1.10000|
00270c  ea000005          B        |L1.10024|
                  |L1.10000|
002710  e1a00008          MOV      r0,r8                 ;1236
002714  ebfffffe          BL       _desc_itfnum
002718  e1500006          CMP      r0,r6                 ;1236
00271c  1a000000          BNE      |L1.10020|
002720  ea000003          B        |L1.10036|
                  |L1.10020|
002724  e1a00000          MOV      r0,r0                 ;1235
                  |L1.10024|
002728  e2844001          ADD      r4,r4,#1              ;1232
                  |L1.10028|
00272c  e3540000          CMP      r4,#0                 ;1232
002730  0affffed          BEQ      |L1.9964|
                  |L1.10036|
002734  e1a00000          MOV      r0,r0                 ;1237
002738  e3540000          CMP      r4,#0                 ;1240
00273c  1a000010          BNE      |L1.10116|
002740  e1a03004          MOV      r3,r4                 ;1241
002744  e1a02007          MOV      r2,r7                 ;1241
002748  e1a0100b          MOV      r1,r11                ;1241
00274c  e1a0000a          MOV      r0,r10                ;1241
002750  ebfffffe          BL       handle_video_ctl_req
002754  e1a05000          MOV      r5,r0                 ;1241
002758  e0841084          ADD      r1,r4,r4,LSL #1       ;1242
00275c  e0811184          ADD      r1,r1,r4,LSL #3       ;1242
002760  e51f2da0          LDR      r2,|L1.6600|
002764  e0811002          ADD      r1,r1,r2              ;1242
002768  e5c15009          STRB     r5,[r1,#9]            ;1242
00276c  e3550000          CMP      r5,#0                 ;1243
002770  0a000001          BEQ      |L1.10108|
002774  e3a00000          MOV      r0,#0                 ;1244
002778  eaffffd2          B        |L1.9928|
                  |L1.10108|
00277c  e3a00001          MOV      r0,#1                 ;1245
002780  eaffffd0          B        |L1.9928|
                  |L1.10116|
002784  e3a04000          MOV      r4,#0                 ;1249
002788  ea000015          B        |L1.10212|
                  |L1.10124|
00278c  e0840184          ADD      r0,r4,r4,LSL #3       ;1250
002790  e51f1dcc          LDR      r1,|L1.6604|
002794  e0818280          ADD      r8,r1,r0,LSL #5       ;1250
002798  e1d800b2          LDRH     r0,[r8,#2]            ;1251
00279c  e3500000          CMP      r0,#0                 ;1251
0027a0  1a000000          BNE      |L1.10152|
0027a4  ea00000d          B        |L1.10208|
                  |L1.10152|
0027a8  e5d81000          LDRB     r1,[r8,#0]            ;1252
0027ac  e0812081          ADD      r2,r1,r1,LSL #1       ;1252
0027b0  e0821181          ADD      r1,r2,r1,LSL #3       ;1252
0027b4  e51f2df4          LDR      r2,|L1.6600|
0027b8  e0810002          ADD      r0,r1,r2              ;1252
0027bc  ebfffffe          BL       __aeabi_uread4
0027c0  e1a09000          MOV      r9,r0                 ;1252
0027c4  e1d810b2          LDRH     r1,[r8,#2]            ;1253
0027c8  e0810009          ADD      r0,r1,r9              ;1253
0027cc  ebfffffe          BL       _desc_itfnum
0027d0  e1500006          CMP      r0,r6                 ;1253
0027d4  1a000000          BNE      |L1.10204|
0027d8  ea000003          B        |L1.10220|
                  |L1.10204|
0027dc  e1a00000          MOV      r0,r0                 ;1251
                  |L1.10208|
0027e0  e2844001          ADD      r4,r4,#1              ;1249
                  |L1.10212|
0027e4  e3540000          CMP      r4,#0                 ;1249
0027e8  0affffe7          BEQ      |L1.10124|
                  |L1.10220|
0027ec  e1a00000          MOV      r0,r0                 ;1253
0027f0  e3540000          CMP      r4,#0                 ;1256
0027f4  1a00000f          BNE      |L1.10296|
0027f8  e1a03004          MOV      r3,r4                 ;1257
0027fc  e1a02007          MOV      r2,r7                 ;1257
002800  e1a0100b          MOV      r1,r11                ;1257
002804  e1a0000a          MOV      r0,r10                ;1257
002808  ebfffffe          BL       handle_video_stm_req
00280c  e1a05000          MOV      r5,r0                 ;1257
002810  e0841184          ADD      r1,r4,r4,LSL #3       ;1258
002814  e51f2e50          LDR      r2,|L1.6604|
002818  e0821281          ADD      r1,r2,r1,LSL #5       ;1258
00281c  e5c1501c          STRB     r5,[r1,#0x1c]         ;1258
002820  e3550000          CMP      r5,#0                 ;1259
002824  0a000001          BEQ      |L1.10288|
002828  e3a00000          MOV      r0,#0                 ;1259
00282c  eaffffa5          B        |L1.9928|
                  |L1.10288|
002830  e3a00001          MOV      r0,#1                 ;1260
002834  eaffffa3          B        |L1.9928|
                  |L1.10296|
002838  e3a00000          MOV      r0,#0                 ;1262
00283c  eaffffa1          B        |L1.9928|
;;;1264   
                          ENDP

                  videod_xfer_cb PROC
;;;1265   bool videod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
002840  e92d5ff0          PUSH     {r4-r12,lr}
;;;1266   {
002844  e1a09000          MOV      r9,r0
002848  e1a07001          MOV      r7,r1
00284c  e1a0a002          MOV      r10,r2
;;;1267     (void)result; (void)xferred_bytes;
;;;1268   
;;;1269     /* find streaming handle */
;;;1270     uint_fast8_t itf;
;;;1271     videod_interface_t *ctl;
;;;1272     videod_streaming_interface_t *stm;
;;;1273     for (itf = 0; itf < CFG_TUD_VIDEO_STREAMING; ++itf) {
002850  e3a05000          MOV      r5,#0
002854  ea000015          B        |L1.10416|
                  |L1.10328|
;;;1274       stm = &_videod_streaming_itf[itf];
002858  e0850185          ADD      r0,r5,r5,LSL #3
00285c  e51f1e98          LDR      r1,|L1.6604|
002860  e0814280          ADD      r4,r1,r0,LSL #5
;;;1275       uint_fast16_t const ep_ofs = stm->desc.ep[0];
002864  e1d4b0b8          LDRH     r11,[r4,#8]
;;;1276       if (!ep_ofs) 
002868  e35b0000          CMP      r11,#0
00286c  1a000000          BNE      |L1.10356|
;;;1277   			continue;
002870  ea00000d          B        |L1.10412|
                  |L1.10356|
;;;1278       ctl = &_videod_itf[stm->index_vc];
002874  e5d40000          LDRB     r0,[r4,#0]
002878  e0801080          ADD      r1,r0,r0,LSL #1
00287c  e0810180          ADD      r0,r1,r0,LSL #3
002880  e51f1ec0          LDR      r1,|L1.6600|
002884  e0808001          ADD      r8,r0,r1
;;;1279       uint8_t const *desc = ctl->beg;
002888  e1a00008          MOV      r0,r8
00288c  ebfffffe          BL       __aeabi_uread4
002890  e1a06000          MOV      r6,r0
;;;1280       if (ep_addr == _desc_ep_addr(desc + ep_ofs)) 
002894  e086000b          ADD      r0,r6,r11
002898  e5d01002          LDRB     r1,[r0,#2]
00289c  e1510007          CMP      r1,r7
0028a0  1a000000          BNE      |L1.10408|
;;;1281   			break;
0028a4  ea000003          B        |L1.10424|
                  |L1.10408|
0028a8  e1a00000          MOV      r0,r0                 ;1277
                  |L1.10412|
0028ac  e2855001          ADD      r5,r5,#1              ;1273
                  |L1.10416|
0028b0  e3550000          CMP      r5,#0                 ;1273
0028b4  0affffe7          BEQ      |L1.10328|
                  |L1.10424|
0028b8  e1a00000          MOV      r0,r0
;;;1282     }
;;;1283   
;;;1284     TU_ASSERT(itf < CFG_TUD_VIDEO_STREAMING);
0028bc  e1a00000          MOV      r0,r0
0028c0  e3550000          CMP      r5,#0
0028c4  0a000007          BEQ      |L1.10472|
0028c8  e59f218c          LDR      r2,|L1.10844|
0028cc  e59f118c          LDR      r1,|L1.10848|
0028d0  e59f0180          LDR      r0,|L1.10840|
0028d4  ebfffffe          BL       __2printf
0028d8  e1a00000          MOV      r0,r0
0028dc  e1a00000          MOV      r0,r0
0028e0  e3a00000          MOV      r0,#0
                  |L1.10468|
;;;1285     if (stm->offset < stm->bufsize) {
;;;1286       /* Claim the endpoint */
;;;1287       TU_VERIFY( usbd_edpt_claim(rhport, ep_addr), 0);
;;;1288       uint_fast16_t pkt_len = _prepare_in_payload(stm);
;;;1289       TU_ASSERT( usbd_edpt_xfer(rhport, ep_addr, stm->ep_buf, (uint16_t) pkt_len), 0);
;;;1290     } else {
;;;1291       stm->buffer  = NULL;
;;;1292       stm->bufsize = 0;
;;;1293       stm->offset  = 0;
;;;1294       if (tud_video_frame_xfer_complete_cb) {
;;;1295         tud_video_frame_xfer_complete_cb(stm->index_vc, stm->index_vs);
;;;1296       }
;;;1297     }
;;;1298     return true;
;;;1299   }
0028e4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.10472|
0028e8  e1a00000          MOV      r0,r0                 ;1284
0028ec  e5940014          LDR      r0,[r4,#0x14]         ;1285
0028f0  e5941010          LDR      r1,[r4,#0x10]         ;1285
0028f4  e1500001          CMP      r0,r1                 ;1285
0028f8  2a00001e          BCS      |L1.10616|
0028fc  e1a00000          MOV      r0,r0                 ;1287
002900  e1a01007          MOV      r1,r7                 ;1287
002904  e1a00009          MOV      r0,r9                 ;1287
002908  ebfffffe          BL       usbd_edpt_claim
00290c  e3500000          CMP      r0,#0                 ;1287
002910  1a000001          BNE      |L1.10524|
002914  e3a00000          MOV      r0,#0                 ;1287
002918  eafffff1          B        |L1.10468|
                  |L1.10524|
00291c  e1a00000          MOV      r0,r0                 ;1287
002920  e1a00004          MOV      r0,r4                 ;1288
002924  ebfffffe          BL       _prepare_in_payload
002928  e1a06000          MOV      r6,r0                 ;1288
00292c  e1a00000          MOV      r0,r0                 ;1289
002930  e1a03806          LSL      r3,r6,#16             ;1289
002934  e1a03823          LSR      r3,r3,#16             ;1289
002938  e2842020          ADD      r2,r4,#0x20           ;1289
00293c  e1a01007          MOV      r1,r7                 ;1289
002940  e1a00009          MOV      r0,r9                 ;1289
002944  ebfffffe          BL       usbd_edpt_xfer
002948  e3500000          CMP      r0,#0                 ;1289
00294c  1a000007          BNE      |L1.10608|
002950  e59f210c          LDR      r2,|L1.10852|
002954  e59f1104          LDR      r1,|L1.10848|
002958  e59f00f8          LDR      r0,|L1.10840|
00295c  ebfffffe          BL       __2printf
002960  e1a00000          MOV      r0,r0                 ;1289
002964  e1a00000          MOV      r0,r0                 ;1289
002968  e3a00000          MOV      r0,#0                 ;1289
00296c  eaffffdc          B        |L1.10468|
                  |L1.10608|
002970  e1a00000          MOV      r0,r0                 ;1289
002974  ea000009          B        |L1.10656|
                  |L1.10616|
002978  e3a00000          MOV      r0,#0                 ;1291
00297c  e584000c          STR      r0,[r4,#0xc]          ;1291
002980  e5840010          STR      r0,[r4,#0x10]         ;1292
002984  e5840014          STR      r0,[r4,#0x14]         ;1293
002988  e59f00d8          LDR      r0,|L1.10856|
00298c  e3500000          CMP      r0,#0                 ;1294
002990  0a000002          BEQ      |L1.10656|
002994  e5d41001          LDRB     r1,[r4,#1]            ;1295
002998  e5d40000          LDRB     r0,[r4,#0]            ;1295
00299c  ebfffffe          BL       tud_video_frame_xfer_complete_cb
                  |L1.10656|
0029a0  e3a00001          MOV      r0,#1                 ;1298
0029a4  eaffffce          B        |L1.10468|
;;;1300   
                          ENDP

                  _desc_itfnum PROC
;;;138     * @return bInterfaceNumber */
;;;139    static inline uint8_t _desc_itfnum(void const *desc)
0029a8  e1a01000          MOV      r1,r0
;;;140    {
;;;141      return ((uint8_t const*)desc)[2];
0029ac  e5d10002          LDRB     r0,[r1,#2]
;;;142    }
0029b0  e12fff1e          BX       lr
;;;143    
                          ENDP

                  _find_desc_itf PROC
;;;252     * @retval end   did not found interface descriptor */
;;;253    static inline uint8_t const* _find_desc_itf(void const *beg, void const *end, uint_fast8_t itfnum, uint_fast8_t altnum)
0029b4  e92d40f8          PUSH     {r3-r7,lr}
;;;254    {
0029b8  e1a06000          MOV      r6,r0
0029bc  e1a07001          MOV      r7,r1
0029c0  e1a04002          MOV      r4,r2
0029c4  e1a05003          MOV      r5,r3
;;;255      return (uint8_t const*) _find_desc_3(beg, end, TUSB_DESC_INTERFACE, itfnum, altnum);
0029c8  e1a03004          MOV      r3,r4
0029cc  e3a02004          MOV      r2,#4
0029d0  e1a01007          MOV      r1,r7
0029d4  e1a00006          MOV      r0,r6
0029d8  e58d5000          STR      r5,[sp,#0]
0029dc  ebfffffe          BL       _find_desc_3
;;;256    }
0029e0  e8bd80f8          POP      {r3-r7,pc}
;;;257    
                          ENDP

                  _end_of_control_descriptor PROC
;;;279    /** Return the end of the video control descriptor. */
;;;280    static inline void const* _end_of_control_descriptor(void const *desc)
0029e4  e1a01000          MOV      r1,r0
;;;281    {
;;;282      tusb_desc_vc_itf_t const *vc = (tusb_desc_vc_itf_t const *)desc;
0029e8  e1a02001          MOV      r2,r1
;;;283      return ((uint8_t const*) desc) + vc->std.bLength + tu_le16toh(vc->ctl.wTotalLength);
0029ec  e5d20000          LDRB     r0,[r2,#0]
0029f0  e0800001          ADD      r0,r0,r1
0029f4  e5d2300f          LDRB     r3,[r2,#0xf]
0029f8  e5d2c00e          LDRB     r12,[r2,#0xe]
0029fc  e18c3403          ORR      r3,r12,r3,LSL #8
002a00  e0800003          ADD      r0,r0,r3
;;;284    }
002a04  e12fff1e          BX       lr
;;;285    
                          ENDP

                  _end_of_streaming_descriptor PROC
;;;309    /** Return the end of the video streaming descriptor. */
;;;310    static inline void const* _end_of_streaming_descriptor(void const *desc)
002a08  e1a01000          MOV      r1,r0
;;;311    {
;;;312      tusb_desc_vs_itf_t const *vs = (tusb_desc_vs_itf_t const *)desc;
002a0c  e1a02001          MOV      r2,r1
;;;313      return ((uint8_t const*) desc) + vs->std.bLength + tu_le16toh(vs->stm.wTotalLength);
002a10  e5d20000          LDRB     r0,[r2,#0]
002a14  e0800001          ADD      r0,r0,r1
002a18  e5d2300e          LDRB     r3,[r2,#0xe]
002a1c  e5d2c00d          LDRB     r12,[r2,#0xd]
002a20  e18c3403          ORR      r3,r12,r3,LSL #8
002a24  e0800003          ADD      r0,r0,r3
;;;314    }
002a28  e12fff1e          BX       lr
;;;315    
                          ENDP

                  |L1.10796|
                          DCD      tud_video_commit_cb
                  |L1.10800|
                          DCD      0x00000437
                  |L1.10804|
                          DCD      |symbol_number.23|
                  |L1.10808|
                          DCD      0x00000441
                  |L1.10812|
                          DCD      |symbol_number.24|
                  |L1.10816|
                          DCD      0x00000442
                  |L1.10820|
                          DCD      0x0000044f
                  |L1.10824|
                          DCD      |symbol_number.25|
                  |L1.10828|
                          DCD      0x0000046d
                  |L1.10832|
                          DCD      |symbol_number.26|
                  |L1.10836|
                          DCD      0x000004b8
                  |L1.10840|
                          DCD      ||.text||+0x744
                  |L1.10844|
                          DCD      0x00000504
                  |L1.10848|
                          DCD      |symbol_number.27|
                  |L1.10852|
                          DCD      0x00000509
                  |L1.10856|
                          DCD      tud_video_frame_xfer_complete_cb

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _videod_itf
                          %        12
                  _videod_streaming_itf
                          %        288

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _cap_get
000000  01                DCB      0x01
                  _cap_get_set
000001  03                DCB      0x03
                  __func__
000002  5f75              DCB      0x5f,0x75
000004  70646174          DCB      0x70,0x64,0x61,0x74
000008  655f7374          DCB      0x65,0x5f,0x73,0x74
00000c  7265616d          DCB      0x72,0x65,0x61,0x6d
000010  696e675f          DCB      0x69,0x6e,0x67,0x5f
000014  70617261          DCB      0x70,0x61,0x72,0x61
000018  6d657465          DCB      0x6d,0x65,0x74,0x65
00001c  727300            DCB      0x72,0x73,0x00
                  |symbol_number.19|
00001f  5f                DCB      0x5f
000020  6e65676f          DCB      0x6e,0x65,0x67,0x6f
000024  74696174          DCB      0x74,0x69,0x61,0x74
000028  655f7374          DCB      0x65,0x5f,0x73,0x74
00002c  7265616d          DCB      0x72,0x65,0x61,0x6d
000030  696e675f          DCB      0x69,0x6e,0x67,0x5f
000034  70617261          DCB      0x70,0x61,0x72,0x61
000038  6d657465          DCB      0x6d,0x65,0x74,0x65
00003c  727300            DCB      0x72,0x73,0x00
                  |symbol_number.20|
00003f  5f                DCB      0x5f
000040  636c6f73          DCB      0x63,0x6c,0x6f,0x73
000044  655f7663          DCB      0x65,0x5f,0x76,0x63
000048  5f697466          DCB      0x5f,0x69,0x74,0x66
00004c  00                DCB      0x00
                  |symbol_number.21|
00004d  5f6f70            DCB      0x5f,0x6f,0x70
000050  656e5f76          DCB      0x65,0x6e,0x5f,0x76
000054  635f6974          DCB      0x63,0x5f,0x69,0x74
000058  6600              DCB      0x66,0x00
                  |symbol_number.22|
00005a  5f6f              DCB      0x5f,0x6f
00005c  70656e5f          DCB      0x70,0x65,0x6e,0x5f
000060  76735f69          DCB      0x76,0x73,0x5f,0x69
000064  746600            DCB      0x74,0x66,0x00
                  |symbol_number.23|
000067  74                DCB      0x74
000068  75645f76          DCB      0x75,0x64,0x5f,0x76
00006c  6964656f          DCB      0x69,0x64,0x65,0x6f
000070  5f6e5f63          DCB      0x5f,0x6e,0x5f,0x63
000074  6f6e6e65          DCB      0x6f,0x6e,0x6e,0x65
000078  63746564          DCB      0x63,0x74,0x65,0x64
00007c  00                DCB      0x00
                  |symbol_number.24|
00007d  747564            DCB      0x74,0x75,0x64
000080  5f766964          DCB      0x5f,0x76,0x69,0x64
000084  656f5f6e          DCB      0x65,0x6f,0x5f,0x6e
000088  5f737472          DCB      0x5f,0x73,0x74,0x72
00008c  65616d69          DCB      0x65,0x61,0x6d,0x69
000090  6e6700            DCB      0x6e,0x67,0x00
                  |symbol_number.25|
000093  74                DCB      0x74
000094  75645f76          DCB      0x75,0x64,0x5f,0x76
000098  6964656f          DCB      0x69,0x64,0x65,0x6f
00009c  5f6e5f66          DCB      0x5f,0x6e,0x5f,0x66
0000a0  72616d65          DCB      0x72,0x61,0x6d,0x65
0000a4  5f786665          DCB      0x5f,0x78,0x66,0x65
0000a8  7200              DCB      0x72,0x00
                  |symbol_number.26|
0000aa  7669              DCB      0x76,0x69
0000ac  64656f64          DCB      0x64,0x65,0x6f,0x64
0000b0  5f6f7065          DCB      0x5f,0x6f,0x70,0x65
0000b4  6e00              DCB      0x6e,0x00
                  |symbol_number.27|
0000b6  7669              DCB      0x76,0x69
0000b8  64656f64          DCB      0x64,0x65,0x6f,0x64
0000bc  5f786665          DCB      0x5f,0x78,0x66,0x65
0000c0  725f6362          DCB      0x72,0x5f,0x63,0x62
0000c4  00                DCB      0x00
