; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usbd_control.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usbd_control.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usbd_control.crf ..\tinyusb\src\device\usbd_control.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  _status_stage_xact PROC
;;;68     // Queue ZLP status transaction
;;;69     static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;70     {
000004  e1a05000          MOV      r5,r0
000008  e1a04001          MOV      r4,r1
;;;71       // Opposite to endpoint in Data Phase
;;;72       uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
00000c  e5d40000          LDRB     r0,[r4,#0]
000010  e1a003a0          LSR      r0,r0,#7
000014  e3500000          CMP      r0,#0
000018  0a000001          BEQ      |L1.36|
00001c  e3a00000          MOV      r0,#0
000020  ea000000          B        |L1.40|
                  |L1.36|
000024  e3a00080          MOV      r0,#0x80
                  |L1.40|
000028  e1a06000          MOV      r6,r0
;;;73       return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
00002c  e3a03000          MOV      r3,#0
000030  e1a02003          MOV      r2,r3
000034  e1a01006          MOV      r1,r6
000038  e1a00005          MOV      r0,r5
00003c  ebfffffe          BL       usbd_edpt_xfer
;;;74     }
000040  e8bd8070          POP      {r4-r6,pc}
;;;75     
                          ENDP

                  tud_control_status PROC
;;;76     // Status phase
;;;77     bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
000044  e92d4070          PUSH     {r4-r6,lr}
;;;78     {
000048  e1a04000          MOV      r4,r0
00004c  e1a05001          MOV      r5,r1
;;;79       _ctrl_xfer.request       = (*request);
000050  e3a02008          MOV      r2,#8
000054  e1a01005          MOV      r1,r5
000058  e59f0488          LDR      r0,|L1.1256|
00005c  ebfffffe          BL       __aeabi_memcpy
;;;80       _ctrl_xfer.buffer        = NULL;
000060  e3a00000          MOV      r0,#0
000064  e59f147c          LDR      r1,|L1.1256|
000068  e5810008          STR      r0,[r1,#8]  ; _ctrl_xfer
;;;81       _ctrl_xfer.total_xferred = 0;
00006c  e1c100be          STRH     r0,[r1,#0xe]  ; _ctrl_xfer
;;;82       _ctrl_xfer.data_len      = 0;
000070  e1c100bc          STRH     r0,[r1,#0xc]  ; _ctrl_xfer
;;;83     
;;;84       return _status_stage_xact(rhport, request);
000074  e1a01005          MOV      r1,r5
000078  e1a00004          MOV      r0,r4
00007c  ebfffffe          BL       _status_stage_xact
;;;85     }
000080  e8bd8070          POP      {r4-r6,pc}
;;;86     
                          ENDP

                  _data_stage_xact PROC
;;;89     // This function can also transfer an zero-length packet
;;;90     static bool _data_stage_xact(uint8_t rhport)
000084  e92d47f0          PUSH     {r4-r10,lr}
;;;91     {
000088  e1a0a000          MOV      r10,r0
;;;92       uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
00008c  e59f2454          LDR      r2,|L1.1256|
000090  e1d220bc          LDRH     r2,[r2,#0xc]  ; _ctrl_xfer
000094  e59f344c          LDR      r3,|L1.1256|
000098  e1d330be          LDRH     r3,[r3,#0xe]  ; _ctrl_xfer
00009c  e0422003          SUB      r2,r2,r3
0000a0  e1a00802          LSL      r0,r2,#16
0000a4  e1a00820          LSR      r0,r0,#16
0000a8  e3a01040          MOV      r1,#0x40
0000ac  e1500001          CMP      r0,r1
0000b0  aa000001          BGE      |L1.188|
0000b4  e1a02000          MOV      r2,r0
0000b8  ea000000          B        |L1.192|
                  |L1.188|
0000bc  e1a02001          MOV      r2,r1
                  |L1.192|
0000c0  e1a04002          MOV      r4,r2
0000c4  e1a00000          MOV      r0,r0
;;;93     
;;;94       uint8_t ep_addr = EDPT_CTRL_OUT;
0000c8  e3a06000          MOV      r6,#0
;;;95     
;;;96       if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
0000cc  e59f0414          LDR      r0,|L1.1256|
0000d0  e5d00000          LDRB     r0,[r0,#0]  ; _ctrl_xfer
0000d4  e3a01001          MOV      r1,#1
0000d8  e15103a0          CMP      r1,r0,LSR #7
0000dc  1a000017          BNE      |L1.320|
;;;97       {
;;;98         ep_addr = EDPT_CTRL_IN;
0000e0  e3a06080          MOV      r6,#0x80
;;;99         if ( xact_len ) {
0000e4  e3540000          CMP      r4,#0
0000e8  0a000014          BEQ      |L1.320|
;;;100          TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
0000ec  e1a00000          MOV      r0,r0
0000f0  e59f73f4          LDR      r7,|L1.1260|
0000f4  e3a08040          MOV      r8,#0x40
0000f8  e59f03e8          LDR      r0,|L1.1256|
0000fc  e1a05004          MOV      r5,r4
000100  e5909008          LDR      r9,[r0,#8]  ; _ctrl_xfer
000104  e1550008          CMP      r5,r8
000108  9a000001          BLS      |L1.276|
00010c  e3e00000          MVN      r0,#0
000110  ea000004          B        |L1.296|
                  |L1.276|
000114  e1a02005          MOV      r2,r5
000118  e1a01009          MOV      r1,r9
00011c  e1a00007          MOV      r0,r7
000120  ebfffffe          BL       __aeabi_memcpy
000124  e3a00000          MOV      r0,#0
                  |L1.296|
000128  e1a00000          MOV      r0,r0
00012c  e3500000          CMP      r0,#0
000130  0a000001          BEQ      |L1.316|
000134  e3a00000          MOV      r0,#0
                  |L1.312|
;;;101        }
;;;102      }
;;;103    
;;;104      return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
;;;105    }
000138  e8bd87f0          POP      {r4-r10,pc}
                  |L1.316|
00013c  e1a00000          MOV      r0,r0                 ;100
                  |L1.320|
000140  e3540000          CMP      r4,#0                 ;104
000144  0a000001          BEQ      |L1.336|
000148  e59f039c          LDR      r0,|L1.1260|
00014c  ea000000          B        |L1.340|
                  |L1.336|
000150  e3a00000          MOV      r0,#0                 ;104
                  |L1.340|
000154  e1a02000          MOV      r2,r0                 ;104
000158  e1a03004          MOV      r3,r4                 ;104
00015c  e1a01006          MOV      r1,r6                 ;104
000160  e1a0000a          MOV      r0,r10                ;104
000164  ebfffffe          BL       usbd_edpt_xfer
000168  eafffff2          B        |L1.312|
;;;106    
                          ENDP

                  tud_control_xfer PROC
;;;108    // If the request's wLength is zero, a status packet is sent instead.
;;;109    bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
00016c  e92d41f0          PUSH     {r4-r8,lr}
;;;110    {
000170  e1a07000          MOV      r7,r0
000174  e1a04001          MOV      r4,r1
000178  e1a05002          MOV      r5,r2
00017c  e1a06003          MOV      r6,r3
;;;111      _ctrl_xfer.request       = (*request);
000180  e3a02008          MOV      r2,#8
000184  e1a01004          MOV      r1,r4
000188  e59f0358          LDR      r0,|L1.1256|
00018c  ebfffffe          BL       __aeabi_memcpy
;;;112      _ctrl_xfer.buffer        = (uint8_t*) buffer;
000190  e59f0350          LDR      r0,|L1.1256|
000194  e5805008          STR      r5,[r0,#8]  ; _ctrl_xfer
;;;113      _ctrl_xfer.total_xferred = 0U;
000198  e3a00000          MOV      r0,#0
00019c  e59f1344          LDR      r1,|L1.1256|
0001a0  e1c100be          STRH     r0,[r1,#0xe]  ; _ctrl_xfer
;;;114      _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
0001a4  e1a00006          MOV      r0,r6
0001a8  e5d42007          LDRB     r2,[r4,#7]
0001ac  e5d43006          LDRB     r3,[r4,#6]
0001b0  e1831402          ORR      r1,r3,r2,LSL #8
0001b4  e1500001          CMP      r0,r1
0001b8  aa000001          BGE      |L1.452|
0001bc  e1a02000          MOV      r2,r0
0001c0  ea000000          B        |L1.456|
                  |L1.452|
0001c4  e1a02001          MOV      r2,r1
                  |L1.456|
0001c8  e1a00000          MOV      r0,r0
0001cc  e59f0314          LDR      r0,|L1.1256|
0001d0  e1c020bc          STRH     r2,[r0,#0xc]  ; _ctrl_xfer
;;;115    
;;;116      if (request->wLength > 0U)
0001d4  e5d40007          LDRB     r0,[r4,#7]
0001d8  e5d41006          LDRB     r1,[r4,#6]
0001dc  e1810400          ORR      r0,r1,r0,LSL #8
0001e0  e3500000          CMP      r0,#0
0001e4  0a00001d          BEQ      |L1.608|
;;;117      {
;;;118        if(_ctrl_xfer.data_len > 0U)
0001e8  e59f02f8          LDR      r0,|L1.1256|
0001ec  e1d000bc          LDRH     r0,[r0,#0xc]  ; _ctrl_xfer
0001f0  e3500000          CMP      r0,#0
0001f4  0a00000b          BEQ      |L1.552|
;;;119        {
;;;120          TU_ASSERT(buffer);
0001f8  e1a00000          MOV      r0,r0
0001fc  e3550000          CMP      r5,#0
000200  1a000007          BNE      |L1.548|
000204  e3a02078          MOV      r2,#0x78
000208  e59f12e0          LDR      r1,|L1.1264|
00020c  e28f0e2e          ADR      r0,|L1.1268|
000210  ebfffffe          BL       __2printf
000214  e1a00000          MOV      r0,r0
000218  e1a00000          MOV      r0,r0
00021c  e3a00000          MOV      r0,#0
                  |L1.544|
;;;121        }
;;;122    
;;;123    //    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);
;;;124    
;;;125        // Data stage
;;;126        TU_ASSERT( _data_stage_xact(rhport) );
;;;127      }
;;;128      else
;;;129      {
;;;130        // Status stage
;;;131        TU_ASSERT( _status_stage_xact(rhport, request) );
;;;132      }
;;;133    
;;;134      return true;
;;;135    }
000220  e8bd81f0          POP      {r4-r8,pc}
                  |L1.548|
000224  e1a00000          MOV      r0,r0                 ;120
                  |L1.552|
000228  e1a00000          MOV      r0,r0                 ;126
00022c  e1a00007          MOV      r0,r7                 ;126
000230  ebfffffe          BL       _data_stage_xact
000234  e3500000          CMP      r0,#0                 ;126
000238  1a000007          BNE      |L1.604|
00023c  e3a0207e          MOV      r2,#0x7e              ;126
000240  e59f12a8          LDR      r1,|L1.1264|
000244  e28f0faa          ADR      r0,|L1.1268|
000248  ebfffffe          BL       __2printf
00024c  e1a00000          MOV      r0,r0                 ;126
000250  e1a00000          MOV      r0,r0                 ;126
000254  e3a00000          MOV      r0,#0                 ;126
000258  eafffff0          B        |L1.544|
                  |L1.604|
00025c  ea00000e          B        |L1.668|
                  |L1.608|
000260  e1a00000          MOV      r0,r0                 ;131
000264  e1a01004          MOV      r1,r4                 ;131
000268  e1a00007          MOV      r0,r7                 ;131
00026c  ebfffffe          BL       _status_stage_xact
000270  e3500000          CMP      r0,#0                 ;131
000274  1a000007          BNE      |L1.664|
000278  e3a02083          MOV      r2,#0x83              ;131
00027c  e59f126c          LDR      r1,|L1.1264|
000280  e28f0f9b          ADR      r0,|L1.1268|
000284  ebfffffe          BL       __2printf
000288  e1a00000          MOV      r0,r0                 ;131
00028c  e1a00000          MOV      r0,r0                 ;131
000290  e3a00000          MOV      r0,#0                 ;131
000294  eaffffe1          B        |L1.544|
                  |L1.664|
000298  e1a00000          MOV      r0,r0                 ;131
                  |L1.668|
00029c  e3a00001          MOV      r0,#1                 ;134
0002a0  eaffffde          B        |L1.544|
;;;136    
                          ENDP

                  usbd_control_reset PROC
;;;145    
;;;146    void usbd_control_reset(void)
0002a4  e92d4010          PUSH     {r4,lr}
;;;147    {
;;;148      tu_varclr(&_ctrl_xfer);
0002a8  e3a01014          MOV      r1,#0x14
0002ac  e59f0234          LDR      r0,|L1.1256|
0002b0  ebfffffe          BL       __aeabi_memclr4
;;;149    }
0002b4  e8bd8010          POP      {r4,pc}
;;;150    
                          ENDP

                  usbd_control_set_complete_callback PROC
;;;151    // Set complete callback
;;;152    void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
0002b8  e59f1228          LDR      r1,|L1.1256|
;;;153    {
;;;154      _ctrl_xfer.complete_cb = fp;
0002bc  e5810010          STR      r0,[r1,#0x10]  ; _ctrl_xfer
;;;155    }
0002c0  e12fff1e          BX       lr
;;;156    
                          ENDP

                  usbd_control_set_request PROC
;;;157    // for dcd_set_address where DCD is responsible for status response
;;;158    void usbd_control_set_request(tusb_control_request_t const *request)
0002c4  e92d4010          PUSH     {r4,lr}
;;;159    {
0002c8  e1a04000          MOV      r4,r0
;;;160      _ctrl_xfer.request       = (*request);
0002cc  e3a02008          MOV      r2,#8
0002d0  e1a01004          MOV      r1,r4
0002d4  e59f020c          LDR      r0,|L1.1256|
0002d8  ebfffffe          BL       __aeabi_memcpy
;;;161      _ctrl_xfer.buffer        = NULL;
0002dc  e3a00000          MOV      r0,#0
0002e0  e59f1200          LDR      r1,|L1.1256|
0002e4  e5810008          STR      r0,[r1,#8]  ; _ctrl_xfer
;;;162      _ctrl_xfer.total_xferred = 0;
0002e8  e1c100be          STRH     r0,[r1,#0xe]  ; _ctrl_xfer
;;;163      _ctrl_xfer.data_len      = 0;
0002ec  e1c100bc          STRH     r0,[r1,#0xc]  ; _ctrl_xfer
;;;164    }
0002f0  e8bd8010          POP      {r4,pc}
;;;165    
                          ENDP

                  usbd_control_xfer_cb PROC
;;;168    // - Status stage
;;;169    bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
0002f4  e92d41f0          PUSH     {r4-r8,lr}
;;;170    {
0002f8  e1a06000          MOV      r6,r0
0002fc  e1a05001          MOV      r5,r1
000300  e1a08002          MOV      r8,r2
000304  e1a04003          MOV      r4,r3
;;;171      (void) result;
;;;172    
;;;173      // Endpoint Address is opposite to direction bit, this is Status Stage complete event
;;;174      if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
000308  e1a00000          MOV      r0,r0
00030c  e2050080          AND      r0,r5,#0x80
000310  e1a003a0          LSR      r0,r0,#7
000314  e59f11cc          LDR      r1,|L1.1256|
000318  e5d11000          LDRB     r1,[r1,#0]  ; _ctrl_xfer
00031c  e15003a1          CMP      r0,r1,LSR #7
000320  0a00001d          BEQ      |L1.924|
;;;175      {
;;;176        TU_ASSERT(0 == xferred_bytes);
000324  e1a00000          MOV      r0,r0
000328  e3540000          CMP      r4,#0
00032c  0a000007          BEQ      |L1.848|
000330  e3a020b0          MOV      r2,#0xb0
000334  e59f11d0          LDR      r1,|L1.1292|
000338  e28f0f6d          ADR      r0,|L1.1268|
00033c  ebfffffe          BL       __2printf
000340  e1a00000          MOV      r0,r0
000344  e1a00000          MOV      r0,r0
000348  e3a00000          MOV      r0,#0
                  |L1.844|
;;;177    
;;;178        // invoke optional dcd hook if available
;;;179        if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
;;;180    
;;;181        if (_ctrl_xfer.complete_cb)
;;;182        {
;;;183          // TODO refactor with usbd_driver_print_control_complete_name
;;;184          _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
;;;185        }
;;;186    
;;;187        return true;
;;;188      }
;;;189    
;;;190      if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
;;;191      {
;;;192        TU_VERIFY(_ctrl_xfer.buffer);
;;;193        memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
;;;194        TU_LOG_MEM(USBD_CONTROL_DEBUG, _usbd_ctrl_buf, xferred_bytes, 2);
;;;195      }
;;;196    
;;;197      _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
;;;198      _ctrl_xfer.buffer += xferred_bytes;
;;;199    
;;;200      // Data Stage is complete when all request's length are transferred or
;;;201      // a short packet is sent including zero-length packet.
;;;202      if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
;;;203      {
;;;204        // DATA stage is complete
;;;205        bool is_ok = true;
;;;206    
;;;207        // invoke complete callback if set
;;;208        // callback can still stall control in status phase e.g out data does not make sense
;;;209        if ( _ctrl_xfer.complete_cb )
;;;210        {
;;;211          #if CFG_TUSB_DEBUG >= USBD_CONTROL_DEBUG
;;;212          usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
;;;213          #endif
;;;214    
;;;215          is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
;;;216        }
;;;217    
;;;218        if ( is_ok )
;;;219        {
;;;220          // Send status
;;;221          TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
;;;222        }else
;;;223        {
;;;224          // Stall both IN and OUT control endpoint
;;;225          dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
;;;226          dcd_edpt_stall(rhport, EDPT_CTRL_IN);
;;;227        }
;;;228      }
;;;229      else
;;;230      {
;;;231        // More data to transfer
;;;232        TU_ASSERT( _data_stage_xact(rhport) );
;;;233      }
;;;234    
;;;235      return true;
;;;236    }
00034c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.848|
000350  e1a00000          MOV      r0,r0                 ;176
000354  e59f01b4          LDR      r0,|L1.1296|
000358  e3500000          CMP      r0,#0                 ;179
00035c  0a000002          BEQ      |L1.876|
000360  e59f1180          LDR      r1,|L1.1256|
000364  e1a00006          MOV      r0,r6                 ;179
000368  ebfffffe          BL       dcd_edpt0_status_complete
                  |L1.876|
00036c  e59f0174          LDR      r0,|L1.1256|
000370  e5900010          LDR      r0,[r0,#0x10]         ;181  ; _ctrl_xfer
000374  e3500000          CMP      r0,#0                 ;181
000378  0a000005          BEQ      |L1.916|
00037c  e59f0164          LDR      r0,|L1.1256|
000380  e2802000          ADD      r2,r0,#0              ;184
000384  e3a01003          MOV      r1,#3                 ;184
000388  e5903010          LDR      r3,[r0,#0x10]         ;184  ; _ctrl_xfer
00038c  e1a00006          MOV      r0,r6                 ;184
000390  e12fff33          BLX      r3                    ;184
                  |L1.916|
000394  e3a00001          MOV      r0,#1                 ;187
000398  eaffffeb          B        |L1.844|
                  |L1.924|
00039c  e59f0144          LDR      r0,|L1.1256|
0003a0  e5d00000          LDRB     r0,[r0,#0]            ;190  ; _ctrl_xfer
0003a4  e1a003a0          LSR      r0,r0,#7              ;190
0003a8  e3500000          CMP      r0,#0                 ;190
0003ac  1a00000c          BNE      |L1.996|
0003b0  e1a00000          MOV      r0,r0                 ;192
0003b4  e59f012c          LDR      r0,|L1.1256|
0003b8  e5900008          LDR      r0,[r0,#8]            ;192  ; _ctrl_xfer
0003bc  e3500000          CMP      r0,#0                 ;192
0003c0  1a000001          BNE      |L1.972|
0003c4  e3a00000          MOV      r0,#0                 ;192
0003c8  eaffffdf          B        |L1.844|
                  |L1.972|
0003cc  e1a00000          MOV      r0,r0                 ;192
0003d0  e59f1110          LDR      r1,|L1.1256|
0003d4  e1a02004          MOV      r2,r4                 ;193
0003d8  e5910008          LDR      r0,[r1,#8]            ;193  ; _ctrl_xfer
0003dc  e59f1108          LDR      r1,|L1.1260|
0003e0  ebfffffe          BL       __aeabi_memcpy
                  |L1.996|
0003e4  e59f00fc          LDR      r0,|L1.1256|
0003e8  e1d000be          LDRH     r0,[r0,#0xe]          ;197  ; _ctrl_xfer
0003ec  e0800004          ADD      r0,r0,r4              ;197
0003f0  e59f10f0          LDR      r1,|L1.1256|
0003f4  e1c100be          STRH     r0,[r1,#0xe]          ;197  ; _ctrl_xfer
0003f8  e2810000          ADD      r0,r1,#0              ;198
0003fc  e5900008          LDR      r0,[r0,#8]            ;198  ; _ctrl_xfer
000400  e0800004          ADD      r0,r0,r4              ;198
000404  e5810008          STR      r0,[r1,#8]            ;198  ; _ctrl_xfer
000408  e2810000          ADD      r0,r1,#0              ;202
00040c  e1d000b6          LDRH     r0,[r0,#6]            ;202  ; _ctrl_xfer
000410  e1d110be          LDRH     r1,[r1,#0xe]          ;202  ; _ctrl_xfer
000414  e1500001          CMP      r0,r1                 ;202
000418  0a000001          BEQ      |L1.1060|
00041c  e3540040          CMP      r4,#0x40              ;202
000420  2a000023          BCS      |L1.1204|
                  |L1.1060|
000424  e3a07001          MOV      r7,#1                 ;205
000428  e59f00b8          LDR      r0,|L1.1256|
00042c  e5900010          LDR      r0,[r0,#0x10]         ;209  ; _ctrl_xfer
000430  e3500000          CMP      r0,#0                 ;209
000434  0a000006          BEQ      |L1.1108|
000438  e59f00a8          LDR      r0,|L1.1256|
00043c  e2802000          ADD      r2,r0,#0              ;215
000440  e3a01002          MOV      r1,#2                 ;215
000444  e5903010          LDR      r3,[r0,#0x10]         ;215  ; _ctrl_xfer
000448  e1a00006          MOV      r0,r6                 ;215
00044c  e12fff33          BLX      r3                    ;215
000450  e1a07000          MOV      r7,r0                 ;215
                  |L1.1108|
000454  e3570000          CMP      r7,#0                 ;218
000458  0a00000e          BEQ      |L1.1176|
00045c  e1a00000          MOV      r0,r0                 ;221
000460  e59f1080          LDR      r1,|L1.1256|
000464  e1a00006          MOV      r0,r6                 ;221
000468  ebfffffe          BL       _status_stage_xact
00046c  e3500000          CMP      r0,#0                 ;221
000470  1a000007          BNE      |L1.1172|
000474  e3a020dd          MOV      r2,#0xdd              ;221
000478  e59f108c          LDR      r1,|L1.1292|
00047c  e28f0070          ADR      r0,|L1.1268|
000480  ebfffffe          BL       __2printf
000484  e1a00000          MOV      r0,r0                 ;221
000488  e1a00000          MOV      r0,r0                 ;221
00048c  e3a00000          MOV      r0,#0                 ;221
000490  eaffffad          B        |L1.844|
                  |L1.1172|
000494  ea000005          B        |L1.1200|
                  |L1.1176|
000498  e3a01000          MOV      r1,#0                 ;225
00049c  e1a00006          MOV      r0,r6                 ;225
0004a0  ebfffffe          BL       dcd_edpt_stall
0004a4  e3a01080          MOV      r1,#0x80              ;226
0004a8  e1a00006          MOV      r0,r6                 ;226
0004ac  ebfffffe          BL       dcd_edpt_stall
                  |L1.1200|
0004b0  ea000018          B        |L1.1304|
                  |L1.1204|
0004b4  e1a00000          MOV      r0,r0                 ;232
0004b8  e1a00006          MOV      r0,r6                 ;232
0004bc  ebfffffe          BL       _data_stage_xact
0004c0  e3500000          CMP      r0,#0                 ;232
0004c4  1a000012          BNE      |L1.1300|
0004c8  e3a020e8          MOV      r2,#0xe8              ;232
0004cc  e59f1038          LDR      r1,|L1.1292|
0004d0  e28f001c          ADR      r0,|L1.1268|
0004d4  ebfffffe          BL       __2printf
0004d8  e1a00000          MOV      r0,r0                 ;232
0004dc  e1a00000          MOV      r0,r0                 ;232
0004e0  e3a00000          MOV      r0,#0                 ;232
0004e4  eaffff98          B        |L1.844|
                  |L1.1256|
                          DCD      _ctrl_xfer
                  |L1.1260|
                          DCD      _usbd_ctrl_buf
                  |L1.1264|
                          DCD      __func__
                  |L1.1268|
0004f4  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
0004f8  643a2041
0004fc  53534552
000500  54204641
000504  494c4544
000508  0d0a00  
00050b  00                DCB      0
                  |L1.1292|
                          DCD      |symbol_number.12|
                  |L1.1296|
                          DCD      dcd_edpt0_status_complete
                  |L1.1300|
000514  e1a00000          MOV      r0,r0                 ;232
                  |L1.1304|
000518  e3a00001          MOV      r0,#1                 ;235
00051c  eaffff8a          B        |L1.844|
;;;237    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ctrl_xfer
                          %        20
                  _usbd_ctrl_buf
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  7475645f          DCB      0x74,0x75,0x64,0x5f
000004  636f6e74          DCB      0x63,0x6f,0x6e,0x74
000008  726f6c5f          DCB      0x72,0x6f,0x6c,0x5f
00000c  78666572          DCB      0x78,0x66,0x65,0x72
000010  00                DCB      0x00
                  |symbol_number.12|
000011  757362            DCB      0x75,0x73,0x62
000014  645f636f          DCB      0x64,0x5f,0x63,0x6f
000018  6e74726f          DCB      0x6e,0x74,0x72,0x6f
00001c  6c5f7866          DCB      0x6c,0x5f,0x78,0x66
000020  65725f63          DCB      0x65,0x72,0x5f,0x63
000024  6200              DCB      0x62,0x00
