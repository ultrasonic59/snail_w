; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\vendor_device.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\vendor_device.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\vendor_device.crf ..\tinyusb\src\class\vendor\vendor_device.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tud_vendor_n_mounted PROC
;;;66     
;;;67     bool tud_vendor_n_mounted (uint8_t itf)
000000  e59f2544          LDR      r2,|L1.1356|
;;;68     {
;;;69       return _vendord_itf[itf].ep_in && _vendord_itf[itf].ep_out;
000004  e59f1544          LDR      r1,|L1.1360|
000008  e1600280          SMULBB   r0,r0,r2
00000c  e0810100          ADD      r0,r1,r0,LSL #2
000010  e5d01001          LDRB     r1,[r0,#1]
000014  e3510000          CMP      r1,#0
000018  15d00002          LDRBNE   r0,[r0,#2]
00001c  13500000          CMPNE    r0,#0
000020  03a00000          MOVEQ    r0,#0
000024  13a00001          MOVNE    r0,#1
;;;70     }
000028  e12fff1e          BX       lr
;;;71     
                          ENDP

                  tud_vendor_n_available PROC
;;;72     uint32_t tud_vendor_n_available (uint8_t itf)
00002c  e59f1518          LDR      r1,|L1.1356|
;;;73     {
;;;74       return tu_fifo_count(&_vendord_itf[itf].rx_ff);
000030  e1600180          SMULBB   r0,r0,r1
000034  e59f1514          LDR      r1,|L1.1360|
000038  e0810100          ADD      r0,r1,r0,LSL #2
00003c  e2800004          ADD      r0,r0,#4
000040  eafffffe          B        tu_fifo_count
;;;75     }
;;;76     
                          ENDP

                  tud_vendor_n_peek PROC
;;;77     bool tud_vendor_n_peek(uint8_t itf, uint8_t* u8)
000044  e59f2500          LDR      r2,|L1.1356|
;;;78     {
;;;79       return tu_fifo_peek(&_vendord_itf[itf].rx_ff, u8);
000048  e1600280          SMULBB   r0,r0,r2
00004c  e59f24fc          LDR      r2,|L1.1360|
000050  e0820100          ADD      r0,r2,r0,LSL #2
000054  e2800004          ADD      r0,r0,#4
000058  eafffffe          B        tu_fifo_peek
;;;80     }
;;;81     
                          ENDP

                  tud_vendor_n_read PROC
;;;104    
;;;105    uint32_t tud_vendor_n_read (uint8_t itf, void* buffer, uint32_t bufsize)
00005c  e59f34e8          LDR      r3,|L1.1356|
;;;106    {
000060  e92d4070          PUSH     {r4-r6,lr}
;;;107      vendord_interface_t* p_itf = &_vendord_itf[itf];
000064  e1600380          SMULBB   r0,r0,r3
000068  e59f34e0          LDR      r3,|L1.1360|
;;;108      uint32_t num_read = tu_fifo_read_n(&p_itf->rx_ff, buffer, (uint16_t) bufsize);
00006c  e1a02802          LSL      r2,r2,#16
000070  e0834100          ADD      r4,r3,r0,LSL #2       ;107
000074  e1a02822          LSR      r2,r2,#16
000078  e2840004          ADD      r0,r4,#4
00007c  ebfffffe          BL       tu_fifo_read_n
000080  e1a05000          MOV      r5,r0
000084  e5d41002          LDRB     r1,[r4,#2]
000088  e3a00000          MOV      r0,#0
00008c  ebfffffe          BL       usbd_edpt_claim
000090  e3500000          CMP      r0,#0
000094  0a00000c          BEQ      |L1.204|
000098  e2840004          ADD      r0,r4,#4
00009c  ebfffffe          BL       tu_fifo_remaining
0000a0  e5d41002          LDRB     r1,[r4,#2]
0000a4  e3500040          CMP      r0,#0x40
0000a8  3a000005          BCC      |L1.196|
0000ac  e2842b01          ADD      r2,r4,#0x400
0000b0  e3a03040          MOV      r3,#0x40
0000b4  e282204c          ADD      r2,r2,#0x4c
0000b8  e3a00000          MOV      r0,#0
0000bc  ebfffffe          BL       usbd_edpt_xfer
0000c0  ea000001          B        |L1.204|
                  |L1.196|
0000c4  e3a00000          MOV      r0,#0
0000c8  ebfffffe          BL       usbd_edpt_release
                  |L1.204|
;;;109      _prep_out_transaction(p_itf);
;;;110      return num_read;
0000cc  e1a00005          MOV      r0,r5
;;;111    }
0000d0  e8bd8070          POP      {r4-r6,pc}
;;;112    
                          ENDP

                  tud_vendor_n_read_flush PROC
;;;113    void tud_vendor_n_read_flush (uint8_t itf)
0000d4  e59f1470          LDR      r1,|L1.1356|
;;;114    {
0000d8  e92d4010          PUSH     {r4,lr}
;;;115      vendord_interface_t* p_itf = &_vendord_itf[itf];
0000dc  e1600180          SMULBB   r0,r0,r1
0000e0  e59f1468          LDR      r1,|L1.1360|
0000e4  e0814100          ADD      r4,r1,r0,LSL #2
;;;116      tu_fifo_clear(&p_itf->rx_ff);
0000e8  e2840004          ADD      r0,r4,#4
0000ec  ebfffffe          BL       tu_fifo_clear
0000f0  e5d41002          LDRB     r1,[r4,#2]
0000f4  e3a00000          MOV      r0,#0
0000f8  ebfffffe          BL       usbd_edpt_claim
0000fc  e3500000          CMP      r0,#0
;;;117      _prep_out_transaction(p_itf);
;;;118    }
000100  08bd8010          POPEQ    {r4,pc}
000104  e2840004          ADD      r0,r4,#4
000108  ebfffffe          BL       tu_fifo_remaining
00010c  e5d41002          LDRB     r1,[r4,#2]
000110  e3500040          CMP      r0,#0x40
000114  3a000005          BCC      |L1.304|
000118  e2842b01          ADD      r2,r4,#0x400
00011c  e8bd4010          POP      {r4,lr}
000120  e3a03040          MOV      r3,#0x40
000124  e282204c          ADD      r2,r2,#0x4c
000128  e3a00000          MOV      r0,#0
00012c  eafffffe          B        usbd_edpt_xfer
                  |L1.304|
000130  e8bd4010          POP      {r4,lr}
000134  e3a00000          MOV      r0,#0
000138  eafffffe          B        usbd_edpt_release
;;;119    
                          ENDP

                  tud_vendor_n_write_flush PROC
;;;134    
;;;135    uint32_t tud_vendor_n_write_flush (uint8_t itf)
00013c  e59f1408          LDR      r1,|L1.1356|
;;;136    {
000140  e92d4070          PUSH     {r4-r6,lr}
;;;137      vendord_interface_t* p_itf = &_vendord_itf[itf];
000144  e1600180          SMULBB   r0,r0,r1
000148  e59f1400          LDR      r1,|L1.1360|
00014c  e0814100          ADD      r4,r1,r0,LSL #2
000150  ebfffffe          BL       tud_mounted
000154  e3500000          CMP      r0,#0
000158  0a000002          BEQ      |L1.360|
00015c  ebfffffe          BL       tud_suspended
000160  e3500000          CMP      r0,#0
000164  0a000001          BEQ      |L1.368|
                  |L1.360|
;;;138    
;;;139      // Skip if usb is not ready yet
;;;140      TU_VERIFY( tud_ready(), 0 );
000168  e3a00000          MOV      r0,#0
;;;141    
;;;142      // No data to send
;;;143      if ( !tu_fifo_count(&p_itf->tx_ff) ) return 0;
;;;144    
;;;145      uint8_t const rhport = 0;
;;;146    
;;;147      // Claim the endpoint
;;;148      TU_VERIFY( usbd_edpt_claim(rhport, p_itf->ep_in), 0 );
;;;149    
;;;150      // Pull data from FIFO
;;;151      uint16_t const count = tu_fifo_read_n(&p_itf->tx_ff, p_itf->epin_buf, sizeof(p_itf->epin_buf));
;;;152    
;;;153      if ( count )
;;;154      {
;;;155        TU_ASSERT( usbd_edpt_xfer(rhport, p_itf->ep_in, p_itf->epin_buf, count), 0 );
;;;156        return count;
;;;157      }else
;;;158      {
;;;159        // Release endpoint since we don't make any transfer
;;;160        // Note: data is dropped if terminal is not connected
;;;161        usbd_edpt_release(rhport, p_itf->ep_in);
;;;162        return 0;
;;;163      }
;;;164    }
00016c  e8bd8070          POP      {r4-r6,pc}
                  |L1.368|
000170  e2840018          ADD      r0,r4,#0x18           ;143
000174  ebfffffe          BL       tu_fifo_count
000178  e3500000          CMP      r0,#0                 ;143
00017c  08bd8070          POPEQ    {r4-r6,pc}
000180  e5d41001          LDRB     r1,[r4,#1]            ;148
000184  e3a00000          MOV      r0,#0                 ;148
000188  ebfffffe          BL       usbd_edpt_claim
00018c  e3500000          CMP      r0,#0                 ;148
000190  08bd8070          POPEQ    {r4-r6,pc}
000194  e2841b01          ADD      r1,r4,#0x400          ;151
000198  e281108c          ADD      r1,r1,#0x8c           ;151
00019c  e3a02040          MOV      r2,#0x40              ;151
0001a0  e1a06001          MOV      r6,r1                 ;151
0001a4  e2840018          ADD      r0,r4,#0x18           ;151
0001a8  ebfffffe          BL       tu_fifo_read_n
0001ac  e5d41001          LDRB     r1,[r4,#1]            ;161
0001b0  e1b05000          MOVS     r5,r0                 ;151
0001b4  0a000006          BEQ      |L1.468|
0001b8  e1a03000          MOV      r3,r0                 ;155
0001bc  e1a02006          MOV      r2,r6                 ;155
0001c0  e3a00000          MOV      r0,#0                 ;155
0001c4  ebfffffe          BL       usbd_edpt_xfer
0001c8  e3500000          CMP      r0,#0                 ;155
0001cc  11a00005          MOVNE    r0,r5                 ;156
0001d0  e8bd8070          POP      {r4-r6,pc}
                  |L1.468|
0001d4  e3a00000          MOV      r0,#0                 ;161
0001d8  ebfffffe          BL       usbd_edpt_release
0001dc  e3a00000          MOV      r0,#0                 ;162
0001e0  e8bd8070          POP      {r4-r6,pc}
;;;165    
                          ENDP

                  tud_vendor_n_write PROC
;;;122    //--------------------------------------------------------------------+
;;;123    uint32_t tud_vendor_n_write (uint8_t itf, void const* buffer, uint32_t bufsize)
0001e4  e92d4070          PUSH     {r4-r6,lr}
;;;124    {
0001e8  e1a05000          MOV      r5,r0
;;;125      vendord_interface_t* p_itf = &_vendord_itf[itf];
0001ec  e59f0358          LDR      r0,|L1.1356|
0001f0  e59f3358          LDR      r3,|L1.1360|
0001f4  e1600085          SMULBB   r0,r5,r0
;;;126      uint16_t ret = tu_fifo_write_n(&p_itf->tx_ff, buffer, (uint16_t) bufsize);
0001f8  e1a02802          LSL      r2,r2,#16
0001fc  e0834100          ADD      r4,r3,r0,LSL #2       ;125
000200  e1a02822          LSR      r2,r2,#16
000204  e2840018          ADD      r0,r4,#0x18
000208  ebfffffe          BL       tu_fifo_write_n
00020c  e1a06000          MOV      r6,r0
;;;127    
;;;128      // flush if queue more than packet size
;;;129      if (tu_fifo_count(&p_itf->tx_ff) >= CFG_TUD_VENDOR_EPSIZE) {
000210  e2840018          ADD      r0,r4,#0x18
000214  ebfffffe          BL       tu_fifo_count
000218  e3500040          CMP      r0,#0x40
;;;130        tud_vendor_n_write_flush(itf);
00021c  21a00005          MOVCS    r0,r5
000220  2bfffffe          BLCS     tud_vendor_n_write_flush
;;;131      }
;;;132      return ret;
000224  e1a00006          MOV      r0,r6
;;;133    }
000228  e8bd8070          POP      {r4-r6,pc}
;;;134    
                          ENDP

                  tud_vendor_n_write_available PROC
;;;165    
;;;166    uint32_t tud_vendor_n_write_available (uint8_t itf)
00022c  e59f1318          LDR      r1,|L1.1356|
;;;167    {
;;;168      return tu_fifo_remaining(&_vendord_itf[itf].tx_ff);
000230  e1600180          SMULBB   r0,r0,r1
000234  e59f1314          LDR      r1,|L1.1360|
000238  e0810100          ADD      r0,r1,r0,LSL #2
00023c  e2800018          ADD      r0,r0,#0x18
000240  eafffffe          B        tu_fifo_remaining
;;;169    }
;;;170    
                          ENDP

                  vendord_init PROC
;;;173    //--------------------------------------------------------------------+
;;;174    void vendord_init(void)
000244  e92d43f8          PUSH     {r3-r9,lr}
;;;175    {
;;;176      tu_memclr(_vendord_itf, sizeof(_vendord_itf));
000248  e59f1304          LDR      r1,|L1.1364|
00024c  e59f02fc          LDR      r0,|L1.1360|
000250  ebfffffe          BL       __aeabi_memclr4
000254  e59f82f4          LDR      r8,|L1.1360|
000258  e3a06000          MOV      r6,#0
;;;177    
;;;178      for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
00025c  e1a05006          MOV      r5,r6
                  |L1.608|
;;;179      {
;;;180        vendord_interface_t* p_itf = &_vendord_itf[i];
000260  e59f02e4          LDR      r0,|L1.1356|
;;;181    
;;;182        // config fifo
;;;183        tu_fifo_config(&p_itf->rx_ff, p_itf->rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE, 1, false);
000264  e3a03001          MOV      r3,#1
000268  e0000095          MUL      r0,r5,r0              ;180
00026c  e3a02c02          MOV      r2,#0x200
000270  e0884100          ADD      r4,r8,r0,LSL #2       ;180
000274  e284102c          ADD      r1,r4,#0x2c
000278  e2840004          ADD      r0,r4,#4
00027c  e58d6000          STR      r6,[sp,#0]
000280  ebfffffe          BL       tu_fifo_config
;;;184        tu_fifo_config(&p_itf->tx_ff, p_itf->tx_ff_buf, CFG_TUD_VENDOR_TX_BUFSIZE, 1, false);
000284  e3a03001          MOV      r3,#1
000288  e3a02c02          MOV      r2,#0x200
00028c  e2841f8b          ADD      r1,r4,#0x22c
000290  e2840018          ADD      r0,r4,#0x18
000294  e58d6000          STR      r6,[sp,#0]
000298  ebfffffe          BL       tu_fifo_config
;;;185    
;;;186    #if CFG_FIFO_MUTEX
;;;187        tu_fifo_config_mutex(&p_itf->rx_ff, NULL, osal_mutex_create(&p_itf->rx_ff_mutex));
00029c  e2847b01          ADD      r7,r4,#0x400
0002a0  e287702c          ADD      r7,r7,#0x2c
0002a4  e1a00007          MOV      r0,r7
0002a8  ebfffffe          BL       os_mut_init
0002ac  e5846010          STR      r6,[r4,#0x10]
0002b0  e5847014          STR      r7,[r4,#0x14]
;;;188        tu_fifo_config_mutex(&p_itf->tx_ff, osal_mutex_create(&p_itf->tx_ff_mutex), NULL);
0002b4  e2847b01          ADD      r7,r4,#0x400
0002b8  e287703c          ADD      r7,r7,#0x3c
0002bc  e1a00007          MOV      r0,r7
0002c0  ebfffffe          BL       os_mut_init
0002c4  e2850001          ADD      r0,r5,#1              ;178
0002c8  e5a47024          STR      r7,[r4,#0x24]!        ;178
0002cc  e21050ff          ANDS     r5,r0,#0xff           ;178
0002d0  e5846004          STR      r6,[r4,#4]            ;178
0002d4  0affffe1          BEQ      |L1.608|
;;;189    #endif
;;;190      }
;;;191    }
0002d8  e8bd83f8          POP      {r3-r9,pc}
;;;192    
                          ENDP

                  vendord_reset PROC
;;;193    void vendord_reset(uint8_t rhport)
0002dc  e92d41f0          PUSH     {r4-r8,lr}
;;;194    {
;;;195      (void) rhport;
;;;196    
;;;197      for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
;;;198      {
;;;199        vendord_interface_t* p_itf = &_vendord_itf[i];
0002e0  e59f7268          LDR      r7,|L1.1360|
0002e4  e3a06000          MOV      r6,#0                 ;194
0002e8  e1a04006          MOV      r4,r6                 ;197
                  |L1.748|
0002ec  e59f0258          LDR      r0,|L1.1356|
0002f0  e0000094          MUL      r0,r4,r0
0002f4  e0875100          ADD      r5,r7,r0,LSL #2
;;;200    
;;;201        tu_memclr(p_itf, ITF_MEM_RESET_SIZE);
;;;202        tu_fifo_clear(&p_itf->rx_ff);
0002f8  e2850004          ADD      r0,r5,#4
0002fc  e5856000          STR      r6,[r5,#0]            ;201
000300  ebfffffe          BL       tu_fifo_clear
;;;203        tu_fifo_clear(&p_itf->tx_ff);
000304  e2850018          ADD      r0,r5,#0x18
000308  ebfffffe          BL       tu_fifo_clear
00030c  e2840001          ADD      r0,r4,#1              ;197
000310  e21040ff          ANDS     r4,r0,#0xff           ;197
000314  0afffff4          BEQ      |L1.748|
;;;204      }
;;;205    }
000318  e8bd81f0          POP      {r4-r8,pc}
;;;206    
                          ENDP

                  vendord_open PROC
;;;207    uint16_t vendord_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
00031c  e92d40f0          PUSH     {r4-r7,lr}
;;;208    {
000320  e1a05001          MOV      r5,r1
;;;209      TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
000324  e5d11005          LDRB     r1,[r1,#5]
000328  e24dd00c          SUB      sp,sp,#0xc            ;208
00032c  e35100ff          CMP      r1,#0xff
000330  1a000008          BNE      |L1.856|
;;;210    
;;;211      uint8_t const * p_desc = tu_desc_next(desc_itf);
;;;212      uint8_t const * desc_end = p_desc + max_len;
;;;213    
;;;214      // Find available interface
;;;215      vendord_interface_t* p_vendor = NULL;
;;;216      for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
;;;217      {
;;;218        if ( _vendord_itf[i].ep_in == 0 && _vendord_itf[i].ep_out == 0 )
000334  e59f7214          LDR      r7,|L1.1360|
000338  e5d51000          LDRB     r1,[r5,#0]
00033c  e5d73001          LDRB     r3,[r7,#1]  ; _vendord_itf
000340  e0814005          ADD      r4,r1,r5
000344  e3530000          CMP      r3,#0
000348  e0841002          ADD      r1,r4,r2              ;212
00034c  05d72002          LDRBEQ   r2,[r7,#2]  ; _vendord_itf
000350  03520000          CMPEQ    r2,#0
000354  0a000002          BEQ      |L1.868|
                  |L1.856|
;;;219        {
;;;220          p_vendor = &_vendord_itf[i];
;;;221          break;
;;;222        }
;;;223      }
;;;224      TU_VERIFY(p_vendor, 0);
000358  e3a00000          MOV      r0,#0
00035c  e28dd00c          ADD      sp,sp,#0xc
;;;225    
;;;226      p_vendor->itf_num = desc_itf->bInterfaceNumber;
;;;227      if (desc_itf->bNumEndpoints)
;;;228      {
;;;229        // skip non-endpoint descriptors
;;;230        while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
;;;231        {
;;;232          p_desc = tu_desc_next(p_desc);
;;;233        }
;;;234    
;;;235        // Open endpoint pair with usbd helper
;;;236        TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_BULK, &p_vendor->ep_out, &p_vendor->ep_in), 0);
;;;237    
;;;238        p_desc += desc_itf->bNumEndpoints*sizeof(tusb_desc_endpoint_t);
;;;239    
;;;240        // Prepare for incoming data
;;;241        if ( p_vendor->ep_out )
;;;242        {
;;;243          _prep_out_transaction(p_vendor);
;;;244        }
;;;245    
;;;246        if ( p_vendor->ep_in ) tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
;;;247      }
;;;248    
;;;249      return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
;;;250    }
000360  e8bd80f0          POP      {r4-r7,pc}
                  |L1.868|
000364  e5d52002          LDRB     r2,[r5,#2]            ;226
000368  e59f61e0          LDR      r6,|L1.1360|
00036c  e5c62000          STRB     r2,[r6,#0]            ;226
000370  e5d52004          LDRB     r2,[r5,#4]            ;227
000374  e3520000          CMP      r2,#0                 ;227
000378  0a000030          BEQ      |L1.1088|
                  |L1.892|
00037c  e5d43001          LDRB     r3,[r4,#1]            ;232
000380  e3530005          CMP      r3,#5                 ;232
000384  11540001          CMPNE    r4,r1                 ;232
000388  35d43000          LDRBCC   r3,[r4,#0]            ;232
00038c  30844003          ADDCC    r4,r4,r3              ;232
000390  3afffff9          BCC      |L1.892|
000394  e2863001          ADD      r3,r6,#1              ;236
000398  e2861002          ADD      r1,r6,#2              ;236
00039c  e88d000a          STM      sp,{r1,r3}            ;236
0003a0  e3a03002          MOV      r3,#2                 ;236
0003a4  e1a01004          MOV      r1,r4                 ;236
0003a8  ebfffffe          BL       usbd_open_edpt_pair
0003ac  e3500000          CMP      r0,#0                 ;236
0003b0  028dd00c          ADDEQ    sp,sp,#0xc            ;236
0003b4  08bd80f0          POPEQ    {r4-r7,pc}
0003b8  e5d50004          LDRB     r0,[r5,#4]            ;238
0003bc  e5d61002          LDRB     r1,[r6,#2]            ;241
0003c0  e0600180          RSB      r0,r0,r0,LSL #3       ;238
0003c4  e3510000          CMP      r1,#0                 ;241
0003c8  e0844000          ADD      r4,r4,r0              ;238
0003cc  0a000010          BEQ      |L1.1044|
0003d0  e3a00000          MOV      r0,#0                 ;241
0003d4  ebfffffe          BL       usbd_edpt_claim
0003d8  e3500000          CMP      r0,#0                 ;241
0003dc  0a00000c          BEQ      |L1.1044|
0003e0  e2860004          ADD      r0,r6,#4              ;241
0003e4  ebfffffe          BL       tu_fifo_remaining
0003e8  e5d61002          LDRB     r1,[r6,#2]            ;241
0003ec  e3500040          CMP      r0,#0x40              ;241
0003f0  3a000005          BCC      |L1.1036|
0003f4  e2862b01          ADD      r2,r6,#0x400          ;241
0003f8  e3a03040          MOV      r3,#0x40              ;241
0003fc  e282204c          ADD      r2,r2,#0x4c           ;241
000400  e3a00000          MOV      r0,#0                 ;241
000404  ebfffffe          BL       usbd_edpt_xfer
000408  ea000001          B        |L1.1044|
                  |L1.1036|
00040c  e3a00000          MOV      r0,#0                 ;241
000410  ebfffffe          BL       usbd_edpt_release
                  |L1.1044|
000414  e5d60001          LDRB     r0,[r6,#1]            ;246
000418  e3500000          CMP      r0,#0                 ;246
00041c  0a000007          BEQ      |L1.1088|
000420  e59f2130          LDR      r2,|L1.1368|
000424  e3a00000          MOV      r0,#0                 ;246
000428  e0461007          SUB      r1,r6,r7              ;246
00042c  e0e10192          SMLAL    r0,r1,r2,r1           ;246
000430  e1a00541          ASR      r0,r1,#10             ;246
000434  e0400fc1          SUB      r0,r0,r1,ASR #31      ;246
000438  e20000ff          AND      r0,r0,#0xff           ;246
00043c  ebfffffe          BL       tud_vendor_n_write_flush
                  |L1.1088|
000440  e0440005          SUB      r0,r4,r5              ;249
000444  e1a00800          LSL      r0,r0,#16             ;249
000448  e1a00820          LSR      r0,r0,#16             ;249
00044c  e28dd00c          ADD      sp,sp,#0xc            ;249
000450  e8bd80f0          POP      {r4-r7,pc}
;;;251    
                          ENDP

                  vendord_xfer_cb PROC
;;;252    bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
000454  e92d4070          PUSH     {r4-r6,lr}
;;;253    {
;;;254      (void) rhport;
;;;255      (void) result;
;;;256    
;;;257      uint8_t itf = 0;
;;;258      vendord_interface_t* p_itf = _vendord_itf;
000458  e59f40f0          LDR      r4,|L1.1360|
00045c  e3a05000          MOV      r5,#0                 ;257
000460  ea000001          B        |L1.1132|
                  |L1.1124|
;;;259    
;;;260      for ( ; ; itf++, p_itf++)
;;;261      {
;;;262        if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;
000464  e3a00000          MOV      r0,#0
;;;263    
;;;264        if ( ( ep_addr == p_itf->ep_out ) || ( ep_addr == p_itf->ep_in ) ) break;
;;;265      }
;;;266    
;;;267      if ( ep_addr == p_itf->ep_out )
;;;268      {
;;;269        // Receive new data
;;;270        tu_fifo_write_n(&p_itf->rx_ff, p_itf->epout_buf, (uint16_t) xferred_bytes);
;;;271    
;;;272        // Invoked callback if any
;;;273        if (tud_vendor_rx_cb) tud_vendor_rx_cb(itf);
;;;274    
;;;275        _prep_out_transaction(p_itf);
;;;276      }
;;;277      else if ( ep_addr == p_itf->ep_in )
;;;278      {
;;;279        if (tud_vendor_tx_cb) tud_vendor_tx_cb(itf, (uint16_t) xferred_bytes);
;;;280        // Send complete, try to send more if possible
;;;281        tud_vendor_n_write_flush(itf);
;;;282      }
;;;283    
;;;284      return true;
;;;285    }
000468  e8bd8070          POP      {r4-r6,pc}
                  |L1.1132|
00046c  e5d40002          LDRB     r0,[r4,#2]            ;264
000470  e1500001          CMP      r0,r1                 ;264
000474  15d40001          LDRBNE   r0,[r4,#1]            ;264
000478  11500001          CMPNE    r0,r1                 ;264
00047c  0a000005          BEQ      |L1.1176|
000480  e3a05001          MOV      r5,#1                 ;260
000484  e2844b01          ADD      r4,r4,#0x400          ;262
000488  e3550000          CMP      r5,#0                 ;262
00048c  e28440cc          ADD      r4,r4,#0xcc           ;262
000490  0afffff5          BEQ      |L1.1132|
000494  eafffff2          B        |L1.1124|
                  |L1.1176|
000498  e5d40002          LDRB     r0,[r4,#2]            ;267
00049c  e1a02803          LSL      r2,r3,#16             ;270
0004a0  e1a02822          LSR      r2,r2,#16             ;270
0004a4  e1500001          CMP      r0,r1                 ;267
0004a8  1a00001a          BNE      |L1.1304|
0004ac  e2841b01          ADD      r1,r4,#0x400          ;270
0004b0  e281104c          ADD      r1,r1,#0x4c           ;270
0004b4  e1a06001          MOV      r6,r1                 ;270
0004b8  e2840004          ADD      r0,r4,#4              ;270
0004bc  ebfffffe          BL       tu_fifo_write_n
0004c0  e59f0094          LDR      r0,|L1.1372|
0004c4  e3500000          CMP      r0,#0                 ;273
0004c8  11a00005          MOVNE    r0,r5                 ;273
0004cc  1bfffffe          BLNE     tud_vendor_rx_cb
0004d0  e5d41002          LDRB     r1,[r4,#2]            ;273
0004d4  e3a00000          MOV      r0,#0                 ;273
0004d8  ebfffffe          BL       usbd_edpt_claim
0004dc  e3500000          CMP      r0,#0                 ;273
0004e0  0a000017          BEQ      |L1.1348|
0004e4  e2840004          ADD      r0,r4,#4              ;273
0004e8  ebfffffe          BL       tu_fifo_remaining
0004ec  e5d41002          LDRB     r1,[r4,#2]            ;273
0004f0  e3500040          CMP      r0,#0x40              ;273
0004f4  3a000004          BCC      |L1.1292|
0004f8  e3a03040          MOV      r3,#0x40              ;273
0004fc  e1a02006          MOV      r2,r6                 ;273
000500  e3a00000          MOV      r0,#0                 ;273
000504  ebfffffe          BL       usbd_edpt_xfer
000508  ea00000d          B        |L1.1348|
                  |L1.1292|
00050c  e3a00000          MOV      r0,#0                 ;273
000510  ebfffffe          BL       usbd_edpt_release
000514  ea00000a          B        |L1.1348|
                  |L1.1304|
000518  e5d40001          LDRB     r0,[r4,#1]            ;277
00051c  e1500001          CMP      r0,r1                 ;277
000520  1a000007          BNE      |L1.1348|
000524  e59f0034          LDR      r0,|L1.1376|
000528  e3500000          CMP      r0,#0                 ;279
00052c  0a000002          BEQ      |L1.1340|
000530  e1a01002          MOV      r1,r2                 ;279
000534  e1a00005          MOV      r0,r5                 ;279
000538  ebfffffe          BL       tud_vendor_tx_cb
                  |L1.1340|
00053c  e1a00005          MOV      r0,r5                 ;281
000540  ebfffffe          BL       tud_vendor_n_write_flush
                  |L1.1348|
000544  e3a00001          MOV      r0,#1                 ;284
000548  e8bd8070          POP      {r4-r6,pc}
;;;286    
                          ENDP

                  |L1.1356|
                          DCD      0x00000133
                  |L1.1360|
                          DCD      ||.bss||
                  |L1.1364|
                          DCD      0x000004cc
                  |L1.1368|
                          DCD      0xd578e97d
                  |L1.1372|
                          DCD      tud_vendor_rx_cb
                  |L1.1376|
                          DCD      tud_vendor_tx_cb

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _vendord_itf
                          %        1228
