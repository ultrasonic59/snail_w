; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usbd_control.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usbd_control.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usbd_control.crf ..\tinyusb\src\device\usbd_control.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tud_control_status PROC
;;;76     // Status phase
;;;77     bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;78     {
;;;79       _ctrl_xfer.request       = (*request);
000004  e59f4348          LDR      r4,|L1.852|
000008  e1a06000          MOV      r6,r0                 ;78
00000c  e1a05001          MOV      r5,r1                 ;78
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       __ARM_common_memcpy1_8
;;;80       _ctrl_xfer.buffer        = NULL;
000018  e3a00000          MOV      r0,#0
00001c  e5840008          STR      r0,[r4,#8]  ; _ctrl_xfer
;;;81       _ctrl_xfer.total_xferred = 0;
000020  e1c400be          STRH     r0,[r4,#0xe]  ; _ctrl_xfer
;;;82       _ctrl_xfer.data_len      = 0;
000024  e1c400bc          STRH     r0,[r4,#0xc]  ; _ctrl_xfer
000028  e5d51000          LDRB     r1,[r5,#0]
;;;83     
;;;84       return _status_stage_xact(rhport, request);
00002c  e1a00006          MOV      r0,r6
000030  e8bd4070          POP      {r4-r6,lr}
000034  e3110080          TST      r1,#0x80
000038  e3a03000          MOV      r3,#0
00003c  13a01000          MOVNE    r1,#0
000040  03a01080          MOVEQ    r1,#0x80
000044  e1a02003          MOV      r2,r3
000048  eafffffe          B        usbd_edpt_xfer
;;;85     }
;;;86     
                          ENDP

                  tud_control_xfer PROC
;;;108    // If the request's wLength is zero, a status packet is sent instead.
;;;109    bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
00004c  e92d41f0          PUSH     {r4-r8,lr}
;;;110    {
;;;111      _ctrl_xfer.request       = (*request);
000050  e59f42fc          LDR      r4,|L1.852|
000054  e1a06000          MOV      r6,r0                 ;110
000058  e1a08003          MOV      r8,r3                 ;110
00005c  e1a07002          MOV      r7,r2                 ;110
000060  e1a05001          MOV      r5,r1                 ;110
000064  e1a00004          MOV      r0,r4
000068  ebfffffe          BL       __ARM_common_memcpy1_8
;;;112      _ctrl_xfer.buffer        = (uint8_t*) buffer;
;;;113      _ctrl_xfer.total_xferred = 0U;
00006c  e3a00000          MOV      r0,#0
000070  e5847008          STR      r7,[r4,#8]            ;112  ; _ctrl_xfer
000074  e1c400be          STRH     r0,[r4,#0xe]  ; _ctrl_xfer
;;;114      _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
000078  e5d50007          LDRB     r0,[r5,#7]
00007c  e5d52006          LDRB     r2,[r5,#6]
000080  e1a01007          MOV      r1,r7                 ;112
000084  e1820400          ORR      r0,r2,r0,LSL #8
000088  e1580000          CMP      r8,r0
00008c  31a03008          MOVCC    r3,r8
000090  21a03000          MOVCS    r3,r0
000094  e1c430bc          STRH     r3,[r4,#0xc]  ; _ctrl_xfer
;;;115    
;;;116      if (request->wLength > 0U)
000098  e5d50007          LDRB     r0,[r5,#7]
00009c  e5d52006          LDRB     r2,[r5,#6]
0000a0  e1920400          ORRS     r0,r2,r0,LSL #8
0000a4  0a00001f          BEQ      |L1.296|
;;;117      {
;;;118        if(_ctrl_xfer.data_len > 0U)
0000a8  e3530000          CMP      r3,#0
0000ac  0a000001          BEQ      |L1.184|
;;;119        {
;;;120          TU_ASSERT(buffer);
0000b0  e3570000          CMP      r7,#0
0000b4  0a000019          BEQ      |L1.288|
                  |L1.184|
0000b8  e1a05004          MOV      r5,r4
0000bc  e5d50000          LDRB     r0,[r5,#0]  ; _ctrl_xfer
0000c0  e3530040          CMP      r3,#0x40
0000c4  23a03040          MOVCS    r3,#0x40
0000c8  e3100080          TST      r0,#0x80
0000cc  e3a07000          MOV      r7,#0
0000d0  e1a04003          MOV      r4,r3
0000d4  0a000007          BEQ      |L1.248|
0000d8  e3540000          CMP      r4,#0
0000dc  e3a07080          MOV      r7,#0x80
0000e0  0a000007          BEQ      |L1.260|
0000e4  e59f026c          LDR      r0,|L1.856|
0000e8  e3530040          CMP      r3,#0x40
0000ec  e1a02003          MOV      r2,r3
0000f0  8a00000a          BHI      |L1.288|
0000f4  ebfffffe          BL       __aeabi_memcpy
                  |L1.248|
0000f8  e3540000          CMP      r4,#0
0000fc  159f2254          LDRNE    r2,|L1.856|
000100  1a000000          BNE      |L1.264|
                  |L1.260|
000104  e3a02000          MOV      r2,#0
                  |L1.264|
000108  e1a03004          MOV      r3,r4
00010c  e1a01007          MOV      r1,r7
000110  e1a00006          MOV      r0,r6
000114  ebfffffe          BL       usbd_edpt_xfer
;;;121        }
;;;122    
;;;123    //    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);
;;;124    
;;;125        // Data stage
;;;126        TU_ASSERT( _data_stage_xact(rhport) );
000118  e3500000          CMP      r0,#0
00011c  1a00000b          BNE      |L1.336|
                  |L1.288|
000120  e3a00000          MOV      r0,#0
;;;127      }
;;;128      else
;;;129      {
;;;130        // Status stage
;;;131        TU_ASSERT( _status_stage_xact(rhport, request) );
;;;132      }
;;;133    
;;;134      return true;
;;;135    }
000124  e8bd81f0          POP      {r4-r8,pc}
                  |L1.296|
000128  e5d51000          LDRB     r1,[r5,#0]
00012c  e3a03000          MOV      r3,#0
000130  e1a00006          MOV      r0,r6                 ;131
000134  e3110080          TST      r1,#0x80              ;131
000138  13a01000          MOVNE    r1,#0                 ;131
00013c  03a01080          MOVEQ    r1,#0x80              ;131
000140  e1a02003          MOV      r2,r3                 ;131
000144  ebfffffe          BL       usbd_edpt_xfer
000148  e3500000          CMP      r0,#0                 ;131
00014c  08bd81f0          POPEQ    {r4-r8,pc}
                  |L1.336|
000150  e3a00001          MOV      r0,#1                 ;134
000154  e8bd81f0          POP      {r4-r8,pc}
;;;136    
                          ENDP

                  usbd_control_reset PROC
;;;145    
;;;146    void usbd_control_reset(void)
000158  e59f01f4          LDR      r0,|L1.852|
;;;147    {
;;;148      tu_varclr(&_ctrl_xfer);
00015c  e3a01000          MOV      r1,#0
000160  e5801000          STR      r1,[r0,#0]  ; _ctrl_xfer
000164  e5801004          STR      r1,[r0,#4]  ; _ctrl_xfer
000168  e5801008          STR      r1,[r0,#8]  ; _ctrl_xfer
00016c  e580100c          STR      r1,[r0,#0xc]  ; _ctrl_xfer
000170  e5801010          STR      r1,[r0,#0x10]  ; _ctrl_xfer
;;;149    }
000174  e12fff1e          BX       lr
;;;150    
                          ENDP

                  usbd_control_set_complete_callback PROC
;;;151    // Set complete callback
;;;152    void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
000178  e59f11d4          LDR      r1,|L1.852|
;;;153    {
;;;154      _ctrl_xfer.complete_cb = fp;
00017c  e5810010          STR      r0,[r1,#0x10]  ; _ctrl_xfer
;;;155    }
000180  e12fff1e          BX       lr
;;;156    
                          ENDP

                  usbd_control_set_request PROC
;;;157    // for dcd_set_address where DCD is responsible for status response
;;;158    void usbd_control_set_request(tusb_control_request_t const *request)
000184  e92d4010          PUSH     {r4,lr}
;;;159    {
;;;160      _ctrl_xfer.request       = (*request);
000188  e59f41c4          LDR      r4,|L1.852|
00018c  e1a01000          MOV      r1,r0
000190  e1a00004          MOV      r0,r4
000194  ebfffffe          BL       __ARM_common_memcpy1_8
;;;161      _ctrl_xfer.buffer        = NULL;
000198  e3a00000          MOV      r0,#0
00019c  e5840008          STR      r0,[r4,#8]  ; _ctrl_xfer
;;;162      _ctrl_xfer.total_xferred = 0;
0001a0  e1c400be          STRH     r0,[r4,#0xe]  ; _ctrl_xfer
;;;163      _ctrl_xfer.data_len      = 0;
0001a4  e1c400bc          STRH     r0,[r4,#0xc]  ; _ctrl_xfer
;;;164    }
0001a8  e8bd8010          POP      {r4,pc}
;;;165    
                          ENDP

                  usbd_control_xfer_cb PROC
;;;168    // - Status stage
;;;169    bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
0001ac  e92d41f0          PUSH     {r4-r8,lr}
;;;170    {
;;;171      (void) result;
;;;172    
;;;173      // Endpoint Address is opposite to direction bit, this is Status Stage complete event
;;;174      if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
0001b0  e59f419c          LDR      r4,|L1.852|
0001b4  e1a06000          MOV      r6,r0                 ;170
0001b8  e5d40000          LDRB     r0,[r4,#0]  ; _ctrl_xfer
0001bc  e1a013a1          LSR      r1,r1,#7
0001c0  e1a05003          MOV      r5,r3                 ;170
0001c4  e15103a0          CMP      r1,r0,LSR #7
0001c8  0a00000f          BEQ      |L1.524|
;;;175      {
;;;176        TU_ASSERT(0 == xferred_bytes);
0001cc  e3530000          CMP      r3,#0
0001d0  1a00005d          BNE      |L1.844|
;;;177    
;;;178        // invoke optional dcd hook if available
;;;179        if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
0001d4  e59f0180          LDR      r0,|L1.860|
0001d8  e3500000          CMP      r0,#0
0001dc  0a000002          BEQ      |L1.492|
0001e0  e2841000          ADD      r1,r4,#0
0001e4  e1a00006          MOV      r0,r6
0001e8  ebfffffe          BL       dcd_edpt0_status_complete
                  |L1.492|
;;;180    
;;;181        if (_ctrl_xfer.complete_cb)
0001ec  e5943010          LDR      r3,[r4,#0x10]  ; _ctrl_xfer
0001f0  e3530000          CMP      r3,#0
0001f4  0a000052          BEQ      |L1.836|
;;;182        {
;;;183          // TODO refactor with usbd_driver_print_control_complete_name
;;;184          _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
0001f8  e59f2154          LDR      r2,|L1.852|
0001fc  e3a01003          MOV      r1,#3
000200  e1a00006          MOV      r0,r6
000204  e12fff33          BLX      r3
000208  ea00004d          B        |L1.836|
                  |L1.524|
;;;185        }
;;;186    
;;;187        return true;
;;;188      }
;;;189    
;;;190      if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
00020c  e3100080          TST      r0,#0x80
000210  1a000005          BNE      |L1.556|
;;;191      {
;;;192        TU_VERIFY(_ctrl_xfer.buffer);
000214  e5940008          LDR      r0,[r4,#8]  ; _ctrl_xfer
000218  e3500000          CMP      r0,#0
;;;193        memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
;;;194        TU_LOG_MEM(USBD_CONTROL_DEBUG, _usbd_ctrl_buf, xferred_bytes, 2);
;;;195      }
;;;196    
;;;197      _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
;;;198      _ctrl_xfer.buffer += xferred_bytes;
;;;199    
;;;200      // Data Stage is complete when all request's length are transferred or
;;;201      // a short packet is sent including zero-length packet.
;;;202      if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
;;;203      {
;;;204        // DATA stage is complete
;;;205        bool is_ok = true;
;;;206    
;;;207        // invoke complete callback if set
;;;208        // callback can still stall control in status phase e.g out data does not make sense
;;;209        if ( _ctrl_xfer.complete_cb )
;;;210        {
;;;211          #if CFG_TUSB_DEBUG >= USBD_CONTROL_DEBUG
;;;212          usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
;;;213          #endif
;;;214    
;;;215          is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
;;;216        }
;;;217    
;;;218        if ( is_ok )
;;;219        {
;;;220          // Send status
;;;221          TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
;;;222        }else
;;;223        {
;;;224          // Stall both IN and OUT control endpoint
;;;225          dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
;;;226          dcd_edpt_stall(rhport, EDPT_CTRL_IN);
;;;227        }
;;;228      }
;;;229      else
;;;230      {
;;;231        // More data to transfer
;;;232        TU_ASSERT( _data_stage_xact(rhport) );
;;;233      }
;;;234    
;;;235      return true;
;;;236    }
00021c  08bd81f0          POPEQ    {r4-r8,pc}
000220  e1a02003          MOV      r2,r3                 ;193
000224  e59f112c          LDR      r1,|L1.856|
000228  ebfffffe          BL       __aeabi_memcpy
                  |L1.556|
00022c  e1d410be          LDRH     r1,[r4,#0xe]          ;197  ; _ctrl_xfer
000230  e1a00805          LSL      r0,r5,#16             ;197
000234  e1a00820          LSR      r0,r0,#16             ;197
000238  e0800001          ADD      r0,r0,r1              ;197
00023c  e3c02801          BIC      r2,r0,#0x10000        ;197
000240  e1c420be          STRH     r2,[r4,#0xe]          ;197  ; _ctrl_xfer
000244  e5940008          LDR      r0,[r4,#8]            ;198  ; _ctrl_xfer
000248  e0801005          ADD      r1,r0,r5              ;198
00024c  e5841008          STR      r1,[r4,#8]            ;198  ; _ctrl_xfer
000250  e1d400b6          LDRH     r0,[r4,#6]            ;202  ; _ctrl_xfer
000254  e1500002          CMP      r0,r2                 ;202
000258  0a000001          BEQ      |L1.612|
00025c  e3550040          CMP      r5,#0x40              ;202
000260  2a00001b          BCS      |L1.724|
                  |L1.612|
000264  e5943010          LDR      r3,[r4,#0x10]         ;209  ; _ctrl_xfer
000268  e3530000          CMP      r3,#0                 ;209
00026c  0a000005          BEQ      |L1.648|
000270  e59f20dc          LDR      r2,|L1.852|
000274  e3a01002          MOV      r1,#2                 ;215
000278  e1a00006          MOV      r0,r6                 ;215
00027c  e12fff33          BLX      r3                    ;215
000280  e3500000          CMP      r0,#0                 ;218
000284  0a00000b          BEQ      |L1.696|
                  |L1.648|
000288  e59f10c4          LDR      r1,|L1.852|
00028c  e3a03000          MOV      r3,#0                 ;221
000290  e5d11000          LDRB     r1,[r1,#0]            ;221
000294  e1a00006          MOV      r0,r6                 ;221
000298  e1a02003          MOV      r2,r3                 ;221
00029c  e3110080          TST      r1,#0x80              ;221
0002a0  13a01000          MOVNE    r1,#0                 ;221
0002a4  03a01080          MOVEQ    r1,#0x80              ;221
0002a8  ebfffffe          BL       usbd_edpt_xfer
0002ac  e3500000          CMP      r0,#0                 ;221
0002b0  08bd81f0          POPEQ    {r4-r8,pc}
0002b4  ea000022          B        |L1.836|
                  |L1.696|
0002b8  e3a01000          MOV      r1,#0                 ;225
0002bc  e1a00006          MOV      r0,r6                 ;225
0002c0  ebfffffe          BL       dcd_edpt_stall
0002c4  e3a01080          MOV      r1,#0x80              ;226
0002c8  e1a00006          MOV      r0,r6                 ;226
0002cc  ebfffffe          BL       dcd_edpt_stall
0002d0  ea00001b          B        |L1.836|
                  |L1.724|
0002d4  e1d400bc          LDRH     r0,[r4,#0xc]          ;226  ; _ctrl_xfer
0002d8  e3a07000          MOV      r7,#0                 ;226
0002dc  e0400002          SUB      r0,r0,r2              ;226
0002e0  e1a05800          LSL      r5,r0,#16             ;226
0002e4  e5d40000          LDRB     r0,[r4,#0]            ;226  ; _ctrl_xfer
0002e8  e1a05825          LSR      r5,r5,#16             ;226
0002ec  e3550040          CMP      r5,#0x40              ;226
0002f0  e3100080          TST      r0,#0x80              ;226
0002f4  23a05040          MOVCS    r5,#0x40              ;226
0002f8  0a000007          BEQ      |L1.796|
0002fc  e3550000          CMP      r5,#0                 ;226
000300  e3a07080          MOV      r7,#0x80              ;226
000304  0a000007          BEQ      |L1.808|
000308  e59f0048          LDR      r0,|L1.856|
00030c  e3550040          CMP      r5,#0x40              ;226
000310  e1a02005          MOV      r2,r5                 ;226
000314  8a00000c          BHI      |L1.844|
000318  ebfffffe          BL       __aeabi_memcpy
                  |L1.796|
00031c  e3550000          CMP      r5,#0                 ;226
000320  159f2030          LDRNE    r2,|L1.856|
000324  1a000000          BNE      |L1.812|
                  |L1.808|
000328  e3a02000          MOV      r2,#0                 ;226
                  |L1.812|
00032c  e1a03005          MOV      r3,r5                 ;226
000330  e1a01007          MOV      r1,r7                 ;226
000334  e1a00006          MOV      r0,r6                 ;226
000338  ebfffffe          BL       usbd_edpt_xfer
00033c  e3500000          CMP      r0,#0                 ;232
000340  0a000001          BEQ      |L1.844|
                  |L1.836|
000344  e3a00001          MOV      r0,#1                 ;235
000348  e8bd81f0          POP      {r4-r8,pc}
                  |L1.844|
00034c  e3a00000          MOV      r0,#0                 ;232
000350  e8bd81f0          POP      {r4-r8,pc}
;;;237    
                          ENDP

                  |L1.852|
                          DCD      ||.bss||
                  |L1.856|
                          DCD      ||.bss||+0x14
                  |L1.860|
                          DCD      dcd_edpt0_status_complete

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ctrl_xfer
                          %        20
                  _usbd_ctrl_buf
                          %        64

                          AREA ||i.__ARM_common_memcpy1_8||, COMGROUP=__ARM_common_memcpy1_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memcpy1_8 PROC
000000  e5d12000          LDRB     r2,[r1,#0]
000004  e5c02000          STRB     r2,[r0,#0]
000008  e5d13001          LDRB     r3,[r1,#1]
00000c  e5c03001          STRB     r3,[r0,#1]
000010  e5d1c002          LDRB     r12,[r1,#2]
000014  e5c0c002          STRB     r12,[r0,#2]
000018  e5d12003          LDRB     r2,[r1,#3]
00001c  e5c02003          STRB     r2,[r0,#3]
000020  e5d13004          LDRB     r3,[r1,#4]
000024  e5c03004          STRB     r3,[r0,#4]
000028  e5d1c005          LDRB     r12,[r1,#5]
00002c  e5c0c005          STRB     r12,[r0,#5]
000030  e5d12006          LDRB     r2,[r1,#6]
000034  e5c02006          STRB     r2,[r0,#6]
000038  e5d13007          LDRB     r3,[r1,#7]
00003c  e5c03007          STRB     r3,[r0,#7]
000040  e12fff1e          BX       lr
                          ENDP

