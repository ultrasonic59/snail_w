; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\rtx_conf_f1c100s.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\rtx_conf_f1c100s.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\rtx_conf_f1c100s.crf ..\system\RTX_Conf_F1C100s.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  timer0_irq PROC
;;;163    
;;;164    static void timer0_irq(void)
000000  e59f0270          LDR      r0,|L1.632|
;;;165    {
;;;166      if (read32(TIMER_REG_BASE + 0x04) & (1 << 0)) {
000004  e5901000          LDR      r1,[r0,#0]
000008  e3110001          TST      r1,#1
;;;167        write32(TIMER_REG_BASE + 0x04, (1 << 0));
00000c  13a01001          MOVNE    r1,#1
000010  15801000          STRNE    r1,[r0,#0]
;;;168      }
;;;169    }
000014  e12fff1e          BX       lr
;;;170    
                          ENDP

                  os_def_interrupt PROC
                  ||__tagsym$$used||
;;;252    
;;;253    __irq void os_def_interrupt(void)
000018  e92d503f          PUSH     {r0-r5,r12,lr}
;;;254    {
;;;255      U8 nIRQ = backup_nirq;
00001c  e59f0258          LDR      r0,|L1.636|
000020  e5d04000          LDRB     r4,[r0,#0]  ; backup_nirq
;;;256      f1c100s_intc_dispatch(nIRQ);
000024  e1a00004          MOV      r0,r4
000028  ebfffffe          BL       f1c100s_intc_dispatch
;;;257      f1c100s_intc_clear_pend(nIRQ);
00002c  e1a00004          MOV      r0,r4
000030  ebfffffe          BL       f1c100s_intc_clear_pend
;;;258    }
000034  e8bd503f          POP      {r0-r5,r12,lr}
000038  e25ef004          SUBS     pc,lr,#4
;;;259    
                          ENDP

                  os_idle_demon PROC
                  |L1.60|
;;;262    
;;;263    __task void os_idle_demon(void)
00003c  eafffffe          B        |L1.60|
;;;264    {
;;;265      /* The idle demon is a system task, running when no other task is ready */
;;;266      /* to run. The 'os_xxx' function calls are not allowed from this task.  */
;;;267      for (;;) {
;;;268        /* HERE: include optional user code to be executed when no task runs.*/
;;;269        _idle_();
;;;270      }
;;;271    }
;;;272    
                          ENDP

                  os_error PROC
;;;291    
;;;292    void os_error(U32 err_code)
000040  e3500001          CMP      r0,#1
;;;293    {
;;;294      /* This function is called when a runtime error is detected. */
;;;295      OS_TID err_task;
;;;296    
;;;297      switch (err_code) {
;;;298        case OS_ERR_STK_OVF:
;;;299          /* Identify the task with stack overflow. */
;;;300          err_task = isr_tsk_get();
;;;301          DBG_PRINT("\nOS_ERR_STK_OVF(%u)\n", err_task);
;;;302          break;
;;;303        case OS_ERR_FIFO_OVF:
;;;304          (void)err_task;
;;;305          break;
;;;306        case OS_ERR_MBX_OVF:
;;;307          (void)err_task;
;;;308          break;
;;;309      }
;;;310      /* End-less loop */
;;;311      DBG_PRINT("\nos_error(%u)\n", err_code);
;;;312      //for (;;);
;;;313    }
000044  112fff1e          BXNE     lr
000048  eafffffe          B        os_tsk_self
;;;314    
                          ENDP

                  os_tmr_call PROC
;;;171    #ifndef __TSK_UNLOCK
;;;172    void tsk_unlock (void) {
;;;173      /* Enable RTX System Tick Timer Interrupts. */
;;;174      OS_UNLOCK();
00004c  e92d4010          PUSH     {r4,lr}
;;;175    }
000050  e1b04000          MOVS     r4,r0
000054  08bd8010          POPEQ    {r4,pc}
000058  e59f0220          LDR      r0,|L1.640|
00005c  ebfffffe          BL       os_mbx_check
000060  e3500000          CMP      r0,#0
000064  da000003          BLE      |L1.120|
000068  e3841102          ORR      r1,r4,#0x80000000
00006c  e8bd4010          POP      {r4,lr}
000070  e59f0208          LDR      r0,|L1.640|
000074  eafffffe          B        isr_mbx_send
                  |L1.120|
000078  e10f1000          MRS      r1,APSR ; formerly CPSR
00007c  e38100c0          ORR      r0,r1,#0xc0
000080  e121f000          MSR      CPSR_c,r0
000084  e59f01f8          LDR      r0,|L1.644|
000088  e20420ff          AND      r2,r4,#0xff
00008c  e5d03000          LDRB     r3,[r0,#0]  ; hdlpool
000090  e7c03002          STRB     r3,[r0,r2]
000094  e5c02000          STRB     r2,[r0,#0]  ; hdlpool
000098  e121f001          MSR      CPSR_c,r1
00009c  e8bd8010          POP      {r4,pc}
;;;176    #endif
                          ENDP

                  __ThreadTimerWaiter PROC
;;;405    
;;;406    __used void _mutex_acquire (OS_ID *mutex) {
;;;407      /* Acquire a system mutex, lock stdlib resources. */
;;;408      if (runtask_id ()) {
0000a0  e59f51e4          LDR      r5,|L1.652|
;;;409        /* RTX running, acquire a mutex. */
;;;410        mutex_wait (*mutex);
0000a4  e59f61dc          LDR      r6,|L1.648|
0000a8  e24dd008          SUB      sp,sp,#8
;;;411      }
;;;412    }
0000ac  e2854e3d          ADD      r4,r5,#0x3d0
                  |L1.176|
0000b0  e59f01c8          LDR      r0,|L1.640|
0000b4  e1a02006          MOV      r2,r6
0000b8  e1a0100d          MOV      r1,sp
0000bc  ebfffffe          BL       os_mbx_wait
0000c0  e3500001          CMP      r0,#1
0000c4  159d0000          LDRNE    r0,[sp,#0]
0000c8  13100102          TSTNE    r0,#0x80000000
0000cc  11a02800          LSLNE    r2,r0,#16
0000d0  11a02822          LSRNE    r2,r2,#16
0000d4  13520000          CMPNE    r2,#0
0000d8  0afffff4          BEQ      |L1.176|
0000dc  e0851182          ADD      r1,r5,r2,LSL #3
0000e0  e9110009          LDMDB    r1,{r0,r3}
0000e4  e10f1000          MRS      r1,APSR ; formerly CPSR
0000e8  e381c0c0          ORR      r12,r1,#0xc0
0000ec  e121f00c          MSR      CPSR_c,r12
0000f0  e5d4c000          LDRB     r12,[r4,#0]  ; hdlpool
0000f4  e20220ff          AND      r2,r2,#0xff
0000f8  e7c4c002          STRB     r12,[r4,r2]
0000fc  e5c42000          STRB     r2,[r4,#0]  ; hdlpool
000100  e121f001          MSR      CPSR_c,r1
000104  e3530000          CMP      r3,#0
000108  112fff33          BLXNE    r3
00010c  eaffffe7          B        |L1.176|
;;;413    
                          ENDP

                  UFX_SetupTaskTimer PROC
;;;363    /* 建立线程定时器的基础设施，该函数仅供BSP调用一次 */
;;;364    void UFX_SetupTaskTimer(void)
000110  e92d4070          PUSH     {r4-r6,lr}
;;;365    {
000114  e59f5168          LDR      r5,|L1.644|
000118  e10f4000          MRS      r4,APSR ; formerly CPSR
00011c  e38400c0          ORR      r0,r4,#0xc0
000120  e121f000          MSR      CPSR_c,r0
000124  e2451001          SUB      r1,r5,#1
000128  e3a00000          MOV      r0,#0
00012c  e3a02028          MOV      r2,#0x28
                  |L1.304|
000130  e280c001          ADD      r12,r0,#1
000134  e2803002          ADD      r3,r0,#2
000138  e5c1c001          STRB     r12,[r1,#1]
00013c  e2522001          SUBS     r2,r2,#1
000140  e2800002          ADD      r0,r0,#2
000144  e5e13002          STRB     r3,[r1,#2]!
000148  1afffff8          BNE      |L1.304|
00014c  e3a00000          MOV      r0,#0
000150  e5c50050          STRB     r0,[r5,#0x50]
000154  e121f004          MSR      CPSR_c,r4
;;;366      static U64 __StackTimerWaiter[1024 / 8] MEM_PI_STACK;
;;;367      CPU_SR_DECL;
;;;368      OS_TID task_id;
;;;369    
;;;370      CPU_ENTER_CRITICAL();
;;;371      __hdl_pool_init();
;;;372      CPU_EXIT_CRITICAL();
;;;373    
;;;374      os_mbx_init(&mb_tsktmr, sizeof(mb_tsktmr));
000158  e59f0120          LDR      r0,|L1.640|
00015c  e3a01e15          MOV      r1,#0x150
000160  ebfffffe          BL       os_mbx_init
;;;375    
;;;376      task_id = os_tsk_create_user(
000164  e59f2124          LDR      r2,|L1.656|
000168  e59f1124          LDR      r1,|L1.660|
00016c  e59f0124          LDR      r0,|L1.664|
000170  e3a03000          MOV      r3,#0
000174  ebfffffe          BL       os_tsk_create0
;;;377                    __ThreadTimerWaiter,
;;;378                    TSK_PRIO_HIGHEST,
;;;379                    __StackTimerWaiter,
;;;380                    sizeof(__StackTimerWaiter));
;;;381    
;;;382      if (task_id == 0) {
000178  e3500000          CMP      r0,#0
;;;383        sys_suspend();
;;;384        return;
;;;385      }
;;;386    }
00017c  18bd8070          POPNE    {r4-r6,pc}
000180  e8bd4070          POP      {r4-r6,lr}            ;383
000184  e59f00fc          LDR      r0,|L1.648|
000188  eafffffe          B        os_dly_wait
;;;387    
                          ENDP

                  UFX_AddTaskTimer PROC
;;;388    /* 启动一个线程定时器 */
;;;389    bool_t UFX_AddTaskTimer(U16 dly, void (*pfn)(void*), void* parg)
00018c  e92d4070          PUSH     {r4-r6,lr}
;;;390    {
000190  e59f50ec          LDR      r5,|L1.644|
000194  e1a03001          MOV      r3,r1
000198  e10f1000          MRS      r1,APSR ; formerly CPSR
00019c  e381c0c0          ORR      r12,r1,#0xc0
0001a0  e121f00c          MSR      CPSR_c,r12
0001a4  e5d54000          LDRB     r4,[r5,#0]  ; hdlpool
0001a8  e3540000          CMP      r4,#0
0001ac  17d5c004          LDRBNE   r12,[r5,r4]
0001b0  15c5c000          STRBNE   r12,[r5,#0]  ; hdlpool
0001b4  e121f001          MSR      CPSR_c,r1
;;;391      CPU_SR_DECL;
;;;392      OS_ID tmr_id = 0;
;;;393      U16 info = 0;
;;;394    
;;;395      CPU_ENTER_CRITICAL();
;;;396      info = __hdl_alloc();
;;;397      CPU_EXIT_CRITICAL();
;;;398      if (info == 0) {
0001b8  e3540000          CMP      r4,#0
;;;399        return false;
0001bc  03a00000          MOVEQ    r0,#0
;;;400      }
;;;401      tsktmr_pool[info - 1].parg = parg;
;;;402      tsktmr_pool[info - 1].pfn = pfn;
;;;403      tmr_id = os_tmr_create(dly, info);
;;;404      if (tmr_id == NULL) {
;;;405        CPU_ENTER_CRITICAL();
;;;406        __hdl_free(info);
;;;407        CPU_EXIT_CRITICAL();
;;;408        return false;
;;;409      }
;;;410      return true;
;;;411    }
0001c0  08bd8070          POPEQ    {r4-r6,pc}
0001c4  e59f10c0          LDR      r1,|L1.652|
0001c8  e0811184          ADD      r1,r1,r4,LSL #3       ;401
0001cc  e901000c          STMDB    r1,{r2,r3}            ;402
0001d0  e1a01004          MOV      r1,r4                 ;403
0001d4  ebfffffe          BL       os_tmr_create
0001d8  e3500000          CMP      r0,#0                 ;404
0001dc  13a00001          MOVNE    r0,#1                 ;410
0001e0  18bd8070          POPNE    {r4-r6,pc}
0001e4  e10f0000          MRS      r0,APSR ; formerly CPSR
0001e8  e38010c0          ORR      r1,r0,#0xc0
0001ec  e121f001          MSR      CPSR_c,r1
0001f0  e5d51000          LDRB     r1,[r5,#0]  ; hdlpool
0001f4  e7c51004          STRB     r1,[r5,r4]
0001f8  e5c54000          STRB     r4,[r5,#0]  ; hdlpool
0001fc  e121f000          MSR      CPSR_c,r0
000200  e3a00000          MOV      r0,#0                 ;408
000204  e8bd8070          POP      {r4-r6,pc}
;;;412    
                          ENDP

                  OS_TIACK PROC
;;;153    to release the timer interrupt logic.  */
;;;154    static inline void OS_TIACK(void)
000208  e59f2068          LDR      r2,|L1.632|
;;;155    {
;;;156      U8 nIRQ = F1C100S_IRQ_TIMER0;
;;;157      // 清除TIMER0模块的IRQ状态标志
;;;158      write32(TIMER_REG_BASE + 0x04, (1 << 0));
00020c  e3a01001          MOV      r1,#1
000210  e3a0000d          MOV      r0,#0xd               ;156
000214  e5821000          STR      r1,[r2,#0]
;;;159      f1c100s_intc_clear_pend(nIRQ);
000218  eafffffe          B        f1c100s_intc_clear_pend
;;;160    }
;;;161    
                          ENDP

                  OS_TINIT PROC
;;;174    This code is executed from the os_sys_init() function.  */
;;;175    static inline void OS_TINIT(void)
00021c  e92d4010          PUSH     {r4,lr}
;;;176    {
;;;177      f1c100s_intc_set_isr(F1C100S_IRQ_TIMER0, timer0_irq);
000220  e59f1074          LDR      r1,|L1.668|
000224  e3a0000d          MOV      r0,#0xd
000228  ebfffffe          BL       f1c100s_intc_set_isr
;;;178      write32(TIMER_REG_BASE + 0x14, OS_TRV);
;;;179      write32(TIMER_REG_BASE + 0x10, 0x04);
00022c  e59f006c          LDR      r0,|L1.672|
000230  e59f106c          LDR      r1,|L1.676|
000234  e2802004          ADD      r2,r0,#4              ;178
000238  e3a03004          MOV      r3,#4
00023c  e5821000          STR      r1,[r2,#0]            ;178
000240  e5803000          STR      r3,[r0,#0]
;;;180      write32(TIMER_REG_BASE + 0x10, read32(TIMER_REG_BASE + 0x10) | (1 << 1));
000244  e5901000          LDR      r1,[r0,#0]
000248  e3811002          ORR      r1,r1,#2
00024c  e5801000          STR      r1,[r0,#0]
                  |L1.592|
000250  e5901000          LDR      r1,[r0,#0]
000254  e3110002          TST      r1,#2
000258  1afffffc          BNE      |L1.592|
;;;181      while (read32(TIMER_REG_BASE + 0x10) & (1 << 1));
;;;182      write32(TIMER_REG_BASE + 0x10, read32(TIMER_REG_BASE + 0x10) | (1 << 0));
00025c  e5901000          LDR      r1,[r0,#0]
;;;183      write32(TIMER_REG_BASE + 0x00, (1 << 0));
000260  e3a02001          MOV      r2,#1
000264  e59f303c          LDR      r3,|L1.680|
000268  e3811001          ORR      r1,r1,#1              ;182
00026c  e5801000          STR      r1,[r0,#0]            ;182
000270  e5832000          STR      r2,[r3,#0]
;;;184    }
000274  e8bd8010          POP      {r4,pc}
;;;185    
                          ENDP

                  |L1.632|
                          DCD      0x01c20c04
                  |L1.636|
                          DCD      ||.data||
                  |L1.640|
                          DCD      ||.bss||+0x280
                  |L1.644|
                          DCD      ||.bss||+0x3d0
                  |L1.648|
                          DCD      0x0000ffff
                  |L1.652|
                          DCD      ||.bss||
                  |L1.656|
                          DCD      STACK
                  |L1.660|
                          DCD      0x00040032
                  |L1.664|
                          DCD      __ThreadTimerWaiter
                  |L1.668|
                          DCD      timer0_irq
                  |L1.672|
                          DCD      0x01c20c10
                  |L1.676|
                          DCD      0x00005dbf
                  |L1.680|
                          DCD      0x01c20c00

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                          THUMB
                  os_tmr_init PROC
;;;106    #ifndef __OS_TMR_INIT
;;;107    void os_tmr_init (void) {
000000  b510              PUSH     {r4,lr}
;;;108      /* Initialize hardware timer as system tick timer. */
;;;109      OS_TINIT();
000002  f7fffffe          BL       OS_TINIT
;;;110    }
000006  bd10              POP      {r4,pc}
;;;111    #endif
                          ENDP

                  os_tmr_force_irq PROC
;;;124    #ifndef __OS_TMR_FORCE_IRQ
;;;125    void os_tmr_force_irq (void) {
000008  b510              PUSH     {r4,lr}
;;;126      /* Force a timer interrupt. */
;;;127      OS_TFIRQ();
00000a  200d              MOVS     r0,#0xd
00000c  f7fffffe          BL       f1c100s_intc_force_irq
;;;128    }
000010  bd10              POP      {r4,pc}
;;;129    #endif
                          ENDP

000012  46c0              MOV      r8,r8
                  os_tmr_inspect_cnt PROC
;;;133    #ifndef __OS_TMR_INSPECT_CNT
;;;134    U32 os_tmr_inspect_cnt (void) {
000014  482c              LDR      r0,|L2.200|
;;;135      /* Inspect current value of rtx timer. */
;;;136      return (OS_TVAL);
000016  6980              LDR      r0,[r0,#0x18]
000018  492c              LDR      r1,|L2.204|
00001a  1a08              SUBS     r0,r1,r0
;;;137    }
00001c  4770              BX       lr
;;;138    #endif
                          ENDP

00001e  46c0              MOV      r8,r8
                  os_tmr_inspect_ovf PROC
;;;142    #ifndef __OS_TMR_INSPECT_OVF
;;;143    BOOL os_tmr_inspect_ovf (void) {
000020  4829              LDR      r0,|L2.200|
;;;144      /* Inspect current state of timer overflow flag. */
;;;145      return (OS_TOVF);
000022  6840              LDR      r0,[r0,#4]
000024  07c0              LSLS     r0,r0,#31
000026  0fc0              LSRS     r0,r0,#31
;;;146    }
000028  4770              BX       lr
;;;147    #endif
                          ENDP

00002a  46c0              MOV      r8,r8
                  os_irq_ack_lock PROC
;;;151    #ifndef __OS_IRQ_ACK_LOCK
;;;152    void os_irq_ack_lock (void) {
00002c  b510              PUSH     {r4,lr}
;;;153      /* Acknowledge and disable a timer interrupt. */
;;;154      OS_TIACK();
00002e  f7fffffe          BL       OS_TIACK
;;;155      OS_LOCK();
000032  200d              MOVS     r0,#0xd
000034  f7fffffe          BL       f1c100s_intc_disable_irq
;;;156    }
000038  bd10              POP      {r4,pc}
;;;157    #endif
                          ENDP

00003a  46c0              MOV      r8,r8
                  __SWI_5 PROC
;;;162    void __swi(5) tsk_lock (void);
;;;163    void __SWI_5           (void) {
00003c  b510              PUSH     {r4,lr}
;;;164      /* Disable RTX System Tick Timer interrupts. */
;;;165      OS_LOCK();
00003e  200d              MOVS     r0,#0xd
000040  f7fffffe          BL       f1c100s_intc_disable_irq
;;;166    }
000044  bd10              POP      {r4,pc}
;;;167    #endif
                          ENDP

000046  46c0              MOV      r8,r8
                  tsk_unlock PROC
;;;171    #ifndef __TSK_UNLOCK
;;;172    void tsk_unlock (void) {
000048  b510              PUSH     {r4,lr}
;;;173      /* Enable RTX System Tick Timer Interrupts. */
;;;174      OS_UNLOCK();
00004a  200d              MOVS     r0,#0xd
00004c  f7fffffe          BL       f1c100s_intc_enable_irq
;;;175    }
000050  bd10              POP      {r4,pc}
;;;176    #endif
                          ENDP

000052  46c0              MOV      r8,r8
                  os_stk_check PROC
;;;355    #if (__ARM__ || __CR__) && OS_STKCHECK == 0
;;;356     void os_stk_check  (U32 stk) {;}
000054  4770              BX       lr
;;;357    #endif
                          ENDP

000056  46c0              MOV      r8,r8
                  __user_perthread_libspace PROC
;;;376    
;;;377    void *__user_perthread_libspace (void) {
000058  b510              PUSH     {r4,lr}
;;;378      /* Provide a separate libspace for each task. */
;;;379      U32 idx;
;;;380    
;;;381      idx = runtask_id ();
00005a  f7fffffe          BL       os_tsk_self
;;;382      if (idx == 0) {
00005e  2800              CMP      r0,#0
000060  d005              BEQ      |L2.110|
;;;383        /* RTX not running yet. */
;;;384        return (&__libspace_start);
;;;385      }
;;;386      return ((void *)&std_libspace[idx-1]);
000062  2160              MOVS     r1,#0x60
000064  4348              MULS     r0,r1,r0
000066  491a              LDR      r1,|L2.208|
000068  1840              ADDS     r0,r0,r1
00006a  3860              SUBS     r0,r0,#0x60
;;;387    }
00006c  bd10              POP      {r4,pc}
                  |L2.110|
00006e  4819              LDR      r0,|L2.212|
000070  bd10              POP      {r4,pc}
;;;388    
                          ENDP

000072  46c0              MOV      r8,r8
                  _mutex_initialize PROC
;;;390    
;;;391    int _mutex_initialize (OS_ID *mutex) {
000074  4a18              LDR      r2,|L2.216|
000076  b510              PUSH     {r4,lr}
;;;392      /* Allocate and initialize a system mutex. */
;;;393    
;;;394      if (nr_mutex >= OS_MUTEXCNT) {
000078  6851              LDR      r1,[r2,#4]  ; nr_mutex
00007a  2910              CMP      r1,#0x10
00007c  d300              BCC      |L2.128|
                  |L2.126|
;;;395        /* If you are here, you need to increase the number OS_MUTEXCNT. */
;;;396        for (;;);
00007e  e7fe              B        |L2.126|
                  |L2.128|
;;;397      }
;;;398      *mutex = &std_libmutex[nr_mutex++];
000080  4c16              LDR      r4,|L2.220|
000082  010b              LSLS     r3,r1,#4              ;396
000084  191b              ADDS     r3,r3,r4
000086  6003              STR      r3,[r0,#0]
000088  1c49              ADDS     r1,r1,#1
00008a  0018              MOVS     r0,r3
;;;399      mutex_init (*mutex);
00008c  6051              STR      r1,[r2,#4]  ; nr_mutex
00008e  f7fffffe          BL       os_mut_init
;;;400      return (1);
000092  2001              MOVS     r0,#1
;;;401    }
000094  bd10              POP      {r4,pc}
;;;402    
                          ENDP

000096  46c0              MOV      r8,r8
                  _mutex_acquire PROC
                  |symbol_number.51|
;;;405    
;;;406    __used void _mutex_acquire (OS_ID *mutex) {
000098  b510              PUSH     {r4,lr}
00009a  0004              MOVS     r4,r0
;;;407      /* Acquire a system mutex, lock stdlib resources. */
;;;408      if (runtask_id ()) {
00009c  f7fffffe          BL       os_tsk_self
0000a0  2800              CMP      r0,#0
0000a2  d003              BEQ      |L2.172|
;;;409        /* RTX running, acquire a mutex. */
;;;410        mutex_wait (*mutex);
0000a4  490e              LDR      r1,|L2.224|
0000a6  6820              LDR      r0,[r4,#0]
0000a8  f7fffffe          BL       os_mut_wait
                  |L2.172|
;;;411      }
;;;412    }
0000ac  bd10              POP      {r4,pc}
;;;413    
                          ENDP

0000ae  46c0              MOV      r8,r8
                  _mutex_release PROC
                  |symbol_number.53|
;;;416    
;;;417    __used void _mutex_release (OS_ID *mutex) {
0000b0  b510              PUSH     {r4,lr}
0000b2  0004              MOVS     r4,r0
;;;418      /* Release a system mutex, unlock stdlib resources. */
;;;419      if (runtask_id ()) {
0000b4  f7fffffe          BL       os_tsk_self
0000b8  2800              CMP      r0,#0
0000ba  d002              BEQ      |L2.194|
;;;420        /* RTX runnning, release a mutex. */
;;;421        mutex_rel (*mutex);
0000bc  6820              LDR      r0,[r4,#0]
0000be  f7fffffe          BL       os_mut_release
                  |L2.194|
;;;422      }
;;;423    }
0000c2  bd10              POP      {r4,pc}
;;;424    
                          ENDP

                  PrintExceptionMessage PROC
;;;462    
;;;463    void PrintExceptionMessage(ExceptionFrameType* frame, uint32_t cpsr)
0000c4  4770              BX       lr
;;;464    {
;;;465      DBG_PRINT("R0   = %08X\n", frame->R0);
;;;466      DBG_PRINT("R1   = %08X\n", frame->R1);
;;;467      DBG_PRINT("R2   = %08X\n", frame->R2);
;;;468      DBG_PRINT("R3   = %08X\n", frame->R3);
;;;469      DBG_PRINT("R4   = %08X\n", frame->R4);
;;;470      DBG_PRINT("R5   = %08X\n", frame->R5);
;;;471      DBG_PRINT("R6   = %08X\n", frame->R6);
;;;472      DBG_PRINT("R7   = %08X\n", frame->R7);
;;;473      DBG_PRINT("R8   = %08X\n", frame->R8);
;;;474      DBG_PRINT("R9   = %08X\n", frame->R9);
;;;475      DBG_PRINT("R10  = %08X\n", frame->R10);
;;;476      DBG_PRINT("R11  = %08X\n", frame->R11);
;;;477      DBG_PRINT("R12  = %08X\n", frame->R12);
;;;478      DBG_PRINT("SP   = %08X\n", (uint32_t)frame);
;;;479      DBG_PRINT("LR   = %08X\n", frame->LR);
;;;480      DBG_PRINT("SPSR = %08X\n", frame->SPSR);
;;;481      DBG_PRINT("PC   = %08X\n", frame->PC);
;;;482      DBG_PRINT("CPSR = %08X\n", cpsr);
;;;483    }
;;;484    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L2.200|
                          DCD      0x01c20c00
                  |L2.204|
                          DCD      0x00005dbf
                  |L2.208|
                          DCD      ||.bss||+0x424
                  |L2.212|
                          DCD      __libspace_start
                  |L2.216|
                          DCD      ||.data||
                  |L2.220|
                          DCD      ||.bss||+0x1324
                  |L2.224|
                          DCD      0x0000ffff

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tsktmr_pool
                          %        640
                  mb_tsktmr
                          %        336
                  hdlpool
                          %        84
                  std_libspace
                          %        3840
                  std_libmutex
                          %        256

                          AREA ||area_number.5||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.bss||
                  mp_tcb
                          %        2252

                          AREA ||area_number.6||, DATA, NOINIT, ALIGN=3

                          EXPORTAS ||area_number.6||, ||.bss||
                  mp_stk
                          %        2064

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.bss||
                  os_fifo
                          %        772

                          AREA ||area_number.8||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.bss||
                  os_active_TCB
                          %        160

                          AREA ||area_number.9||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.bss||
                  mp_tmr
                          %        652

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  os_maxtaskrun
000000  0028              DCW      0x0028

                          AREA ||area_number.12||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.constdata||
                  os_stackinfo
                          DCD      0x00280800

                          AREA ||area_number.13||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.constdata||
                  os_rrobin
                          DCD      0x00010005

                          AREA ||area_number.14||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.constdata||
                  os_clockrate
                  |symbol_number.31|
                          DCD      0x000003e8
                  os_timernum
                  |symbol_number.32|
                          DCD      0x00000050

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.constdata||
                  mp_tcb_size
000000  08cc              DCW      0x08cc

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.constdata||
                  mp_stk_size
                          DCD      0x00000810

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  os_fifo_size
000000  60                DCB      0x60

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.18||, ||.constdata||
                  mp_tmr_size
000000  028c              DCW      0x028c

                          AREA ||.data||, DATA, ALIGN=2

                  backup_nirq
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  nr_mutex
                          DCD      0x00000000

                          AREA ||area_number.20||, DATA, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.data||
                  m_tmr
                          DCD      mp_tmr

                          AREA STACK, DATA, NOINIT, ALIGN=3

                  __StackTimerWaiter
                          %        1024

;*** Start embedded assembler ***

#line 1 "..\\system\\RTX_Conf_F1C100s.c"
	AREA ||.emb_text||, CODE
	ARM
	EXPORT |IRQ_Handler|
	IMPORT |os_clock_interrupt|
#line 212
|IRQ_Handler| PROC
#line 213

 
 PRESERVE8
 ARM

 
 PUSH {R0-R3,R12,LR}

 
 LDR R1, =0x01C20400 
 LDR R0, [R1, #0x00] 
 LSL R0, R0, #24
 LSR R0, R0, #26
 LDR R2, = |backup_nirq|
 STRB R0, [R2] 

 
 LSR R2, R0, #5
 LSL R2, R2, #2
 ADD R1, R1, R2
 LDR R2, [R1, #0x50] 
 MOV R12, #1
 AND R3, R0, #0x1F
 BIC R3, R2, R12, LSL R3
 STR R3, [R1, #0x50] 

 
 CMP R0, #(13)
 POP {R0-R3,R12,LR}

 
 LDRNE PC, = |os_def_interrupt|

 
 LDR PC, = |os_clock_interrupt|

 
 B .
	ENDP

;*** End   embedded assembler ***
