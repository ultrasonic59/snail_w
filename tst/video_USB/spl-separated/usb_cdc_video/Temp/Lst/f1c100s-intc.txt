; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\f1c100s-intc.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\f1c100s-intc.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\f1c100s-intc.crf ..\machine\f1c100s-intc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  f1c100s_intc_get_nirq PROC
;;;67     */
;;;68     uint8_t f1c100s_intc_get_nirq(void)
000000  e59f0398          LDR      r0,|L1.928|
;;;69     {
;;;70       return ((INTC->INTC_VECTOR_REG >> 2) & 0x3F);
000004  e5900000          LDR      r0,[r0,#0]
000008  e3a0103f          MOV      r1,#0x3f
00000c  e0010120          AND      r0,r1,r0,LSR #2
;;;71     }
000010  e12fff1e          BX       lr
;;;72     
                          ENDP

                  f1c100s_intc_dispatch PROC
;;;77     */
;;;78     void f1c100s_intc_dispatch(uint8_t nIRQ)
000014  e92d4070          PUSH     {r4-r6,lr}
;;;79     {
000018  e1a04000          MOV      r4,r0
;;;80       IRQHandleTypeDef handle = irq_table[nIRQ];
00001c  e59f0380          LDR      r0,|L1.932|
000020  e7905104          LDR      r5,[r0,r4,LSL #2]
;;;81       if (handle)
000024  e3550000          CMP      r5,#0
000028  0a000000          BEQ      |L1.48|
;;;82         handle();
00002c  e12fff35          BLX      r5
                  |L1.48|
;;;83     }
000030  e8bd8070          POP      {r4-r6,pc}
;;;84     
                          ENDP

                  f1c100s_intc_set_isr PROC
;;;90     */
;;;91     void f1c100s_intc_set_isr(uint8_t nIRQ, void (*handle)(void))
000034  e3500040          CMP      r0,#0x40
;;;92     {
;;;93       if (nIRQ < COUNTOF(irq_table)) {
000038  2a000001          BCS      |L1.68|
;;;94         irq_table[nIRQ] = handle;
00003c  e59f2360          LDR      r2,|L1.932|
000040  e7821100          STR      r1,[r2,r0,LSL #2]
                  |L1.68|
;;;95       }
;;;96     }
000044  e12fff1e          BX       lr
;;;97     
                          ENDP

                  f1c100s_intc_enable_irq PROC
;;;102    */
;;;103    void f1c100s_intc_enable_irq(uint8_t nIRQ)
000048  e92d4070          PUSH     {r4-r6,lr}
;;;104    {
00004c  e1a04000          MOV      r4,r0
;;;105      CPU_SR_DECL;
;;;106    
;;;107      CPU_ENTER_CRITICAL();
000050  e1a00000          MOV      r0,r0
000054  ebfffffe          BL       __fast_enter_critical
000058  e1a05000          MOV      r5,r0
00005c  e1a00000          MOV      r0,r0
;;;108      INTC->INTC_EN_REG[nIRQ / 32] |= (1 << (nIRQ % 32));
000060  e1a02fc4          ASR      r2,r4,#31
000064  e0842da2          ADD      r2,r4,r2,LSR #27
000068  e1a022c2          ASR      r2,r2,#5
00006c  e59f3334          LDR      r3,|L1.936|
000070  e7932102          LDR      r2,[r3,r2,LSL #2]
000074  e1a01004          MOV      r1,r4
000078  e1a03fc4          ASR      r3,r4,#31
00007c  e0843da3          ADD      r3,r4,r3,LSR #27
000080  e1a032c3          ASR      r3,r3,#5
000084  e0443283          SUB      r3,r4,r3,LSL #5
000088  e3a0c001          MOV      r12,#1
00008c  e182231c          ORR      r2,r2,r12,LSL r3
000090  e1a00004          MOV      r0,r4
000094  e1a03fc4          ASR      r3,r4,#31
000098  e0843da3          ADD      r3,r4,r3,LSR #27
00009c  e1a032c3          ASR      r3,r3,#5
0000a0  e59fc300          LDR      r12,|L1.936|
0000a4  e78c2103          STR      r2,[r12,r3,LSL #2]
;;;109      CPU_EXIT_CRITICAL();
0000a8  e1a00000          MOV      r0,r0
0000ac  e1a00005          MOV      r0,r5
0000b0  ebfffffe          BL       __fast_exit_critical
0000b4  e1a00000          MOV      r0,r0
;;;110    }
0000b8  e8bd8070          POP      {r4-r6,pc}
;;;111    
                          ENDP

                  f1c100s_intc_disable_irq PROC
;;;116    */
;;;117    void f1c100s_intc_disable_irq(uint8_t nIRQ)
0000bc  e92d4070          PUSH     {r4-r6,lr}
;;;118    {
0000c0  e1a04000          MOV      r4,r0
;;;119      CPU_SR_DECL;
;;;120    
;;;121      CPU_ENTER_CRITICAL();
0000c4  e1a00000          MOV      r0,r0
0000c8  ebfffffe          BL       __fast_enter_critical
0000cc  e1a05000          MOV      r5,r0
0000d0  e1a00000          MOV      r0,r0
;;;122      INTC->INTC_EN_REG[nIRQ / 32] &= ~(1 << (nIRQ % 32));
0000d4  e1a02fc4          ASR      r2,r4,#31
0000d8  e0842da2          ADD      r2,r4,r2,LSR #27
0000dc  e1a022c2          ASR      r2,r2,#5
0000e0  e59f32c0          LDR      r3,|L1.936|
0000e4  e7932102          LDR      r2,[r3,r2,LSL #2]
0000e8  e1a01004          MOV      r1,r4
0000ec  e1a03fc4          ASR      r3,r4,#31
0000f0  e0843da3          ADD      r3,r4,r3,LSR #27
0000f4  e1a032c3          ASR      r3,r3,#5
0000f8  e0443283          SUB      r3,r4,r3,LSL #5
0000fc  e3a0c001          MOV      r12,#1
000100  e1c2231c          BIC      r2,r2,r12,LSL r3
000104  e1a00004          MOV      r0,r4
000108  e1a03fc4          ASR      r3,r4,#31
00010c  e0843da3          ADD      r3,r4,r3,LSR #27
000110  e1a032c3          ASR      r3,r3,#5
000114  e59fc28c          LDR      r12,|L1.936|
000118  e78c2103          STR      r2,[r12,r3,LSL #2]
;;;123      CPU_EXIT_CRITICAL();
00011c  e1a00000          MOV      r0,r0
000120  e1a00005          MOV      r0,r5
000124  ebfffffe          BL       __fast_exit_critical
000128  e1a00000          MOV      r0,r0
;;;124    }
00012c  e8bd8070          POP      {r4-r6,pc}
;;;125    
                          ENDP

                  f1c100s_intc_mask_irq PROC
;;;130    */
;;;131    void f1c100s_intc_mask_irq(uint8_t nIRQ)
000130  e92d4070          PUSH     {r4-r6,lr}
;;;132    {
000134  e1a04000          MOV      r4,r0
;;;133      CPU_SR_DECL;
;;;134    
;;;135      CPU_ENTER_CRITICAL();
000138  e1a00000          MOV      r0,r0
00013c  ebfffffe          BL       __fast_enter_critical
000140  e1a05000          MOV      r5,r0
000144  e1a00000          MOV      r0,r0
;;;136      INTC->INTC_MASK_REG[nIRQ / 32] |= (1 << (nIRQ % 32));
000148  e1a02fc4          ASR      r2,r4,#31
00014c  e0842da2          ADD      r2,r4,r2,LSR #27
000150  e1a022c2          ASR      r2,r2,#5
000154  e59f3250          LDR      r3,|L1.940|
000158  e7932102          LDR      r2,[r3,r2,LSL #2]
00015c  e1a01004          MOV      r1,r4
000160  e1a03fc4          ASR      r3,r4,#31
000164  e0843da3          ADD      r3,r4,r3,LSR #27
000168  e1a032c3          ASR      r3,r3,#5
00016c  e0443283          SUB      r3,r4,r3,LSL #5
000170  e3a0c001          MOV      r12,#1
000174  e182231c          ORR      r2,r2,r12,LSL r3
000178  e1a00004          MOV      r0,r4
00017c  e1a03fc4          ASR      r3,r4,#31
000180  e0843da3          ADD      r3,r4,r3,LSR #27
000184  e1a032c3          ASR      r3,r3,#5
000188  e59fc21c          LDR      r12,|L1.940|
00018c  e78c2103          STR      r2,[r12,r3,LSL #2]
;;;137      CPU_EXIT_CRITICAL();
000190  e1a00000          MOV      r0,r0
000194  e1a00005          MOV      r0,r5
000198  ebfffffe          BL       __fast_exit_critical
00019c  e1a00000          MOV      r0,r0
;;;138    }
0001a0  e8bd8070          POP      {r4-r6,pc}
;;;139    
                          ENDP

                  f1c100s_intc_unmask_irq PROC
;;;144    */
;;;145    void f1c100s_intc_unmask_irq(uint8_t nIRQ)
0001a4  e92d4070          PUSH     {r4-r6,lr}
;;;146    {
0001a8  e1a04000          MOV      r4,r0
;;;147      CPU_SR_DECL;
;;;148    
;;;149      CPU_ENTER_CRITICAL();
0001ac  e1a00000          MOV      r0,r0
0001b0  ebfffffe          BL       __fast_enter_critical
0001b4  e1a05000          MOV      r5,r0
0001b8  e1a00000          MOV      r0,r0
;;;150      INTC->INTC_MASK_REG[nIRQ / 32] &= ~(1 << (nIRQ % 32));
0001bc  e1a02fc4          ASR      r2,r4,#31
0001c0  e0842da2          ADD      r2,r4,r2,LSR #27
0001c4  e1a022c2          ASR      r2,r2,#5
0001c8  e59f31dc          LDR      r3,|L1.940|
0001cc  e7932102          LDR      r2,[r3,r2,LSL #2]
0001d0  e1a01004          MOV      r1,r4
0001d4  e1a03fc4          ASR      r3,r4,#31
0001d8  e0843da3          ADD      r3,r4,r3,LSR #27
0001dc  e1a032c3          ASR      r3,r3,#5
0001e0  e0443283          SUB      r3,r4,r3,LSL #5
0001e4  e3a0c001          MOV      r12,#1
0001e8  e1c2231c          BIC      r2,r2,r12,LSL r3
0001ec  e1a00004          MOV      r0,r4
0001f0  e1a03fc4          ASR      r3,r4,#31
0001f4  e0843da3          ADD      r3,r4,r3,LSR #27
0001f8  e1a032c3          ASR      r3,r3,#5
0001fc  e59fc1a8          LDR      r12,|L1.940|
000200  e78c2103          STR      r2,[r12,r3,LSL #2]
;;;151      CPU_EXIT_CRITICAL();
000204  e1a00000          MOV      r0,r0
000208  e1a00005          MOV      r0,r5
00020c  ebfffffe          BL       __fast_exit_critical
000210  e1a00000          MOV      r0,r0
;;;152    }
000214  e8bd8070          POP      {r4-r6,pc}
;;;153    
                          ENDP

                  f1c100s_intc_force_irq PROC
;;;158    */
;;;159    void f1c100s_intc_force_irq(uint8_t nIRQ)
000218  e92d4070          PUSH     {r4-r6,lr}
;;;160    {
00021c  e1a04000          MOV      r4,r0
;;;161      CPU_SR_DECL;
;;;162    
;;;163      // 这里只负责置位，必须由IRQ处理函数清除，否则会连续进入中断！
;;;164      CPU_ENTER_CRITICAL();
000220  e1a00000          MOV      r0,r0
000224  ebfffffe          BL       __fast_enter_critical
000228  e1a05000          MOV      r5,r0
00022c  e1a00000          MOV      r0,r0
;;;165      INTC->INTC_FF_REG[nIRQ / 32] = (1 << (nIRQ % 32));
000230  e1a00004          MOV      r0,r4
000234  e1a02fc4          ASR      r2,r4,#31
000238  e0842da2          ADD      r2,r4,r2,LSR #27
00023c  e1a022c2          ASR      r2,r2,#5
000240  e0442282          SUB      r2,r4,r2,LSL #5
000244  e3a03001          MOV      r3,#1
000248  e1a02213          LSL      r2,r3,r2
00024c  e1a01004          MOV      r1,r4
000250  e1a03fc4          ASR      r3,r4,#31
000254  e0843da3          ADD      r3,r4,r3,LSR #27
000258  e1a032c3          ASR      r3,r3,#5
00025c  e59fc14c          LDR      r12,|L1.944|
000260  e78c2103          STR      r2,[r12,r3,LSL #2]
;;;166      CPU_EXIT_CRITICAL();
000264  e1a00000          MOV      r0,r0
000268  e1a00005          MOV      r0,r5
00026c  ebfffffe          BL       __fast_exit_critical
000270  e1a00000          MOV      r0,r0
;;;167    }
000274  e8bd8070          POP      {r4-r6,pc}
;;;168    
                          ENDP

                  f1c100s_intc_clear_pend PROC
;;;173    */
;;;174    void f1c100s_intc_clear_pend(uint8_t nIRQ)
000278  e92d4010          PUSH     {r4,lr}
;;;175    {
;;;176      INTC->INTC_PEND_REG[nIRQ / 32] = (1 << (nIRQ % 32));
00027c  e1a01000          MOV      r1,r0
000280  e1a03fc0          ASR      r3,r0,#31
000284  e0803da3          ADD      r3,r0,r3,LSR #27
000288  e1a032c3          ASR      r3,r3,#5
00028c  e0403283          SUB      r3,r0,r3,LSL #5
000290  e3a0c001          MOV      r12,#1
000294  e1a0331c          LSL      r3,r12,r3
000298  e1a02000          MOV      r2,r0
00029c  e1a0cfc0          ASR      r12,r0,#31
0002a0  e080cdac          ADD      r12,r0,r12,LSR #27
0002a4  e1a0c2cc          ASR      r12,r12,#5
0002a8  e59f4104          LDR      r4,|L1.948|
0002ac  e784310c          STR      r3,[r4,r12,LSL #2]
;;;177    }
0002b0  e8bd8010          POP      {r4,pc}
;;;178    
                          ENDP

                  f1c100s_intc_init PROC
;;;183    */
;;;184    void f1c100s_intc_init(void)
0002b4  e92d4010          PUSH     {r4,lr}
;;;185    {
;;;186      CPU_SR_DECL;
;;;187    
;;;188      CPU_ENTER_CRITICAL();
0002b8  e1a00000          MOV      r0,r0
0002bc  ebfffffe          BL       __fast_enter_critical
0002c0  e1a04000          MOV      r4,r0
0002c4  e1a00000          MOV      r0,r0
;;;189      INTC->INTC_EN_REG[0] = INTC->INTC_EN_REG[1] = 0;
0002c8  e3a00000          MOV      r0,#0
0002cc  e59f10cc          LDR      r1,|L1.928|
0002d0  e5810024          STR      r0,[r1,#0x24]
0002d4  e2811020          ADD      r1,r1,#0x20
0002d8  e5810000          STR      r0,[r1,#0]
;;;190      INTC->INTC_MASK_REG[0] = INTC->INTC_MASK_REG[1] = 0;
0002dc  e2411020          SUB      r1,r1,#0x20
0002e0  e5810034          STR      r0,[r1,#0x34]
0002e4  e2811030          ADD      r1,r1,#0x30
0002e8  e5810000          STR      r0,[r1,#0]
;;;191      INTC->INTC_FF_REG[0] = INTC->INTC_FF_REG[1] = 0;
0002ec  e2411030          SUB      r1,r1,#0x30
0002f0  e5810054          STR      r0,[r1,#0x54]
0002f4  e2811050          ADD      r1,r1,#0x50
0002f8  e5810000          STR      r0,[r1,#0]
;;;192      INTC->INTC_RESP_REG[0] = INTC->INTC_RESP_REG[1] = 0;
0002fc  e2411050          SUB      r1,r1,#0x50
000300  e5810044          STR      r0,[r1,#0x44]
000304  e2811040          ADD      r1,r1,#0x40
000308  e5810000          STR      r0,[r1,#0]
;;;193      INTC->INTC_PEND_REG[0] = INTC->INTC_PEND_REG[1] = ~0UL;
00030c  e3e00000          MVN      r0,#0
000310  e1c11b20          BIC      r1,r1,r0,LSR #22
000314  e5810014          STR      r0,[r1,#0x14]
000318  e0411200          SUB      r1,r1,r0,LSL #4
00031c  e5810000          STR      r0,[r1,#0]
;;;194      INTC->INTC_BASE_ADDR_REG = 0;
000320  e3a00000          MOV      r0,#0
000324  e241100c          SUB      r1,r1,#0xc
000328  e5810000          STR      r0,[r1,#0]
;;;195      INTC->NMI_INT_CTRL_REG = 0;
00032c  e2811008          ADD      r1,r1,#8
000330  e5810000          STR      r0,[r1,#0]
;;;196      CPU_EXIT_CRITICAL();
000334  e1a00000          MOV      r0,r0
000338  e1a00004          MOV      r0,r4
00033c  ebfffffe          BL       __fast_exit_critical
000340  e1a00000          MOV      r0,r0
;;;197      for (int i = 0; i < COUNTOF(irq_table); i++) {
000344  e3a00000          MOV      r0,#0
000348  ea000003          B        |L1.860|
                  |L1.844|
;;;198        irq_table[i] = 0;
00034c  e3a01000          MOV      r1,#0
000350  e59f204c          LDR      r2,|L1.932|
000354  e7821100          STR      r1,[r2,r0,LSL #2]
000358  e2800001          ADD      r0,r0,#1              ;197
                  |L1.860|
00035c  e3500040          CMP      r0,#0x40              ;197
000360  3afffff9          BCC      |L1.844|
;;;199      }
;;;200    }
000364  e8bd8010          POP      {r4,pc}
;;;201    uint32_t get_en_intc(uint8_t num)
                          ENDP

                  get_en_intc PROC
000368  e1a01000          MOV      r1,r0
;;;202    {
;;;203    return INTC->INTC_EN_REG[num];	
00036c  e59f0034          LDR      r0,|L1.936|
000370  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;204    }
000374  e12fff1e          BX       lr
;;;205    uint32_t get_mask_intc(uint8_t num)
                          ENDP

                  get_mask_intc PROC
000378  e1a01000          MOV      r1,r0
;;;206    {
;;;207    return INTC->INTC_MASK_REG[num];
00037c  e59f0028          LDR      r0,|L1.940|
000380  e7900101          LDR      r0,[r0,r1,LSL #2]
;;;208    }
000384  e12fff1e          BX       lr
;;;209    
                          ENDP

                  __fast_enter_critical PROC
;;;52     #define CPU_ENTER_CRITICAL()  do{cpu_sr = __fast_enter_critical();}while(0)
;;;53     static inline ubase_t __fast_enter_critical(void)
000388  e10f0000          MRS      r0,APSR ; formerly CPSR
;;;54     {
;;;55       ubase_t cpu_sr, tmp_sr;
;;;56       __asm volatile {
;;;57         MRS cpu_sr, CPSR
;;;58         ORR tmp_sr, cpu_sr, #0xC0
00038c  e38010c0          ORR      r1,r0,#0xc0
;;;59         MSR CPSR_c, tmp_sr
000390  e121f001          MSR      CPSR_c,r1
;;;60       }
;;;61       return cpu_sr;
;;;62     }
000394  e12fff1e          BX       lr
;;;63     #endif
                          ENDP

                  __fast_exit_critical PROC
;;;68     #define CPU_EXIT_CRITICAL()   do{__fast_exit_critical(cpu_sr);}while(0)
;;;69     static inline void __fast_exit_critical(ubase_t cpu_sr)
000398  e121f000          MSR      CPSR_c,r0
;;;70     {
;;;71       __asm volatile {
;;;72         MSR CPSR_c, cpu_sr
;;;73       }
;;;74     }
00039c  e12fff1e          BX       lr
;;;75     #endif
                          ENDP

                  |L1.928|
                          DCD      0x01c20400
                  |L1.932|
                          DCD      irq_table
                  |L1.936|
                          DCD      0x01c20420
                  |L1.940|
                          DCD      0x01c20430
                  |L1.944|
                          DCD      0x01c20450
                  |L1.948|
                          DCD      0x01c20410

                          AREA ||.bss||, DATA, NOINIT, ALIGN=5

                  irq_table
                  ||__tagsym$$used||
                          %        256
