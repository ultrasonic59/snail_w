; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\target_f1c100s.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\target_f1c100s.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\target_f1c100s.crf ..\system\target_F1C100s.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  target_reset PROC
;;;8      
;;;9      void target_reset(void)
000000  e92d4010          PUSH     {r4,lr}
;;;10     {
;;;11       CPU_SR_DECL;
;;;12     
;;;13       bReset = true;
000004  e3a00001          MOV      r0,#1
000008  e59f109c          LDR      r1,|L1.172|
00000c  e5c10000          STRB     r0,[r1,#0]  ; bReset
;;;14       CPU_ENTER_CRITICAL();
000010  e1a00000          MOV      r0,r0
000014  ebfffffe          BL       __fast_enter_critical
000018  e1a04000          MOV      r4,r0
00001c  e1a00000          MOV      r0,r0
;;;15       CPU_EXIT_CRITICAL();
000020  e1a00000          MOV      r0,r0
000024  e1a00000          MOV      r0,r0
000028  e121f004          MSR      CPSR_c,r4
00002c  e1a00000          MOV      r0,r0
000030  e1a00000          MOV      r0,r0
;;;16       util_halt();
000034  ebfffffe          BL       util_halt
;;;17     }
000038  e8bd8010          POP      {r4,pc}
;;;18     
                          ENDP

                  target_wdt_setup PROC
;;;19     void target_wdt_setup(void)
00003c  e92d4010          PUSH     {r4,lr}
;;;20     {
;;;21       CPU_SR_DECL;
;;;22     
;;;23       CPU_ENTER_CRITICAL();
000040  e1a00000          MOV      r0,r0
000044  ebfffffe          BL       __fast_enter_critical
000048  e1a00000          MOV      r0,r0
;;;24       CPU_EXIT_CRITICAL();
00004c  e1a00000          MOV      r0,r0
000050  e1a00000          MOV      r0,r0
000054  e121f000          MSR      CPSR_c,r0
000058  e1a00000          MOV      r0,r0
00005c  e1a00000          MOV      r0,r0
;;;25     }
000060  e8bd8010          POP      {r4,pc}
;;;26     
                          ENDP

                  target_wdt_feed PROC
;;;27     void target_wdt_feed(void)
000064  e92d4010          PUSH     {r4,lr}
;;;28     {
;;;29       CPU_SR_DECL;
;;;30     
;;;31       if (!bReset) {
000068  e59f103c          LDR      r1,|L1.172|
00006c  e5d11000          LDRB     r1,[r1,#0]  ; bReset
000070  e3510000          CMP      r1,#0
000074  1a000007          BNE      |L1.152|
;;;32         CPU_ENTER_CRITICAL();
000078  e1a00000          MOV      r0,r0
00007c  ebfffffe          BL       __fast_enter_critical
000080  e1a00000          MOV      r0,r0
;;;33         CPU_EXIT_CRITICAL();
000084  e1a00000          MOV      r0,r0
000088  e1a00000          MOV      r0,r0
00008c  e121f000          MSR      CPSR_c,r0
000090  e1a00000          MOV      r0,r0
000094  e1a00000          MOV      r0,r0
                  |L1.152|
;;;34       }
;;;35     }
000098  e8bd8010          POP      {r4,pc}
;;;36     
                          ENDP

                  __fast_enter_critical PROC
;;;52     #define CPU_ENTER_CRITICAL()  do{cpu_sr = __fast_enter_critical();}while(0)
;;;53     static inline ubase_t __fast_enter_critical(void)
00009c  e10f0000          MRS      r0,APSR ; formerly CPSR
;;;54     {
;;;55       ubase_t cpu_sr, tmp_sr;
;;;56       __asm volatile {
;;;57         MRS cpu_sr, CPSR
;;;58         ORR tmp_sr, cpu_sr, #0xC0
0000a0  e38010c0          ORR      r1,r0,#0xc0
;;;59         MSR CPSR_c, tmp_sr
0000a4  e121f001          MSR      CPSR_c,r1
;;;60       }
;;;61       return cpu_sr;
;;;62     }
0000a8  e12fff1e          BX       lr
;;;63     #endif
                          ENDP

                  |L1.172|
                          DCD      bReset

                          AREA ||.data||, DATA, ALIGN=0

                  bReset
000000  00                DCB      0x00
