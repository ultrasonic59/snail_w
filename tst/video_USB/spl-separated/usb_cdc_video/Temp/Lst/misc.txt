; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\misc.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\misc.d --cpu=ARM9E --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -I.\..\display -I.\..\lib\display_gfx -I.\..\lib\printf -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V1 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\misc.crf users\misc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  print_int_mask PROC
;;;10     
;;;11     void print_int_mask()
000000  e92d4010          PUSH     {r4,lr}
;;;12     {
;;;13     	uint32_t tmp;
;;;14     printf("\r\n====print_int_mask======");
000004  e28f0e12          ADR      r0,|L1.300|
000008  ebfffffe          BL       __2printf
;;;15     tmp= get_en_intc(0);
00000c  e3a00000          MOV      r0,#0
000010  ebfffffe          BL       get_en_intc
000014  e1a04000          MOV      r4,r0
;;;16     printf("\r\n====INTC_EN_REG[0][%08x]======",tmp);
000018  e1a01004          MOV      r1,r4
00001c  e28f0f49          ADR      r0,|L1.328|
000020  ebfffffe          BL       __2printf
;;;17     tmp= get_en_intc(1);
000024  e3a00001          MOV      r0,#1
000028  ebfffffe          BL       get_en_intc
00002c  e1a04000          MOV      r4,r0
;;;18     printf("\r\n====INTC_EN_REG[1][%08x]======",tmp);
000030  e1a01004          MOV      r1,r4
000034  e28f0e13          ADR      r0,|L1.364|
000038  ebfffffe          BL       __2printf
;;;19     tmp= get_mask_intc(0);
00003c  e3a00000          MOV      r0,#0
000040  ebfffffe          BL       get_mask_intc
000044  e1a04000          MOV      r4,r0
;;;20     printf("\r\n====INTC_MASK_REG[0][%08x]======",tmp);
000048  e1a01004          MOV      r1,r4
00004c  e28f0f4f          ADR      r0,|L1.400|
000050  ebfffffe          BL       __2printf
;;;21     tmp= get_mask_intc(1);
000054  e3a00001          MOV      r0,#1
000058  ebfffffe          BL       get_mask_intc
00005c  e1a04000          MOV      r4,r0
;;;22     printf("\r\n====INTC_MASK_REG[1][%08x]======",tmp);
000060  e1a01004          MOV      r1,r4
000064  e28f0f52          ADR      r0,|L1.436|
000068  ebfffffe          BL       __2printf
;;;23     	
;;;24     }
00006c  e8bd8010          POP      {r4,pc}
;;;25     void obr_cmd(char ikey)
                          ENDP

                  obr_cmd PROC
000070  e92d4010          PUSH     {r4,lr}
;;;26     {
000074  e1a04000          MOV      r4,r0
;;;27     switch(ikey)
000078  e3540061          CMP      r4,#0x61
00007c  1a000001          BNE      |L1.136|
;;;28     	{
;;;29     	case 'a':
;;;30     		print_int_mask();
000080  ebfffffe          BL       print_int_mask
;;;31     		break;
000084  ea000001          B        |L1.144|
                  |L1.136|
;;;32     	default:
000088  e1a00000          MOV      r0,r0
;;;33     		break;
00008c  e1a00000          MOV      r0,r0
                  |L1.144|
000090  e1a00000          MOV      r0,r0                 ;31
;;;34     	}	
;;;35     }
000094  e8bd8010          POP      {r4,pc}
;;;36     
                          ENDP

                  test_thr PROC
;;;38     
;;;39     void test_thr(void)
000098  e1a00000          MOV      r0,r0
;;;40     {
;;;41     char tkey;
;;;42     uint8_t btst=0;	
;;;43     ////uint8_t btst1=0;	
;;;44     
;;;45     printf("\r\n====test_thr======");
00009c  e28f0f4d          ADR      r0,|L1.472|
0000a0  ebfffffe          BL       __2printf
;;;46     #if 0	
;;;47     for(;;)
;;;48     	{
;;;49     		btst1=check_key();
;;;50     		put_test1_pin(btst)	;
;;;51     		btst++;
;;;52     		printf("\r\n[%x][%x]",btst,btst1);
;;;53     		sys_delay(10);
;;;54     		
;;;55     	}	
;;;56     	#endif
;;;57     for(;;)
0000a4  e1a00000          MOV      r0,r0
                  |L1.168|
;;;58     	{
;;;59     	if(check_key())
0000a8  ebfffffe          BL       check_key
0000ac  e3500000          CMP      r0,#0
0000b0  0a000004          BEQ      |L1.200|
;;;60     		{
;;;61     		tkey=sys_uart_getc();
0000b4  ebfffffe          BL       sys_uart_getc
0000b8  e1a04000          MOV      r4,r0
;;;62     			obr_cmd(tkey);
0000bc  e1a00004          MOV      r0,r4
0000c0  ebfffffe          BL       obr_cmd
0000c4  eafffff7          B        |L1.168|
                  |L1.200|
;;;63     	////	printf("pushed key[%x]",tkey);
;;;64     		}
;;;65     	else
;;;66     		{
;;;67     	////	put_test1_pin(btst)	;
;;;68     	////	btst++;
;;;69     		sys_delay(10);
0000c8  e3a0000a          MOV      r0,#0xa
0000cc  ebfffffe          BL       os_dly_wait
0000d0  eafffff4          B        |L1.168|
;;;70     
;;;71     		}
;;;72     	}
;;;73     }
;;;74     
                          ENDP

                  init_test1_pin PROC
;;;75     void init_test1_pin(void)
0000d4  e92d4008          PUSH     {r3,lr}
;;;76     {
;;;77     gpio_pin_init(TEST1_PORT, TEST1_PIN, GPIO_MODE_OUTPUT, GPIO_PULL_NONE, GPIO_DRV_3);
0000d8  e3a00003          MOV      r0,#3
0000dc  e3a03000          MOV      r3,#0
0000e0  e3a02001          MOV      r2,#1
0000e4  e58d0000          STR      r0,[sp,#0]
0000e8  e1a01000          MOV      r1,r0
0000ec  e59f00fc          LDR      r0,|L1.496|
0000f0  ebfffffe          BL       gpio_pin_init
;;;78     }
0000f4  e8bd8008          POP      {r3,pc}
;;;79     void put_test1_pin(uint8_t idat)
                          ENDP

                  put_test1_pin PROC
0000f8  e92d4010          PUSH     {r4,lr}
;;;80     {
0000fc  e1a04000          MOV      r4,r0
;;;81     if(idat&0x1)
000100  e2040001          AND      r0,r4,#1
000104  e3500000          CMP      r0,#0
000108  0a000003          BEQ      |L1.284|
;;;82     	gpio_pin_set(TEST1_PORT, TEST1_PIN);
00010c  e3a01003          MOV      r1,#3
000110  e59f00d8          LDR      r0,|L1.496|
000114  ebfffffe          BL       gpio_pin_set
000118  ea000002          B        |L1.296|
                  |L1.284|
;;;83     else
;;;84     	gpio_pin_clear(TEST1_PORT, TEST1_PIN);
00011c  e3a01003          MOV      r1,#3
000120  e59f00c8          LDR      r0,|L1.496|
000124  ebfffffe          BL       gpio_pin_clear
                  |L1.296|
;;;85     	
;;;86     }
000128  e8bd8010          POP      {r4,pc}
                          ENDP

                  |L1.300|
00012c  0d0a3d3d          DCB      "\r\n====print_int_mask======",0
000130  3d3d7072
000134  696e745f
000138  696e745f
00013c  6d61736b
000140  3d3d3d3d
000144  3d3d00  
000147  00                DCB      0
                  |L1.328|
000148  0d0a3d3d          DCB      "\r\n====INTC_EN_REG[0][%08x]======",0
00014c  3d3d494e
000150  54435f45
000154  4e5f5245
000158  475b305d
00015c  5b253038
000160  785d3d3d
000164  3d3d3d3d
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L1.364|
00016c  0d0a3d3d          DCB      "\r\n====INTC_EN_REG[1][%08x]======",0
000170  3d3d494e
000174  54435f45
000178  4e5f5245
00017c  475b315d
000180  5b253038
000184  785d3d3d
000188  3d3d3d3d
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L1.400|
000190  0d0a3d3d          DCB      "\r\n====INTC_MASK_REG[0][%08x]======",0
000194  3d3d494e
000198  54435f4d
00019c  41534b5f
0001a0  5245475b
0001a4  305d5b25
0001a8  3038785d
0001ac  3d3d3d3d
0001b0  3d3d00  
0001b3  00                DCB      0
                  |L1.436|
0001b4  0d0a3d3d          DCB      "\r\n====INTC_MASK_REG[1][%08x]======",0
0001b8  3d3d494e
0001bc  54435f4d
0001c0  41534b5f
0001c4  5245475b
0001c8  315d5b25
0001cc  3038785d
0001d0  3d3d3d3d
0001d4  3d3d00  
0001d7  00                DCB      0
                  |L1.472|
0001d8  0d0a3d3d          DCB      "\r\n====test_thr======",0
0001dc  3d3d7465
0001e0  73745f74
0001e4  68723d3d
0001e8  3d3d3d3d
0001ec  00      
0001ed  00                DCB      0
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L1.496|
                          DCD      0x01c20800
