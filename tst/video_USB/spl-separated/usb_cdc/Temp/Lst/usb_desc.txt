; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usb_desc.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usb_desc.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usb_desc.crf users\usb_desc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tud_descriptor_device_cb PROC
;;;48     // Application return pointer to descriptor
;;;49     uint8_t const * tud_descriptor_device_cb(void)
000000  e59f010c          LDR      r0,|L1.276|
;;;50     {
;;;51       return (uint8_t const *) &desc_device;
;;;52     }
000004  e12fff1e          BX       lr
;;;53     
                          ENDP

                  tud_descriptor_device_qualifier_cb PROC
;;;117    // change if the device were operating at the other speed. If not highspeed capable stall this request.
;;;118    uint8_t const* tud_descriptor_device_qualifier_cb(void)
000008  e59f0108          LDR      r0,|L1.280|
;;;119    {
;;;120      return (uint8_t const*) &desc_device_qualifier;
;;;121    }
00000c  e12fff1e          BX       lr
;;;122    
                          ENDP

                  tud_descriptor_other_speed_configuration_cb PROC
;;;125    // Configuration descriptor in the other speed e.g if high speed then this is for full speed and vice versa
;;;126    uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index)
000010  e92d4010          PUSH     {r4,lr}
;;;127    {
;;;128      (void) index; // for multiple configurations
;;;129    
;;;130      // if link speed is high return fullspeed config, and vice versa
;;;131      return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_fs_configuration : desc_hs_configuration;
000014  ebfffffe          BL       tud_speed_get
000018  e3500002          CMP      r0,#2
00001c  059f00f8          LDREQ    r0,|L1.284|
000020  159f00f8          LDRNE    r0,|L1.288|
;;;132    }
000024  e8bd8010          POP      {r4,pc}
;;;133    
                          ENDP

                  tud_descriptor_configuration_cb PROC
;;;138    // Descriptor contents must exist long enough for transfer to complete
;;;139    uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
000028  e92d4010          PUSH     {r4,lr}
;;;140    {
;;;141      (void) index; // for multiple configurations
;;;142    
;;;143    #if TUD_OPT_HIGH_SPEED
;;;144      // Although we are highspeed, host may be fullspeed.
;;;145      return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
00002c  ebfffffe          BL       tud_speed_get
000030  e3500002          CMP      r0,#2
000034  059f00e4          LDREQ    r0,|L1.288|
000038  159f00dc          LDRNE    r0,|L1.284|
;;;146    #else
;;;147      return desc_fs_configuration;
;;;148    #endif
;;;149    }
00003c  e8bd8010          POP      {r4,pc}
;;;150    
                          ENDP

                  tud_descriptor_string_cb PROC
;;;168    // Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
;;;169    uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
000040  e92d41f0          PUSH     {r4-r8,lr}
;;;170    {
;;;171      (void) langid;
;;;172    
;;;173      uint8_t chr_count;
;;;174    
;;;175      if ( index == 0)
;;;176      {
;;;177        memcpy(&_desc_str[1], string_desc_arr[0], 2);
000044  e59f10d8          LDR      r1,|L1.292|
000048  e59f70d8          LDR      r7,|L1.296|
00004c  e3500000          CMP      r0,#0                 ;175
000050  0a000011          BEQ      |L1.156|
;;;178        chr_count = 1;
;;;179      }else
;;;180      {
;;;181        // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
;;;182        // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors
;;;183    
;;;184        if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
000054  e3500005          CMP      r0,#5
000058  23a00000          MOVCS    r0,#0
;;;185    
;;;186        const char* str = string_desc_arr[index];
;;;187    
;;;188        // Cap at max char
;;;189        chr_count = strlen(str);
;;;190        if ( chr_count > 31 ) chr_count = 31;
;;;191    
;;;192        // Convert ASCII string into UTF-16
;;;193        for(uint8_t i=0; i<chr_count; i++)
;;;194        {
;;;195          _desc_str[1+i] = str[i];
;;;196        }
;;;197      }
;;;198    
;;;199      // first byte is length (including header), second byte is string type
;;;200      _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
;;;201    
;;;202      return _desc_str;
;;;203    }
00005c  28bd81f0          POPCS    {r4-r8,pc}
000060  e7916100          LDR      r6,[r1,r0,LSL #2]     ;186
000064  e1a00006          MOV      r0,r6                 ;189
000068  ebfffffe          BL       strlen
00006c  e20010ff          AND      r1,r0,#0xff           ;189
000070  e351001f          CMP      r1,#0x1f              ;190
000074  83a0101f          MOVHI    r1,#0x1f              ;190
000078  8a000002          BHI      |L1.136|
00007c  e2410001          SUB      r0,r1,#1              ;193
000080  e3500000          CMP      r0,#0                 ;193
000084  da000017          BLE      |L1.232|
                  |L1.136|
000088  e59f3098          LDR      r3,|L1.296|
00008c  e3110001          TST      r1,#1
000090  e2462001          SUB      r2,r6,#1              ;193
000094  1a000009          BNE      |L1.192|
000098  ea000006          B        |L1.184|
                  |L1.156|
00009c  e5910000          LDR      r0,[r1,#0]            ;177  ; string_desc_arr
0000a0  e3a01001          MOV      r1,#1                 ;178
0000a4  e5d02000          LDRB     r2,[r0,#0]            ;177
0000a8  e5c72002          STRB     r2,[r7,#2]            ;177  ; _desc_str
0000ac  e5d00001          LDRB     r0,[r0,#1]            ;177
0000b0  e5c70003          STRB     r0,[r7,#3]            ;177  ; _desc_str
0000b4  ea000010          B        |L1.252|
                  |L1.184|
0000b8  e5f20001          LDRB     r0,[r2,#1]!           ;195
0000bc  e1e300b2          STRH     r0,[r3,#2]!           ;195
                  |L1.192|
0000c0  e5d24001          LDRB     r4,[r2,#1]
0000c4  e2410001          SUB      r0,r1,#1              ;193
0000c8  e1b0c0c0          ASRS     r12,r0,#1             ;193
0000cc  0a000005          BEQ      |L1.232|
                  |L1.208|
0000d0  e5f25002          LDRB     r5,[r2,#2]!
0000d4  e1c340b2          STRH     r4,[r3,#2]            ;195
0000d8  e5d24001          LDRB     r4,[r2,#1]            ;195
0000dc  e25cc001          SUBS     r12,r12,#1            ;195
0000e0  e1e350b4          STRH     r5,[r3,#4]!           ;195
0000e4  1afffff9          BNE      |L1.208|
                  |L1.232|
0000e8  e3500000          CMP      r0,#0                 ;195
0000ec  ba000002          BLT      |L1.252|
0000f0  e7d62000          LDRB     r2,[r6,r0]            ;195
0000f4  e0870080          ADD      r0,r7,r0,LSL #1       ;195
0000f8  e1c020b2          STRH     r2,[r0,#2]            ;195
                  |L1.252|
0000fc  e3a00002          MOV      r0,#2                 ;200
000100  e0800081          ADD      r0,r0,r1,LSL #1       ;200
000104  e3800c03          ORR      r0,r0,#0x300          ;200
000108  e1c700b0          STRH     r0,[r7,#0]            ;200  ; _desc_str
00010c  e59f0014          LDR      r0,|L1.296|
000110  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.276|
                          DCD      ||area_number.6||
                  |L1.280|
                          DCD      ||area_number.6||+0xa8
                  |L1.284|
                          DCD      ||area_number.6||+0x12
                  |L1.288|
                          DCD      ||area_number.6||+0x5d
                  |L1.292|
                          DCD      ||.data||
                  |L1.296|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  _desc_str
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ||<Data1>||
000000  0904              DCB      0x09,0x04

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  desc_device
000000  1201              DCB      0x12,0x01
000002  0200              DCWU     0x0200
000004  ef020140          DCB      0xef,0x02,0x01,0x40
000008  cafe4001          DCWU     0xcafe,0x4001
00000c  0100              DCWU     0x0100
00000e  0102              DCB      0x01,0x02
000010  0301              DCB      0x03,0x01
                  desc_fs_configuration
000012  0902              DCB      0x09,0x02
000014  4b000201          DCB      0x4b,0x00,0x02,0x01
000018  00803208          DCB      0x00,0x80,0x32,0x08
00001c  0b000202          DCB      0x0b,0x00,0x02,0x02
000020  02000009          DCB      0x02,0x00,0x00,0x09
000024  04000001          DCB      0x04,0x00,0x00,0x01
000028  02020004          DCB      0x02,0x02,0x00,0x04
00002c  05240020          DCB      0x05,0x24,0x00,0x20
000030  01052401          DCB      0x01,0x05,0x24,0x01
000034  00010424          DCB      0x00,0x01,0x04,0x24
000038  02020524          DCB      0x02,0x02,0x05,0x24
00003c  06000107          DCB      0x06,0x00,0x01,0x07
000040  05810308          DCB      0x05,0x81,0x03,0x08
000044  00100904          DCB      0x00,0x10,0x09,0x04
000048  0100020a          DCB      0x01,0x00,0x02,0x0a
00004c  00000007          DCB      0x00,0x00,0x00,0x07
000050  05020240          DCB      0x05,0x02,0x02,0x40
000054  00000705          DCB      0x00,0x00,0x07,0x05
000058  83024000          DCB      0x83,0x02,0x40,0x00
00005c  00                DCB      0x00
                  desc_hs_configuration
00005d  09024b            DCB      0x09,0x02,0x4b
000060  00020100          DCB      0x00,0x02,0x01,0x00
000064  8032080b          DCB      0x80,0x32,0x08,0x0b
000068  00020202          DCB      0x00,0x02,0x02,0x02
00006c  00000904          DCB      0x00,0x00,0x09,0x04
000070  00000102          DCB      0x00,0x00,0x01,0x02
000074  02000405          DCB      0x02,0x00,0x04,0x05
000078  24002001          DCB      0x24,0x00,0x20,0x01
00007c  05240100          DCB      0x05,0x24,0x01,0x00
000080  01042402          DCB      0x01,0x04,0x24,0x02
000084  02052406          DCB      0x02,0x05,0x24,0x06
000088  00010705          DCB      0x00,0x01,0x07,0x05
00008c  81030800          DCB      0x81,0x03,0x08,0x00
000090  10090401          DCB      0x10,0x09,0x04,0x01
000094  00020a00          DCB      0x00,0x02,0x0a,0x00
000098  00000705          DCB      0x00,0x00,0x07,0x05
00009c  02020002          DCB      0x02,0x02,0x00,0x02
0000a0  00070583          DCB      0x00,0x07,0x05,0x83
0000a4  02000200          DCB      0x02,0x00,0x02,0x00
                  desc_device_qualifier
0000a8  1201              DCB      0x12,0x01
0000aa  0200              DCWU     0x0200
0000ac  ef020140          DCB      0xef,0x02,0x01,0x40
0000b0  0100              DCB      0x01,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  54696e79          DCB      "TinyUSB",0
000004  55534200
000008  54696e79          DCB      "TinyUSB Device",0
00000c  55534220
000010  44657669
000014  636500  
000017  00                DCB      0
000018  31323334          DCB      "123456",0
00001c  353600  
00001f  00                DCB      0
000020  54696e79          DCB      "TinyUSB CDC",0
000024  55534220
000028  43444300

                          AREA ||.data||, DATA, ALIGN=2

                  string_desc_arr
                          DCD      ||<Data1>||
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x20
