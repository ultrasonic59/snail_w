; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\usbd.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\usbd.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\usbd.crf ..\tinyusb\src\device\usbd.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tud_speed_get PROC
;;;343    //--------------------------------------------------------------------+
;;;344    tusb_speed_t tud_speed_get(void)
000000  e59f020c          LDR      r0,|L1.532|
;;;345    {
;;;346      return (tusb_speed_t) _usbd_dev.speed;
000004  e5d00002          LDRB     r0,[r0,#2]  ; _usbd_dev
;;;347    }
000008  e12fff1e          BX       lr
;;;348    
                          ENDP

                  tud_connected PROC
;;;349    bool tud_connected(void)
00000c  e59f0200          LDR      r0,|L1.532|
;;;350    {
;;;351      return _usbd_dev.connected;
000010  e5d00000          LDRB     r0,[r0,#0]  ; _usbd_dev
000014  e2000001          AND      r0,r0,#1
;;;352    }
000018  e12fff1e          BX       lr
;;;353    
                          ENDP

                  tud_mounted PROC
;;;354    bool tud_mounted(void)
00001c  e59f01f0          LDR      r0,|L1.532|
;;;355    {
;;;356      return _usbd_dev.cfg_num ? true : false;
000020  e5d00001          LDRB     r0,[r0,#1]  ; _usbd_dev
000024  e3500000          CMP      r0,#0
000028  13a00001          MOVNE    r0,#1
;;;357    }
00002c  e12fff1e          BX       lr
;;;358    
                          ENDP

                  tud_suspended PROC
;;;359    bool tud_suspended(void)
000030  e59f01dc          LDR      r0,|L1.532|
;;;360    {
;;;361      return _usbd_dev.suspended;
000034  e5d00000          LDRB     r0,[r0,#0]  ; _usbd_dev
000038  e2000004          AND      r0,r0,#4
00003c  e1a00120          LSR      r0,r0,#2
;;;362    }
000040  e12fff1e          BX       lr
;;;363    
                          ENDP

                  tud_remote_wakeup PROC
;;;364    bool tud_remote_wakeup(void)
000044  e59f01c8          LDR      r0,|L1.532|
;;;365    {
;;;366      // only wake up host if this feature is supported and enabled and we are suspended
;;;367      TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en );
000048  e5d01000          LDRB     r1,[r0,#0]  ; _usbd_dev
00004c  e3110004          TST      r1,#4
000050  15d00000          LDRBNE   r0,[r0,#0]  ; _usbd_dev
000054  13100010          TSTNE    r0,#0x10
000058  13100008          TSTNE    r0,#8
00005c  03a00000          MOVEQ    r0,#0
;;;368      dcd_remote_wakeup(_usbd_rhport);
;;;369      return true;
;;;370    }
000060  012fff1e          BXEQ     lr
000064  e92d4010          PUSH     {r4,lr}               ;365
000068  e59f01a8          LDR      r0,|L1.536|
00006c  e5d00001          LDRB     r0,[r0,#1]            ;368  ; _usbd_rhport
000070  ebfffffe          BL       dcd_remote_wakeup
000074  e3a00001          MOV      r0,#1                 ;369
000078  e8bd8010          POP      {r4,pc}
;;;371    
                          ENDP

                  tud_disconnect PROC
;;;372    bool tud_disconnect(void)
00007c  e59f0198          LDR      r0,|L1.540|
;;;373    {
;;;374      TU_VERIFY(dcd_disconnect);
000080  e3500000          CMP      r0,#0
;;;375      dcd_disconnect(_usbd_rhport);
;;;376      return true;
;;;377    }
000084  012fff1e          BXEQ     lr
000088  e92d4010          PUSH     {r4,lr}               ;373
00008c  e59f0184          LDR      r0,|L1.536|
000090  e5d00001          LDRB     r0,[r0,#1]            ;375  ; _usbd_rhport
000094  ebfffffe          BL       dcd_disconnect
000098  e3a00001          MOV      r0,#1                 ;376
00009c  e8bd8010          POP      {r4,pc}
;;;378    
                          ENDP

                  tud_connect PROC
;;;379    bool tud_connect(void)
0000a0  e59f0178          LDR      r0,|L1.544|
;;;380    {
;;;381      TU_VERIFY(dcd_connect);
0000a4  e3500000          CMP      r0,#0
;;;382      dcd_connect(_usbd_rhport);
;;;383      return true;
;;;384    }
0000a8  012fff1e          BXEQ     lr
0000ac  e92d4010          PUSH     {r4,lr}               ;380
0000b0  e59f0160          LDR      r0,|L1.536|
0000b4  e5d00001          LDRB     r0,[r0,#1]            ;382  ; _usbd_rhport
0000b8  ebfffffe          BL       dcd_connect
0000bc  e3a00001          MOV      r0,#1                 ;383
0000c0  e8bd8010          POP      {r4,pc}
;;;385    
                          ENDP

                  tud_inited PROC
;;;388    //--------------------------------------------------------------------+
;;;389    bool tud_inited(void)
0000c4  e59f014c          LDR      r0,|L1.536|
;;;390    {
;;;391      return _usbd_rhport != RHPORT_INVALID;
0000c8  e5d00001          LDRB     r0,[r0,#1]  ; _usbd_rhport
0000cc  e35000ff          CMP      r0,#0xff
0000d0  13a00001          MOVNE    r0,#1
0000d4  03a00000          MOVEQ    r0,#0
;;;392    }
0000d8  e12fff1e          BX       lr
;;;393    
                          ENDP

                  tud_init PROC
;;;394    bool tud_init (uint8_t rhport)
0000dc  e92d47f0          PUSH     {r4-r10,lr}
;;;395    {
0000e0  e59f7130          LDR      r7,|L1.536|
0000e4  e1a08000          MOV      r8,r0
0000e8  e5d70001          LDRB     r0,[r7,#1]  ; _usbd_rhport
0000ec  e35000ff          CMP      r0,#0xff
;;;396      // skip if already initialized
;;;397      if ( tud_inited() ) return true;
0000f0  13a00001          MOVNE    r0,#1
;;;398    
;;;399      TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
;;;400      TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
;;;401      TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
;;;402      TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));
;;;403    
;;;404      tu_varclr(&_usbd_dev);
;;;405    
;;;406    #if OSAL_MUTEX_REQUIRED
;;;407      // Init device mutex
;;;408      _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
;;;409      TU_ASSERT(_usbd_mutex);
;;;410    #endif
;;;411    
;;;412      // Init device queue & task
;;;413      _usbd_q = osal_queue_create(&_usbd_qdef);
;;;414      TU_ASSERT(_usbd_q);
;;;415    
;;;416      // Get application driver if available
;;;417      if ( usbd_app_driver_get_cb )
;;;418      {
;;;419        _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
;;;420      }
;;;421    
;;;422      // Init class drivers
;;;423      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
;;;424      {
;;;425        usbd_class_driver_t const * driver = get_driver(i);
;;;426        TU_ASSERT(driver);
;;;427        TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
;;;428        driver->init();
;;;429      }
;;;430    
;;;431      _usbd_rhport = rhport;
;;;432    
;;;433      // Init device controller driver
;;;434      dcd_init(rhport);
;;;435      dcd_int_enable(rhport);
;;;436    
;;;437      return true;
;;;438    }
0000f4  18bd87f0          POPNE    {r4-r10,pc}
0000f8  e3a01023          MOV      r1,#0x23              ;404
0000fc  e59f0110          LDR      r0,|L1.532|
000100  ebfffffe          BL       __aeabi_memclr4
000104  e59f4118          LDR      r4,|L1.548|
000108  e1a00004          MOV      r0,r4                 ;408
00010c  ebfffffe          BL       os_mut_init
000110  e587400c          STR      r4,[r7,#0xc]          ;408  ; _usbd_mutex
000114  e59f410c          LDR      r4,|L1.552|
000118  e1d400b0          LDRH     r0,[r4,#0]            ;413
00011c  e1a01100          LSL      r1,r0,#2              ;413
000120  e2811010          ADD      r1,r1,#0x10           ;413
000124  e5940008          LDR      r0,[r4,#8]            ;413
000128  e3c11807          BIC      r1,r1,#0x70000        ;413
00012c  ebfffffe          BL       os_mbx_init
000130  e1d420b2          LDRH     r2,[r4,#2]            ;413
000134  e1d410b0          LDRH     r1,[r4,#0]            ;413
000138  e5940004          LDR      r0,[r4,#4]            ;413
00013c  e2823003          ADD      r3,r2,#3              ;413
000140  e1a03123          LSR      r3,r3,#2              ;413
000144  e0010193          MUL      r1,r3,r1              ;413
000148  e2811003          ADD      r1,r1,#3              ;413
00014c  ebfffffe          BL       _init_box
000150  e59f60d4          LDR      r6,|L1.556|
000154  e5874008          STR      r4,[r7,#8]            ;413  ; _usbd_q
000158  e3560000          CMP      r6,#0                 ;417
00015c  0a000002          BEQ      |L1.364|
000160  e2440010          SUB      r0,r4,#0x10           ;419
000164  ebfffffe          BL       usbd_app_driver_get_cb
000168  e5870004          STR      r0,[r7,#4]            ;419  ; _app_driver
                  |L1.364|
00016c  e5d70000          LDRB     r0,[r7,#0]            ;423  ; _app_driver_count
000170  e3a05000          MOV      r5,#0                 ;423
000174  e3700001          CMN      r0,#1                 ;423
000178  159f90b0          LDRNE    r9,|L1.560|
00017c  0a000014          BEQ      |L1.468|
                  |L1.384|
000180  e3560000          CMP      r6,#0                 ;423
000184  e1a04005          MOV      r4,r5                 ;425
000188  0a000018          BEQ      |L1.496|
00018c  e5d70000          LDRB     r0,[r7,#0]            ;425  ; _app_driver_count
000190  e1540000          CMP      r4,r0                 ;425
000194  20450000          SUBCS    r0,r5,r0              ;425
000198  220040ff          ANDCS    r4,r0,#0xff           ;425
00019c  2a000013          BCS      |L1.496|
0001a0  e5970004          LDR      r0,[r7,#4]            ;425  ; _app_driver
0001a4  e0851085          ADD      r1,r5,r5,LSL #1       ;425
0001a8  e0801181          ADD      r1,r0,r1,LSL #3       ;425
                  |L1.428|
0001ac  e3510000          CMP      r1,#0                 ;426
0001b0  0a000011          BEQ      |L1.508|
0001b4  e5910000          LDR      r0,[r1,#0]            ;428
0001b8  e12fff30          BLX      r0                    ;428
0001bc  e5d70000          LDRB     r0,[r7,#0]            ;429  ; _app_driver_count
0001c0  e2851001          ADD      r1,r5,#1              ;429
0001c4  e20150ff          AND      r5,r1,#0xff           ;429
0001c8  e2800001          ADD      r0,r0,#1              ;429
0001cc  e1550000          CMP      r5,r0                 ;429
0001d0  3affffea          BCC      |L1.384|
                  |L1.468|
0001d4  e1a00008          MOV      r0,r8                 ;434
0001d8  e5c78001          STRB     r8,[r7,#1]            ;431  ; _usbd_rhport
0001dc  ebfffffe          BL       dcd_init
0001e0  e1a00008          MOV      r0,r8                 ;435
0001e4  ebfffffe          BL       dcd_int_enable
0001e8  e3a00001          MOV      r0,#1                 ;437
0001ec  e8bd87f0          POP      {r4-r10,pc}
                  |L1.496|
0001f0  e3540000          CMP      r4,#0
0001f4  01a01009          MOVEQ    r1,r9
0001f8  0affffeb          BEQ      |L1.428|
                  |L1.508|
0001fc  e59f2030          LDR      r2,|L1.564|
000200  e59f1030          LDR      r1,|L1.568|
000204  e28f0030          ADR      r0,|L1.572|
000208  ebfffffe          BL       __2printf
00020c  e3a00000          MOV      r0,#0                 ;426
000210  e8bd87f0          POP      {r4-r10,pc}
                  |L1.532|
                          DCD      ||.bss||
                  |L1.536|
                          DCD      ||.data||
                  |L1.540|
                          DCD      dcd_disconnect
                  |L1.544|
                          DCD      dcd_connect
                  |L1.548|
                          DCD      ||.bss||+0x24
                  |L1.552|
                          DCD      ||.data||+0x10
                  |L1.556|
                          DCD      usbd_app_driver_get_cb
                  |L1.560|
                          DCD      ||.constdata||
                  |L1.564|
                          DCD      0x000001aa
                  |L1.568|
                          DCD      ||.constdata||+0x18
                  |L1.572|
00023c  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
000240  643a2041
000244  53534552
000248  54204641
00024c  494c4544
000250  0d0a00  
000253  00                DCB      0
                          ENDP

                  tud_task_event_ready PROC
;;;459    
;;;460    bool tud_task_event_ready(void)
000254  e51f0044          LDR      r0,|L1.536|
;;;461    {
000258  e92d4010          PUSH     {r4,lr}
00025c  e5d01001          LDRB     r1,[r0,#1]  ; _usbd_rhport
000260  e35100ff          CMP      r1,#0xff
;;;462      // Skip if stack is not initialized
;;;463      if ( !tud_inited() ) return false;
000264  03a00000          MOVEQ    r0,#0
;;;464    
;;;465      return !osal_queue_empty(_usbd_q);
;;;466    }
000268  08bd8010          POPEQ    {r4,pc}
00026c  e5904008          LDR      r4,[r0,#8]  ; _usbd_q
000270  e5940008          LDR      r0,[r4,#8]
000274  ebfffffe          BL       os_mbx_check
000278  e1d410b0          LDRH     r1,[r4,#0]
00027c  e1500001          CMP      r0,r1
000280  03a00001          MOVEQ    r0,#1
000284  13a00000          MOVNE    r0,#0
000288  e2200001          EOR      r0,r0,#1              ;465
00028c  e8bd8010          POP      {r4,pc}
;;;467    
                          ENDP

                  usbd_edpt_stall PROC
;;;1318   
;;;1319   void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
000290  e51f3084          LDR      r3,|L1.532|
;;;1320   {
;;;1321     rhport = _usbd_rhport;
;;;1322   
;;;1323     uint8_t const epnum = tu_edpt_number(ep_addr);
000294  e3c10080          BIC      r0,r1,#0x80
;;;1324     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1325   
;;;1326     // only stalled if currently cleared
;;;1327     if ( !_usbd_dev.ep_status[epnum][dir].stalled )
000298  e0833080          ADD      r3,r3,r0,LSL #1
00029c  e92d4010          PUSH     {r4,lr}               ;1320
0002a0  e51f0090          LDR      r0,|L1.536|
0002a4  e08343a1          ADD      r4,r3,r1,LSR #7
0002a8  e5d00001          LDRB     r0,[r0,#1]            ;1321  ; _usbd_rhport
0002ac  e5d4201b          LDRB     r2,[r4,#0x1b]
0002b0  e3120002          TST      r2,#2
;;;1328     {
;;;1329       TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
;;;1330       dcd_edpt_stall(rhport, ep_addr);
;;;1331       _usbd_dev.ep_status[epnum][dir].stalled = 1;
;;;1332       _usbd_dev.ep_status[epnum][dir].busy = 1;
;;;1333     }
;;;1334   }
0002b4  18bd8010          POPNE    {r4,pc}
0002b8  ebfffffe          BL       dcd_edpt_stall
0002bc  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1331
0002c0  e3800002          ORR      r0,r0,#2              ;1331
0002c4  e5c4001b          STRB     r0,[r4,#0x1b]         ;1331
0002c8  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1332
0002cc  e3800001          ORR      r0,r0,#1              ;1332
0002d0  e5c4001b          STRB     r0,[r4,#0x1b]         ;1332
0002d4  e8bd8010          POP      {r4,pc}
;;;1335   
                          ENDP

                  usbd_edpt_clear_stall PROC
;;;1336   void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
0002d8  e51f30cc          LDR      r3,|L1.532|
;;;1337   {
;;;1338     rhport = _usbd_rhport;
;;;1339   
;;;1340     uint8_t const epnum = tu_edpt_number(ep_addr);
0002dc  e3c10080          BIC      r0,r1,#0x80
;;;1341     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1342   
;;;1343     // only clear if currently stalled
;;;1344     if ( _usbd_dev.ep_status[epnum][dir].stalled )
0002e0  e0833080          ADD      r3,r3,r0,LSL #1
0002e4  e92d4010          PUSH     {r4,lr}               ;1337
0002e8  e51f00d8          LDR      r0,|L1.536|
0002ec  e08343a1          ADD      r4,r3,r1,LSR #7
0002f0  e5d00001          LDRB     r0,[r0,#1]            ;1338  ; _usbd_rhport
0002f4  e5d4201b          LDRB     r2,[r4,#0x1b]
0002f8  e3120002          TST      r2,#2
;;;1345     {
;;;1346       TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
;;;1347       dcd_edpt_clear_stall(rhport, ep_addr);
;;;1348       _usbd_dev.ep_status[epnum][dir].stalled = 0;
;;;1349       _usbd_dev.ep_status[epnum][dir].busy = 0;
;;;1350     }
;;;1351   }
0002fc  08bd8010          POPEQ    {r4,pc}
000300  ebfffffe          BL       dcd_edpt_clear_stall
000304  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1348
000308  e3c00002          BIC      r0,r0,#2              ;1348
00030c  e5c4001b          STRB     r0,[r4,#0x1b]         ;1348
000310  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1349
000314  e3c00001          BIC      r0,r0,#1              ;1349
000318  e5c4001b          STRB     r0,[r4,#0x1b]         ;1349
00031c  e8bd8010          POP      {r4,pc}
;;;1352   
                          ENDP

                  usbd_edpt_stalled PROC
;;;1353   bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
000320  e51f2114          LDR      r2,|L1.532|
;;;1354   {
;;;1355     (void) rhport;
;;;1356   
;;;1357     uint8_t const epnum = tu_edpt_number(ep_addr);
000324  e3c10080          BIC      r0,r1,#0x80
;;;1358     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1359   
;;;1360     return _usbd_dev.ep_status[epnum][dir].stalled;
000328  e0820080          ADD      r0,r2,r0,LSL #1
00032c  e08003a1          ADD      r0,r0,r1,LSR #7
000330  e5d0001b          LDRB     r0,[r0,#0x1b]
000334  e2000002          AND      r0,r0,#2
000338  e1a000a0          LSR      r0,r0,#1
;;;1361   }
00033c  e12fff1e          BX       lr
;;;1362   
                          ENDP

                  tud_task_ext PROC
;;;485     */
;;;486    void tud_task_ext(uint32_t timeout_ms, bool in_isr)
000340  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;487    {
000344  e51f4134          LDR      r4,|L1.536|
000348  e24dd04c          SUB      sp,sp,#0x4c
00034c  e5d41001          LDRB     r1,[r4,#1]  ; _usbd_rhport
000350  e35100ff          CMP      r1,#0xff
;;;488      (void) in_isr; // not implemented yet
;;;489    
;;;490      // Skip if stack is not initialized
;;;491      if ( !tud_inited() ) return;
;;;492    
;;;493      // Loop until there is no more events in the queue
;;;494      while (1)
;;;495      {
;;;496        dcd_event_t event;
;;;497        if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
;;;498    
;;;499    #if CFG_TUSB_DEBUG >= 2
;;;500        if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
;;;501        TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
;;;502    #endif
;;;503    
;;;504        switch ( event.event_id )
;;;505        {
;;;506          case DCD_EVENT_BUS_RESET:
;;;507            TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
;;;508            usbd_reset(event.rhport);
;;;509            _usbd_dev.speed = event.bus_reset.speed;
;;;510          break;
;;;511    
;;;512          case DCD_EVENT_UNPLUGGED:
;;;513            TU_LOG(USBD_DBG, "\r\n");
;;;514            usbd_reset(event.rhport);
;;;515    
;;;516            // invoke callback
;;;517            if (tud_umount_cb) tud_umount_cb();
;;;518          break;
;;;519    
;;;520          case DCD_EVENT_SETUP_RECEIVED:
;;;521            TU_LOG_PTR(USBD_DBG, &event.setup_received);
;;;522            TU_LOG(USBD_DBG, "\r\n");
;;;523    
;;;524            // Mark as connected after receiving 1st setup packet.
;;;525            // But it is easier to set it every time instead of wasting time to check then set
;;;526            _usbd_dev.connected = 1;
;;;527    
;;;528            // mark both in & out control as free
;;;529            _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
;;;530            _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
;;;531            _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
;;;532            _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
;;;533    
;;;534            // Process control request
;;;535            if ( !process_control_request(event.rhport, &event.setup_received) )
;;;536            {
;;;537              TU_LOG(USBD_DBG, "  Stall EP0\r\n");
;;;538              // Failed -> stall both control endpoint IN and OUT
;;;539              dcd_edpt_stall(event.rhport, 0);
;;;540              dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
;;;541            }
;;;542          break;
;;;543    
;;;544          case DCD_EVENT_XFER_COMPLETE:
;;;545          {
;;;546            // Invoke the class callback associated with the endpoint address
;;;547            uint8_t const ep_addr = event.xfer_complete.ep_addr;
;;;548            uint8_t const epnum   = tu_edpt_number(ep_addr);
;;;549            uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
;;;550    
;;;551            TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
;;;552    
;;;553            _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
;;;554            _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
;;;555    
;;;556            if ( 0 == epnum )
;;;557            {
;;;558              usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
;;;559              .len);
;;;560            }
;;;561            else
;;;562            {
;;;563              usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
;;;564              TU_ASSERT(driver, );
;;;565    
;;;566              TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
;;;567              driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
;;;568            }
;;;569          }
;;;570          break;
;;;571    
;;;572          case DCD_EVENT_SUSPEND:
;;;573            // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
;;;574            // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
;;;575            // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
;;;576            if ( _usbd_dev.connected )
;;;577            {
;;;578              TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
;;;579              if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
;;;580            }else
;;;581            {
;;;582              TU_LOG(USBD_DBG, " Skipped\r\n");
;;;583            }
;;;584          break;
;;;585    
;;;586          case DCD_EVENT_RESUME:
;;;587            if ( _usbd_dev.connected )
;;;588            {
;;;589              TU_LOG(USBD_DBG, "\r\n");
;;;590              if (tud_resume_cb) tud_resume_cb();
;;;591            }else
;;;592            {
;;;593              TU_LOG(USBD_DBG, " Skipped\r\n");
;;;594            }
;;;595          break;
;;;596    
;;;597          case USBD_EVENT_FUNC_CALL:
;;;598            TU_LOG(USBD_DBG, "\r\n");
;;;599            if ( event.func_call.func ) event.func_call.func(event.func_call.param);
;;;600          break;
;;;601    
;;;602          case DCD_EVENT_SOF:
;;;603          default:
;;;604            TU_BREAKPOINT();
;;;605          break;
;;;606        }
;;;607    
;;;608    #if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
;;;609        // return if there is no more events, for application to run other background
;;;610        if (osal_queue_empty(_usbd_q)) return;
;;;611    #endif
;;;612      }
;;;613    }
000354  028dd054          ADDEQ    sp,sp,#0x54
000358  08bd8ff0          POPEQ    {r4-r11,pc}
00035c  e59d204c          LDR      r2,[sp,#0x4c]         ;487
000360  e59f14fc          LDR      r1,|L1.2148|
000364  e1a02802          LSL      r2,r2,#16             ;487
000368  e51f8144          LDR      r8,|L1.556|
00036c  e1a02822          LSR      r2,r2,#16             ;487
000370  e58d1040          STR      r1,[sp,#0x40]         ;487
000374  e58d2044          STR      r2,[sp,#0x44]         ;487
                  |L1.888|
000378  e59d004c          LDR      r0,[sp,#0x4c]         ;497
00037c  e5945008          LDR      r5,[r4,#8]            ;497  ; _usbd_q
000380  e3700001          CMN      r0,#1                 ;497
000384  059f24dc          LDREQ    r2,|L1.2152|
000388  e28d6010          ADD      r6,sp,#0x10           ;497
00038c  0a000002          BEQ      |L1.924|
000390  e59f24d4          LDR      r2,|L1.2156|
000394  e1500002          CMP      r0,r2                 ;497
000398  359d2044          LDRCC    r2,[sp,#0x44]         ;497
                  |L1.924|
00039c  e5950008          LDR      r0,[r5,#8]            ;497
0003a0  e1a0100d          MOV      r1,sp                 ;497
0003a4  ebfffffe          BL       os_mbx_wait
0003a8  e1d520b2          LDRH     r2,[r5,#2]            ;497
0003ac  e59d1000          LDR      r1,[sp,#0]            ;497
0003b0  e1a00006          MOV      r0,r6                 ;497
0003b4  ebfffffe          BL       __aeabi_memcpy
0003b8  e5950004          LDR      r0,[r5,#4]            ;497
0003bc  e59d1000          LDR      r1,[sp,#0]            ;497
0003c0  ef000002          SVC      #0x2                  ;497
0003c4  e5dd0011          LDRB     r0,[sp,#0x11]         ;504
0003c8  e3a06001          MOV      r6,#1                 ;504
0003cc  e3500009          CMP      r0,#9                 ;504
0003d0  379ff100          LDRCC    pc,[pc,r0,LSL #2]     ;504
                  ||__switch$$||                  ; Alternate entry point
;;;614    
0003d4  ea000302          B        |L1.4068|
                          DCD      ||__switch$$||+0xc10
                          DCD      ||__switch$$||+0x28
                          DCD      ||__switch$$||+0xf4
                          DCD      ||__switch$$||+0xc10
                          DCD      ||__switch$$||+0xbac
                          DCD      ||__switch$$||+0xbd8
                          DCD      ||__switch$$||+0x1c0
                          DCD      ||__switch$$||+0xaf4
                          DCD      ||__switch$$||+0xbf8
0003fc  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
000400  e5dd9010          LDRB     r9,[sp,#0x10]
000404  e3a05000          MOV      r5,#0
000408  e3700001          CMN      r0,#1
00040c  151f71e4          LDRNE    r7,|L1.560|
000410  0a000015          BEQ      |L1.1132|
                  |L1.1044|
000414  e3580000          CMP      r8,#0
000418  e1a00005          MOV      r0,r5
00041c  0a000021          BEQ      |L1.1192|
000420  e5d41000          LDRB     r1,[r4,#0]  ; _app_driver_count
000424  e1500001          CMP      r0,r1
000428  20450001          SUBCS    r0,r5,r1
00042c  220000ff          ANDCS    r0,r0,#0xff
000430  2a00001c          BCS      |L1.1192|
000434  e5941004          LDR      r1,[r4,#4]  ; _app_driver
000438  e0850085          ADD      r0,r5,r5,LSL #1
00043c  e0816180          ADD      r6,r1,r0,LSL #3
                  |L1.1088|
000440  e3560000          CMP      r6,#0
000444  0a00001a          BEQ      |L1.1204|
000448  e5961004          LDR      r1,[r6,#4]
00044c  e1a00009          MOV      r0,r9
000450  e12fff31          BLX      r1
000454  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
000458  e2851001          ADD      r1,r5,#1
00045c  e20150ff          AND      r5,r1,#0xff
000460  e2800001          ADD      r0,r0,#1
000464  e1550000          CMP      r5,r0
000468  3affffe9          BCC      |L1.1044|
                  |L1.1132|
00046c  e51f0260          LDR      r0,|L1.532|
000470  e3a01023          MOV      r1,#0x23
000474  ebfffffe          BL       __aeabi_memclr4
000478  e59f03f0          LDR      r0,|L1.2160|
00047c  e3a020ff          MOV      r2,#0xff
000480  e3a01010          MOV      r1,#0x10
000484  ebfffffe          BL       __aeabi_memset
000488  e59d0040          LDR      r0,[sp,#0x40]
00048c  e3a010ff          MOV      r1,#0xff
000490  ebfffffe          BL       __ARM_common_memset1_8
                  |L1.1172|
000494  ebfffffe          BL       usbd_control_reset
000498  e5dd0014          LDRB     r0,[sp,#0x14]
00049c  e51f1290          LDR      r1,|L1.532|
0004a0  e5c10002          STRB     r0,[r1,#2]  ; _usbd_dev
0004a4  ea0002ce          B        |L1.4068|
                  |L1.1192|
0004a8  e3500000          CMP      r0,#0
0004ac  01a06007          MOVEQ    r6,r7
0004b0  0affffe2          BEQ      |L1.1088|
                  |L1.1204|
0004b4  e59f23b8          LDR      r2,|L1.2164|
0004b8  e59f13b8          LDR      r1,|L1.2168|
0004bc  e28f0fee          ADR      r0,|L1.2172|
0004c0  ebfffffe          BL       __2printf
0004c4  eafffff2          B        |L1.1172|
0004c8  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
0004cc  e5dda010          LDRB     r10,[sp,#0x10]
0004d0  e3a07000          MOV      r7,#0
0004d4  e3700001          CMN      r0,#1
0004d8  151f92b0          LDRNE    r9,|L1.560|
0004dc  0a000015          BEQ      |L1.1336|
                  |L1.1248|
0004e0  e3580000          CMP      r8,#0
0004e4  e1a05007          MOV      r5,r7
0004e8  0a000021          BEQ      |L1.1396|
0004ec  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
0004f0  e1550000          CMP      r5,r0
0004f4  20470000          SUBCS    r0,r7,r0
0004f8  220050ff          ANDCS    r5,r0,#0xff
0004fc  2a00001c          BCS      |L1.1396|
000500  e5940004          LDR      r0,[r4,#4]  ; _app_driver
000504  e0871087          ADD      r1,r7,r7,LSL #1
000508  e0806181          ADD      r6,r0,r1,LSL #3
                  |L1.1292|
00050c  e3560000          CMP      r6,#0
000510  0a00001a          BEQ      |L1.1408|
000514  e5961004          LDR      r1,[r6,#4]
000518  e1a0000a          MOV      r0,r10
00051c  e12fff31          BLX      r1
000520  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
000524  e2871001          ADD      r1,r7,#1
000528  e20170ff          AND      r7,r1,#0xff
00052c  e2800001          ADD      r0,r0,#1
000530  e1570000          CMP      r7,r0
000534  3affffe9          BCC      |L1.1248|
                  |L1.1336|
000538  e51f032c          LDR      r0,|L1.532|
00053c  e3a01023          MOV      r1,#0x23
000540  ebfffffe          BL       __aeabi_memclr4
000544  e59f0324          LDR      r0,|L1.2160|
000548  e3a020ff          MOV      r2,#0xff
00054c  e3a01010          MOV      r1,#0x10
000550  ebfffffe          BL       __aeabi_memset
000554  e59d0040          LDR      r0,[sp,#0x40]
000558  e3a010ff          MOV      r1,#0xff
00055c  ebfffffe          BL       __ARM_common_memset1_8
                  |L1.1376|
000560  ebfffffe          BL       usbd_control_reset
000564  e59f0328          LDR      r0,|L1.2196|
000568  e3500000          CMP      r0,#0
00056c  1bfffffe          BLNE     tud_umount_cb
000570  ea00029b          B        |L1.4068|
                  |L1.1396|
000574  e3550000          CMP      r5,#0
000578  01a06009          MOVEQ    r6,r9
00057c  0affffe2          BEQ      |L1.1292|
                  |L1.1408|
000580  e59f22ec          LDR      r2,|L1.2164|
000584  e59f12ec          LDR      r1,|L1.2168|
000588  e28f0fbb          ADR      r0,|L1.2172|
00058c  ebfffffe          BL       __2printf
000590  eafffff2          B        |L1.1376|
000594  e51f5388          LDR      r5,|L1.532|
000598  e5d50000          LDRB     r0,[r5,#0]  ; _usbd_dev
00059c  e3800001          ORR      r0,r0,#1
0005a0  e5c50000          STRB     r0,[r5,#0]  ; _usbd_dev
0005a4  e5d5001b          LDRB     r0,[r5,#0x1b]  ; _usbd_dev
0005a8  e3c00001          BIC      r0,r0,#1
0005ac  e5c5001b          STRB     r0,[r5,#0x1b]  ; _usbd_dev
0005b0  e5d5001b          LDRB     r0,[r5,#0x1b]  ; _usbd_dev
0005b4  e3c00004          BIC      r0,r0,#4
0005b8  e5c5001b          STRB     r0,[r5,#0x1b]  ; _usbd_dev
0005bc  e5d5001c          LDRB     r0,[r5,#0x1c]  ; _usbd_dev
0005c0  e3c00001          BIC      r0,r0,#1
0005c4  e5c5001c          STRB     r0,[r5,#0x1c]  ; _usbd_dev
0005c8  e5d5001c          LDRB     r0,[r5,#0x1c]  ; _usbd_dev
0005cc  e3c00004          BIC      r0,r0,#4
0005d0  e5c5001c          STRB     r0,[r5,#0x1c]  ; _usbd_dev
0005d4  e5dd0010          LDRB     r0,[sp,#0x10]
0005d8  e58d0004          STR      r0,[sp,#4]
0005dc  e28d0014          ADD      r0,sp,#0x14
0005e0  e58d0000          STR      r0,[sp,#0]
0005e4  e3a00000          MOV      r0,#0
0005e8  ebfffffe          BL       usbd_control_set_complete_callback
0005ec  e5dd1014          LDRB     r1,[sp,#0x14]
0005f0  e3a02003          MOV      r2,#3
0005f4  e1a00c81          LSL      r0,r1,#25
0005f8  e1520f20          CMP      r2,r0,LSR #30
0005fc  8a000004          BHI      |L1.1556|
000600  e59f2290          LDR      r2,|L1.2200|
000604  e59f1290          LDR      r1,|L1.2204|
000608  e28f0f9b          ADR      r0,|L1.2172|
00060c  ebfffffe          BL       __2printf
000610  ea0001ef          B        |L1.3540|
                  |L1.1556|
000614  e3a02002          MOV      r2,#2
000618  e1520f20          CMP      r2,r0,LSR #30
00061c  1a000008          BNE      |L1.1604|
000620  e59f0278          LDR      r0,|L1.2208|
000624  e3500000          CMP      r0,#0
000628  0a0001e9          BEQ      |L1.3540|
00062c  ebfffffe          BL       usbd_control_set_complete_callback
000630  e59d0004          LDR      r0,[sp,#4]
000634  e59d2000          LDR      r2,[sp,#0]
000638  e3a01001          MOV      r1,#1
00063c  ebfffffe          BL       tud_vendor_control_xfer_cb
000640  ea0001da          B        |L1.3504|
                  |L1.1604|
000644  e211201f          ANDS     r2,r1,#0x1f
000648  0a000004          BEQ      |L1.1632|
00064c  e3520001          CMP      r2,#1
000650  0a00018e          BEQ      |L1.3216|
000654  e3520002          CMP      r2,#2
000658  0a0001b7          BEQ      |L1.3388|
00065c  ea0001dc          B        |L1.3540|
                  |L1.1632|
000660  e1560f20          CMP      r6,r0,LSR #30
000664  1a000011          BNE      |L1.1712|
000668  e1dd01b8          LDRH     r0,[sp,#0x18]
00066c  e20000ff          AND      r0,r0,#0xff
000670  e3500010          CMP      r0,#0x10
000674  2a0001d6          BCS      |L1.3540|
000678  e0800005          ADD      r0,r0,r5
00067c  e5d00003          LDRB     r0,[r0,#3]
000680  ebfffffe          BL       get_driver
000684  e1b05000          MOVS     r5,r0
000688  0a0001d1          BEQ      |L1.3540|
00068c  e1cd60d0          LDRD     r6,r7,[sp,#0]
000690  e595000c          LDR      r0,[r5,#0xc]
000694  ebfffffe          BL       usbd_control_set_complete_callback
000698  e595300c          LDR      r3,[r5,#0xc]
00069c  e1a02006          MOV      r2,r6
0006a0  e3a01001          MOV      r1,#1
0006a4  e1a00007          MOV      r0,r7
0006a8  e12fff33          BLX      r3
0006ac  ea0001bf          B        |L1.3504|
                  |L1.1712|
0006b0  e3110060          TST      r1,#0x60
0006b4  1a0001c6          BNE      |L1.3540|
0006b8  e5dd0015          LDRB     r0,[sp,#0x15]
0006bc  e350000a          CMP      r0,#0xa
0006c0  379ff100          LDRCC    pc,[pc,r0,LSL #2]
                  |symbol_number.57|                  ; Alternate entry point
;;;485     */
;;;486    void tud_task_ext(uint32_t timeout_ms, bool in_isr)
;;;487    {
;;;488      (void) in_isr; // not implemented yet
;;;489    
;;;490      // Skip if stack is not initialized
;;;491      if ( !tud_inited() ) return;
;;;492    
;;;493      // Loop until there is no more events in the queue
;;;494      while (1)
;;;495      {
;;;496        dcd_event_t event;
;;;497        if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
;;;498    
;;;499    #if CFG_TUSB_DEBUG >= 2
;;;500        if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
;;;501        TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
;;;502    #endif
;;;503    
;;;504        switch ( event.event_id )
;;;505        {
;;;506          case DCD_EVENT_BUS_RESET:
;;;507            TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
;;;508            usbd_reset(event.rhport);
;;;509            _usbd_dev.speed = event.bus_reset.speed;
;;;510          break;
;;;511    
;;;512          case DCD_EVENT_UNPLUGGED:
;;;513            TU_LOG(USBD_DBG, "\r\n");
;;;514            usbd_reset(event.rhport);
;;;515    
;;;516            // invoke callback
;;;517            if (tud_umount_cb) tud_umount_cb();
;;;518          break;
;;;519    
;;;520          case DCD_EVENT_SETUP_RECEIVED:
;;;521            TU_LOG_PTR(USBD_DBG, &event.setup_received);
;;;522            TU_LOG(USBD_DBG, "\r\n");
;;;523    
;;;524            // Mark as connected after receiving 1st setup packet.
;;;525            // But it is easier to set it every time instead of wasting time to check then set
;;;526            _usbd_dev.connected = 1;
;;;527    
;;;528            // mark both in & out control as free
;;;529            _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
;;;530            _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
;;;531            _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
;;;532            _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
;;;533    
;;;534            // Process control request
;;;535            if ( !process_control_request(event.rhport, &event.setup_received) )
;;;536            {
;;;537              TU_LOG(USBD_DBG, "  Stall EP0\r\n");
;;;538              // Failed -> stall both control endpoint IN and OUT
;;;539              dcd_edpt_stall(event.rhport, 0);
;;;540              dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
;;;541            }
;;;542          break;
;;;543    
;;;544          case DCD_EVENT_XFER_COMPLETE:
;;;545          {
;;;546            // Invoke the class callback associated with the endpoint address
;;;547            uint8_t const ep_addr = event.xfer_complete.ep_addr;
;;;548            uint8_t const epnum   = tu_edpt_number(ep_addr);
;;;549            uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
;;;550    
;;;551            TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
;;;552    
;;;553            _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
;;;554            _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
;;;555    
;;;556            if ( 0 == epnum )
;;;557            {
;;;558              usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
;;;559              .len);
;;;560            }
;;;561            else
;;;562            {
;;;563              usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
;;;564              TU_ASSERT(driver, );
;;;565    
;;;566              TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
;;;567              driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
;;;568            }
;;;569          }
;;;570          break;
;;;571    
;;;572          case DCD_EVENT_SUSPEND:
;;;573            // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
;;;574            // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
;;;575            // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
;;;576            if ( _usbd_dev.connected )
;;;577            {
;;;578              TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
;;;579              if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
;;;580            }else
;;;581            {
;;;582              TU_LOG(USBD_DBG, " Skipped\r\n");
;;;583            }
;;;584          break;
;;;585    
;;;586          case DCD_EVENT_RESUME:
;;;587            if ( _usbd_dev.connected )
;;;588            {
;;;589              TU_LOG(USBD_DBG, "\r\n");
;;;590              if (tud_resume_cb) tud_resume_cb();
;;;591            }else
;;;592            {
;;;593              TU_LOG(USBD_DBG, " Skipped\r\n");
;;;594            }
;;;595          break;
;;;596    
;;;597          case USBD_EVENT_FUNC_CALL:
;;;598            TU_LOG(USBD_DBG, "\r\n");
;;;599            if ( event.func_call.func ) event.func_call.func(event.func_call.param);
;;;600          break;
;;;601    
;;;602          case DCD_EVENT_SOF:
;;;603          default:
;;;604            TU_BREAKPOINT();
;;;605          break;
;;;606        }
;;;607    
;;;608    #if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
;;;609        // return if there is no more events, for application to run other background
;;;610        if (osal_queue_empty(_usbd_q)) return;
;;;611    #endif
;;;612      }
;;;613    }
;;;614    
0006c4  ea0001c2          B        |L1.3540|
                          DCD      |symbol_number.57|+0x59c
                          DCD      |symbol_number.57|+0x580
                          DCD      |symbol_number.57|+0x710
                          DCD      |symbol_number.57|+0x568
                          DCD      |symbol_number.57|+0x710
                          DCD      |symbol_number.57|+0x2c
                          DCD      |symbol_number.57|+0x428
                          DCD      |symbol_number.57|+0x710
                          DCD      |symbol_number.57|+0x54
                          DCD      |symbol_number.57|+0x74
0006f0  e59d0000          LDR      r0,[sp,#0]
0006f4  ebfffffe          BL       usbd_control_set_request
0006f8  e1dd01b6          LDRH     r0,[sp,#0x16]
0006fc  e20010ff          AND      r1,r0,#0xff
000700  e59d0004          LDR      r0,[sp,#4]
000704  ebfffffe          BL       dcd_set_address
000708  e5d50000          LDRB     r0,[r5,#0]  ; _usbd_dev
00070c  e3800002          ORR      r0,r0,#2
000710  e5c50000          STRB     r0,[r5,#0]  ; _usbd_dev
000714  ea000232          B        |L1.4068|
000718  e5d50001          LDRB     r0,[r5,#1]  ; _usbd_dev
00071c  e59d1000          LDR      r1,[sp,#0]
000720  e3a03001          MOV      r3,#1
000724  e5cd0008          STRB     r0,[sp,#8]
000728  e59d0004          LDR      r0,[sp,#4]
00072c  e28d2008          ADD      r2,sp,#8
000730  ebfffffe          BL       tud_control_xfer
000734  ea00022a          B        |L1.4068|
000738  e51f052c          LDR      r0,|L1.532|
00073c  e1dd11b6          LDRH     r1,[sp,#0x16]
000740  e5d02001          LDRB     r2,[r0,#1]  ; _usbd_dev
000744  e20100ff          AND      r0,r1,#0xff
000748  e1520000          CMP      r2,r0
00074c  e58d003c          STR      r0,[sp,#0x3c]
000750  0a0000e1          BEQ      |L1.2780|
000754  e51f7548          LDR      r7,|L1.532|
000758  e5d70001          LDRB     r0,[r7,#1]  ; _usbd_dev
00075c  e3500000          CMP      r0,#0
000760  0a00002c          BEQ      |L1.2072|
000764  e59d0004          LDR      r0,[sp,#4]
000768  ebfffffe          BL       dcd_edpt_close_all
00076c  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
000770  e5d79002          LDRB     r9,[r7,#2]  ; _usbd_dev
000774  e59da004          LDR      r10,[sp,#4]
000778  e3700001          CMN      r0,#1
00077c  151f6554          LDRNE    r6,|L1.560|
000780  e3a05000          MOV      r5,#0
000784  0a000018          BEQ      |L1.2028|
                  |L1.1928|
000788  e3580000          CMP      r8,#0
00078c  e1a00005          MOV      r0,r5
000790  0a000007          BEQ      |L1.1972|
000794  e5d41000          LDRB     r1,[r4,#0]  ; _app_driver_count
000798  e1500001          CMP      r0,r1
00079c  20450001          SUBCS    r0,r5,r1
0007a0  35941004          LDRCC    r1,[r4,#4]  ; _app_driver
0007a4  220000ff          ANDCS    r0,r0,#0xff
0007a8  30850085          ADDCC    r0,r5,r5,LSL #1
0007ac  30810180          ADDCC    r0,r1,r0,LSL #3
0007b0  3a000002          BCC      |L1.1984|
                  |L1.1972|
0007b4  e3500000          CMP      r0,#0
0007b8  01a00006          MOVEQ    r0,r6
0007bc  1a00003a          BNE      |L1.2220|
                  |L1.1984|
0007c0  e3500000          CMP      r0,#0
0007c4  0a000038          BEQ      |L1.2220|
0007c8  e5901004          LDR      r1,[r0,#4]
0007cc  e1a0000a          MOV      r0,r10
0007d0  e12fff31          BLX      r1
0007d4  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
0007d8  e2851001          ADD      r1,r5,#1
0007dc  e20150ff          AND      r5,r1,#0xff
0007e0  e2800001          ADD      r0,r0,#1
0007e4  e1550000          CMP      r5,r0
0007e8  3affffe6          BCC      |L1.1928|
                  |L1.2028|
0007ec  e51f05e0          LDR      r0,|L1.532|
0007f0  e3a01023          MOV      r1,#0x23
0007f4  ebfffffe          BL       __aeabi_memclr4
0007f8  e3a020ff          MOV      r2,#0xff
0007fc  e3a01010          MOV      r1,#0x10
000800  e2870003          ADD      r0,r7,#3
000804  ebfffffe          BL       __aeabi_memset
000808  e59d0040          LDR      r0,[sp,#0x40]
00080c  e3a010ff          MOV      r1,#0xff
000810  ebfffffe          BL       __ARM_common_memset1_8
                  |L1.2068|
000814  e5c79002          STRB     r9,[r7,#2]  ; _usbd_dev
                  |L1.2072|
000818  e59d003c          LDR      r0,[sp,#0x3c]
00081c  e3500000          CMP      r0,#0
000820  0a0000ad          BEQ      |L1.2780|
000824  e59d0004          LDR      r0,[sp,#4]
000828  e58d0034          STR      r0,[sp,#0x34]
00082c  e59d003c          LDR      r0,[sp,#0x3c]
000830  e2400001          SUB      r0,r0,#1
000834  e20000ff          AND      r0,r0,#0xff
000838  ebfffffe          BL       tud_descriptor_configuration_cb
00083c  e3500000          CMP      r0,#0
000840  0a000002          BEQ      |L1.2128|
000844  e5d01001          LDRB     r1,[r0,#1]
000848  e3510002          CMP      r1,#2
00084c  0a00001b          BEQ      |L1.2240|
                  |L1.2128|
000850  e59f204c          LDR      r2,|L1.2212|
000854  e59f104c          LDR      r1,|L1.2216|
000858  e28f001c          ADR      r0,|L1.2172|
00085c  ebfffffe          BL       __2printf
000860  ea000092          B        |L1.2736|
                  |L1.2148|
                          DCD      ||.bss||+0x13
                  |L1.2152|
                          DCD      0x0000ffff
                  |L1.2156|
                          DCD      0x0000fffe
                  |L1.2160|
                          DCD      ||.bss||+0x3
                  |L1.2164|
                          DCD      0x000001bd
                  |L1.2168|
                          DCD      ||.constdata||+0x21
                  |L1.2172|
00087c  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
000880  643a2041
000884  53534552
000888  54204641
00088c  494c4544
000890  0d0a00  
000893  00                DCB      0
                  |L1.2196|
                          DCD      tud_umount_cb
                  |L1.2200|
                          DCD      0x00000279
                  |L1.2204|
                          DCD      ||.constdata||+0x42
                  |L1.2208|
                          DCD      tud_vendor_control_xfer_cb
                  |L1.2212|
                          DCD      0x00000375
                  |L1.2216|
                          DCD      ||.constdata||+0x5a
                  |L1.2220|
0008ac  e51f2040          LDR      r2,|L1.2164|
0008b0  e51f1040          LDR      r1,|L1.2168|
0008b4  e24f0040          ADR      r0,|L1.2172|
0008b8  ebfffffe          BL       __2printf
0008bc  eaffffd4          B        |L1.2068|
                  |L1.2240|
0008c0  e5d01007          LDRB     r1,[r0,#7]
0008c4  e5d7c000          LDRB     r12,[r7,#0]  ; _usbd_dev
0008c8  e3a03010          MOV      r3,#0x10
0008cc  e00310a1          AND      r1,r3,r1,LSR #1
0008d0  e3cc3010          BIC      r3,r12,#0x10
0008d4  e1811003          ORR      r1,r1,r3
0008d8  e5c71000          STRB     r1,[r7,#0]  ; _usbd_dev
0008dc  e5d03007          LDRB     r3,[r0,#7]
0008e0  e3a02020          MOV      r2,#0x20
0008e4  e3c11020          BIC      r1,r1,#0x20
0008e8  e00220a3          AND      r2,r2,r3,LSR #1
0008ec  e1811002          ORR      r1,r1,r2
0008f0  e5c71000          STRB     r1,[r7,#0]  ; _usbd_dev
0008f4  e5d01003          LDRB     r1,[r0,#3]
0008f8  e5d02002          LDRB     r2,[r0,#2]
0008fc  e2805009          ADD      r5,r0,#9
000900  e1821401          ORR      r1,r2,r1,LSL #8
000904  e0800001          ADD      r0,r0,r1
000908  e1550000          CMP      r5,r0
00090c  e58d0030          STR      r0,[sp,#0x30]
000910  2a00006e          BCS      |L1.2768|
                  |L1.2324|
000914  e5d50001          LDRB     r0,[r5,#1]
000918  e3a09001          MOV      r9,#1
00091c  e350000b          CMP      r0,#0xb
000920  1a000002          BNE      |L1.2352|
000924  e5d50000          LDRB     r0,[r5,#0]
000928  e5d59003          LDRB     r9,[r5,#3]
00092c  e0855000          ADD      r5,r5,r0
                  |L1.2352|
000930  e5d50001          LDRB     r0,[r5,#1]
000934  e3500004          CMP      r0,#4
000938  0a000004          BEQ      |L1.2384|
00093c  e51f109c          LDR      r1,|L1.2216|
000940  e3a02e39          MOV      r2,#0x390
000944  e24f00d0          ADR      r0,|L1.2172|
000948  ebfffffe          BL       __2printf
00094c  ea000057          B        |L1.2736|
                  |L1.2384|
000950  e59d0030          LDR      r0,[sp,#0x30]
000954  e5d41000          LDRB     r1,[r4,#0]  ; _app_driver_count
000958  e0400005          SUB      r0,r0,r5
00095c  e1a0b800          LSL      r11,r0,#16
000960  e3710001          CMN      r1,#1
000964  e3a07000          MOV      r7,#0
000968  e1a0b82b          LSR      r11,r11,#16
00096c  0a000047          BEQ      |L1.2704|
                  |L1.2416|
000970  e3580000          CMP      r8,#0
000974  e1a00007          MOV      r0,r7
000978  0a000024          BEQ      |L1.2576|
00097c  e5d41000          LDRB     r1,[r4,#0]  ; _app_driver_count
000980  e1500001          CMP      r0,r1
000984  20470001          SUBCS    r0,r7,r1
000988  220000ff          ANDCS    r0,r0,#0xff
00098c  2a00001f          BCS      |L1.2576|
000990  e5941004          LDR      r1,[r4,#4]  ; _app_driver
000994  e0870087          ADD      r0,r7,r7,LSL #1
000998  e0816180          ADD      r6,r1,r0,LSL #3
                  |L1.2460|
00099c  e3560000          CMP      r6,#0
0009a0  0a00001d          BEQ      |L1.2588|
0009a4  e5963008          LDR      r3,[r6,#8]
0009a8  e59d0034          LDR      r0,[sp,#0x34]
0009ac  e1a0200b          MOV      r2,r11
0009b0  e1a01005          MOV      r1,r5
0009b4  e12fff33          BLX      r3
0009b8  e3500009          CMP      r0,#9
0009bc  e1a0a000          MOV      r10,r0
0009c0  215b000a          CMPCS    r11,r10
0009c4  3a00002b          BCC      |L1.2680|
0009c8  e3590001          CMP      r9,#1
0009cc  0a000017          BEQ      |L1.2608|
0009d0  e3590000          CMP      r9,#0
0009d4  e3a00000          MOV      r0,#0
0009d8  9a00001f          BLS      |L1.2652|
                  |L1.2524|
0009dc  e51f17d0          LDR      r1,|L1.532|
                  |L1.2528|
0009e0  e5d52002          LDRB     r2,[r5,#2]
0009e4  e0822000          ADD      r2,r2,r0
0009e8  e20220ff          AND      r2,r2,#0xff
0009ec  e0822001          ADD      r2,r2,r1
0009f0  e5d23003          LDRB     r3,[r2,#3]
0009f4  e35300ff          CMP      r3,#0xff
0009f8  0a000012          BEQ      |L1.2632|
0009fc  e51f115c          LDR      r1,|L1.2216|
000a00  e3a02fee          MOV      r2,#0x3b8
000a04  e24f0e19          ADR      r0,|L1.2172|
000a08  ebfffffe          BL       __2printf
000a0c  ea000027          B        |L1.2736|
                  |L1.2576|
000a10  e3500000          CMP      r0,#0
000a14  051f67ec          LDREQ    r6,|L1.560|
000a18  0affffdf          BEQ      |L1.2460|
                  |L1.2588|
000a1c  e59f2850          LDR      r2,|L1.4724|
000a20  e51f1180          LDR      r1,|L1.2216|
000a24  e24f0e1b          ADR      r0,|L1.2172|
000a28  ebfffffe          BL       __2printf
000a2c  ea00001f          B        |L1.2736|
                  |L1.2608|
000a30  e59f0840          LDR      r0,|L1.4728|
000a34  e5961008          LDR      r1,[r6,#8]
000a38  e1510000          CMP      r1,r0
000a3c  03a09002          MOVEQ    r9,#2
000a40  e3a00000          MOV      r0,#0
000a44  eaffffe4          B        |L1.2524|
                  |L1.2632|
000a48  e2800001          ADD      r0,r0,#1
000a4c  e20000ff          AND      r0,r0,#0xff
000a50  e1500009          CMP      r0,r9
000a54  e5c27003          STRB     r7,[r2,#3]
000a58  3affffe0          BCC      |L1.2528|
                  |L1.2652|
000a5c  e51f0200          LDR      r0,|L1.2148|
000a60  e1a03007          MOV      r3,r7
000a64  e1a0200a          MOV      r2,r10
000a68  e1a01005          MOV      r1,r5
000a6c  ebfffffe          BL       tu_edpt_bind_driver
000a70  e085500a          ADD      r5,r5,r10
000a74  ea000005          B        |L1.2704|
                  |L1.2680|
000a78  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
000a7c  e2871001          ADD      r1,r7,#1
000a80  e20170ff          AND      r7,r1,#0xff
000a84  e2800001          ADD      r0,r0,#1
000a88  e1570000          CMP      r7,r0
000a8c  3affffb7          BCC      |L1.2416|
                  |L1.2704|
000a90  e5d40000          LDRB     r0,[r4,#0]  ; _app_driver_count
000a94  e2800001          ADD      r0,r0,#1
000a98  e1500007          CMP      r0,r7
000a9c  8a000008          BHI      |L1.2756|
000aa0  e59f27d4          LDR      r2,|L1.4732|
000aa4  e51f1204          LDR      r1,|L1.2216|
000aa8  e24f0f8d          ADR      r0,|L1.2172|
000aac  ebfffffe          BL       __2printf
                  |L1.2736|
000ab0  e59f27c8          LDR      r2,|L1.4736|
000ab4  e51f1220          LDR      r1,|L1.2204|
000ab8  e24f0f91          ADR      r0,|L1.2172|
000abc  ebfffffe          BL       __2printf
000ac0  ea0000c3          B        |L1.3540|
                  |L1.2756|
000ac4  e59d0030          LDR      r0,[sp,#0x30]
000ac8  e1500005          CMP      r0,r5
000acc  8affff90          BHI      |L1.2324|
                  |L1.2768|
000ad0  e59f07ac          LDR      r0,|L1.4740|
000ad4  e3500000          CMP      r0,#0
000ad8  1bfffffe          BLNE     tud_mount_cb
                  |L1.2780|
000adc  e51f18d0          LDR      r1,|L1.532|
000ae0  e59d003c          LDR      r0,[sp,#0x3c]
000ae4  e5c10001          STRB     r0,[r1,#1]  ; _usbd_dev
000ae8  ea00008f          B        |L1.3372|
000aec  e1dd11b6          LDRH     r1,[sp,#0x16]
000af0  e89d0060          LDM      sp,{r5,r6}
000af4  e1a00421          LSR      r0,r1,#8
000af8  e3500006          CMP      r0,#6
000afc  e20120ff          AND      r2,r1,#0xff
000b00  0a00003c          BEQ      |L1.3064|
000b04  ca000006          BGT      |L1.2852|
000b08  e3500001          CMP      r0,#1
000b0c  0a000009          BEQ      |L1.2872|
000b10  e3500002          CMP      r0,#2
000b14  0a000019          BEQ      |L1.2944|
000b18  e3500003          CMP      r0,#3
000b1c  0a00002f          BEQ      |L1.3040|
000b20  ea0000ab          B        |L1.3540|
                  |L1.2852|
000b24  e3500007          CMP      r0,#7
000b28  0a000014          BEQ      |L1.2944|
000b2c  e350000f          CMP      r0,#0xf
000b30  0a000007          BEQ      |L1.2900|
000b34  ea0000a6          B        |L1.3540|
                  |L1.2872|
000b38  ebfffffe          BL       tud_descriptor_device_cb
000b3c  e1a02000          MOV      r2,r0
000b40  e3a03012          MOV      r3,#0x12
000b44  e1a01005          MOV      r1,r5
000b48  e1a00006          MOV      r0,r6
000b4c  ebfffffe          BL       tud_control_xfer
000b50  ea000032          B        |L1.3104|
                  |L1.2900|
000b54  e59f072c          LDR      r0,|L1.4744|
000b58  e3500000          CMP      r0,#0
000b5c  0a00009c          BEQ      |L1.3540|
000b60  ebfffffe          BL       tud_descriptor_bos_cb
000b64  e1b02000          MOVS     r2,r0
000b68  1a00000d          BNE      |L1.2980|
000b6c  e59f1718          LDR      r1,|L1.4748|
000b70  e3a02ffe          MOV      r2,#0x3f8
000b74  e24f0c03          ADR      r0,|L1.2172|
000b78  ebfffffe          BL       __2printf
000b7c  ea000094          B        |L1.3540|
                  |L1.2944|
000b80  e3500002          CMP      r0,#2
000b84  0a00000d          BEQ      |L1.3008|
000b88  e59f0700          LDR      r0,|L1.4752|
000b8c  e3500000          CMP      r0,#0
000b90  0a00008f          BEQ      |L1.3540|
000b94  e1a00002          MOV      r0,r2
000b98  ebfffffe          BL       tud_descriptor_other_speed_configuration_cb
                  |L1.2972|
000b9c  e1b02000          MOVS     r2,r0
000ba0  0a000009          BEQ      |L1.3020|
                  |L1.2980|
000ba4  e5d21003          LDRB     r1,[r2,#3]
000ba8  e5d20002          LDRB     r0,[r2,#2]
000bac  e1803401          ORR      r3,r0,r1,LSL #8
000bb0  e1a01005          MOV      r1,r5
000bb4  e1a00006          MOV      r0,r6
000bb8  ebfffffe          BL       tud_control_xfer
000bbc  ea000017          B        |L1.3104|
                  |L1.3008|
000bc0  e1a00002          MOV      r0,r2
000bc4  ebfffffe          BL       tud_descriptor_configuration_cb
000bc8  eafffff3          B        |L1.2972|
                  |L1.3020|
000bcc  e59f26c0          LDR      r2,|L1.4756|
000bd0  e59f16b4          LDR      r1,|L1.4748|
000bd4  e24f0e36          ADR      r0,|L1.2172|
000bd8  ebfffffe          BL       __2printf
000bdc  ea00007c          B        |L1.3540|
                  |L1.3040|
000be0  e1dd11b8          LDRH     r1,[sp,#0x18]
000be4  e1a00002          MOV      r0,r2
000be8  ebfffffe          BL       tud_descriptor_string_cb
000bec  e1b02000          MOVS     r2,r0
000bf0  1a000006          BNE      |L1.3088|
000bf4  ea000076          B        |L1.3540|
                  |L1.3064|
000bf8  e59f0698          LDR      r0,|L1.4760|
000bfc  e3500000          CMP      r0,#0
000c00  0a000073          BEQ      |L1.3540|
000c04  ebfffffe          BL       tud_descriptor_device_qualifier_cb
000c08  e1b02000          MOVS     r2,r0
000c0c  0a000070          BEQ      |L1.3540|
                  |L1.3088|
000c10  e5d23000          LDRB     r3,[r2,#0]
000c14  e1a01005          MOV      r1,r5
000c18  e1a00006          MOV      r0,r6
000c1c  ebfffffe          BL       tud_control_xfer
                  |L1.3104|
000c20  e3500000          CMP      r0,#0
000c24  1a0000ee          BNE      |L1.4068|
000c28  ea000069          B        |L1.3540|
000c2c  e1dd01b6          LDRH     r0,[sp,#0x16]
000c30  e3500001          CMP      r0,#1
000c34  05d50000          LDRBEQ   r0,[r5,#0]  ; _usbd_dev
000c38  03800008          ORREQ    r0,r0,#8
000c3c  1a000064          BNE      |L1.3540|
000c40  ea000004          B        |L1.3160|
000c44  e1dd01b6          LDRH     r0,[sp,#0x16]
000c48  e3500001          CMP      r0,#1
000c4c  05d50000          LDRBEQ   r0,[r5,#0]  ; _usbd_dev
000c50  03c00008          BICEQ    r0,r0,#8
000c54  1a00005e          BNE      |L1.3540|
                  |L1.3160|
000c58  e5c50000          STRB     r0,[r5,#0]  ; _usbd_dev
000c5c  ea000032          B        |L1.3372|
000c60  e5d50000          LDRB     r0,[r5,#0]  ; _usbd_dev
000c64  e3a03002          MOV      r3,#2
000c68  e28d2008          ADD      r2,sp,#8
000c6c  e2101008          ANDS     r1,r0,#8
000c70  13a01002          MOVNE    r1,#2
000c74  e1a00d00          LSL      r0,r0,#26
000c78  e1810fa0          ORR      r0,r1,r0,LSR #31
000c7c  e1cd00b8          STRH     r0,[sp,#8]
000c80  e59d0004          LDR      r0,[sp,#4]
000c84  e59d1000          LDR      r1,[sp,#0]
000c88  ebfffffe          BL       tud_control_xfer
000c8c  ea0000d4          B        |L1.4068|
                  |L1.3216|
000c90  e1dd01b8          LDRH     r0,[sp,#0x18]
000c94  e20000ff          AND      r0,r0,#0xff
000c98  e3500010          CMP      r0,#0x10
000c9c  2a00004c          BCS      |L1.3540|
000ca0  e0800005          ADD      r0,r0,r5
000ca4  e5d00003          LDRB     r0,[r0,#3]
000ca8  ebfffffe          BL       get_driver
000cac  e1b07000          MOVS     r7,r0
000cb0  0a000047          BEQ      |L1.3540|
000cb4  e89d0060          LDM      sp,{r5,r6}
000cb8  e597000c          LDR      r0,[r7,#0xc]
000cbc  ebfffffe          BL       usbd_control_set_complete_callback
000cc0  e597300c          LDR      r3,[r7,#0xc]
000cc4  e1a02005          MOV      r2,r5
000cc8  e3a01001          MOV      r1,#1
000ccc  e1a00006          MOV      r0,r6
000cd0  e12fff33          BLX      r3
000cd4  e3500000          CMP      r0,#0
000cd8  1a0000c1          BNE      |L1.4068|
000cdc  e5dd0014          LDRB     r0,[sp,#0x14]
000ce0  e3100060          TST      r0,#0x60
000ce4  1a00003a          BNE      |L1.3540|
000ce8  e5dd0015          LDRB     r0,[sp,#0x15]
000cec  e350000a          CMP      r0,#0xa
000cf0  1350000b          CMPNE    r0,#0xb
000cf4  1a000036          BNE      |L1.3540|
000cf8  e3a00000          MOV      r0,#0
000cfc  ebfffffe          BL       usbd_control_set_complete_callback
000d00  e5dd0015          LDRB     r0,[sp,#0x15]
000d04  e350000a          CMP      r0,#0xa
000d08  1a000007          BNE      |L1.3372|
000d0c  e3a00000          MOV      r0,#0
000d10  e5cd0008          STRB     r0,[sp,#8]
000d14  e59d0004          LDR      r0,[sp,#4]
000d18  e59d1000          LDR      r1,[sp,#0]
000d1c  e3a03001          MOV      r3,#1
000d20  e28d2008          ADD      r2,sp,#8
000d24  ebfffffe          BL       tud_control_xfer
000d28  ea0000ad          B        |L1.4068|
                  |L1.3372|
000d2c  e59d0004          LDR      r0,[sp,#4]
000d30  e59d1000          LDR      r1,[sp,#0]
000d34  ebfffffe          BL       tud_control_status
000d38  ea0000a9          B        |L1.4068|
                  |L1.3388|
000d3c  e1dd01b8          LDRH     r0,[sp,#0x18]
000d40  e20090ff          AND      r9,r0,#0xff
000d44  e3c90080          BIC      r0,r9,#0x80
000d48  e3500004          CMP      r0,#4
000d4c  e1a013a9          LSR      r1,r9,#7
000d50  3a000004          BCC      |L1.3432|
000d54  e59f2540          LDR      r2,|L1.4764|
000d58  e51f14c4          LDR      r1,|L1.2204|
000d5c  e59f053c          LDR      r0,|L1.4768|
000d60  ebfffffe          BL       __2printf
000d64  ea00001a          B        |L1.3540|
                  |L1.3432|
000d68  e0850080          ADD      r0,r5,r0,LSL #1
000d6c  e0807001          ADD      r7,r0,r1
000d70  e5d70013          LDRB     r0,[r7,#0x13]
000d74  ebfffffe          BL       get_driver
000d78  e1a06000          MOV      r6,r0
000d7c  e5dd0014          LDRB     r0,[sp,#0x14]
000d80  e3100060          TST      r0,#0x60
000d84  0a00000c          BEQ      |L1.3516|
000d88  e3560000          CMP      r6,#0
000d8c  0a000010          BEQ      |L1.3540|
000d90  e89d00a0          LDM      sp,{r5,r7}
000d94  e596000c          LDR      r0,[r6,#0xc]
000d98  ebfffffe          BL       usbd_control_set_complete_callback
000d9c  e596300c          LDR      r3,[r6,#0xc]
000da0  e1a02005          MOV      r2,r5
000da4  e3a01001          MOV      r1,#1
000da8  e1a00007          MOV      r0,r7
000dac  e12fff33          BLX      r3
                  |L1.3504|
000db0  e3500000          CMP      r0,#0
000db4  1a00008a          BNE      |L1.4068|
000db8  ea000005          B        |L1.3540|
                  |L1.3516|
000dbc  e5dd0015          LDRB     r0,[sp,#0x15]
000dc0  e3500000          CMP      r0,#0
000dc4  0a000009          BEQ      |L1.3568|
000dc8  e3500001          CMP      r0,#1
000dcc  13500003          CMPNE    r0,#3
000dd0  0a000010          BEQ      |L1.3608|
                  |L1.3540|
000dd4  e5dd0010          LDRB     r0,[sp,#0x10]
000dd8  e3a01000          MOV      r1,#0
000ddc  ebfffffe          BL       dcd_edpt_stall
000de0  e5dd0010          LDRB     r0,[sp,#0x10]
000de4  e3a01080          MOV      r1,#0x80
000de8  ebfffffe          BL       dcd_edpt_stall
000dec  ea00007c          B        |L1.4068|
                  |L1.3568|
000df0  e5d7001b          LDRB     r0,[r7,#0x1b]
000df4  e59d1000          LDR      r1,[sp,#0]
000df8  e3a03002          MOV      r3,#2
000dfc  e2000002          AND      r0,r0,#2
000e00  e1a000a0          LSR      r0,r0,#1
000e04  e1cd00bc          STRH     r0,[sp,#0xc]
000e08  e59d0004          LDR      r0,[sp,#4]
000e0c  e28d200c          ADD      r2,sp,#0xc
000e10  ebfffffe          BL       tud_control_xfer
000e14  ea000072          B        |L1.4068|
                  |L1.3608|
000e18  e1dd11b6          LDRH     r1,[sp,#0x16]
000e1c  e3510000          CMP      r1,#0
000e20  1a000018          BNE      |L1.3720|
000e24  e3500001          CMP      r0,#1
000e28  e5d7001b          LDRB     r0,[r7,#0x1b]
000e2c  e1a01009          MOV      r1,r9
000e30  e2002002          AND      r2,r0,#2
000e34  e5d40001          LDRB     r0,[r4,#1]  ; _usbd_rhport
000e38  0a000002          BEQ      |L1.3656|
000e3c  e3520000          CMP      r2,#0
000e40  0a000009          BEQ      |L1.3692|
000e44  ea00000f          B        |L1.3720|
                  |L1.3656|
000e48  e3520000          CMP      r2,#0
000e4c  0a00000d          BEQ      |L1.3720|
000e50  ebfffffe          BL       dcd_edpt_clear_stall
000e54  e5d7001b          LDRB     r0,[r7,#0x1b]
000e58  e3c00002          BIC      r0,r0,#2
000e5c  e5c7001b          STRB     r0,[r7,#0x1b]
000e60  e5d7001b          LDRB     r0,[r7,#0x1b]
000e64  e3c00001          BIC      r0,r0,#1
000e68  ea000005          B        |L1.3716|
                  |L1.3692|
000e6c  ebfffffe          BL       dcd_edpt_stall
000e70  e5d7001b          LDRB     r0,[r7,#0x1b]
000e74  e3800002          ORR      r0,r0,#2
000e78  e5c7001b          STRB     r0,[r7,#0x1b]
000e7c  e5d7001b          LDRB     r0,[r7,#0x1b]
000e80  e3800001          ORR      r0,r0,#1
                  |L1.3716|
000e84  e5c7001b          STRB     r0,[r7,#0x1b]
                  |L1.3720|
000e88  e3560000          CMP      r6,#0
000e8c  0a000054          BEQ      |L1.4068|
000e90  e89d0280          LDM      sp,{r7,r9}
000e94  e596000c          LDR      r0,[r6,#0xc]
000e98  ebfffffe          BL       usbd_control_set_complete_callback
000e9c  e596300c          LDR      r3,[r6,#0xc]
000ea0  e1a02007          MOV      r2,r7
000ea4  e3a01001          MOV      r1,#1
000ea8  e1a00009          MOV      r0,r9
000eac  e12fff33          BLX      r3
000eb0  e3a00000          MOV      r0,#0
000eb4  ebfffffe          BL       usbd_control_set_complete_callback
000eb8  e5d5001c          LDRB     r0,[r5,#0x1c]  ; _usbd_dev
000ebc  e3100001          TST      r0,#1
000ec0  0affff99          BEQ      |L1.3372|
000ec4  ea000046          B        |L1.4068|
000ec8  e5dd1014          LDRB     r1,[sp,#0x14]
000ecc  e51f0cc0          LDR      r0,|L1.532|
000ed0  e3d12080          BICS     r2,r1,#0x80
000ed4  e0800082          ADD      r0,r0,r2,LSL #1
000ed8  e08003a1          ADD      r0,r0,r1,LSR #7
000edc  e5d0301b          LDRB     r3,[r0,#0x1b]
000ee0  e3c33001          BIC      r3,r3,#1
000ee4  e5c0301b          STRB     r3,[r0,#0x1b]
000ee8  e5d0301b          LDRB     r3,[r0,#0x1b]
000eec  e3c33004          BIC      r3,r3,#4
000ef0  e5c0301b          STRB     r3,[r0,#0x1b]
000ef4  0a00000e          BEQ      |L1.3892|
000ef8  e5d00013          LDRB     r0,[r0,#0x13]
000efc  e3580000          CMP      r8,#0
000f00  0a000007          BEQ      |L1.3876|
000f04  e5d42000          LDRB     r2,[r4,#0]  ; _app_driver_count
000f08  e1500002          CMP      r0,r2
000f0c  20400002          SUBCS    r0,r0,r2
000f10  35942004          LDRCC    r2,[r4,#4]  ; _app_driver
000f14  220000ff          ANDCS    r0,r0,#0xff
000f18  30800080          ADDCC    r0,r0,r0,LSL #1
000f1c  30820180          ADDCC    r0,r2,r0,LSL #3
000f20  3a000008          BCC      |L1.3912|
                  |L1.3876|
000f24  e3500000          CMP      r0,#0
000f28  051f0d00          LDREQ    r0,|L1.560|
000f2c  1a00000d          BNE      |L1.3944|
000f30  ea000004          B        |L1.3912|
                  |L1.3892|
000f34  e59d3018          LDR      r3,[sp,#0x18]
000f38  e5dd2015          LDRB     r2,[sp,#0x15]
000f3c  e5dd0010          LDRB     r0,[sp,#0x10]
000f40  ebfffffe          BL       usbd_control_xfer_cb
000f44  ea000026          B        |L1.4068|
                  |L1.3912|
000f48  e3500000          CMP      r0,#0
000f4c  0a000005          BEQ      |L1.3944|
000f50  e590c010          LDR      r12,[r0,#0x10]
000f54  e59d3018          LDR      r3,[sp,#0x18]
000f58  e5dd2015          LDRB     r2,[sp,#0x15]
000f5c  e5dd0010          LDRB     r0,[sp,#0x10]
000f60  e12fff3c          BLX      r12
000f64  ea00001e          B        |L1.4068|
                  |L1.3944|
000f68  e59f1334          LDR      r1,|L1.4772|
000f6c  e59f032c          LDR      r0,|L1.4768|
000f70  e3a02f8d          MOV      r2,#0x234
000f74  ebfffffe          BL       __2printf
000f78  e28dd054          ADD      sp,sp,#0x54
000f7c  e8bd8ff0          POP      {r4-r11,pc}
000f80  e51f0d74          LDR      r0,|L1.532|
000f84  e5d01000          LDRB     r1,[r0,#0]  ; _usbd_dev
000f88  e3110001          TST      r1,#1
000f8c  159f1314          LDRNE    r1,|L1.4776|
000f90  13510000          CMPNE    r1,#0
000f94  0a000012          BEQ      |L1.4068|
000f98  e5d00000          LDRB     r0,[r0,#0]  ; _usbd_dev
000f9c  e1a00e00          LSL      r0,r0,#28
000fa0  e1a00fa0          LSR      r0,r0,#31
000fa4  ebfffffe          BL       tud_suspend_cb
000fa8  ea00000d          B        |L1.4068|
000fac  e51f0da0          LDR      r0,|L1.532|
000fb0  e5d00000          LDRB     r0,[r0,#0]  ; _usbd_dev
000fb4  e3100001          TST      r0,#1
000fb8  159f02ec          LDRNE    r0,|L1.4780|
000fbc  13500000          CMPNE    r0,#0
000fc0  0a000007          BEQ      |L1.4068|
000fc4  ebfffffe          BL       tud_resume_cb
000fc8  ea000005          B        |L1.4068|
000fcc  e59d0014          LDR      r0,[sp,#0x14]
000fd0  e3500000          CMP      r0,#0
000fd4  0a000002          BEQ      |L1.4068|
000fd8  e59d1014          LDR      r1,[sp,#0x14]
000fdc  e59d0018          LDR      r0,[sp,#0x18]
000fe0  e12fff31          BLX      r1
                  |L1.4068|
000fe4  e5945008          LDR      r5,[r4,#8]  ; _usbd_q
000fe8  e5950008          LDR      r0,[r5,#8]
000fec  ebfffffe          BL       os_mbx_check
000ff0  e1d510b0          LDRH     r1,[r5,#0]
000ff4  e1500001          CMP      r0,r1
000ff8  1afffcde          BNE      |L1.888|
000ffc  e28dd054          ADD      sp,sp,#0x54
001000  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  dcd_event_handler PROC
;;;1084   //--------------------------------------------------------------------+
;;;1085   TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
001004  e92d4ff0          PUSH     {r4-r11,lr}
;;;1086   {
001008  e1a06000          MOV      r6,r0
;;;1087     switch (event->event_id)
00100c  e5d00001          LDRB     r0,[r0,#1]
001010  e51fb7b0          LDR      r11,|L1.2152|
;;;1088     {
;;;1089       case DCD_EVENT_UNPLUGGED:
;;;1090         _usbd_dev.connected  = 0;
;;;1091         _usbd_dev.addressed  = 0;
;;;1092         _usbd_dev.cfg_num    = 0;
;;;1093         _usbd_dev.suspended  = 0;
;;;1094         osal_queue_send(_usbd_q, event, in_isr);
001014  e51f8e04          LDR      r8,|L1.536|
001018  e51f5e0c          LDR      r5,|L1.532|
00101c  e1a07001          MOV      r7,r1                 ;1086
001020  e3500002          CMP      r0,#2                 ;1087
001024  e24dd00c          SUB      sp,sp,#0xc            ;1086
001028  e3a01000          MOV      r1,#0                 ;1086
00102c  0a00000f          BEQ      |L1.4208|
001030  e3500003          CMP      r0,#3                 ;1087
001034  0a000047          BEQ      |L1.4440|
001038  e3500004          CMP      r0,#4                 ;1087
00103c  0a00001f          BEQ      |L1.4288|
001040  e3500005          CMP      r0,#5                 ;1087
001044  0a00002e          BEQ      |L1.4356|
001048  e5984008          LDR      r4,[r8,#8]            ;1087  ; _usbd_q
00104c  e5940004          LDR      r0,[r4,#4]            ;1087
001050  ef000001          SVC      #0x1                  ;1087
001054  e1d420b2          LDRH     r2,[r4,#2]            ;1087
001058  e1a05000          MOV      r5,r0                 ;1087
00105c  e1a01006          MOV      r1,r6                 ;1087
001060  ebfffffe          BL       __aeabi_memcpy
001064  e3570000          CMP      r7,#0                 ;1087
001068  0a00007b          BEQ      |L1.4700|
00106c  ea000034          B        |L1.4420|
                  |L1.4208|
001070  e5d50000          LDRB     r0,[r5,#0]            ;1090  ; _usbd_dev
001074  e3c00001          BIC      r0,r0,#1              ;1090
001078  e5c50000          STRB     r0,[r5,#0]            ;1090  ; _usbd_dev
00107c  e5d50000          LDRB     r0,[r5,#0]            ;1091  ; _usbd_dev
001080  e3c00002          BIC      r0,r0,#2              ;1091
001084  e5c50000          STRB     r0,[r5,#0]            ;1091  ; _usbd_dev
001088  e5c51001          STRB     r1,[r5,#1]            ;1092  ; _usbd_dev
00108c  e5d50000          LDRB     r0,[r5,#0]            ;1093  ; _usbd_dev
001090  e3c00004          BIC      r0,r0,#4              ;1093
001094  e5c50000          STRB     r0,[r5,#0]            ;1093  ; _usbd_dev
001098  e5984008          LDR      r4,[r8,#8]            ;1093  ; _usbd_q
00109c  e5940004          LDR      r0,[r4,#4]            ;1093
0010a0  ef000001          SVC      #0x1                  ;1093
0010a4  e1d420b2          LDRH     r2,[r4,#2]            ;1093
0010a8  e1a05000          MOV      r5,r0                 ;1093
0010ac  e1a01006          MOV      r1,r6                 ;1093
0010b0  ebfffffe          BL       __aeabi_memcpy
0010b4  e3570000          CMP      r7,#0                 ;1093
0010b8  1a000021          BNE      |L1.4420|
0010bc  ea000066          B        |L1.4700|
                  |L1.4288|
;;;1095       break;
;;;1096   
;;;1097       case DCD_EVENT_SUSPEND:
;;;1098         // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
;;;1099         // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
;;;1100         // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
;;;1101         // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
;;;1102         if ( _usbd_dev.connected )
0010c0  e5d50000          LDRB     r0,[r5,#0]  ; _usbd_dev
0010c4  e3100001          TST      r0,#1
;;;1103         {
;;;1104           _usbd_dev.suspended = 1;
;;;1105           osal_queue_send(_usbd_q, event, in_isr);
;;;1106         }
;;;1107       break;
;;;1108   
;;;1109       case DCD_EVENT_RESUME:
;;;1110         // skip event if not connected (especially required for SAMD)
;;;1111         if ( _usbd_dev.connected )
;;;1112         {
;;;1113           _usbd_dev.suspended = 0;
;;;1114           osal_queue_send(_usbd_q, event, in_isr);
;;;1115         }
;;;1116       break;
;;;1117   
;;;1118       case DCD_EVENT_SOF:
;;;1119         // SOF driver handler in ISR context
;;;1120         for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
;;;1121         {
;;;1122           usbd_class_driver_t const * driver = get_driver(i);
;;;1123           if (driver && driver->sof)
;;;1124           {
;;;1125             driver->sof(event->rhport, event->sof.frame_count);
;;;1126           }
;;;1127         }
;;;1128   
;;;1129         // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
;;;1130         // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
;;;1131         if ( _usbd_dev.suspended )
;;;1132         {
;;;1133           _usbd_dev.suspended = 0;
;;;1134   
;;;1135           dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
;;;1136           osal_queue_send(_usbd_q, &event_resume, in_isr);
;;;1137         }
;;;1138   
;;;1139         // skip osal queue for SOF in usbd task
;;;1140       break;
;;;1141   
;;;1142       default:
;;;1143         osal_queue_send(_usbd_q, event, in_isr);
;;;1144       break;
;;;1145     }
;;;1146   }
0010c8  028dd00c          ADDEQ    sp,sp,#0xc
0010cc  08bd8ff0          POPEQ    {r4-r11,pc}
0010d0  e5d50000          LDRB     r0,[r5,#0]            ;1104  ; _usbd_dev
0010d4  e3800004          ORR      r0,r0,#4              ;1104
0010d8  e5c50000          STRB     r0,[r5,#0]            ;1104  ; _usbd_dev
0010dc  e5984008          LDR      r4,[r8,#8]            ;1104  ; _usbd_q
0010e0  e5940004          LDR      r0,[r4,#4]            ;1104
0010e4  ef000001          SVC      #0x1                  ;1104
0010e8  e1d420b2          LDRH     r2,[r4,#2]            ;1104
0010ec  e1a05000          MOV      r5,r0                 ;1104
0010f0  e1a01006          MOV      r1,r6                 ;1104
0010f4  ebfffffe          BL       __aeabi_memcpy
0010f8  e3570000          CMP      r7,#0                 ;1104
0010fc  0a000056          BEQ      |L1.4700|
001100  ea00000f          B        |L1.4420|
                  |L1.4356|
001104  e5d50000          LDRB     r0,[r5,#0]            ;1111  ; _usbd_dev
001108  e3100001          TST      r0,#1                 ;1111
00110c  028dd00c          ADDEQ    sp,sp,#0xc
001110  08bd8ff0          POPEQ    {r4-r11,pc}
001114  e5d50000          LDRB     r0,[r5,#0]            ;1113  ; _usbd_dev
001118  e3c00004          BIC      r0,r0,#4              ;1113
00111c  e5c50000          STRB     r0,[r5,#0]            ;1113  ; _usbd_dev
001120  e5984008          LDR      r4,[r8,#8]            ;1113  ; _usbd_q
001124  e5940004          LDR      r0,[r4,#4]            ;1113
001128  ef000001          SVC      #0x1                  ;1113
00112c  e1d420b2          LDRH     r2,[r4,#2]            ;1113
001130  e1a05000          MOV      r5,r0                 ;1113
001134  e1a01006          MOV      r1,r6                 ;1113
001138  ebfffffe          BL       __aeabi_memcpy
00113c  e3570000          CMP      r7,#0                 ;1113
001140  0a000045          BEQ      |L1.4700|
                  |L1.4420|
001144  e5940008          LDR      r0,[r4,#8]            ;1113
001148  e1a01005          MOV      r1,r5                 ;1113
00114c  e28dd00c          ADD      sp,sp,#0xc            ;1113
001150  e8bd4ff0          POP      {r4-r11,lr}           ;1113
001154  eafffffe          B        isr_mbx_send
                  |L1.4440|
001158  e5d80000          LDRB     r0,[r8,#0]            ;1120  ; _app_driver_count
00115c  e3a04000          MOV      r4,#0                 ;1120
001160  e3700001          CMN      r0,#1                 ;1120
001164  151faf40          LDRNE    r10,|L1.556|
001168  151f9f40          LDRNE    r9,|L1.560|
00116c  0a00001a          BEQ      |L1.4572|
                  |L1.4464|
001170  e35a0000          CMP      r10,#0                ;1120
001174  e1a00004          MOV      r0,r4                 ;1122
001178  0a000007          BEQ      |L1.4508|
00117c  e5d81000          LDRB     r1,[r8,#0]            ;1122  ; _app_driver_count
001180  e1500001          CMP      r0,r1                 ;1122
001184  20440001          SUBCS    r0,r4,r1              ;1122
001188  35981004          LDRCC    r1,[r8,#4]            ;1122  ; _app_driver
00118c  220000ff          ANDCS    r0,r0,#0xff           ;1122
001190  30840084          ADDCC    r0,r4,r4,LSL #1       ;1122
001194  30810180          ADDCC    r0,r1,r0,LSL #3       ;1122
001198  3a000002          BCC      |L1.4520|
                  |L1.4508|
00119c  e3500000          CMP      r0,#0                 ;1122
0011a0  01a00009          MOVEQ    r0,r9                 ;1122
0011a4  1a000006          BNE      |L1.4548|
                  |L1.4520|
0011a8  e3500000          CMP      r0,#0                 ;1123
0011ac  15902014          LDRNE    r2,[r0,#0x14]         ;1123
0011b0  13520000          CMPNE    r2,#0                 ;1123
0011b4  0a000002          BEQ      |L1.4548|
0011b8  e5961004          LDR      r1,[r6,#4]            ;1125
0011bc  e5d60000          LDRB     r0,[r6,#0]            ;1125
0011c0  e12fff32          BLX      r2                    ;1125
                  |L1.4548|
0011c4  e5d80000          LDRB     r0,[r8,#0]            ;1120  ; _app_driver_count
0011c8  e2841001          ADD      r1,r4,#1              ;1120
0011cc  e20140ff          AND      r4,r1,#0xff           ;1120
0011d0  e2800001          ADD      r0,r0,#1              ;1120
0011d4  e1540000          CMP      r4,r0                 ;1120
0011d8  3affffe4          BCC      |L1.4464|
                  |L1.4572|
0011dc  e5d50000          LDRB     r0,[r5,#0]            ;1131  ; _usbd_dev
0011e0  e3100004          TST      r0,#4                 ;1131
0011e4  028dd00c          ADDEQ    sp,sp,#0xc
0011e8  08bd8ff0          POPEQ    {r4-r11,pc}
0011ec  e5d50000          LDRB     r0,[r5,#0]            ;1133  ; _usbd_dev
0011f0  e3c00004          BIC      r0,r0,#4              ;1133
0011f4  e5c50000          STRB     r0,[r5,#0]            ;1133  ; _usbd_dev
0011f8  e59f20b0          LDR      r2,|L1.4784|
0011fc  e1a0500d          MOV      r5,sp                 ;1136
001200  e8920007          LDM      r2,{r0-r2}            ;1135
001204  e88d0007          STM      sp,{r0-r2}            ;1135
001208  e5d60000          LDRB     r0,[r6,#0]            ;1135
00120c  e5cd0000          STRB     r0,[sp,#0]            ;1135
001210  e5984008          LDR      r4,[r8,#8]            ;1135  ; _usbd_q
001214  e5940004          LDR      r0,[r4,#4]            ;1135
001218  ef000001          SVC      #0x1                  ;1135
00121c  e1d420b2          LDRH     r2,[r4,#2]            ;1135
001220  e1a06000          MOV      r6,r0                 ;1135
001224  e1a01005          MOV      r1,r5                 ;1135
001228  ebfffffe          BL       __aeabi_memcpy
00122c  e5940008          LDR      r0,[r4,#8]            ;1135
001230  e3570000          CMP      r7,#0                 ;1135
001234  0a000003          BEQ      |L1.4680|
001238  e1a01006          MOV      r1,r6                 ;1135
00123c  ebfffffe          BL       isr_mbx_send
001240  e28dd00c          ADD      sp,sp,#0xc
001244  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4680|
001248  e1a0200b          MOV      r2,r11
00124c  e1a01006          MOV      r1,r6
001250  ebfffffe          BL       os_mbx_send
001254  e28dd00c          ADD      sp,sp,#0xc
001258  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4700|
00125c  e5940008          LDR      r0,[r4,#8]
001260  e1a0200b          MOV      r2,r11
001264  e1a01005          MOV      r1,r5
001268  e28dd00c          ADD      sp,sp,#0xc
00126c  e8bd4ff0          POP      {r4-r11,lr}
001270  eafffffe          B        os_mbx_send
                  |L1.4724|
                          DCD      0x00000399
                  |L1.4728|
                          DCD      cdcd_open
                  |L1.4732|
                          DCD      0x000003c7
                  |L1.4736|
                          DCD      0x000002cd
                  |L1.4740|
                          DCD      tud_mount_cb
                  |L1.4744|
                          DCD      tud_descriptor_bos_cb
                  |L1.4748|
                          DCD      ||.constdata||+0x6d
                  |L1.4752|
                          DCD      tud_descriptor_other_speed_configuration_cb
                  |L1.4756|
                          DCD      0x00000412
                  |L1.4760|
                          DCD      tud_descriptor_device_qualifier_cb
                  |L1.4764|
                          DCD      0x0000032d
                  |L1.4768|
                          DCD      ||.text||+0x87c
                  |L1.4772|
                          DCD      ||.constdata||+0x35
                  |L1.4776|
                          DCD      tud_suspend_cb
                  |L1.4780|
                          DCD      tud_resume_cb
                  |L1.4784|
                          DCD      ||.constdata||+0x84
                          ENDP

                  usbd_int_set PROC
;;;1151   
;;;1152   void usbd_int_set(bool enabled)
0012b4  e59f14e0          LDR      r1,|L1.6044|
;;;1153   {
;;;1154     if (enabled)
0012b8  e3500000          CMP      r0,#0
;;;1155     {
;;;1156       dcd_int_enable(_usbd_rhport);
0012bc  e5d10001          LDRB     r0,[r1,#1]
0012c0  0a000000          BEQ      |L1.4808|
0012c4  eafffffe          B        dcd_int_enable
                  |L1.4808|
;;;1157     }else
;;;1158     {
;;;1159       dcd_int_disable(_usbd_rhport);
0012c8  eafffffe          B        dcd_int_disable
;;;1160     }
;;;1161   }
;;;1162   
                          ENDP

                  usbd_edpt_open PROC
;;;1205   
;;;1206   bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
0012cc  e92d4070          PUSH     {r4-r6,lr}
;;;1207   {
;;;1208     rhport = _usbd_rhport;
;;;1209   
;;;1210     TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
0012d0  e5d10002          LDRB     r0,[r1,#2]
0012d4  e1a04001          MOV      r4,r1                 ;1207
0012d8  e59f14bc          LDR      r1,|L1.6044|
0012dc  e3c00080          BIC      r0,r0,#0x80
0012e0  e5d15001          LDRB     r5,[r1,#1]            ;1208  ; _usbd_rhport
0012e4  e3500004          CMP      r0,#4
0012e8  3a000005          BCC      |L1.4868|
0012ec  e59f24ac          LDR      r2,|L1.6048|
0012f0  e59f14ac          LDR      r1,|L1.6052|
0012f4  e51f005c          LDR      r0,|L1.4768|
0012f8  ebfffffe          BL       __2printf
0012fc  e3a00000          MOV      r0,#0
;;;1211     TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
;;;1212   
;;;1213     return dcd_edpt_open(rhport, desc_ep);
;;;1214   }
001300  e8bd8070          POP      {r4-r6,pc}
                  |L1.4868|
001304  e59f049c          LDR      r0,|L1.6056|
001308  e5d01002          LDRB     r1,[r0,#2]            ;1211  ; _usbd_dev
00130c  e1a00004          MOV      r0,r4                 ;1211
001310  ebfffffe          BL       tu_edpt_validate
001314  e3500000          CMP      r0,#0                 ;1211
001318  0a000003          BEQ      |L1.4908|
00131c  e1a01004          MOV      r1,r4                 ;1213
001320  e1a00005          MOV      r0,r5                 ;1213
001324  e8bd4070          POP      {r4-r6,lr}            ;1213
001328  eafffffe          B        dcd_edpt_open
                  |L1.4908|
00132c  e59f2478          LDR      r2,|L1.6060|
001330  e59f146c          LDR      r1,|L1.6052|
001334  e51f009c          LDR      r0,|L1.4768|
001338  ebfffffe          BL       __2printf
00133c  e3a00000          MOV      r0,#0                 ;1211
001340  e8bd8070          POP      {r4-r6,pc}
;;;1215   
                          ENDP

                  usbd_open_edpt_pair PROC
;;;1163   // Parse consecutive endpoint descriptors (IN & OUT)
;;;1164   bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
001344  e92d5ff0          PUSH     {r4-r12,lr}
;;;1165   {
001348  e2526000          SUBS     r6,r2,#0
00134c  c59f9448          LDRGT    r9,|L1.6044|
001350  c59fa450          LDRGT    r10,|L1.6056|
001354  e1a07003          MOV      r7,r3
001358  e1a04001          MOV      r4,r1
;;;1166     for(int i=0; i<ep_count; i++)
00135c  e3a05000          MOV      r5,#0
001360  da00002b          BLE      |L1.5140|
                  |L1.4964|
;;;1167     {
;;;1168       tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
;;;1169   
;;;1170       TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
001364  e5d40001          LDRB     r0,[r4,#1]
001368  e3500005          CMP      r0,#5
00136c  1a000003          BNE      |L1.4992|
001370  e5d40003          LDRB     r0,[r4,#3]
001374  e2000003          AND      r0,r0,#3
001378  e1500007          CMP      r0,r7
00137c  0a000005          BEQ      |L1.5016|
                  |L1.4992|
001380  e59f2428          LDR      r2,|L1.6064|
001384  e59f1428          LDR      r1,|L1.6068|
001388  e51f00f0          LDR      r0,|L1.4768|
00138c  ebfffffe          BL       __2printf
001390  e3a00000          MOV      r0,#0
;;;1171       TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
;;;1172   
;;;1173       if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
;;;1174       {
;;;1175         (*ep_in) = desc_ep->bEndpointAddress;
;;;1176       }else
;;;1177       {
;;;1178         (*ep_out) = desc_ep->bEndpointAddress;
;;;1179       }
;;;1180   
;;;1181       p_desc = tu_desc_next(p_desc);
;;;1182     }
;;;1183   
;;;1184     return true;
;;;1185   }
001394  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5016|
001398  e5d40002          LDRB     r0,[r4,#2]
00139c  e5d98001          LDRB     r8,[r9,#1]  ; _usbd_rhport
0013a0  e1a0b004          MOV      r11,r4                ;1171
0013a4  e3c00080          BIC      r0,r0,#0x80           ;1171
0013a8  e3500004          CMP      r0,#4                 ;1171
0013ac  3a000004          BCC      |L1.5060|
0013b0  e59f23e8          LDR      r2,|L1.6048|
0013b4  e59f13e8          LDR      r1,|L1.6052|
0013b8  e51f0120          LDR      r0,|L1.4768|
0013bc  ebfffffe          BL       __2printf
0013c0  ea000019          B        |L1.5164|
                  |L1.5060|
0013c4  e5da1002          LDRB     r1,[r10,#2]           ;1171  ; _usbd_dev
0013c8  e1a00004          MOV      r0,r4                 ;1171
0013cc  ebfffffe          BL       tu_edpt_validate
0013d0  e3500000          CMP      r0,#0                 ;1171
0013d4  0a000010          BEQ      |L1.5148|
0013d8  e1a0100b          MOV      r1,r11                ;1171
0013dc  e1a00008          MOV      r0,r8                 ;1171
0013e0  ebfffffe          BL       dcd_edpt_open
0013e4  e3500000          CMP      r0,#0                 ;1171
0013e8  0a00000f          BEQ      |L1.5164|
0013ec  e5d40002          LDRB     r0,[r4,#2]            ;1173
0013f0  e2855001          ADD      r5,r5,#1              ;1173
0013f4  e3100080          TST      r0,#0x80              ;1173
0013f8  059d1028          LDREQ    r1,[sp,#0x28]         ;1178
0013fc  159d102c          LDRNE    r1,[sp,#0x2c]         ;1175
001400  e1550006          CMP      r5,r6                 ;1182
001404  e5c10000          STRB     r0,[r1,#0]            ;1178
001408  e5d40000          LDRB     r0,[r4,#0]            ;1178
00140c  e0844000          ADD      r4,r4,r0              ;1178
001410  baffffd3          BLT      |L1.4964|
                  |L1.5140|
001414  e3a00001          MOV      r0,#1                 ;1184
001418  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5148|
00141c  e59f2388          LDR      r2,|L1.6060|
001420  e59f137c          LDR      r1,|L1.6052|
001424  e51f018c          LDR      r0,|L1.4768|
001428  ebfffffe          BL       __2printf
                  |L1.5164|
00142c  e59f2384          LDR      r2,|L1.6072|
001430  e59f137c          LDR      r1,|L1.6068|
001434  e51f019c          LDR      r0,|L1.4768|
001438  ebfffffe          BL       __2printf
00143c  e3a00000          MOV      r0,#0                 ;1171
001440  e8bd9ff0          POP      {r4-r12,pc}
;;;1186   
                          ENDP

                  usbd_defer_func PROC
;;;1187   // Helper to defer an isr function
;;;1188   void usbd_defer_func(osal_task_func_t func, void* param, bool in_isr)
001444  e59f3370          LDR      r3,|L1.6076|
;;;1189   {
001448  e52de004          PUSH     {lr}
;;;1190     dcd_event_t event =
00144c  e59330a4          LDR      r3,[r3,#0xa4]  ; <Data9>
001450  e24dd00c          SUB      sp,sp,#0xc            ;1189
;;;1191     {
;;;1192         .rhport   = 0,
;;;1193         .event_id = USBD_EVENT_FUNC_CALL,
;;;1194     };
;;;1195   
;;;1196     event.func_call.func  = func;
;;;1197     event.func_call.param = param;
001454  e98d0003          STMIB    sp,{r0,r1}
;;;1198   
;;;1199     dcd_event_handler(&event, in_isr);
001458  e1a01002          MOV      r1,r2
00145c  e1a0000d          MOV      r0,sp
001460  e58d3000          STR      r3,[sp,#0]
001464  ebfffffe          BL       dcd_event_handler
;;;1200   }
001468  e28dd00c          ADD      sp,sp,#0xc
00146c  e49df004          POP      {pc}
;;;1201   
                          ENDP

                  usbd_edpt_claim PROC
;;;1215   
;;;1216   bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
001470  e59f2330          LDR      r2,|L1.6056|
;;;1217   {
;;;1218     (void) rhport;
;;;1219   
;;;1220     // TODO add this check later, also make sure we don't starve an out endpoint while suspending
;;;1221     // TU_VERIFY(tud_ready());
;;;1222   
;;;1223     uint8_t const epnum       = tu_edpt_number(ep_addr);
001474  e3c10080          BIC      r0,r1,#0x80
;;;1224     uint8_t const dir         = tu_edpt_dir(ep_addr);
;;;1225     tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
001478  e0820080          ADD      r0,r2,r0,LSL #1
00147c  e08003a1          ADD      r0,r0,r1,LSR #7
;;;1226   
;;;1227     return tu_edpt_claim(ep_state, _usbd_mutex);
001480  e59f1314          LDR      r1,|L1.6044|
001484  e280001b          ADD      r0,r0,#0x1b
001488  e591100c          LDR      r1,[r1,#0xc]  ; _usbd_mutex
00148c  eafffffe          B        tu_edpt_claim
;;;1228   }
;;;1229   
                          ENDP

                  usbd_edpt_release PROC
;;;1230   bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
001490  e59f2310          LDR      r2,|L1.6056|
;;;1231   {
;;;1232     (void) rhport;
;;;1233   
;;;1234     uint8_t const epnum       = tu_edpt_number(ep_addr);
001494  e3c10080          BIC      r0,r1,#0x80
;;;1235     uint8_t const dir         = tu_edpt_dir(ep_addr);
;;;1236     tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
001498  e0820080          ADD      r0,r2,r0,LSL #1
00149c  e08003a1          ADD      r0,r0,r1,LSR #7
;;;1237   
;;;1238     return tu_edpt_release(ep_state, _usbd_mutex);
0014a0  e59f12f4          LDR      r1,|L1.6044|
0014a4  e280001b          ADD      r0,r0,#0x1b
0014a8  e591100c          LDR      r1,[r1,#0xc]  ; _usbd_mutex
0014ac  eafffffe          B        tu_edpt_release
;;;1239   }
;;;1240   
                          ENDP

                  usbd_edpt_xfer PROC
;;;1241   bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
0014b0  e92d4010          PUSH     {r4,lr}
;;;1242   {
;;;1243     rhport = _usbd_rhport;
;;;1244   
;;;1245     uint8_t const epnum = tu_edpt_number(ep_addr);
;;;1246     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1247   
;;;1248     // TODO skip ready() check for now since enumeration also use this API
;;;1249     // TU_VERIFY(tud_ready());
;;;1250   
;;;1251     TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
;;;1252   
;;;1253     // Attempt to transfer on a busy endpoint, sound like an race condition !
;;;1254     TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
0014b4  e59f42ec          LDR      r4,|L1.6056|
0014b8  e3c10080          BIC      r0,r1,#0x80           ;1245
0014bc  e0844080          ADD      r4,r4,r0,LSL #1
0014c0  e59f02d4          LDR      r0,|L1.6044|
0014c4  e08443a1          ADD      r4,r4,r1,LSR #7
0014c8  e5d00001          LDRB     r0,[r0,#1]            ;1243  ; _usbd_rhport
0014cc  e5d4c01b          LDRB     r12,[r4,#0x1b]
0014d0  e31c0001          TST      r12,#1
0014d4  0a000004          BEQ      |L1.5356|
0014d8  e59f22e0          LDR      r2,|L1.6080|
0014dc  e59f12e0          LDR      r1,|L1.6084|
0014e0  e51f0248          LDR      r0,|L1.4768|
0014e4  ebfffffe          BL       __2printf
0014e8  ea00000c          B        |L1.5408|
                  |L1.5356|
;;;1255   
;;;1256     // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
;;;1257     // could return and USBD task can preempt and clear the busy
;;;1258     _usbd_dev.ep_status[epnum][dir].busy = 1;
0014ec  e5d4c01b          LDRB     r12,[r4,#0x1b]
0014f0  e38cc001          ORR      r12,r12,#1
0014f4  e5c4c01b          STRB     r12,[r4,#0x1b]
;;;1259   
;;;1260     if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
0014f8  ebfffffe          BL       dcd_edpt_xfer
0014fc  e3500000          CMP      r0,#0
;;;1261     {
;;;1262       return true;
001500  13a00001          MOVNE    r0,#1
;;;1263     }else
;;;1264     {
;;;1265       // DCD error, mark endpoint as ready to allow next transfer
;;;1266       _usbd_dev.ep_status[epnum][dir].busy = 0;
;;;1267       _usbd_dev.ep_status[epnum][dir].claimed = 0;
;;;1268       TU_LOG(USBD_DBG, "FAILED\r\n");
;;;1269       TU_BREAKPOINT();
;;;1270       return false;
;;;1271     }
;;;1272   }
001504  18bd8010          POPNE    {r4,pc}
001508  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1266
00150c  e3c00001          BIC      r0,r0,#1              ;1266
001510  e5c4001b          STRB     r0,[r4,#0x1b]         ;1266
001514  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1267
001518  e3c00004          BIC      r0,r0,#4              ;1267
00151c  e5c4001b          STRB     r0,[r4,#0x1b]         ;1267
                  |L1.5408|
001520  e3a00000          MOV      r0,#0                 ;1270
001524  e8bd8010          POP      {r4,pc}
;;;1273   
                          ENDP

                  usbd_edpt_xfer_fifo PROC
;;;1277   // into the USB buffer!
;;;1278   bool usbd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
001528  e92d4010          PUSH     {r4,lr}
;;;1279   {
;;;1280     rhport = _usbd_rhport;
;;;1281   
;;;1282     uint8_t const epnum = tu_edpt_number(ep_addr);
;;;1283     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1284   
;;;1285     TU_LOG(USBD_DBG, "  Queue ISO EP %02X with %u bytes ... ", ep_addr, total_bytes);
;;;1286   
;;;1287     // Attempt to transfer on a busy endpoint, sound like an race condition !
;;;1288     TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
00152c  e59f4274          LDR      r4,|L1.6056|
001530  e3c10080          BIC      r0,r1,#0x80           ;1282
001534  e0844080          ADD      r4,r4,r0,LSL #1
001538  e59f025c          LDR      r0,|L1.6044|
00153c  e08443a1          ADD      r4,r4,r1,LSR #7
001540  e5d00001          LDRB     r0,[r0,#1]            ;1280  ; _usbd_rhport
001544  e5d4c01b          LDRB     r12,[r4,#0x1b]
001548  e31c0001          TST      r12,#1
00154c  0a000004          BEQ      |L1.5476|
001550  e59f2270          LDR      r2,|L1.6088|
001554  e59f1270          LDR      r1,|L1.6092|
001558  e51f02c0          LDR      r0,|L1.4768|
00155c  ebfffffe          BL       __2printf
001560  ea00000c          B        |L1.5528|
                  |L1.5476|
;;;1289   
;;;1290     // Set busy first since the actual transfer can be complete before dcd_edpt_xfer() could return
;;;1291     // and usbd task can preempt and clear the busy
;;;1292     _usbd_dev.ep_status[epnum][dir].busy = 1;
001564  e5d4c01b          LDRB     r12,[r4,#0x1b]
001568  e38cc001          ORR      r12,r12,#1
00156c  e5c4c01b          STRB     r12,[r4,#0x1b]
;;;1293   
;;;1294     if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
001570  ebfffffe          BL       dcd_edpt_xfer_fifo
001574  e3500000          CMP      r0,#0
;;;1295     {
;;;1296       TU_LOG(USBD_DBG, "OK\r\n");
;;;1297       return true;
001578  13a00001          MOVNE    r0,#1
;;;1298     }else
;;;1299     {
;;;1300       // DCD error, mark endpoint as ready to allow next transfer
;;;1301       _usbd_dev.ep_status[epnum][dir].busy = 0;
;;;1302       _usbd_dev.ep_status[epnum][dir].claimed = 0;
;;;1303       TU_LOG(USBD_DBG, "failed\r\n");
;;;1304       TU_BREAKPOINT();
;;;1305       return false;
;;;1306     }
;;;1307   }
00157c  18bd8010          POPNE    {r4,pc}
001580  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1301
001584  e3c00001          BIC      r0,r0,#1              ;1301
001588  e5c4001b          STRB     r0,[r4,#0x1b]         ;1301
00158c  e5d4001b          LDRB     r0,[r4,#0x1b]         ;1302
001590  e3c00004          BIC      r0,r0,#4              ;1302
001594  e5c4001b          STRB     r0,[r4,#0x1b]         ;1302
                  |L1.5528|
001598  e3a00000          MOV      r0,#0                 ;1305
00159c  e8bd8010          POP      {r4,pc}
;;;1308   
                          ENDP

                  usbd_edpt_busy PROC
;;;1309   bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
0015a0  e59f2200          LDR      r2,|L1.6056|
;;;1310   {
;;;1311     (void) rhport;
;;;1312   
;;;1313     uint8_t const epnum = tu_edpt_number(ep_addr);
0015a4  e3c10080          BIC      r0,r1,#0x80
;;;1314     uint8_t const dir   = tu_edpt_dir(ep_addr);
;;;1315   
;;;1316     return _usbd_dev.ep_status[epnum][dir].busy;
0015a8  e0820080          ADD      r0,r2,r0,LSL #1
0015ac  e08003a1          ADD      r0,r0,r1,LSR #7
0015b0  e5d0001b          LDRB     r0,[r0,#0x1b]
0015b4  e2000001          AND      r0,r0,#1
;;;1317   }
0015b8  e12fff1e          BX       lr
;;;1318   
                          ENDP

                  usbd_edpt_close PROC
;;;1368    */
;;;1369   void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
0015bc  e59f020c          LDR      r0,|L1.6096|
;;;1370   {
0015c0  e92d4070          PUSH     {r4-r6,lr}
;;;1371     rhport = _usbd_rhport;
;;;1372   
;;;1373     TU_ASSERT(dcd_edpt_close, /**/);
0015c4  e3500000          CMP      r0,#0
0015c8  e59f01cc          LDR      r0,|L1.6044|
0015cc  e5d00001          LDRB     r0,[r0,#1]            ;1371  ; _usbd_rhport
0015d0  0a00000f          BEQ      |L1.5652|
;;;1374     TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);
;;;1375   
;;;1376     uint8_t const epnum = tu_edpt_number(ep_addr);
0015d4  e3c15080          BIC      r5,r1,#0x80
;;;1377     uint8_t const dir   = tu_edpt_dir(ep_addr);
0015d8  e1a043a1          LSR      r4,r1,#7
;;;1378   
;;;1379     dcd_edpt_close(rhport, ep_addr);
0015dc  ebfffffe          BL       dcd_edpt_close
;;;1380     _usbd_dev.ep_status[epnum][dir].stalled = 0;
0015e0  e59f01c0          LDR      r0,|L1.6056|
0015e4  e0800085          ADD      r0,r0,r5,LSL #1
0015e8  e0800004          ADD      r0,r0,r4
0015ec  e5d0101b          LDRB     r1,[r0,#0x1b]
0015f0  e3c11002          BIC      r1,r1,#2
0015f4  e5c0101b          STRB     r1,[r0,#0x1b]
;;;1381     _usbd_dev.ep_status[epnum][dir].busy = 0;
0015f8  e5d0101b          LDRB     r1,[r0,#0x1b]
0015fc  e3c11001          BIC      r1,r1,#1
001600  e5c0101b          STRB     r1,[r0,#0x1b]
;;;1382     _usbd_dev.ep_status[epnum][dir].claimed = 0;
001604  e5d0101b          LDRB     r1,[r0,#0x1b]
001608  e3c11004          BIC      r1,r1,#4
00160c  e5c0101b          STRB     r1,[r0,#0x1b]
;;;1383   
;;;1384     return;
;;;1385   }
001610  e8bd8070          POP      {r4-r6,pc}
                  |L1.5652|
001614  e8bd4070          POP      {r4-r6,lr}            ;1373
001618  e59f21b4          LDR      r2,|L1.6100|
00161c  e59f11b4          LDR      r1,|L1.6104|
001620  e51f0388          LDR      r0,|L1.4768|
001624  eafffffe          B        __2printf
;;;1386   
                          ENDP

                  usbd_sof_enable PROC
;;;1387   void usbd_sof_enable(uint8_t rhport, bool en)
001628  e59f016c          LDR      r0,|L1.6044|
;;;1388   {
;;;1389     rhport = _usbd_rhport;
00162c  e5d00001          LDRB     r0,[r0,#1]  ; _usbd_rhport
;;;1390   
;;;1391     // TODO: Check needed if all drivers including the user sof_cb does not need an active SOF ISR any more.
;;;1392     // Only if all drivers switched off SOF calls the SOF interrupt may be disabled
;;;1393     dcd_sof_enable(rhport, en);
001630  eafffffe          B        dcd_sof_enable
;;;1394   }
;;;1395   
                          ENDP

                  usbd_edpt_iso_alloc PROC
;;;1396   bool usbd_edpt_iso_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t largest_packet_size)
001634  e59f0160          LDR      r0,|L1.6044|
;;;1397   {
001638  e92d4010          PUSH     {r4,lr}
;;;1398     rhport = _usbd_rhport;
00163c  e5d00001          LDRB     r0,[r0,#1]  ; _usbd_rhport
;;;1399   
;;;1400     TU_ASSERT(dcd_edpt_iso_alloc);
001640  e59f3194          LDR      r3,|L1.6108|
001644  e3530000          CMP      r3,#0
001648  0a000008          BEQ      |L1.5744|
;;;1401     TU_ASSERT(tu_edpt_number(ep_addr) < CFG_TUD_ENDPPOINT_MAX);
00164c  e3c13080          BIC      r3,r1,#0x80
001650  e3530004          CMP      r3,#4
001654  3a00000b          BCC      |L1.5768|
001658  e59f2180          LDR      r2,|L1.6112|
00165c  e59f1180          LDR      r1,|L1.6116|
001660  e51f03c8          LDR      r0,|L1.4768|
001664  ebfffffe          BL       __2printf
001668  e3a00000          MOV      r0,#0
;;;1402   
;;;1403     return dcd_edpt_iso_alloc(rhport, ep_addr, largest_packet_size);
;;;1404   }
00166c  e8bd8010          POP      {r4,pc}
                  |L1.5744|
001670  e59f2170          LDR      r2,|L1.6120|
001674  e59f1168          LDR      r1,|L1.6116|
001678  e51f03e0          LDR      r0,|L1.4768|
00167c  ebfffffe          BL       __2printf
001680  e3a00000          MOV      r0,#0                 ;1400
001684  e8bd8010          POP      {r4,pc}
                  |L1.5768|
001688  ebfffffe          BL       dcd_edpt_iso_alloc
00168c  e8bd8010          POP      {r4,pc}
;;;1405   
                          ENDP

                  usbd_edpt_iso_activate PROC
;;;1406   bool usbd_edpt_iso_activate(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
001690  e92d41f0          PUSH     {r4-r8,lr}
;;;1407   {
;;;1408     rhport = _usbd_rhport;
;;;1409   
;;;1410     uint8_t const epnum = tu_edpt_number(desc_ep->bEndpointAddress);
001694  e5d10002          LDRB     r0,[r1,#2]
001698  e1a04001          MOV      r4,r1                 ;1407
00169c  e59f10f8          LDR      r1,|L1.6044|
0016a0  e3c05080          BIC      r5,r0,#0x80
0016a4  e5d17001          LDRB     r7,[r1,#1]            ;1408  ; _usbd_rhport
;;;1411     uint8_t const dir   = tu_edpt_dir(desc_ep->bEndpointAddress);
;;;1412   
;;;1413     TU_ASSERT(dcd_edpt_iso_activate);
0016a8  e59f113c          LDR      r1,|L1.6124|
0016ac  e1a083a0          LSR      r8,r0,#7              ;1411
0016b0  e3510000          CMP      r1,#0
0016b4  0a000007          BEQ      |L1.5848|
;;;1414     TU_ASSERT(epnum < CFG_TUD_ENDPPOINT_MAX);
0016b8  e3550004          CMP      r5,#4
0016bc  3a00000b          BCC      |L1.5872|
0016c0  e59f2128          LDR      r2,|L1.6128|
0016c4  e59f1128          LDR      r1,|L1.6132|
0016c8  e51f0430          LDR      r0,|L1.4768|
0016cc  ebfffffe          BL       __2printf
0016d0  e3a00000          MOV      r0,#0
;;;1415     TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
;;;1416   
;;;1417     _usbd_dev.ep_status[epnum][dir].stalled = 0;
;;;1418     _usbd_dev.ep_status[epnum][dir].busy = 0;
;;;1419     _usbd_dev.ep_status[epnum][dir].claimed = 0;
;;;1420     return dcd_edpt_iso_activate(rhport, desc_ep);
;;;1421   }
0016d4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5848|
0016d8  e59f2118          LDR      r2,|L1.6136|
0016dc  e59f1110          LDR      r1,|L1.6132|
0016e0  e51f0448          LDR      r0,|L1.4768|
0016e4  ebfffffe          BL       __2printf
0016e8  e3a00000          MOV      r0,#0                 ;1413
0016ec  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5872|
0016f0  e59f60b0          LDR      r6,|L1.6056|
0016f4  e1a00004          MOV      r0,r4                 ;1415
0016f8  e5d61002          LDRB     r1,[r6,#2]            ;1415  ; _usbd_dev
0016fc  ebfffffe          BL       tu_edpt_validate
001700  e3500000          CMP      r0,#0                 ;1415
001704  0a00000e          BEQ      |L1.5956|
001708  e0860085          ADD      r0,r6,r5,LSL #1       ;1417
00170c  e0802008          ADD      r2,r0,r8              ;1417
001710  e5d2001b          LDRB     r0,[r2,#0x1b]         ;1417
001714  e3c00002          BIC      r0,r0,#2              ;1417
001718  e5c2001b          STRB     r0,[r2,#0x1b]         ;1417
00171c  e5d2001b          LDRB     r0,[r2,#0x1b]         ;1418
001720  e3c00001          BIC      r0,r0,#1              ;1418
001724  e5c2001b          STRB     r0,[r2,#0x1b]         ;1418
001728  e5d2001b          LDRB     r0,[r2,#0x1b]         ;1419
00172c  e3c00004          BIC      r0,r0,#4              ;1419
001730  e5c2001b          STRB     r0,[r2,#0x1b]         ;1419
001734  e1a01004          MOV      r1,r4                 ;1420
001738  e1a00007          MOV      r0,r7                 ;1420
00173c  ebfffffe          BL       dcd_edpt_iso_activate
001740  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5956|
001744  e59f20b0          LDR      r2,|L1.6140|
001748  e59f10a4          LDR      r1,|L1.6132|
00174c  e51f04b4          LDR      r0,|L1.4768|
001750  ebfffffe          BL       __2printf
001754  e3a00000          MOV      r0,#0                 ;1415
001758  e8bd81f0          POP      {r4-r8,pc}
;;;1422   
                          ENDP

                  get_driver PROC
;;;245    // Application is positioned first to allow overwriting built-in ones.
;;;246    static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
00175c  e59f109c          LDR      r1,|L1.6144|
;;;247    {
;;;248      // Application drivers
;;;249      if ( usbd_app_driver_get_cb )
001760  e3510000          CMP      r1,#0
001764  0a000008          BEQ      |L1.6028|
;;;250      {
;;;251        if ( drvid < _app_driver_count ) return &_app_driver[drvid];
001768  e59f202c          LDR      r2,|L1.6044|
00176c  e5d21000          LDRB     r1,[r2,#0]  ; _app_driver_count
001770  e1500001          CMP      r0,r1
;;;252        drvid -= _app_driver_count;
001774  20400001          SUBCS    r0,r0,r1
001778  35921004          LDRCC    r1,[r2,#4]            ;251  ; _app_driver
00177c  220000ff          ANDCS    r0,r0,#0xff
001780  30800080          ADDCC    r0,r0,r0,LSL #1       ;251
001784  30810180          ADDCC    r0,r1,r0,LSL #3       ;251
;;;253      }
;;;254    
;;;255      // when there is no built-in drivers BUILTIN_DRIVER_COUNT = 0 will cause -Wtype-limits warning
;;;256    #ifdef __GNUC__
;;;257    #pragma GCC diagnostic push
;;;258    #pragma GCC diagnostic ignored "-Wtype-limits"
;;;259    #endif
;;;260    
;;;261      // Built-in drivers
;;;262      if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
;;;263    
;;;264    #ifdef __GNUC__
;;;265    #pragma GCC diagnostic pop
;;;266    #endif
;;;267    
;;;268      return NULL;
;;;269    }
001788  312fff1e          BXCC     lr
                  |L1.6028|
00178c  e3500000          CMP      r0,#0                 ;262
001790  13a00000          MOVNE    r0,#0                 ;268
001794  059f0020          LDREQ    r0,|L1.6076|
001798  e12fff1e          BX       lr
;;;270    
                          ENDP

                  |L1.6044|
                          DCD      ||.data||
                  |L1.6048|
                          DCD      0x000004ba
                  |L1.6052|
                          DCD      ||.constdata||+0xb0
                  |L1.6056|
                          DCD      ||.bss||
                  |L1.6060|
                          DCD      0x000004bb
                  |L1.6064|
                          DCD      0x00000492
                  |L1.6068|
                          DCD      ||.constdata||+0x90
                  |L1.6072|
                          DCD      0x00000493
                  |L1.6076|
                          DCD      ||.constdata||
                  |L1.6080|
                          DCD      0x000004e6
                  |L1.6084|
                          DCD      ||.constdata||+0xbf
                  |L1.6088|
                          DCD      0x00000508
                  |L1.6092|
                          DCD      ||.constdata||+0xce
                  |L1.6096|
                          DCD      dcd_edpt_close
                  |L1.6100|
                          DCD      0x0000055d
                  |L1.6104|
                          DCD      ||.constdata||+0xe2
                  |L1.6108|
                          DCD      dcd_edpt_iso_alloc
                  |L1.6112|
                          DCD      0x00000579
                  |L1.6116|
                          DCD      ||.constdata||+0xf2
                  |L1.6120|
                          DCD      0x00000578
                  |L1.6124|
                          DCD      dcd_edpt_iso_activate
                  |L1.6128|
                          DCD      0x00000586
                  |L1.6132|
                          DCD      ||.constdata||+0x106
                  |L1.6136|
                          DCD      0x00000585
                  |L1.6140|
                          DCD      0x00000587
                  |L1.6144|
                          DCD      usbd_app_driver_get_cb

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _usbd_dev
                          %        36
                  _ubsd_mutexdef
                          %        16

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.bss||
                  _usbd_qdef__mbox
                          %        80

                          AREA ||area_number.5||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.bss||
                  _usbd_qdef__pool
                          %        204

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _usbd_driver
                          DCD      cdcd_init
                          DCD      cdcd_reset
                          DCD      cdcd_open
                          DCD      cdcd_control_xfer_cb
                          DCD      cdcd_xfer_cb
                          DCD      0x00000000
                  __func__
000018  7475645f          DCB      0x74,0x75,0x64,0x5f
00001c  696e6974          DCB      0x69,0x6e,0x69,0x74
000020  00                DCB      0x00
                  |symbol_number.29|
000021  636f6e            DCB      0x63,0x6f,0x6e
000024  66696775          DCB      0x66,0x69,0x67,0x75
000028  72617469          DCB      0x72,0x61,0x74,0x69
00002c  6f6e5f72          DCB      0x6f,0x6e,0x5f,0x72
000030  65736574          DCB      0x65,0x73,0x65,0x74
000034  00                DCB      0x00
                  |symbol_number.30|
000035  747564            DCB      0x74,0x75,0x64
000038  5f746173          DCB      0x5f,0x74,0x61,0x73
00003c  6b5f6578          DCB      0x6b,0x5f,0x65,0x78
000040  7400              DCB      0x74,0x00
                  |symbol_number.31|
000042  7072              DCB      0x70,0x72
000044  6f636573          DCB      0x6f,0x63,0x65,0x73
000048  735f636f          DCB      0x73,0x5f,0x63,0x6f
00004c  6e74726f          DCB      0x6e,0x74,0x72,0x6f
000050  6c5f7265          DCB      0x6c,0x5f,0x72,0x65
000054  71756573          DCB      0x71,0x75,0x65,0x73
000058  7400              DCB      0x74,0x00
                  |symbol_number.32|
00005a  7072              DCB      0x70,0x72
00005c  6f636573          DCB      0x6f,0x63,0x65,0x73
000060  735f7365          DCB      0x73,0x5f,0x73,0x65
000064  745f636f          DCB      0x74,0x5f,0x63,0x6f
000068  6e666967          DCB      0x6e,0x66,0x69,0x67
00006c  00                DCB      0x00
                  |symbol_number.33|
00006d  70726f            DCB      0x70,0x72,0x6f
000070  63657373          DCB      0x63,0x65,0x73,0x73
000074  5f676574          DCB      0x5f,0x67,0x65,0x74
000078  5f646573          DCB      0x5f,0x64,0x65,0x73
00007c  63726970          DCB      0x63,0x72,0x69,0x70
000080  746f7200          DCB      0x74,0x6f,0x72,0x00
000084  00050000          DCB      0x00,0x05,0x00,0x00
                          %        8
                  |symbol_number.34|
000090  75736264          DCB      0x75,0x73,0x62,0x64
000094  5f6f7065          DCB      0x5f,0x6f,0x70,0x65
000098  6e5f6564          DCB      0x6e,0x5f,0x65,0x64
00009c  70745f70          DCB      0x70,0x74,0x5f,0x70
0000a0  61697200          DCB      0x61,0x69,0x72,0x00
0000a4  00080000          DCB      0x00,0x08,0x00,0x00
                          %        8
                  |symbol_number.35|
0000b0  75736264          DCB      0x75,0x73,0x62,0x64
0000b4  5f656470          DCB      0x5f,0x65,0x64,0x70
0000b8  745f6f70          DCB      0x74,0x5f,0x6f,0x70
0000bc  656e00            DCB      0x65,0x6e,0x00
                  |symbol_number.36|
0000bf  75                DCB      0x75
0000c0  7362645f          DCB      0x73,0x62,0x64,0x5f
0000c4  65647074          DCB      0x65,0x64,0x70,0x74
0000c8  5f786665          DCB      0x5f,0x78,0x66,0x65
0000cc  7200              DCB      0x72,0x00
                  |symbol_number.37|
0000ce  7573              DCB      0x75,0x73
0000d0  62645f65          DCB      0x62,0x64,0x5f,0x65
0000d4  6470745f          DCB      0x64,0x70,0x74,0x5f
0000d8  78666572          DCB      0x78,0x66,0x65,0x72
0000dc  5f666966          DCB      0x5f,0x66,0x69,0x66
0000e0  6f00              DCB      0x6f,0x00
                  |symbol_number.38|
0000e2  7573              DCB      0x75,0x73
0000e4  62645f65          DCB      0x62,0x64,0x5f,0x65
0000e8  6470745f          DCB      0x64,0x70,0x74,0x5f
0000ec  636c6f73          DCB      0x63,0x6c,0x6f,0x73
0000f0  6500              DCB      0x65,0x00
                  |symbol_number.39|
0000f2  7573              DCB      0x75,0x73
0000f4  62645f65          DCB      0x62,0x64,0x5f,0x65
0000f8  6470745f          DCB      0x64,0x70,0x74,0x5f
0000fc  69736f5f          DCB      0x69,0x73,0x6f,0x5f
000100  616c6c6f          DCB      0x61,0x6c,0x6c,0x6f
000104  6300              DCB      0x63,0x00
                  |symbol_number.40|
000106  7573              DCB      0x75,0x73
000108  62645f65          DCB      0x62,0x64,0x5f,0x65
00010c  6470745f          DCB      0x64,0x70,0x74,0x5f
000110  69736f5f          DCB      0x69,0x73,0x6f,0x5f
000114  61637469          DCB      0x61,0x63,0x74,0x69
000118  76617465          DCB      0x76,0x61,0x74,0x65
00011c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  _app_driver_count
000000  00                DCB      0x00
                  _usbd_rhport
000001  ff0000            DCB      0xff,0x00,0x00
                  _app_driver
                          DCD      0x00000000
                  _usbd_q
                          DCD      0x00000000
                  _usbd_mutex
                          DCD      0x00000000
                  _usbd_qdef
000010  0010000c          DCW      0x0010,0x000c
                          DCD      _usbd_qdef__pool
                          DCD      _usbd_qdef__mbox

                          AREA ||i.__ARM_common_memcpy1_8||, COMGROUP=__ARM_common_memcpy1_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memcpy1_8 PROC
000000  e5d12000          LDRB     r2,[r1,#0]
000004  e5c02000          STRB     r2,[r0,#0]
000008  e5d13001          LDRB     r3,[r1,#1]
00000c  e5c03001          STRB     r3,[r0,#1]
000010  e5d1c002          LDRB     r12,[r1,#2]
000014  e5c0c002          STRB     r12,[r0,#2]
000018  e5d12003          LDRB     r2,[r1,#3]
00001c  e5c02003          STRB     r2,[r0,#3]
000020  e5d13004          LDRB     r3,[r1,#4]
000024  e5c03004          STRB     r3,[r0,#4]
000028  e5d1c005          LDRB     r12,[r1,#5]
00002c  e5c0c005          STRB     r12,[r0,#5]
000030  e5d12006          LDRB     r2,[r1,#6]
000034  e5c02006          STRB     r2,[r0,#6]
000038  e5d13007          LDRB     r3,[r1,#7]
00003c  e5c03007          STRB     r3,[r0,#7]
000040  e12fff1e          BX       lr
                          ENDP


                          AREA ||i.__ARM_common_memset1_8||, COMGROUP=__ARM_common_memset1_8, CODE, READONLY, ALIGN=2

                  __ARM_common_memset1_8 PROC
000000  e20110ff          AND      r1,r1,#0xff
000004  e3100001          TST      r0,#1
000008  e1811401          ORR      r1,r1,r1,LSL #8
00000c  01c010b6          STRHEQ   r1,[r0,#6]
000010  15c01007          STRBNE   r1,[r0,#7]
000014  14c01001          STRBNE   r1,[r0],#1
000018  e1c010b0          STRH     r1,[r0,#0]
00001c  e1c010b2          STRH     r1,[r0,#2]
000020  e1c010b4          STRH     r1,[r0,#4]
000024  e12fff1e          BX       lr
                          ENDP

