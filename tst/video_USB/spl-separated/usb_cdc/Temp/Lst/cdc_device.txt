; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave --gnu -o.\temp\obj\cdc_device.o --asm_dir=.\Temp\Lst\ --list_dir=.\Temp\Lst\ --depend=.\temp\obj\cdc_device.d --cpu=ARM9E --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\users\include -I.\..\machine\include -I.\..\periph\include -I.\..\include -I.\..\emwin\Include -I.\..\tinyusb\src -I.\..\tinyusb\hw -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Atmel\SAM9260 -D__RTX -D__UVISION_VERSION=536 -DPCB_TINY200V2 -DCFG_TUSB_MCU=OPT_MCU_F1C100S -DCFG_TUSB_OS=OPT_OS_RTX4 --omf_browse=.\temp\obj\cdc_device.crf ..\tinyusb\src\class\cdc\cdc_device.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  tud_cdc_n_connected PROC
;;;112    //--------------------------------------------------------------------+
;;;113    bool tud_cdc_n_connected(uint8_t itf)
000000  e92d4010          PUSH     {r4,lr}
;;;114    {
000004  e1a04000          MOV      r4,r0
000008  ebfffffe          BL       tud_mounted
00000c  e3500000          CMP      r0,#0
000010  0a00000a          BEQ      |L1.64|
000014  ebfffffe          BL       tud_suspended
000018  e3500000          CMP      r0,#0
00001c  1a000007          BNE      |L1.64|
;;;115      // DTR (bit 0) active  is considered as connected
;;;116      return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
000020  e59f0258          LDR      r0,|L1.640|
000024  e59f1258          LDR      r1,|L1.644|
000028  e1600084          SMULBB   r0,r4,r0
00002c  e0810180          ADD      r0,r1,r0,LSL #3
000030  e5d00004          LDRB     r0,[r0,#4]
000034  e3100001          TST      r0,#1
000038  13a00001          MOVNE    r0,#1
;;;117    }
00003c  18bd8010          POPNE    {r4,pc}
                  |L1.64|
000040  e3a00000          MOV      r0,#0                 ;116
000044  e8bd8010          POP      {r4,pc}
;;;118    
                          ENDP

                  tud_cdc_n_get_line_state PROC
;;;119    uint8_t tud_cdc_n_get_line_state (uint8_t itf)
000048  e59f1230          LDR      r1,|L1.640|
;;;120    {
;;;121      return _cdcd_itf[itf].line_state;
00004c  e1600180          SMULBB   r0,r0,r1
000050  e59f122c          LDR      r1,|L1.644|
000054  e0810180          ADD      r0,r1,r0,LSL #3
000058  e5d00004          LDRB     r0,[r0,#4]
;;;122    }
00005c  e12fff1e          BX       lr
;;;123    
                          ENDP

                  tud_cdc_n_get_line_coding PROC
;;;124    void tud_cdc_n_get_line_coding (uint8_t itf, cdc_line_coding_t* coding)
000060  e1a03001          MOV      r3,r1
;;;125    {
;;;126      (*coding) = _cdcd_itf[itf].line_coding;
000064  e59f1214          LDR      r1,|L1.640|
000068  e3a02007          MOV      r2,#7
00006c  e1600180          SMULBB   r0,r0,r1
000070  e59f120c          LDR      r1,|L1.644|
000074  e0810180          ADD      r0,r1,r0,LSL #3
000078  e2801008          ADD      r1,r0,#8
00007c  e1a00003          MOV      r0,r3
000080  eafffffe          B        __aeabi_memcpy
;;;127    }
;;;128    
                          ENDP

                  tud_cdc_n_set_wanted_char PROC
;;;129    void tud_cdc_n_set_wanted_char (uint8_t itf, char wanted)
000084  e59f21f4          LDR      r2,|L1.640|
;;;130    {
;;;131      _cdcd_itf[itf].wanted_char = wanted;
000088  e1600280          SMULBB   r0,r0,r2
00008c  e59f21f0          LDR      r2,|L1.644|
000090  e0820180          ADD      r0,r2,r0,LSL #3
000094  e5c01005          STRB     r1,[r0,#5]
;;;132    }
000098  e12fff1e          BX       lr
;;;133    
                          ENDP

                  tud_cdc_n_available PROC
;;;137    //--------------------------------------------------------------------+
;;;138    uint32_t tud_cdc_n_available(uint8_t itf)
00009c  e59f11dc          LDR      r1,|L1.640|
;;;139    {
;;;140      return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
0000a0  e1600180          SMULBB   r0,r0,r1
0000a4  e59f11d8          LDR      r1,|L1.644|
0000a8  e0810180          ADD      r0,r1,r0,LSL #3
0000ac  e2800010          ADD      r0,r0,#0x10
0000b0  eafffffe          B        tu_fifo_count
;;;141    }
;;;142    
                          ENDP

                  tud_cdc_n_read PROC
;;;143    uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
0000b4  e59f31c4          LDR      r3,|L1.640|
;;;144    {
0000b8  e92d4070          PUSH     {r4-r6,lr}
;;;145      cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
0000bc  e1600380          SMULBB   r0,r0,r3
0000c0  e59f31bc          LDR      r3,|L1.644|
;;;146      uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
0000c4  e1a02802          LSL      r2,r2,#16
0000c8  e0834180          ADD      r4,r3,r0,LSL #3       ;145
0000cc  e1a02822          LSR      r2,r2,#16
0000d0  e2840010          ADD      r0,r4,#0x10
0000d4  ebfffffe          BL       tu_fifo_read_n
0000d8  e1a05000          MOV      r5,r0
0000dc  e2840010          ADD      r0,r4,#0x10
0000e0  ebfffffe          BL       tu_fifo_remaining
0000e4  e3500c02          CMP      r0,#0x200
0000e8  3a000011          BCC      |L1.308|
0000ec  e5d41003          LDRB     r1,[r4,#3]
0000f0  e3a00000          MOV      r0,#0
0000f4  ebfffffe          BL       usbd_edpt_claim
0000f8  e3500000          CMP      r0,#0
0000fc  0a00000c          BEQ      |L1.308|
000100  e2840010          ADD      r0,r4,#0x10
000104  ebfffffe          BL       tu_fifo_remaining
000108  e5d41003          LDRB     r1,[r4,#3]
00010c  e3500c02          CMP      r0,#0x200
000110  3a000005          BCC      |L1.300|
000114  e2842b02          ADD      r2,r4,#0x800
000118  e3a03c02          MOV      r3,#0x200
00011c  e2822058          ADD      r2,r2,#0x58
000120  e3a00000          MOV      r0,#0
000124  ebfffffe          BL       usbd_edpt_xfer
000128  ea000001          B        |L1.308|
                  |L1.300|
00012c  e3a00000          MOV      r0,#0
000130  ebfffffe          BL       usbd_edpt_release
                  |L1.308|
;;;147      _prep_out_transaction(p_cdc);
;;;148      return num_read;
000134  e1a00005          MOV      r0,r5
;;;149    }
000138  e8bd8070          POP      {r4-r6,pc}
;;;150    
                          ENDP

                  tud_cdc_n_peek PROC
;;;151    bool tud_cdc_n_peek(uint8_t itf, uint8_t* chr)
00013c  e59f213c          LDR      r2,|L1.640|
;;;152    {
;;;153      return tu_fifo_peek(&_cdcd_itf[itf].rx_ff, chr);
000140  e1600280          SMULBB   r0,r0,r2
000144  e59f2138          LDR      r2,|L1.644|
000148  e0820180          ADD      r0,r2,r0,LSL #3
00014c  e2800010          ADD      r0,r0,#0x10
000150  eafffffe          B        tu_fifo_peek
;;;154    }
;;;155    
                          ENDP

                  tud_cdc_n_read_flush PROC
;;;156    void tud_cdc_n_read_flush (uint8_t itf)
000154  e59f1124          LDR      r1,|L1.640|
;;;157    {
000158  e92d4010          PUSH     {r4,lr}
;;;158      cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
00015c  e1600180          SMULBB   r0,r0,r1
000160  e59f111c          LDR      r1,|L1.644|
000164  e0814180          ADD      r4,r1,r0,LSL #3
;;;159      tu_fifo_clear(&p_cdc->rx_ff);
000168  e2840010          ADD      r0,r4,#0x10
00016c  ebfffffe          BL       tu_fifo_clear
000170  e2840010          ADD      r0,r4,#0x10
000174  ebfffffe          BL       tu_fifo_remaining
000178  e3500c02          CMP      r0,#0x200
;;;160      _prep_out_transaction(p_cdc);
;;;161    }
00017c  38bd8010          POPCC    {r4,pc}
000180  e5d41003          LDRB     r1,[r4,#3]
000184  e3a00000          MOV      r0,#0
000188  ebfffffe          BL       usbd_edpt_claim
00018c  e3500000          CMP      r0,#0
000190  08bd8010          POPEQ    {r4,pc}
000194  e2840010          ADD      r0,r4,#0x10
000198  ebfffffe          BL       tu_fifo_remaining
00019c  e5d41003          LDRB     r1,[r4,#3]
0001a0  e3500c02          CMP      r0,#0x200
0001a4  3a000005          BCC      |L1.448|
0001a8  e2842b02          ADD      r2,r4,#0x800
0001ac  e8bd4010          POP      {r4,lr}
0001b0  e3a03c02          MOV      r3,#0x200
0001b4  e2822058          ADD      r2,r2,#0x58
0001b8  e3a00000          MOV      r0,#0
0001bc  eafffffe          B        usbd_edpt_xfer
                  |L1.448|
0001c0  e8bd4010          POP      {r4,lr}
0001c4  e3a00000          MOV      r0,#0
0001c8  eafffffe          B        usbd_edpt_release
;;;162    
                          ENDP

                  tud_cdc_n_write_flush PROC
;;;180    
;;;181    uint32_t tud_cdc_n_write_flush (uint8_t itf)
0001cc  e59f10ac          LDR      r1,|L1.640|
;;;182    {
0001d0  e92d4070          PUSH     {r4-r6,lr}
;;;183      cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
0001d4  e1600180          SMULBB   r0,r0,r1
0001d8  e59f10a4          LDR      r1,|L1.644|
0001dc  e0814180          ADD      r4,r1,r0,LSL #3
0001e0  ebfffffe          BL       tud_mounted
0001e4  e3500000          CMP      r0,#0
0001e8  0a000022          BEQ      |L1.632|
0001ec  ebfffffe          BL       tud_suspended
0001f0  e3500000          CMP      r0,#0
0001f4  1a00001f          BNE      |L1.632|
;;;184    
;;;185      // Skip if usb is not ready yet
;;;186      TU_VERIFY( tud_ready(), 0 );
;;;187    
;;;188      // No data to send
;;;189      if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
0001f8  e2840024          ADD      r0,r4,#0x24
0001fc  ebfffffe          BL       tu_fifo_count
000200  e3500000          CMP      r0,#0
;;;190    
;;;191      uint8_t const rhport = 0;
;;;192    
;;;193      // Claim the endpoint
;;;194      TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
;;;195    
;;;196      // Pull data from FIFO
;;;197      uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
;;;198    
;;;199      if ( count )
;;;200      {
;;;201        TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
;;;202        return count;
;;;203      }else
;;;204      {
;;;205        // Release endpoint since we don't make any transfer
;;;206        // Note: data is dropped if terminal is not connected
;;;207        usbd_edpt_release(rhport, p_cdc->ep_in);
;;;208        return 0;
;;;209      }
;;;210    }
000204  08bd8070          POPEQ    {r4-r6,pc}
000208  e5d41002          LDRB     r1,[r4,#2]            ;194
00020c  e3a00000          MOV      r0,#0                 ;194
000210  ebfffffe          BL       usbd_edpt_claim
000214  e3500000          CMP      r0,#0                 ;194
000218  08bd8070          POPEQ    {r4-r6,pc}
00021c  e2841b02          ADD      r1,r4,#0x800          ;197
000220  e2811f96          ADD      r1,r1,#0x258          ;197
000224  e3a02c02          MOV      r2,#0x200             ;197
000228  e1a06001          MOV      r6,r1                 ;197
00022c  e2840024          ADD      r0,r4,#0x24           ;197
000230  ebfffffe          BL       tu_fifo_read_n
000234  e5d41002          LDRB     r1,[r4,#2]            ;207
000238  e1b05000          MOVS     r5,r0                 ;197
00023c  0a00000b          BEQ      |L1.624|
000240  e1a03000          MOV      r3,r0                 ;201
000244  e1a02006          MOV      r2,r6                 ;201
000248  e3a00000          MOV      r0,#0                 ;201
00024c  ebfffffe          BL       usbd_edpt_xfer
000250  e3500000          CMP      r0,#0                 ;201
000254  11a00005          MOVNE    r0,r5                 ;202
000258  18bd8070          POPNE    {r4-r6,pc}
00025c  e3a020c9          MOV      r2,#0xc9              ;201
000260  e59f1020          LDR      r1,|L1.648|
000264  e28f0020          ADR      r0,|L1.652|
000268  ebfffffe          BL       __2printf
00026c  ea000001          B        |L1.632|
                  |L1.624|
000270  e3a00000          MOV      r0,#0                 ;207
000274  ebfffffe          BL       usbd_edpt_release
                  |L1.632|
000278  e3a00000          MOV      r0,#0                 ;208
00027c  e8bd8070          POP      {r4-r6,pc}
                  |L1.640|
                          DCD      0x0000018b
                  |L1.644|
                          DCD      ||.bss||
                  |L1.648|
                          DCD      ||.constdata||
                  |L1.652|
00028c  25732025          DCB      "%s %d: ASSERT FAILED\r\n",0
000290  643a2041
000294  53534552
000298  54204641
00029c  494c4544
0002a0  0d0a00  
0002a3  00                DCB      0
                          ENDP

                  tud_cdc_n_write PROC
;;;165    //--------------------------------------------------------------------+
;;;166    uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
0002a4  e92d4070          PUSH     {r4-r6,lr}
;;;167    {
0002a8  e1a05000          MOV      r5,r0
;;;168      cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
0002ac  e51f0034          LDR      r0,|L1.640|
0002b0  e51f3034          LDR      r3,|L1.644|
0002b4  e1600085          SMULBB   r0,r5,r0
;;;169      uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
0002b8  e1a02802          LSL      r2,r2,#16
0002bc  e0834180          ADD      r4,r3,r0,LSL #3       ;168
0002c0  e1a02822          LSR      r2,r2,#16
0002c4  e2840024          ADD      r0,r4,#0x24
0002c8  ebfffffe          BL       tu_fifo_write_n
0002cc  e1a06000          MOV      r6,r0
;;;170    
;;;171      // flush if queue more than packet size
;;;172      // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
;;;173      if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
0002d0  e2840024          ADD      r0,r4,#0x24
0002d4  ebfffffe          BL       tu_fifo_count
0002d8  e3500c02          CMP      r0,#0x200
;;;174      {
;;;175        tud_cdc_n_write_flush(itf);
0002dc  21a00005          MOVCS    r0,r5
0002e0  2bfffffe          BLCS     tud_cdc_n_write_flush
;;;176      }
;;;177    
;;;178      return ret;
0002e4  e1a00006          MOV      r0,r6
;;;179    }
0002e8  e8bd8070          POP      {r4-r6,pc}
;;;180    
                          ENDP

                  tud_cdc_n_write_available PROC
;;;211    
;;;212    uint32_t tud_cdc_n_write_available (uint8_t itf)
0002ec  e51f1074          LDR      r1,|L1.640|
;;;213    {
;;;214      return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
0002f0  e1600180          SMULBB   r0,r0,r1
0002f4  e51f1078          LDR      r1,|L1.644|
0002f8  e0810180          ADD      r0,r1,r0,LSL #3
0002fc  e2800024          ADD      r0,r0,#0x24
000300  eafffffe          B        tu_fifo_remaining
;;;215    }
;;;216    
                          ENDP

                  tud_cdc_n_write_clear PROC
;;;217    bool tud_cdc_n_write_clear (uint8_t itf)
000304  e51f108c          LDR      r1,|L1.640|
;;;218    {
;;;219      return tu_fifo_clear(&_cdcd_itf[itf].tx_ff);
000308  e1600180          SMULBB   r0,r0,r1
00030c  e51f1090          LDR      r1,|L1.644|
000310  e0810180          ADD      r0,r1,r0,LSL #3
000314  e2800024          ADD      r0,r0,#0x24
000318  eafffffe          B        tu_fifo_clear
;;;220    }
;;;221    
                          ENDP

                  cdcd_init PROC
;;;224    //--------------------------------------------------------------------+
;;;225    void cdcd_init(void)
00031c  e92d4ff8          PUSH     {r3-r11,lr}
;;;226    {
;;;227      tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
000320  e59f1614          LDR      r1,|L1.2364|
000324  e51f00a8          LDR      r0,|L1.644|
000328  ebfffffe          BL       __aeabi_memclr4
00032c  e51f80b0          LDR      r8,|L1.644|
;;;228    
;;;229      for(uint8_t i=0; i<CFG_TUD_CDC; i++)
;;;230      {
;;;231        cdcd_interface_t* p_cdc = &_cdcd_itf[i];
;;;232    
;;;233        p_cdc->wanted_char = (char) -1;
;;;234    
;;;235        // default line coding is : stop bit = 1, parity = none, data bits = 8
;;;236        p_cdc->line_coding.bit_rate  = 115200;
000330  e59fa608          LDR      r10,|L1.2368|
000334  e3a05000          MOV      r5,#0                 ;227
000338  e1a06005          MOV      r6,r5                 ;229
00033c  e3a090ff          MOV      r9,#0xff              ;233
;;;237        p_cdc->line_coding.stop_bits = 0;
;;;238        p_cdc->line_coding.parity    = 0;
;;;239        p_cdc->line_coding.data_bits = 8;
000340  e3a0b008          MOV      r11,#8
                  |L1.836|
000344  e51f00cc          LDR      r0,|L1.640|
;;;240    
;;;241        // Config RX fifo
;;;242        tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
000348  e3a03001          MOV      r3,#1
00034c  e0000096          MUL      r0,r6,r0              ;231
000350  e3a02b01          MOV      r2,#0x400
000354  e0884180          ADD      r4,r8,r0,LSL #3       ;231
000358  e5c49005          STRB     r9,[r4,#5]            ;233
00035c  e584a008          STR      r10,[r4,#8]           ;236
000360  e5c4500c          STRB     r5,[r4,#0xc]          ;237
000364  e5c4500d          STRB     r5,[r4,#0xd]          ;238
000368  e5c4b00e          STRB     r11,[r4,#0xe]         ;239
00036c  e2841038          ADD      r1,r4,#0x38
000370  e2840010          ADD      r0,r4,#0x10
000374  e58d5000          STR      r5,[sp,#0]
000378  ebfffffe          BL       tu_fifo_config
;;;243    
;;;244        // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
;;;245        // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
;;;246        // In this way, the most current data is prioritized.
;;;247        tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
00037c  e3a00001          MOV      r0,#1
000380  e1a03000          MOV      r3,r0
000384  e2841b01          ADD      r1,r4,#0x400
000388  e58d0000          STR      r0,[sp,#0]
00038c  e3a02b01          MOV      r2,#0x400
000390  e2811038          ADD      r1,r1,#0x38
000394  e2840024          ADD      r0,r4,#0x24
000398  ebfffffe          BL       tu_fifo_config
;;;248    
;;;249        tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
00039c  e2847b02          ADD      r7,r4,#0x800
0003a0  e2877038          ADD      r7,r7,#0x38
0003a4  e1a00007          MOV      r0,r7
0003a8  ebfffffe          BL       os_mut_init
0003ac  e584501c          STR      r5,[r4,#0x1c]
0003b0  e5847020          STR      r7,[r4,#0x20]
;;;250        tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
0003b4  e2847b02          ADD      r7,r4,#0x800
0003b8  e2877048          ADD      r7,r7,#0x48
0003bc  e1a00007          MOV      r0,r7
0003c0  ebfffffe          BL       os_mut_init
0003c4  e2860001          ADD      r0,r6,#1              ;229
0003c8  e5a47030          STR      r7,[r4,#0x30]!        ;229
0003cc  e21060ff          ANDS     r6,r0,#0xff           ;229
0003d0  e5845004          STR      r5,[r4,#4]            ;229
0003d4  0affffda          BEQ      |L1.836|
;;;251      }
;;;252    }
0003d8  e8bd8ff8          POP      {r3-r11,pc}
;;;253    
                          ENDP

                  cdcd_reset PROC
;;;254    void cdcd_reset(uint8_t rhport)
0003dc  e92d41f0          PUSH     {r4-r8,lr}
;;;255    {
;;;256      (void) rhport;
;;;257    
;;;258      for(uint8_t i=0; i<CFG_TUD_CDC; i++)
;;;259      {
;;;260        cdcd_interface_t* p_cdc = &_cdcd_itf[i];
0003e0  e51f7164          LDR      r7,|L1.644|
0003e4  e3a06000          MOV      r6,#0                 ;255
0003e8  e1a05006          MOV      r5,r6                 ;258
                  |L1.1004|
0003ec  e51f0174          LDR      r0,|L1.640|
0003f0  e0000095          MUL      r0,r5,r0
0003f4  e0874180          ADD      r4,r7,r0,LSL #3
;;;261    
;;;262        tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
0003f8  e5846000          STR      r6,[r4,#0]
;;;263        tu_fifo_clear(&p_cdc->rx_ff);
0003fc  e2840010          ADD      r0,r4,#0x10
000400  e5c46004          STRB     r6,[r4,#4]            ;262
000404  ebfffffe          BL       tu_fifo_clear
;;;264        tu_fifo_clear(&p_cdc->tx_ff);
000408  e2840024          ADD      r0,r4,#0x24
00040c  ebfffffe          BL       tu_fifo_clear
;;;265        tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
000410  e3a01001          MOV      r1,#1
000414  e2840024          ADD      r0,r4,#0x24
000418  ebfffffe          BL       tu_fifo_set_overwritable
00041c  e2850001          ADD      r0,r5,#1              ;258
000420  e21050ff          ANDS     r5,r0,#0xff           ;258
000424  0afffff0          BEQ      |L1.1004|
;;;266      }
;;;267    }
000428  e8bd81f0          POP      {r4-r8,pc}
;;;268    
                          ENDP

                  cdcd_open PROC
;;;269    uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
00042c  e92d40f0          PUSH     {r4-r7,lr}
;;;270    {
000430  e1a07000          MOV      r7,r0
;;;271      // Only support ACM subclass
;;;272      TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
000434  e5d10005          LDRB     r0,[r1,#5]
000438  e24dd00c          SUB      sp,sp,#0xc            ;270
00043c  e3500002          CMP      r0,#2
000440  05d10006          LDRBEQ   r0,[r1,#6]
000444  03500002          CMPEQ    r0,#2
000448  13a00000          MOVNE    r0,#0
00044c  128dd00c          ADDNE    sp,sp,#0xc            ;270
;;;273                 CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);
;;;274    
;;;275      // Find available interface
;;;276      cdcd_interface_t * p_cdc = NULL;
;;;277      for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
;;;278      {
;;;279        if ( _cdcd_itf[cdc_id].ep_in == 0 )
;;;280        {
;;;281          p_cdc = &_cdcd_itf[cdc_id];
;;;282          break;
;;;283        }
;;;284      }
;;;285      TU_ASSERT(p_cdc, 0);
;;;286    
;;;287      //------------- Control Interface -------------//
;;;288      p_cdc->itf_num = itf_desc->bInterfaceNumber;
;;;289    
;;;290      uint16_t drv_len = sizeof(tusb_desc_interface_t);
;;;291      uint8_t const * p_desc = tu_desc_next( itf_desc );
;;;292    
;;;293      // Communication Functional Descriptors
;;;294      while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
;;;295      {
;;;296        drv_len += tu_desc_len(p_desc);
;;;297        p_desc   = tu_desc_next(p_desc);
;;;298      }
;;;299    
;;;300      if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
;;;301      {
;;;302        // notification endpoint
;;;303        tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
;;;304    
;;;305        TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
;;;306        p_cdc->ep_notif = desc_ep->bEndpointAddress;
;;;307    
;;;308        drv_len += tu_desc_len(p_desc);
;;;309        p_desc   = tu_desc_next(p_desc);
;;;310      }
;;;311    
;;;312      //------------- Data Interface (if any) -------------//
;;;313      if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
;;;314           (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
;;;315      {
;;;316        // next to endpoint descriptor
;;;317        drv_len += tu_desc_len(p_desc);
;;;318        p_desc   = tu_desc_next(p_desc);
;;;319    
;;;320        // Open endpoint pair
;;;321        TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
;;;322    
;;;323        drv_len += 2*sizeof(tusb_desc_endpoint_t);
;;;324      }
;;;325    
;;;326      // Prepare for incoming data
;;;327      _prep_out_transaction(p_cdc);
;;;328    
;;;329      return drv_len;
;;;330    }
000450  18bd80f0          POPNE    {r4-r7,pc}
000454  e51f01d8          LDR      r0,|L1.644|
000458  e5d00002          LDRB     r0,[r0,#2]            ;279  ; _cdcd_itf
00045c  e3500000          CMP      r0,#0                 ;279
000460  0a000006          BEQ      |L1.1152|
000464  e59f24d8          LDR      r2,|L1.2372|
000468  e59f14d8          LDR      r1,|L1.2376|
00046c  e24f0f7a          ADR      r0,|L1.652|
000470  ebfffffe          BL       __2printf
000474  e3a00000          MOV      r0,#0                 ;285
000478  e28dd00c          ADD      sp,sp,#0xc            ;285
00047c  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1152|
000480  e5d10002          LDRB     r0,[r1,#2]            ;288
000484  e51f6208          LDR      r6,|L1.644|
000488  e3a05009          MOV      r5,#9                 ;290
00048c  e5c60000          STRB     r0,[r6,#0]            ;288
000490  e5d10000          LDRB     r0,[r1,#0]            ;288
000494  e0804001          ADD      r4,r0,r1              ;288
000498  ea000003          B        |L1.1196|
                  |L1.1180|
00049c  e5d40000          LDRB     r0,[r4,#0]            ;296
0004a0  e0844000          ADD      r4,r4,r0              ;296
0004a4  e0800005          ADD      r0,r0,r5              ;296
0004a8  e3c05801          BIC      r5,r0,#0x10000        ;296
                  |L1.1196|
0004ac  e5d40001          LDRB     r0,[r4,#1]            ;297
0004b0  e3500024          CMP      r0,#0x24              ;297
0004b4  0a000003          BEQ      |L1.1224|
0004b8  e20000ff          AND      r0,r0,#0xff           ;300
0004bc  e3500005          CMP      r0,#5                 ;300
0004c0  0a000003          BEQ      |L1.1236|
0004c4  ea00000d          B        |L1.1280|
                  |L1.1224|
0004c8  e1550002          CMP      r5,r2                 ;297
0004cc  9afffff2          BLS      |L1.1180|
0004d0  ea00000f          B        |L1.1300|
                  |L1.1236|
0004d4  e1a01004          MOV      r1,r4                 ;305
0004d8  e1a00007          MOV      r0,r7                 ;305
0004dc  ebfffffe          BL       usbd_edpt_open
0004e0  e3500000          CMP      r0,#0                 ;305
0004e4  0a00001e          BEQ      |L1.1380|
0004e8  e5d40002          LDRB     r0,[r4,#2]            ;306
0004ec  e5c60001          STRB     r0,[r6,#1]            ;306
0004f0  e5d40000          LDRB     r0,[r4,#0]            ;308
0004f4  e0801005          ADD      r1,r0,r5              ;308
0004f8  e3c15801          BIC      r5,r1,#0x10000        ;308
0004fc  e0844000          ADD      r4,r4,r0              ;308
                  |L1.1280|
000500  e5d40001          LDRB     r0,[r4,#1]            ;313
000504  e3500004          CMP      r0,#4                 ;313
000508  05d40005          LDRBEQ   r0,[r4,#5]            ;313
00050c  0350000a          CMPEQ    r0,#0xa               ;313
000510  0a00001a          BEQ      |L1.1408|
                  |L1.1300|
000514  e2860010          ADD      r0,r6,#0x10           ;313
000518  ebfffffe          BL       tu_fifo_remaining
00051c  e3500c02          CMP      r0,#0x200             ;313
000520  3a00002e          BCC      |L1.1504|
000524  e5d61003          LDRB     r1,[r6,#3]            ;313
000528  e3a00000          MOV      r0,#0                 ;313
00052c  ebfffffe          BL       usbd_edpt_claim
000530  e3500000          CMP      r0,#0                 ;313
000534  0a000029          BEQ      |L1.1504|
000538  e2860010          ADD      r0,r6,#0x10           ;313
00053c  ebfffffe          BL       tu_fifo_remaining
000540  e5d61003          LDRB     r1,[r6,#3]            ;313
000544  e3500c02          CMP      r0,#0x200             ;313
000548  3a000022          BCC      |L1.1496|
00054c  e2862b02          ADD      r2,r6,#0x800          ;313
000550  e3a03c02          MOV      r3,#0x200             ;313
000554  e2822058          ADD      r2,r2,#0x58           ;313
000558  e3a00000          MOV      r0,#0                 ;313
00055c  ebfffffe          BL       usbd_edpt_xfer
000560  ea00001e          B        |L1.1504|
                  |L1.1380|
000564  e59f23e0          LDR      r2,|L1.2380|
000568  e59f13d8          LDR      r1,|L1.2376|
00056c  e24f0fba          ADR      r0,|L1.652|
000570  ebfffffe          BL       __2printf
000574  e3a00000          MOV      r0,#0                 ;305
000578  e28dd00c          ADD      sp,sp,#0xc            ;305
00057c  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1408|
000580  e5d40000          LDRB     r0,[r4,#0]            ;317
000584  e2862002          ADD      r2,r6,#2              ;321
000588  e3a03002          MOV      r3,#2                 ;321
00058c  e0801005          ADD      r1,r0,r5              ;317
000590  e3c15801          BIC      r5,r1,#0x10000        ;317
000594  e0801004          ADD      r1,r0,r4              ;317
000598  e2860003          ADD      r0,r6,#3              ;321
00059c  e88d0005          STM      sp,{r0,r2}            ;321
0005a0  e1a02003          MOV      r2,r3                 ;321
0005a4  e1a00007          MOV      r0,r7                 ;321
0005a8  ebfffffe          BL       usbd_open_edpt_pair
0005ac  e3500000          CMP      r0,#0                 ;321
0005b0  1285000e          ADDNE    r0,r5,#0xe            ;323
0005b4  13c05801          BICNE    r5,r0,#0x10000        ;323
0005b8  1affffd5          BNE      |L1.1300|
0005bc  e59f238c          LDR      r2,|L1.2384|
0005c0  e59f1380          LDR      r1,|L1.2376|
0005c4  e24f0d0d          ADR      r0,|L1.652|
0005c8  ebfffffe          BL       __2printf
0005cc  e3a00000          MOV      r0,#0                 ;321
0005d0  e28dd00c          ADD      sp,sp,#0xc            ;321
0005d4  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1496|
0005d8  e3a00000          MOV      r0,#0
0005dc  ebfffffe          BL       usbd_edpt_release
                  |L1.1504|
0005e0  e1a00005          MOV      r0,r5                 ;329
0005e4  e28dd00c          ADD      sp,sp,#0xc            ;329
0005e8  e8bd80f0          POP      {r4-r7,pc}
;;;331    
                          ENDP

                  cdcd_control_xfer_cb PROC
;;;334    // return false to stall control endpoint (e.g unsupported request)
;;;335    bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
0005ec  e92d4070          PUSH     {r4-r6,lr}
;;;336    {
0005f0  e1a04002          MOV      r4,r2
;;;337      // Handle class request only
;;;338      TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
0005f4  e5d22000          LDRB     r2,[r2,#0]
0005f8  e1a06000          MOV      r6,r0                 ;336
0005fc  e3a00001          MOV      r0,#1
000600  e1a02c82          LSL      r2,r2,#25
000604  e1500f22          CMP      r0,r2,LSR #30
000608  1a000016          BNE      |L1.1640|
;;;339    
;;;340      uint8_t itf = 0;
;;;341      cdcd_interface_t* p_cdc = _cdcd_itf;
;;;342    
;;;343      // Identify which interface to use
;;;344      for ( ; ; itf++, p_cdc++)
;;;345      {
;;;346        if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
;;;347    
;;;348        if ( p_cdc->itf_num == request->wIndex ) break;
00060c  e5d42005          LDRB     r2,[r4,#5]
000610  e5d40004          LDRB     r0,[r4,#4]
000614  e51fc398          LDR      r12,|L1.644|
000618  e3a05000          MOV      r5,#0                 ;340
00061c  e1800402          ORR      r0,r0,r2,LSL #8
                  |L1.1568|
000620  e5dc2000          LDRB     r2,[r12,#0]
000624  e1520000          CMP      r2,r0
000628  0a000005          BEQ      |L1.1604|
00062c  e2852001          ADD      r2,r5,#1
000630  e28ccb03          ADD      r12,r12,#0xc00
000634  e21250ff          ANDS     r5,r2,#0xff
000638  e28cc058          ADD      r12,r12,#0x58
00063c  0afffff7          BEQ      |L1.1568|
000640  ea000008          B        |L1.1640|
                  |L1.1604|
;;;349      }
;;;350    
;;;351      switch ( request->bRequest )
000644  e5d40001          LDRB     r0,[r4,#1]
000648  e3500020          CMP      r0,#0x20
00064c  0a000007          BEQ      |L1.1648|
000650  e3500021          CMP      r0,#0x21
000654  0a000010          BEQ      |L1.1692|
000658  e3500022          CMP      r0,#0x22
00065c  0a000016          BEQ      |L1.1724|
000660  e3500023          CMP      r0,#0x23
000664  0a00002d          BEQ      |L1.1824|
                  |L1.1640|
;;;352      {
;;;353        case CDC_REQUEST_SET_LINE_CODING:
;;;354          if (stage == CONTROL_STAGE_SETUP)
;;;355          {
;;;356            TU_LOG2("  Set Line Coding\r\n");
;;;357            tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
;;;358          }
;;;359          else if ( stage == CONTROL_STAGE_ACK)
;;;360          {
;;;361            if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
;;;362          }
;;;363        break;
;;;364    
;;;365        case CDC_REQUEST_GET_LINE_CODING:
;;;366          if (stage == CONTROL_STAGE_SETUP)
;;;367          {
;;;368            TU_LOG2("  Get Line Coding\r\n");
;;;369            tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
;;;370          }
;;;371        break;
;;;372    
;;;373        case CDC_REQUEST_SET_CONTROL_LINE_STATE:
;;;374          if (stage == CONTROL_STAGE_SETUP)
;;;375          {
;;;376            tud_control_status(rhport, request);
;;;377          }
;;;378          else if (stage == CONTROL_STAGE_ACK)
;;;379          {
;;;380            // CDC PSTN v1.2 section 6.3.12
;;;381            // Bit 0: Indicates if DTE is present or not.
;;;382            //        This signal corresponds to V.24 signal 108/2 and RS-232 signal DTR (Data Terminal Ready)
;;;383            // Bit 1: Carrier control for half-duplex modems.
;;;384            //        This signal corresponds to V.24 signal 105 and RS-232 signal RTS (Request to Send)
;;;385            bool const dtr = tu_bit_test(request->wValue, 0);
;;;386            bool const rts = tu_bit_test(request->wValue, 1);
;;;387    
;;;388            p_cdc->line_state = (uint8_t) request->wValue;
;;;389    
;;;390            // Disable fifo overwriting if DTR bit is set
;;;391            tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
;;;392    
;;;393            TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);
;;;394    
;;;395            // Invoke callback
;;;396            if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
;;;397          }
;;;398        break;
;;;399        case CDC_REQUEST_SEND_BREAK:
;;;400          if (stage == CONTROL_STAGE_SETUP)
;;;401          {
;;;402            tud_control_status(rhport, request);
;;;403          }
;;;404          else if (stage == CONTROL_STAGE_ACK)
;;;405          {
;;;406            TU_LOG2("  Send Break\r\n");
;;;407            if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
;;;408          }
;;;409        break;
;;;410    
;;;411        default: return false; // stall unsupported request
000668  e3a00000          MOV      r0,#0
;;;412      }
;;;413    
;;;414      return true;
;;;415    }
00066c  e8bd8070          POP      {r4-r6,pc}
                  |L1.1648|
000670  e3510001          CMP      r1,#1                 ;354
000674  0a00000a          BEQ      |L1.1700|
000678  e3510003          CMP      r1,#3                 ;359
00067c  1a000038          BNE      |L1.1892|
000680  e59f02cc          LDR      r0,|L1.2388|
000684  e3500000          CMP      r0,#0                 ;361
000688  0a000035          BEQ      |L1.1892|
00068c  e28c1008          ADD      r1,r12,#8             ;361
000690  e1a00005          MOV      r0,r5                 ;361
000694  ebfffffe          BL       tud_cdc_line_coding_cb
000698  ea000031          B        |L1.1892|
                  |L1.1692|
00069c  e3510001          CMP      r1,#1                 ;366
0006a0  1a00002f          BNE      |L1.1892|
                  |L1.1700|
0006a4  e3a03007          MOV      r3,#7                 ;369
0006a8  e28c2008          ADD      r2,r12,#8             ;369
0006ac  e1a01004          MOV      r1,r4                 ;369
0006b0  e1a00006          MOV      r0,r6                 ;369
0006b4  ebfffffe          BL       tud_control_xfer
0006b8  ea000029          B        |L1.1892|
                  |L1.1724|
0006bc  e3510001          CMP      r1,#1                 ;374
0006c0  0a00001b          BEQ      |L1.1844|
0006c4  e3510003          CMP      r1,#3                 ;378
0006c8  1a000025          BNE      |L1.1892|
0006cc  e5d40003          LDRB     r0,[r4,#3]            ;385
0006d0  e5d41002          LDRB     r1,[r4,#2]            ;385
0006d4  e1810400          ORR      r0,r1,r0,LSL #8       ;385
0006d8  e3100001          TST      r0,#1                 ;385
0006dc  13a06001          MOVNE    r6,#1                 ;385
0006e0  03a06000          MOVEQ    r6,#0                 ;385
0006e4  e3100002          TST      r0,#2                 ;385
0006e8  e5cc0004          STRB     r0,[r12,#4]           ;388
0006ec  13a04001          MOVNE    r4,#1                 ;388
0006f0  03a04000          MOVEQ    r4,#0                 ;388
0006f4  e2261001          EOR      r1,r6,#1              ;391
0006f8  e28c0024          ADD      r0,r12,#0x24          ;391
0006fc  ebfffffe          BL       tu_fifo_set_overwritable
000700  e59f0250          LDR      r0,|L1.2392|
000704  e3500000          CMP      r0,#0                 ;396
000708  0a000015          BEQ      |L1.1892|
00070c  e1a02004          MOV      r2,r4                 ;396
000710  e1a01006          MOV      r1,r6                 ;396
000714  e1a00005          MOV      r0,r5                 ;396
000718  ebfffffe          BL       tud_cdc_line_state_cb
00071c  ea000010          B        |L1.1892|
                  |L1.1824|
000720  e3510001          CMP      r1,#1                 ;400
000724  0a000002          BEQ      |L1.1844|
000728  e3510003          CMP      r1,#3                 ;404
00072c  0a000004          BEQ      |L1.1860|
000730  ea00000b          B        |L1.1892|
                  |L1.1844|
000734  e1a01004          MOV      r1,r4                 ;402
000738  e1a00006          MOV      r0,r6                 ;402
00073c  ebfffffe          BL       tud_control_status
000740  ea000007          B        |L1.1892|
                  |L1.1860|
000744  e59f0210          LDR      r0,|L1.2396|
000748  e3500000          CMP      r0,#0                 ;407
00074c  0a000004          BEQ      |L1.1892|
000750  e5d40003          LDRB     r0,[r4,#3]            ;407
000754  e5d41002          LDRB     r1,[r4,#2]            ;407
000758  e1811400          ORR      r1,r1,r0,LSL #8       ;407
00075c  e1a00005          MOV      r0,r5                 ;407
000760  ebfffffe          BL       tud_cdc_send_break_cb
                  |L1.1892|
000764  e3a00001          MOV      r0,#1                 ;414
000768  e8bd8070          POP      {r4-r6,pc}
;;;416    
                          ENDP

                  cdcd_xfer_cb PROC
;;;417    bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
00076c  e92d47f0          PUSH     {r4-r10,lr}
;;;418    {
000770  e1a09000          MOV      r9,r0
;;;419      (void) result;
;;;420    
;;;421      uint8_t itf;
;;;422      cdcd_interface_t* p_cdc;
;;;423    
;;;424      // Identify which interface to use
;;;425      for (itf = 0; itf < CFG_TUD_CDC; itf++)
;;;426      {
;;;427        p_cdc = &_cdcd_itf[itf];
000774  e51f04f8          LDR      r0,|L1.644|
000778  e1a07003          MOV      r7,r3                 ;418
00077c  e1a08001          MOV      r8,r1                 ;418
000780  e3a06000          MOV      r6,#0                 ;425
                  |L1.1924|
000784  e51f150c          LDR      r1,|L1.640|
000788  e0010196          MUL      r1,r6,r1
00078c  e0804181          ADD      r4,r0,r1,LSL #3
;;;428        if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
000790  e5d41003          LDRB     r1,[r4,#3]
000794  e1510008          CMP      r1,r8
000798  15d41002          LDRBNE   r1,[r4,#2]
00079c  11510008          CMPNE    r1,r8
0007a0  0a000008          BEQ      |L1.1992|
0007a4  e2861001          ADD      r1,r6,#1
0007a8  e21160ff          ANDS     r6,r1,#0xff
0007ac  0afffff4          BEQ      |L1.1924|
;;;429      }
;;;430      TU_ASSERT(itf < CFG_TUD_CDC);
0007b0  e59f21a8          LDR      r2,|L1.2400|
0007b4  e59f11a8          LDR      r1,|L1.2404|
0007b8  e59f01a8          LDR      r0,|L1.2408|
0007bc  ebfffffe          BL       __2printf
0007c0  e3a00000          MOV      r0,#0
;;;431    
;;;432      // Received new data
;;;433      if ( ep_addr == p_cdc->ep_out )
;;;434      {
;;;435        tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
;;;436    
;;;437        // Check for wanted char and invoke callback if needed
;;;438        if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
;;;439        {
;;;440          for ( uint32_t i = 0; i < xferred_bytes; i++ )
;;;441          {
;;;442            if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
;;;443            {
;;;444              tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
;;;445            }
;;;446          }
;;;447        }
;;;448    
;;;449        // invoke receive callback (if there is still data)
;;;450        if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
;;;451    
;;;452        // prepare for OUT transaction
;;;453        _prep_out_transaction(p_cdc);
;;;454      }
;;;455    
;;;456      // Data sent to host, we continue to fetch from tx fifo to send.
;;;457      // Note: This will cause incorrect baudrate set in line coding.
;;;458      //       Though maybe the baudrate is not really important !!!
;;;459      if ( ep_addr == p_cdc->ep_in )
;;;460      {
;;;461        // invoke transmit callback to possibly refill tx fifo
;;;462        if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
;;;463    
;;;464        if ( 0 == tud_cdc_n_write_flush(itf) )
;;;465        {
;;;466          // If there is no data left, a ZLP should be sent if
;;;467          // xferred_bytes is multiple of EP Packet size and not zero
;;;468          if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
;;;469          {
;;;470            if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
;;;471            {
;;;472              usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
;;;473            }
;;;474          }
;;;475        }
;;;476      }
;;;477    
;;;478      // nothing to do with notif endpoint for now
;;;479    
;;;480      return true;
;;;481    }
0007c4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1992|
0007c8  e5d40003          LDRB     r0,[r4,#3]            ;433
0007cc  e1500008          CMP      r0,r8                 ;433
0007d0  1a00003a          BNE      |L1.2240|
0007d4  e2841b02          ADD      r1,r4,#0x800          ;435
0007d8  e1a02807          LSL      r2,r7,#16             ;435
0007dc  e2811058          ADD      r1,r1,#0x58           ;435
0007e0  e1a02822          LSR      r2,r2,#16             ;435
0007e4  e1a0a001          MOV      r10,r1                ;435
0007e8  e2840010          ADD      r0,r4,#0x10           ;435
0007ec  ebfffffe          BL       tu_fifo_write_n
0007f0  e59f0174          LDR      r0,|L1.2412|
0007f4  e3500000          CMP      r0,#0                 ;438
0007f8  11d400d5          LDRSBNE  r0,[r4,#5]            ;438
0007fc  13700001          CMNNE    r0,#1                 ;438
000800  0a000011          BEQ      |L1.2124|
000804  e3570000          CMP      r7,#0                 ;440
000808  e3a05000          MOV      r5,#0                 ;440
00080c  9a00000e          BLS      |L1.2124|
                  |L1.2064|
000810  e0840005          ADD      r0,r4,r5              ;442
000814  e5d41005          LDRB     r1,[r4,#5]            ;442
000818  e5d00858          LDRB     r0,[r0,#0x858]        ;442
00081c  e1510000          CMP      r1,r0                 ;442
000820  1a000006          BNE      |L1.2112|
000824  e2840010          ADD      r0,r4,#0x10           ;442
000828  ebfffffe          BL       tu_fifo_empty
00082c  e3500000          CMP      r0,#0                 ;442
000830  1a000002          BNE      |L1.2112|
000834  e5d41005          LDRB     r1,[r4,#5]            ;444
000838  e1a00006          MOV      r0,r6                 ;444
00083c  ebfffffe          BL       tud_cdc_rx_wanted_cb
                  |L1.2112|
000840  e2855001          ADD      r5,r5,#1              ;444
000844  e1550007          CMP      r5,r7                 ;444
000848  3afffff0          BCC      |L1.2064|
                  |L1.2124|
00084c  e59f011c          LDR      r0,|L1.2416|
000850  e3500000          CMP      r0,#0                 ;450
000854  0a000004          BEQ      |L1.2156|
000858  e2840010          ADD      r0,r4,#0x10           ;450
00085c  ebfffffe          BL       tu_fifo_empty
000860  e3500000          CMP      r0,#0                 ;450
000864  01a00006          MOVEQ    r0,r6                 ;450
000868  0bfffffe          BLEQ     tud_cdc_rx_cb
                  |L1.2156|
00086c  e2840010          ADD      r0,r4,#0x10           ;450
000870  ebfffffe          BL       tu_fifo_remaining
000874  e3500c02          CMP      r0,#0x200             ;450
000878  3a000010          BCC      |L1.2240|
00087c  e5d41003          LDRB     r1,[r4,#3]            ;450
000880  e3a00000          MOV      r0,#0                 ;450
000884  ebfffffe          BL       usbd_edpt_claim
000888  e3500000          CMP      r0,#0                 ;450
00088c  0a00000b          BEQ      |L1.2240|
000890  e2840010          ADD      r0,r4,#0x10           ;450
000894  ebfffffe          BL       tu_fifo_remaining
000898  e5d41003          LDRB     r1,[r4,#3]            ;450
00089c  e3500c02          CMP      r0,#0x200             ;450
0008a0  3a000004          BCC      |L1.2232|
0008a4  e3a03c02          MOV      r3,#0x200             ;450
0008a8  e1a0200a          MOV      r2,r10                ;450
0008ac  e3a00000          MOV      r0,#0                 ;450
0008b0  ebfffffe          BL       usbd_edpt_xfer
0008b4  ea000001          B        |L1.2240|
                  |L1.2232|
0008b8  e3a00000          MOV      r0,#0                 ;450
0008bc  ebfffffe          BL       usbd_edpt_release
                  |L1.2240|
0008c0  e5d40002          LDRB     r0,[r4,#2]            ;459
0008c4  e1500008          CMP      r0,r8                 ;459
0008c8  1a000019          BNE      |L1.2356|
0008cc  e59f00a0          LDR      r0,|L1.2420|
0008d0  e3500000          CMP      r0,#0                 ;462
0008d4  11a00006          MOVNE    r0,r6                 ;462
0008d8  1bfffffe          BLNE     tud_cdc_tx_complete_cb
0008dc  e1a00006          MOV      r0,r6                 ;464
0008e0  ebfffffe          BL       tud_cdc_n_write_flush
0008e4  e3500000          CMP      r0,#0                 ;464
0008e8  1a000011          BNE      |L1.2356|
0008ec  e2840024          ADD      r0,r4,#0x24           ;468
0008f0  ebfffffe          BL       tu_fifo_count
0008f4  e3500000          CMP      r0,#0                 ;468
0008f8  1a00000d          BNE      |L1.2356|
0008fc  e3570000          CMP      r7,#0                 ;468
000900  0a00000b          BEQ      |L1.2356|
000904  e1b00b87          LSLS     r0,r7,#23             ;468
000908  1a000009          BNE      |L1.2356|
00090c  e5d41002          LDRB     r1,[r4,#2]            ;470
000910  e1a00009          MOV      r0,r9                 ;470
000914  ebfffffe          BL       usbd_edpt_claim
000918  e3500000          CMP      r0,#0                 ;470
00091c  0a000004          BEQ      |L1.2356|
000920  e3a03000          MOV      r3,#0                 ;472
000924  e5d41002          LDRB     r1,[r4,#2]            ;472
000928  e1a02003          MOV      r2,r3                 ;472
00092c  e1a00009          MOV      r0,r9                 ;472
000930  ebfffffe          BL       usbd_edpt_xfer
                  |L1.2356|
000934  e3a00001          MOV      r0,#1                 ;480
000938  e8bd87f0          POP      {r4-r10,pc}
;;;482    
                          ENDP

                  |L1.2364|
                          DCD      0x00000c58
                  |L1.2368|
                          DCD      0x0001c200
                  |L1.2372|
                          DCD      0x0000011d
                  |L1.2376|
                          DCD      ||.constdata||+0x16
                  |L1.2380|
                          DCD      0x00000131
                  |L1.2384|
                          DCD      0x00000141
                  |L1.2388|
                          DCD      tud_cdc_line_coding_cb
                  |L1.2392|
                          DCD      tud_cdc_line_state_cb
                  |L1.2396|
                          DCD      tud_cdc_send_break_cb
                  |L1.2400|
                          DCD      0x000001ae
                  |L1.2404|
                          DCD      ||.constdata||+0x20
                  |L1.2408|
                          DCD      ||.text||+0x28c
                  |L1.2412|
                          DCD      tud_cdc_rx_wanted_cb
                  |L1.2416|
                          DCD      tud_cdc_rx_cb
                  |L1.2420|
                          DCD      tud_cdc_tx_complete_cb

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _cdcd_itf
                          %        3160

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  7475645f          DCB      0x74,0x75,0x64,0x5f
000004  6364635f          DCB      0x63,0x64,0x63,0x5f
000008  6e5f7772          DCB      0x6e,0x5f,0x77,0x72
00000c  6974655f          DCB      0x69,0x74,0x65,0x5f
000010  666c7573          DCB      0x66,0x6c,0x75,0x73
000014  6800              DCB      0x68,0x00
                  |symbol_number.12|
000016  6364              DCB      0x63,0x64
000018  63645f6f          DCB      0x63,0x64,0x5f,0x6f
00001c  70656e00          DCB      0x70,0x65,0x6e,0x00
                  |symbol_number.13|
000020  63646364          DCB      0x63,0x64,0x63,0x64
000024  5f786665          DCB      0x5f,0x78,0x66,0x65
000028  725f6362          DCB      0x72,0x5f,0x63,0x62
00002c  00                DCB      0x00
