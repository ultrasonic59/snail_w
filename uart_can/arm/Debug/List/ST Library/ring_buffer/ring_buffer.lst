###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         28/Jan/2023  19:17:54
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\proj\velograph\uart_can\arm\lib\ring_buffer\ring_buffer.c
#    Command line                 =
#        -f "D:\proj\velograph\uart_can\arm\Debug\Obj\ST
#        Library\ring_buffer\ring_buffer.o.rsp"
#        (D:\proj\velograph\uart_can\arm\lib\ring_buffer\ring_buffer.c -D
#        USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D STM32F10X_MD
#        -lcN "D:\proj\velograph\uart_can\arm\Debug\List\ST
#        Library\ring_buffer" --diag_suppress Pa082,pe191 -o
#        "D:\proj\velograph\uart_can\arm\Debug\Obj\ST Library\ring_buffer"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        D:\proj\velograph\uart_can\arm\.\ -I
#        D:\proj\velograph\uart_can\arm\freertos\include\ -I
#        D:\proj\velograph\uart_can\arm\freertos\portable\IAR\ARM_CM3\ -I
#        D:\proj\velograph\uart_can\arm\drv\ -I
#        D:\proj\velograph\uart_can\arm\lib\STM32F10x_StdPeriph_Driver\inc\ -I
#        D:\proj\velograph\uart_can\arm\lib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I D:\proj\velograph\uart_can\arm\lib\CMSIS\CM3\CoreSupport\ -I
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\CMSIS\Core\Include\\" -I
#        D:\proj\velograph\uart_can\arm\lib\ring_buffer\ -Ol --use_c++_inline)
#        --dependencies=n "D:\proj\velograph\uart_can\arm\Debug\Obj\ST
#        Library\ring_buffer\ring_buffer.o.d"
#    Locale                       =  C
#    List file                    =
#        D:\proj\velograph\uart_can\arm\Debug\List\ST
#        Library\ring_buffer\ring_buffer.lst
#    Object file                  =
#        D:\proj\velograph\uart_can\arm\Debug\Obj\ST
#        Library\ring_buffer\ring_buffer.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

D:\proj\velograph\uart_can\arm\lib\ring_buffer\ring_buffer.c
      1          #include <stdlib.h>
      2          #include <string.h>
      3          
      4          #include "ring_buffer.h"
      5          
      6          extern void *pvPortMalloc( size_t xWantedSize );
      7          
      8          uint8_t*  ringbuffer_init(ringbuffer_t *rbuffer,int size)
      9          {
     10          rbuffer->buffer=(uint8_t*)pvPortMalloc(size); 
     11          if(rbuffer->buffer!=0)
     12            {
     13            memset(rbuffer->buffer, 0, size);
     14            rbuffer->put_index = 0;
     15            rbuffer->get_index = 0;
     16            rbuffer->size = size;
     17          ////  rbuffer->cnt = 0;
     18            }
     19          return rbuffer->buffer;
     20          }
     21          void  ringbuffer_clr(ringbuffer_t *rbuffer)
     22          {
     23            memset(rbuffer->buffer, 0, rbuffer->size);
     24            rbuffer->put_index = 0;
     25            rbuffer->get_index = 0;
     26          ///  rbuffer->cnt = 0;
     27          }
     28          
     29          ///inline 
     30          int ringbuffer_putc(ringbuffer_t* rbuffer,char ch)
     31          {
     32          rbuffer->buffer[rbuffer->put_index] = ch;
     33          rbuffer->put_index++;
     34          if(rbuffer->put_index>=rbuffer->size)
     35            rbuffer->put_index=0;
     36          ///rbuffer->cnt++;
     37          return 0;///rbuffer->cnt;
     38          }
     39          ////inline 
     40          int ringbuffer_getc(ringbuffer_t *rbuffer ,uint8_t *o_ch)
     41          {
     42          uint8_t ch;
     43          uint16_t cnt=1;
     44          if (rbuffer->get_index == rbuffer->put_index)
     45            return -1;
     46          
     47             ch = rbuffer->buffer[rbuffer->get_index];
     48              *o_ch=ch;
     49              rbuffer->get_index++;
     50              if(rbuffer->get_index>=rbuffer->size)
     51                  rbuffer->get_index=0;
     52              if (rbuffer->get_index == rbuffer->put_index)
     53                cnt=0;
     54              else
     55                cnt=1;
     56          return cnt;
     57          }
     58          inline 
     59          uint16_t get_ringbuffer_cnt(ringbuffer_t *ring_buffer)
     60          {
     61          uint32_t head_to_end = ring_buffer->size - ring_buffer->get_index;
     62          return (uint16_t)((head_to_end + ring_buffer->put_index) % ring_buffer->size);
     63          }
     64          
     65          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ringbuffer_clr
        16   -> __aeabi_memset
       0   ringbuffer_getc
      16   ringbuffer_init
        16   -> __aeabi_memset
        16   -> pvPortMalloc
       0   ringbuffer_putc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      26  ringbuffer_clr
      60  ringbuffer_getc
      46  ringbuffer_init
      28  ringbuffer_putc

 
 160 bytes in section .text
 
 160 bytes of CODE memory

Errors: none
Warnings: none
