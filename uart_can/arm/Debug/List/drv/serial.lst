###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         28/Jan/2023  19:17:54
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  D:\proj\velograph\uart_can\arm\drv\serial.c
#    Command line      =
#        -f D:\proj\velograph\uart_can\arm\Debug\Obj\drv\serial.o.rsp
#        (D:\proj\velograph\uart_can\arm\drv\serial.c -D USE_STDPERIPH_DRIVER
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -D STM32F10X_MD -lcN
#        D:\proj\velograph\uart_can\arm\Debug\List\drv --diag_suppress
#        Pa082,pe191 -o D:\proj\velograph\uart_can\arm\Debug\Obj\drv --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Full.h" -I D:\proj\velograph\uart_can\arm\.\
#        -I D:\proj\velograph\uart_can\arm\freertos\include\ -I
#        D:\proj\velograph\uart_can\arm\freertos\portable\IAR\ARM_CM3\ -I
#        D:\proj\velograph\uart_can\arm\drv\ -I
#        D:\proj\velograph\uart_can\arm\lib\STM32F10x_StdPeriph_Driver\inc\ -I
#        D:\proj\velograph\uart_can\arm\lib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I D:\proj\velograph\uart_can\arm\lib\CMSIS\CM3\CoreSupport\ -I
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\CMSIS\Core\Include\\" -I
#        D:\proj\velograph\uart_can\arm\lib\ring_buffer\ -Ol --use_c++_inline)
#        --dependencies=n
#        D:\proj\velograph\uart_can\arm\Debug\Obj\drv\serial.o.d
#    Locale            =  C
#    List file         =
#        D:\proj\velograph\uart_can\arm\Debug\List\drv\serial.lst
#    Object file       =  D:\proj\velograph\uart_can\arm\Debug\Obj\drv\serial.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\proj\velograph\uart_can\arm\drv\serial.c
      1          #include "FreeRTOS.h"
      2          #include "queue.h"
      3          #include "semphr.h"
      4          #include "task.h"
      5          
      6          #include "board.h"
      7          
      8          #include "serial.h"
      9          #include "ring_buffer.h"
     10          
     11          ringbuffer_t uart_rx_buffer;
     12          ringbuffer_t uart_tx_buffer;
     13          xQueueHandle q_uart_rd = 0;
     14          
     15          ////======================================
     16          #if 0   
     17          void ring_init(ring_t *ring, uint8_t * buf, ring_size_t size) {
     18          ring->data = buf;
     19          ring->size = size;
     20          ring->begin = 0;
     21          ring->end = 0;
     22          }
     23          #endif
     24          #if 0
     25          int32_t _ring_write_ch(ring_t *ring, uint8_t ch) {
     26          if (((ring->end + 1) % ring->size) != ring->begin) {
     27            ring->data[ring->end++] = ch;
     28            ring->end %= ring->size;
     29            return (uint32_t) ch;
     30            }
     31          return -1;
     32          }
     33          int32_t ring_write(ring_t *ring, uint8_t * data, ring_size_t size) {
     34          int32_t i;
     35          ///=============================
     36          taskENTER_CRITICAL();
     37          for (i = 0; i < size; i++) {
     38          	if (ring_write_ch(ring, data[i]) < 0)
     39          		return -i;
     40            }
     41          taskEXIT_CRITICAL();
     42          ///============================
     43          return i;
     44          }
     45          #endif
     46          int32_t ring_write(ringbuffer_t *ring, uint8_t * data, uint32_t size) {
     47          int32_t i;
     48          ///=============================
     49          ////taskENTER_CRITICAL();
     50          for (i = 0; i < size; i++) {
     51            ringbuffer_putc(ring, data[i]);
     52          ////    if (ringbuffer_putc(ring, data[i]) < 0)
     53          ////      return -i;
     54            }
     55          ////taskEXIT_CRITICAL();
     56          ///============================
     57          return 0;
     58          }
     59          
     60          #if 0
     61          int32_t ring_read_ch(ring_t *ring, uint8_t * ch) {
     62          	int32_t ret = -1;
     63          
     64          	if (ring->begin != ring->end) {
     65          		ret = ring->data[ring->begin++];
     66          		ring->begin %= ring->size;
     67          		if (ch)
     68          			*ch = ret;
     69          	}
     70          	return ret;
     71          }
     72          
     73          int32_t ring_bytes_free(const ring_t *rb)
     74          {
     75              if (rb->end >= rb->begin)
     76                  return BUFFER_SIZE - (rb->end - rb->begin);
     77              else
     78                  return rb->begin - rb->end - 1;
     79          }
     80          
     81          ring_t output_ring;
     82          ring_t input_ring;
     83          uint8_t output_ring_buffer[BUFFER_SIZE];
     84          uint8_t input_ring_buffer[BUFFER_SIZE];
     85          #endif
     86          
     87          /*-----------------------------------------------------------*/
     88          void init_serial(void)
     89          {
     90          USART_InitTypeDef USART_InitStructure;
     91          NVIC_InitTypeDef NVIC_InitStructure;
     92          /* Enable USART2 clock */
     93          RCC_APB1PeriphClockCmd( RCC_APB1Periph_USART2, ENABLE );	
     94          USART_InitStructure.USART_BaudRate = MY_USART_SPEED;
     95          USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     96          USART_InitStructure.USART_StopBits = USART_StopBits_1;
     97          USART_InitStructure.USART_Parity = USART_Parity_No ;
     98          USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     99          USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    100          		
    101          USART_Init( MY_UART, &USART_InitStructure );
    102          		
    103          USART_ITConfig( MY_UART, USART_IT_RXNE, ENABLE );
    104          
    105          NVIC_InitStructure.NVIC_IRQChannel = MY_UART_IRQn;
    106          NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_KERNEL_INTERRUPT_PRIORITY;
    107          NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    108          NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    109          NVIC_Init( &NVIC_InitStructure );
    110          		
    111          USART_Cmd( MY_UART, ENABLE );		
    112          }
    113          #if 0
    114          void dma_read()
    115          {
    116          	/* Reset DMA channel*/
    117          	dma_channel_reset(DMA1, DMA_CHANNEL6);
    118          
    119          	dma_set_peripheral_address(DMA1, DMA_CHANNEL6, (uint32_t)&USART2_DR);
    120          	dma_set_memory_address(DMA1, DMA_CHANNEL6, (uint32_t)dma_rx_buf);
    121          	dma_set_number_of_data(DMA1, DMA_CHANNEL6, sizeof(dma_rx_buf));
    122          	dma_set_read_from_peripheral(DMA1, DMA_CHANNEL6);
    123          	dma_enable_memory_increment_mode(DMA1, DMA_CHANNEL6);
    124          	dma_enable_circular_mode(DMA1, DMA_CHANNEL6);
    125          	dma_set_peripheral_size(DMA1, DMA_CHANNEL6, DMA_CCR_PSIZE_8BIT);
    126          	dma_set_memory_size(DMA1, DMA_CHANNEL6, DMA_CCR_MSIZE_8BIT);
    127          	dma_set_priority(DMA1, DMA_CHANNEL6, DMA_CCR_PL_HIGH);
    128          
    129          	//dma_enable_transfer_complete_interrupt(DMA1, DMA_CHANNEL6);
    130          
    131          	dma_enable_channel(DMA1, DMA_CHANNEL6);
    132          
    133              usart_enable_rx_dma(USART2);
    134          }
    135          #endif
    136          #if 0
    137          void init_dma_uart_read(void)
    138          {
    139          DMA_InitTypeDef dma; 
    140          
    141          DMA_StructInit(&dma);
    142          
    143          dma.DMA_PeripheralBaseAddr = (uint32_t)&MY_UART ->DR ;
    144          dma.DMA_MemoryBaseAddr = (uint32_t)&dma_rx_buf[0];
    145          dma.DMA_DIR = DMA_DIR_PeripheralSRC;
    146          dma.DMA_BufferSize = sizeof(dma_rx_buf);
    147          dma.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    148          dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
    149          dma.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    150          dma.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    151          DMA_Init(DMA1_Channel6, &dma);
    152          
    153          }
    154          #endif
    155          void usart_setup(void) {
    156          if(ringbuffer_init(&uart_rx_buffer,RB_SIZE)==0)
    157            {
    158              for(;;)
    159              {
    160                ;
    161              }
    162            }
    163          if(ringbuffer_init(&uart_tx_buffer,RB_SIZE)==0)
    164              {
    165              for(;;)
    166              {
    167                ;
    168              }
    169              }
    170          init_serial();
    171          ////init_dma_uart_read();
    172          }
    173          int sendchar_my_uart (int c) 
    174          { 
    175          while (!(MY_UART->SR & 0x0080));
    176          MY_UART->DR = (c & 0x1FF);
    177          return (c);
    178          }
    179          
    180          ////===========================================
    181          void MY_UART_IRQHandler(void)
    182          {
    183          uint8_t ch;
    184          static uint32_t cnt_rd=0;  
    185          uint32_t t_cnt_rd=0;  
    186          int cnt=0;  
    187          
    188          signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    189          ////volatile int32_t data;
    190          volatile uint32_t tsr;
    191          tsr = MY_UART->SR;
    192          if (((tsr & USART_SR_TXE) != 0)) {
    193            cnt= ringbuffer_getc(&uart_tx_buffer ,&ch); 
    194             if(cnt>=0)
    195                {
    196                MY_UART->DR=ch;
    197                if(cnt==0)
    198                  MY_UART->CR1 &= ~USART_CR1_TXEIE;
    199                }
    200               else
    201                  MY_UART->CR1 &= ~USART_CR1_TXEIE;
    202               MY_UART->SR &= ~USART_SR_TXE;	          // clear interrupt
    203             }
    204          if (tsr & USART_FLAG_RXNE) 
    205              {                  // 
    206               ch = (uint8_t)(MY_UART->DR & 0x0FF);
    207               ringbuffer_putc(&uart_rx_buffer, ch); 
    208               MY_UART->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
    209               if(ch=='\r')
    210                  {
    211                  t_cnt_rd=cnt_rd; 
    212                  xQueueSendFromISR(q_uart_rd, &t_cnt_rd, &xHigherPriorityTaskWoken);
    213                  cnt_rd=0;
    214                  }
    215               else
    216                  {
    217                  cnt_rd++;
    218                  }
    219               
    220              }
    221          
    222          }
    223          
    224          
    225          ///===========================================
    226          int write_my_uart( char *ptr, int len) {
    227          int ret;
    228          ret = ring_write(&uart_tx_buffer, (uint8_t *) ptr, len);
    229            if (ret < 0)
    230              ret = -ret;
    231           MY_UART->CR1 |= USART_CR1_TXEIE;	          // 
    232          return ret;
    233          }
    234          
    235          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   USART2_IRQHandler
        24   -> ringbuffer_getc
        24   -> ringbuffer_putc
        24   -> xQueueGenericSendFromISR
      32   init_serial
        32   -> NVIC_Init
        32   -> RCC_APB1PeriphClockCmd
        32   -> USART_Cmd
        32   -> USART_ITConfig
        32   -> USART_Init
      24   ring_write
        24   -> ringbuffer_putc
       0   sendchar_my_uart
       8   usart_setup
         8   -> init_serial
         8   -> ringbuffer_init
       8   write_my_uart
         8   -> ring_write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
     162  USART2_IRQHandler
       4  cnt_rd
     114  init_serial
       4  q_uart_rd
      30  ring_write
      20  sendchar_my_uart
      12  uart_rx_buffer
      12  uart_tx_buffer
      40  usart_setup
      30  write_my_uart

 
  32 bytes in section .bss
 424 bytes in section .text
 
 424 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
