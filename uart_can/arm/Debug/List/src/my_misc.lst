###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         28/Jan/2023  19:17:54
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  D:\proj\velograph\uart_can\arm\my_misc.c
#    Command line      =
#        -f D:\proj\velograph\uart_can\arm\Debug\Obj\src\my_misc.o.rsp
#        (D:\proj\velograph\uart_can\arm\my_misc.c -D USE_STDPERIPH_DRIVER -D
#        VECT_TAB_FLASH -D IAR_ARM_CM3 -D STM32F10X_MD -lcN
#        D:\proj\velograph\uart_can\arm\Debug\List\src --diag_suppress
#        Pa082,pe191 -o D:\proj\velograph\uart_can\arm\Debug\Obj\src --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Full.h" -I D:\proj\velograph\uart_can\arm\.\
#        -I D:\proj\velograph\uart_can\arm\freertos\include\ -I
#        D:\proj\velograph\uart_can\arm\freertos\portable\IAR\ARM_CM3\ -I
#        D:\proj\velograph\uart_can\arm\drv\ -I
#        D:\proj\velograph\uart_can\arm\lib\STM32F10x_StdPeriph_Driver\inc\ -I
#        D:\proj\velograph\uart_can\arm\lib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I D:\proj\velograph\uart_can\arm\lib\CMSIS\CM3\CoreSupport\ -I
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\CMSIS\Core\Include\\" -I
#        D:\proj\velograph\uart_can\arm\lib\ring_buffer\ -Ol --use_c++_inline)
#        --dependencies=n
#        D:\proj\velograph\uart_can\arm\Debug\Obj\src\my_misc.o.d
#    Locale            =  C
#    List file         =
#        D:\proj\velograph\uart_can\arm\Debug\List\src\my_misc.lst
#    Object file       =
#        D:\proj\velograph\uart_can\arm\Debug\Obj\src\my_misc.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

D:\proj\velograph\uart_can\arm\my_misc.c
      1          #include <stdint.h>
      2          uint8_t halfbyte_to_hexascii(uint8_t _halfbyte)
      3          {
      4          _halfbyte &= 0x0F;
      5          if(_halfbyte >= 10) return('A' + _halfbyte - 10);
      6          else return('0' + _halfbyte);
      7          }
      8          
      9          uint8_t hexascii_to_halfbyte(uint8_t _ascii)
     10          {
     11          if((_ascii >= '0') && (_ascii <= '9')) 
     12            return(_ascii - '0');
     13          if((_ascii >= 'a') && (_ascii <= 'f')) 
     14            return(_ascii - 'a');
     15          if((_ascii >= 'A') && (_ascii <= 'F')) 
     16            return(_ascii - 'A');
     17          return(0xFF);
     18          }
     19          
     20          void bin2hex(uint8_t *dst, unsigned char c) {
     21              uint8_t nibble;
     22          
     23              nibble = ((c & 0xf0) >> 4) + '0';
     24              if (nibble >= 0x3a)
     25          	nibble += 7;
     26              *dst++ = nibble;
     27          
     28              nibble = (c & 0x0f) + '0';
     29              if (nibble >= 0x3a)
     30          	nibble += 7;
     31              *dst = nibble;
     32          }
     33          
     34          uint8_t nibble2bin(uint8_t s) {
     35          
     36              if (s >= '0' && s <= '9')
     37          	return s - '0';
     38              if (s >= 'A' && s <= 'F')
     39          	return s - 'A' + 10;
     40              return s - 'a' + 10;
     41          }
     42          
     43          uint8_t hex2bin(char *s) {
     44              uint8_t x;
     45          
     46              x = nibble2bin(*s++) << 4;
     47              x |= nibble2bin(*s);
     48              return x;
     49          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   bin2hex
       0   halfbyte_to_hexascii
      16   hex2bin
        16   -> nibble2bin
       0   hexascii_to_halfbyte
       0   nibble2bin


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      42  bin2hex
      24  halfbyte_to_hexascii
      30  hex2bin
      52  hexascii_to_halfbyte
      38  nibble2bin

 
 186 bytes in section .text
 
 186 bytes of CODE memory

Errors: none
Warnings: none
